using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ide.Macros
{
  public macro GenerateDeserializer()
  {
    Deserializer.Transform(Macros.ImplicitCTX())
  }
  
  module Deserializer
  {
    public Transform(typer: Typer): PExpr
    {
      def registry = MessageRegistry.GetRegistry(typer.Manager);
      def exprs = registry.Map((msgId, type) => <[ case: | $(msgId) => $(type: typed).Deserialize($("reader": global)) :> $("T" : global) ]>);
      <[ 
        match ($("reader": global).ReadInt16())
        {
          ..$exprs
        }
      ]>
    }
    
    public GenerateModule(manager: ManagerClass): void
    {
      def className = "Deserializer";
      def node = manager.CoreEnv.EnterIntoNamespace(["Nitra", "Messages"]);
      def classOpt = node.CurrentNamespace.LookupType([className], 0);
      
      match (classOpt)
      {
        | Some(_ is TypeBuilder) => ()
        | None() => 
          manager.MacroColors.InGlobalColor(
          fun()
          {
            def tb = node.Define(<[decl:
            public module $(className: usesite)
            {
              public Deserialize[T]($("reader": global): System.IO.BinaryReader): T
              {
                GenerateDeserializer() :> T
              }
            } ]>);
            tb.Compile()
          })
        
        | _ => 
          def key = "Nitra.Messages.Deserializer declared";
          when (manager.UserData[key] == null)
          {
            Message.Error("Referenced assembly contains Nitra.Messages.Deserializer definition.");
            manager.UserData[key] = true;
          }
      }
    }
  }
}