using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Macros;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ide.Macros
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(tb: TypeBuilder)
  {
    NitraMessageImpl(Macros.ImplicitCTX(), tb).TransformBeforeTypedMembers()
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(tb: TypeBuilder)
  {
    NitraMessageImpl(Macros.ImplicitCTX(), tb).TransformWithTypedMembers()
  }

  class NitraMessageImpl 
  {
    _typer             : Typer;
    _tb                : TypeBuilder;
    _immutableArray_tc : TypeInfo;
    _binaryWriterType  : FixedType.Class;
    _binaryReaderType  : FixedType.Class;

    public this([NotNull] typer : Typer, [NotNull] tb : TypeBuilder)
    {
      _typer = typer;
      _tb    = tb;

      DefineMacroContext(typer);

      def immutableArray = <[ ttype: System.Collections.Immutable.ImmutableArray[_] ]>;

      unless (CheckBind(immutableArray))
        Message.FatalError(_tb.Location, "Current project must contain reference to System.Collections.Immutable.dll or implement System.Collections.Immutable.ImmutableArray<>.");

      _immutableArray_tc = immutableArray.TypeInfo;

      _binaryWriterType = <[ ttype: System.IO.BinaryWriter ]>;
      _binaryReaderType = <[ ttype: System.IO.BinaryReader ]>;
    }

    FindSerializeMethod(type: FixedType): option[MethodBuilder]
    {
      def members = type.TypeInfo?.LookupMember("Serialize");
      
      match (members)
      {
        | [method is MethodBuilder] => Some(method)
        | _ => None()
      }
    }
    
    public IsSupportSerialize(type : FixedType) : bool
    {
      match (FindSerializeMethod(type))
      {
        | Some(method) => 
          method.Header.Parameters.Length == 1 
          && method.Header.Parameters.Head.Type.Equals(_binaryWriterType)
          && method.ReturnType is FixedType.Void
          && !method.IsStatic
          && method.IsPublic
        | _ => false
      }
    }

    public IsSupportDeserialize(type : FixedType) : bool
    {
      def members = type.TypeInfo?.LookupMember("Deserialize");
      
      match (members)
      {
        | [method is MethodBuilder] => 
          method.Header.Parameters.Length == 1 
          && method.Header.Parameters.Head.Type.Equals(_binaryReaderType)
          && method.ReturnType.Equals(type)
          && method.IsStatic
          && method.IsPublic
          
        | _ => false
      }
    }

    public IsImmutableArray(type : FixedType) : bool
    {
      type.TypeInfo?.Equals(_immutableArray_tc)
    }

    public IsNemerleList(type : FixedType) : bool
    {
      type.TypeInfo?.Equals(_typer.InternalType.Nemerle_list_tc)
    }

    public CheckBind(type : FixedType) : bool
    {
      !(type is FixedType.Void || _typer.Manager.InternalType.Object.Equals(type))
    }

    [Record]
    class RecordField
    {
      public Name: string;
      public Type: FixedType;
      public Declared: bool
    }
    
    public TransformBeforeTypedMembers(): void
    {
      when (IsSupportedType(_tb))
      {
        def id = GetNextMessageId(_tb.UserData);
        
        if (_tb.IsStruct)
        {
          Define(<[decl: public MsgId: short { get { $id }} ]>);
          Define(
          <[decl: 
            public Serialize(writer : System.IO.BinaryWriter) : void 
            {
              writer.Write(this.MsgId);
            }
          ]>);
        }
        else if (_tb.GetSuperTypes().Exists(IsSupportSerialize))
        {
          Define(<[decl: public override MsgId: short { get { $id }} ]>);
          Define(<[decl: 
            public override Serialize(writer : System.IO.BinaryWriter) : void 
            {
              base.Serialize(writer);
            }
          ]>);
        }
        else
        {
          Define(<[decl: public virtual MsgId: short { get { $id }} ]>);
          Define(<[decl: 
            public virtual Serialize(writer : System.IO.BinaryWriter) : void 
            {
              writer.Write(this.MsgId);
            }
          ]>);
        }
      
        _tb.AddMacroAttribute(<[ Nemerle.Core.Record ]>);
      }
    }
    
    public TransformWithTypedMembers(): void
    {
      def type = _tb.GetMemType();

      when (IsSupportedType(_tb))
      when (FindSerializeMethod(type) is Some(serializeMethod))
      {
        def fields = GetRecordFields();
        
        serializeMethod.Body = 
        <[ 
           $(serializeMethod.Body);
           ..$(fields.Filter(_.Declared).Map(Serialize))
        ]>;

        Define(
          <[decl: 
            public static Deserialize(reader : System.IO.BinaryReader) : $(type : typed)
            {
              def msgId = reader.ReadInt16();
              def msg = $(type : typed)(..$(fields.Map(Deserialize)));
              assert2(msgId == msg.MsgId);
              assert(msgId == msg.MsgId);
              msg
            }
          ]>);
      }
    }
    
    Define(member: ClassMember): void { _ = _tb.DefineWithSource(member) }
    
    GetRecordFields(): list[RecordField] 
    {
      Macros.DefineCTX(_typer);
      def mappedMemberAttr = <[ ttype: Nemerle.Internal.MappedMemberAttribute; ]>.TypeInfo;
      
      def recordCtor = 
        _tb.GetConstructors(BindingFlags.Public).Find(m => m.IsCustomAttributeDefined("Nemerle.Internal.RecordCtorAttribute"));
      
      def declaredFieldNames = _tb.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public).Filter(x => !x.IsStatic).Map(x => x.Name);
      match (recordCtor)
      {
        | Some(ctor) => 
          ctor.GetParameters().Map(param => 
          {
            match (param.AttributesAndModifiers.FindAttributeWithArgs(mappedMemberAttr, _tb.GlobalEnv)) 
            {
              | Some((_, [<[$(name: string)]>])) =>
                  RecordField(name, param.Type.FixedValue, declaredFieldNames.Contains(name))
              | _ => assert(false)
            }
          })
        | None => Message.FatalError(_tb.Location, "Record constructor was not found")
      }
    }

    GetNextMessageId(userData: System.Collections.IDictionary): short
    {
      def key = "nitra_message_id";
      def id = if (userData.Contains(key)) userData[key] :> short + 1 else 0;
      userData[key] = id;
      id
    }

    IsSupportedType(_tb: TypeBuilder): bool
    {
      match (_tb)
      {
        | _ when _tb.IsDelegate with n = "delegates"
        | _ when _tb.IsInterface with n = "interfaces"
        | _ when _tb.IsModule with n = "modules" => 
            Message.Error(_tb.Location, $"$n are not supported."); 
            false
        | _ => true
      }
    }

    Serialize(field : RecordField): PExpr
    {
      def expr = SerializeValue(field.Type, <[ this.$(field.Name : usesite) ]>);
      if (expr == null)
      {
        assert2(false);
        Message.Error("The NitraMessage macro supports types which implement Nitra.Messages.INitraMessage interface or primitive types. " +
                      $"Try to add NitraMessage macro attribute to $(field.Type) type.");
        <[ () ]>
      }
      else
        expr
    }

    SerializeValue(type : FixedType, valueExpr : PExpr): PExpr
    {
      if (IsSupportSerialize(type))
        <[ $valueExpr.Serialize(writer); ]>
      else if (type.IsPrimitive)
        <[ writer.Write($valueExpr); ]>
      else if (type.Equals(_typer.InternalType.String))
        <[ writer.Write($valueExpr ?? ""); ]>
      else if (IsNemerleList(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;

        <[
          def lst = $valueExpr;
          if (lst == null)
          {
            writer.Write(0 : UInt32)
          }
          else
          {
            def len = lst.Length;
            writer.Write(len);
            def loop(lst : list[_]) : void
            {
              | head :: tail => 
              loop(tail); // reverse order (can cause StackOverflowException)
              $(SerializeValue(elemType, <[ head ]>));

              | null | [] => ()
            }
            loop(lst)
          }
        ]>
      }
      else if (IsImmutableArray(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;

        <[
          def immutableArray = $valueExpr;
          // The default value of ImmutableArray<T> has the underlying array initialized with a null reference.
          // Trying to call `Lenght` or `IsEmpty` on such arrays will raise an exception, so we must check `IsDefault`
          // property first.
          if (immutableArray.IsDefault)
          {
            writer.Write(0 : UInt32); 
          }
          else
          {
            writer.Write(immutableArray.Length);
          
            foreach (elem in immutableArray)
              $(SerializeValue(elemType, <[ elem ]>));
          }
        ]>
      }
      else
      {
        null
      }
    }

    Deserialize(field : RecordField): PExpr
    {
      DeserializeValue(field.Type)
    }

    DeserializeValue(type : FixedType) : PExpr
    {
      if (type.IsPrimitive || type.Equals(_typer.InternalType.String))
        DeserializePrimitiveValue(type)
      else if (IsNemerleList(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;
        <[
          def len = reader.ReadUInt32();
          assert(len >= 0);
          def loop(i : uint, result)
          {
            if (i > 0)
            {
              def value = $(DeserializeValue(elemType));
              loop(i - 1, value :: result);
            }
            else result
          }

          loop(len, [])
        ]>
      }
      else if (IsImmutableArray(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;

        <[
          def len = reader.ReadUInt32();
          assert(len >= 0);
          if (len == 0)
            System.Collections.Immutable.ImmutableArray.Create.[$(elemType : typed)]()
          else
          {
            def builder = System.Collections.Immutable.ImmutableArray.CreateBuilder.[$(elemType : typed)]();
            def loop(i : uint) : void
            {
              when (i > 0)
              {
                def value = $(DeserializeValue(elemType));
                builder.Add(value);
                loop(i - 1);
              }
            }

            loop(len);
            builder.ToImmutable()
          }
        ]>
      }
      else if (IsSupportDeserialize(type))
        <[ $(type : typed).Deserialize(reader); ]>
      else
      {
        Message.Error($"Type '$type' don't support deserialization because have no method 'public static Deserialize(reader : System.IO.BinaryReader) : $type'.");
        <[ default(type) ]>
      }
    }

    DeserializePrimitiveValue(type : FixedType) : PExpr
    {
      def ti = type.TypeInfo;
      assert(ti != null);
      def internalType = _typer.InternalType;

      def readExpr =
        if (internalType.Int16_tc.Equals(ti))        <[ ReadInt16 ]>
        else if (internalType.Int32_tc.Equals(ti))   <[ ReadInt32 ]>
        else if (internalType.Int64_tc.Equals(ti))   <[ ReadInt64 ]>
        else if (internalType.Char_tc.Equals(ti))    <[ ReadChar ]>
        else if (internalType.SByte_tc.Equals(ti))   <[ ReadSByte ]>

        else if (internalType.UInt16_tc.Equals(ti))  <[ ReadUInt16 ]>
        else if (internalType.UInt32_tc.Equals(ti))  <[ ReadUInt32 ]>
        else if (internalType.UInt64_tc.Equals(ti))  <[ ReadUInt64 ]>
        else if (internalType.Byte_tc.Equals(ti))    <[ ReadByte ]>

        else if (internalType.Single_tc.Equals(ti))  <[ ReadSingle ]>
        else if (internalType.Double_tc.Equals(ti))  <[ ReadDouble ]>
        else if (internalType.Decimal_tc.Equals(ti)) <[ ReadDecimal ]>

        else if (internalType.Boolean_tc.Equals(ti)) <[ ReadBoolean ]>

        else if (internalType.String_tc.Equals(ti))  <[ ReadString ]>
        else
          assert(false);

      <[ reader.$readExpr() ]>
    }
  }
}
