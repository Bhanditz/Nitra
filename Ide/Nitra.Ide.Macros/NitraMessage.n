using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Macros;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ide.Macros
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(ty: TypeBuilder)
  {
    NitraMessageImpl.AddInterface(Macros.ImplicitCTX(), ty)
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(ty: TypeBuilder)
  {
    NitraMessageImpl.Transform(Macros.ImplicitCTX(), ty)
  }
  
  module NitraMessageImpl 
  {
    public CheckBind(typer : Typer, type : FixedType) : bool
    {
      !(type is FixedType.Void || typer.Manager.InternalType.Object.Equals(type))
    }
    
    public AddInterface(typer: Typer, tb: TypeBuilder): void
    {
       DefineMacroContext(typer);
       when (IsSupportedType(tb))
       {
         def messageInterface = typer.Env.BindFixedType(<[ Nitra.Messages.INitraMessage ]>);
         when (CheckBind(typer, messageInterface))
           tb.AddImplementedInterface (<[ $(messageInterface : typed) ]>);
       }
    }
    
    public Transform(typer: Typer, tb: TypeBuilder): void
    {
       DefineMacroContext(typer);
       when (IsSupportedType(tb))
       {
         def messageInterface = typer.Env.BindFixedType(<[ Nitra.Messages.INitraMessage ]>);
         if (CheckBind(typer, messageInterface))
         {
           def id = GetNextMessageId(tb.UserData);
           tb.Define(<[decl: public static MsgId: short { get { $id }} ]>);
           
           def fields = tb.GetFields().Filter(x => !x.IsStatic);
           //_ = Diagnostics.Debugger.Launch();
           def serializeExprs = <[ writer.Write($id); ]> :: fields.Map(x => Serialize(x, messageInterface));
           def deserializeExprs = fields.Map(x => Deserialize(x, messageInterface));
             
           tb.Define(
           <[decl: 
             public Serialize(writer: BinaryWriter): void 
             {
               ..$serializeExprs
             }
           ]>);
           
           
           
           tb.Define(
           <[decl: 
             public Deserialize(reader: BinaryReader): $(tb.Name: usesite)
             {
               ..$deserializeExprs
             }
           ]>);
         }
         else 
           Message.Error(tb.Location, "Current project must contain INitraMessage interface definition");
       }
    }
    
    GetNextMessageId(userData: System.Collections.IDictionary): short
    {
      def key = "nitra_message_id";
      def id = if (userData.Contains(key)) userData[key] :> short + 1 else 0;
      userData[key] = id;
      id
    }
    
    IsSupportedType(tb: TypeBuilder): bool {
      match (tb) {
      | _ when tb.IsDelegate with n = "delegates"
      | _ when tb.IsInterface with n = "interfaces"
      | _ when tb.IsModule with n = "modules" => 
          Message.Error(tb.Location, $"$n are not supported."); 
          false
      | _ => true
      }
    }
    
    Serialize(field: IField, messageInterface: FixedType): PExpr
    {
      //if (ty.GetInterfaces().Exists(x => x.Name == messageInterface.TypeInfo.Name)) 
//        <[ $(field.Name: usesite).Serialize(writer); ]>
  //    else 
        <[ writer.Write($(field.Name: usesite)); ]>
    }
    
    Deserialize(field: IField, messageInterface: FixedType): PExpr
    {
      <[]> // reader.Read($(
    }
  }
}
