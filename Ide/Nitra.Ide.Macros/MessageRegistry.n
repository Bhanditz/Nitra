using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ide.Macros
{
  public macro GenerateDeserialize()
  {
    GenerateDeserializeImpl.Transform(Macros.ImplicitCTX())
  }
  
  module GenerateDeserializeImpl
  {
    public Transform(typer: Typer): PExpr
    {
      def registry = MessageRegistry.GetRegistry(typer.Manager);
      def exprs = registry.Map((msgId, type) => <[ case: | $(msgId) => $(type: typed).Deserialize($("reader": global)) ]>);
      <[ 
        match ($("reader": global).ReadInt16())
        {
          ..$exprs
        }
      ]>
    }
  }
  
  module MessageRegistry
  {
    key = "nitra_messages";
    
    public Register(manager: ManagerClass, type: FixedType): short
    {
      def registry: Dictionary[short, FixedType] = 
      {
        def userData = manager.UserData;
        if (userData.Contains(key)) 
          userData[key] :> Dictionary[_, _]
        else
        {
          def reg = Dictionary();
          userData[key] = reg;
          reg
        }
      }
      
      def id = if (registry.IsEmpty()) 0 else registry.Keys.Max() + 1;
      registry[id] = type;
      id
    }
    
    public GetRegistry(manager: ManagerClass): Seq[short * FixedType] 
    {
        match (manager.UserData[key])
        {
          | reg is Dictionary[short, FixedType] => reg.Map(pair => (pair.Key, pair.Value)) 
          | _ => []
        }
    }
  }
}