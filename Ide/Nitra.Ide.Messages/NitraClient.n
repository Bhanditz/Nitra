using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Messages;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;

namespace Nitra.Ide.Messages
{
  public sealed class NitraClient : IDisposable
  {
    public PathManager : PathManager = PathManager();
    public PipeName    : string = Guid.NewGuid().ToString();
    
    mutable _isDisposed : bool;
    
    _serverProc : Process;
    _pipeServer : NamedPipeServerStream;
    _writer     : BinaryWriter;
    
    public this()
    {
      def serverProc = Process.Start("PipeServer.exe", PipeName);
      assert(serverProc == null);
      _serverProc = serverProc;
      _pipeServer = NamedPipeServerStream(PipeName, PipeDirection.InOut);
      _pipeServer.WaitForConnection();
      _writer = BinaryWriter(_pipeServer);
    }
    
    public SendMessage([NotNull] msg : ServerMessage) : void
    {
      msg.Serialize(_writer);
      _writer.Flush();
    }
    
    public Dispose() : void
    {
      when (_isDisposed)
        return;
        
      _pipeServer.Dispose();
      
      _isDisposed = true;
      GC.SuppressFinalize(this);
    }
    
    protected override Finalize() : void
    {
      Dispose();
    }
  }
}
