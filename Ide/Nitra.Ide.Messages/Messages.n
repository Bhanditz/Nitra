using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.Ide.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Nitra.Messages
{
  [NitraMessage]
  public class Message
  {
    public static AssemblyVersionGuid : string = MakeGuidString();
  }

  [NitraMessage]
  public struct FileChange
  {
    public Span : NSpan;
    public Text : string;
  }

  [NitraMessage]
  public class RouterMessage : Message
  {
  }

  [NitraMessage]
  public variant ServerMessage : RouterMessage
  {
    | CheckVersion           { assemblyVersionGuid : string; }
    | LoadSolution           { path    : string; }
    | UnloadSolution         
    | LoadProject            { path    : string; projectDir : string; }
    | UnloadProject          { path    : string; }
    | RanameProject          { oldPath : string; newPath : string; }
    | LoadReference          { path    : string; }
    | UnloadReference        { path    : string; }
    | LoadProjectReference   { path    : string; }
    | UnloadProjectReference { path    : string; }
    | LoadFile               { path    : string; id : int; }
    | UnloadFile             { id : int; }
    | RanameFile             { id : int; newPath : string; }
    | LoadInMemoryFile       { id : int; name    : string; content : string; }
    | UnloadInMemoryFile     { id : int; }
    | ChangeFileInsert       { id : int; pos : int; text : string; }
    | ChangeFileDelete       { id : int; span : NSpan; }
    | ChangeFileReplace      { id : int; span : NSpan;  text : string; }
    | ChangeFileBatch        { id : int; changes : ImmutableArray[FileChange]; }
  }
  
  [NitraMessage]
  public struct NSpan
  {
    public StartPos : int;
    public EndPos   : int
  }
}