using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nemerle.Parser
{
  public struct Location
  {
    public Source   : SourceSnapshot { get; }
    public StartPos : int            { get; }
    public EndPos   : int            { get; }
    public NToken   : NToken         { get { NToken(StartPos, EndPos) } }

    public this(source : SourceSnapshot, startPos : int, endPos : int)
    {
      assert(startPos <= endPos);
      Source   = source;
      StartPos = startPos;
      EndPos   = endPos;
    }

    public this(source : SourceSnapshot, tok : NToken)
    {
      this(source, tok.StartPos, tok.EndPos)
    }

    public this(source : SourceSnapshot, a : NToken, b : NToken)
    {
      this(source, Math.Min(a.StartPos, b.StartPos), Math.Max(a.EndPos, b.EndPos))
    }

    [Accessor] private static default : Location = Location(SourceSnapshot.Default, -1, -1);

    public IsEmpty : bool { get { StartPos == EndPos } }

    public GetText() : string { Source.OriginalText.Substring(StartPos, EndPos - StartPos) }

    public StartLineColumn : int * int { get { Source.PositionToLineColumn(StartPos) } }
    public EndLineColumn   : int * int { get { Source.PositionToLineColumn(EndPos) } }

    public override ToString() : string 
    {
      $<#Start: $StartPos Len: $(EndPos - StartPos)#>
    }

    public Combine(other : Location) : Location
    {
      assert(object.ReferenceEquals(this.Source, other.Source));
      Location(
        this.Source,
        Math.Min(this.StartPos, other.StartPos),
        Math.Max(this.EndPos, other.EndPos))
    }

    public static @+(a : Location, b : Location) : Location
    {
      a.Combine(b)
    }
  }
}