using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser.Internal
{
  public class Parser
  {
    private _grammars : Hashtable[GrammarDescriptor, IGrammar] = Hashtable();
    private _stateStack : SCG.Stack[SCG.List[IGrammarState]] = SCG.Stack();

    public ParsingSource : SourceSnapshot { get; }

    public this(grammar : IGrammar, parsingSource : SourceSnapshot)
    {
      ParsingSource = parsingSource;
      _grammars.Add(grammar.Descriptor, grammar);
    }

    public PushState() : void
    {
      def states = SCG.List();
      foreach (kv in _grammars)
        states.Add(kv.Value.SaveState());
      _stateStack.Push(states);
    }

    public PopState() : void
    {
      def states = _stateStack.Pop();
      when (states.Count != _grammars.Count)
      {
        _grammars.Clear();
        foreach (state in states)
          _grammars.Add(state.Grammar.Descriptor, state.Grammar);
        foreach (state in states)
          state.LoadThisState();
      }
    }

    public GetGrammar(descriptor : GrammarDescriptor) : option[IGrammar]
    {
      _grammars.Get(descriptor);
    }

    public AddGrammar(descriptor : GrammarDescriptor) : void
    {
      def toInit = SCG.List();
      def toAdd  = SCG.Queue();
      toAdd.Enqueue(descriptor);
      while (toAdd.Count > 0)
      {
        def descriptor = toAdd.Dequeue();
        when (!_grammars.ContainsKey(descriptor))
        {
          foreach (descriptor in descriptor.Dependencies)
            toAdd.Enqueue(descriptor);
          def newGrammar = descriptor.NewGrammar(this);
          toInit.Add(newGrammar);
          _grammars.Add(descriptor, newGrammar);
        }
      }
      foreach (newGrammar in toInit)
        newGrammar.Init();
    }
  }
}
