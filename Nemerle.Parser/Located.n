using System;
using System.Text.RegularExpressions;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Text;

namespace Nemerle.Parser
{
  public class Located
  {
    [Accessor(flags = WantSetter)]
    mutable location : Location;

    public StartPos : int { get { location.StartPos } }
    public EndPos   : int { get { location.EndPos } }

    public this()
    {
      this.location = Location.Default;
    }

    public this(location : Location)
    {
      this.location = location;
    }

    public static ExtractPosAndLen(msg : string) : int * int
    {
      regexp match (msg)
      {
        | @"\[(?<pos : int>\d+):(?<len : int>\d+)]" => (pos, len)
        | _                                         => (-1, -1)
      }
    }

    protected BuildMessage(msg : string) : string
    {
      def pos = Location.StartPos;
      def len = Location.EndPos - Location.StartPos;
      $"$(Location.Source.FileName)$(Location.StartLineColumn.ToString()):[$pos:$len]: $msg"
    }
    
    public GetText() : string {  Location.GetText() }
    
    public GetText(token : NToken) : string
    {
      Location.Source.OriginalText.Substring(token.StartPos, token.EndPos - token.StartPos)
    }
  }
}