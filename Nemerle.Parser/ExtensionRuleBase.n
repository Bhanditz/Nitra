using System.Collections.Generic;

namespace Nemerle.Parser
{
  [Record]
  public class ExtensionRuleDescriptor[RuleType]
  {
    public Create : IGrammar -> RuleType { get; }

    public Name : string { get; }

    public PrecedenceLesserThan  : IList[ExtensionRuleDescriptor[RuleType]] { get; }
    public PrecedenceEqualsTo    : IList[ExtensionRuleDescriptor[RuleType]] { get; }
    public PrecedenceGreaterThan : IList[ExtensionRuleDescriptor[RuleType]] { get; }
  }

  [Record]
  public abstract class ExtensionPrefixBase[ReturnType]
  {
    public LowerBound : char { get; }
    public UpperBound : char { get; }

    public abstract Parse(pos : int, test : string) : int;
    public abstract Parse(pos : int, test : string, result : ref ReturnType) : int;

    public abstract Descriptor : ExtensionRuleDescriptor[ExtensionPrefixBase[ReturnType]] { get; }
  }

  [Record]
  public abstract class ExtensionPostfixRuleBase[ReturnType]
  {
    //К этому свойству будет много обращений во время разбора.
    public BindingPower : int { get; }

    public LowerBound : char { get; }
    public UpperBound : char { get; }

    //pos позиция с которой надо продолжать разбор
    public abstract Parse(pos : int, test : string) : int;

    //result in/out на входе результат разбора префикса
    //на выходе результат рабора правила (если разобралось)
    public abstract Parse(startPos : int, pos : int, test : string, result : ref ReturnType) : int;

    public abstract Descriptor : ExtensionRuleDescriptor[ExtensionPostfixRuleBase[ReturnType]] { get; }
  }
}
