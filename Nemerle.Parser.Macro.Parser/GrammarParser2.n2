using Nemerle.Parser;

syntax module GrammarParser2
{
  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBracket  = "(" | "{" | "[";
  span class CloseBracket = ")" | "}" | "]";

  brackets "(", ")";
  brackets "{", "}";
  brackets "[", "]";

  [StartRule, Ast(                OpenNamespaces, Declarations)]
  syntax Start : Ast          = s OpenNamespace*  TopDeclaration* !Any;

  [Ast(                         Using,   Namespace,  Semicolon)]
  syntax OpenNamespace : Ast  = "using"s QIdentifier ";"s;

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
	token Spaces = Space+;


  [Ast()]
  syntax IgnoreToken : Ast;

  [Ast(                                      Start, Body,           NewLine)]
  syntax SingleLineComment  is IgnoreToken = "//"   (!NewLine Any)* NewLine?;

  [Ast(                                      Start, Body,        End)]
  syntax MultiLineComment   is IgnoreToken = "/*"   (!"*/" Any)* "*/";

  [Ast(Space)]
  syntax SpaceToken         is IgnoreToken = Spaces;


  syntax s : void = IgnoreToken*;                      /* optional spacer          */
  syntax S : void = !IdentifierPartCharacters s; /* identifier break spacer  */


  token LetterCharacter       = [Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter    = [Mn, Mc];
  token DecimalDigitCharacter = [Nd];
  token ConnectingCharacter   = [Pc];
  token FormattingCharacter   = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit           = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar = "\"" | "\\";
  token ReservedCharChar   = "\'" | "\\";

  [Ast()]
  syntax TopDeclaration : Ast;

  [Ast(                                     Syntax,   Module,   Name,      Open, Declarations, Close)]
  syntax SyntaxModule is TopDeclaration   = "syntax"S "module"S Identifier "{"s  Declaration*  "}"s;


  [SpanClass(String)]
  [Ast(                                     Open, Parts,      Close)]
  syntax StringLiteral : Ast              = "\""  StringPart* "\"" s;


  [Ast()]
  syntax StringPart : Ast;

  [Ast(                                                  Chars)]
  syntax SimpleStringPart                 is StringPart = (!ReservedStringChar Any)+;

  [Ast(                                                   Prefix, Digit0,  Digit1,  Digit2,  Digit3)]
  syntax UnicodeEscapeSequenceStringPart  is StringPart = "\\u"   HexDigit HexDigit HexDigit HexDigit;

  [Ast(Backslash, Char)]
  syntax EscapeSequenceStringPart         is StringPart = "\\" Any;


  [SpanClass(Char)]
  [Ast(                                     Open, Char,    Close)]
  syntax CharLiteral : Ast                = "\'"  CharPart "\'" s;


  [Ast()]
  syntax CharPart : Ast;

  [Ast(                                                                   Char)]
  syntax SimpleCharPart                   is CharPart = !ReservedCharChar Any;

  [Ast(                                                 Prefix, Digit0,  Digit1,  Digit2,  Digit3)]
  syntax UnicodeEscapeSequenceCharPart    is CharPart = "\\u"   HexDigit HexDigit HexDigit HexDigit;

  [Ast(                                                 Backslash, Char)]
  syntax EscapeSequenceCharPart           is CharPart = "\\"       Any;


  token Digits = ['0'..'9']+;

  [SpanClass(Number)]
  [Ast(                                     Digits)]
  syntax Number : Ast                     = Digits s;

  [Ast(                                     Name)]
  syntax Identifier : Ast                 = IdentifierBody s;

  [Ast(                                     Names)]
  syntax QIdentifier : Ast                = (Identifier; "."s)+;

  [Ast(                                     TypeParts)]
  syntax NemerleType : Ast                = (NemerleTypePart; "."s)+;

  [Ast(                                     Name,            TypeArgs)]
  syntax NemerleTypePart : Ast            = IdentifierBody s (("."s)? "["s (NemerleType; ","s)* "]"s)?;


  [Ast()]
  syntax RuleAttribute      : Ast;

  [Ast(                                        AttributeName)]
  syntax StartAttribute     is RuleAttribute = "StartRule"S;

  [Ast(                                        AttributeName, Open, Names,              Close)]
  syntax AstAttribute       is RuleAttribute = "Ast"S         "("s  (Identifier; ","s)* ")"s;

  [Ast(                                        AttributeName, Open, Class,      Close)]
  syntax SpanClassAttribute is RuleAttribute = "SpanClass"S   "("s  QIdentifier ")"s;


  [Ast(                                    Open, Attributes,            Close)]
  syntax RuleAttributeList        : Ast  = "["s  (RuleAttribute; ","s)+ "]"s;

  [Ast(AttributeLists)]
  syntax RuleAttributes           : Ast  = RuleAttributeList*;


  [Ast()]
  syntax Declaration            : Ast;

  [Ast(                                          Attributes,    Token,   Name,      Assign, Rule,     Semicolon)]
  syntax TokenRuleDecl          is Declaration = RuleAttributes "token"S Identifier "="s    TokenRule ";"s;

  [Ast(                                          Attributes,    RuleKW,   Name,      Colon, Type,       Assign, Rule, Semicolon)]
  syntax SimpleRuleDecl         is Declaration = RuleAttributes "syntax"S Identifier ":"s   NemerleType "="s    Rule  ";"s;

  [Ast(                                          Attributes,    RuleKW,   Name,      Colon, Type,       Semicolon)]
  syntax ExtentionPointRuleDecl is Declaration = RuleAttributes "syntax"S Identifier ":"s   NemerleType ";"s;

  [Ast(                                           Attributes,   RuleKW,   Name,      Is,   BaseName,   Assign, Rule, Semicolon)]
  syntax ExtentionRuleDecl      is Declaration = RuleAttributes "syntax"S Identifier "is"S QIdentifier "="s    Rule  ";"s;

  [Ast(                                          Span,   Class,   Name,      MatchTokens,      Semicolon)]
  syntax SpanClass              is Declaration = "span"S "class"S Identifier ("="s TokenRule)? ";"s;

  [Ast(                                          Span,    Class,   Name,      Eq,  StringLiteral, Semicolon)]
  syntax TokenField             is Declaration = "token"S "field"S Identifier "="s StringLiteral  ";"s;

  [Ast(                                          Brackets,   Open,     Comma, Close,    Semicolon)]
  syntax BracketPair            is Declaration = "brackets"S TokenRule ","s   TokenRule ";"s;

  [Ast(                                          Using,   GrammarName, Semicolon)]
  syntax UsingDecl              is Declaration = "using"S QIdentifier  ";"s;

  [Ast(                                          Using,   Alias,     Assign, GrammarName, Semicolon)]
  syntax AliasDecl              is Declaration = "using"S Identifier "="s    QIdentifier  ";"s;

  [Ast(                                          Option,   EmitDebugSources,   Assign, Value,     Semicolon)]
  syntax OptionEmitDebugSources is Declaration = "option"S "EmitDebugSources"S "="s    Identifier ";"s;


  [Ast()]
  syntax BodyDeclaration        : Ast;

  [Ast(                                              Semicolon)]
  syntax EmptyBodyDeclaration   is BodyDeclaration = ";"s;

  [Ast(                                              Open, Fields,                Close)]
  syntax FieldsBodyDeclaration  is BodyDeclaration = "{"s  BodyMemberDeclaration* "}"s;


  [Ast()]
  syntax BodyMemberDeclaration  : Ast;

  [Ast(                                                    Syntax,   Name,      Assign, Rule, Semicolon)]
  syntax FieldDeclaration       is BodyMemberDeclaration = "syntax"S Identifier "="s    Rule  ";"s;


  [Ast()]
  syntax Range           : Ast;

  [Ast(                             Char)]
  syntax SingleCharRange is Range = CharLiteral;

  [Ast(                             StartChar,  DotDot, EndChar)]
  syntax CharRange       is Range = CharLiteral ".."s   CharLiteral;

  [Ast(                             Name)]
  syntax UnicodeRange    is Range = Identifier;


  [Ast()]
  syntax TokenRule                        : Ast;

  [Ast(                                                  LeftRule,      RightRules)]
  syntax ChoiceTokenRule                  is TokenRule = TokenRule : 10 ("|"s TokenRule : 10)+;

  [Ast(                                                  LeftRule,      RightRules)]
  syntax SequenceTokenRule                is TokenRule = TokenRule : 20 (TokenRule : 20)+;

  [Ast(                                                  Rule,          Op)]
  syntax OptionalTokenRule                is TokenRule = TokenRule : 30 "?"s;

  [Ast(                                                  Rule,          Op)]
  syntax ZeroOrManyTokenRule              is TokenRule = TokenRule : 30 "*"s;

  [Ast(                                                  Rule,          Op)]
  syntax OneOrManyTokenRule               is TokenRule = TokenRule : 30 "+"s;

  [Ast(                                                  Open, Ranges,       Close)]
  syntax RangeTokenRule                   is TokenRule = "["s  (Range; ","s)+ "]"s;

  [Ast(                                                  Char)]
  syntax CharTokenRule                    is TokenRule = CharLiteral;

  [Ast(                                                  String)]
  syntax StringTokenRule                  is TokenRule = StringLiteral;

  [Ast(                                                  Open, Rule,     Close)]
  syntax RoundsTokenRule                  is TokenRule = "("s  TokenRule ")"s;

  [Ast(                                                  Name)]
  syntax CallTokenRule                    is TokenRule = QIdentifier;

  [Ast(                                                  Open, Rule,     Semicolon, Separator, Close, Op)]
  syntax ZeroOrManyWithSeparatorTokenRule is TokenRule = "("s  TokenRule ";"s       TokenRule  ")"s   "*"s;

  [Ast(                                                   Open, Rule,     Semicolon, Separator, Close, Op)]
  syntax OneOrManyWithSeparatorTokenRule  is TokenRule = "("s   TokenRule ";"s       TokenRule  ")"s   "+"s;


  [Ast()]
  syntax Rule                        : Ast;

  [Ast(                                        LeftRule, RightRules)]
  syntax SequenceRule                is Rule = Rule : 10 (Rule : 10)+;

  [Ast(                                        Op,  Rule)]
  syntax NotRule                     is Rule = "!"s Rule : 20;

  [Ast(                                        Op,  Rule)]
  syntax AndRule                     is Rule = "&"s Rule : 20;

  [Ast(                                        Rule,     Op)]
  syntax OptionalRule                is Rule = Rule : 30 "?"s;

  [Ast(                                        Rule,     Op)]
  syntax ZeroOrManyRule              is Rule = Rule : 30 "*"s;

  [Ast(                                        Rule,     Op)]
  syntax OneOrManyRule               is Rule = Rule : 30 "+"s;

  [Ast(                                        Char)]
  syntax CharRule                    is Rule = CharLiteral;

  [Ast(                                        String)]
  syntax StringRule                  is Rule = StringLiteral;

  [Ast(                                        Open, Rule, Close)]
  syntax RoundsRule                  is Rule = "("s  Rule ")"s;

  [Ast(                                        Name,       BP)]
  syntax CallRule                    is Rule = QIdentifier (":"s Number)?;

  [Ast(                                        Open, Rule, Semicolon, Separator, Close, Op)]
  syntax ZeroOrManyWithSeparatorRule is Rule = "("s  Rule  ";"s       Rule       ")"s   "*"s;

  [Ast(                                        Open, Rule, Semicolon, Separator, Close, Op)]
  syntax OneOrManyWithSeparatorRule  is Rule = "("s  Rule  ";"s       Rule       ")"s   "+"s;

  [Ast(                                        Name,      Open, Rule, Close)]
  syntax Scope                       is Rule = Identifier "{"s  Rule  "}"s;
}