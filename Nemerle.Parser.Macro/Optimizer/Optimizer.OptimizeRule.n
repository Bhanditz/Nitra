using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.Parser
{
  partial internal class Optimizer
  {
    public static OptimizeRule( ruleName : NameRef
                              , getOptimizedRule : NameRef -> option[Rule]
                              , grammar : Grammar
                              , weights : Map[NameRef, option[int]]
                              ) : option[Rule]
    {
      def optimize(r : Rule)
      {
        | Choice(rules)                 =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Choice(rules) => rules
              | rule               => [rule]
            });
          def rules = rules.Flatten();
          def catFSM(_)
          {
            | (Rule.Fsm(fsm1, loop1) as r1) :: (Rule.Fsm(fsm2, loop2) as r2) :: rules =>
              catFSM(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Choice([fsm1, fsm2]), loop1 || loop2) :: rules)
            | rule :: rules => rule :: catFSM(rules)
            | []            => []
          }
          def rules = catFSM(rules);

          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Choice(r.Location, rules)
          }

        | Sequence(rules)               =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Sequence(rules) => rules
              | rule                 => [rule]
            });
          def rules = rules.Flatten();
          def catFSM(_)
          {
            | (Rule.Fsm(fsm1, false) as r1) :: (Rule.Fsm(fsm2, loop2) as r2) :: rules =>
              catFSM(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Seq([fsm1, fsm2]), loop2) :: rules)
            | rule :: rules => rule :: catFSM(rules)
            | [] => []
          }
          def rules = catFSM(rules);

          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Sequence(r.Location, rules)
          }

        | Repeat(min, max, rule) =>
          match (optimize(rule), min, max)
          {
            | (Fsm(fsm, loop),  0,   Some(1))   => Rule.Fsm(r.Location, FSMBuilder.Option(fsm), loop)
            | (Fsm(fsm, false), min, Some(max)) => Rule.Fsm(r.Location, FSMBuilder.RepeatMinMax(min, max, fsm), false)
            | (Fsm(fsm, false), min, None())    => Rule.Fsm(r.Location, FSMBuilder.RepeatMin(min, fsm), true)
            | (rule, _, _)                      => Rule.Repeat(r.Location, min, max, rule)
          }

        | Not(Not(rule))                => optimize(Rule.And(r.Location, rule))
        | And(Not(rule))                => optimize(Rule.Not(r.Location, rule))
        | Not(And(rule))                => optimize(Rule.Not(r.Location, rule))
        | And(And(rule))                => optimize(Rule.And(r.Location, rule))
        | Not(rule)                     => Rule.Not(r.Location, optimize(rule))
        | And(rule)                     => Rule.And(r.Location, optimize(rule))
        | Capture(kind, rule)           => Rule.Capture(r.Location, kind, optimize(rule))
        | Scope(name, rule)             => Rule.Scope(r.Location, name, optimize(rule))
        | Chars(chars)                  => Rule.Fsm(r.Location, FSMBuilder.Seq(chars), false)
        | Cut as rule                   => rule
        | Fsm as rule                   => rule
        | Call(name, bp)                =>
          match (weights.Get(name))
          {
            | Some(weight) when weight < 20 && grammar.GetRule(name).ResultType is RuleDefinitionType.None =>
              match (getOptimizedRule(name))
              {
                | Some(Fsm as rule) => rule
                | _                 => Rule.Call(r.Location, name, bp)
              }
            | _                     => Rule.Call(r.Location, name, bp)
          }
      }

      match (grammar.GetRule(ruleName).Rule)
      {
        | Some(rule) => Some(optimize(rule))
        | None       => None()
      }
    }
  }
}
