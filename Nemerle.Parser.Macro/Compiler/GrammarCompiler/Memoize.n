using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public class MemoizeNames
    {
      public StartPos       : string { get; }
      public Result         : string { get; }
      public EndPos         : string { get; }
      public this(name : NameRef)
      {
        StartPos       = $"_#_$(name.Id)_StartPos____";
        EndPos         = $"_#_$(name.Id)_EndPos______";
        Result         = $"_#_$(name.Id)_Result______";
      }
    }

    private _definedMemoize : Hashtable[NameRef, MemoizeNames] = Hashtable();
    public DefineMemoize(name : NameRef, rd : RuleDefinition.Simple) : MemoizeNames
    {
      def ty = GetRuleNType(rd);
      match (_definedMemoize.Get(name))
      {
        | Some(res) => res
        | None =>
          def names = MemoizeNames(name);
          DefineImplementation(<[ decl:
            private mutable $(names.StartPos : dyn) : int = -1;
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.Result : dyn) : $(ty : typed);
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.EndPos : dyn) : int = -1;
          ]>);
          _definedMemoize.Add(name, names);
          names
      }
    }

    public class ExtensionPointMemoizeNames
    {
      public StartPos       : string { get; }
      public BindingPower   : string { get; }
      public Result         : string { get; }
      public EndPos         : string { get; }
      public PrefixResult   : string { get; }
      public PrefixEndPos   : string { get; }
      public PrefixRules    : string { get; }
      public PostfixRules   : string { get; }
      public this(name : NameRef)
      {
        StartPos       = $"_#_$(name.Id)_StartPos_____";
        BindingPower   = $"_#_$(name.Id)_BindingPower_";
        Result         = $"_#_$(name.Id)_Result_______";
        EndPos         = $"_#_$(name.Id)_EndPos_______";
        PrefixResult   = $"_#_$(name.Id)_PrefixResult_";
        PrefixEndPos   = $"_#_$(name.Id)_PrefixEndPos_";
        PrefixRules    = $"_#_$(name.Id)_PrefixRules__";
        PostfixRules   = $"_#_$(name.Id)_PostfixRules_";
      }
    }

    private _definedExtensionPointMemoize : Hashtable[NameRef, ExtensionPointMemoizeNames] = Hashtable();
    public DefineExtensionPointMemoizeNames(extentionPoint : RuleDefinition.ExtentionPoint) : ExtensionPointMemoizeNames
    {
      def ty = GetRuleNType(extentionPoint);
      match (_definedExtensionPointMemoize.Get(extentionPoint.Name))
      {
        | Some(res) => res
        | None =>
          def names = ExtensionPointMemoizeNames(extentionPoint.Name);
          DefineImplementation(<[ decl:
            private mutable $(names.StartPos : dyn) : int = -1;
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.BindingPower : dyn) : int = -1;
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.Result : dyn) : $(ty : typed);
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.EndPos : dyn) : int = -1;
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.PrefixResult : dyn) : $(ty : typed);
          ]>);
          DefineImplementation(<[ decl:
            private mutable $(names.PrefixEndPos : dyn) : int = -1;
          ]>);
          DefineImplementation(<[ decl:
            public mutable $(names.PrefixRules : dyn) : array[ExtensionPrefixBase[$(ty : typed)]] = array[];
          ]>);
          DefineImplementation(<[ decl:
            public mutable $(names.PostfixRules : dyn) : array[ExtensionPostfixBase[$(ty : typed)]] = array[];
          ]>);
          _definedExtensionPointMemoize.Add(extentionPoint.Name, names);
          names
      }
    }
  }
}
