using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private DefineInitExtensionRules() : void
    {
      def inits = if (Typer.Manager.IsIntelliSenseMode)
        []
      else
        TypedGrammar.Rules
          .MapFiltered(_ is RuleDefinition.ExtentionPoint, baseRD =>
          {
            def baseRD = baseRD :> RuleDefinition.ExtentionPoint;
            def names = _definedExtensionPointMemoize[baseRD.Name];
            def prefixRDs  = TypedGrammar.Rules
              .MapFiltered(_ is RuleDefinition.ExtentionPrefix, _ :> RuleDefinition.ExtentionPrefix)
              .Filter(rd => rd.baseRuleName.Id == baseRD.Name.Id)
              .Map(rd => <[ $(DecorateRuleClassName(rd.Name.Id) : dyn)(this) ]>);
            def postfixRDs = TypedGrammar.Rules
              .MapFiltered(_ is RuleDefinition.ExtentionPostfix, _ :> RuleDefinition.ExtentionPostfix)
              .Filter(rd => rd.baseRuleName.Id == baseRD.Name.Id)
              .Map(rd => <[ $(DecorateRuleClassName(rd.Name.Id) : dyn)(this) ]>);
            <[
              $(names.PrefixRules : dyn) = array[..$prefixRDs];
              $(names.PostfixRules : dyn) = array[..$postfixRDs];
            ]>;
          });

      DefineWithSource(
        <[decl:
          private InitExtensionRules() : void
          {
            ..$inits
          }
        ]>);
    }
  }
}
