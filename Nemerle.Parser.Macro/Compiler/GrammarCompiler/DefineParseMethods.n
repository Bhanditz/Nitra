using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private DefineParseMethods() : void
    {
      foreach (rd when rd.Attributes.Exists(_ is RuleAttribute.StartRule) in ParsedGrammar.Rules)
      {
        def tyParam =
          match (ParsedGrammar.GetRuleType(rd.Name))
          {
            | RuleType.NType(ty) => <[ $(ty : typed) ]>
            | _ =>
              Message.Error(GrammarTB.Location,  "Start rule must be a capture rule");
              <[ object ]>
          };
        def name = rd.Name.Id.Substring(0, 1).ToUpper() + rd.Name.Id.Substring(1);

        DefineInterface(<[decl:
          public $(("Parse" + name) : dyn)(text : string) : option[$tyParam]
          {
            def (pos, res) = $(("TryParse" + name) : dyn)(text);
            if (pos < 0) None() else Some(res)
          }
        ]>);
        DefineInterface(<[decl:
          public $(("Parse" + name) : dyn)(source : Nemerle.Parser.SourceSnapshot) : option[$tyParam]
          {
            def (pos, res) = $(("TryParse" + name) : dyn)(source);
            if (pos < 0) None() else Some(res)
          }
        ]>);

        DefineInterface(<[decl:
          public $(("TryParse" + name) : dyn)(text : string) : int * $tyParam
          {
            $(("TryParse" + name) : dyn)(Nemerle.Parser.SourceSnapshot(text))
          }
        ]>);

        DefineInterface(<[decl:
          public abstract $(("TryParse" + name) : dyn)(source : Nemerle.Parser.SourceSnapshot) : int * $tyParam;
        ]>);

        if (_typer.Manager.IsIntelliSenseMode)
        {
          DefineImplementation(<[decl:
            public override $(("TryParse" + name) : dyn)([Nemerle.Assertions.NotNull] source : Nemerle.Parser.SourceSnapshot) : int * $tyParam
            {
              _parsingSource = source;
              mutable result;
              result;
            }
          ]>);
        }
        else
        {
          def args = match (rd)
          {
            | RuleDefinition.Simple         => [<[ 0 ]>, <[ _parsingSource.Text ]>, <[ ref result ]>]
            | RuleDefinition.ExtentionPoint => [<[ 0 ]>, <[ _parsingSource.Text ]>, <[ 0 ]>, <[ ref result ]>]
            | _                             => [PExpr.Error($"$(rd.Name.Id) can't be start rule.")]
          }
          DefineImplementation(<[decl:
            public override $(("TryParse" + name) : dyn)([Nemerle.Assertions.NotNull] source : Nemerle.Parser.SourceSnapshot) : int * $tyParam
            {
              ResetMemoization();
              ResetMaxRollbackPos();

              Parser = Nemerle.Parser.Internal.Parser(this, source);

              foreach (descriptor in Descriptor.Dependencies())
                Parser.AddGrammar(descriptor);

              Init();

              mutable result;
              def pos = $(DecorateRuleName(rd.Name.Id) : dyn)(..$args);

              (pos, result)
            }
          ]>);
        }
      }
    }
  }
}
