using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public CompileGrammar() : void
    {
      foreach (ruleDef when ruleDef.Attributes.Exists(_ is RuleAttribute.Export) in TypedGrammar.Rules)
      {
        CallRule(ruleDef.Name, true);
        CallRule(ruleDef.Name, false);
      }

      foreach (ruleDef when ruleDef.Attributes.Exists(_ is RuleAttribute.StartRule) in TypedGrammar.Rules)
        CallRule(ruleDef.Name, true);

      foreach (ruleDef when !(ruleDef is RuleDefinition.Simple) in TypedGrammar.Rules)
      {
        CallRule(ruleDef.Name, true);
      }

      while (_rulesToCall.Count > 0)
      {
        def (name, useResult) = _rulesToCall.Pop();
        def rule = if (useResult) TypedGrammar.GetRule(name);
                   else           UntypedGrammar.GetRule(name);

        try
        {
          RuleCompiler(this, rule, useResult).CompileRule();
        }
        catch
        {
          | ex =>
            Message.Error(name.Location, ex.Message);
        }
      }
    }
  }
}
