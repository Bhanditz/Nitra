using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public DecorateRuleName(name : string) : string
    {
      $"_#_$(name)_"
    }

    public ParseRuleName(name : string) : option[string]
    {
      if (name.StartsWith("_#_") && name.EndsWith("_"))
        Some(name.Substring(3, name.Length - 4))
      else
        None()
    }

    public DecorateRuleClassName(rd : RuleDefinition) : string
    {
      match (rd)
      {
        | ExtentionPoint   => $"_#point#___$(rd.Name.Id)_"
        | ExtentionPrefix  => $"_#prefix#__$(rd.Name.Id)_"
        | ExtentionPostfix => $"_#postfix#_$(rd.Name.Id)_"
        | Simple           => $"_#simple#__$(rd.Name.Id)_"
        | ExternalRule     => assert(false)
      }
    }

    public DecorateGrammarRef(grammarRef : GrammarRef) : string
    {
      $"_#grammar#$(grammarRef.Id)"
    }

    public static ScopeBeginSufix = "ScopeBegin";
    public static ScopeEndSufix   = "ScopeEnd";
  }
}
