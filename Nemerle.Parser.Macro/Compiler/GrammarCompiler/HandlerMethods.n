using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private GetRuleHandlerArgs(rd : RuleDefinition, useNList : bool) : option[list[TypeVar]]
    {
      match (rd.GetRule())
      {
        | Some(Rule.Capture(argType, _)) =>
          def res = match (argType)
          {
            | Tuple(types) => types.MapFiltered(ty => !(ty is RuleType.Void), ty => RuleTypeToNType(ty, useNList))
            | ty           => [RuleTypeToNType(ty, useNList)]
          }
          Some(res)
        | _ => None()
      }
    }

    [Memoize]
    public GetHandlerMethods() : Hashtable[NameRef, ClassMember.Function]
    {
      def methodsMap = Hashtable();
      def allMethods = GrammarTB.GetParsedMembers(true).MapFiltered(_ is ClassMember.Function, _ :> ClassMember.Function);
      def getSignature(rd : RuleDefinition)
      {
        if (rd.IsAst)
        {
          Some((rd, [GetRuleNType(rd)], GrammarTB.InternalType.Void, true))
        }
        else
        {
          match (GetRuleHandlerArgs(rd, false))
          {
            | Some(types) =>
              match (GetRuleType(rd.Name))
              {
                | NType(retType) when !retType.Equals(GrammarTB.InternalType.Void) =>
                  def isOption = match (types)
                  {
                    | [ty] when ty.TryUnify(retType) => true
                    | _                              => false
                  }
                  Some((rd, types, retType, isOption))

                | _ => None()
              }
            | None => None()
          }
        }
      }
      foreach (Some((rd, types, retType, isOption)) in TypedGrammar.Rules.Map(getSignature))
      {
        mutable invalidHandler = false;
        def error(loc, msg)
        {
          Message.Error(loc, msg);
          invalidHandler = true;
        }
        match (allMethods.Filter(m => m.Name == rd.Name.Id))
        {
          | []       =>
            when (!isOption)
              invalidHandler = true;

          | [method] =>
            // check parameters types...
            def parms = method.header.Parameters;

            if (parms.Length == types.Length)
              foreach ((need, p) in types.ZipLazy(parms))
              {
                def real = BindFixedType(p.Type);
                unless (need.TryUnify(real))
                  error(p.Location, $<#The parameter "$(p.Name)" has wrong type $real (need type $need).#>);
              }
            else
              error(method.Location, $<#The method-handler of rule "$(rd.Name)" must have $(types.Length) parameters.#>);

            // check return type...
            def methodRetTy = BindFixedType(method.header.ReturnType);

            unless (methodRetTy.TryRequire(retType))
              error(method.header.ReturnType.Location, $<#The method-handler of rule "$(rd.Name)" has wrong return type (need type $retType).#>);

            unless (invalidHandler)
              methodsMap.Add(rd.Name, method);

          | methods  => methods.Iter(m => error(m.Location, "Overloading not supported for rule method-handler"));
        }

        when (invalidHandler)
          Message.Error(rd.Name.Location, $<#You need define method-handler with signature: $(rd.Name)(_ : ..$(types; ", _ : ")) : $retType#>);
      }
      methodsMap
    }
  }
}
