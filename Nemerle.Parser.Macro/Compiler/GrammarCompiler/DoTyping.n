using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Imperative;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private _externalGrammars : SCG.List[GrammarRef * TypeBuilder] = SCG.List();

    private _externalRuleTypeGetters : SCG.Dictionary[int, NameRef -> RuleType] = SCG.Dictionary();
    public GetExternalRuleType(rd : RuleDefinition.ExternalRule) : RuleType
    {
      _externalRuleTypeGetters[rd.grammarRef.Id](rd.Name)
    }

    private mutable _loadingExternalGrammars : bool = false;
    public LoadExternalGrammars() : void
    {
      when (_loadingExternalGrammars)
        return;
      _loadingExternalGrammars = true;

      foreach (grammarRef in ParsedGrammar.GrammarRefs)
      {
        match (grammarRef.GrammarType)
        {
          | FixedType.Class(ti, tbArgs) =>
            def tb = ti :> TypeBuilder;
            when (!tbArgs.IsEmpty())
              Message.Error(grammarRef.Location, "Generic grammar not supported.");
            _externalGrammars.Add((grammarRef, tb));

            match (tb.UserData[typeof(GrammarCompiler)])
            {
              | compiler is GrammarCompiler =>
                compiler.LoadExternalGrammars();
                def grammar = compiler.ParsedGrammar;
                _externalRuleTypeGetters.Add(grammarRef.Id, grammar.GetRuleType);
                foreach (rule in grammar.Rules)
                {
                  match (rule)
                  {
                    | RuleDefinition.ExternalRule => ()
                    | rule =>
                      def isExtentionPoint = rule is RuleDefinition.ExtentionPoint;
                      _parsedGrammar = _parsedGrammar.Add(RuleDefinition.ExternalRule(rule.Name.Location, _parsedGrammar.Count, rule.Name, [], grammarRef, isExtentionPoint));
                  }
                }

              | _ => Message.Error(grammarRef.Location, "External refirence not implemented.");
            }

          | _ => Message.Error(grammarRef.Location, "Not class.");
        }
      }
    }

    public DoTyping() : void
    {
      LoadExternalGrammars();

      _allRules = CheckRuleCalls(_parsedGrammar);

      def typedGrammar = GrammarTyper.AddArgumentCaptures(_parsedGrammar, Typer);
      def untypedGrammar = GrammarTyper.RemoveAllCaptures(typedGrammar);

      _typedGrammar   = if(_isDebug) typedGrammar   else Optimizer.OptimizeGrammar(typedGrammar);
      _untypedGrammar = if(_isDebug) untypedGrammar else Optimizer.OptimizeGrammar(untypedGrammar);
    }
  }
}
