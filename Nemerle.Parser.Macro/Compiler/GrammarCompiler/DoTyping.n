using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private _externalGrammars : SCG.List[TypeBuilder] = SCG.List();
    public DoTyping() : void
    {
      foreach (grammarRef in ParsedGrammar.GrammarRefs)
      {
        match (grammarRef.GrammarType)
        {
          | FixedType.Class(ti, tbArgs) =>
            def tb = ti :> TypeBuilder;
            when (!tbArgs.IsEmpty())
              Message.Error(grammarRef.Location, "Generic grammar not supported.");
            def grammarId = _externalGrammars.Count;
            _externalGrammars.Add(tb);

            match (tb.UserData[typeof(GrammarCompiler)])
            {
              | compiler is GrammarCompiler =>
                def grammar = compiler.ParsedGrammar;
                foreach (ruleName in grammar.Names)
                {
                  def ruleType = grammar.GetRuleType(ruleName);
                  def isExtentionPoint = grammar.GetRule(ruleName) is RuleDefinition.ExtentionPoint;
                  _parsedGrammar = _parsedGrammar.Add(RuleDefinition.ExternalRule(ruleName.Location, _parsedGrammar.Count, ruleName, [], grammarId, ruleType, isExtentionPoint));
                }

              | _ => Message.Error(grammarRef.Location, "External refirence not implemented.");
            }

          | _ => Message.Error(grammarRef.Location, "Not class.");
        }
      }

      _allRules = CheckRuleCalls(_parsedGrammar);

      def typedGrammar = GrammarTyper.AddArgumentCaptures(_parsedGrammar, Typer);
      def untypedGrammar = GrammarTyper.RemoveAllCaptures(typedGrammar);

      _typedGrammar   = if(_isDebug) typedGrammar   else Optimizer.OptimizeGrammar(typedGrammar);
      _untypedGrammar = if(_isDebug) untypedGrammar else Optimizer.OptimizeGrammar(untypedGrammar);
    }
  }
}
