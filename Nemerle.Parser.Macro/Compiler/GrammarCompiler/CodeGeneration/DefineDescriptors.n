using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    [Record]
    public class TokenErrorPosition
    {
      public Name : string { get; }
      public IsLiteral : bool { get; }
      public RuleDefinition : RuleDefinition { get; }

      public DescriptorFieldName : string { get { $<#_token_$(if (IsLiteral) "literal" else "rule")_"$(Name)"_#> } }
      public PositionFieldName   : string { get { $<#_token_$(RuleDefinition.Name)_$(if (IsLiteral) "literal" else "rule")_"$(Name)"_#> } }
    }
    private _tokenErrorPositions : Hashtable[RuleDefinition, list[TokenErrorPosition]] = Hashtable();

    [Memoize]
    public RegisterTokenErrorPosition(name : string, isLiteral : bool, rd : RuleDefinition) : TokenErrorPosition
    {
      def tep = TokenErrorPosition(name, isLiteral, rd);
      _ = _tokenErrorPositions.Update(rd, [], tep :: _);
      tep
    }

    public DefineDescriptors() : void
    {
      foreach (rd in ParsedGrammar.Rules)
      {
        def define()
        {
          def descriptorClass = <[decl:
            public class $(DecorateRuleClassName(rd) : dyn) : RuleDescriptor
            {
              private this() {}
              public override Name : string { get { $(rd.Name.AsName : string) } }
              public override Grammar : GrammarDescriptor { get { $(GrammarImplTB.GetMemType() : typed).StaticDescriptor } }
              private static _staticDescriptor : $(DecorateRuleClassName(rd) : dyn) = $(DecorateRuleClassName(rd) : dyn)();
              public static StaticDescriptor : RuleDescriptor { get { _staticDescriptor } }
            }
          ]>;
          def tb = GrammarDescriptorImplTB.DefineNestedType(descriptorClass);
          when (_tokenErrorPositions.Contains(rd))
            foreach (tep in _tokenErrorPositions[rd])
              tb.Define(<[decl: public static $(tep.DescriptorFieldName : dyn) : Nemerle.Parser.TokenDescriptor = Nemerle.Parser.TokenDescriptor(_staticDescriptor, $(tep.Name : string), $(tep.IsLiteral : bool)) ]>);
          match (GetRuleType(rd.Name))
          {
            | RuleType.NType(type) => tb.Define(<[decl: public ResultType() : $(type : typed) { mutable res; res } ]>)
            | RuleType.Void        => tb.Define(<[decl: public ResultType() : void {} ]>)
            | RuleType.Chars       => ()
            | _                    => Message.Error(rd.Name.Location, "Implementation error. DefineDescriptors")
          }
          tb.Compile();
        }
        match (rd)
        {
          | RuleDefinition.ExtentionPrefix  => define()
          | RuleDefinition.ExtentionPostfix => define()
          | RuleDefinition.ExtentionPoint   => define()
          | RuleDefinition.Simple           => define()
          | RuleDefinition.Regular          => define()
          | RuleDefinition.ExternalRule     => ()
        }
      }
    }
  }
}
