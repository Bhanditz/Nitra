using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public DefineDescriptors() : void
    {
      foreach (rd in ParsedGrammar.Rules)
      {
        def define()
        {
          def descriptorClass = <[decl:
            public class $(DecorateRuleClassName(rd) : dyn) : RuleDescriptor
            {
              private this() {}
              public override Name : string { get { $(rd.Name.Id : string) } }
              public override Grammar : GrammarDescriptor { get { $(_implTB.GetMemType() : typed).StaticDescriptor } }
              private static _staticDescriptor : $(DecorateRuleClassName(rd) : dyn) = $(DecorateRuleClassName(rd) : dyn)();
              public static StaticDescriptor : RuleDescriptor { get { _staticDescriptor } }
            }
          ]>;
          _grammarDescriptorImpl.DefineNestedType(descriptorClass).Compile();
        }
        match (rd)
        {
          | RuleDefinition.ExtentionPrefix  => define()
          | RuleDefinition.ExtentionPostfix => define()
          | RuleDefinition.ExtentionPoint   => define()
          | RuleDefinition.Simple           => define()
          | RuleDefinition.ExternalRule     => ()
        }
      }
    }
  }
}
