using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public DefineDescriptors() : void
    {
      foreach (rd in ParsedGrammar.Rules)
      {
        def define(baseType)
        {
          def descriptorClass = <[decl:
            public class $(DecorateRuleClassName(rd) : dyn) : $baseType
            {
              private this() {}
              public override Name : string { get { $(rd.Name.Id : string) } }
              public override Grammar : GrammarDescriptor { get { Grammar.StaticDescriptor } }
              private static _staticDescriptor : $(DecorateRuleClassName(rd) : dyn) = $(DecorateRuleClassName(rd) : dyn)();
              public static StaticDescriptor : $baseType { get { _staticDescriptor } }
            }
          ]>;
          _grammarDescriptorImpl.DefineNestedType(descriptorClass);
        }
        def defineExtention(baseType)
        {
          def tb = define(<[ ExtensionRuleDescriptor[$baseType] ]>);
          tb.Define(<[decl:
            public override Create(grammar : IGrammar) : $baseType
            {
              Grammar.$(DecorateRuleClassName(rd) : dyn)(grammar)
            }
          ]>);
          tb
        }
        match (rd)
        {
          | RuleDefinition.ExtentionPrefix  => defineExtention(<[ ExtensionPrefixBase[$(GetRuleNType(rd))] ]>).Compile();
          | RuleDefinition.ExtentionPostfix => defineExtention(<[ ExtensionPostfixBase[$(GetRuleNType(rd))] ]>).Compile();
          | RuleDefinition.ExtentionPoint   => define(<[ RuleDescriptor ]>).Compile();
          | RuleDefinition.Simple           => define(<[ RuleDescriptor ]>).Compile();
          | RuleDefinition.ExternalRule     => ()
        }
      }
    }
  }
}
