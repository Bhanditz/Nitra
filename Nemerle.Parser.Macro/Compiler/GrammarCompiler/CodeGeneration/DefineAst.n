using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public DefineAst() : void
    {
      def variants = Hashtable();
      foreach (rd in TypedGrammar.Rules)
        when (rd.Attributes.Find(_ is RuleAttribute.Ast) is Some(RuleAttribute.Ast as ast))
        {
          match (rd)
          {
            | RuleDefinition.ExtentionPrefix as rd1 with baseRuleName = rd1.baseRuleName
            | RuleDefinition.ExtentionPostfix as rd2 with baseRuleName = rd2.baseRuleName =>
              match (GetRuleHandlerArgs(rd, true))
              {
                | Some(args) =>
                  when (args.Length != ast.names.Length)
                    Message.Error(ast.Location, $"Expected $(args.Length) member got $(ast.names.Length)");
                  def (variantName, optionName) = GetRuleAstNames(rd);
                  def newVariant()
                  {
                    def baseType = GetRuleNType(rd);
                    GrammarTB.DefineNestedType(<[decl: public variant $(variantName : dyn) : $(baseType  : typed){} ]>)
                  }
                  def addOption(variantTB)
                  {
                    def fields = args.Zip(ast.names).Map((argType, name) => <[decl: public $(name.Id : dyn) : $(argType : typed); ]>);
                    def name = Name.Global(Typer.Manager, optionName);
                    def attributes = AttributesAndModifiers(NemerleAttributes.Public, []);
                    def variantOption = TopDeclaration.VariantOption(name, attributes, Typarms([], []), fields);
                    variantTB.DefineNestedType(ClassMember.TypeDeclaration(variantOption)).Compile();
                    variantTB
                  }
                  _ = variants.Update(baseRuleName.Id, newVariant, addOption);

                | _ => assert(false)
              }
            | _ => Message.Error(rd.Location, "Ast generation for this rule type not supported.");
          }
        }
      foreach (kv in variants)
        kv.Value.Compile();
    }
  }
}
