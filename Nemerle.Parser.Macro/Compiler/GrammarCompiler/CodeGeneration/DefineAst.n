using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    [Memoize]
    public DefineAstType(rd : RuleDefinition) : TypeBuilder
    {
      assert(rd.IsAst);
      match (rd)
      {
        | RuleDefinition.ExtentionPoint(PType(basePType)) with baseType = BindFixedType(basePType)
        | RuleDefinition.ExtentionPoint(NType(baseType))
        | RuleDefinition.Simple(PType(basePType), _)      with baseType = BindFixedType(basePType)
        | RuleDefinition.Simple(NType(baseType), _)
        | RuleDefinition.ExtentionPrefix                  with baseType = GetBaseRuleNType(rd)
        | RuleDefinition.ExtentionPostfix                 with baseType = GetBaseRuleNType(rd) =>
          GrammarTB.DefineNestedType(<[decl:
            public partial class $(MakePublicRuleName(rd.Name) : dyn) : $(baseType : typed)
            {
              public this(location : Location, errors : list[ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>)

        | _ => assert(false)
      }
    }

    public DefineAst() : void
    {
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);
        match (rd.Attributes.Find(_ is RuleAttribute.Ast), GetAstFieldsTypes(rd))
        {
          | (Some(RuleAttribute.Ast as ast), None) with args = []
          | (Some(RuleAttribute.Ast as ast), Some(args)) =>
            when (args.Length != ast.names.Length)
              Message.Error(ast.Location, $"Expected $(args.Length) member got $(ast.names.Length)");
            tb.DefineNestedType(<[decl: 
              public partial new class Error : $(tb.GetMemType() : typed)
              {
                public this(location : Location, errors : list[ErrorInfo])
                {
                  base(location, errors)
                }
              }
            ]>).Compile();

            tb.DefineNestedType(<[decl: 
              public partial new class Splice : $(tb.GetMemType() : typed)
              {
                public this(location : Location, errors : list[ErrorInfo])
                {
                  base(location, errors)
                }
              }
            ]>).Compile();

            match (rd)
            {
              | RuleDefinition.ExtentionPoint => ()
              | RuleDefinition.ExtentionPostfix
              | RuleDefinition.ExtentionPrefix
              | RuleDefinition.Simple =>
                def astTb = tb.DefineNestedType(<[decl: 
                  public partial new class Ast : $(tb.GetMemType() : typed)
                  {
                  }
                ]>);
                def members    = ast.names.Map(_.AsName).Zip(args);
                def fields = members.Map((name, argType) => <[decl: public $(name : dyn) : $(RuleTypeToNType(argType) : typed); ]>);
                foreach (field in fields)
                  astTb.Define(field);

                def locationName = <[ $(Nemerle.Compiler.Parsetree.Name("location") : name) ]>;
                def errorsName   = <[ $(Nemerle.Compiler.Parsetree.Name("error") : name) ]>;
                def args
                  =  <[ $locationName : Location ]>
                  :: <[ $errorsName : list[ErrorInfo] ]>
                  :: members.Map((name, argType) => <[ $(name : dyn) : $(RuleTypeToNType(argType) : typed) ]>)
                  ;
                _ = astTb.DefineWithSource(<[decl:
                  public this(..$(args.Map(PParameter)))
                  {
                     base($locationName, $errorsName);
                     { ..$(members.Map((name, _) => <[ this.$(name : dyn) = $(name : dyn); ]>)) }
                  }
                ]>);

                def makeGetErrors(name, type) : PExpr // TODO: Оптимизировать списоки токенов.
                {
                  match (type : RuleType)
                  {
                    | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
                    | Chars        => <[ () ]>
                    | PType        => <[ $(name : dyn).GetErrors(errors); ]>
                    | NType        => <[ $(name : dyn).GetErrors(errors); ]>
                    | List(type)   =>
                      <[
                        foreach (_item in $(name : dyn))
                          $(makeGetErrors("_item", type));
                      ]>

                    | Option(type) =>
                      <[
                        match ($(name : dyn))
                        {
                          | Some(_item) => $(makeGetErrors("_item", type));
                          | None => ()
                        }
                      ]>

                    | Tuple(types) =>
                      def types = types.Filter(ty => !(ty is RuleType.Void));
                      def fields = types.Count();
                      def names = $[0..fields - 1].Map(n => $"_item$n");
                      <[
                        match ($(name : dyn))
                        {
                          | (..$(names.Map(name => <[ $(name : dyn) ]>))) => { ..$(names.Zip(types).Map(makeGetErrors)) }
                        }
                      ]>

                    | Void         => assert(false)
                  }
                }
                _ = astTb.DefineWithSource(<[decl:
                  public override GetErrors(errors : System.Collections.Generic.List[ErrorInfo]) : void
                  {
                    base.GetErrors(errors);
                    { ..$(members.Map(makeGetErrors)) }
                  }
                ]>);

                astTb.Compile();
              | RuleDefinition.ExternalRule
              | RuleDefinition.Regular => assert(false);
            }
          | _ => assert(false)
        }
        tb.Compile();
      }
    }
  }
}
