using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private DefineParsingErrors() : void
    {
      def teps = _tokenErrorPositions.MapToList(kv => kv.Value).Flatten();

      def getErrors = teps.Map(tep =>
      {
        <[
          when (pos < $(tep.PositionFieldName : dyn))
          {
            pos = $(tep.PositionFieldName : dyn);
            descriptors.Clear();
          }
          when (pos == $(tep.PositionFieldName : dyn))
            descriptors.Add($(GrammarImplTB.Name : dyn).$(GrammarDescriptorImplTB.Name : dyn).$(DecorateRuleClassName(tep.RuleDefinition) : dyn).$(tep.DescriptorFieldName : dyn));
        ]>
      });
      def clear = teps.Map(tep => <[ $(tep.PositionFieldName : dyn) = -2;  ]>);

      _ = ParsingErrorsTB.DefineWithSource(<[decl: 
        public override GetErrors(pos : ref int, descriptors : SCG.List[Nemerle.Parser.TokenDescriptor]) : void
        {
          _ = pos;
          _ = descriptors;
          { ..$getErrors }
        }
      ]>);

      _ = ParsingErrorsTB.DefineWithSource(<[decl: 
        public override Clear() : void
        {
          ..$clear
        }
      ]>);

      foreach (tep in teps)
        _ = ParsingErrorsTB.DefineWithSource(<[decl: public mutable $(tep.PositionFieldName : dyn) : int ]>);
    }
  }
}