using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private DefineResetMemoization() : void
    {
      def clearMemoization = _definedMemoize.MapToList(keyValue =>
      {
        [ <[ $(keyValue.Value.StartPos  : dyn) = -1 ]>
        , <[ $(keyValue.Value.Result    : dyn) = $(Typedtree.TExpr.DefaultValue() : typed) ]>
        , <[ $(keyValue.Value.EndPos    : dyn) = -1 ]>
        ]
      }).Flatten();
      def clearExtensionPointMemoization = _definedExtensionPointMemoize.MapToList(keyValue =>
      {
        [ <[ $(keyValue.Value.StartPos     : dyn) = -1 ]>
        , <[ $(keyValue.Value.BindingPower : dyn) = -1 ]>
        , <[ $(keyValue.Value.Result       : dyn) = $(Typedtree.TExpr.DefaultValue() : typed) ]>
        , <[ $(keyValue.Value.EndPos       : dyn) = -1 ]>
        , <[ $(keyValue.Value.PrefixResult : dyn) = $(Typedtree.TExpr.DefaultValue() : typed) ]>
        , <[ $(keyValue.Value.PrefixEndPos : dyn) = -1 ]>
        ]
      }).Flatten();
      DefineImplementation(
        <[decl:
          private ResetMemoization() : void
          {
            ..$(clearMemoization.Concat(clearExtensionPointMemoization).NToList())
          }
        ]>);
    }
  }
}
