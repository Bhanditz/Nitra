using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public DefineAllMethods() : void
    {
      DefineGetMaxRollbackPos();
      DefineGetRuleName();
      DefineResetMaxRollbackPos();
      DefineResetMemoization();
      DefineLoadExtensionRules();
      DefineSaveState();

      foreach ((grammarRef, tb) in _externalGrammars)
        DefineImplementation(<[decl:
          private mutable $(DecorateGrammarRef(grammarRef) : dyn) : $(tb.GetMemType() : typed)
        ]>);

      DefineImplementation(<[decl:
        public Init() : void
        {
          _parsingSource = Parser.ParsingSource;
          { ..$(_externalGrammars.Map((grammarRef, tb) => <[ $(DecorateGrammarRef(grammarRef) : dyn) = Parser.GetGrammar($(tb.GetMemType() : typed).StaticDescriptor).Value :> $(tb.GetMemType() : typed) ]> )) }
          LoadExtensionRules();
        }
      ]>);

      DefineImplementation(<[decl:
        public static Dependencies() : array[GrammarDescriptor]
        {
          array[..$(_externalGrammars.Map((_, tb) => <[ $(tb.GetMemType() : typed).StaticDescriptor ]>))]
        }
      ]>);

      _stateTB.Compile();
      _implTB.Compile();
    }
  }
}
