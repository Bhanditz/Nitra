using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private DefineSaveState() : void
    {
      def extentionPoints = TypedGrammar.Rules.MapFiltered(_ is RuleDefinition.ExtentionPoint, _ :> RuleDefinition.ExtentionPoint);
      def names = extentionPoints
        .Map(extentionPoint =>
          {
            def names = DefineExtensionPointMemoizeNames(extentionPoint);
            def returnType = GetRuleNType(extentionPoint);
            [(names.PrefixRules, <[ array[ExtensionPrefixBase[$returnType]] ]>), (names.PostfixRules, <[ array[ExtensionPostfixBase[$returnType]] ]>)];
          })
        .Flatten();

      def saveRules = names.Map((name, _) => <[ this.$(name : dyn) = Grammar.$(name : dyn) ]>);
      def loadRules = names.Map((name, _) => <[ Grammar.$(name : dyn) = this.$(name : dyn) ]>);

      foreach ((name, type) in names)
        _ = _stateTB.DefineWithSource(<[decl: private $(name : dyn) : $type; ]>);

      _ = _stateTB.DefineWithSource(
        <[decl:
          public this(grammar : $(_implTB.GetMemType() : typed))
          {
            Grammar = grammar;
            { ..$saveRules }
          }
        ]>);

      _ = _stateTB.DefineWithSource(
        <[decl:
          public LoadThisState() : void
          {
            ..$loadRules
          }
        ]>);

      DefineImplementation(
        <[decl:
          public SaveState() : Nemerle.Parser.Internal.IGrammarState
          {
            GrammarStateImpl(this)//TODO: $(_stateTB.GetMemType() : typed)(this)
          }
        ]>);
    }
  }
}
