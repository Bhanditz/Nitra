using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public OptimizeRule
      ( ruleName : NameRef
      , _getOptimizedRule : NameRef -> option[Rule]
      , grammar : Grammar
      ) : option[Rule]
    {
      def optimize(r : Rule)
      {
        | Sequence(rules)               =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Sequence(rules) => rules
              | rule                 => [rule]
            });
          def rules = rules.Flatten();
          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Sequence(r.Location, rules)
          }


        | Repeat(min, max, rule)        => Rule.Repeat(r.Location, min, max, optimize(rule))
        | RepeatWithSeparator(min, max, rule, separator) => Rule.RepeatWithSeparator(r.Location, min, max, optimize(rule), optimize(separator))
        | Not(Not(rule))                => optimize(Rule.And(r.Location, rule))
        | And(Not(rule))                => optimize(Rule.Not(r.Location, rule))
        | Not(And(rule))                => optimize(Rule.Not(r.Location, rule))
        | And(And(rule))                => optimize(Rule.And(r.Location, rule))
        | Not(rule)                     => Rule.Not(r.Location, optimize(rule))
        | And(rule)                     => Rule.And(r.Location, optimize(rule))
        | Capture(kind, rule)           => Rule.Capture(r.Location, kind, optimize(rule))
        | Scope(name, rule)             => Rule.Scope(r.Location, name, optimize(rule))
        | String(str)                   => Rule.String(r.Location, str)
        | Cut as rule                   => rule
        | PrefixCall as rule            => rule
        | Call(name, bp)                =>  Rule.Call(r.Location, name, bp)
      }

      match (grammar.GetRule(ruleName).GetRule())
      {
        | Some(rule) => Some(optimize(rule))
        | None       => None()
      }
    }
  }
}