using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace Nemerle.Parser
{
  internal partial class GrammarCompiler
  {
    public AddArgumentCaptures(grammar : Grammar) : Grammar
    {
      def optimizeType(ty : RuleType)
      {
        | Option(Chars)
        | List(Chars)  => RuleType.Chars()

        | List(Void)
        | Option(Void)
        | Tuple(types) when types.ForAll(_ is RuleType.Void)
                       => RuleType.Void()

        | _            => ty
      }

      def makeRes(rule, ty : RuleType)
      {
        def ty = optimizeType(ty);
        (Rule.Capture(rule.Location, ty, rule), ty);
      }
      def addCaptures(rule : Rule) : Rule * RuleType
      {
        match (rule)
        {
          | Sequence(rules)              =>
            def rules = rules.Map(addCaptures(_));
            def types = rules.Map(t => t[1]);
            def rules = rules.Map(t => t[0]);
            def loc = if (rules.IsEmpty) Location.Default else rules.EnclosingLocation.[_]();
            def ty = RuleType.Tuple(loc, types);
            makeRes(Rule.Sequence(rule.Location, rules), ty);

          | Call(name, bp)               => makeRes(Rule.Call(rule.Location, name, bp), GetRuleType(name));
          | PrefixCall(name, bp)         => makeRes(Rule.PrefixCall(rule.Location, name, bp), GetRuleType(name));
          | Repeat(0, Some(1), rule)     =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.Repeat(rule.Location, 0, Some(1), rule), RuleType.Option(ty));

          | Repeat(min, max, rule)       =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.Repeat(rule.Location, min, max, rule), RuleType.List(ty));

          | RepeatWithSeparator(min, max, rule, separator)       =>
            def (rule, ruleType)           = addCaptures(rule);
            def (separator, separatorType) = addCaptures(separator);
            makeRes(Rule.RepeatWithSeparator(rule.Location, min, max, rule, separator), RuleType.Tuple([RuleType.List(ruleType), RuleType.List(separatorType)]));

          | String(str)                  => makeRes(Rule.String(rule.Location, str), RuleType.Chars());
          | Scope(name, rule)            =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.Scope(rule.Location, name, rule), ty);

          | Not | And | Cut              => (rule, RuleType.Void())
          | Capture                      => assert(false);
        }
      }

      def removeRedundant(rule : Rule)
      {
        | Capture(Chars, rule)                             => Rule.Capture(rule.Location, RuleType.Chars(), RemoveAllCaptures(rule));
        | Capture(Void, rule)                              => Rule.Capture(rule.Location, RuleType.Void(), RemoveAllCaptures(rule));
        | Capture(retType, rule)                           => Rule.Capture(rule.Location, retType, removeRedundant(rule));
        | Sequence(rules)                                  => Rule.Sequence(rule.Location, rules.Map(removeRedundant))
        | Repeat(min, max, rule)                           => Rule.Repeat(rule.Location, min, max, removeRedundant(rule))
        | RepeatWithSeparator(min, max, rule, separator)   => Rule.RepeatWithSeparator(rule.Location, min, max, removeRedundant(rule), removeRedundant(separator))
        | Not(rule)                                        => Rule.Not(rule.Location, RemoveAllCaptures(rule))
        | And(rule)                                        => Rule.And(rule.Location, RemoveAllCaptures(rule))
        | Scope(name, rule)                                => Rule.Scope(rule.Location, name, removeRedundant(rule))
        | Call | PrefixCall
        | String | Cut                                     => rule
      }

      def doAddCaptures(rule)
      {
        def (rule, _) = addCaptures(rule);
        removeRedundant(rule)
      }

      grammar.TransformRules
        ( rd => doAddCaptures(rd.rule)
        , rd => doAddCaptures(rd.rule)
        , rd => doAddCaptures(rd.rule)
        , rd => rd.rule
        )
    }
  }
}
