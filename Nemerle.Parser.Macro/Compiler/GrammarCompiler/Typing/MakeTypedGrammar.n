using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace Nemerle.Parser
{
  internal partial class GrammarCompiler
  {
    public MakeTypedGrammar(grammar : Grammar) : Grammar
    {
      mutable curId = 0;
      def newId()
      {
        ++curId;
        curId;
      }

      def optimizeType(ty : RuleType)
      {
        | Option(Chars)
        | List(Chars)  => RuleType.Chars()

        | List(Void)
        | Option(Void)
        | Tuple(types) when types.ForAll(_ is RuleType.Void)
                       => RuleType.Void()

        | _            => ty
      }

      def doTyping(curRule : Rule) : Rule
      {
        def id = newId();
        match (curRule)
        {
          | Sequence(rules)              =>
            def rules = rules.Map(doTyping(_));
            def types = rules.Map(rule => rule.Type);
            def type  = optimizeType(RuleType.Tuple(types));
            Rule.Sequence(curRule.Location, type, id, rules);

          | Call(name, bp)               =>
            def type = optimizeType(GetRuleType(name));
            Rule.Call(curRule.Location, type, id, name, bp);

          | PrefixCall(name, bp)         =>
            def type = optimizeType(GetRuleType(name));
            Rule.PrefixCall(curRule.Location, type, id, name, bp);

          | Repeat(0, Some(1), rule)     =>
            def rule = doTyping(rule);
            def type = optimizeType(RuleType.Option(rule.Type));
            Rule.Repeat(curRule.Location, type, id, 0, Some(1), rule);

          | Repeat(min, max, rule)       =>
            def rule = doTyping(rule);
            def type = optimizeType(RuleType.List(rule.Type));
            Rule.Repeat(curRule.Location, type, id, min, max, rule);

          | RepeatWithSeparator(min, max, rule, separator)       =>
            def rule      = doTyping(rule);
            def separator = doTyping(separator);
            def type = optimizeType(RuleType.Tuple([RuleType.List(rule.Type), RuleType.List(separator.Type)]));
            Rule.RepeatWithSeparator(curRule.Location, type, id, min, max, rule, separator);

          | String(str)                  =>
            def type = RuleType.Chars();
            Rule.String(curRule.Location, type, id, str);

          | Scope(name, rule)            =>
            def rule = doTyping(rule);
            Rule.Scope(rule.Location, rule.Type, id, name, rule);

          | Not(rule) =>
            Rule.Not(curRule.Location, RuleType.Void(), id, doTyping(rule));

          | And(rule) =>
            Rule.And(curRule.Location, RuleType.Void(), id, doTyping(rule));

          | Cut =>
            Rule.Cut(curRule.Location, RuleType.Void(), id);
        }
      }

      grammar.TransformRules
        ( rd => doTyping(rd.rule)
        , rd => doTyping(rd.rule)
        , rd => doTyping(rd.rule)
        , rd => rd.rule
        )
    }
  }
}
