using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace Nemerle.Parser
{
  internal partial class GrammarCompiler
  {
    public RuleTypeToNType(ruleType : RuleType) : TypeVar
    {
      def optionType = Manager.LookupTypeInfo("Nemerle.Core.option", 1);
      def listType =  Manager.LookupTypeInfo("Nemerle.Core.list", 1);

      def ruleTypeToNType(_ : RuleType)
      {
        | Chars        => _ntokenType
        | PType(ty)    => BindFixedType(ty)
        | NType(ty)    => ty
        | List(ty)     => FixedType.Class(listType, [ruleTypeToNType(ty)])
        | Option(ty)   => FixedType.Class(optionType, [ruleTypeToNType(ty)])
        | Tuple(types) =>
          match (types.MapFiltered(ty => !(ty is RuleType.Void), ruleTypeToNType))
          {
            | [ty]  => ty
            | types => FixedType.Tuple(types)
          }

        | Void         => FixedType.Void()
      }
      ruleTypeToNType(ruleType)
    }
  }
}
