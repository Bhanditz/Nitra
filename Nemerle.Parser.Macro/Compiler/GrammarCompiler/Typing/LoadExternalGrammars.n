using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public static GetNestedTypes(this ti : LibraryReference.ExternalTypeInfo) : list[LibraryReference.ExternalTypeInfo]//TODO: Move to Nemerle.Compiler
    {
      def nestedTypes = SCG.List();
      foreach ((_, node) in ti.NamespaceNode.Children.KeyValuePairs)
      {
        node.EnsureCached();
        match (node.Value)
        {
          | NamespaceTree.TypeInfoCache.Cached(ti)           => nestedTypes.Add(ti)
          | NamespaceTree.TypeInfoCache.CachedAmbiguous(tis) => nestedTypes.AddRange(tis)
          | _ => ()
        }
      }
      nestedTypes.Filter(nested => nested.DeclaringType?.Equals(ti)).Map(_ :> LibraryReference.ExternalTypeInfo);
    }

    private _externalGrammars : SCG.List[GrammarRef * TypeInfo] = SCG.List();

    private _externalRuleTypeGetters : SCG.Dictionary[int, NameRef -> RuleType] = SCG.Dictionary();
    private mutable _loadingExternalGrammars : bool = false;
    public LoadExternalGrammars() : void
    {
      when (_loadingExternalGrammars)
        return;
      _loadingExternalGrammars = true;

      foreach (grammarRef in ParsedGrammar.GrammarRefs)
      {
        def makeName(name)
        {
          match (grammarRef.Alias)
          {
            | Some(alias) =>
              alias + name
            | _ => name
          }
        }
        match (grammarRef.GrammarType)
        {
          | FixedType.Class(ti, tiArgs) =>
            when (!tiArgs.IsEmpty())
              Message.Error(grammarRef.Location, "Generic grammar not supported.");
            match (ti)
            {
              | tb is TypeBuilder =>
                match (tb.UserData[typeof(GrammarCompiler)])
                {
                  | compiler is GrammarCompiler =>
                    _externalGrammars.Add((grammarRef, compiler.GrammarImplTB));
                    compiler.LoadExternalGrammars();
                    def grammar = compiler.ParsedGrammar;
                    _externalRuleTypeGetters.Add(grammarRef.Id, compiler.GetRuleType);
                    foreach (rule in grammar.Rules)
                    {
                      match (rule)
                      {
                        | RuleDefinition.ExternalRule => ()
                        | rule =>
                          def isExtentionPoint = rule is RuleDefinition.ExtentionPoint;
                          _parsedGrammar = _parsedGrammar.Add(RuleDefinition.ExternalRule(rule.Name.Location, _parsedGrammar.Count, makeName(rule.Name), [], grammarRef, isExtentionPoint));
                      }
                    }

                  | _ => Message.Error("Implementation eror. No GrammarCompiler in type builder.");
                }

              | grammarTI is LibraryReference.ExternalTypeInfo =>
                match (grammarTI.GetNestedTypes().Filter(ti => ti.Name == GrammarImplTB.Name))
                {
                  | [grammarImplTI] =>
                    match (grammarImplTI.GetNestedTypes().Filter(ti => ti.Name == GrammarDescriptorImplTB.Name))
                    {
                      | [grammarDescriptorImplTI] =>
                        _externalGrammars.Add((grammarRef, grammarImplTI));
                        def ruleNameToType = Hashtable();
                        foreach (ruleTI in grammarDescriptorImplTI.GetNestedTypes())
                          when (ParseRuleClassName(ruleTI.Name) is Some((type, name)))
                          {
                            def name = NameRef(ruleTI.NameLocation, name);
                            def ruleType = ret:
                              {
                                foreach (method is IMethod in ruleTI.GetMembers())
                                  when (method.Name == "ResultType")
                                    if (method.ReturnType.TryUnify(Manager.InternalType.Void))
                                      ret(RuleType.Void());
                                    else
                                      ret(RuleType.NType(method.ReturnType :> FixedType));
                                RuleType.Chars();
                              }
                            ruleNameToType.Add(name, ruleType);
                            def isExtentionPoint = type is RuleDefinitionType.ExtentionPoint;
                            _parsedGrammar = _parsedGrammar.Add(RuleDefinition.ExternalRule(ruleTI.NameLocation, _parsedGrammar.Count, makeName(name), [], grammarRef, isExtentionPoint));
                          }
                        _externalRuleTypeGetters.Add(grammarRef.Id, name => ruleNameToType[name]);

                      | _ => Message.Error(grammarRef.Location, $"$(ti.FullName) not grammar.")
                    }

                  | _ => Message.Error(grammarRef.Location, $"$(ti.FullName) not grammar.")
                }

              | _ => Message.Error("o_O");
            }

          | _ => Message.Error(grammarRef.Location, "Not class.");
        }
      }
    }
  }
}
