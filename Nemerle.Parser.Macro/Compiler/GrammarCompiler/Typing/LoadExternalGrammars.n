using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Imperative;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public static GetNestedTypes(this ti : LibraryReference.ExternalTypeInfo) : list[TypeInfo]
    {
      def nestedTypes = SCG.List();
      foreach ((_, node) in ti.NamespaceNode.Children.KeyValuePairs)
      {
        node.EnsureCached();
        match (node.Value)
        {
          | NamespaceTree.TypeInfoCache.Cached(ti)           => nestedTypes.Add(ti)
          | NamespaceTree.TypeInfoCache.CachedAmbiguous(tis) => nestedTypes.AddRange(tis)
          | _ => ()
        }
      }
      nestedTypes.Filter(nested => nested.DeclaringType?.Equals(ti));
    }

    private _externalGrammars : SCG.List[GrammarRef * TypeInfo] = SCG.List();

    private _externalRuleTypeGetters : SCG.Dictionary[int, NameRef -> RuleType] = SCG.Dictionary();
    private mutable _loadingExternalGrammars : bool = false;
    public LoadExternalGrammars() : void
    {
      when (_loadingExternalGrammars)
        return;
      _loadingExternalGrammars = true;

      foreach (grammarRef in ParsedGrammar.GrammarRefs)
      {
        match (grammarRef.GrammarType)
        {
          | FixedType.Class(ti, tiArgs) =>
            when (!tiArgs.IsEmpty())
              Message.Error(grammarRef.Location, "Generic grammar not supported.");
            match (ti)
            {
              | tb is TypeBuilder =>
                match (tb.UserData[typeof(GrammarCompiler)])
                {
                  | compiler is GrammarCompiler =>
                    _externalGrammars.Add((grammarRef, compiler._implTB));
                    compiler.LoadExternalGrammars();
                    def grammar = compiler.ParsedGrammar;
                    _externalRuleTypeGetters.Add(grammarRef.Id, compiler.GetRuleType);
                    foreach (rule in grammar.Rules)
                    {
                      match (rule)
                      {
                        | RuleDefinition.ExternalRule => ()
                        | rule =>
                          def isExtentionPoint = rule is RuleDefinition.ExtentionPoint;
                          _parsedGrammar = _parsedGrammar.Add(RuleDefinition.ExternalRule(rule.Name.Location, _parsedGrammar.Count, rule.Name, [], grammarRef, isExtentionPoint));
                      }
                    }

                  | _ => Message.Error("Implementation eror. No GrammarCompiler in type builder.");
                }

              | ti is LibraryReference.ExternalTypeInfo =>
                match (ti.GetNestedTypes().Filter(ti => ti.Name == _implTB.Name))
                {
                  | [ti] =>
                    _externalGrammars.Add((grammarRef, ti));
                    def ruleNameToType = Hashtable();
                    foreach (method is IMethod in ti.GetMembers())
                      when (ParseRuleName(method.Name) is Some(name))
                      when (method.GetParameters().Last().Type is FixedType.Ref(type))
                      {
                        ruleNameToType.Add(name, RuleType.NType(type :> FixedType));
                        def isExtentionPoint = method.GetParameters().Length == 4;
                        _parsedGrammar = _parsedGrammar.Add(RuleDefinition.ExternalRule(method.NameLocation, _parsedGrammar.Count, NameRef(method.NameLocation, name), [], grammarRef, isExtentionPoint));
                      }
                    _externalRuleTypeGetters.Add(grammarRef.Id, name => ruleNameToType[name.Id]);

                  | _ => Message.Error(grammarRef.Location, $"$(ti.FullName) not grammar.")
                }

              | _ => Message.Error("o_O");
            }

          | _ => Message.Error(grammarRef.Location, "Not class.");
        }
      }
    }
  }
}
