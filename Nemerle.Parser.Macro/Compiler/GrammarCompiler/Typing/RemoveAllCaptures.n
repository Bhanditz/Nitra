using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace Nemerle.Parser
{
  internal partial class GrammarCompiler
  {
    public RemoveAllCaptures(curRule : Rule) : Rule
    {
      | Capture(_, rule)                               => RemoveAllCaptures(rule);
      | Sequence(rules)                                => Rule.Sequence(curRule.Location, rules.Map(RemoveAllCaptures))
      | Repeat(min, max, rule)                         => Rule.Repeat(curRule.Location, min, max, RemoveAllCaptures(rule))
      | RepeatWithSeparator(min, max, rule, separator) => Rule.RepeatWithSeparator(curRule.Location, min, max, RemoveAllCaptures(rule), RemoveAllCaptures(separator))
      | Not(rule)                                      => Rule.Not(curRule.Location, RemoveAllCaptures(rule))
      | And(rule)                                      => Rule.And(curRule.Location, RemoveAllCaptures(rule))
      | Scope(name, rule)                              => Rule.Scope(curRule.Location, name, RemoveAllCaptures(rule))
      | Call | PrefixCall | String | Cut               => curRule
    }

    public RemoveAllCaptures(grammar : Grammar) : Grammar
    {
      grammar.TransformRules(rd => RemoveAllCaptures(rd.rule), rd => RemoveAllCaptures(rd.rule), rd => RemoveAllCaptures(rd.rule), rd => rd.rule)
    }
  }
}
