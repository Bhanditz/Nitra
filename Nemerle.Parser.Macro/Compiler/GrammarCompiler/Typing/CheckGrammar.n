using System;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    private CheckRuleCalls(grammar : Grammar) : bool
    {
      def check(rule : Rule)
      {
        | PrefixCall(name, _)
        | Call(name, _)    =>
          if (grammar.Rules.Exists(rd => rd.Name.Id == name.Id))
            true
          else
          {
            Message.Error(name.Location, $"There is no rule \"$name\" in grammar.");
            false
          }
        | Choice(rules)
        | Sequence(rules)  => rules.Fold(true, (rule, res) => check(rule) && res)
        | Not(rule)
        | And(rule)
        | Capture(_, rule)
        | Scope(_, rule)
        | Repeat(_, _, rule) => check(rule)
        | Chars | Fsm | Cut => true
      }
      grammar.Rules.Fold(true, (rd, res) =>
        {
          def r = match (rd : RuleDefinition)
          {
            | ExternalRule                 => true
            | ExtentionPoint               => true
            | ExtentionPrefix(_, rule)     => check(rule)
            | ExtentionPostfix(_, _, rule) => check(rule)
            | Simple(_, rule)              => check(rule)
          }
          r && res
        });
    }
  }
}
