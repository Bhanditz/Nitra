using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    [Accessor]
    private _typer                 : Typer;
    [Accessor]
    private _grammarTB             : TypeBuilder;
    [Accessor]
    private _implTB                : TypeBuilder;
    private _stateTB               : TypeBuilder;
    private _grammarDescriptorImpl : TypeBuilder;
    private _parsingErrorsTB       : TypeBuilder;
    private _isDebug               : bool;
    private _emitDebugSources      : bool;

    [Accessor]
    private mutable _allRules : bool;

    [Accessor]
    private mutable _parsedGrammar  : Grammar;
    [Accessor]
    private mutable _typedGrammar   : Grammar;
    [Accessor]
    private mutable _untypedGrammar : Grammar;

    public this(typer : Typer, tb : TypeBuilder, options : PExpr, rules : PExpr)
    {
      _typer                 = typer;
      _grammarTB             = tb;
      _implTB                = _grammarTB.DefineNestedType(MakeGrammarImpl());
      _grammarDescriptorImpl = _grammarTB.DefineNestedType(MakeGrammarDescriptorImpl());
      _parsingErrorsTB       = _grammarTB.DefineNestedType(MakeParsingErrorsImpl());
      _stateTB               = _implTB.DefineNestedType(MakeGrammarStateImpl());

      _isDebug   = _typer.Manager.Options.IsConstantDefined("DEBUG");

      _emitDebugSources = match (options) { | <[ Options = EmitDebugSources ]> => true | _ => false }

      _parsedGrammar = GrammarParser(_typer, false).ParseGrammar(rules);

      DefineInterfaceMembers();
    }

    public IsDebug   : bool { get { _isDebug } }
    public IsRelease : bool { get { !_isDebug } }

    public Optimization : bool { get { !_isDebug } }
  }
}
