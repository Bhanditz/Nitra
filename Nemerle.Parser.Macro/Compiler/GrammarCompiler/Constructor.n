using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    [Accessor]
    private _typer            : Typer;
    [Accessor]
    private _tb               : TypeBuilder;
    private _isDebug          : bool;
    private _emitDebugSources : bool;

    [Accessor]
    private _allRules : bool;

    [Accessor]
    private _parsedGrammar  : Grammar;
    [Accessor]
    private _typedGrammar   : Grammar;
    [Accessor]
    private _untypedGrammar : Grammar;

    public this(typer : Typer, tb : TypeBuilder, options : PExpr, rules : PExpr)
    {
      _typer    = typer;
      _tb       = tb;
      _isDebug  = _typer.Manager.Options.IsConstantDefined("DEBUG");

      _emitDebugSources = match (options) { | <[ Options = EmitDebugSources ]> => true | _ => false }

      _parsedGrammar = GrammarParser(_typer, false).ParseGrammar(rules);

      _allRules = CheckRuleCalls(_parsedGrammar);

      def typedGrammar = GrammarTyper.AddArgumentCaptures(_parsedGrammar, typer);
      def untypedGrammar = GrammarTyper.RemoveAllCaptures(typedGrammar);

      _typedGrammar   = if(_isDebug) typedGrammar   else Optimizer.OptimizeGrammar(typedGrammar);
      _untypedGrammar = if(_isDebug) untypedGrammar else Optimizer.OptimizeGrammar(untypedGrammar);
    }

    public IsDebug   : bool { get { _isDebug } }
    public IsRelease : bool { get { !_isDebug } }

    public Optimization : bool { get { !_isDebug } }

    public DecorateRuleName(name : string) : string
    {
      $"_#_$(name)_"
    }

    public DecorateRuleClassName(name : string) : string
    {
      $"_#class#_$(name)_"
    }

    public static ScopeBeginSufix = "ScopeBegin";
    public static ScopeEndSufix   = "ScopeEnd";
  }
}
