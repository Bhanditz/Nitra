using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    [Accessor]
    private _typer            : Typer;
    [Accessor]
    private _grammarTB        : TypeBuilder;
    [Accessor]
    private _implTB           : TypeBuilder;
    private _isDebug          : bool;
    private _emitDebugSources : bool;

    [Accessor]
    private mutable _allRules : bool;

    [Accessor]
    private mutable _parsedGrammar  : Grammar;
    [Accessor]
    private mutable _typedGrammar   : Grammar;
    [Accessor]
    private mutable _untypedGrammar : Grammar;

    public this(typer : Typer, tb : TypeBuilder, options : PExpr, rules : PExpr)
    {
      def impl = <[decl:
        public sealed class Grammar : $(tb.GetMemType() : typed), IGrammar
        {
          public RootGrammar : IGrammar { get; }

          public this()
          {
            RootGrammar = this;
          }

          public this([NotNull] grammar : IGrammar)
          {
            RootGrammar = grammar;
          }

          public PushGrammarState() : void {}
          public PopGrammarState() : void {}

          private static _descriptor : GrammarDescriptor = GrammarDescriptor($(tb.Name : string), Grammar, Grammar);
          public Descriptor : GrammarDescriptor { get { _descriptor } }
        }
      ]>;

      _typer     = typer;
      _grammarTB = tb;
      _implTB    = _grammarTB.DefineNestedType(impl);
      _isDebug   = _typer.Manager.Options.IsConstantDefined("DEBUG");

      _emitDebugSources = match (options) { | <[ Options = EmitDebugSources ]> => true | _ => false }

      _parsedGrammar = GrammarParser(_typer, false).ParseGrammar(rules);

      DefineInterfaceMembers();
    }

    public IsDebug   : bool { get { _isDebug } }
    public IsRelease : bool { get { !_isDebug } }

    public Optimization : bool { get { !_isDebug } }

    public DecorateRuleName(name : string) : string
    {
      $"_#_$(name)_"
    }

    public DecorateRuleClassName(name : string) : string
    {
      $"_#class#_$(name)_"
    }

    public static ScopeBeginSufix = "ScopeBegin";
    public static ScopeEndSufix   = "ScopeEnd";
  }
}
