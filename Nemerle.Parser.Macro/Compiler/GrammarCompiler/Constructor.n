using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    [Accessor]
    private _typer                 : Typer;
    [Accessor]
    private _grammarTB             : TypeBuilder;
    [Accessor]
    private _implTB                : TypeBuilder;
    private _stateTB               : TypeBuilder;
    private _grammarDescriptorImpl : TypeBuilder;
    private _isDebug               : bool;
    private _emitDebugSources      : bool;

    [Accessor]
    private mutable _allRules : bool;

    [Accessor]
    private mutable _parsedGrammar  : Grammar;
    [Accessor]
    private mutable _typedGrammar   : Grammar;
    [Accessor]
    private mutable _untypedGrammar : Grammar;

    public this(typer : Typer, tb : TypeBuilder, options : PExpr, rules : PExpr)
    {
      def impl = <[decl:
        public sealed class Grammar : $(tb.GetMemType() : typed), IGrammar
        {
          public Parser : Parser { get; private set; }

          public this()
          {
          }

          public this([NotNull] parser : Parser)
          {
            Parser = parser;
          }

          private static _descriptor : GrammarDescriptor = GrammarDescriptorImpl();
          public static StaticDescriptor : GrammarDescriptor { get { _descriptor } }
          public Descriptor : GrammarDescriptor { get { _descriptor } }
        }
      ]>;

      def grammarDescriptorImpl  = <[decl:
        private sealed class GrammarDescriptorImpl : GrammarDescriptor
        {
          public override Name : string { get { $(tb.Name : string) } }

          public override NewGrammar(parser : Internal.Parser) : Internal.IGrammar
          {
            Grammar(parser);
          }
        }
      ]>;

      _typer                 = typer;
      _grammarTB             = tb;
      _implTB                = _grammarTB.DefineNestedType(impl);
      _grammarDescriptorImpl = _grammarTB.DefineNestedType(grammarDescriptorImpl);

      def stateImpl = <[decl:
        private sealed class GrammarState : Nemerle.Parser.Internal.IGrammarState
        {
          public Grammar : $(_implTB.GetMemType() : typed) { get; }
        }
      ]>;
      _stateTB   = _implTB.DefineNestedType(stateImpl);

      _isDebug   = _typer.Manager.Options.IsConstantDefined("DEBUG");

      _emitDebugSources = match (options) { | <[ Options = EmitDebugSources ]> => true | _ => false }

      _parsedGrammar = GrammarParser(_typer, false).ParseGrammar(rules);

      DefineInterfaceMembers();
    }

    public IsDebug   : bool { get { _isDebug } }
    public IsRelease : bool { get { !_isDebug } }

    public Optimization : bool { get { !_isDebug } }

    public DecorateRuleName(name : string) : string
    {
      $"_#_$(name)_"
    }

    public ParseRuleName(name : string) : option[string]
    {
      if (name.StartsWith("_#_") && name.EndsWith("_"))
        Some(name.Substring(3, name.Length - 4))
      else
        None()
    }

    public DecorateRuleClassName(name : string) : string
    {
      $"_#class#_$(name)_"
    }

    public DecorateGrammarRef(grammarRef : GrammarRef) : string
    {
      $"_#grammar#$(grammarRef.Id)"
    }

    public static ScopeBeginSufix = "ScopeBegin";
    public static ScopeEndSufix   = "ScopeEnd";
  }
}
