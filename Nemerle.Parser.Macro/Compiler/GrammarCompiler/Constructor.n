using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class GrammarCompiler
  {
    public GrammarTB               : TypeBuilder;
    public GrammarImplTB           : TypeBuilder;
    public GrammarStateTB          : TypeBuilder;
    public GrammarDescriptorImplTB : TypeBuilder;
    public ParsingErrorsTB         : TypeBuilder;

    [Accessor]
    private _typer                 : Typer;
    private _isDebug               : bool;
    private _emitDebugSources      : bool;

    [Accessor]
    private mutable _allRules : bool;

    [Accessor]
    private mutable _parsedGrammar  : Grammar;
    [Accessor]
    private mutable _typedGrammar   : Grammar;
    [Accessor]
    private mutable _untypedGrammar : Grammar;

    public this(typer : Typer, tb : TypeBuilder, options : PExpr, rules : PExpr)
    {
      GrammarTB               = tb;
      GrammarImplTB           = GrammarTB.DefineNestedType(MakeGrammarImpl());
      GrammarDescriptorImplTB = GrammarTB.DefineNestedType(MakeGrammarDescriptorImpl());
      ParsingErrorsTB         = GrammarTB.DefineNestedType(MakeParsingErrorsImpl());
      GrammarStateTB          = GrammarImplTB.DefineNestedType(MakeGrammarStateImpl());

      _typer                  = typer;
      _isDebug                = _typer.Manager.Options.IsConstantDefined("DEBUG");
      _emitDebugSources       = match (options) { | <[ Options = EmitDebugSources ]> => true | _ => false }
      _parsedGrammar          = GrammarParser(_typer, false).ParseGrammar(rules);

      Typer.Manager.ExecBeforeAddMembers(_ =>
      {
        DoTyping();
        DefineAst();
        DefineInterfaceMembers();
      });
    }

    public IsDebug   : bool { get { _isDebug } }
    public IsRelease : bool { get { !_isDebug } }

    public Optimization : bool { get { !_isDebug } }
  }
}
