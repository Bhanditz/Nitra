using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileRegularRule(rd : RuleDefinition.Regular) : void
    {
      def methodName = _grammarCompiller.DecorateRuleName(rd);

      def makeFsm(_ : RegularRule) : FSM
      {
        | Choice(rules)                            => FSMBuilder.Choice(rules.Map(makeFsm))
        | Sequence(rules)                          => FSMBuilder.Seq(rules.Map(makeFsm))
        | Chars(chars)                             => FSMBuilder.Seq(chars)
        | Repeat(min, max, rule)                   => FSMBuilder.Repeat(min, max, makeFsm(rule))
        | RepeatWithSeparator(min, max, rule, sep) => FSMBuilder.RepeatWithSeparator(min, max, makeFsm(rule), makeFsm(sep))
        | Call(name) =>
          match (_grammarCompiller.TypedGrammar.GetRule(name))
          {
            | Regular as rd => makeFsm(rd.rule);
            | _ => assert(false)
          }
      }

      def body = CompileFsm(makeFsm(rd.rule));

      def method = <[decl:
          public $(methodName : dyn)(pos : int, text : string) : int
          {
            unchecked
            {
              mutable c : char;
              _ = c; // eliminate warning "a local value c was never used"
              $body;
            }
          }
        ]>;

      _grammarCompiller.DefineImplementation(method);
    }
  }
}
