using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private mutable _sequenseLevel : int = 0;

    public CompileRuleSequence(rule : Rule.Sequence, results : list[string]) : PExpr
    {
      ++_sequenseLevel;
      def code = SCG.List();
      def generateSequenceOffsets = _sequenseLevel == 1 && (_ruleDefinition is RuleDefinition.ExtentionPrefix || _ruleDefinition is RuleDefinition.ExtentionPostfix);
      def generate(rules : list[Rule], results : list[string], ofsPos : int) : void
      {
        match (rules)
        {
          | rule :: rules =>
            def seqElement(curResults, tailResults)
            {
              def checkResult()
              {
                if (generateSequenceOffsets)
                  <[ pos >= 0 && (isBest || { isBest = bestOffsets[$(ofsPos : int)] < pos; isBest || bestOffsets[$(ofsPos : int)] == pos }) ]>
                else
                  <[ pos >= 0 ]>
              }
              code.Add(<[ def pos = $(CompileRule(rule, curResults)); ]>);
              code.Add(<[ unless ($(checkResult())) seqResult(-1); ]>);
              when (generateSequenceOffsets)
                code.Add(<[ def $($"ofs$ofsPos" : dyn) = pos; ]>);
              generate(rules, tailResults, ofsPos + 1)
            }
            match (rule)
            {
              | Capture(ty, _) when !(ty is RuleType.Void) =>
                match (results)
                {
                  | result :: results => seqElement([result], results)
                  | _                 => code.Add(PExpr.Error("Empty result list"))
                }
              | _ => seqElement([], results)
            }

          | [] =>
            assert(results.Length == 0);
            def res = if (generateSequenceOffsets)
            {
              def offsetSetters = $[0..ofsPos - 1].Map(i => <[ bestOffsets[$(i : int)] = $($"ofs$i" : dyn); ]>);
              <[
                if (isBest)
                {
                  { ..$offsetSetters }
                  for (mutable i = $(ofsPos : int); i < bestOffsets.Length && bestOffsets[i] >= 0; ++i)
                    bestOffsets[i] = -1;
                  pos
                }
                else
                  -1;
              ]>
            }
            else
              <[ pos ]>;
            code.Add(res);
        }
      }
      generate(rule.rules, results, 0);
      --_sequenseLevel;
      <[ { seqResult: { ..$(code.NToList()) } } ]>
    }
  }
}
