using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private mutable _sequenseLevel : int = 0;

    public CompileRuleSequence(rule : Rule.Sequence) : PExpr * list[string]
    {
      ++_sequenseLevel;
      def generateSequenceOffsets = _sequenseLevel == 1 && (_ruleDefinition is RuleDefinition.ExtentionPrefix || _ruleDefinition is RuleDefinition.ExtentionPostfix);
      def makeSubruleCode(ofsPos, rule)
      {
        def checkResult()
        {
          if (generateSequenceOffsets)
            <[ pos >= 0 && (isBest || { isBest = bestOffsets[$(ofsPos : int)] < pos; isBest || bestOffsets[$(ofsPos : int)] == pos }) ]>
          else
            <[ pos >= 0 ]>
        }
        def (subruleCode, results) = CompileRule(rule);
        def code =
          [ <[ def pos = $subruleCode; ]>
          , <[ unless ($(checkResult())) seqResult(-1); ]>
          , if (generateSequenceOffsets) <[ def $($"ofs$ofsPos" : dyn) = pos; ]> else <[ () ]>
          ];
        (code, results)
      }
      def rules = rule.rules.MapI(makeSubruleCode);
      def code    = rules.Map(x => x[0]).Flatten();
      def results = rules.Map(x => x[1]).Flatten();
      def last = if (generateSequenceOffsets)
      {
        def offsetSetters = $[0..rules.Length - 1].Map(i => <[ bestOffsets[$(i : int)] = $($"ofs$i" : dyn); ]>);
        <[
          if (isBest)
          {
            { ..$offsetSetters }
            for (mutable i = $(rules.Length : int); i < bestOffsets.Length && bestOffsets[i] >= 0; ++i)
              bestOffsets[i] = -1;
            pos
          }
          else
            -1;//TODO: Сообщать о неоднозначности
        ]>
      }
      else
        <[ pos ]>;

      --_sequenseLevel;
      (<[ { seqResult: { ..$(code.Append([last])) } } ]>, results)
    }
  }
}
