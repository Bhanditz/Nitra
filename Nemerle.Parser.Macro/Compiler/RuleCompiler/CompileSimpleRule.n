using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileSimpleRule(rd : RuleDefinition.Simple) : void
    {
      def methodName = _grammarCompiller.DecorateRuleName(rd);

      def body = if (_useResult)
      {
        def (varNames, setResult) = MakeHandlerCall(rd.rule);
        def subRulesCode = CompileRule(rd.rule, varNames);

        def names = _grammarCompiller.DefineMemoize(rd.Name, rd);

        DefVars(varNames, <[
          {
            if ($(names.StartPos : dyn) == pos)
            {
              when ($(names.EndPos : dyn) >= 0)
                result = $(names.Result : dyn);
              $(names.EndPos : dyn)
            }
            else
            {
              def newPos = $subRulesCode;

              $(names.StartPos : dyn) = pos;
              $(names.EndPos : dyn) = newPos;

              when (newPos >= 0)
              {
                $setResult;
                $(names.Result : dyn) = result;
              }

              newPos
            }
          }
        ]>)
      }
      else
        CompileRule(rd.rule, []);

      def body =
        <[
          unchecked
          {
            mutable c : char;
            _ = c; // eliminate warning "a local value c was never used"
            $body;
          }
        ]>;

      def method = if (_useResult)
      {
        def ty = _grammarCompiller.GetRuleNType(rd);
        <[decl:
          public $(methodName : dyn)(pos : int, text : string, result : ref $(ty : typed)) : int
          {
            $body;
          }
        ]>
      }
      else
      {
        <[decl:
          public $(methodName : dyn)(pos : int, text : string) : int
          {
            $body;
          }
        ]>
      }

      _grammarCompiller.DefineImplementation(method);
    }
  }
}
