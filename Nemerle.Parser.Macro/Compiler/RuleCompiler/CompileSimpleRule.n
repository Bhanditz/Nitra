using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileSimpleRule(rule : RuleDefinition.Simple) : void
    {
      def methodName = _grammarCompiller.DecorateRuleName(rule.Name.Id);

      def body =
        <[
          unchecked
          {
            mutable c : char;
            _ = c; // eliminate warning "a local value c was never used"
            $(CompileRule(rule.rule, if (_useResult) ["result"] else []))
          }
        ]>;

      def method = if (_useResult)
      {
        def ty = GetRuleType(rule);
        <[decl:
          private $(methodName : dyn)(pos : int, text : string, result : ref $ty) : int
          {
            $body;
          }
        ]>
      }
      else
      {
        <[decl:
          private $(methodName : dyn)(pos : int, text : string) : int
          {
            $body;
          }
        ]>
      }

      _grammarCompiller.DefineWithSource(method);
    }
  }
}
