using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private _vars : SCG.HashSet[string] = SCG.HashSet();
    private MakeVarName(rule : Rule) : string
    {
      //assert2(!(rule.Type is RuleType.Void));
      //assert(!(rule.Type is RuleType.Void));
      def name = $"_ast_$(rule.Id)";
      _ = _vars.Add(name);
      name;
    }

    private DefVars(vars : list[string], mainExpr : PExpr.Sequence) : PExpr.Sequence
    {
      def vars = vars.Map(var => <[ mutable $(var : dyn); ]>);
      match (mainExpr)
      {
        | <[ { ..$nestedExprs } ]> => <[ { ..$(vars + nestedExprs) } ]>
      }
    }
  }
}
