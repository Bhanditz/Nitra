using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public SetParsingErrorCode(name : string) : PExpr
    {
      def isSimple = _ruleDefinition is RuleDefinition.Simple;
      def (posName, tokenName) = if (isSimple)
        ( <[ _parsingErrors.$(_grammarCompiller.DecorateRuleName(_ruleDefinition) : dyn) ]>
        , <[ _parsingErrors.$(_grammarCompiller.DecorateTokenDescriptor(_ruleDefinition) : dyn) ]>
        )
      else
        ( <[ _grammar._parsingErrors.$(_grammarCompiller.DecorateRuleName(_ruleDefinition) : dyn) ]>
        , <[ _grammar._parsingErrors.$(_grammarCompiller.DecorateTokenDescriptor(_ruleDefinition) : dyn) ]>
        );
      <[
        when ($posName < pos)
        {
          $posName = pos;
          $tokenName = $(_grammarCompiller.GetTokenDescriptor(name, _ruleDefinition));
        }
      ]>
    }
  }
}
