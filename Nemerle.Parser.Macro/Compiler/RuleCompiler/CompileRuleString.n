using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileRuleString(rule : Rule.String) : PExpr
    {
      def len = rule.str.Length;
      if (len > 0)
      {
        def check = if (len > 1) <[pos + $((len - 1) : int)]> else <[ pos ]>;

        def makeCharCheckCode(ch : char, i : int) : PExpr
        {
          def index = if (i <= 0) <[ pos ]> else <[ pos + $(i : int) ]>;
          <[ text[$index] == $(ch : char) ]>
        }
        def exprs = rule.str.Select(makeCharCheckCode);
        def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);

        <[
          if ($check < text.Length && $condExpr)
            pos + $(len : int)
          else
          {
            $(SetParsingErrorCode(rule.str, true));
            -1
          }
        ]>
      }
      else
        <[ pos ]>
    }
  }
}
