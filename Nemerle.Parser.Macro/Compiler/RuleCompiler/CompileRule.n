using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private CompileRule(currentRule : Rule, results : list[string]) : PExpr
    {
      def code = match (currentRule)
      {
        | And          as rule => assert(results.IsEmpty()); CompileRuleAnd         (rule)
        | Not          as rule => assert(results.IsEmpty()); CompileRuleNot         (rule)
        | Fsm          as rule => assert(results.IsEmpty()); CompileRuleFsm         (rule)
        | Chars        as rule => assert(results.IsEmpty()); CompileRuleChars       (rule)
        | Call         as rule =>                            CompileRuleCall        (rule, results)
        | Sequence     as rule =>                            CompileRuleSequence    (rule, results)
        | Choice       as rule =>                            CompileRuleChoice      (rule, results)
        | Repeat       as rule =>                            CompileRuleRepeat      (rule, results)
        | Capture      as rule =>                            CompileRuleCapture     (rule, results)
        | Scope        as rule =>                            CompileRuleScope       (rule, results)
        | Cut          as rule =>                            CompileRuleCut         (rule, results)
      }

      if (_grammarCompiller.IsDebug)
        match (currentRule)
        {
          | Capture(Argument, _) => code
          | _                    => <[ _ = $($"$currentRule" : string); $code ]>
        }
      else
        code
    }

    public CompileRule() : PExpr
    {
      def compileRule()
      {
        match (_ruleToCompile.Rule)
        {
          | Some(rule) => <[ $(CompileRule(rule, if (_useResult) ["result"] else [])) ]>
          | None()     => CompileExtensibleRule()
        }
      }

      def addRecovery(code)
      {
        match (_ruleToCompile.Attributes.Filter(_ is RuleAttribute.Recovery))
        {
          | []                                   => code
          | [recovery is RuleAttribute.Recovery] =>
            if (_useResult)
              <[
                def newPos = $code;
                if (newPos < 0)
                {
                  def skipPos = $(CompileRule(Rule.Repeat(0, None(), Rule.Sequence([Rule.Not(recovery.stop), recovery.skip])), []));
                  if (skipPos > pos)
                  {
                    $("result" : dyn) = $(recovery.handlerName.Id : usesite)(pos, skipPos, $(_ruleToCompile.Id : int));
                    ResetMaxRollbackPos();
                    skipPos
                  }
                  else
                    -1
                }
                else
                  newPos
              ]>
            else
              code
          | _ =>
            Message.Error(_ruleToCompile.Location, "RuleAttribute.Recovery can be only one.");
            code
        }
      }

      def code = compileRule();
      def code = addRecovery(code);
      <[
        unchecked
        {
          mutable c : char;
          _ = rbp;
          _ = c; // eliminate warning "a local value c was never used"
          $code
        }
      ]>
    }
  }
}
