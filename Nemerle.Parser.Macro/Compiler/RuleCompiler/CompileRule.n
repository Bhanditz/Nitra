using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private CompileRule(currentRule : Rule, results : list[string]) : PExpr
    {
      def code = match (currentRule)
      {
        | And                 as rule => assert(results.IsEmpty());    CompileRuleAnd                 (rule)
        | Not                 as rule => assert(results.IsEmpty());    CompileRuleNot                 (rule)
        | String              as rule => assert(results.IsEmpty());    CompileRuleString              (rule)
        | Call                as rule => assert(results.Count() <= 1); CompileRuleCall                (rule, results)
        | PrefixCall          as rule => assert(results.Count() <= 1); CompileRulePrefixCall          (rule, results)
        | Sequence            as rule =>                               CompileRuleSequence            (rule, results)
        | Repeat              as rule => assert(results.Count() <= 1); CompileRuleRepeat              (rule, results)
        | RepeatWithSeparator as rule => assert(results.Count() <= 1); CompileRuleRepeatWithSeparator (rule, results)
        | Capture             as rule =>                               CompileRuleCapture             (rule, results)
        | Scope               as rule =>                               CompileRuleScope               (rule, results)
        | Cut                 as rule => assert(results.IsEmpty());    CompileRuleCut                 (rule)
      }

      if (_grammarCompiller.IsDebug)
        match (currentRule)
        {
          | Capture => code
          | _       => <[ _ = $($"$currentRule" : string); $code ]>
        }
      else
        code
    }

    public CompileRule() : void
    {
      match (_ruleDefinition)
      {
        | ExtentionPoint as rule   => CompileExtensionPoint(rule)
        | ExtentionPrefix as rule  => CompileExtensionPrefix(rule)
        | ExtentionPostfix as rule => CompileExtensionPostfix(rule)
        | Simple as rule           => CompileSimpleRule(rule)
        | Regular as rule          => CompileRegularRule(rule)
        | ExternalRule             => ()
      }
    }
  }
}
