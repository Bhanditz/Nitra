using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private CompileRule(currentRule : Rule) : PExpr * list[string]
    {
      def (code, results) = match (currentRule)
      {
        | And                 as rule => CompileRuleAnd                 (rule)
        | Not                 as rule => CompileRuleNot                 (rule)
        | String              as rule => CompileRuleString              (rule)
        | Call                as rule => CompileRuleCall                (rule)
        | PrefixCall          as rule => CompileRulePrefixCall          (rule)
        | Sequence            as rule => CompileRuleSequence            (rule)
        | Repeat              as rule => CompileRuleRepeat              (rule)
        | RepeatWithSeparator as rule => CompileRuleRepeatWithSeparator (rule)
        | Scope               as rule => CompileRuleScope               (rule)
        | Cut                 as rule => CompileRuleCut                 (rule)
      }

      def code = if (_grammarCompiller.IsDebug)
        <[
          _ = $($"$currentRule" : string);
          $code
        ]>;
      else
        code;
      (code, results);
    }

    public CompileRule() : void
    {
      match (_ruleDefinition)
      {
        | ExtentionPoint as rule   => CompileExtensionPoint(rule)
        | ExtentionPrefix as rule  => CompileExtensionPrefix(rule)
        | ExtentionPostfix as rule => CompileExtensionPostfix(rule)
        | Simple as rule           => CompileSimpleRule(rule)
        | Regular as rule          => CompileRegularRule(rule)
        | ExternalRule             => ()
      }
    }
  }
}
