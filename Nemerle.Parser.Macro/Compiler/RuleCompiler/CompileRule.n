using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    private CompileRule(currentRule : Rule, results : list[string]) : PExpr
    {
      def code = match (currentRule)
      {
        | And          as rule => assert(results.IsEmpty()); CompileRuleAnd         (rule)
        | Not          as rule => assert(results.IsEmpty()); CompileRuleNot         (rule)
        | Fsm          as rule => assert(results.IsEmpty()); CompileRuleFsm         (rule)
        | Chars        as rule => assert(results.IsEmpty()); CompileRuleChars       (rule)
        | Call         as rule =>                            CompileRuleCall        (rule, results)
        | Sequence     as rule =>                            CompileRuleSequence    (rule, results)
        | Choice       as rule =>                            CompileRuleChoice      (rule, results)
        | Repeat       as rule =>                            CompileRuleRepeat      (rule, results)
        | Capture      as rule =>                            CompileRuleCapture     (rule, results)
        | Scope        as rule =>                            CompileRuleScope       (rule, results)
        | Cut          as rule =>                            CompileRuleCut         (rule, results)
      }

      if (_grammarCompiller.IsDebug)
        match (currentRule)
        {
          | Capture(Argument, _) => code
          | _                    => <[ _ = $($"$currentRule" : string); $code ]>
        }
      else
        code
    }

    public CompileRule() : void
    {
      match (_ruleDefinition)
      {
        | ExtentionPoint as rule   => CompileExtensionPoint(rule)
        | ExtentionPrefix as rule  => CompileExtensionPrefix(rule)
        | ExtentionPostfix as rule => CompileExtensionPostfix(rule)
        | Simple as rule           => CompileSimpleRule(rule)
      }
    }

    private GetRuleType(rule : RuleDefinition) : PExpr
    {
      match (_grammarCompiller.TypedGrammar.GetRuleType(rule.Name))
      {
        | NType(ty) => <[ $(ty : typed) ]>
        | _ =>
          Message.Error(rule.Name.Location, "PEG implementation error.");
          PExpr.Error("PEG implementation error.");
      };
    }

    private _AddRecovery(code : PExpr) : PExpr
    {
      match (_ruleDefinition.Attributes.Filter(_ is RuleAttribute.Recovery))
      {
        | []                                   => code
        | [recovery is RuleAttribute.Recovery] =>
          if (_useResult)
            <[
              def newPos = $code;
              if (newPos < 0)
              {
                def skipPos = $(CompileRule(Rule.Repeat(0, None(), Rule.Sequence([Rule.Not(recovery.stop), recovery.skip])), []));
                if (skipPos > pos)
                {
                  $("result" : dyn) = $(recovery.handlerName.Id : usesite)(pos, skipPos, $(_ruleDefinition.Id : int));
                  ResetMaxRollbackPos();
                  skipPos
                }
                else
                  -1
              }
              else
                newPos
            ]>
          else
            code
        | _ =>
          Message.Error(_ruleDefinition.Location, "RuleAttribute.Recovery can be only one.");
          code
      }
    }
  }
}
