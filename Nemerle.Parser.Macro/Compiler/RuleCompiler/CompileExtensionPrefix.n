using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileExtensionPrefix(rd : RuleDefinition.ExtentionPrefix) : void
    {
      def className = _grammarCompiller.DecorateRuleName(rd.Name.Id) + "Class";
      def returnType = GetRuleType(rd);
      def makeBody(useResult)
      {
        <[
          unchecked // востановление после ошибок тут не нужно
          {         // оно будет произведено в точке расширения
                    // кеширование тоже не нужно
            mutable c : char;
            _ = c; // eliminate warning "a local value c was never used"
            $(CompileRule(rd.rule, if (useResult) ["result"] else []))
          }
        ]>
      }

      def implClass = <[decl:
        private class $(className : dyn) : ExtensionPrefixBase[$returnType]
        {
          public this(grammar : IGrammar)
          {
            base(char.MinValue, char.MaxValue);//TODO:FIXME
          }

          public override Parse(pos : int, test : string) : int
          {
            $(makeBody(false))
          }

          public override Parse(pos : int, test : string, result : ref $returnType) : int
          {
            $(makeBody(true))
          }

          public override Descriptor : ExtensionRuleDescriptor[ExtensionPrefixBase[$returnType]] { get { null } }//TODO:FIXME
        }
      ]>;

      _grammarCompiller.DefineWithSource(implClass);
    }
  }
}
