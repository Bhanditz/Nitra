using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileExtensionPrefix(rd : RuleDefinition.ExtentionPrefix) : void
    {
      def className = _grammarCompiller.DecorateRuleClassName(rd);
      def returnType = _grammarCompiller.GetBaseRuleNType(rd);
      def (subRulesCode, varNames) = CompileRule(rd.rule);
      def setResult = MakeHandlerCall(varNames);

      def implClass = <[decl:
        public class $(className : dyn) : ExtensionPrefixBase[$(returnType : typed)]
        {
          private _grammar : $(_grammarCompiller.GrammarImplTB.ParsedTypeName);
          public this(grammar : IGrammar)
          {
            base(char.MinValue, char.MaxValue);//TODO:FIXME
            _grammar = grammar :> $(_grammarCompiller.GrammarImplTB.ParsedTypeName);
          }

          public override Descriptor : RuleDescriptor { get { GrammarDescriptorImpl.$(className : dyn).StaticDescriptor } }
        }
      ]>;

      def tb = _grammarCompiller.GrammarImplTB.DefineNestedType(implClass);
      def body =
        <[
          mutable isBest = false;
          def newPos = $subRulesCode;
          when (newPos >= 0)
            $setResult;
          newPos
        ]>;
      _ = tb.DefineWithSource(
        <[decl:
          public override Parse(pos : int, text : string, bestOffsets : array[int], result : ref $(returnType : typed)) : int
          {
            unchecked // востановление после ошибок тут не нужно
            {         // оно будет произведено в точке расширения
              mutable c : char;
              _ = c; // eliminate warning "a local value c was never used"
              $(DefVars(_vars.NToList(), body))
            }
          }
        ]>);
      tb.Compile();
    }
  }
}
