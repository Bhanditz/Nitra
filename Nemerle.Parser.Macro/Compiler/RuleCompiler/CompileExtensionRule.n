using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileExtensionRule(_rule : RuleDefinition.Extention) : PExpr
    {
      //def isExtendRule(rd)
      //{
      //  match (rd.ResultType)
      //  {
      //    | RuleDefinitionType.Extention(name) => _ruleToCompile.Name.Id == name.Id
      //    | _                                  => false
      //  }
      //}

      //def ty = match(_ruleToCompile.ResultType)
      //{
      //  | RuleDefinitionType.Typed(NType(ty)) => ty
      //  | _                                   => assert(false);
      //}
      //def memoizeNames = _grammarCompiller.DefineMemoize(_ruleToCompile.Name, ty);

      //def rules = _grammarCompiller.TypedGrammar.Rules.Filter(isExtendRule);
      //def rules = Rule.Choice(rules.Map(rd => Rule.Call(rd.Name, 0)));
      //def rules = CompileRule(rules, if (_useResult) ["result"] else []);


      //<[
      //  if ($(memoizeNames.MemPos : dyn) == pos)
      //  {
      //    if ($(memoizeNames.MemRBP : dyn) < rbp)
      //    {
      //      when ($(memoizeNames.MemNewPos : dyn) >= 0)
      //        result = $(memoizeNames.MemResult : dyn);
      //      $(memoizeNames.MemNewPos : dyn)
      //    }
      //    else
      //    {
      //      -1
      //    }
      //  }
      //  else
      //  {
      //    $(memoizeNames.MemPos    : dyn) = pos;
      //    $(memoizeNames.MemNewPos : dyn) = -1;
      //    def loop(pos)
      //    {
      //      def oldPos = $(memoizeNames.MemNewPos : dyn);

      //      def newPos = $rules;

      //      $(memoizeNames.MemPos    : dyn) = pos;
      //      $(memoizeNames.MemNewPos : dyn) = newPos;
      //      $(memoizeNames.MemRBP    : dyn) = rbp;

      //      if (newPos >= 0)
      //      {
      //        $(memoizeNames.MemResult : dyn) = result;
      //        loop(newPos)
      //      }
      //      else
      //      {
      //        when ($(memoizeNames.MaxRollbackPos : dyn) < pos)
      //          $(memoizeNames.MaxRollbackPos : dyn) = pos;
      //        oldPos
      //      }
      //    }
      //    loop(pos)
      //  }
      //]>
      null
    }
  }
}
