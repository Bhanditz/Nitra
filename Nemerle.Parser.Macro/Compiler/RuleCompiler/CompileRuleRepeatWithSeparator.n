using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileRuleRepeatWithSeparator(rule : Rule.RepeatWithSeparator, results : list[string]) : PExpr
    {
      def setListResult(call : PExpr.Sequence)
      {
        if (_ruleDefinition.IsAst)
        {
          match (results)
          {
            | [] => call
            | [rule, separator] =>
              <[
                def newPos = $call;
                $(rule : dyn) = tmpRuleList.NToList();
                $(separator : dyn) = tmpSeparatorList.NToList();
                newPos
              ]>
            | _ => assert(false)
          }
        }
        else
          match (results)
          {
            | [] => call
            | [rule, separator] =>
              <[
                def newPos = $call;
                $(rule : dyn) = tmpRuleList;
                $(separator : dyn) = tmpSeparatorList;
                newPos
              ]>
            | _ => assert(false)
          }
      }
      def (ruleResult, separatorResult) = match (results)
      {
        | [] => ([], [])
        | [rule, separator] => ([rule], [separator])
        | _ => assert(false);
      }
      def (initialising1, addTokensToRuleList, _, ruleCode)           = MakeSubruleCode(ruleResult, rule.rule,
                    _                      => <[ def tmpRuleList = SCG.List(); ]>, 
                    (_, variableRefs)      => <[ tmpRuleList.Add(..$variableRefs); ]>,
                    _                      => <[ () ]>);
      def (initialising2, addTokensToSeparatorList, _, separatorCode) = MakeSubruleCode(separatorResult, rule.separator,
                    _                      => <[ def tmpSeparatorList = SCG.List(); ]>, 
                    (_, variableRefs)      => <[ tmpSeparatorList.Add(..$variableRefs); ]>,
                    _                      => <[ () ]>);
      match (rule)
      {
        | RepeatWithSeparator(min, None, _, _) =>
          PrepandExprs(initialising1 + initialising2,
            setListResult(<[
              def newPos = $ruleCode;
              if (newPos >= 0)
              {
                $addTokensToRuleList;
                def rep(pos : int)
                {
                  def startPos = pos;
                  def newPos = $separatorCode;
                  if (newPos >= 0)
                  {
                    $addTokensToSeparatorList;
                    def pos = newPos;
                    def newPos = $ruleCode;
                    if (newPos >= 0)
                    {
                      $addTokensToRuleList;
                      rep(newPos)
                    }
                    else
                      startPos
                  }
                  else
                    startPos
                }
                rep(newPos)
              }
              else
                $(match (min) { | 0 => <[ pos ]> | 1 => <[ -1 ]> | _ => assert(false) })
            ]>)
          )
        | _ => assert(false)
      }
    }
  }
}
