using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  internal partial class RuleCompiler
  {
    public CompileRuleRepeatWithSeparator(rule : Rule.RepeatWithSeparator) : PExpr * list[string]
    {
      def result = MakeVarName(rule);

      def (ruleCode,      ruleResults)      = CompileRule(rule.rule);
      def (separatorCode, separatorResults) = CompileRule(rule.separator);

      def ruleResults      = ruleResults     .Map(var => <[ $(var : dyn) ]>);
      def separatorResults = separatorResults.Map(var => <[ $(var : dyn) ]>);

      def code = match (rule)
      {
        | RepeatWithSeparator(min, None, _, _) =>
          <[
            def ruleItems    = System.Collections.Generic.List();
            def subruleItems = System.Collections.Generic.List();
            def newPos = $ruleCode;
            def pos = if (newPos >= 0)
            {
              ruleItems.Add(..$(ruleResults));
              def rep(pos : int)
              {
                def startPos = pos;
                def newPos = $separatorCode;
                if (newPos >= 0)
                {
                  subruleItems.Add(..$(separatorResults));
                  def pos = newPos;
                  def newPos = $ruleCode;
                  if (newPos >= 0)
                  {
                    ruleItems.Add(..$(ruleResults));
                    rep(newPos)
                  }
                  else
                    startPos
                }
                else
                  startPos
              }
              rep(newPos)
            }
            else
              $(match (min) { | 0 => <[ pos ]> | 1 => <[ -1 ]> | _ => assert(false) });
            $(result : dyn) = (ruleItems.NToList(), subruleItems.NToList());
            pos
          ]>
        | _ => assert(false)
      }
      (code, [result])
    }
  }
}
