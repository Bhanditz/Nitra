using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileRuleRepeat(rule : Rule.Repeat) : PExpr * list[string]
    {
      def result = MakeVarName(rule);
      def (subruleCode, results) = CompileRule(rule.rule);
      def results = results.Map(var => <[ $(var : dyn) ]>);
      def code = match (rule)
      {
        | Repeat(0, None, _) =>
          <[
            def items = System.Collections.Generic.List();
            def rep(pos : int)
            {
              def newPos = $subruleCode;
              if (newPos >= 0)
              {
                items.Add(..$(results));
                rep(newPos)
              }
              else
                pos
            }
            def pos = rep(pos);
            $(result : dyn) = items.NToList();
            pos
          ]>

        | Repeat(minCount, None, _) =>
          <[
            def items = System.Collections.Generic.List();
            def rep(count, pos)
            {
              def newPos = $subruleCode;
              if (newPos >= 0)
              {
                items.Add(..$(results));
                rep(count + 1, newPos)
              }
              else if (count >= $(minCount : int))
                pos
              else
                -1
            }
            def pos = rep(pos);
            $(result : dyn) = items.NToList();
            pos
          ]>

        | Repeat(0, Some(1), _) =>
          <[
            def newPos = $subruleCode;
            if (newPos >= 0)
            {
              $(result : dyn) = Some(..$results);
              newPos
            }
            else
            {
              $(result : dyn) = None();
              pos
            }
          ]>

        | Repeat(minCount, Some(maxCount), _) =>
          <[
            def items = System.Collections.Generic.List();
            def rep(count, pos)
            {
              if (count == $(maxCount : int))
                pos
              else
              {
                def newPos = $subruleCode;
                if (newPos >= 0)
                {
                  items.Add(..$(results));
                  rep(count + 1, newPos)
                }
                else if (count >= $(minCount : int))
                  pos
                else
                  -1
               }
            }
            def pos = rep(pos);
            $(result : dyn) = items.NToList();
            pos
          ]>
      }
      (code, [result])
    }
  }
}
