using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileExtensionPoint(ruleDef : RuleDefinition.ExtentionPoint) : void
    {
      def memoizeNames = _grammarCompiller.DefineExtensionPointMemoizeNames(ruleDef.Name, ruleDef.retType);

      def body = <[
        mutable curEndPos = -1; // вместе с параметром curResult содержит конечный результат разбора правила

        mutable c; // временная переменная для отсечения правил по первой букве

        mutable newResult; // содержит вновь полученное значение из вызываемого правила
        mutable newEndPos;

        if ($(memoizeNames.StartPos : dyn) == pos)
        {
          when ($(memoizeNames.EndPos : dyn) < 0)
            return -1; // обнаружена левая рекурсия в префиксном правиле
                       // или не смогли разобрать префикс
                       // все остальное не важно

          if ($(memoizeNames.BindingPower : dyn) == bindingPower) // если сила связывания совпадает возвращаем результат из кеша
          {
            curResult = $(memoizeNames.Result : dyn);
            return $(memoizeNames.EndPos : dyn);
          }
          else // если сила связывания не совпадает то из кеша можно достать только префикс
          {
            $(memoizeNames.BindingPower : dyn) = bindingPower;
            //$(memoizeNames.StartPos : dyn)   = pos;
            $(memoizeNames.EndPos : dyn)       = -1; // защита от левой рекурсии

            // достаем префикс из кеша
            curResult = $(memoizeNames.PrefixResult : dyn);
            curEndPos = $(memoizeNames.PrefixEndPos : dyn);
          }
        }
        else // стартовая позиция не совпадает
        {    // парсим префикс
          $(memoizeNames.BindingPower : dyn) = bindingPower;
          $(memoizeNames.StartPos : dyn)     = pos;
          $(memoizeNames.EndPos : dyn)       = -1; // защита от левой рекурсии

          if (pos < text.Length)
          {
            c = text[pos];
            foreach (prefixRule in $(memoizeNames.PrefixRules : dyn))
            {
              when (prefixRule.LowerBound <= c && c <= prefixRule.UpperBound)
              {
                newEndPos = prefixRule.Parse(pos, text, ref newResult);
                when (curEndPos < newEndPos)
                {
                  curResult = newResult;
                  curEndPos = newEndPos;
                }
              }
            }
          }
          else
          {
            // правило может захотеть сматчить конец текста
            // сомневаюсь что этот код будет хоть раз выполнен в реальной задаче
            // но для корректности он должен быть
            foreach (prefixRule in $(memoizeNames.PrefixRules : dyn))
            {
              newEndPos = prefixRule.Parse(pos, text, ref newResult);
              when (curEndPos < newEndPos)
              {
                curResult = newResult;
                curEndPos = newEndPos;
              }
            }
          }

          $(memoizeNames.PrefixResult : dyn) = curResult;
          $(memoizeNames.PrefixEndPos : dyn) = curEndPos;
        }

        when (curEndPos < 0)// не смогли разобрать префикс
          return -1;

        mutable bestResult = curResult;
        mutable bestEndPos = curEndPos;

        while (curEndPos < text.Length) // постфиксное правило которое не съело ни одного символа игнорируется
                                        // при достижении конца текста есть нечего
        {
          c = text[curEndPos];
          foreach (postfixRule in $(memoizeNames.PostfixRules : dyn))
            when (postfixRule.LowerBound <= c && c <= postfixRule.UpperBound && bindingPower < postfixRule.BindingPower)
            {
              newResult = curResult;
              newEndPos = postfixRule.Parse(pos, curEndPos, text, ref newResult);
              when (bestEndPos < newEndPos)
              {
                bestEndPos = newEndPos;
                bestResult = newResult;
              }
            }

          when (bestEndPos == curEndPos)
            break; // если нам не удалось продвинутся то заканчиваем разбор

          curResult = bestResult;
          curEndPos = bestEndPos;
        }

        $(memoizeNames.Result : dyn) = curResult;
        $(memoizeNames.EndPos : dyn) = curEndPos;
        curEndPos
      ]>;

      def methodName = _grammarCompiller.DecorateRuleName(ruleDef.Name.Id);
      def ty = GetRuleType(ruleDef);
      def method1 = <[decl:
        private $(methodName : dyn)(pos : int, text : string, bindingPower : int, curResult : ref $ty) : int
        {
          unchecked
          {
            $body;
          }
        }
      ]>;
      //TODO: FIXME
      def method2 = <[decl:
        private $(methodName : dyn)(pos : int, text : string, bindingPower : int) : int
        {
          mutable result;
          $(methodName : dyn)(pos, text, bindingPower, ref result);
        }
      ]>;

      _grammarCompiller.DefineWithSource(method1);
      _grammarCompiller.DefineWithSource(method2);
    }
  }
}
