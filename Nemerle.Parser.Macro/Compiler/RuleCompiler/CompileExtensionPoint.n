using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileExtensionPoint(ruleDef : RuleDefinition.ExtentionPoint) : PExpr
    {
      def isExtendRule(rd)
      {
        match (rd)
        {
          | RuleDefinition.Extention(baseRuleName, _) => ruleDef.Name.Id == baseRuleName.Id
          | _                                         => false
        }
      }

      def isRightRule(rd)
      {
        match (rd.rule : Rule)//TODO: Fix me.
        {
          | Capture(_, Sequence(Call(name, _) :: _))
          | Capture(_, Call(name, _)) => ruleDef.Name.Id == name.Id
          | _                         => false
        }
      }

      def memoizeNames = _grammarCompiller.DefineMemoize(ruleDef.Name, ruleDef.ruleType);

      def rules = _grammarCompiller.TypedGrammar.Rules.Filter(isExtendRule).Cast.[RuleDefinition.Extention]().NToList();
      def (rightRules, leftRules) = rules.Partition(isRightRule);
      def rules = Rule.Choice(rules.Map(rd => Rule.Call(rd.Name, 0)));
      def rules = CompileRule(rules, if (_useResult) ["result"] else []);


      <[
        if ($(memoizeNames.MemPos : dyn) == pos)
        {
          if ($(memoizeNames.MemRBP : dyn) < rbp)
          {
            when ($(memoizeNames.MemNewPos : dyn) >= 0)
              result = $(memoizeNames.MemResult : dyn);
            $(memoizeNames.MemNewPos : dyn)
          }
          else
          {
            -1
          }
        }
        else
        {
          $(memoizeNames.MemPos    : dyn) = pos;
          $(memoizeNames.MemNewPos : dyn) = -1;
          def loop(pos)
          {
            def oldPos = $(memoizeNames.MemNewPos : dyn);

            def newPos = $rules;

            $(memoizeNames.MemPos    : dyn) = pos;
            $(memoizeNames.MemNewPos : dyn) = newPos;
            $(memoizeNames.MemRBP    : dyn) = rbp;

            if (newPos >= 0)
            {
              $(memoizeNames.MemResult : dyn) = result;
              loop(newPos)
            }
            else
            {
              when ($(memoizeNames.MaxRollbackPos : dyn) < pos)
                $(memoizeNames.MaxRollbackPos : dyn) = pos;
              oldPos
            }
          }
          loop(pos)
        }
      ]>
    }
  }
}
