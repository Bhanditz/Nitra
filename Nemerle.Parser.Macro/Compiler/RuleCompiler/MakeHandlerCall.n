using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public MakeHandlerCall(rule : Rule) : list[string] * PExpr
    {
      def varNames     = MakeVariablesForRule(rule);

      def ty           = GrammarTyper.RuleTypeToNType(_grammarCompiller.TypedGrammar.GetRuleType(_ruleDefinition.Name), _grammarCompiller.Typer);
      def omitLocation = _ruleDefinition.Attributes.Exists(_ is RuleAttribute.OmitLocation);

      def startName = if (_ruleDefinition is RuleDefinition.ExtentionPostfix) <[ startPos ]> else  <[ pos ]>;
      def isMethod = _ruleDefinition is RuleDefinition.Simple;
      def setResultLocation =
        if (!omitLocation && ty.TryRequire(_pegLocatedType))
          match (varNames)
          {
            | []  with (start = startName,
                        end   = <[ newPos ]>)
            | _   with (start = <[ Nemerle.Parser.Internal.EvalLocationStart($(varNames.Head : dyn), $startName) ]>,
                        end   = <[ Nemerle.Parser.Internal.EvalLocationEnd($(varNames.Last() : dyn), newPos) ]>)
              =>
              def parsingSource = if (isMethod)
                <[ _parsingSource ]>;
              else
                <[ _grammar._parsingSource ]>;
              <[ result.Location = Nemerle.Parser.Location($parsingSource, $start, $end); ]>
          }
        else
          <[ () ]>;

      def setResult =
        if (_grammarCompiller.GetHandlerMethods().Contains(_ruleDefinition.Name))
        {
          def call = if (isMethod)
            <[ $(_ruleDefinition.Name.Id : dyn) ]>;
          else
            <[ _grammar.$(_ruleDefinition.Name.Id : dyn) ]>;

          <[ result = $call(..$(varNames.Map(var => <[ $(var : dyn) ]>))) ]>;
        }
        else if (varNames.Count() == 1)
          <[ result = $(varNames.Head : dyn) ]>
        else
          PExpr.Error("Too many variables.");

      (varNames, <[ $setResult; $setResultLocation ]>)
    }
  }
}
