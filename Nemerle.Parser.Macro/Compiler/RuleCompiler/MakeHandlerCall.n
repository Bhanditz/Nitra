using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  internal partial class RuleCompiler
  {
    public MakeHandlerCall(varNames : list[string]) : PExpr
    {
      def startName = if (_ruleDefinition is RuleDefinition.ExtentionPostfix) <[ startPos ]> else  <[ pos ]>;
      def isSimple  = _ruleDefinition is RuleDefinition.Simple;
      def isAst     = _ruleDefinition.IsAst;
      def resultLocation =
          match (varNames)
          {
            | []  with (start = startName,
                        end   = <[ newPos ]>)
            | _   with (start = <[ Nemerle.Parser.Internal.EvalLocationStart($(varNames.Head : dyn), $startName) ]>,
                        end   = <[ Nemerle.Parser.Internal.EvalLocationEnd($(varNames.Last() : dyn), newPos) ]>)
              =>
              def parsingSource = if (isSimple)
                <[ _parsingSource ]>;
              else
                <[ _grammar._parsingSource ]>;
              <[ Nemerle.Parser.Location($parsingSource, $start, $end); ]>
          }

      def varRefs = varNames.Map(var => <[ $(var : dyn) ]>);
      def handlerCall()
      {
        def m = _grammarCompiler.GetHandlerMethods()[_ruleDefinition.Name];
        if (isSimple)
          <[ $(m.Name : dyn) ]>;
        else
          <[ _grammar.$(m.Name : dyn) ]>;
      }
      def setResult =
        if (isAst)
        {
          def typeName = _grammarCompiler.MakePublicRuleName(_ruleDefinition.Name);
          def result = <[ $(typeName : dyn).Ast(..$(resultLocation :: <[ [] ]> :: varRefs));]>;
          //def result = <[ null ]>;
          if (_grammarCompiler.GetHandlerMethods().Contains(_ruleDefinition.Name))
            <[ def tmpResult = $result; result = tmpResult; $(handlerCall())(tmpResult); ]>;
          else
            <[ result = $result ]>
        }
        else if (varNames.Count() == 1)
          <[ result = $(varNames.Head : dyn) ]>
        else
          PExpr.Error("Too many variables.");

      setResult
    }
  }
}
