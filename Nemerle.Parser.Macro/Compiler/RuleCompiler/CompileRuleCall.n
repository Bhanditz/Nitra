using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileRuleCall(rule : Rule.Call, results : list[string]) : PExpr
    {
      def rd = _grammarCompiller.TypedGrammar.GetRule(rule.name);
      def isExtentionPoint = rd is RuleDefinition.ExtentionPoint;

      def isExtention      = _ruleDefinition is RuleDefinition.ExtentionPrefix || _ruleDefinition is RuleDefinition.ExtentionPostfix;

      def methodName = _grammarCompiller.DecorateRuleName(rule.name.Id);
      def call = if (isExtention)
        <[ _grammar.$(methodName : dyn) ]>
      else
        <[ $(methodName : dyn) ]>;

      match (results)
      {
        | [] =>
          _grammarCompiller.CallRule(rule.name, false);
          if (isExtentionPoint)
            <[ $call(pos, text, $(rule.bindingPower : int)) ]>
          else
            <[ $call(pos, text) ]>

        | [result] =>
          _grammarCompiller.CallRule(rule.name, true);
          if (isExtentionPoint)
            <[ $call(pos, text, $(rule.bindingPower : int), ref $(result : dyn)) ]>
          else
            <[ $call(pos, text, ref $(result : dyn)) ]>

        | _ => PExpr.Error("Implementation error: Multiple results in Rule.Call")
      }
    }
  }
}
