using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  partial internal class RuleCompiler
  {
    public CompileRuleCall(rule : Rule.Call) : PExpr * list[string]
    {
      def rd = _grammarCompiller.TypedGrammar.GetRule(rule.name);
      def isVoid = _grammarCompiller.GetRuleType(rule.name) is RuleType.Void;
      def isExtentionPoint()
      {
        match (rd)
        {
          | RuleDefinition.ExtentionPoint
          | RuleDefinition.ExternalRule(_, true) => true
          | _ => false
        }
      }

      def isExtention = _ruleDefinition is RuleDefinition.ExtentionPrefix || _ruleDefinition is RuleDefinition.ExtentionPostfix;

      def methodName = _grammarCompiller.DecorateRuleName(rule.name);
      def call = match (rd)
      {
        | RuleDefinition.ExternalRule(grammarRef, _) =>
          if (isExtention)
            <[ _grammar.$(_grammarCompiller.DecorateGrammarRef(grammarRef) : dyn).$(methodName : dyn) ]>
          else
            <[ $(_grammarCompiller.DecorateGrammarRef(grammarRef) : dyn).$(methodName : dyn) ]>

        | _ =>
          if (isExtention)
            <[ _grammar.$(methodName : dyn) ]>
          else
            <[ $(methodName : dyn) ]>
      }

      def call = if (rd is RuleDefinition.Regular)
      {
        def code = if (isExtentionPoint())
          <[ $call(pos, text, $(rule.bindingPower : int)) ]>
        else
          <[ $call(pos, text) ]>;
        <[
          def newPos = $code;
          when (newPos >= 0)
            $(MakeVarName(rule) : dyn) = Nemerle.Parser.NToken(pos, newPos);
          newPos
        ]>
      }
      else
      {
        if (isVoid)
          if (isExtentionPoint())
            <[ $call(pos, text, $(rule.bindingPower : int)) ]>
          else
            <[ $call(pos, text) ]>
        else
          if (isExtentionPoint())
            <[ $call(pos, text, $(rule.bindingPower : int), ref $(MakeVarName(rule) : dyn)) ]>
          else
            <[ $call(pos, text, ref $(MakeVarName(rule) : dyn)) ]>
      }
      def code = match (rd)
      {
        | Regular =>
          <[
            def newPos = $call;
            when (newPos < 0)
              $(SetParsingErrorCode(rd.Name.ToString(), false));
            newPos
          ]>
        | _ => call
      };
      (code, if (isVoid) [] else [MakeVarName(rule)])
    }
  }
}
