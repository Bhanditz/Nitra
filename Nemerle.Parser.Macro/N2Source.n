using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    N2SourceImpl.Instance(path, Nemerle.Macros.ImplicitCTX().Manager).BeforeInheritance();
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    N2SourceImpl.Instance(path, Nemerle.Macros.ImplicitCTX().Manager).BeforeTypedMembers();
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    N2SourceImpl.Instance(path, Nemerle.Macros.ImplicitCTX().Manager).WithTypedMembers();
  }

  internal class SyntaxModule
  {
    public Name : NameRef { get; set; }
    public Grammar : Grammar { get; set; }
    public Imports : list[Ast] { get; set; }
    public GrammarCompiler : GrammarCompiler { get; set; }
    public TypeBuilder : TypeBuilder { get; set; }
  }

  internal class N2SourceImpl
  {
    private Path          : string { get; }
    private Manager       : ManagerClass { get; }
    private Env           : GlobalEnv { get; set; }
    private SyntaxModules : SCG.List[SyntaxModule] = SCG.List();

    public this(path : string, manager : ManagerClass)
    {
      Path    = path;
      Manager = manager;
      Env     = Manager.CoreEnv;
    }

    public static Instance(path : string, manager : ManagerClass) : N2SourceImpl
    {
      def projDir = IO.Path.GetDirectoryName(manager.Options.ProjectPath);
      def path = if (IO.Path.IsPathRooted(path))
        path;
      else
        IO.Path.Combine(projDir, path);
      if (manager.UserData.Contains(path))
        manager.UserData[path] :> N2SourceImpl;
      else
      {
        def impl = N2SourceImpl(path, manager);
        manager.UserData[path] = impl;
        impl;
      }
    }

    public BeforeInheritance() : void
    {
      when (!IO.File.Exists(Path))
      {
        Message.Error($<#The "$Path" not exists.#>);
        return;
      }

      def makeWrapperClass(source : ISource, processingCount : int) : void
      {
        // request rebuilding type tree when code changed
        if (processingCount > 1 && Manager.IsIntelliSenseMode)
          Manager.RequestOnBuildTypesTree();
        else
          try Parse(source) catch { | e => Message.Error(e.Message); }
      }
      SubscribeSourceChangedWithCounter(Manager, Location.GetFileIndex(Path), makeWrapperClass);
    }

    public BeforeTypedMembers() : void
    {
      foreach (sm in SyntaxModules)
      {
        try
        {
          foreach (import in sm.Imports)
          {
            | GrammarParser2.UsingDecl.Ast as decl =>
              def grammarType   = MainParser.ParseExpr(Env, decl.GrammarName.Location.GetText(), decl.GrammarName.NLocation());
              sm.Grammar = sm.Grammar.Add(GrammarRef(decl.NLocation(), sm.Grammar.GrammarRefs.Length, None(), Env.BindFixedType(grammarType)));

            | GrammarParser2.AliasDecl.Ast as decl =>
              def grammarType   = MainParser.ParseExpr(Env, decl.GrammarName.Location.GetText(), decl.GrammarName.NLocation());
              sm.Grammar = sm.Grammar.Add(GrammarRef(decl.NLocation(), sm.Grammar.GrammarRefs.Length, Some(decl.Alias.ToNameRef()), Env.BindFixedType(grammarType)));

            | _ => assert(false);
          }

          sm.GrammarCompiler = GrammarCompiler(Manager, Env, sm.TypeBuilder, sm.Grammar);
          sm.TypeBuilder.UserData[typeof(GrammarCompiler)] = sm.GrammarCompiler;
        }
        catch
        {
          | e is GrammarException =>
            def loc = if (e.Location != Location.Default) e.Location else sm.TypeBuilder.Location;
            Message.Error(loc,  e.Message);
          | _ is CriticalUnexpectedException => ()
          | _ is Nemerle.Compiler.Recovery => ()
          | e is Exception =>
            assert2(false, e.ToString());
            Message.Error(sm.TypeBuilder.Location,  $"Exception $e");
        }
      }
    }

    public WithTypedMembers() : void
    {
      foreach (sm in SyntaxModules)
      {
        try
        {
          if (sm.GrammarCompiler.Manager.IsIntelliSenseMode)
            IntelliSenseSupport.AddIntelliSenseSupport(sm.GrammarCompiler);
          else
            when (sm.GrammarCompiler.AllRules)
              sm.GrammarCompiler.CompileGrammar();

          sm.GrammarCompiler.DefineAllMethods();

          sm.TypeBuilder.Compile();
        }
        catch
        {
          | e is GrammarException =>
            def loc = if (e.Location != Location.Default) e.Location else sm.TypeBuilder.Location;
            Message.Error(loc,  e.Message);
          | _ is CriticalUnexpectedException => ()
          | _ is Nemerle.Compiler.Recovery => ()
          | e is Exception =>
            assert2(false, e.ToString());
            Message.Error(sm.TypeBuilder.Location,  $"Exception $e");
        }
      }
    }

    public Parse(source : ISource) : void
    {
      def parser = GrammarParser2.GrammarImpl();
      match (parser.ParseStart(SourceSnapshot(source.GetText(), source.FileIndex, Path)))
      {
        | None      =>
          def (pos, tokens) = parser.Parser.GetErrors();
          def loc = Parser.Location(parser.Parser.ParsingSource, pos, pos + 1).ToNemerleLocation();
          foreach (token in tokens)
            Message.Error(loc, $"expected \"$(token.Name)\" in rule $(token.Rule.Grammar.Name).$(token.Rule.Name)");

        | Some(GrammarParser2.Start.Ast as start) =>
          foreach (openNamespace in start.OpenNamespaces)
          {
            | GrammarParser2.OpenNamespace.Ast as openNamespace =>
              Env = Env.AddOpenNamespace(openNamespace.Namespace.ToNameRef().Parts, openNamespace.Location.ToNemerleLocation());

            | _ => assert(false);
          }

          foreach (rd in start.Declarations)
          {
            | GrammarParser2.SyntaxModule.Ast as syntaxModule =>
              SyntaxModules.Add(ConvertSyntaxModule(syntaxModule));

            | _ => assert(false);
          }
        | _ => assert(false);
      }
    }

    public SubscribeSourceChangedWithCounter(manager : ManagerClass, fileIndex : int, handler : ISource * int -> void) : void
    {
      mutable counter = 0;
      manager.SubscribeSourceChanged(fileIndex, source =>
      {
        counter += 1;
        handler(source, counter);
      });
    }

    public static ToNemerleLocation(this loc : Parser.Location) : Compiler.Location
    {
      def (startLine, startCol) = loc.StartLineColumn;
      def (endLine, endCol) = loc.EndLineColumn;
      Location(loc.Source.FileIndex, startLine, startCol, endLine, endCol)
    }

    public static NLocation(this ast : Parser.Ast) : Compiler.Location
    {
      ast.Location.ToNemerleLocation();
    }

    public static ToName(this identifier : GrammarParser2.Identifier) : string
    {
      | GrammarParser2.Identifier.Ast as identifier => identifier.GetText(identifier.Name)
      | _ => Message.FatalError(identifier.NLocation(), "Error.");
    }

    public static ToNameRef(this identifier : GrammarParser2.Identifier) : NameRef
    {
      | GrammarParser2.Identifier.Ast as identifier => NameRef(identifier.NLocation(), [identifier.GetText(identifier.Name)])
      | _ => Message.FatalError(identifier.NLocation(), "Error.");
    }

    public static ToNameRef(this identifier : GrammarParser2.QIdentifier) : NameRef
    {
      | GrammarParser2.QIdentifier.Ast as identifier =>
        def nameRefs = identifier.Names[0].Map(_.ToNameRef());
        mutable nameRef = nameRefs.Head;
        foreach (nr in nameRefs.Tail)
          nameRef = nameRef + nr;
        nameRef
      | _ => Message.FatalError(identifier.NLocation(), "Error.");
    }

    private ParsePExpr(ast : Ast) : Parsetree.PExpr
    {
      MainParser.ParseExpr(Env, ast.Location.GetText(), ast.NLocation())
    }

    public ConvertSyntaxModule(syntaxModule : GrammarParser2.SyntaxModule.Ast) : SyntaxModule
    {
      mutable grammar = Grammar();
      mutable imports = SCG.List();
      mutable optionEmitDebugSources = true;
      def addSequence(rule)
      {
        | Rule.Sequence => rule
        | _             => Rule.Sequence(rule.Location, [rule])
      }
      foreach (decl in syntaxModule.Declarations)
      {
        | GrammarParser2.UsingDecl.Ast as decl => imports.Add(decl)
        | GrammarParser2.AliasDecl.Ast as decl => imports.Add(decl)
        | GrammarParser2.OptionEmitDebugSources.Ast as opt =>
          match (opt.Value.ToName())
          {
            | "true"  => optionEmitDebugSources = true
            | "false" => optionEmitDebugSources = false
            | _       => Message.Error(opt.NLocation(), "Invalid value. true of false expected.")
          }

        | GrammarParser2.TokenRuleDecl.Ast as decl =>
          def name       = decl.Name.ToNameRef();
          def ruleId     = grammar.Count;
          def attributes = ConvertAttributes(decl.Attributes);
          def rule       = ConvertTokenRule(decl.Rule);
          grammar = grammar.Add(RuleDefinition.Regular(name.Location, ruleId, name, attributes, rule));

        | GrammarParser2.SimpleRuleDecl.Ast as decl =>
          def name       = decl.Name.ToNameRef();
          def ruleId     = grammar.Count;
          def attributes = ConvertAttributes(decl.Attributes);
          def rule       = addSequence(ConvertRule(decl.Rule));
          def ruleType   = ParsePExpr(decl.Type);
          grammar = grammar.Add(RuleDefinition.Simple(name.Location, ruleId, name, attributes, RuleType.PType(ruleType), rule));

        | GrammarParser2.ExtentionPointRuleDecl.Ast as decl =>
          def name       = decl.Name.ToNameRef();
          def ruleId     = grammar.Count;
          def attributes = ConvertAttributes(decl.Attributes);
          def ruleType   = ParsePExpr(decl.Type);
          grammar = grammar.Add(RuleDefinition.ExtentionPoint(name.Location, ruleId, name, attributes, RuleType.PType(ruleType)));

        | GrammarParser2.ExtentionRuleDecl.Ast as decl =>
          def name       = decl.Name.ToNameRef();
          def ruleId     = grammar.Count;
          def attributes = ConvertAttributes(decl.Attributes);
          def rule       = addSequence(ConvertRule(decl.Rule));
          def baseName   = decl.BaseName.ToNameRef();
          def ruleDecl = match (rule : Rule)
          {
            | Sequence((Call(callName, bindingPower) as call) :: rules) when callName == baseName =>
              RuleDefinition.ExtentionPostfix
                ( name.Location
                , ruleId
                , name
                , attributes
                , baseName
                , bindingPower
                , Rule.Sequence(rule.Location, Rule.PrefixCall(call.Location, baseName, bindingPower) :: rules)
                )

            | _ =>
              RuleDefinition.ExtentionPrefix
                ( name.Location
                , ruleId
                , name
                , attributes
                , baseName
                , rule
                )
          }
          grammar = grammar.Add(ruleDecl);

        | error => Message.Error(error.NLocation(), "Error.");
      }
      def sm = SyntaxModule();
      sm.Name    = syntaxModule.Name.ToNameRef();
      sm.Grammar = grammar;
      sm.Imports = imports.NToList();
      //typer.Manager.CoreEnv.AddOpenNamespace(["ПерваяЧастьНС", "СледующаяЧасть"], Location(...));
      sm.TypeBuilder = Manager.CoreEnv.Define(<[decl:
          public partial abstract class $(sm.Name.AsName : dyn)
          {
          }
        ]>);
      sm
    }

    public ConvertAttributes(attributes : GrammarParser2.RuleAttributes) : list[RuleAttribute]
    {
      def res = SCG.List();
      if (attributes is GrammarParser2.RuleAttributes.Ast as attributes)
        foreach (attribute in attributes.AttributeLists)
        {
          | GrammarParser2.RuleAttributeList.Ast as attrList =>
            foreach (attribute in attrList.Attributes[0])
            {
              | GrammarParser2.StartAttribute.Ast as attr => res.Add(RuleAttribute.StartRule(attr.NLocation()))
              | GrammarParser2.AstAttribute.Ast as attr   => res.Add(RuleAttribute.Ast(attr.NLocation(), attr.Names[0].Map(_.ToNameRef())))
              | _ => Message.Error(attributes.NLocation(), "Error.");
            }
          | _ => Message.Error(attributes.NLocation(), "Error.");
        }
      else
        Message.Error(attributes.NLocation(), "Error.");
      res.NToList();
    }

    private HexDigit(c : char) : int
    {
      | c when '0' <= c && c <= '9' => c : int - '0' : int
      | c when 'a' <= c && c <= 'f' => c : int - 'a' : int + 10
      | c when 'A' <= c && c <= 'F' => c : int - 'A' : int + 10
      | _ => assert(false);
    }

    private EscapeSequence(c : char) : char
    {
      | '\'' => '\'' | '\"' => '\"' | '\\' => '\\' | '0'  => '\0'
      | 'a'  => '\a' | 'b'  => '\b' | 'f'  => '\f' | 'n'  => '\n'
      | 'r'  => '\r' | 't'  => '\t' | 'v'  => '\v' | c    => c
    }

    public ConvertChar(charLiteral : GrammarParser2.CharLiteral) : char
    {
      | GrammarParser2.CharLiteral.Ast as charLiteral =>
        match (charLiteral.Char)
        {
          | GrammarParser2.SimpleCharPart.Ast                as simple =>
            charLiteral.Location.Source.OriginalText[simple.Char.StartPos]

          | GrammarParser2.UnicodeEscapeSequenceCharPart.Ast as esc    =>
            def digit(tok) { HexDigit(charLiteral.Location.Source.OriginalText[tok.StartPos]) }
            (digit(esc.Digit0) * 0x1000 + digit(esc.Digit1) * 0x100 + digit(esc.Digit2) * 0x10 + digit(esc.Digit3)) :> char

          | GrammarParser2.EscapeSequenceCharPart.Ast        as esc =>
            EscapeSequence(charLiteral.Location.Source.OriginalText[esc.Char.StartPos])

          | error => Message.FatalError(error.NLocation(), "Error.");
        }
      | error => Message.FatalError(error.NLocation(), "Error.");
    }

    public ConvertString(stringLiteral : GrammarParser2.StringLiteral) : string
    {
      | GrammarParser2.StringLiteral.Ast as stringLiteral =>
        def sb = System.Text.StringBuilder();
        foreach (part in stringLiteral.Parts)
        {
          | GrammarParser2.SimpleStringPart.Ast                as simple =>
            _ = sb.Append(simple.Location.GetText())

          | GrammarParser2.UnicodeEscapeSequenceStringPart.Ast as esc    =>
            def digit(tok) { HexDigit(stringLiteral.Location.Source.OriginalText[tok.StartPos]) }
            _ = sb.Append((digit(esc.Digit0) * 0x1000 + digit(esc.Digit1) * 0x100 + digit(esc.Digit2) * 0x10 + digit(esc.Digit3)) :> char)

          | GrammarParser2.EscapeSequenceStringPart.Ast        as esc =>
            _ = sb.Append(EscapeSequence(stringLiteral.Location.Source.OriginalText[esc.Char.StartPos]))

          | error => Message.Error(error.NLocation(), "Error.");
        }
        sb.ToString()

      | error => Message.FatalError(error.NLocation(), "Error.");
    }

    public ConvertNumber(numberLiteral : GrammarParser2.Number) : int
    {
      | GrammarParser2.Number.Ast as number =>
        int.Parse(number.GetText(number.Digits))

      | error => Message.FatalError(error.NLocation(), "Error.");
    }

    public ConvertTokenRule(rule : GrammarParser2.TokenRule) : RegularRule
    {
      | GrammarParser2.ChoiceTokenRule.Ast                  as rule =>
        def rules = ConvertTokenRule(rule.LeftRule) :: rule.RightRules.Map(r => ConvertTokenRule(r[1]));
        RegularRule.Choice(rule.NLocation(), rules)

      | GrammarParser2.SequenceTokenRule.Ast                as rule =>
        def rules = ConvertTokenRule(rule.LeftRule) :: rule.RightRules.Map(ConvertTokenRule(_));
        RegularRule.Sequence(rule.NLocation(), rules)

      | GrammarParser2.OptionalTokenRule.Ast                as rule =>
        RegularRule.Repeat(rule.NLocation(), 0, Some(1), ConvertTokenRule(rule.Rule))

      | GrammarParser2.ZeroOrManyTokenRule.Ast              as rule =>
        RegularRule.Repeat(rule.NLocation(), 0, None(), ConvertTokenRule(rule.Rule))

      | GrammarParser2.OneOrManyTokenRule.Ast               as rule =>
        RegularRule.Repeat(rule.NLocation(), 1, None(), ConvertTokenRule(rule.Rule))

      | GrammarParser2.RangeTokenRule.Ast                   as rule =>
        mutable charSet = RangeSet();
        foreach (range in rule.Ranges[0])
        {
          | GrammarParser2.SingleCharRange.Ast as ch =>
            def c = ConvertChar(ch.Char);
            charSet = charSet.AddRange(c, c);

          | GrammarParser2.CharRange.Ast as range =>
            def s = ConvertChar(range.StartChar);
            def e = ConvertChar(range.EndChar);
            charSet = charSet.AddRange(s, e);

          | GrammarParser2.UnicodeRange.Ast as cat =>
            if (UnicodeCategoryTable.StrToUnicodeCategory(cat.Name.ToName()) is Some(cat))
              charSet = charSet.AddRange(cat);
            else
              Message.Error(cat.NLocation(), "Invalid unicode category.");

          | error => Message.Error(error.NLocation(), "Error.");
        }
        RegularRule.Chars(rule.NLocation(), [charSet])

      | GrammarParser2.CharTokenRule.Ast                    as rule =>
        def c = ConvertChar(rule.Char);
        RegularRule.Chars(rule.NLocation(), [RangeSet().AddRange(c, c)])

      | GrammarParser2.StringTokenRule.Ast                  as rule =>
        RegularRule.Chars(rule.NLocation(), ConvertString(rule.String).Map(c => RangeSet().AddRange(c, c)))

      | GrammarParser2.RoundsTokenRule.Ast                  as rule =>
        ConvertTokenRule(rule.Rule)

      | GrammarParser2.CallTokenRule.Ast                    as rule =>
        RegularRule.Call(rule.Name.NLocation(), rule.Name.ToNameRef())

      | GrammarParser2.ZeroOrManyWithSeparatorTokenRule.Ast as rule =>
        RegularRule.RepeatWithSeparator(rule.NLocation(), 0, None(), ConvertTokenRule(rule.Rule), ConvertTokenRule(rule.Separator))

      | GrammarParser2.OneOrManyWithSeparatorTokenRule.Ast  as rule =>
        RegularRule.RepeatWithSeparator(rule.NLocation(), 1, None(), ConvertTokenRule(rule.Rule), ConvertTokenRule(rule.Separator))

      | _ => Message.FatalError(rule.NLocation(), "Error.");
    }

    public ConvertRule(rule : GrammarParser2.Rule) : Rule
    {
      | GrammarParser2.SequenceRule.Ast                as rule =>
        def rules = ConvertRule(rule.LeftRule) :: rule.RightRules.Map(ConvertRule(_));
        Rule.Sequence(rule.NLocation(), rules)

      | GrammarParser2.NotRule.Ast                     as rule =>
        Rule.Not(rule.NLocation(), ConvertRule(rule.Rule))

      | GrammarParser2.AndRule.Ast                     as rule =>
        Rule.And(rule.NLocation(), ConvertRule(rule.Rule))

      | GrammarParser2.OptionalRule.Ast                as rule =>
        Rule.Repeat(rule.NLocation(), 0, Some(1), ConvertRule(rule.Rule))

      | GrammarParser2.ZeroOrManyRule.Ast              as rule =>
        Rule.Repeat(rule.NLocation(), 0, None(), ConvertRule(rule.Rule))

      | GrammarParser2.OneOrManyRule.Ast               as rule =>
        Rule.Repeat(rule.NLocation(), 1, None(), ConvertRule(rule.Rule))

      | GrammarParser2.CharRule.Ast                    as rule =>
        def c = ConvertChar(rule.Char);
        Rule.String(rule.NLocation(), c.ToString())

      | GrammarParser2.StringRule.Ast                  as rule =>
        Rule.String(rule.NLocation(), ConvertString(rule.String))

      | GrammarParser2.RoundsRule.Ast                  as rule =>
        ConvertRule(rule.Rule)

      | GrammarParser2.CallRule.Ast                    as rule =>
        def bp = match (rule.BP)
        {
          | Some((_, bp)) => ConvertNumber(bp)
          | None          => 0
        }
        Rule.Call(rule.Name.NLocation(), rule.Name.ToNameRef(), bp)

      | GrammarParser2.ZeroOrManyWithSeparatorRule.Ast as rule =>
        Rule.RepeatWithSeparator(rule.NLocation(), 0, None(), ConvertRule(rule.Rule), ConvertRule(rule.Separator))

      | GrammarParser2.OneOrManyWithSeparatorRule.Ast  as rule =>
        Rule.RepeatWithSeparator(rule.NLocation(), 1, None(), ConvertRule(rule.Rule), ConvertRule(rule.Separator))

      | GrammarParser2.Scope.Ast  as rule =>
        Rule.Scope(rule.NLocation(), rule.Name.ToNameRef(), ConvertRule(rule.Rule))

      | _ => Message.FatalError(rule.NLocation(), "Error.");
    }
  }
}
