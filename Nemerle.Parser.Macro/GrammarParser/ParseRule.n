using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // Rule            = RuleName ((':' Type)? '=' OrderedChoice)?
    private ParseRule(tok : Token, ruleId : int) : RuleDefinition
    {
      def straightenLooseGroup(tok : Token) : Token
      {
        match (tok, tok.Next)
        {
          | (LooseGroup(child1) as g1, LooseGroup(child2) as g2) when !(g1.SeparatorToken is Semicolon) => 
            def getLastTok(tok : Token)
            {
              if (tok.Next == null)
                tok
              else
                getLastTok(tok.Next)
            }
            getLastTok(child1).Next = child2; // append
            def newLoose = LooseGroup(g1.Location + g2.Location, child1, g2.SeparatorToken);
            newLoose.Next = g2.Next;
            g1.Next = g2.Next;
            straightenLooseGroup(newLoose)

          | _ => tok
        }
      }
      match (straightenLooseGroup(tok))
      {
        | LooseGroup(child) =>
          def (tok2, ruleAttrs) = ParseAttributes(child);

          //assert2(!_debug);

          def (expr, nextToken) = _parser.ParseExpr(if (tok2 is Identifier) LooseGroup(tok2) 
                                                   else tok2, 
                                                   TokenStoppers.All);
          def parseBody(nextToken : Token) : option[Rule]
          {
            if (nextToken == null)
              None();
            else if (!(nextToken is Operator("=")))
              ReportCriticalUnexpected(nextToken, "('=' rule-body)? ';'");
            else if (nextToken.Next == null)
              ReportCriticalUnexpected(nextToken, "('=' rule-body)? ';'");
            else
            {
              def (rule, nextTok) = ParseChoice(nextToken.Next);

              when (nextTok != null)
                _ = ReportUnexpected(nextTok, "EOF");
              Some(rule);
            }
          }

          def simple(name, ty, rule)
          {
            RuleDefinition.Simple(name.Location, ruleId, NameRef(name), ruleAttrs, ty, rule)
          }
          def extentionPoint(name, ty)
          {
            RuleDefinition.ExtentionPoint(name.Location, ruleId, NameRef(name), ruleAttrs, ty)
          }
          def extention(name, baseRuleName, rule)
          {
            def baseRuleName = match (baseRuleName)
            {
              | PExpr.Ref as baseRuleName    => NameRef(baseRuleName);
              | PExpr.Member as baseRuleName => NameRef(baseRuleName.Location, [baseRuleName.obj.ToString(), baseRuleName.member.ToString()]);
              | _                            => assert(false);
            }
            match (rule : Rule)
            {
              | Choice([Sequence((Call(callName, bindingPower) as call) :: rules)]) when callName == baseRuleName =>
                RuleDefinition.ExtentionPostfix
                  ( name.Location
                  , ruleId
                  , NameRef(name)
                  , ruleAttrs
                  , baseRuleName
                  , bindingPower
                  , Rule.Sequence(rule.Location, Rule.PrefixCall(call.Location, baseRuleName, bindingPower) :: rules)
                  )

              | _ =>
                RuleDefinition.ExtentionPrefix
                  ( name.Location
                  , ruleId
                  , NameRef(name)
                  , ruleAttrs
                  , baseRuleName
                  , rule
                  )
            }
          }
          match (expr)
          {
            | <[ $name : $ty ]> =>
              match (parseBody(nextToken))
              {
                | Some(rule) => simple(name, RuleType.PType(ty.Location, ty), rule)
                | None       => extentionPoint(name, RuleType.PType(ty.Location, ty))
              }

            | <[ $name is $baseRuleName ]> =>
              match (parseBody(nextToken))
              {
                | Some(rule) => extention(name, baseRuleName, rule)
                | None       => ReportCriticalUnexpected(expr, "Extension can not be extensible.");
              }

            | Ref as name =>
              match (parseBody(nextToken))
              {
                | Some(rule) => simple(name, RuleType.Chars(), rule)
                | None       => ReportCriticalUnexpected(expr, "Extension point must be typed.");
              }

            | _                  => ReportCriticalUnexpected(tok2, "rule-name (':' return-type)?");
          };

        | _ => ReportCriticalUnexpected(tok, <# [Attributes] RuleName (("extends" RuleRef / ':' Type)? '=' OrderedChoice)?;#>)
      }
    }
  }
}
