using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // CardinalityRule = SimpleRule ('?' / '+' / '*')?
    private ParseCardinalityRule(tok : Token) : Rule * Token
    {
      def (innerRule, nextTok2) = ParseSimpleRule(tok);

      match (nextTok2)
      {
        | Operator("?") => (Rule.Repeat(nextTok2.Location, 0, Some(1), innerRule), nextTok2.Next)
        | Operator("+") => (Rule.Repeat(nextTok2.Location, 1, None(),  innerRule), nextTok2.Next)
        | Operator("*") => (Rule.Repeat(nextTok2.Location, 0, None(),  innerRule), nextTok2.Next)
        | BracesGroup(LooseGroup(tok), _) =>
          def getIntValue(tok)
          {
            | IntegerLiteral(Literal.Integer as lit) when !lit.is_negative => 
              match (lit.AsInt)
              {
                | Some(value) => value
                | _ => ReportCriticalUnexpected(tok, "positive integer literal")
              }

            | _ => ReportCriticalUnexpected(tok, "positive integer literal")
          }

          def first = getIntValue(tok);

          match (tok.Next)
          {
            | null  => (Rule.Repeat(nextTok2.Location, first, Some(first), innerRule), nextTok2.Next)
            | Comma as next when next.Next is Token.Keyword("_") => // {n, _} - n or more
              when (next.Next.Next != null)
                ReportUnexpected(next.Next, "EOF");

              (Rule.Repeat(nextTok2.Location, first, None(), innerRule), nextTok2.Next)

            | Comma as next => // {n, m} - from n to m
              def second = getIntValue(next.Next);

              when (second < first)
                ReportUnexpected(next.Next, $"a integer literal which greater or equal to $first");

              (Rule.Repeat(nextTok2.Location, first, Some(second), innerRule), nextTok2.Next)

            | _ => (innerRule, nextTok2)
          }

        | _             => (innerRule, nextTok2)
      }
    }
  }
}
