using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  public class CriticalUnexpectedException : Exception  { }

  internal partial class GrammarParser
  {
    ReportCriticalUnexpected[T](token : Token, expected : string) : T
    {
      ReportUnexpected(token, expected);
      throw CriticalUnexpectedException()
    }

    ReportUnexpected(token : Token, expected : string) : void
    {
      assert2(!_debug);
      Message.Error(token.Location, $"expected «$expected» but found «$token» ($(token.GetType().Name))");
    }

    ReportUnexpected(expr : PExpr, expected : string) : void
    {
      assert2(!_debug);
      Message.Error(expr.Location, $"expected $expected but found $expr ($(expr.GetType().Name))");
    }

    ReportCriticalUnexpected[T](expr : PExpr, expected : string) : T
    {
      ReportUnexpected(expr, expected);
      throw CriticalUnexpectedException()
    }
  }
}
