using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // Rule            = RuleName ((':' Type)? '=' OrderedChoice)?
    // OrderedChoice   = Sequence ('/' Sequence)*
    // Sequence        = PredicateRule+
    // PredicateRule   = ('!' / '&')? CardinalityRule
    // CardinalityRule = SimpleRule ('?' / '+' / '*')?
    // SimpleRule      = FailureRecovery '(' OrderedChoice ')', RuleName '{' OrderedChoice '}' / RuleName / Range / Char / String / '(' OrderedChoice ')' / Empty
    // RuleName        = Token.Identifier(name)
    // Char            = Token.CharLiteral
    // String          = Token.StringLiteral
    // Range           = Token.SquareGroup(LooseGroup(CharLiteral, Operator(".."), CharLiteral))
    // Eq              = Token.Operator("=")
    // Empty           = Token.Identifier("Empty")

    private _debug : bool;
    private _typer : Typer;
    private _parser : MainParser;

    public this(typer : Typer, debug : bool)
    {
      _typer  = typer;
      _parser = MainParser(typer.Env);
      _debug  = debug;
    }
  }
}
