using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    private ParseZeroOrMany[RuleT](
      tok            : Token,
      parseDelemiter : Token -> Token,
      parseParser    : Token -> RuleT * Token
    ) : list[RuleT] * Token
    where RuleT : class
    {
      def tok1 = match (tok)
        {
          | LooseGroup(child) => child
          | _ => tok
        };

      def (seq, nextTok) = parseParser(tok1);

      def loop(tok, acc) : list[RuleT] * Token
      {
        def nextTok1 = if (parseDelemiter == null) tok else parseDelemiter(tok);

        if (nextTok1 == null)
          (acc, tok) // predicate not matched
        else
        {
          def (seq, nextTok2) = parseParser(nextTok1);
          if (seq == null)           (acc, nextTok2)
          else if (nextTok2 == null) (seq :: acc, null)
          else                       loop(nextTok2, seq :: acc)
        }
      }

      if (seq == null)
        ([], tok)
      else if (nextTok == null)
        ([seq], nextTok)
      else
      {
        def (res, nextTok) = loop(nextTok, [seq]);
        (res.Rev(), nextTok)
      }
    }
  }
}
