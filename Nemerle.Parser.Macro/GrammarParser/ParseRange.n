using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // Range           = Token.SquareGroup(LooseGroup(CharLiteral, Operator(".."), CharLiteral))
    private ParseRange(tok : Token) : Rule * Token
    {
      | SquareGroup(entry) =>
        def parseEntry(entry : Token, set : RangeSet) : RangeSet
        {
          match (entry)
          {
            | LooseGroup(CharLiteral
              where (Next = Operator where (name = "..", Next = CharLiteral as ch2)) as ch1) =>

              def resSet = set.AddRange(ch1.value, ch2.value);
              if (entry.Next == null) resSet
              else                    parseEntry(entry.Next, resSet)

            | CharLiteral(ch) => 
              def resSet = set.AddRange(ch, ch);
              if (entry.Next == null) resSet
              else                    parseEntry(entry.Next, resSet)

            | LooseGroup(Identifier(name))
            | Identifier(name) =>
              match(UnicodeCategoryTable.StrToUnicodeCategory(name)) 
              {
                | Some(cat) =>
                  def resSet = set.AddRange(cat);
                  if (entry.Next == null) resSet
                  else                    parseEntry(entry.Next, resSet)
                | _ => ReportCriticalUnexpected(entry, "valid unicode class name")
              }

            | _ => ReportCriticalUnexpected(entry, "startChar .. endChar or char")
          }
        }

        def set = parseEntry(entry, RangeSet());
        (Rule.Chars(tok.Location, [set]), tok.Next)

      | _ => ReportCriticalUnexpected(tok, "[ ... ]")
    }
  }
}
