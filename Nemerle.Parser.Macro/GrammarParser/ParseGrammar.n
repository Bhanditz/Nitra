using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    public ParseGrammar(options : PExpr, rules : PExpr) : Grammar
    {
      def _emitDebugSources = match (options) { | <[ Options = EmitDebugSources ]> => true | _ => false }
      def grammar = Grammar();
      match (rules)
      { // Match grammar { ... } RawToken macro (defined above)
        | MacroCall(name, _ns, [SyntaxElement.RawToken(LooseGroup(BracesGroup(tokens, _)))]) => // Name * NamespaceTree.Node * list [SyntaxElement]
          if (name.Id != "parsergrammar")
            ReportCriticalUnexpected(rules, "parsergrammar { ... }")
          else if (tokens == null)
            grammar;
          else
            ParseGramar(grammar, tokens)
        | rule => ReportCriticalUnexpected(rule, "parsergrammar { ... }")
      }
    }

    private ParseGramar(grammar : Grammar, token : Token) : Grammar
    {
      //assert2(!token.ToString().Contains("using"));
      def grammar2 = 
        match (token)
        {
          | LooseGroup(Keyword("using") as u) => 
            when (u.Next == null)
              _ = ReportCriticalUnexpected(u, "using parser-type;");

            def (expr, nextToken) = _parser.ParseExpr(Token.LooseGroup(u.Next), TokenStoppers.None);

            when (nextToken != null)
              ReportUnexpected(nextToken, "nothing");

            match (expr)
            {
              | <[ $(alias : name) = $parserType ]> => 
                grammar.Add(GrammarRef(u.Location, grammar.GrammarRefs.Length, Some(NameRef(alias.Location, alias.Id)), _typer.BindFixedType(parserType)))

              | _ => grammar.Add(GrammarRef(u.Location, grammar.GrammarRefs.Length, None(), _typer.BindFixedType(expr)))
            }

          | _ =>
            def ruleDefinition = ParseRule(token, grammar.Count);

            if (ruleDefinition.GetRule() == null)//TODO: WTF?!
              grammar
            else
              grammar.Add(ruleDefinition)
        };

      if (token.Next == null)
        grammar2
      else
        ParseGramar(grammar2, token.Next)
    }
  }
}
