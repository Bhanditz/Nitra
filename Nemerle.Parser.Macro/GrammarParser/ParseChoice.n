using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // OrderedChoice   = Sequence ( '/' Sequence)*
    private ParseChoice(tok : Token) : Rule * Token
    {
      def parseSlash(tok : Token) : Token
      {
        | Operator("/") =>
          if (tok.Next == null) ReportCriticalUnexpected(tok, "rule")
          else tok.Next

        | _             => null
      }

      def  (seqs, nextTok) = ParseOneOrMany(tok, parseSlash, ParseSequence, "sequence");
      def loc = if (seqs.IsEmpty) tok.Location else tok.Location + seqs.Last.Location;
      (Rule.Choice(loc, seqs), nextTok)
    }
  }
}
