using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // Sequence        = PredicateRule+
    private ParseSequence(tok : Token) : Rule * Token
    {
      def  (seqs, nextTok) = ParseOneOrMany(tok, null, ParsePredicateRule, "PredicateRule");
      def loc = if (seqs.IsEmpty) tok.Location else tok.Location + seqs.Last.Location;
      (Rule.Sequence(loc, seqs), nextTok)
    }

    private ParseRegularSequence(tok : Token) : RegularRule * Token
    {
      def  (seqs, nextTok) = ParseOneOrMany(tok, null, ParseRegularCardinalityRule, "PredicateRule");
      def loc = if (seqs.IsEmpty) tok.Location else tok.Location + seqs.Last.Location;
      (RegularRule.Sequence(loc, seqs), nextTok)
    }
  }
}
