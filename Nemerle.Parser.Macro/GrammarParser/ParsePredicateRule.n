using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace Nemerle.Parser
{
  internal partial class GrammarParser
  {
    // PredicateRule   = ('!' / '&')? CardinalityRule
    private ParsePredicateRule(tok : Token) : Rule * Token
    {
      def (rule, nextTok1) =
        match (tok)
        {
         | Operator("!") => (Rule.Not : Nemerle.Compiler.Location * Rule -> Rule, tok.Next)
         | Operator("&") => (Rule.And : Nemerle.Compiler.Location * Rule -> Rule, tok.Next)
         | _             => (null,     tok)
        };

      def (innerRule, nextTok2) = ParseCardinalityRule(nextTok1);
      if (rule == null) (innerRule,       nextTok2)
      else              (rule(tok.Location, innerRule), nextTok2)
    }
  }
}
