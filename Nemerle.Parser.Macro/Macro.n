using System;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

namespace Nemerle.Parser
{
  macro GrammarScope(_rules : Token)
  syntax ("grammar", _rules)
  {
    <[ () ]>
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Class)]
  macro ParserGrammar(tb : TypeBuilder, options, rules)
  {
    GrammarImpl.BeforeTypedMembers(Macros.ImplicitCTX(), tb, options, rules);
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.WithTypedMembers, Nemerle.MacroTargets.Class)]
  macro ParserGrammar(tb : TypeBuilder, _options, _rules)
  {
    GrammarImpl.WithTypedMembers(tb);
  }

  internal module GrammarImpl
  {
    public BeforeTypedMembers(typer : Typer, tb : TypeBuilder, options : PExpr, rules : PExpr) : void
    {
      try
      {
        tb.UserData[typeof(GrammarCompiler)] = GrammarCompiler(typer, tb, options, rules);
      }
      catch
      {
        | e is GrammarException =>
          def loc = if (e.Location != Location.Default) e.Location else tb.Location;
          Message.Error(loc,  e.Message);
        | _ is CriticalUnexpectedException => ()
        | e is Exception =>
          assert2(false, e.ToString());
          Message.Error(tb.Location,  $"Exception $e");
      }
    }

    public WithTypedMembers(tb : TypeBuilder) : void
    {
      try
      {
        def compiler = tb.UserData[typeof(GrammarCompiler)] :> GrammarCompiler;
        when (compiler == null)
          Message.FatalError(tb.Location, "PEG Grammar not parsed.");

        try
        {
          if (compiler.Typer.Manager.IsIntelliSenseMode)
            IntelliSenseSupport.AddIntelliSenseSupport(compiler);
          else
            when (compiler.AllRules)
              compiler.CompileGrammar();
        }
        finally
        {
          compiler.DefineAllMethods();
        }
      }
      catch
      {
        | e is GrammarException =>
          def loc = if (e.Location != Location.Default) e.Location else tb.Location;
          Message.Error(loc,  e.Message);
        | _ is CriticalUnexpectedException => ()
        | e is Exception =>
          assert2(false, e.ToString());
          Message.Error(tb.Location,  $"Exception $e");
      }
    }
  }
}
