using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nemerle.Parser
{
  [Record]
  public variant Rule : Located
  {
    | Choice         { rules    : list[Rule]; }
    | Sequence       { rules    : list[Rule]; }
    | Call           { name     : NameRef; bindingPower : int; }
    | Repeat         { minCount : int; maxCount : option[int]; rule : Rule; }
    | Chars          {
                         chars : list[RangeSet];
                         public IsString : bool { get { chars.ForAll(_.IsSinglChar) } }
                     }
    | Fsm            { fsm  : FSM; loop : bool; }
    | Not            { rule : Rule; }
    | And            { rule : Rule; }
    | Capture        { kind : CaptureKind; rule : Rule; }
    | Scope          { name : NameRef; rule : Rule; }
    | Cut                             // Cutoff point

    public Priority : int
    {
      get
      {
        match (this)
        {
          | Cut                         => 5
          | Scope                       => 5
          | Chars                       => 5
          | Fsm                         => 5
          | Capture                     => 5
          | Call                        => 5
          | Repeat                      => 4
          | Not                         => 3
          | And                         => 3
          | Sequence                    => 2
          | Choice                      => 1
        }
      }
    }

    public override ToString() : string
    {
      def p(rule : Rule)
      {
        if (rule.Priority <= this.Priority)
          $"($rule)"
        else
          rule.ToString()
      }

      match (this)
      {
        | Cut                                            => "#"
        | Scope(name, rule)                              => $<#$name { $rule }#>
        | Choice(rules)                                  => $<#..$(rules; " / "; p)#>
        | Sequence(rules)                                => $<#..$(rules; " "; p)#>
        | Call(name, 0)                                  => name.Id
        | Call(name, bp)                                 => $<#$(name.Id) : $bp#>
        | Repeat(0, None, rule)                          => $"$(p(rule))*"
        | Repeat(1, None, rule)                          => $"$(p(rule))+"
        | Repeat(min, None, rule)                        => $"$(p(rule)){$min,}"
        | Repeat(0, Some(1), rule)                       => $"$(p(rule))?"
        | Repeat(min, Some(max), rule) when min == max   => $"$(p(rule)){$min}"
        | Repeat(min, Some(max), rule)                   => $"$(p(rule)){$min, $max}"
        | Chars(chars) as c when c.IsString              => $<#'..$(chars; ""; r => $"$(r.Ranges.Head.from)")'#>
        | Chars([chars])                                 => $"[$chars]"
        | Chars(chars)                                   => $<#(..$(chars; ", "; ch => $"[$ch]"))#>
        | Fsm                                            => "FSM"
        | Not(rule)                                      => $"!$(p(rule))"
        | And(rule)                                      => $"&$(p(rule))"
        | Capture(CaptureKind.Argument(_), rule)         => $"#A($rule)"
        | Capture(CaptureKind.Handler(name, _, _), rule) => $"#H[$name]($rule)"
      }
    }
  }
}
