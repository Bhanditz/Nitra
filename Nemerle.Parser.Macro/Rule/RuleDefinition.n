using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Parser
{
  [Record]
  internal variant RuleDefinition : Nemerle.Compiler.Located
  {
    public Id : int { get; }
    public Name : NameRef { get; }
    public Attributes : list[RuleAttribute] { get; }

    public IsAst : bool { get { Attributes.Exists(_ is RuleAttribute.Ast) } }

    | ExtentionPoint   { retType : RuleType; }
    | ExtentionPrefix  { baseRuleName : NameRef; rule : Rule; }
    | ExtentionPostfix { baseRuleName : NameRef; bindingPower : int; rule : Rule; }
    | Simple           { retType : RuleType; rule : Rule; }
    | ExternalRule     { grammarRef : GrammarRef; isExtentionPoint : bool; }

    public GetRule() : option[Rule]
    {
      match (this)
      {
        | ExternalRule
        | ExtentionPoint         => None()
        | ExtentionPrefix as rd  => Some(rd.rule)
        | ExtentionPostfix as rd => Some(rd.rule)
        | Simple as rd           => Some(rd.rule)
      }
    }
  }
}
