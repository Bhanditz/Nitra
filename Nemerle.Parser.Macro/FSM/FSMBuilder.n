using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Parser.Model;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Parser
{
  public module FSMBuilder
  {
    public Symbol(c : char) : FSM
    {
      Symbol(RangeSet().AddRange(c, c));
    }

    public Symbol(l : char, h : char) : FSM
    {
      Symbol(RangeSet().AddRange(l, h));
    }

    public ISymbol(c : char) : FSM
    {
      def l = char.ToLowerInvariant(c);
      def u = char.ToUpperInvariant(c);
      Symbol(RangeSet().AddRange(l, l).AddRange(u, u));
    }

    public Symbol(chars : RangeSet) : FSM
    {
      def (fsm, ok)  = FSM().NewOkState();
      fsm.AddTransition(Transition.Symbol(fsm.StartState, ok, chars));
    }

    public Seq(seq : list[RangeSet]) : FSM
    {
      Seq(seq.Map(Symbol));
    }

    public Seq(fsms : list[FSM]) : FSM
    {
      | [] =>
        def fsm = FSM();
        fsm.AddOkState(fsm.StartState)

      | fsm :: fsms =>
        def append(fsm2 : FSM, fsm1 : FSM) : FSM
        {
          def (fsm1, start, ok) = fsm1.IncludeFSM(fsm2);
          def fsm1 = fsm1.OkStates.Fold(fsm1, (state, fsm1) => fsm1.AddTransition(Transition.Epsilon(state, start)));
          def fsm1 = fsm1.SetOkStates(ok);
          fsm1;
        }
        fsms.FoldLeft(fsm, append)
    }

    public String(str : string) : FSM
    {
      Seq(str.Map(Symbol))
    }

    public IString(str : string) : FSM
    {
      Seq(str.Map(ISymbol))
    }

    public Option(fsm : FSM) : FSM
    {
      fsm.OkStates.Fold(fsm, (state, fsm) => fsm.AddTransition(Transition.Epsilon(fsm.StartState, state)));
    }

    public RepeatMin(min : int, fsm : FSM) : FSM
    {
      def loop = fsm
        .OkStates.Fold(fsm, (state, fsm) =>
          {
            fsm
              .AddTransition(Transition.Epsilon(fsm.StartState, state))
              .AddTransition(Transition.Epsilon(state, fsm.StartState))
          });
      Seq($[0..min - 1].Map(_ => fsm).Append([loop]))
    }

    public RepeatMinMax(min : int, max : int, fsm : FSM) : FSM
    {
      Seq($[0..min - 1].Map(_ => fsm).Append($[0..max - min - 1].Map(_ => Option(fsm))))
    }

    public Repeat(min : int, max : option[int], fsm : FSM) : FSM
    {
      if (max is Some(max))
        RepeatMinMax(min, max, fsm)
      else
        RepeatMin(min, fsm)
    }

    public RepeatWithSeparatorMin(min : int, fsm : FSM, sep : FSM) : FSM
    {
      def tail = Seq([sep, fsm]);
      def loop = tail.OkStates.Fold(tail, (state, tail) =>
        {
          tail
            .AddTransition(Transition.Epsilon(tail.StartState, state))
            .AddTransition(Transition.Epsilon(state, tail.StartState))
        });
      Seq(fsm :: $[1..min - 1].Map(_ => tail).Append([loop]))
    }

    public RepeatWithSeparatorMinMax(min : int, max : int, fsm : FSM, sep : FSM) : FSM
    {
      def tail = Seq([sep, fsm]);
      Seq(fsm :: $[1..min - 1].Map(_ => tail).Append($[0..max - min - 1].Map(_ => Option(tail))))
    }

    public RepeatWithSeparator(min : int, max : option[int], fsm : FSM, sep : FSM) : FSM
    {
      if (max is Some(max))
        RepeatWithSeparatorMinMax(min, max, fsm, sep)
      else
        RepeatWithSeparatorMin(min, fsm, sep)
    }

    public Choice(fsms : list[FSM]) : FSM
    {
      def fsm = FSM();
      def append(fsm2 : FSM, fsm1 : FSM) : FSM
      {
        def (fsm1, start, ok) = fsm1.IncludeFSM(fsm2);
        def fsm1 = fsm1.AddTransition(Transition.Epsilon(fsm1.StartState, start));
        def fsm1 = fsm1.AddOkStates(ok);
        fsm1;
      }
      fsms.FoldLeft(fsm, append);
    }
  }
}
