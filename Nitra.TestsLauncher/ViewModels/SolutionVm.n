using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Client;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

namespace Nitra.ViewModels
{
  public class SolutionVm : FolderVm[ProjectVm], IClientHost, IDisposable
  {
    mutable         _client : NitraClient;
    public override Hint    : string { get { "Solution" }}

    public this(suite: SuiteVm, folder: string)
    {
      base(suite, folder);
      when (IsSingleFileTest)
        IsExpanded = false;
    }
    
    public IsSingleFileTest : bool { get { Children.Count == 1 && Children[0].Children.Count == 1 } }
    
    public override Name : string { get { Path.GetFileName(FullPath) + "  (Solution)" }}
    
    protected override CreateChildren() : Seq[ProjectVm]
    {
      Directory
        .GetDirectories(FullPath)
        .OrderBy(x => x)
        .Select(ProjectVm(Suite, this, _))
    }
    
    // IClientHost
    public Activate(client : NitraClient) : void
    {
      _client = client;
      // TODO: send messages to server
    }

    // IClientHost
    public Deactivate() : void
    {
      // TODO: send messages to server
      _client = null;
    }
    
    public Dispose() : void
    {
      foreach (project in Children)
        project.Dispose();
      Children.Clear();
      _client = null
    }
  }
}