using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

namespace Nitra.ViewModels
{
  public class SolutionVm : BaseVm
  {
    public Name: string { get { Path.GetDirectoryName(FullPath) }}
    public Projects: ObservableCollection[ProjectVm] { get; private set }
    public Children: Seq[ProjectVm] { get { Projects }}
    public Statistics: Statistics { get; private set }
    public override Hint: string { get { "Solution" }}
    public override ToString(): string { Name }
    public CalcDependProps(_testVm: FileVm): void {}
    public Remove(): void {}
    public Update(_code: string, _gold: string): void {}

    public this(suite: SuiteVm, folder: string)
    {
      base(suite, suite, folder);
      Statistics = Statistics();
      def projects = ObservableCollection.[ProjectVm]();
      def projectFolders = Directory.GetDirectories(FullPath);
      foreach (projectFolder in projectFolders.OrderBy(f => f))
        projects.Add(ProjectVm(suite, this, projectFolder));

      Projects = projects;
    }
  }
}