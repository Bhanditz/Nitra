using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace Nitra.ViewModels
{
  public abstract class BaseVm : INotifyPropertyChanged
  {
    public FullPath: string { get; private set }
    public Suite: SuiteVm { get; private set }
    public abstract Name: string { get }
    public abstract Hint: string { get }
    
    mutable _testState: TestState;
    mutable _isSelected: bool;

    protected this(suite: SuiteVm, fullPath: string)
    {
      Suite = suite;
      FullPath = fullPath;
      
      when (Suite.TestState == TestState.Ignored)
        TestState = TestState.Ignored;
    }

    public IsSelected: bool
    {
      get { _isSelected }
      set
      {
        _isSelected = value;
        OnPropertyChanged("IsSelected")
      }
    }

    public TestState: TestState
    {
      get { _testState }
      protected set
      {
        unless (value == _testState)
        {
          _testState = value;
          OnPropertyChanged("TestState");
          OnPropertyChanged("DispayImage")
        }
      }
    }

    public DispayImage: string
    {
      get
      {
        match (TestState)
        {
          | TestState.Failure => @"Images/TreeIcons/failure.png"
          | TestState.Ignored => @"Images/TreeIcons/ignored.png"
          | TestState.Inconclusive => @"Images/TreeIcons/inconclusive.png"
          | TestState.Skipped => @"Images/TreeIcons/skipped.png"
          | TestState.Success => @"Images/TreeIcons/success.png"
          | _ => throw ArgumentOutOfRangeException()
        }
      }
    }

    public event PropertyChanged: PropertyChangedEventHandler;

    //[NotifyPropertyChangedInvocator]
    protected virtual OnPropertyChanged(propertyName: string): void
    {
      def h = PropertyChanged;
      unless (h == null)
        h(this, PropertyChangedEventArgs(propertyName));
    }
  }
}