using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;
using System.IO;
using Nitra.Declarations;
using Nitra.ProjectSystem;

namespace Nitra.ViewModels
{
  public class ProjectVm : BaseVm, ITest, ITestTreeContainerNode
  {
    public Name: string { get { Path.GetDirectoryName(FullPath) }}
    public Files: ObservableCollection[FileVm] { get; private set }
    public Children: Seq[FileVm] { get { Files }}
    public Statistics: Statistics { get; private set }
    public override Hint: string { get { "Project" }}
    public override ToString(): string { Name }
    public CalcDependProps(_testVm: FileVm): void {}
    public Remove(): void {}
    public Update(_code: string, _gold: string): void {}

    public this(suite: SuiteVm, solution: SolutionVm, folder: string)
    {
      base(suite, solution, folder);
      Statistics = Statistics();
      def files = ObservableCollection.[FileVm]();
      def filePaths = Directory.GetFiles(FullPath, "*.test");
      
      foreach (filePath in filePaths.OrderBy(f => f))
        files.Add(FileVm(suite, this, filePath));

      Files = files;
    }
  }
}