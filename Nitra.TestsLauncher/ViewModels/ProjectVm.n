using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;
using System.IO;

namespace Nitra.ViewModels
{
  public class ProjectVm : BaseVm, ITestTreeContainerNode
  {
    public Name: string { get { Path.GetDirectoryName(FullPath) }}
    public TestVms: ObservableCollection[TestVm] { get; private set }
    public Tests: Seq[TestVm] { get { Tests }}
    //public Statistics: Statistics { get; private set }
    public override Hint: string { get { "Project" }}
    public override ToString(): string { Name }
    public CalcDependProps(_testVm: TestVm): void {}
    public Remove(): void {}
    public Update(_code: string, _gold: string): void {}

    public this(suite: SuiteVm, solution: SolutionVm, folder: string)
    {
      base(suite, solution, folder);
      //Statistics = Statistics();
      def tests = ObservableCollection.[TestVm]();
      def filePaths = Directory.GetFiles(FullPath, "*.test");
      
      foreach (filePath in filePaths.OrderBy(f => f))
        tests.Add(TestVm(suite, this, filePath));

      TestVms = tests;
    }
  }
}