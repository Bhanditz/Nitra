using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using System.IO;
using IOFile = System.IO.File;

namespace Nitra.ViewModels
{
  public abstract class FileVm : BaseVm, ITest
  {
    public static TypingMsg: Guid = Guid.NewGuid(); 
    
    public Project: ProjectVm { get; private set }
    public Name: string { get { Path.GetFileNameWithoutExtension(FullPath) }}
    public PrettyPrintResult: string { get; private set }
    public Exception: Exception { get; private set }
    public TestTime: TimeSpan { get; private set }
    public Statistics: Statistics { get; private set }

    public this(suite: SuiteVm, project : ProjectVm, filePath : string)
    {
      base(suite, project, filePath);
      Project = project;
      Statistics = Statistics();
    }

    public SetRecoveryAlgorithm(_recoveryAlgorithm: RecoveryAlgorithm = RecoveryAlgorithm.Smart) : void
    {
      throw NotImplementedException()
    }
    
    public Run() : bool
    {
      // TODO: Send massages to server: Close(old_prj), Open(new_prj), Open(file)*, Reference()*, ProjectRedy().
      // get result...
      // compare result with gold...
      // show ststistics.
      true
    }

    public CheckGold(_recoveryAlgorithm: RecoveryAlgorithm): void
    {
      unless (Suite.TestState == TestState.Ignored)
      {
        def gold = Gold;
        // TODO: For each twst file send massages to server: RetrivePrettyprint()
        // Check pretty print with gold.
        
        //def parseTree = _file.GetParseTree() : ParseTree;
        //def prettyPrintResult = parseTree.ToString(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes);
        //PrettyPrintResult = prettyPrintResult;
        //TestState = if (gold == prettyPrintResult) TestState.Success else TestState.Failure
      }
    }

    public Update(code: string, gold: string): void
    {
      IOFile.WriteAllText(FilePath, code);
      IOFile.WriteAllText(Path.ChangeExtension(FilePath, ".gold"), gold)
    }

    public Remove(): void
    {
      def fullPath = Path.GetFullPath(FilePath);
      IOFile.Delete(fullPath);
      def goldFullPath = Path.ChangeExtension(fullPath, ".gold");
      when (IOFile.Exists(goldFullPath))
        IOFile.Delete(goldFullPath);
      def files = Project.Files;
      def index = files.IndexOf(this);
      _ = files.Remove(this);
      when (files.Count > 0)
        files[index].IsSelected = true;
    }

    public override ToString(): string { Name }
  }
}