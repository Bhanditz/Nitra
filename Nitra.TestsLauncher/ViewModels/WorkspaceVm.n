using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace Nitra.ViewModels
{
  public class WorkspaceVm : ITestTreeContainerNode
  {
    public TestSuites: ObservableCollection[TestSuiteVm] { get; private set }
    public IsDirty: bool { get; private set }
    public SolutinFilePath: string { get; private set }
    public RootFolder: string { get; private set }

    public this(solutinFilePath: string, selectePath: string, config: string)
    {
      def isSolutinFileExists = solutinFilePath != null && File.Exists(solutinFilePath);
      unless (isSolutinFileExists)
      {
        def message = $"The '$solutinFilePath' not exists.";
        Debug.Assert(isSolutinFileExists, message);
        // ReSharper disable once HeuristicUnreachableCode
        throw Exception(message)
      }

      SolutinFilePath = solutinFilePath;
      RootFolder = Path.GetDirectoryName(solutinFilePath);

      def suits = File.ReadAllLines(solutinFilePath);
      def rootDir = Path.GetDirectoryName(solutinFilePath);
      Debug.Assert(rootDir != null, "rootDir != null");
      TestSuites = ObservableCollection.[TestSuiteVm]();

      foreach (aSuite in suits)
      {
        def suite = aSuite.Trim();
        
        unless (string.IsNullOrEmpty(suite))
        {
          def testSuite = TestSuiteVm(this, suite, config);
          
          unless (selectePath == null)
          {
            if (testSuite.FullPath == selectePath)
              testSuite.IsSelected = true // Прикольно что по другому фокус не изменить!
            else 
              foreach (test in testSuite.Tests.Filter(x => x.FullPath == selectePath))
                test.IsSelected = true;
          }
        }
      }

      TestSuites.CollectionChanged += TestSuites_CollectionChanged;
      IsDirty = false;
    }

    public Name: string { get { Path.GetFileName(SolutinFilePath) }}

    TestSuites_CollectionChanged(_: object, _: NotifyCollectionChangedEventArgs): void
    {
      IsDirty = true
    }

    public Save(): void
    {
      when (IsDirty)
      {
        def builder = StringBuilder();
  
        foreach (testSuiteVm in TestSuites)
          _ = builder.AppendLine(testSuiteVm.Name);
  
        File.WriteAllText(SolutinFilePath, builder.ToString(), Encoding.UTF8);
        IsDirty = false
      }
    }

    public override ToString(): string { Name }

    public GetUnattachedTestSuites(): array[string]
    {
      def dir = Path.GetDirectoryName(SolutinFilePath);
      Directory.GetDirectories(dir ?? "").Select(Path.GetFileName).Except(TestSuites.Select(s => s.Name)).ToArray()
    }

    public Parent: ITestTreeNode { get { null }}
  }
}