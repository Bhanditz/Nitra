using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Client;
using Nitra.ViewModels;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Serialization;

using Messages = Nitra.ClientServer.Messages;

namespace Nitra.Visualizer.Serialization
{
  public sealed class Language
  {
    [XmlAttribute] public Name: string { get; set }
    [XmlAttribute] public Path: string { get; set }
    public DynamicExtensions: array[DynamicExtension] { get; set }
    public Libs: array[string] { get; set }
  }

  public sealed class DynamicExtension
  {
    [XmlAttribute] public Name : string { get; set }
    [XmlAttribute] public Path : string { get; set }
    
    public ToDynamicExtensionInfo(rootPath : string) : Messages.DynamicExtensionInfo
    {
      Messages.DynamicExtensionInfo(Name, Path.GetFullPath(Path.Combine(rootPath, Path)))
    }
  }
  
  public module SerializationHelper
  {
    _serializer: XmlSerializer = XmlSerializer(typeof(Language));

    public Serialize(config : Messages.Config) : string
    {
      def writer = StringWriter();
      _serializer.Serialize(writer, config);
      writer.ToString()
    }

    public Deserialize(text: string) : Messages.Config
    {
      def reader = StringReader(text);
      def data = _serializer.Deserialize(reader);
      match (data)
      {
        | c is Messages.Config => c
        | lang is Language =>
          def langInfo = Messages.LanguageInfo(lang.Name, lang.Path, lang.DynamicExtensions?.Select(e => Messages.DynamicExtensionInfo(e.Name, e.Path))?.ToArray() ?? array(0));
          Messages.Config(Messages.ProjectSupport("", "", ""), array[langInfo], lang.Libs?.ToArray() ?? array(0))
        
        | _ => assert(false, "Unsupported type " + data.GetType().FullName)
      }
    }
  }
}