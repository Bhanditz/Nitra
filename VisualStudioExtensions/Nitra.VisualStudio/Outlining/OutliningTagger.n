using Nitra.Internal;
using Nitra.ProjectSystem;
using Nitra.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Tagging;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.VisualStudio.Outlining
{
  public class OutliningTagger : ITagger[IOutliningRegionTag]
  {
    private                  _buffer               : ITextBuffer;
    private mutable          _file                 : File;

    public this(parseAgent : ParseAgent, buffer : ITextBuffer, nitraSolutionService : INitraSolutionService)
    {
      _buffer               = buffer;

      def path = buffer.GetFilePath();
      nitraSolutionService.NotifiWhenFileIsOpened(path, SetFile);
    }

    public event TagsChanged : EventHandler[SnapshotSpanEventArgs];

    SetFile(file : File) : void
    {
      _file = file;
    }

    public GetTags(_spans : NormalizedSnapshotSpanCollection) : Seq[ITagSpan[IOutliningRegionTag]]
    {
      if (_file != null)
      {
        def outlinings = GetOutlinings(_file.ParseResult);
        def snapshot   = _buffer.CurrentSnapshot;
        def result     = List();

        foreach (o in outlinings)
        {
          def span = o.Span;
          def currentSpn = SnapshotSpan(snapshot, span.StartPos, span.Length);
          result.Add(TagSpan(currentSpn, OutliningRegionTag(o.IsDefaultCollapsed, o.IsImplementation, null, null)));
        }
        result
      }
      else
        Enumerable.Empty()
    }

    private GetOutlinings(parseResult : IParseResult) : List[OutliningInfo]
    {
      def outlinings = List();
      parseResult.GetOutlining(outlinings);
      outlinings
    }
  }
}
