using Microsoft.VisualStudio.Language.Intellisense;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Operations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.VisualStudio
{
  public class NitraCompletionSource : ICompletionSource
  {
    _textBuffer : ITextBuffer;
    _textDocumentFactoryService : ITextDocumentFactoryService;
    _navigatorService : ITextStructureNavigatorSelectorService;
    
    public this(textBuffer : ITextBuffer, textDocumentFactoryService : ITextDocumentFactoryService, navigatorService : ITextStructureNavigatorSelectorService)
    {
      _textBuffer                 = textBuffer;
      _textDocumentFactoryService = textDocumentFactoryService;
      _navigatorService           = navigatorService;
    }
    
    public AugmentCompletionSession(session : ICompletionSession, completionSets : IList[CompletionSet]) : void
    {
      def completions = List();
      
      def snapshot = _textBuffer.CurrentSnapshot;
      def triggerPoint = session.GetTriggerPoint(snapshot);

      unless (triggerPoint.HasValue)
          return;

      mutable start = triggerPoint.Value;
      def line = start.GetContainingLine();

      while (start > line.Start && char.IsLetterOrDigit((start - 1).GetChar()))
          start -= 1;

      def applicableTo = snapshot.CreateTrackingSpan(SnapshotSpan(start, triggerPoint.Value), SpanTrackingMode.EdgeInclusive);

      def parseAgent = Utils.TryGetOrCreateParseAgent(_textBuffer, _textDocumentFactoryService, NitraPackage.Instance.Language);
      def completionPrefix = snapshot.GetText(applicableTo.GetSpan(snapshot));
      def literals = parseAgent.GetCompletionList(snapshot, _textBuffer.GetFilePath(), start.Position, completionPrefix);
      
      foreach (literal in literals)
        completions.Add(Completion(literal));
      
      completionSets.Add(CompletionSet("All", "All", applicableTo, completions, Enumerable.Empty()));
    }
    
    public Dispose() : void { }
  }
}
