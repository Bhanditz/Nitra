#if UNIVERSAL_INTEGRATION
//using Nemerle;
//using Nemerle.Collections;
//using Nemerle.Imperative;
//using Nemerle.Text;
//using Nemerle.Utility;

//using System;
//using System.Collections.Generic;
//using System.ComponentModel.Composition;
//using System.Linq;

//using Microsoft.VisualStudio;
//using Microsoft.VisualStudio.OLE.Interop;
//using Microsoft.VisualStudio.Utilities;
//using Microsoft.VisualStudio.Editor;
//using Microsoft.VisualStudio.Text.Editor;
//using Microsoft.VisualStudio.TextManager.Interop;

//using VSConstants = Microsoft.VisualStudio.VSConstants;

//namespace Nitra.VisualStudio.KeyBinding
//{
//  [Export(typeof(IVsTextViewCreationListener))]
//  [ContentType("text")]
//  [TextViewRole(PredefinedTextViewRoles.Editable)]
//  internal class KeyBindingCommandFilterProvider : IVsTextViewCreationListener
//  {
//    [Import]
//    internal editorFactory : IVsEditorAdaptersFactoryService;

//    public VsTextViewCreated(textViewAdapter : Microsoft.VisualStudio.TextManager.Interop.IVsTextView) : void
//    {
//      def textView = textViewAdapter.ToITextView() :> IWpfTextView;
//      when (textView == null)
//          return;

//      AddCommandFilter(textViewAdapter, KeyBindingCommandFilter(textView));
//    }

//    AddCommandFilter(viewAdapter : IVsTextView, commandFilter : KeyBindingCommandFilter) : void
//    {
//        when (!commandFilter.m_added)
//        {
//            //get the view adapter from the editor factory
//            mutable next;
//            def hr = viewAdapter.AddCommandFilter(commandFilter, out next);

//            when (hr == VSConstants.S_OK)
//            {
//                commandFilter.m_added = true;
//                //you'll need the next target for Exec and QueryStatus
//                when (next != null)
//                    commandFilter.m_nextTarget = next;
//            }
//        }
//    }
//  }
//}
#endif