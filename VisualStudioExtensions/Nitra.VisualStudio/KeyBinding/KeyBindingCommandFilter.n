using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

using Microsoft.VisualStudio.OLE.Interop;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Text.Editor;

namespace Nitra.VisualStudio.KeyBinding
{
  internal class KeyBindingCommandFilter : IOleCommandTarget
  {
    private m_textView : IWpfTextView;
    internal mutable m_nextTarget : IOleCommandTarget;
    internal mutable m_added : bool;
    
    public this(textView : IWpfTextView)
    {
      m_textView = textView;
    }    

    public QueryStatus(pguidCmdGroup : ref Guid, cCmds : uint, prgCmds : array[OLECMD], pCmdText : IntPtr) : int
    {
      m_nextTarget.QueryStatus(ref pguidCmdGroup, cCmds, prgCmds, pCmdText)
    }

    public Exec(pguidCmdGroup : ref Guid, nCmdID : uint, nCmdexecopt : uint, pvaIn : IntPtr, pvaOut : IntPtr) : int
    {
      mutable typedChar = char.MinValue;
      when (pguidCmdGroup == VSConstants.VSStd2K)
      {
        match (nCmdID :> VSConstants.VSStd2KCmdID)
        {
          | VSConstants.VSStd2KCmdID.GOTOBRACE => 
            return VSConstants.S_OK;
            
          | _ => assert2(true);
        }
        
      }
      
      
      when (pguidCmdGroup == VSConstants.VSStd2K && nCmdID == VSConstants.VSStd2KCmdID.TYPECHAR :> uint)
      {
        typedChar = Marshal.GetObjectForNativeVariant(pvaIn) :> char;
        when (typedChar.Equals('+'))
        {
          
        }
      }

      m_nextTarget.Exec(ref pguidCmdGroup, nCmdID, nCmdexecopt, pvaIn, pvaOut);
    }
  }
}
