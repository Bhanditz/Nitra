using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Editor;
using Microsoft.VisualStudio.Language.Intellisense;
using Microsoft.VisualStudio.OLE.Interop;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Editor;
using Microsoft.VisualStudio.TextManager.Interop;
using Microsoft.VisualStudio.VSConstants;

using Nitra.Runtime.Highlighting;
using Nitra.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

using IServiceProvider = System.IServiceProvider;

namespace Nitra.VisualStudio.KeyBinding
{
  public class KeyBindingCommandFilter : IOleCommandTarget
  {
    public IsAdded : bool { get; private set; }

    private         _textView         : IWpfTextView;
    private mutable _nextTarget       : IOleCommandTarget;
    private         _parseAgent       : ParseAgent;
    private         _serviceProvider  : IServiceProvider;
    private         _completionBroker : ICompletionBroker;
    private         _adaptersFactory  : IVsEditorAdaptersFactoryService;
    private mutable _currentSession   : ICompletionSession;

    public this(
      textViewAdapter : IVsTextView,
      textDocumentFactoryService : ITextDocumentFactoryService,
      serviceProvider : IServiceProvider,
      completionBroker : ICompletionBroker,
      adaptersFactory  : IVsEditorAdaptersFactoryService)
    {
      _adaptersFactory  = adaptersFactory;
      _serviceProvider  = serviceProvider;
      _completionBroker = completionBroker;
      //_textView         = textViewAdapter.ToITextView();
      _textView         = _adaptersFactory.GetWpfTextView(textViewAdapter);
      _parseAgent       = Utils.TryGetOrCreateParseAgent(_textView.TextBuffer, textDocumentFactoryService, NitraPackage.Instance.Language);
      AddCommandFilter(textViewAdapter);
    }

    private AddCommandFilter(viewAdapter : IVsTextView) : void
    {
      when (IsAdded)
        return;
        
      //get the view adapter from the editor factory
      mutable next;
      def hr = viewAdapter.AddCommandFilter(this, out next);

      when (hr == S_OK)
      {
        IsAdded = true;
        //you'll need the next target for Exec and QueryStatus
        when (next != null)
          _nextTarget = next;
      }
    }

    public QueryStatus(pguidCmdGroup : ref Guid, cCmds : uint, prgCmds : array[OLECMD], pCmdText : IntPtr) : int
    {
      when (pguidCmdGroup == VSStd2K)
      {
        match (prgCmds[0].cmdID :> VSStd2KCmdID)
        {
          | VSStd2KCmdID.AUTOCOMPLETE
          | VSStd2KCmdID.SHOWMEMBERLIST
          | VSStd2KCmdID.COMPLETEWORD => 
            prgCmds[0].cmdf = (OLECMDF.OLECMDF_ENABLED | OLECMDF.OLECMDF_SUPPORTED) :> uint;
            return S_OK;
            
          | _ => ()
        }
      }
      
      _nextTarget.QueryStatus(ref pguidCmdGroup, cCmds, prgCmds, pCmdText)
    }

    public Exec(pguidCmdGroup : ref Guid, nCmdID : uint, nCmdexecopt : uint, pvaIn : IntPtr, pvaOut : IntPtr) : int
    {
      when (VsShellUtilities.IsInAutomationFunction(_serviceProvider))
        return _nextTarget.Exec(ref pguidCmdGroup, nCmdID, nCmdexecopt, pvaIn, pvaOut);

      mutable updateFilter;
      
      when (pguidCmdGroup == VSStd2K)
      {
        def cmd = nCmdID :> VSStd2KCmdID;
        
        match (cmd)
        {
          | VSStd2KCmdID.AUTOCOMPLETE
          | VSStd2KCmdID.COMPLETEWORD => when (StartSession())     return S_OK;
          | VSStd2KCmdID.RETURN       => when (TryComplete(false)) return S_OK;
          | VSStd2KCmdID.TAB          => when (TryComplete(true))  return S_OK;
          | VSStd2KCmdID.BACKSPACE    => updateFilter = true;
          | VSStd2KCmdID.CANCEL       => when (Cancel())           return S_OK;
          | VSStd2KCmdID.GOTOBRACE    => OnGoToBrace();            return S_OK;
          | VSStd2KCmdID.TYPECHAR     =>
            def typedChar = (Marshal.GetObjectForNativeVariant(pvaIn) :> ushort) :> char;
            when (char.IsWhiteSpace(typedChar) || char.IsPunctuation(typedChar))
              unless (TryComplete(false))
                updateFilter = true;
          | _ => assert2(true);
        }

      }

      def result = _nextTarget.Exec(ref pguidCmdGroup, nCmdID, nCmdexecopt, pvaIn, pvaOut);
      
      when (updateFilter)
        Filter();
        
      result
    }
    
    StartSession() : bool
    {
      when (_currentSession != null)
        return false;

      def caret = _textView.Caret.Position.BufferPosition;
      def snapshot = caret.Snapshot;

      _currentSession = _completionBroker.CreateCompletionSession(_textView, snapshot.CreateTrackingPoint(caret, PointTrackingMode.Positive), true);
      _currentSession.Dismissed += _ => _currentSession = null;
      _currentSession.Start();

      true
    }
    
    Filter() : void
    {
      when (_currentSession == null)
        return;

      _currentSession.SelectedCompletionSet.Filter();
      _currentSession.SelectedCompletionSet.SelectBestMatch();
      _currentSession.SelectedCompletionSet.Recalculate();
    }
    
    TryComplete(force : bool) : bool
    {
      when (_currentSession == null)
        return false;

      if (!_currentSession.SelectedCompletionSet.SelectionStatus.IsSelected && !force)
      {
        _currentSession.Dismiss();
        false
      }
      else
      {
        _currentSession.Commit();
        true
      }
    }

    Cancel() : bool
    {
      when (_currentSession == null)
        return false;

      _currentSession.Dismiss();
      true
    }
    
    OnGoToBrace() : void
    {
      when (_parseAgent.LastResult == null)
        return;

      def walker = MatchBracketsWalker();
      def pos = _textView.Caret.Position.BufferPosition.Position;
      def context = MatchBracketsWalker.Context(_textView.Caret.Position.BufferPosition.Position);
      _ = walker.Walk(_parseAgent.LastResult, context);
      foreach (brackets in context.Brackets)
      {
        def newPos =
          if (brackets.CloseBracket.IntersectsWith(pos))
            brackets.OpenBracket.StartPos
          else if (brackets.OpenBracket.IntersectsWith(pos))
            brackets.CloseBracket.StartPos
          else
            pos;

        def point = SnapshotPoint(_textView.TextBuffer.CurrentSnapshot, newPos);
        _ = _textView.Caret.MoveTo(point);
        _textView.Caret.EnsureVisible();
        break;
      }
    }
  }
}
