using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Runtime.Binding;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.VisualStudio.Coloring
{
  public class CollectSymbolsAstVisitor : IAstVisitor
  {
    private         _span : NSpan;
    
    public SpanInfos : List[SpanInfo] { get; private set; }

    public this(span : NSpan) { _span = span; SpanInfos = List(); }
    
    public Visit(parseTree : IAst) : void
    {
      when (parseTree.Span.IntersectsWith(_span))
        parseTree.Accept(this);
    }

    public Visit(name : Name) : void implements IAstVisitor.Visit
    {
      def span = name.Span;

      when (!span.IntersectsWith(_span) || !name.IsSymbolEvaluated)
        return;

      def sym = name.Symbol;
      def spanClass = sym.SpanClass;

      when (spanClass == "Default")
        return;

      SpanInfos.Add(SpanInfo(span, SpanClass(sym.SpanClass)));
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      def span = reference.Span;

      when (!span.IntersectsWith(_span) || !reference.IsRefEvaluated)
        return;

      def spanClass = reference.Ref.SpanClass;

      when (spanClass == "Default")
        return;

      SpanInfos.Add(SpanInfo(span, SpanClass(spanClass)));
    }
  }
}
