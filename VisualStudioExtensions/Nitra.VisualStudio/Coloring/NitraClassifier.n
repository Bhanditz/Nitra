using Nitra;
using Nitra.Internal;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Late;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Data.Core;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Utilities;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;

namespace Nitra.VisualStudio.Coloring
{
  /// <summary>
  /// Implements the coloring classification.
  /// </summary>
  public class NitraClassifier : IClassifier
  {
    private         _buffer                     : ITextBuffer;
    private         _classificationTypeRegistry : IClassificationTypeRegistryService;
    //private         _classificationCache        : ClassificationCache;
    private         _dataHostService            : IVsDataHostService;
    private         _nitraSolutionService       : INitraSolutionService;
    private mutable _file                       : File;

    public this(buffer : ITextBuffer, classificationTypeRegistry : IClassificationTypeRegistryService, dataHostService : IVsDataHostService, nitraSolutionService : INitraSolutionService)
    {
      _nitraSolutionService       = nitraSolutionService;
      _dataHostService            = dataHostService;
      _buffer                     = buffer;
      _classificationTypeRegistry = classificationTypeRegistry;

      def path = buffer.GetFilePath();
      nitraSolutionService.NotifiWhenFileIsOpened(path, SetFile);
    }

    #region IClassifier Members
    
    SetFile(file : File) : void
    {
      _file = file;
    }

    // Use this event if a text change causes classifications on a line other the one on which the line occurred.
    public event ClassificationChanged : EventHandler[ClassificationChangedEventArgs];

    private OnClassificationChanged(span : SnapshotSpan) : void
    {
      this.ClassificationChanged?.Invoke(this, ClassificationChangedEventArgs(span));
    }

    //This is the main method of the classifier. It should return one ClassificationSpan per group that needs coloring.
    //It will be called with a span that spans a single line where the edit has been made (or multiple times in paste operations).
    public GetClassificationSpans(span : SnapshotSpan) : IList[ClassificationSpan]
    {
      def classificationSpans = List.[ClassificationSpan]();
      
      when (_file == null)
        return classificationSpans;
        
      def parseResult = _file.ParseResult;
      def language = _file.Language;

      def start      = span.Start : int;
      def end        = span.End   : int;
      def spanInfos = HashSet();
      parseResult.GetSpans(start, end, spanInfos);
        
      //def spanInfos  = _classificationCache.GetSpans(span, _file.ParseResult);
      foreach (spanInfo in spanInfos)
      {
        def loc = spanInfo.Span;

        when (loc.StartPos >= end) break;
        when (loc.EndPos < start)  continue;

        def currentSpn = span.Overlap(Span(loc.StartPos, loc.EndPos - loc.StartPos));

        when (currentSpn.HasValue)
        {
          when (spanInfo.SpanClass == SpanClass.Default : object)
            continue;

          def classificationType = _classificationTypeRegistry.GetClassificationType(language + spanInfo.SpanClass.Name);
          when (classificationType != null)
          {
            def classificationSpan = ClassificationSpan(currentSpn.Value, classificationType);
            classificationSpans.Add(classificationSpan);
          }
        }
      }
      classificationSpans
    }
    #endregion
  }
}
