using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Text.Formatting;
using Microsoft.VisualStudio.Utilities;
using Microsoft.VisualStudio.Language.StandardClassification;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.ComponentModel.Composition;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Reflection;
using System.Windows.Media;
using System.Xml.Linq;

using NLog;

using GdiColor = System.Drawing.Color;

namespace Nitra.VisualStudio
{
  public interface INitraGlobalConfig
  {
    Languages : list[Language] { get; }
    Property[name : string] : string { get; }
    GetLanguageByExtension(extension : string) : ValueOption[Language];
    ApplySpanClassStyles(formatMap : IClassificationFormatMap, classificationTypeRegistryService : IClassificationTypeRegistryService, standardClassifications : IStandardClassificationService) : void;
  }

  [Export(typeof(INitraGlobalConfig))]
  public class NitraGlobalConfig : INitraGlobalConfig
  {
    _logger : Logger = LogManager.GetLogger(typeof(this).FullName);

    static _nitraConfigName             : string                      = "NitraGlobalConfig.xml";
    static _expandPropertyRegex         : Regex                       = Regex(@"\$(\w(\w|\d)*)", RegexOptions.Compiled);
    _properties                         : Hashtable[string, string]   = Hashtable();
    _languageMap                        : Hashtable[string, Language] = Hashtable();
    mutable _languages                  : list[Language]              = [];
    _fileExtensionRegistryService       : IFileExtensionRegistryService;
    _contentTypeRegistryService         : IContentTypeRegistryService;
    _spanClassStyleBuilders             : Hashtable[string, TextFormattingRunProperties -> TextFormattingRunProperties] = Hashtable();

    public Languages                    : list[Language] { get { _languages } }
    public ConfigPath                   : string         { get; }

    [ImportingConstructor]
    public this(
      contentTypeRegistryService        : IContentTypeRegistryService,
      fileExtensionRegistryService      : IFileExtensionRegistryService
      )
    {
      _fileExtensionRegistryService = fileExtensionRegistryService;
      _contentTypeRegistryService   = contentTypeRegistryService;
      _properties["Configuration"]  = Constants.Configuration;

      def root = Environment.GetEnvironmentVariable("NitraPath");
      if (root == null)
        ShowError(@"You must specify path to Nitra root directory in the 'NitraPath' environment variable. For example: NitraPath=d:\Nitra");
      else if (!Directory.Exists(root))
        ShowError(@"Path specified in the 'NitraPath' environment variable not exists. You must specify path to Nitra root directory in the 'NitraPath' environment variable. For example: NitraPath=d:\Nitra")
      else
      {
        _properties["NitraPath"] = root.TrimEnd('\\');
        ConfigPath = Path.Combine(root, _nitraConfigName);
        ReadConfig();
      }
    }
    
    private ReadConfig() : void
    {
      def configElement   =
        try XElement.Load(ConfigPath)
        catch
        { e =>
          _logger.ErrorException($"Failed to read config file '$ConfigPath'", e);
          null
        }

      when (configElement != null)
      {
        try
        {
          def propertiesElement = configElement.Element("Properties");
          when (propertiesElement != null)
            ReadProperties(propertiesElement);

          def languagesElement = configElement.Element("Languages");
          when (languagesElement != null)
            ReadLanguages(languagesElement);
        
          def spanClassesElement = configElement.Element("SpanClasses");
          when (spanClassesElement != null)
            ReadSpanClasses(spanClassesElement);
        }
        catch
        { e =>
          _logger.ErrorException($"Failed to parse config file '$ConfigPath'", e);
        }
      }
    }

    private ReadProperties(propertiesElement : XElement) : void
    {
      foreach (prop in propertiesElement.Elements())
        _properties[prop.Name.LocalName] = prop.Value ?? "";
    }

    private ReadLanguages(languagesElement : XElement) : void
    {
      foreach (lang in languagesElement.Elements("Language"))
      {
        def nameAttr = lang.Attribute("Name");
        when (nameAttr == null)
          continue;

        def grammarAttr = lang.Attribute("Grammar");
        when (grammarAttr == null)
          continue;

        def startRuleAttr = lang.Attribute("StartRule");
        when (startRuleAttr == null)
          continue;

        def fileExtensionsAttr = lang.Attribute("FileExtensions");
        when (fileExtensionsAttr == null)
          continue;

        def moduleElements = lang.Elements("Module").ToList();
        when (moduleElements.Count == 0)
          continue;

        def name = nameAttr.Value;

        def oldContentType = _contentTypeRegistryService.GetContentType(name);
        when (oldContentType != null) // remove if exists
        {
          foreach (extension in List(_fileExtensionRegistryService.GetExtensionsForContentType(oldContentType)))
            _fileExtensionRegistryService.RemoveFileExtension(extension);

          _contentTypeRegistryService.RemoveContentType(name);
        }

        def contentType    = _contentTypeRegistryService.AddContentType(name, ["code"]);
        def fileExtensions = (fileExtensionsAttr.Value ?? "").Split(array[';'], StringSplitOptions.RemoveEmptyEntries).MapToList(s => s.Trim().ToLowerInvariant());
        def modules        = moduleElements.MapToList(e => ExpandProperty(e.Value));
        
        def language = Language(name, contentType, fileExtensions, grammarAttr.Value, startRuleAttr.Value, modules);

        foreach (ext in fileExtensions)
        {
          _languageMap[ext] = language;
          try
            _fileExtensionRegistryService.AddFileExtension(ext, contentType);
          catch
          { e is InvalidOperationException =>
            _logger.ErrorException($"Failed to add file extension '$ext' in registry for language '$name'", e);
          }
        }

        _languages ::= language;
      }
    }

    private ReadSpanClasses(spanClassesElement : XElement) : void
    {
      foreach (spanClass in spanClassesElement.Elements())
      {
        def name = spanClass.Name.LocalName;
        def foreground = spanClass.Attribute("Foreground")?.Value;
        def background = spanClass.Attribute("Background")?.Value;
        _spanClassStyleBuilders[name] = fun(mutable properties)
        {
          when (foreground != null)
          {
            def color = GdiColor.FromName(foreground);
            properties = properties.SetForeground(Color.FromRgb(color.R, color.G, color.B));
          }
          when (background != null)
          {
            def color = GdiColor.FromName(background);
            properties = properties.SetBackground(Color.FromRgb(color.R, color.G, color.B));
          }
          properties
        };
      }
    }    

    public ApplySpanClassStyles(formatMap : IClassificationFormatMap, classificationTypeRegistryService : IClassificationTypeRegistryService, standardClassifications : IStandardClassificationService) : void
    {
      _logger.Trace("ApplySpanClassStyles");
      formatMap.BeginBatchUpdate();
      try
        foreach (kv with (name = kv.Key, builder = kv.Value) in _spanClassStyleBuilders)
        {
          def classificationType = classificationTypeRegistryService.GetClassificationType(name);
          when (classificationType == null)
          {
            def newClassificationType = classificationTypeRegistryService.CreateClassificationType(name, array[standardClassifications.FormalLanguage]);
            _logger.Debug($"Classification type '$name' created");
            def newProperties = builder(formatMap.GetTextProperties(newClassificationType));
            formatMap.SetTextProperties(newClassificationType, newProperties);
          }
        }
      catch
      { e =>
        _logger.TraceException("ApplySpanClassStyles failed", e);
        throw;
      }
      finally formatMap.EndBatchUpdate();
    }

    public GetLanguageByExtension(extension : string) : ValueOption[Language]
    {
      mutable language;

      if (_languageMap.TryGetValue(extension.ToLowerInvariant(), out language))
        VSome(language)
      else
        VNone()
    }

    public Property[name : string] : string { get { ExpandProperty(_properties[name]) } }

    ExpandProperty(value : string) : string
    {
      mutable currentProperty;
      def getPropertyName(m)
      {
        currentProperty = m.Groups[1].Value;
        currentProperty
      }
      try
      {
        if (value.Contains("$"))
          ExpandProperty(_expandPropertyRegex.Replace(value, m => _properties[getPropertyName(m)]));
        else
          value
      }
      catch
      {
        | _ is KeyNotFoundException => ShowError($"Configuration loading failed.\r\nProperty '$currentProperty' not defined in '$ConfigPath'."); throw;
      }
    }

    ShowError(msg : string) : void
    {
      NitraPackage.Instance.ShowMessage(msg, MessageType.Error);
      _logger.Error(msg);
    }
  }
}
