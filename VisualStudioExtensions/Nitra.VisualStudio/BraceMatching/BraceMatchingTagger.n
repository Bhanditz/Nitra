using Nitra.Runtime.Highlighting;
using Nitra.VisualStudio.Parsing;

using Nemerle.Imperative;

using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.Composition;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Editor;
using Microsoft.VisualStudio.Text.Tagging;
using Microsoft.VisualStudio.Utilities;

namespace Nitra.VisualStudio
{
  internal class BraceMatchingTagger : ITagger[TextMarkerTag]
  {
    public  Language    : Language { get; }
    private _parseAgent : ParseAgent;

    internal this (language : Language, view : ITextView, sourceBuffer : ITextBuffer)
    {
      Language = language;
        //here the keys are the open braces, and the values are the close braces
      this.View = view;
      this.SourceBuffer = sourceBuffer;
      this.CaretPos = null;

      this.View.Caret.PositionChanged += CaretPositionChanged;
      this.View.LayoutChanged += ViewLayoutChanged;

      _ = Utils.TryGetOrCreateParseAgent(sourceBuffer, out _parseAgent);
    }

    View         : ITextView      { get; set; }
    SourceBuffer : ITextBuffer    { get; set; }
    CaretPos     : SnapshotPoint? { get; set; }

    public event TagsChanged : EventHandler [SnapshotSpanEventArgs];

    ViewLayoutChanged(_ : object, e : TextViewLayoutChangedEventArgs) : void
    {
      unless (e.NewSnapshot == e.OldSnapshot : object) //make sure that there has really been a change
        UpdateAtCaretPosition(View.Caret.Position);
    }

    CaretPositionChanged(_ : object, e : CaretPositionChangedEventArgs) : void
    {
      UpdateAtCaretPosition(e.NewPosition);
    }

    UpdateAtCaretPosition(caretPosition : CaretPosition) : void
    {
      CaretPos = caretPosition.Point.GetPoint(SourceBuffer, caretPosition.Affinity);

      when (CaretPos.HasValue)
        TagsChanged?.Invoke(this, SnapshotSpanEventArgs(SnapshotSpan(SourceBuffer.CurrentSnapshot, 0, SourceBuffer.CurrentSnapshot.Length)));
    }

    public GetTags(spans : NormalizedSnapshotSpanCollection) : IEnumerable[ITagSpan[TextMarkerTag]]
    {
      when (spans.Count == 0)   //there is no content in the buffer
        return;

      //don't do anything if the current SnapshotPoint is not initialized or at the end of the buffer
      when (!CaretPos.HasValue || CaretPos.Value.Position >= CaretPos.Value.Snapshot.Length)
        return;

      //hold on to a snapshot of the current character
      mutable currentCaretPos = CaretPos.Value;

      //if the requested snapshot isn't the same as the one the brace is on, translate our spans to the expected snapshot
      when (spans[0].Snapshot != currentCaretPos.Snapshot : object)
        currentCaretPos = currentCaretPos.TranslateTo(spans [0].Snapshot, PointTrackingMode.Positive);

      when (_parseAgent.LastResult == null)
        return;

      def walker = MatchBracketsWalker();
      def context = MatchBracketsWalker.Context(currentCaretPos.Position);
      _ = walker.Walk(_parseAgent.LastResult, context);

      foreach (brackets in context.Brackets)
      {
        def textMarkerTag = if (brackets.OpenBracket.IsEmpty || brackets.CloseBracket.IsEmpty) TextMarkerTag("NitraError") else TextMarkerTag("blue");
        yield TagSpan(ToSnapshotSpan(currentCaretPos.Snapshot, brackets.OpenBracket),  textMarkerTag);
        yield TagSpan(ToSnapshotSpan(currentCaretPos.Snapshot, brackets.CloseBracket), textMarkerTag);
      }
    }

    public static ToSnapshotSpan(snapshot : ITextSnapshot, span : NSpan) : SnapshotSpan
    {
      def msSpan = Span(span.StartPos, span.Length);
      SnapshotSpan(snapshot, msSpan)
    }
  }
}
