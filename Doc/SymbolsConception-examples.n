symbol HierarchicalSymbol
{
  Parent    : NamespaceMemberDeclaration?;
  ShortName : DeclarationName;
  Children  : HierarchicalSymbol;
}

symbol NamespaceMemberSymbol { }

symbol NamespaceSymbol : NamespaceMemberSymbol, HierarchicalSymbol
{
  ///// Декларации описанные в исходных файлах. Может быть 0 или более.
  //Declarations : NamespaceDeclaration*;
}

mapping NamespaceDeclaration* -> NamespaceSymbol  
  // порождает поле Declarations : NamespaceDeclaration*; в NamespaceSymbol
  // запись означает: 0 или больше элементов преобразуется в один символ
{
  Parent    = Loockup(NamespaceDeclaration.Path);
  ShortName = NamespaceDeclaration.ShortName;
}

[Tree]
declaration NamespaceMemberDeclaration
{
  parent  Parent    : NamespaceMemberDeclaration?;
          ShortName : DeclarationName;
}

declaration NamespaceDeclaration : NamespaceMemberDeclaration
{
  Usings             : UsingDeclaration*;
  NamePartReferences : Reference[NamespaceSymbol]*;
  Members            : NamespaceMemberDeclaration*;
  
  Path               : string* { get { ... } } // вычисляемое свойство (не сериализуется)
}

syntax NamespaceMember
{
  | Namespace = "namespace" QualifiedName "{" NamespaceBody "}"
    {
      declare NamespaceDeclaration(parent : option[NamespaceDeclaration])
      {
        Parent             = parent;
        NamePartReferences = List.Empty();
        ShortName          = DeclarationName("");
        Usings             = NamespaceBody.GetUsings();
        Members            = NamespaceBody.GetMembers();
      }
    }

  
[StartRule, ExplicitSpaces]
syntax Start                = s NamespaceBody !Any
{
  declare NamespaceDeclaration()
  {
    Parent             = None();
    NamePartReferences = List.Empty();
    ShortName          = DeclarationName("");
    Usings             = NamespaceBody.GetUsings();
    Members            = NamespaceBody.GetMembers();
  }
}

