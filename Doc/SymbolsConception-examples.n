syntax module NitraSyntax
{
  symbol HierarchicalSymbol[T]
  {
    Parent    : T?;
    ShortName : DeclarationName;
    Children  : T*;
  }

  symbol NamespaceMemberSymbol { }

  symbol NamespaceSymbol : NamespaceMemberSymbol, HierarchicalSymbol[NamespaceSymbol]
  {
    ///// Декларации описанные в исходных файлах. Может быть 0 или более.
    //Declarations : NamespaceDeclaration*;
  }

  [Tree]
  declaration NamespaceMemberDeclaration
  {
    parent  Parent    : NamespaceMemberDeclaration?;
            ShortName : DeclarationName;
  }

  declaration NamespaceDeclaration : NamespaceMemberDeclaration
  {
    Usings             : UsingDeclaration*;
    NamePartReferences : Reference[NamespaceSymbol]*;
    Members            : NamespaceMemberDeclaration*;
  
    Path               : string* { get { ... } } // вычисляемое свойство (не сериализуется)
  }

  declaration SyntaxModuleDeclaration : NamespaceMemberDeclaration
  {
    Usings             : UsingDeclaration*;
    Members            : SyntaxModuleDeclaration*;
  }
  
  mapping NamespaceDeclaration* -> NamespaceSymbol  
    // порождает поле Declarations : NamespaceDeclaration*; в NamespaceSymbol
    // запись означает: 0 или больше элементов преобразуется в один символ
  {
    Parent    = Loockup(NamespaceDeclaration.Path); // Path - это вычисляемое свойсчтво из NamespaceDeclaration
    ShortName = NamespaceDeclaration.ShortName;
  }

  //...
  
  [StartRule, ExplicitSpaces]
  syntax Start                = s NamespaceBody !Any
  {
    declare NamespaceDeclaration()
    {
      Parent             = None();
      NamePartReferences = List.Empty();
      ShortName          = DeclarationName("");
      Usings             = NamespaceBody.GetUsings();
      Members            = NamespaceBody.GetMembers();
    }
  }

  //...
    
  syntax NamespaceMember
  {
    | Namespace = "namespace" QualifiedName "{" NamespaceBody "}"
      {
        declare NamespaceDeclaration(parent : NamespaceMemberDeclaration)
        {
          Parent             = Some(parent);
          NamePartReferences = ToReferences(QualifiedName.WithoutLast());
          ShortName          = DeclarationName(QualifiedName.Last());
          Usings             = NamespaceBody.GetUsingDeclarations();
          Members            = NamespaceBody.GetNamespaceMemberDeclarations();
        }
      }

  //...

  syntax NamespaceBody = Usings NamespaceMember*
  {
    GetUsingDeclarations()           : UsingDeclaration*           = Usings.GetUsingDeclarations();
    GetNamespaceMemberDeclarations() : NamespaceMemberDeclaration* = Usings.GetNamespaceMemberDeclarations();
  }

  syntax Usings = outline_hiden outline_begin Using* outline_end_before
  {
    GetUsingDeclarations() : UsingDeclaration* = Usings.Map(ToUsingDeclaration);
  }

  syntax NamespaceMember
  {
    GetNamespaceMemberDeclarations() : NamespaceMemberDeclaration*;

    | Namespace = "namespace" QualifiedName "{" NamespaceBody "}"
      {
        GetNamespaceMemberDeclarations() : NamespaceMemberDeclaration* = ToNamespaceDeclaration();
        
        declare NamespaceDeclaration(parent : NamespaceMemberDeclaration)
        {
          Parent             = Some(parent);
          NamePartReferences = ToReferences(QualifiedName.WithoutLast());
          ShortName          = DeclarationName(QualifiedName.Last());
          Usings             = NamespaceBody.GetUsingDeclarations();
          Members            = NamespaceBody.GetNamespaceMemberDeclarations();
        }
      }

    | SyntaxModule = "syntax" "module" Name "{" Usings SyntaxModuleMember* "}"
      {
        GetNamespaceMemberDeclarations() : NamespaceMemberDeclaration* = ToSyntaxModule();
        
        declare SyntaxModuleDeclaration(parent : NamespaceMemberDeclaration)
        {
          Parent    = parent;
          ShortName = DeclarationName(Name);
          Usings    = Usings.GetUsingDeclarations();
          Members   = SyntaxModuleMember.Map(ToMemberDeclaration);
        }
      }
  }
}
