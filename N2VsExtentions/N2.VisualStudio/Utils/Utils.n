using N2;
using N2.Internal;
using N2.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Adornments;
using Microsoft.VisualStudio.Text.Tagging;

using System;
using System.Diagnostics;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace N2.VisualStudio
{
  public enum MessageType
  {
    | Info = 0
    | Hint = 1
    | Warning = 2
    | Error = 3
  }

  public partial module Utils
  {
    public GetLineAndColumn(this snapshot : ITextSnapshot, position : int) : int * int
    {
      def line = snapshot.GetLineFromPosition(position);

      (line.LineNumber, position - line.Start.Position)
    }

    public GetLineAndColumn(this point : SnapshotPoint) : int * int
    {
      point.Snapshot.GetLineAndColumn(point.Position)
    }

    public static GetPosition(this snapshot : ITextSnapshot, lineNumber : int, columnIndex : int) : int
    {
      snapshot.GetLineFromLineNumber(lineNumber).Start.Position + columnIndex;
    }

    public ShowMessage(this serviceProvider : IServiceProvider, message : string, messageType : MessageType) : void
    {
      def icon =
        match (messageType)
        {
          | MessageType.Hint    => OLEMSGICON.OLEMSGICON_INFO
          | MessageType.Info    => OLEMSGICON.OLEMSGICON_INFO
          | MessageType.Warning => OLEMSGICON.OLEMSGICON_WARNING
          | MessageType.Error
          | _                   => OLEMSGICON.OLEMSGICON_CRITICAL
        };
      def buttons = OLEMSGBUTTON.OLEMSGBUTTON_OK;
      def defaultButton = OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST;
      _ = VsShellUtilities.ShowMessageBox(serviceProvider, message, Constants.ProductName, icon, buttons, defaultButton);
    }

    public GetParseAgentForTextBuffer(
      this globalConfig : IN2GlobalConfig,
      buffer            : ITextBuffer,
      errorProvider     : IErrorProviderFactory,
      documentFactory   : ITextDocumentFactoryService) : ValueOption[ParseAgent]
    {
      def path = buffer.GetFilePath();
      when (string.IsNullOrEmpty(path))
        return VNone();

      def ext = Path.GetExtension(path);
      when (string.IsNullOrEmpty(ext))
        return VNone();

      match (globalConfig.GetLanguageByExtension(ext))
      {
        | VSome(language) =>
          unless (buffer.ContentType.Equals(language.ContentType))
            buffer.ChangeContentType(language.ContentType, null);

          if (buffer.Properties.ContainsProperty(TextBufferProperties.ParseAgent))
            VSome(buffer.Properties[TextBufferProperties.ParseAgent] :> ParseAgent)
          else
          {
            def parseAgent = ParseAgent(language) <-
            {
              ParseFailed += (_, a) =>
              {
                def errorListHelper = GetErrorListHelper(buffer, documentFactory);
                def errorListProvider = errorListHelper.GetErrorListProvider();
                errorListProvider.Tasks.Clear();
                def error = ErrorTask();
                error.ErrorCategory = TaskErrorCategory.Error;
                error.Category = TaskCategory.All;
                error.Text = "INE: " + a.Exception.Message + Environment.NewLine + @"Please contact developers.";
                error.ErrorCategory = TaskErrorCategory.Error;
                _ = errorListProvider.Tasks.Add(error);
              };
              ParseComplete += (_, a) =>
              {
                UpdateErrors(a.Result, buffer, errorProvider, documentFactory);
              };
            };
            buffer.Properties.AddProperty(TextBufferProperties.ParseAgent, parseAgent);

            buffer.Changed +=
              fun (_ : object, a : TextContentChangedEventArgs) : void
              {
                parseAgent.EnqueueParse(a.After, buffer.GetFilePath());
              };
            parseAgent.EnqueueParse(buffer.CurrentSnapshot, buffer.GetFilePath());

            VSome(parseAgent)
          }

        | VNone => VNone()
      }
    }

    GetErrorListHelper(buffer : ITextBuffer, documentFactory : ITextDocumentFactoryService) : ErrorListHelper
    {
      if (buffer.Properties.ContainsProperty(TextBufferProperties.ErrorListHelper))
        buffer.Properties[TextBufferProperties.ErrorListHelper] :> ErrorListHelper
      else
      {
        def result = ErrorListHelper();
        buffer.Properties[TextBufferProperties.ErrorListHelper] = result;
        def doc = buffer.Properties[typeof(ITextDocument)] :> ITextDocument;
        def onTextDocumentDisposed(_ : object, arg : TextDocumentEventArgs)
        {
          when (arg.TextDocument : object == doc)
          {
            result.GetErrorListProvider().Tasks.Clear();
            _ = buffer.Properties.RemoveProperty(TextBufferProperties.ErrorListHelper);
            documentFactory.TextDocumentDisposed -= onTextDocumentDisposed;
          }
        }
        documentFactory.TextDocumentDisposed += onTextDocumentDisposed;
        result
      }
    }
    
    UpdateErrors(parseResult : Parser, buffer : ITextBuffer,  errorProviderFactory : IErrorProviderFactory, documentFactory : ITextDocumentFactoryService) : void
    {
      def errorListHelper = GetErrorListHelper(buffer, documentFactory);
      def errorListProvider = errorListHelper.GetErrorListProvider();

      errorListProvider.Tasks.Clear();
      def errors = parseResult.GetErrors();

      errorListProvider.SuspendRefresh();
      try
      {
        def tasks = errorListProvider.Tasks;
        def snapshot = buffer.CurrentSnapshot;
        def squiggles = errorProviderFactory.GetErrorTagger(buffer);
        _ = squiggles.RemoveTagSpans(_ => true);

        foreach (e in errors)
        {
          def error = ErrorTask();
          def loc = e.Location;
          error.ErrorCategory = TaskErrorCategory.Message;
          error.Category = TaskCategory.CodeSense;
          error.Text = e.Message;
          error.ErrorCategory = TaskErrorCategory.Error;
          def (line, col) = loc.StartLineColumn;
          error.Line = line - 1;
          error.Column = col - 1;
          assert2(IO.File.Exists(loc.Source.FileName));
          error.Document = loc.Source.FileName;
          error.Navigate += errorListHelper.NavigateDocument;
          _ = tasks.Add(error);

          def tspan = snapshot.CreateTrackingSpan(Span(loc.StartPos, loc.Length), SpanTrackingMode.EdgeInclusive);
          _ = squiggles.CreateTagSpan(tspan, ErrorTag(PredefinedErrorTypeNames.SyntaxError, e.Message));
        }
      }
      finally errorListProvider.ResumeRefresh();
    }
  }
}
