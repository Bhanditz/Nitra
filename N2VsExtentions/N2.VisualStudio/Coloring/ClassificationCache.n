using N2;
using N2.Internal;
using N2.Runtime;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Classification;

namespace N2.VisualStudio.Coloring
{
  internal sealed class ClassificationCache
  {
    private         _linesToCache : int;
    private mutable _cacheBounds  : NToken;
    private         _cacheIndex   : array[int * int]; // array of tuple (StartPos, Index in _spanCache)
    private mutable _cache        : array[SpanInfo];

    public this(linesToCache : int)
      requires linesToCache > 0
    {
      _linesToCache = linesToCache;
      _cacheBounds  = NToken();
      _cacheIndex   = array(10);
      _cache        = array(0);
    }

    public Predict([NotNull] changes : INormalizedTextChangeCollection) : void
    {
      def predictedCache = List(_cache.Length);
      def copySpan(span, delta)
      {
        def newStartPos = span.Location.StartPos + delta;
        def newEndPos   = span.Location.EndPos + delta;
        SpanInfo(NToken(newStartPos, newEndPos), span.SpanClass)
      }
      def loopOverChanges(changeIndex, spanIndex, currentDelta, spanPos) : void
      {
        if (changeIndex < changes.Count)
        {
          def change = changes[changeIndex];
          if (change.OldEnd <= spanPos)
            loopOverChanges(changeIndex + 1, spanIndex, currentDelta + change.Delta, spanPos);
          else
            loopOverCache(changeIndex, spanIndex, currentDelta, change);
        }
        else
          loopOverCacheTail(spanIndex, currentDelta);
      }
      and loopOverCache(changeIndex, spanIndex, currentDelta, change) : void
      {
        when (spanIndex < _cache.Length)
        {
          def span = _cache[spanIndex];
          if (span.Location.EndPos <= change.OldPosition)
          {
            predictedCache.Add(copySpan(span, currentDelta));
            loopOverCache(changeIndex, spanIndex + 1, currentDelta, change);
          }
          else if (span.Location.StartPos < change.OldEnd)
            loopOverCache(changeIndex, spanIndex + 1, currentDelta, change);
          else
            loopOverChanges(changeIndex + 1, spanIndex, currentDelta + change.Delta, span.Location.StartPos);
        }
      }
      and loopOverCacheTail(spanIndex, currentDelta)
      {
        when (spanIndex < _cache.Length)
        {
          predictedCache.Add(copySpan(_cache[spanIndex], currentDelta));
          loopOverCacheTail(spanIndex + 1, currentDelta);
        }
      }
      when (_cache.Length > 0)
        loopOverChanges(0, 0, 0, _cache[0].Location.StartPos);
      _cache = predictedCache.ToArray();

      def loopStart(startPos, endPos, index, currentDelta) : int * int
      {
        if (index < changes.Count)
        {
          def change = changes[index];
          if (change.OldEnd <= startPos)
            loopStart(startPos, endPos, index + 1, currentDelta + change.Delta)
          else if (change.OldPosition < startPos && startPos < change.OldEnd)
            if (change.Delta < 0)
              (change.NewPosition, loopEnd(endPos, index, currentDelta))
            else
              (startPos + currentDelta, loopEnd(endPos, index, currentDelta))
          else
            (startPos + currentDelta, loopEnd(endPos, index, currentDelta))
        }
        else
          (startPos + currentDelta, loopEnd(endPos, index, currentDelta))
      }
      and loopEnd(endPos, index, currentDelta) : int
      {
        if (index < changes.Count)
        {
          def change = changes[index];
          if (change.OldEnd <= endPos)
            loopEnd(endPos, index + 1, currentDelta + change.Delta)
          else if (change.OldPosition < endPos && endPos < change.OldEnd)
            if (change.Delta < 0)
              change.NewPosition
            else
              endPos + currentDelta
          else
            endPos + currentDelta
        }
        else
          endPos + currentDelta
      }
      _cacheBounds = NToken(loopStart(_cacheBounds.StartPos, _cacheBounds.EndPos, 0, 0));

      UpdateCacheIndex();
    }

    public GetSpans(span : SnapshotSpan, [NotNull] parseResult : Parser) : array[SpanInfo]
    {
      def startPos = span.Start.Position;
      def endPos   = span.End.Position;

      unless (IsCacheContainsSpan(startPos, endPos))
      {
        _cacheBounds = GetCacheBounds(span);
        _cache = LoadCache(parseResult);
        UpdateCacheIndex();
      }

      def (index, count) = SearchCache(startPos, endPos);
      def result = array(count);
      when (count > 0)
        Array.Copy(_cache, index, result, 0, count);
      result
    }

    private IsCacheContainsSpan(startPos : int, endPos : int) : bool
    {
      _cacheBounds.StartPos <= startPos && endPos <= _cacheBounds.EndPos
    }

    private SearchCache(startPos : int, endPos : int) : int * int
    {
      mutable index = FindCacheIndex(startPos);
      while (index < _cache.Length && _cache[index].Location.EndPos < startPos)
        ++index;
      def startIndex = index;
      while (index < _cache.Length && _cache[index].Location.StartPos < endPos)
        ++index;
      (startIndex, index - startIndex)
    }

    private FindCacheIndex(pos : int) : int
    {
      mutable index = _cacheIndex[0][1];
      for(mutable i = 1; i < _cacheIndex.Length; ++i)
      {
        def (startPos, nextIndex) = _cacheIndex[i];
        when (pos < startPos)
          return index;
        index = nextIndex;
      }
      index
    }

    private LoadCache(parseResult : Parser) : array[SpanInfo]
    {
      def newCache = List(_cache.Length);
      parseResult.GetSpans(_cacheBounds.StartPos, _cacheBounds.EndPos, newCache);
      newCache.Sort(
        fun (a : SpanInfo, b : SpanInfo)
        {
          def startPos1 = a.Location.StartPos;
          def startPos2 = b.Location.StartPos;
          if (startPos1 < startPos2) -1
          else if (startPos1 > startPos2) +1
          else
          {
            def endPos1 = a.Location.EndPos;
            def endPos2 = b.Location.EndPos;
            if (endPos1 < endPos2) -1
            else if (endPos1 > endPos2) +1
            else 0
          }
        });
      newCache.ToArray()
    }

    private UpdateCacheIndex() : void
    {
      for(mutable i = 0; i < _cacheIndex.Length; ++i)
      {
        def index = _cache.Length * i / _cacheIndex.Length;
        _cacheIndex[i] = (_cache[index].Location.StartPos, index);
      }
    }

    private GetCacheBounds(span : SnapshotSpan) : NToken
    {
      def (startLineNumber, _) = span.Start.GetLineAndColumn();
      def endLineNumber        = Math.Min(startLineNumber + _linesToCache, span.Snapshot.LineCount) - 1;
      def startLine            = span.Snapshot.GetLineFromLineNumber(startLineNumber);
      def endLine              = span.Snapshot.GetLineFromLineNumber(endLineNumber);
      NToken(startLine.Start.Position, endLine.End.Position)
    }
  }
}
