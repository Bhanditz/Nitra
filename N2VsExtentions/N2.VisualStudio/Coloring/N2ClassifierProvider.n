using Microsoft.VisualStudio.Text.Adornments;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.ComponentModel.Composition;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Utilities;

namespace N2.VisualStudio.Coloring
{
  [Export(typeof(IClassifierProvider))]
  [ContentType("text")]
  internal sealed class N2ClassifierProvider : IClassifierProvider
  {
    /// The ClassificationTypeRegistryService is used to discover the types defined in ClassificationTypeDefinitions
    [Import]
    private ClassificationTypeRegistry : IClassificationTypeRegistryService { get; set; }

    [Import]
    private N2GlobalConfig : IN2GlobalConfig { get; set; }

    [Import]
    private ErrorProviderFactory : IErrorProviderFactory { get; set; }

    [Import]
    private DocumentFactory : ITextDocumentFactoryService { get; set; }

    public GetClassifier(buffer : ITextBuffer) : IClassifier
    {
      //buffer.Properties.GetOrCreateSingletonProperty<ParserRunner>(() => ParserRunner(buffer));

      match (N2GlobalConfig.GetLanguageForTextBuffer(buffer, ErrorProviderFactory, DocumentFactory))
      {
        | VSome(language) =>
          def classifier = N2Classifier(N2GlobalConfig, language, buffer, ClassificationTypeRegistry);
          buffer.Properties[TextBufferProperties.N2Classifier] = classifier;
          classifier

        | VNone           => null
      }
    }
  }
}
