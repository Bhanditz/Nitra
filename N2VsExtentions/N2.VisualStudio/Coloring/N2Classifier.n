using N2;
using N2.Internal;
using N2.Runtime;

using Nemerle;
using Nemerle.Late;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Classification;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace N2.VisualStudio.Coloring
{
  /// <summary>
  /// Implements the coloring classification.
  /// </summary>
  internal sealed class N2Classifier : IClassifier
  {
    private N2GlobalConfig              : IN2GlobalConfig { get; }
    public  Language                    : Language { get; }
    private _buffer                     : ITextBuffer;
    private _classificationTypeRegistry : IClassificationTypeRegistryService;
    
    public this(n2GlobalConfig : IN2GlobalConfig, language : Language, buffer : ITextBuffer, classificationTypeRegistry : IClassificationTypeRegistryService)
    {
      N2GlobalConfig              = n2GlobalConfig;
      Language                    = language;
      _buffer                     = buffer;
      _classificationTypeRegistry = classificationTypeRegistry;
      buffer.Changed += 
        fun(_, c)
        {
          OnClassificationChanged(SnapshotSpan(buffer.CurrentSnapshot, 0, buffer.CurrentSnapshot.Length));
          _ = c;
          //foreach (change in c.Changes)
          //{
          //  when (change.NewText.Contains("/") || change.NewText.Contains("*") || change.OldText.Contains("/") || change.OldText.Contains("*"))
          //  {
          //    OnClassificationChanged(SnapshotSpan(buffer.CurrentSnapshot, 0, buffer.CurrentSnapshot.Length));
          //    break;
          //  }
          //}
        };
    }

    #region IClassifier Members

    // Use this event if a text change causes classifications on a line other the one on which the line occurred.
    public event ClassificationChanged : EventHandler[ClassificationChangedEventArgs];

    #pragma warning disable 10003
    internal OnClassificationChanged(span : SnapshotSpan) : void
    {
      this.ClassificationChanged?.Invoke(this, ClassificationChangedEventArgs(span));
    }
    #pragma warning restore 10003

    //This is the main method of the classifier. It should return one ClassificationSpan per group that needs coloring.
    //It will be called with a span that spans a single line where the edit has been made (or multiple times in paste operations).
    public GetClassificationSpans(span : SnapshotSpan) : IList[ClassificationSpan]
    {
#if DEBUG
      // Debug staff
      def (startLine, startCol) = span.Snapshot.GetLineAndColumn(span.Start);
      def (endLine,   endCol)   = span.Snapshot.GetLineAndColumn(span.End);
      def text                  = span.GetText().TrimEnd('\r', '\n');
      //Diagnostics.Trace.WriteLine($"Classification ($startLine, $startCol, $endLine, $endCol): '$text'");
      ignore(text, startLine, startCol, endLine, endCol);
#endif

      def classificationSpans = List.[ClassificationSpan]();

      def classifier  = N2GlobalConfig.ClassificationTypeRegistryService;
      def key = typeof(Parser);
      unless (_buffer.Properties.ContainsProperty(key))
        return classificationSpans;

      def parseResult = _buffer.Properties.GetProperty(key) :> Parser;
      def spanInfos   = List.[N2.SpanInfo](span.Length / 10);
      def end         = span.End   : int;
      def start       = span.Start : int;

      when (parseResult == null)
        return classificationSpans;

      def timer = System.Diagnostics.Stopwatch.StartNew();

      parseResult.GetSpans(span.Start, span.End, spanInfos);

      timer.Stop();
      //Trace.WriteLineIf(timer.ElapsedMilliseconds > 0, $"ast.GetSpans(spanInfos=$(spanInfos.Count) span.Length=$(span.Length) took: " + timer.Elapsed);

      foreach (spanInfo in spanInfos)
      {
        def loc = spanInfo.Location;

        when (loc.StartPos >= end) break;
        when (loc.EndPos < start)  continue;

        def currentSpn = span.Overlap(Span(loc.StartPos, loc.EndPos - loc.StartPos));

        when (currentSpn.HasValue)
        {
          when (spanInfo.SpanClass == SpanClass.Default : object)
            continue;

          def classificationType = classifier.GetClassificationType(spanInfo.SpanClass.Name);

          if (classificationType != null)
          {
            def classificationSpan = ClassificationSpan(currentSpn.Value, classificationType);
            classificationSpans.Add(classificationSpan);
          }
          else
          {
          }
        }
      }


      //Create a parser to parse the regular expression, and return the classification spans defined by it.
      //foreach (nSpan in NSpans)
      //{
      //  classificationSpans.Add(ClassificationSpan(SnapshotSpan(span.Snapshot, nSpan.Start, nSpan.End - nSpan.Start), _classificationTypeRegistry.GetClassificationType(spanClassName)));
      //}

      classificationSpans
    }

    #endregion
  }
}
