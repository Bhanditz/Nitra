using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Classification;

namespace N2.VisualStudio.Coloring
{
    /// <summary>
    /// Implements the coloring classification.
    /// </summary>
    [Record]
    internal sealed class N2Classifier : IClassifier
    {
      private _buffer : ITextBuffer;
      private _classificationTypeRegistry : IClassificationTypeRegistryService;

      #region IClassifier Members

      // Use this event if a text change causes classifications on a line other the one on which the line occurred.
      public event ClassificationChanged : EventHandler[ClassificationChangedEventArgs];

      #pragma warning disable 10003
      internal OnClassificationChanged(span : SnapshotSpan) : void
      {
        this?.ClassificationChanged(this, ClassificationChangedEventArgs(span));
      }
      #pragma warning restore 10003

      //This is the main method of the classifier. It should return one ClassificationSpan per group that needs coloring.
      //It will be called with a span that spans a single line where the edit has been made (or multiple times in paste operations).
      public GetClassificationSpans(span : SnapshotSpan) : IList[ClassificationSpan]
      {
        _ = span;
        def classificationSpans = List.[ClassificationSpan]();
        
        Diagnostics.Debug.WriteLine(span.ToString());

        // Здесь реализум получение спэнов от парсера
          
        //Create a parser to parse the regular expression, and return the classification spans defined by it.
        //foreach (nSpan in NSpans)
        //{
        //  classificationSpans.Add(ClassificationSpan(SnapshotSpan(span.Snapshot, nSpan.Start, nSpan.End - nSpan.Start), _classificationTypeRegistry.GetClassificationType(spanClassName)));
        //}

        classificationSpans;
      }

      #endregion
    }
  }
