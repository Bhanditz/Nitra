using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Text.Formatting;
using System.ComponentModel.Composition;
using Microsoft.VisualStudio.Utilities;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Reflection;
using System.Windows.Media;
using System.Xml.Linq;

using GdiColor = System.Drawing.Color;

namespace N2.VisualStudio
{
  public interface IN2GlobalConfig
  {
    Languages : list[Language] { get; }
    Property[name : string] : string { get; }
    GetLanguageByExtension(extension : string) : ValueOption[Language];
    ApplySpanClassStyles(formatMap : IClassificationFormatMap, classificationTypeRegistryService : IClassificationTypeRegistryService) : void;
  }

  [Export(typeof(IN2GlobalConfig))]
  public class N2GlobalConfig : IN2GlobalConfig
  {
    public Languages : list[Language] { get; }

    static _expandPropertyRegex         : Regex                       = Regex(@"\$(\w(\w|\d)*)", RegexOptions.Compiled);
    _properties                         : Hashtable[string, string]   = Hashtable();
    _languageMap                        : Hashtable[string, Language] = Hashtable();
    _fileExtensionRegistryService       : IFileExtensionRegistryService;
    _contentTypeRegistryService         : IContentTypeRegistryService;
    _spanClassStyleBuilders             : Hashtable[string, TextFormattingRunProperties -> TextFormattingRunProperties] = Hashtable();
    public ConfigPath                   : string { get; }

    [ImportingConstructor]
    public this(
      contentTypeRegistryService        : IContentTypeRegistryService,
      fileExtensionRegistryService      : IFileExtensionRegistryService
      )
    {
      #region read config

      def n2ConfigName = "N2GlobalConfig.xml";
      def root         = Environment.GetEnvironmentVariable("N2Path");

      _fileExtensionRegistryService      = fileExtensionRegistryService;
      _contentTypeRegistryService        = contentTypeRegistryService;

      when (root == null)
        Error(@"You must specify path to N2 root directory in the 'N2Path' environment variable. For example: N2Path=d:\ParserGenerator");
      when (!Directory.Exists(root))
        Error(@"Path specified in the 'N2Path' environment variable not exists. You must specify path to N2 root directory in the 'N2Path' environment variable. For example: N2Path=d:\ParserGenerator");

      _properties["N2Path"]        = root.TrimEnd('\\');
      _properties["Configuration"] = Constants.Configuration;

      ConfigPath   = Path.Combine(root, n2ConfigName);
      def config   = XElement.Load(ConfigPath);

      #endregion

      // Init Properties
      foreach (prop in config.Element("Properties")?.Elements() ?? [])
        _properties[prop.Name.LocalName] = prop.Value ?? "";


      #region Init Languages

      foreach (lang in config.Element("Languages")?.Elements("Language") ?? [])
      {
        def name           = lang.Attribute("Name").Value;
        def oldContentType = contentTypeRegistryService.GetContentType(name);
        def fileExtentions = lang.Attribute("FileExtentions")?.Value?.SplitToList(';').RevMap(s => s.Trim().ToLowerInvariant());

        when (oldContentType != null) // remove if exists
        {
          foreach (extension in List(fileExtensionRegistryService.GetExtensionsForContentType(oldContentType)))
            fileExtensionRegistryService.RemoveFileExtension(extension);

          contentTypeRegistryService.RemoveContentType(name);
        }

        def contentType = contentTypeRegistryService.AddContentType(name, ["code"]);

        def language =
          Language(name, contentType, fileExtentions,
            grammar   = lang.Attribute("Grammar").Value,
            startRule = lang.Attribute("StartRule").Value,
            modules   = (lang.Elements("Module") ?? []).Map(e => ExpandProperty(e.Value)));

        foreach (ext in fileExtentions)
        {
          _languageMap[ext] = language;
          try
            fileExtensionRegistryService.AddFileExtension(ext, contentType);
          catch
          { e is InvalidOperationException =>
            assert2(false, e.Message)
          }
        }

        Languages ::= language;
      }

      #endregion

      #region Read SpanClasses

      foreach (spanClass in config.Element("SpanClasses")?.Elements() ?? [])
      {
        def name = spanClass.Name.LocalName;
        def foreground = spanClass.Attribute("Foreground")?.Value;
        _spanClassStyleBuilders[name] = fun(mutable properties)
        {
          when (foreground != null)
          {
            def foreColor = GdiColor.FromName(foreground);
            properties = properties.SetForeground(Color.FromRgb(foreColor.R, foreColor.G, foreColor.B));
          }
          properties
        };
      }

      #endregion
    }

    public ApplySpanClassStyles(formatMap : IClassificationFormatMap, classificationTypeRegistryService : IClassificationTypeRegistryService) : void
    {
      def formalLanguageClassificationType = classificationTypeRegistryService.GetClassificationType("formal language");
      formatMap.BeginBatchUpdate();
      try
        foreach (kv with (name = kv.Key, builder = kv.Value) in _spanClassStyleBuilders)
        {
          def classificationType = classificationTypeRegistryService.GetClassificationType(name);
          when (classificationType == null)
          {
            def newClassificationType = classificationTypeRegistryService.CreateClassificationType(name, [formalLanguageClassificationType]);
            def newProperties = builder(formatMap.GetTextProperties(newClassificationType));
            formatMap.SetTextProperties(newClassificationType, newProperties);
          }
        }
      finally formatMap.EndBatchUpdate();
    }

    public GetLanguageByExtension(extension : string) : ValueOption[Language]
    {
      mutable language;

      if (_languageMap.TryGetValue(extension.ToLowerInvariant(), out language))
        VSome(language)
      else
        VNone()
    }

    public Property[name : string] : string { get { ExpandProperty(_properties[name]) } }

    ExpandProperty(value : string) : string
    {
      mutable currentProperty;
      def getPropertyName(m)
      {
        currentProperty = m.Groups[1].Value;
        currentProperty
      }
      try
      {
        if (value.Contains("$"))
          ExpandProperty(_expandPropertyRegex.Replace(value, m => _properties[getPropertyName(m)]));
        else
          value
      }
      catch
      {
        | _ is KeyNotFoundException => Error($"Configuration loading failed.\r\nProperty '$currentProperty' not defined in '$ConfigPath'."); throw;
      }
    }

    Error(msg : string) : void
    {
      N2Package.Instance.ShowMessage(msg, MessageType.Error);
      throw ApplicationException(msg);
    }
  }
}
