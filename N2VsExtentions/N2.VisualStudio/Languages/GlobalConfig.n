using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Text.Formatting;
using System.ComponentModel.Composition;
using Microsoft.VisualStudio.Utilities;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Reflection;
using System.Windows.Media;
using System.Xml.Linq;

using GdiColor = System.Drawing.Color;

namespace N2.VisualStudio
{
  public interface IN2GlobalConfig
  {
    Languages : list[Language] { get; }
    Property[name : string] : string { get; }
    GetLanguageByExtension(extension : string) : ValueOption[Language];
    ClassificationTypeRegistryService : IClassificationTypeRegistryService { get; };
  }
  
  [Export(typeof(IN2GlobalConfig))]
  public class N2GlobalConfig : IN2GlobalConfig
  {
    public Languages : list[Language] { get; }
    
    _properties                         : Hashtable[string, string]   = Hashtable();
    _expendRx                           : Regex                       = Regex(@"\$(\w(\w|\d)*)", RegexOptions.Compiled);
    _languageMap                        : Hashtable[string, Language] = Hashtable();
    _fileExtensionRegistryService       : IFileExtensionRegistryService;
    _contentTypeRegistryService         : IContentTypeRegistryService;
    public ClassificationTypeRegistryService : IClassificationTypeRegistryService { get; }
    
    [ImportingConstructor]
    this(
      contentTypeRegistryService        : IContentTypeRegistryService, 
      fileExtensionRegistryService      : IFileExtensionRegistryService, 
      classificationTypeRegistryService : IClassificationTypeRegistryService, 
      classificationFormatMapService    : IClassificationFormatMapService)
    {
      def n2ConfigName = "N2GlobalConfig.xml";
      def root         = Environment.GetEnvironmentVariable("N2Path");
    
      ClassificationTypeRegistryService  = classificationTypeRegistryService;
      _fileExtensionRegistryService      = fileExtensionRegistryService;
      _contentTypeRegistryService        = contentTypeRegistryService;
      
      when (root == null || !Directory.Exists(root))
        throw ApplicationException("The 'N2Path' environment variable not set. The N2 environment variable must contains path to N2GlobalConfig.xml.");
        
      _properties["N2Path"] = root.TrimEnd('\\');
      
      def configPath   = Path.Combine(root, n2ConfigName);
      def config       = XElement.Load(configPath);
      
      // Init Properties 
      foreach (prop in config.Element("Properties")?.Elements() ?? [])
        _properties[prop.Name.LocalName] = prop.Value ?? "";
        
      // Init Languages
      foreach (lang in config.Element("Languages")?.Elements("Language") ?? [])
      {
        def name           = lang.Attribute("Name").Value;
        def oldContentType = contentTypeRegistryService.GetContentType(name);
        def fileExtentions = lang.Attribute("FileExtentions")?.Value?.SplitToList(';').RevMap(s => s.Trim().ToLowerInvariant());
        
        when (oldContentType != null) // remove if exists
        {
          foreach (extension in List(fileExtensionRegistryService.GetExtensionsForContentType(oldContentType)))
            fileExtensionRegistryService.RemoveFileExtension(extension);
            
          contentTypeRegistryService.RemoveContentType(name);
        }
        
        def contentType = contentTypeRegistryService.AddContentType(name, ["code"]);

        def language = 
          Language(name, contentType, fileExtentions,
            grammar   = lang.Attribute("Grammar").Value,
            startRule = lang.Attribute("StartRule").Value,
            modules   = (lang.Elements("Module") ?? []).Map(e => Expend(e.Value)));
            
        foreach (ext in fileExtentions)
        {
          _languageMap[ext] = language;
          fileExtensionRegistryService.AddFileExtension(ext, contentType);
        }
        
        Languages ::= language;
        
        // Read SpanClasses
        def formatMap = classificationFormatMapService.GetClassificationFormatMap("Text Editor");
        formatMap.BeginBatchUpdate();
        
        foreach (spanClass in config.Element("SpanClasses")?.Elements() ?? [])
        {
          def name = spanClass.Name.LocalName;
          def classificationType = classificationTypeRegistryService.GetClassificationType(name);
          
          when (classificationType == null)
          {
            def newClassificationType = classificationTypeRegistryService.CreateClassificationType(name, []);
            def foreground = spanClass.Attribute("Foreground")?.Value;
            
            when (foreground != null)
            {
              def prop = formatMap.GetTextProperties(newClassificationType);
              def foreColor = GdiColor.FromName(foreground);
              def newProp = prop.SetForeground(Color.FromRgb(foreColor.R, foreColor.G, foreColor.B));
              formatMap.AddExplicitTextProperties(newClassificationType, newProp);
            }
          }
        }
        
        formatMap.EndBatchUpdate();
      }
    }
    
    public GetLanguageByExtension(extension : string) : ValueOption[Language]
    {
      mutable language;
      
      if (_languageMap.TryGetValue(extension.ToLowerInvariant(), out language))
        VSome(language)
      else
        VNone()
    }
    
    public Property[name : string] : string { get { Expend(_properties[name]) } }
    
    Expend(value : string) : string
    {
      if (value.Contains("$"))
        Expend(_expendRx.Replace(value, m => _properties[m.Groups[1].Value]));
      else
        value
    }
  }
}
