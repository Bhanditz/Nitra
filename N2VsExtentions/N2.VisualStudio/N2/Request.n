using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace N2.VisualStudio.Async
{
  public variant Request
  {
    | Parse { Value : string; }
    
    public this(cancellationTokenSource : CancellationTokenSource = null)
    {
      this.CancellationTokenSource = cancellationTokenSource ?? CancellationTokenSource();
    }
    
    public  CancellationTokenSource  : CancellationTokenSource; 
    public  IsStoped                 : bool { get { this.CancellationTokenSource.IsCancellationRequested } }
    
    public Stop() : void
    {
      CancellationTokenSource.Cancel();
    }
    
    public DoWork() : void {  }
    
    /// Возвращает true, если данная задача теряет смысл если "other" помещается в 
    // очередь после данной.
    public virtual IsForceOutBy(other : Request) : bool
    {
      _ = other;
      false
      //if (object.ReferenceEquals(this, other))
      //  false;
      //else if (other.Engine : object != this.Engine)
      //  false
      //else if (other.Type == AsyncRequestType.CloseProject)
      //  true
      //else match (Type)
      //{
      //  | AsyncRequestType.UpdateCompileUnit => 
      //    other.Type == AsyncRequestType.BuildTypesTree
      //    || other.Type == AsyncRequestType.UpdateCompileUnit && other.Source : object == Source
      //
      //  | AsyncRequestType.BuildTypesTree    => other.Type == AsyncRequestType.BuildTypesTree
      //  | _ => false
      //}
    }
    
  }
}
