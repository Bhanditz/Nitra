using N2.Internal;
using N2.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Tagging;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace N2.VisualStudio.Outlining
{
  public class OutliningTagger : ITagger[IOutliningRegionTag]
  {
    public                   Language       : Language        { get _parseAgent.Language }
    private                  _parseAgent    : ParseAgent;
    private                  _buffer        : ITextBuffer;
    private mutable volatile _outlinings    : List[OutliningInfo];
    private mutable volatile _snapshot      : ITextSnapshot;

    public this(parseAgent : ParseAgent, buffer : ITextBuffer)
    {
      _parseAgent    = parseAgent;
      _buffer        = buffer;
      _snapshot      = buffer.CurrentSnapshot;

      def parseResult = _parseAgent.LastResult;
      when (parseResult != null)
        _outlinings = GetOutlinings(parseResult);

      _parseAgent.ParseComplete += fun (_, args)
      {
        _outlinings = GetOutlinings(args.Result);
        _snapshot   = args.Snapshot;
        TagsChanged?.Invoke(this, SnapshotSpanEventArgs(SnapshotSpan(args.Snapshot, 0, args.Snapshot.Length)));
      };
      _parseAgent.ParseFailed += fun (_, args)
      {
        _outlinings = null;
        _snapshot   = args.Snapshot;
        TagsChanged?.Invoke(this, SnapshotSpanEventArgs(SnapshotSpan(args.Snapshot, 0, args.Snapshot.Length)));
      };
    }

    public event TagsChanged : EventHandler[SnapshotSpanEventArgs];

    public GetTags(_spans : NormalizedSnapshotSpanCollection) : Seq[ITagSpan[IOutliningRegionTag]]
    {
      def outlinings = _outlinings;
      def snapshot   = _snapshot;
      if (outlinings != null)
      {
        def result = List();
        foreach (o in outlinings)
        {
          def span = o.Span;
          def currentSpn = SnapshotSpan(snapshot, span.StartPos, span.Length);
          result.Add(TagSpan(currentSpn, OutliningRegionTag(o.IsDefaultCollapsed, o.IsImplementation, null, null)));
        }
        result
      }
      else Enumerable.Empty()
    }

    private GetOutlinings(parseResult : Parser) : List[OutliningInfo]
    {
      def outlinings = List();
      parseResult.GetOutlining(outlinings);
      outlinings
    }
  }
}
