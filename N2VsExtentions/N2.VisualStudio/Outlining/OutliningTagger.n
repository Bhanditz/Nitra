using N2.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Tagging;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.VisualStudio.Outlining
{
  [Record]
  public class OutliningTagger : ITagger[IOutliningRegionTag]
  {
    private N2GlobalConfig : IN2GlobalConfig { get; }
    public Language : Language { get; }
    private _buffer      : ITextBuffer;
 
    public event TagsChanged : EventHandler[SnapshotSpanEventArgs];
     
    public GetTags(_spans : NormalizedSnapshotSpanCollection) : Seq[ITagSpan[IOutliningRegionTag]]
    {
      def parseResult = _buffer.Properties.GetProperty(typeof(Parser)) :> Parser;
      
      if (parseResult != null)
      {
        def outlinings = List();
        parseResult.GetOutlining(outlinings);
        
        def result = List();
        
        foreach (o in outlinings)
        {
          def span = o.Span;
          def currentSpn = SnapshotSpan(_buffer.CurrentSnapshot, span.StartPos, span.EndPos - span.StartPos);
          result.Add(TagSpan(currentSpn, OutliningRegionTag(o.IsDefaultCollapsed, o.IsImplementation, null, null)));
        }
        
        result
      }
      else
        array(0)
    }
  }
}
  
