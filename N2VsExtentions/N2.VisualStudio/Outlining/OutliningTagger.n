using N2.Internal;
using N2.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Tagging;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.VisualStudio.Outlining
{
  public class OutliningTagger : ITagger[IOutliningRegionTag]
  {
    private N2GlobalConfig      : IN2GlobalConfig { get; }
    public  Language            : Language        { get _parseAgent.Language }
    private _parseAgent         : ParseAgent;
    private _buffer             : ITextBuffer;

    public this(n2GlobalConfig : IN2GlobalConfig, parseAgent : ParseAgent, buffer : ITextBuffer)
    {
      N2GlobalConfig = n2GlobalConfig;
      _parseAgent    = parseAgent;
      _buffer        = buffer;
    }

    public event TagsChanged : EventHandler[SnapshotSpanEventArgs];

    public GetTags(_spans : NormalizedSnapshotSpanCollection) : Seq[ITagSpan[IOutliningRegionTag]]
    {
      def parseResult = _parseAgent.LastResult;
      if (parseResult != null)
      {
        def outlinings = List();
        parseResult.GetOutlining(outlinings);
        def result = List();
        foreach (o in outlinings)
        {
          def span = o.Span;
          def currentSpn = SnapshotSpan(_buffer.CurrentSnapshot, span.StartPos, span.EndPos - span.StartPos);
          result.Add(TagSpan(currentSpn, OutliningRegionTag(o.IsDefaultCollapsed, o.IsImplementation, null, null)));
        }
        result
      }
      else
        array(0)
    }
  }
}

