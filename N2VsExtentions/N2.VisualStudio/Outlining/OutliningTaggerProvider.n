using N2.VisualStudio.Parsing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Adornments;
using Microsoft.VisualStudio.Text.Editor;
using Microsoft.VisualStudio.Text.Tagging;
using Microsoft.VisualStudio.Utilities;

namespace N2.VisualStudio.Outlining
{
  [Export(typeof(ITaggerProvider))]
  [ContentType("text")]
  [TagType(typeof(IOutliningRegionTag))]
  internal sealed class OutliningTaggerProvider : ITaggerProvider
  {
    [Import]
    private N2GlobalConfig : IN2GlobalConfig { get; set; }

    public CreateTagger[T](buffer : ITextBuffer) : ITagger[T]
      where T : ITag
    {
      if (buffer.Properties.ContainsProperty(TextBufferProperties.OutliningTagger))
        buffer.Properties[TextBufferProperties.OutliningTagger] :> ITagger[T]
      else if (buffer.Properties.ContainsProperty(TextBufferProperties.ParseAgent))
      {
        def parseAgent = buffer.Properties[TextBufferProperties.ParseAgent] :> ParseAgent;
        def outliningTagger = OutliningTagger(N2GlobalConfig, parseAgent, buffer);
        buffer.Properties.AddProperty(TextBufferProperties.OutliningTagger, outliningTagger);
        outliningTagger :> ITagger[T]
      }
      else null
    }
  }
}
