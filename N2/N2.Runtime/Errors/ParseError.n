using N2.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace N2
{
  public class ParseError : Error
  {
    protected _recoveries : array[RecoveryStackFrame];

    public this(location : Location, recoveries : array[RecoveryStackFrame])
    {
      //assert(recoveries.Length > 0);
      base(location);
      _recoveries = recoveries;
    }
    
    public Recoveries : ReadOnlyCollection[RecoveryStackFrame]
    {
      [Memoize] get { ReadOnlyCollection(_recoveries) }
    }

    public override Message : string
    {
      [Memoize]
      get
      {
        def expected = List();
        foreach (frame when frame.Children.Count(c => c.Best) == 0 in _recoveries)
        {
          def state = frame.FailState;
          expected.Add(frame.CodeForState(state));
        }
        def msg = $"Expected: ..$(expected.Distinct()).";
        msg
      }
    }

    public DebugText : string
    {
      [Memoize]
      get
      {
        $<#..$(_recoveries.Filter(f => !f.Children.Any(c => c.Best)); "\n")#>
      }
    }
  }
}
