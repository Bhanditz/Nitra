using N2.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2
{
  public class ParseError : Error
  {
    protected _recoveries : array[RecoveryResult];

    public this(location : Location, recoveries : array[RecoveryResult])
    {
      assert(recoveries.Length > 0);
      base(location);
      _recoveries = recoveries;
    }

    public override Message : string
    {
      [Memoize]
      get
      {
        def expected = List();
        foreach (item in _recoveries)
        {
          def frame = item.Stack.Head;
          def state = frame.FailState;
          expected.Add(frame.RuleParser.CodeForState(state));
        }
        def msg = $"Expected: ..$(expected.Distinct()).";
        msg
      }
    }

    public DebugText : string
    {
      [Memoize]
      get
      {
        def recovery = _recoveries[0];
        def sep = "\r\n    ";
        def recovered =
          if (recovery.RecoveredCount > 300) 
            try recovery.Text.Substring(recovery.StartPos, 300) + "..." catch "<unknown>"
          else
          recovery.Recovered;
          
        $"StartState: $(recovery.StartState)\r\nStack:\r\n    ..$(recovery.Stack; sep)\r\nSkiped: «$(recovery.Skiped)»\r\nRecovered: «$recovered»"
      }
    }
  }
}
