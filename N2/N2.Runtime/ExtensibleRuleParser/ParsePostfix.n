using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;

using System;
using System.Collections.Generic;

namespace N2.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public BestPostfix(mutable bestResult : int, parser : Parser) : int
    {
      // пропускаем правила с низкой силой связывания.
      while (bestResult > 0 && (parser.ast[bestResult] & PostfixMask.Id) < FirstPostfixRuleId)
        bestResult = parser.ast[bestResult + AstOfs.Next];
      // ищем лучшее правило среди тех у кого подходящая сила связывания.
      while (bestResult > 0 && (parser.ast[bestResult] & PostfixMask.Mark) != PostfixMark.Best)
        bestResult = parser.ast[bestResult + AstOfs.Next];
      bestResult;
    }

    public ParsePostfix(mutable curTextPos : int, text : string, parser : Parser) : int
    {
      unchecked
      {
        mutable postfixAst;
        mutable newEndPos;
        mutable newResult;
        mutable bestEndPos= curTextPos;
        mutable bestResult= 0;
        mutable lastResult= 0;
        mutable i;
        mutable c; // временная переменная для отсечения правил по первой букве

        when (curTextPos >= text.Length) // постфиксное правило которое не съело ни одного символа игнорируется
          return curTextPos;// при достижении конца текста есть нечего
        //ищем запомненое
        postfixAst = parser.TryGetAst(curTextPos, PostfixId);
        when (postfixAst > 0)
        {
          def maxFailPos = parser.ast[postfixAst + PostfixOfs.MaxFailPos];
          when (parser.MaxFailPos < maxFailPos)
            parser.MaxFailPos = maxFailPos;
          lastResult = parser.TryGetPostfix(ref curTextPos, ref postfixAst);//список разобраных с этого места правил
          bestResult = lastResult;
          i = parser.ast[postfixAst + PostfixOfs.FirstRuleIndex] - 1;//индекс первого не разобранного правила
          if (i >= FirstPostfixRule)// не всё разобрано
          {
            bestResult = BestPostfix(bestResult, parser);
            if (bestResult > 0 && parser.ast[bestResult + AstOfs.State] == Parser.AstParsedState)//Убеждаемся что разбор успешный
              bestEndPos = curTextPos + GetPostfixSize(bestResult, parser);
            else
              bestEndPos = -1;
            goto postfix_parse;//парсим то что не распарсили раньше
          }
          else
          {
            bestResult = BestPostfix(bestResult, parser);
            if (bestResult > 0)
            {
              def state = parser.ast[bestResult + AstOfs.State];
              if (state == Parser.AstParsedState)//Убеждаемся что разбор успешный
                return curTextPos + GetPostfixSize(bestResult, parser);
              else if (state < 0)
              {
                parser.ast[bestResult + PostfixOfs.Next] = 0;//FIXME. обработать неоднозначности.
                def postfixRule = PostfixRuleParser(bestResult, parser);
                newResult = bestResult;
                return postfixRule.Parse(curTextPos, text, ref newResult, parser);
              }
              else
                return curTextPos;//облом. Заканчиваем разбор.
            }
            else
              return curTextPos;//облом. Заканчиваем разбор.
          }
        }
        //нет мемоизации
        postfixAst = parser.Allocate(PostfixOfs.NodeSize, PostfixId);
        parser.ast[postfixAst + PostfixOfs.Next] = parser.memoize[curTextPos];
        parser.memoize[curTextPos] = postfixAst;
        bestResult = 0;
        lastResult = 0;
        i = PostfixRules.Length - 1;
      label postfix_parse;
        parser.ast[postfixAst + PostfixOfs.FirstRuleIndex] = FirstPostfixRule;
        c = text[curTextPos];
        for (; i >= FirstPostfixRule; --i)
        {
          def postfixRule = PostfixRules[i];
          when (postfixRule.LowerBound <= c && c <= postfixRule.UpperBound)
          {
            newResult = -1;
            newEndPos = postfixRule.Parse(curTextPos, text, ref newResult, parser);
            when (newResult > 0)//АСТ создано
            {
              parser.ast[newResult + AstOfs.Next] = lastResult; lastResult = newResult;//добавляем в список
              //определяем является ли даный АСТ лучшим из тех что разобрали
              if (bestResult > 0)
              {
                if (bestEndPos < 0) if   (newEndPos >= 0) goto postfix_new_better; else goto postfix_equal;
                else                when (newEndPos < 0)  goto postfix_best_better;

                def newTokens  = parser.TokenEnumerator1.Start(newResult,  curTextPos);
                def bestTokens = parser.TokenEnumerator2.Start(bestResult, curTextPos);

                while (true)
                {
                  def newSize = newTokens.NextTokenSize();
                  def bestSize = bestTokens.NextTokenSize();
                  when (newSize > bestSize) goto postfix_new_better;
                  when (newSize < bestSize) goto postfix_best_better;
                  when (newSize < 0)        goto postfix_equal;
                }
              }
              else
                goto postfix_new_better;
            label postfix_equal;//АСТ равен лучшему. Неоднозначность.
              parser.ast[newResult] = parser.ast[newResult] | PostfixMark.Equal;
              assert(bestEndPos == newEndPos);
              continue;
            label postfix_new_better;//Новый АСТ лучше
              bestEndPos = newEndPos;
              bestResult = newResult;
              parser.ast[newResult] = parser.ast[newResult] | PostfixMark.Best;
              continue;
            label postfix_best_better;
              continue;
            }
          }
        }

        parser.ast[postfixAst + PostfixOfs.List] = lastResult;
        parser.ast[postfixAst + PostfixOfs.MaxFailPos] = parser.MaxFailPos;

        when (bestEndPos <= curTextPos)
          return curTextPos;
        bestEndPos;
      }
    }
  }
}
