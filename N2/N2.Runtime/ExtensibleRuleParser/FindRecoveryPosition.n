using Nemerle.Imperative;

namespace N2.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public override FindRecoveryPosition(mutable curTextPos : int, parser : N2.Internal.Parser) : void
    {
      mutable bestResult = 0;
      mutable prefixAst = parser.TryGetAst(curTextPos, PrefixId);
      when (prefixAst > 0)
      {
        bestResult = parser.TryGetPrefix(ref curTextPos, prefixAst);
        if (bestResult > 0)
        {
          def state = parser.ast[bestResult + AstOfs.State];
          if (state == Parser.AstParsedState)
            return;
          else assert (state >= 0);
        }
        else when (bestResult < 0)
          return;
      }
      parser.RecoveryStack.Push(RecoveryStackFrame(this, prefixAst, curTextPos, PrefixState, 0, 0, 0, false, FrameInfo.None));
      if (bestResult == 0)
      {//0
        if (parser.MaxFailPos == curTextPos)
          parser.StartRecovery(curTextPos);
        else
        {
          foreach (prefixRule in PrefixRules)
          {
            _ = prefixRule.FindRecoveryPosition(curTextPos, bestResult, parser);
            when (parser.ParsingMode == N2.Internal.ParsingMode.EndRecovery)
              break;
          }
        }
      }
      else if (parser.ast[bestResult + AstOfs.Next] == 0)
      {//1
        def prefixRule = PrefixRules[parser.ast[bestResult + N2.Internal.ExtensibleRuleParser.AstOfs.Id] - PrefixOffset];
        prefixRule.FindRecoveryPosition(curTextPos, bestResult, parser);
      }
      else
      {//many
        assert2(false);
        assert(false);
      }
      when (parser.ParsingMode != N2.Internal.ParsingMode.EndRecovery)
        _ = parser.RecoveryStack.Pop();
    }
  }
}
