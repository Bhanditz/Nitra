using N2.Runtime.Internal;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Runtime.Reflection;

namespace N2.Internal
{
  public sealed partial class ExtensibleRuleParser : StartRuleParser, IRecoveryRuleParser
  {
    public GetParsers() : array[IRecoveryRuleParser]
    {
      (PrefixRules : object) :> array[IRecoveryRuleParser]
    }

    public override Code           : string { get { Descriptor.Name } }
    public override CodeWithStates : string { get Descriptor.Name }
    public override RuleName       : string { get Descriptor.Name }
    public override CodeForState(_state : int) : string { Descriptor.Name }
    public override CodeForStates(startState : int, endState : int, skipOptionalStates : bool) : array[string]
    {
      assert3(startState == 0 || startState == 1);
      assert3(endState == 0 || endState == 1 || endState == -1);
      
      if (startState == 1)
        if (skipOptionalStates)
          array(0)
        else
          array["<" + Descriptor.Name + "*>"]
      else
        array[Descriptor.Name]
    }

    public PrefixRuleParser(ptr : int, parser : Parser) : ExtentionRuleParser
    {
      PrefixRules[(parser.ast[ptr + PrefixOfs.Id] & AstMask.Id) - PrefixOffset]
    }

    public PostfixRuleParser(ptr : int, parser : Parser) : ExtentionRuleParser
    {
      PostfixRules[(parser.ast[ptr + PostfixOfs.Id] & AstMask.Id) - PostfixOffset]
    }

    public GetPrefixSize(bestResult : int, parser : Parser) : int
    {
      assert(parser.ast[bestResult + AstOfs.State] == Parser.AstParsedState);
      mutable size = 0;
      mutable i = bestResult + AstOfs.Sizes;
      mutable end = i + PrefixRuleParser(bestResult, parser).FieldsCount;
      for (; i < end; ++i)
        size += parser.GetSize(i);
      size;
    }

    public GetPostfixSize(bestResult : int, parser : Parser) : int
    {
      assert(parser.ast[bestResult + AstOfs.State] == Parser.AstParsedState);
      mutable size = 0;
      mutable i = bestResult + AstOfs.Sizes;
      mutable end = i + PostfixRuleParser(bestResult, parser).FieldsCount;
      for (; i < end; ++i)
        size += parser.GetSize(i);
      size;
    }

    public override GetLoopBodyForSeparator(separatorId : int, bodyId : out int, firstState : out int) : bool
    {
      IgnoreParams();
      bodyId = 0;
      firstState = 0;
      false
    }

    public override IsStateCanParseEmptyString(state : int) : bool { state != 0 }
    public override IsVoidState         (state : int) : bool { IgnoreParams(); false }
    public override IsStartState        (state : int) : bool { state == 0 }
    public override GetStartState       (state : int) : int  { IgnoreParams(); 0 }
    public override IsLoopSeparatorStart(state : int) : bool { IgnoreParams(); false }
    public override IsLoopSeparator     (state : int) : bool { IgnoreParams(); false }
    public override IsLoopBody          (state : int) : bool { IgnoreParams(); false }

    public override IsTokenRule : bool { get { Descriptor.IsTokenRule } }

    public override PatchAst(_startPos : int, startState : int, errorIndex : int, frame : RecoveryStackFrame, parser : N2.Internal.Parser) : bool
    {
      match (frame)
      {
        | Extensible =>
          assert3(startState == -2);
          true;

        | ExtensiblePrefix  as frame =>//TODO: убрать копипасту
          when (frame.AstHandle.AstPtr <= 0)
          {
            assert3(parser.TryGetAst(frame.AstHandle.TextPos, PrefixId) == 0);
            frame.AstHandle.AstPtr = parser.Allocate(PrefixOfs.NodeSize, PrefixId);
            parser.ast[frame.AstHandle.AstPtr + PrefixOfs.Next] = parser.memoize[frame.AstHandle.TextPos];
            parser.memoize[frame.AstHandle.TextPos] = frame.AstHandle.AstPtr;
          }
          if (startState == -2)
          {
            def children = frame.AstHandle.Children;
            mutable state = ExtentionRuleParserState();
            state.bestEndPos = -1;
            state.bestResult = 0;
            state.lastResult = 0;
            state.parser = parser;
            state.curTextPos = frame.AstHandle.TextPos;

            for (mutable i = children.Count - 1; i >= 0; --i)
            {
              def child = children[i];
              child.UpdateAstPtr(parser);
              when (child.AstPtr <= 0)
                continue;
              state.newResult = child.AstPtr;
              def astState = parser.ast[state.newResult + AstOfs.State];
              if (astState == Parser.AstParsedState)
                state.newEndPos = state.curTextPos + GetPrefixSize(state.newResult, parser);
              else if (astState < 0)
                assert3(false)
              else
                state.newEndPos = -1;
              state.Append();
            }
            if (parser.ast[frame.AstHandle.AstPtr + PrefixOfs.List] != 0)
              assert3(parser.ast[frame.AstHandle.AstPtr + PrefixOfs.List] == state.lastResult);
            else
              parser.ast[frame.AstHandle.AstPtr + PrefixOfs.List] = state.lastResult;
            state.bestEndPos >= 0;
          }
          else
          {
            assert3(parser.ast[frame.AstHandle.AstPtr + PrefixOfs.List] == 0);
            parser.ast[frame.AstHandle.AstPtr + PrefixOfs.List] = ~errorIndex;
            true;
          }

        | ExtensiblePostfix as frame =>
          when (frame.AstHandle.AstPtr <= 0)
          {
            assert3(parser.TryGetAst(frame.AstHandle.TextPos, PostfixId) == 0);
            frame.AstHandle.AstPtr = parser.Allocate(PostfixOfs.NodeSize, PostfixId);
            parser.ast[frame.AstHandle.AstPtr + PostfixOfs.Next] = parser.memoize[frame.AstHandle.TextPos];
            parser.memoize[frame.AstHandle.TextPos] = frame.AstHandle.AstPtr;
          }
          if (startState == -2)
          {
            def children = frame.AstHandle.Children;
            mutable state = ExtentionRuleParserState();
            state.bestEndPos = -1;
            state.bestResult = 0;
            state.lastResult = 0;
            state.parser = parser;
            state.curTextPos = frame.AstHandle.TextPos;

            for (mutable i = children.Count - 1; i >= 0; --i)
            {
              def child = children[i];
              child.UpdateAstPtr(parser);
              when (child.AstPtr <= 0)
                continue;
              state.newResult = child.AstPtr;
              def astState = parser.ast[state.newResult + AstOfs.State];
              if (astState == Parser.AstParsedState)
                state.newEndPos = state.curTextPos + GetPostfixSize(state.newResult, parser);
              else if (astState < 0)
                assert3(false)
              else
                state.newEndPos = -1;
              state.Append();
            }
            if (parser.ast[frame.AstHandle.AstPtr + PostfixOfs.List] != 0)
              assert3(parser.ast[frame.AstHandle.AstPtr + PostfixOfs.List] == state.lastResult);
            else
              parser.ast[frame.AstHandle.AstPtr + PostfixOfs.List] = state.lastResult;
            state.bestEndPos >= 0;
          }
          else
          {
            assert3(parser.ast[frame.AstHandle.AstPtr + PostfixOfs.List] == 0);
            parser.ast[frame.AstHandle.AstPtr + PostfixOfs.List] = ~errorIndex;
            true
          }
        | _ => assert3(false);
      }
    }

    public override GetRuleParserForState(state : int) : IRecoveryRuleParser * int
    {
      IgnoreParams(); assert(false, "Not supported.");
    }

    public override GetNextState(state : int) : int
    {
      match (state)
      {
        | 0 =>  1
        | 1 => -1
        | _ => assert(false)
      }
    }

    public override StartState : int { get { 0 } }
    public override GetOffsetForState(state : int) : int { IgnoreParams(); assert3(false); }
  }
}
