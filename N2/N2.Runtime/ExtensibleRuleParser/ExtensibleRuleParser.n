using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Runtime.Reflection;

namespace N2.Internal
{
  public sealed partial class ExtensibleRuleParser : StartRuleParser, IRecoveryRuleParser
  {
    public GetParsers() : array[IRecoveryRuleParser]
    {
      PrefixRules.MapToArray(_ :> IRecoveryRuleParser)
    }

    public Code           : string { get { Descriptor.Name } }
    public CodeWithStates : string { get Descriptor.Name }
    public RuleName       : string { get Descriptor.Name }
    public CodeForState(_state : int) : string { Descriptor.Name }

    public PrefixRuleParser(ptr : int, parser : Parser) : ExtentionRuleParser
    {
      PrefixRules[parser.ast[ptr + PrefixOfs.Id] - PrefixOffset]
    }

    public PostfixRuleParser(ptr : int, parser : Parser) : ExtentionRuleParser
    {
      PostfixRules[(parser.ast[ptr + PostfixOfs.Id] & PostfixMask.Id) - PostfixOffset]
    }

    public GetPrefixSize(bestResult : int, parser : Parser) : int
    {
      assert(parser.ast[bestResult + AstOfs.State] == Parser.AstParsedState);
      mutable size = 0;
      mutable i = bestResult + AstOfs.Sizes;
      mutable end = i + PrefixRuleParser(bestResult, parser).FieldsCount;
      for (; i < end; ++i)
        size += parser.GetSize(i);
      size;
    }

    public GetPostfixSize(bestResult : int, parser : Parser) : int
    {
      assert(parser.ast[bestResult + AstOfs.State] == Parser.AstParsedState);
      mutable size = 0;
      mutable i = bestResult + AstOfs.Sizes;
      mutable end = i + PostfixRuleParser(bestResult, parser).FieldsCount;
      for (; i < end; ++i)
        size += parser.GetSize(i);
      size;
    }

    public override GetParsersForState(startState : int) : array[IRecoveryRuleParser]
    {
      | 0 => this.PrefixRules.MapToArray(x => x :> IRecoveryRuleParser)
      | 1 => this.PostfixRules.MapToArray(x => x :> IRecoveryRuleParser)
      | _ => assert2(false); assert(false);
    }

    public override IsStateCanParseEmptyString(state : int) : bool { state != 0 }
    public override IsVoidState         (state : int) : bool { IgnoreParams(); false }
    public override IsStartState        (state : int) : bool { state == 0 }
    public override IsLoopSeparatorStart(state : int) : bool { IgnoreParams(); false }
    public override IsLoopSeparator     (state : int) : bool { IgnoreParams(); false }
    public override IsLoopBody          (state : int) : bool { IgnoreParams(); false }
    public override GetBodyStartStateForSeparator(state : int) : int { IgnoreParams(); -1 }

    public override IsTokenRule : bool { get { Descriptor.IsTokenRule } }
    
    public PatchAst(_startPos : int, _startState : int, errorIndex : int, stack : list[RecoveryStackFrame].Cons, parser : N2.Internal.Parser) : void
    {
      assert2(stack.Head.AstPtr > 0);
      assert(stack.Head.AstPtr > 0);
      parser.ast[stack.Head.AstPtr + PrefixOfs.List] = ~errorIndex;
    }

    public GetNextState(state : int) : int
    {
      match (state)
      {
        | 0 =>  1
        | 1 => -1
        | _ => assert(false)
      }
    }

    public StartState : int { get { 0 } }
  }
}
