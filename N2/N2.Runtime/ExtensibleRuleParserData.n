using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public class ExtensibleRuleParserData
  {
    public Grammar            : CompositeGrammar;
    public Descriptor         : ExtensibleRuleDescriptor;
    public PrefixDescriptors  : array[PrefixRuleDescriptor];
    public PostfixDescriptors : array[PostfixRuleDescriptor];
    public PrefixParsers      : array[Internal.ExtentionRuleParser];
    public PostfixParsers     : array[Internal.ExtentionRuleParser];
    public PrefixId           : int;
    public PostfixId          : int;

    public this(grammar : CompositeGrammar, rd : ExtensibleRuleDescriptor, prefixDescriptors : array[PrefixRuleDescriptor], postfixDescriptors : array[PostfixRuleDescriptor])
    {
      Grammar            = grammar;
      Descriptor         = rd;
      PrefixDescriptors  = prefixDescriptors;
      PostfixDescriptors = postfixDescriptors;
      PrefixId           = Grammar.ParserHost.NewRuleId(Descriptor);
      PostfixId          = Grammar.ParserHost.NewRuleId(Descriptor);
      PrefixParsers      = PrefixDescriptors.Map(rd => rd.NewParser(Grammar.ParserHost.NewRuleId(rd), Grammar));
      PostfixParsers     = PostfixDescriptors.Map(rd => rd.NewParser(Grammar.ParserHost.NewRuleId(rd), Grammar));
    }

    public Init() : void
    {
      foreach (parser in PrefixParsers)
        parser.Init();
      foreach (parser in PostfixParsers)
        parser.Init();
    }
  }
}
