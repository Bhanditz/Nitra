using System.Text;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using N2.Internal;

namespace N2
{
  public class Ast : Located
  {
    public Errors : list[ErrorInfo] { get; }

    public this(location : Location, errors : list[ErrorInfo])
    {
      base(location);
      Errors = errors;
    }

    public virtual GetErrors(errors : List[ErrorInfo]) : void
    {
      errors.AddRange(Errors)
    }

    public virtual GetSpans(spans : List[SpanInfo]) : void
    {
      GetSpans(spans, 0, int.MaxValue)
    }

    public virtual GetSpans(spans : List[SpanInfo], startPos : int, endPos : int) : void
    {
      _ = spans;
      _ = startPos;
      _ = endPos;
    }

    public virtual GetDescendantSpans(spans : List[SpanInfo]) : void
    {
      _ = spans;
    }

    public GetDescendantSpansLazy(startPos : int) : IEnumerable[SpanInfo]
    {
      def spans = List();
      GetSpans(spans, startPos, int.MaxValue);
      mutable i = 0;
      while (i < spans.Count && spans[i].Location.StartPos < startPos)
        ++i;
      while (i < spans.Count)
      {
        yield spans[i];
        ++i;
      }
    }

    public virtual GetDump() : AstDump
    {
      AstDump.Ast(GetType().FullName, []) // stub
    }

    public override ToString() : string
    {
      def code = System.Text.StringBuilder();
      PrettyPrint(code, 0, N2.ToStringOptions.None);
      code.ToString()
    }
    
    protected static Indent(code : StringBuilder, currentIndent : int) : void
    {
      // TODO: Make indent customizable.
      _ = code.Append(' ', currentIndent * 2);
    }
    
    protected static Unindent(code : StringBuilder, _currentIndent : int) : void
    {
      // TODO: Make indent customizable.
      when (code.Length > 2)
      {
        assert2(code[code.Length - 1] == ' ');
        assert2(code[code.Length - 2] == ' ');
        code.Length -= 2;
      }
    }
    
    public virtual PrettyPrint(code : StringBuilder, currentIndent : int, options : ToStringOptions) : void
    {
      ignore(code); ignore(currentIndent); ignore(options);
      
      assert2(!Errors.IsEmpty);
      
      _ = code.Append(if (Errors.IsEmpty) "" else "!!Error!!");
    }
  }
}
