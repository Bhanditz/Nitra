using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2
{
  public abstract class GrammarDescriptor : IComparable[GrammarDescriptor]
  {
    private static mutable _idCounter : int = 0;
    private _runtimeID : int { get; }

    protected this ()
    {
      _runtimeID = Threading.Interlocked.Increment(ref _idCounter);
    }

    public CompareTo(other : N2.GrammarDescriptor) : int
    {
      _runtimeID.CompareTo(other._runtimeID);
    }

    public abstract Name : string { get; }
    public abstract FullName : string { get; }
    public abstract Dependencies : array[GrammarDescriptor] { get; }

    public abstract Rules : array[RuleDescriptor] { get; }

    // TODO: временный метод
    public abstract GetAstWalkerDescriptor() : N2.Runtime.GrammarWalkerDescriptor;
    public abstract GetReflectionWalkerDescriptor() : N2.Runtime.GrammarWalkerDescriptor;

    public static Default : GrammarDescriptor { get; default DefaultGrammarDescriptor(); }

    private class DefaultGrammarDescriptor : GrammarDescriptor
    {
      public override Name : string { get { "DefaultGrammar" } }
      public override FullName : string { get { "DefaultGrammar" } }
      public override Dependencies : array[GrammarDescriptor] { get { array[] } }
      public override Rules : array[RuleDescriptor] { get { array[] } }
      public override GetAstWalkerDescriptor() : N2.Runtime.GrammarWalkerDescriptor { null }
      public override GetReflectionWalkerDescriptor() : N2.Runtime.GrammarWalkerDescriptor { null }
    }
  }
}
