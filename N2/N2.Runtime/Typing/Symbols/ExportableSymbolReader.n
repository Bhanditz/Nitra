using System.Reflection;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  public module ExportableSymbolReader
  {
    public Read(root : NamespaceSymbol, buffer : BinaryReader) : void
    {
      def nodes = ReadNameTree(root.Node, buffer);
      ReadSymbols(nodes, buffer);
    }

    private ReadNameTree(rootNode : HierarchyNode, buffer : BinaryReader) : Dictionary[int, HierarchyNode]
    {
      def nodes = Dictionary();
      def endPos = buffer.BaseStream.Position + buffer.ReadInt32();
      while (buffer.BaseStream.Position < endPos)
      {
        def id       = buffer.ReadInt32();
        def parentId = buffer.ReadInt32();
        def partName = buffer.ReadString();

        def parent   = if (parentId == -1) rootNode else nodes[parentId];
        def node     = parent.AddNode(partName);
        nodes.Add(id, node);
      }
      nodes
    }

    private ReadSymbols(nodes : Dictionary[int, HierarchyNode], buffer : BinaryReader) : void
    {
      def endPos = buffer.BaseStream.Position + buffer.ReadInt32();
      while (buffer.BaseStream.Position < endPos)
      {
        def symbolTypeId = buffer.ReadString();
        def symbolReader = GetSymbolReader(symbolTypeId);
        symbolReader.Invoke(nodes, buffer);
      }
    }

    [Memoize]
    private GetSymbolReader(symbolTypeId : string) : Action[Dictionary[int, HierarchyNode], BinaryReader]
    {
      def baseSymbolType         = Type.GetType(symbolTypeId, throwOnError = true);
      def externalSymbolTypeName = (if (string.IsNullOrEmpty(baseSymbolType.Namespace)) "TEMP." else baseSymbolType.Namespace + ".TEMP.") + "External" + baseSymbolType.Name;
      def externalSymbolType     = baseSymbolType.Assembly.GetType(externalSymbolTypeName, throwOnError = true);
      def readSymbolsMethod      = externalSymbolType.GetMethod("ReadSymbols", BindingFlags.Public | BindingFlags.Static);
      Delegate.CreateDelegate(typeof(Action[Dictionary[int, HierarchyNode], BinaryReader]), readSymbolsMethod) :> Action[Dictionary[int, HierarchyNode], BinaryReader];
    }
  }
}
