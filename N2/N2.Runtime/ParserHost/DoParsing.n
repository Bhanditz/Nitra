using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    public DoParsing(source : SourceSnapshot, descriptor : SimpleRuleDescriptor) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor)
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : SimpleRuleDescriptor) : ParseResult
    {
      DoParsing(source, grammar.GetSimpleRuleParser(descriptor))
    }

    public DoParsing(source : SourceSnapshot, descriptor : ExtensibleRuleDescriptor) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor)
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : ExtensibleRuleDescriptor) : ParseResult
    {
      DoParsing(source, grammar.GetExtensibleRuleParser(descriptor, 0))
    }

    private DoParsing(source : SourceSnapshot, ruleParser : RuleParser) : ParseResult
    {
      mutable parser = N2.Internal.Parser(source, 1024, this);
      _ = parser.Allocate(2);
      mutable astPtr = -1;
      mutable res = ruleParser.Parse(0, parser.Text, ref astPtr, ref parser);
      //while (res < 0)
      //{
      //  parser.IsRecoveryMode = true;
      //  res = ruleParser.Parse(0, parser.Text, ref astPtr, ref parser)
      //}

      parser.ast[Parser.ResultOffset] = res;
      parser.ast[Parser.AstOffset] = astPtr;

      ParseResult(parser, ruleParser, source)
    }
  }
}
