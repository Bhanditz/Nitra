using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    public DoParsing(source : SourceSnapshot, descriptor : SimpleRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : Parser
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, recoveryStrategy)
    }

    public DoParsing(source : SourceSnapshot, descriptor : ExtensibleRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : Parser
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, recoveryStrategy)
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : Parser
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsing(source, grammar.GetSimpleRuleParser(desc), recoveryStrategy)
        | desc is ExtensibleRuleDescriptor => DoParsing(source, grammar.GetExtensibleRuleParser(desc, 0), recoveryStrategy)
        | _ => assert3(false, "DoParsing supprt only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : SimpleRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : Parser
    {
      DoParsing(source, grammar.GetSimpleRuleParser(descriptor), recoveryStrategy)
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : ExtensibleRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : Parser
    {
      DoParsing(source, grammar.GetExtensibleRuleParser(descriptor, 0), recoveryStrategy)
    }

    private DoParsing(source : SourceSnapshot, ruleParser : StartRuleParser, recoveryStrategy : RecoveryStrategy) : Parser
    {
      mutable parser = N2.Internal.Parser(source, source.Text.Length * 10, this, ruleParser);
      _ = parser.Allocate(2);
      mutable res = ruleParser.Parse(0, parser.Text, parser);
      while (res < 0)
      {
        parser.RecoveryStacks.Clear();
        ruleParser.FindRecoveryPosition(0, null, parser);

        assert(parser.RecoveryStacks.Count > 0);

        if (recoveryStrategy == null)
        {
          assert3(this.RecoveryStrategy != null);
          this.RecoveryStrategy(parser.MaxFailPos, parser);
        }
        else
          recoveryStrategy(parser.MaxFailPos, parser);

        res = ruleParser.Parse(0, parser.Text, parser);
      }

      parser.ast[Parser.ResultOffset] = res;

      parser
    }
  }
}
