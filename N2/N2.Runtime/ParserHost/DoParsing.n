using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using System.Linq;
using System.Threading;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    public DoParsing(source : SourceSnapshot, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, recoveryStrategy);
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy = null) : ParseResult
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsingImpl(source, grammar.GetSimpleRuleParser(desc), recoveryStrategy, VNone())
        | desc is ExtensibleRuleDescriptor => DoParsingImpl(source, grammar.GetExtensibleRuleParser(desc, 0), recoveryStrategy, VNone())
        | _ => assert3(false, "DoParsing support only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    public DoParsing(source : SourceSnapshot, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy, token : CancellationToken) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, recoveryStrategy, token);
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor, recoveryStrategy : RecoveryStrategy, token : CancellationToken) : ParseResult
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsingImpl(source, grammar.GetSimpleRuleParser(desc), recoveryStrategy, VSome(token))
        | desc is ExtensibleRuleDescriptor => DoParsingImpl(source, grammar.GetExtensibleRuleParser(desc, 0), recoveryStrategy, VSome(token))
        | _ => assert3(false, "DoParsing support only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    private DoParsingImpl(source : SourceSnapshot, ruleParser : StartRuleParser, recoveryStrategy : RecoveryStrategy, token : ValueOption[CancellationToken]) : ParseResult
    {
      def parser = N2.Internal.ParseResult(source, source.Text.Length * 10, this, ruleParser);
      def registration = match(token)
      {
        | VSome(token) => VSome(token.Register(() => parser.TerminateParsing = true))
        | VNone        => VNone()
      };
      try
      {
        mutable prevRecoveryStacks;
        mutable prevMaxFailPos;
        _ = parser.Allocate(2);
        mutable res = ruleParser.Parse(0, parser.Text, parser);
        when (res < 0)
        {
          when (parser.TerminateParsing)
            return parser;

          parser.RecoveryStacks.Clear();
          ruleParser.FindRecoveryPosition(0, RecoveryStackFrame.Root(parser, 0, ruleParser), parser);

          assert(parser.RecoveryStacks.Count > 0);

          when (prevRecoveryStacks != null)
            assert(parser.MaxFailPos != prevMaxFailPos || !Enumerable.SequenceEqual(parser.RecoveryStacks, prevRecoveryStacks));
          prevMaxFailPos = parser.MaxFailPos;
          prevRecoveryStacks = parser.RecoveryStacks.ToArray();

          res = if (recoveryStrategy == null)
          {
            assert3(this.RecoveryStrategy != null);
            this.RecoveryStrategy(parser);
          }
          else
            recoveryStrategy(parser);
        }
        assert3(res >= 0);

        parser.ast[ParseResult.ResultOffset] = res;

        parser
      }
      finally
      {
        when (registration is VSome(registration))
          registration.Dispose();
      }
    }
  }
}
