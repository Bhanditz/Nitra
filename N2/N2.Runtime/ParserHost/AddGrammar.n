using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    mutable _idCounter : int;
    // System.Collections.Hashtable по тому что:
    // Hashtable is thread safe for use by multiple reader threads and a single writing thread.
    // It is thread safe for multi-thread use when only one of the threads perform write (update) operations,
    // which allows for lock-free reads provided that the writers are serialized to the Hashtable.
    private _grammarSetCache : System.Collections.Hashtable = System.Collections.Hashtable();

    [Record]
    private class Key
    {
      public CompositeGrammar : CompositeGrammar { get; }
      public GrammarDescriptor : GrammarDescriptor { get; }
      public override GetHashCode() : int { CompositeGrammar.GetHashCode() ^ GrammarDescriptor.GetHashCode() }
      public override Equals(that : object) : bool
      {
        def that = that :> Key;
        object.ReferenceEquals(CompositeGrammar, that.CompositeGrammar) && object.ReferenceEquals(GrammarDescriptor, that.GrammarDescriptor);
      }
    }

    public AddGrammar(parent : CompositeGrammar, grammarDescriptor : GrammarDescriptor) : CompositeGrammar
      requires object.ReferenceEquals(parent.ParserHost, this)
    {
      if (parent.Grammars.Contains(grammarDescriptor))
        parent
      else
      {
        def key = Key(parent, grammarDescriptor);
        def res = _grammarSetCache[key];
        if (res == null)
        {
          lock (_grammarSetCache)
          {
            def res = _grammarSetCache[key];
            if (res == null)
            {
              def res = CompositeGrammar(parent, grammarDescriptor, _idCounter); // TODO: найти где брать startID
              _idCounter += res.RuleParserMap.Count;
              _grammarSetCache.Add(key, res);
              res;
            }
            else
              res :> CompositeGrammar;
          }
        }
        else
          res :> CompositeGrammar;
      }
    }
  }
}
