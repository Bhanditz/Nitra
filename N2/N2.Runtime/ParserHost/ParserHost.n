using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    private DefaultCompositeGrammar : CompositeGrammar { get; }

    public this()
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
    }

    public GetRuleDescriptorById(id : int) : RuleDescriptor
    {
      throw NotImplementedException();
    }

    public TryGetRuleDescriptorById(id : int) : option[RuleDescriptor]
    {
      throw NotImplementedException();
    }

    private _astWalkerDescriptors : Hashtable[WalkerTypeDescriptor, Hashtable[GrammarDescriptor, GrammarWalkerDescriptor]] = Hashtable();

    public AddAstWalker(descriptor : GrammarWalkerDescriptor) : void
    {
      lock (_astWalkerDescriptors)
      {
        def addDescriptor(descriptors) { descriptors.Add(descriptor.Grammar, descriptor); descriptors }
        _ = _astWalkerDescriptors.Update(descriptor.Type, () => Hashtable(), addDescriptor);
      }
    }

    public GetAstWalkerDescriptors(astWalkerType : WalkerTypeDescriptor, grammars : SCG.HashSet[GrammarDescriptor])
      : Hashtable[GrammarDescriptor, GrammarWalkerDescriptor]
    {
      lock (_astWalkerDescriptors)
      {
        def result = Hashtable();
        foreach (grammar in grammars)
        {
        }
      }
      
      throw NotImplementedException();
    }
  }
}
