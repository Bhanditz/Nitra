using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    private DefaultCompositeGrammar : CompositeGrammar { get; }

    public this()
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
    }

    private mutable volatile _idToRuleParser : array[RuleParser] = array[];

    public GetRuleDescriptorById(id : int) : RuleDescriptor
    {
      _idToRuleParser[id].Descriptor
    }

    public TryGetRuleDescriptorById(id : int) : option[RuleDescriptor]
    {
      if (0 <= id && id < _idToRuleParser.Length)
        Some(_idToRuleParser[id].Descriptor)
      else
        None()
    }

    private _astWalkerDescriptors : Hashtable[AstWalkerTypeDescriptor, Hashtable[GrammarDescriptor, AstWalkerDescriptor]] = Hashtable();

    public AddAstWalker(descriptor : AstWalkerDescriptor) : void
    {
      lock (_astWalkerDescriptors)
      {
        def addDescriptor(descriptors) { descriptors.Add(descriptor.Grammar, descriptor); descriptors }
        _ = _astWalkerDescriptors.Update(descriptor.Type, () => Hashtable(), addDescriptor);
      }
    }

    public GetAstWalkerDescriptors(astWalkerType : AstWalkerTypeDescriptor, grammars : SCG.HashSet[GrammarDescriptor])
      : Hashtable[GrammarDescriptor, AstWalkerDescriptor]
    {
      lock (_astWalkerDescriptors)
      {
        def result = Hashtable();
        foreach (grammar in grammars)
        {
        }
      }
    }
  }
}
