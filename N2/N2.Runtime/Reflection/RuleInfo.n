using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace N2.Runtime.Reflection
{
  [Record]
  public variant RuleInfo
  {
    public Offset      : int    { get; }
    public Description : string { get; }
    public State       : int    { get; }

    | Empty
    | TokenCall
    | ExtensibleCall             { PrefixId : int; PostfixId : int; IsToken : bool; }
    | SimpleCall                 { Id : int; IsToken : bool; }
    | Option                     { Rule : RuleStructure.Option; }
    | List                       { Rule : RuleStructure.List; }
    | ListWithSeparator          { Rule : RuleStructure.ListWithSeparatorRule; Separator : RuleStructure.ListWithSeparatorSeparator; }
    | Predicate                  { Rule : RuleStructure.Predicate; }
    | TokenString
    | Marker                     { Name : string; }

    public VisitVoid(
      tokenCall         : Action = null,
      extensibleCall    : Action[int, int, bool] = null,
      simpleCall        : Action[int, bool] = null,
      option            : Action[RuleStructure.Option] = null,
      aList             : Action[RuleStructure.List] = null,
      listWithSeparator : Action[RuleStructure.ListWithSeparatorRule, RuleStructure.ListWithSeparatorSeparator] = null,
      predicate         : Action[RuleStructure.Predicate] = null,
      tokenString       : Action = null,
      noMatch           : Action = null) : void
    {
      match (this)
      {
        | TokenCall                                       when tokenCall         != null => tokenCall()
        | ExtensibleCall   (prefixId, postfixId, isToken) when extensibleCall    != null => extensibleCall(prefixId, postfixId, isToken)
        | SimpleCall       (id, isToken)                  when simpleCall        != null => simpleCall(id, isToken)
        | Option           (rule)                         when option            != null => option(rule)
        | List             (rule)                         when aList             != null => aList(rule)
        | ListWithSeparator(rule, sep)                    when listWithSeparator != null => listWithSeparator(rule, sep)
        | Predicate        (rule)                         when predicate         != null => predicate(rule)
        | TokenString                                     when tokenString       != null => tokenString()
        | _                                                             => noMatch()
      }
    }

    public Visit[T](
      tokenCall         : Func[T] = null,
      extensibleCall    : Func[int, int, bool, T] = null,
      simpleCall        : Func[int, bool, T] = null,
      option            : Func[RuleStructure.Option, T] = null,
      aList             : Func[RuleStructure.List, T] = null,
      listWithSeparator : Func[RuleStructure.ListWithSeparatorRule, RuleStructure.ListWithSeparatorSeparator, T] = null,
      predicate         : Func[RuleStructure.Predicate, T] = null,
      tokenString       : Func[T] = null,
      noMatch           : Func[T] = null) : T
    {
      match (this)
      {
        | ExtensibleCall   (prefixId, postfixId, isToken) when extensibleCall    != null => extensibleCall(prefixId, postfixId, isToken)
        | TokenCall                                       when tokenCall         != null => tokenCall()
        | SimpleCall       (id, isToken)                  when simpleCall        != null => simpleCall(id, isToken)
        | Option           (rule)                         when option            != null => option(rule)
        | List             (rule)                         when aList             != null => aList(rule)
        | ListWithSeparator(rule, sep)                    when listWithSeparator != null => listWithSeparator(rule, sep)
        | Predicate        (rule)                         when predicate         != null => predicate(rule)
        | TokenString                                     when tokenString       != null => tokenString()
        | _                                                             => noMatch()
      }
    }

    public override ToString() : string
    {
      Description
    }
  }
}
