using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace N2.Runtime.Reflection
{
  [Record]
  public class SubruleInfo
  {
    public Offset   : int      { get; }
    public RuleInfo : RuleInfo { get; }
  }

  [Record]
  public variant RuleInfo
  {
    | Ast                        { Subrules : ReadOnlyCollection[SubruleInfo]; }
    | Call
    | Option                     { Subrules : ReadOnlyCollection[SubruleInfo]; }
    | List                       { Subrules : ReadOnlyCollection[SubruleInfo]; }
    | ListWithSeparator          { Rule : ListWithSeparatorRule; Separator : ListWithSeparatorSeparator; }
    | ListWithSeparatorRule      { Subrules : ReadOnlyCollection[SubruleInfo]; }
    | ListWithSeparatorSeparator { Subrules : ReadOnlyCollection[SubruleInfo]; }
    | Predicate                  { Subrules : ReadOnlyCollection[SubruleInfo]; }
    | TokenString

    public Description : string { get; }

    public override ToString() : string
    {
      /*def sufix =
        match (this)
        {
          | Ast        (subrules) => $"Subrules=$(subrules.Count)"
          | TokenString
          | Call        => ""
          | ListWithSeparatorRule      (subrules)
          | ListWithSeparatorSeparator (subrules)
          | Option     (subrules)
          | List       (subrules)
          | Predicate  (subrules) => $"Subrules=$(subrules.Count)"
          | ListWithSeparator(rule, separator) => $"Subrules=$(rule.Subrules.Count) SeparatorSubrules=$(separator.Subrules.Count)"
        };*/

      Description //+ "      " + sufix
    }

    public virtual CalcSize(parseResult : ParseResult, startAstPointer : int) : int
    {
      def calc(subrules, parseResult, startAstPointer : int)
      {
        mutable size = 0;

        foreach (subrule in subrules)
          size += parseResult.RawAst[startAstPointer + subrule.Offset];

        size
      }
      match (this)
      {
        | ListWithSeparatorRule      (subrules)
        | ListWithSeparatorSeparator (subrules)
        | Ast        (subrules)
        | Option     (subrules)
        | List       (subrules)
        | Predicate  (subrules) => calc(subrules, parseResult, startAstPointer)
        | ListWithSeparator
        | TokenString
        | Call       => assert(false)
      }
    }
  }
}
