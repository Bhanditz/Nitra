using System.Reflection.Emit.OpCodes;
using N2.Internal;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Runtime.Reflection
{
  public class ReflectionWalkerTypeDescriptor : WalkerTypeDescriptor
  {
    private this() {}

    public static StaticDescriptor : ReflectionWalkerTypeDescriptor { get; default ReflectionWalkerTypeDescriptor() }

    public override NewHost(parserHost : ParserHost) : WalkerHost
    {
      WalkerHost(parserHost, this)
    }

    public override FindGrammarWalkerDescriptor(grammar : GrammarDescriptor) : GrammarWalkerDescriptor
    {
      null
    }
  }

  [Record]
  public class ReflectionStruct
  {
    public Description : string { get; }
    public Location : NToken { get; }
    public Children : Collections.ObjectModel.ReadOnlyCollection[ReflectionStruct] { get; }
  }

  [Record]
  public class ExtensibleRuleReflectionWalker : ExtensibleRuleWalker[ReflectionStruct]
  {
    public override OnPostfixAmbiguity(startPos : int, endPos : int, parser : ref N2.Internal.Parser, ambiguities : List[(ReflectionStruct * N2.Runtime.PostfixRuleWalker[ReflectionStruct])]) : ReflectionStruct
    {
      _ = parser;
      ReflectionStruct("Ambiguity", NToken(startPos, endPos), Collections.ObjectModel.ReadOnlyCollection(ambiguities.MapToArray(x => x[0])));
    }

    public override OnPrefixAmbiguity(startPos : int, endPos : int, parser : ref N2.Internal.Parser, ambiguities : List[(ReflectionStruct * N2.Runtime.PrefixRuleWalker[ReflectionStruct])]) : ReflectionStruct
    {
      _ = parser;
      ReflectionStruct("Ambiguity", NToken(startPos, endPos), Collections.ObjectModel.ReadOnlyCollection(ambiguities.MapToArray(x => x[0])));
    }

    //public override OnPrefixMissed(pos : int, parser : ref N2.Internal.Parser) : ReflectionStruct
    //{
    //  _ = pos; _ = parser;
    //  throw System.NotImplementedException()
    //}
  }

  [Record]
  public class ExtensibleRuleReflectionWalkerData : ExtensibleRuleWalkerData[ReflectionStruct]
  {
    public override NewWalker(walkerData : ExtensibleRuleWalkerData[ReflectionStruct], parser : ExtensibleRuleParser) : ExtensibleRuleWalker[ReflectionStruct]
    {
      ExtensibleRuleReflectionWalker(walkerData, parser)
    }
  }
}
