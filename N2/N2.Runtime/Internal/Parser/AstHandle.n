using N2.Runtime;
using N2.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public partial class Parser
  {
    private _extensibleHandleCache : SCG.Dictionary[ExtensibleRuleParser * int * bool, AstHandle.Extensible] = SCG.Dictionary();
    private GetExtensibleHandle(ruleParser : ExtensibleRuleParser, astPtr : int, textPos : int, isPrefix : bool) : AstHandle.Extensible
    {
      mutable handle;
      def key = (ruleParser, textPos, isPrefix);
      unless (_extensibleHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.Extensible(astPtr, textPos, ruleParser);
        _extensibleHandleCache.Add(key, handle)
      }
      handle
    }

    public GetPrefixAstHandle(ruleParser : ExtensibleRuleParser, astPtr : int, textPos : int) : AstHandle.Extensible
    {
      GetExtensibleHandle(ruleParser, astPtr, textPos, true)
    }

    public GetPostfixAstHandle(ruleParser : ExtensibleRuleParser, astPtr : int, textPos : int) : AstHandle.Extensible
    {
      GetExtensibleHandle(ruleParser, astPtr, textPos, false)
    }

    private _simpleHandleCache : SCG.Dictionary[int * int, AstHandle.Simple] = SCG.Dictionary();
    public GetSimpleAstHandle(ruleParser : SimpleRuleParser, astPtr : int, textPos : int) : AstHandle.Simple
    {
      mutable handle;
      def key = (ruleParser.RuleId, textPos);
      unless (_simpleHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.Simple(astPtr, textPos, ruleParser);
        _simpleHandleCache.Add(key, handle)
      }
      handle
    }

    private _subruleHandleCache : SCG.Dictionary[int * int, AstHandle.Subrule] = SCG.Dictionary();
    public GetSubruleAstHandle(ruleParser : IRecoveryRuleParser, ruleId : int, astPtr : int, textPos : int) : AstHandle.Subrule
    {
      mutable handle;
      def key = (ruleId, textPos);
      unless (_subruleHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.Subrule(astPtr, textPos, ruleParser, ruleId);
        _subruleHandleCache.Add(key, handle)
      }
      handle
    }
  }
}
