using N2.Runtime;
using N2.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public partial class Parser
  {
    private _extentionHandleCache : SCG.Dictionary[ExtentionRuleParser * int, AstHandle.Extention] = SCG.Dictionary();
    public GetExtentionHandle(ruleParser : ExtentionRuleParser, astPtr : int, textPos : int) : AstHandle.Extention
    {
      mutable handle;
      def key = (ruleParser, textPos);
      unless (_extentionHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.Extention(astPtr, textPos, ruleParser);
        _extentionHandleCache.Add(key, handle)
      }
      handle
    }

    private _extensiblePrefixHandleCache : SCG.Dictionary[ExtensibleRuleParser * int, AstHandle.ExtensiblePrefix] = SCG.Dictionary();
    public GetPrefixAstHandle(ruleParser : ExtensibleRuleParser, textPos : int) : AstHandle.ExtensiblePrefix
    {
      mutable handle;
      def key = (ruleParser, textPos);
      unless (_extensiblePrefixHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.ExtensiblePrefix(0, textPos, ruleParser);
        _extensiblePrefixHandleCache.Add(key, handle)
      }
      handle.AstPtr = TryGetAst(textPos, ruleParser.PrefixId);
      handle
    }

    private _extensiblePostfixHandleCache : SCG.Dictionary[ExtensibleRuleParser * int, AstHandle.ExtensiblePostfix] = SCG.Dictionary();
    public GetPostfixAstHandle(ruleParser : ExtensibleRuleParser, textPos : int) : AstHandle.ExtensiblePostfix
    {
      mutable handle;
      def key = (ruleParser, textPos);
      unless (_extensiblePostfixHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.ExtensiblePostfix(0, textPos, ruleParser);
        _extensiblePostfixHandleCache.Add(key, handle)
      }
      handle.AstPtr = TryGetAst(textPos, ruleParser.PrefixId);
      handle
    }

    private _simpleHandleCache : SCG.Dictionary[int * int, AstHandle.Simple] = SCG.Dictionary();
    public GetSimpleAstHandle(ruleParser : SimpleRuleParser, textPos : int) : AstHandle.Simple
    {
      mutable handle;
      def key = (ruleParser.RuleId, textPos);
      unless (_simpleHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.Simple(0, textPos, ruleParser);
        _simpleHandleCache.Add(key, handle)
      }
      handle.AstPtr = TryGetAst(textPos, ruleParser.RuleId);
      handle
    }

    private _subruleHandleCache : SCG.Dictionary[int * int, AstHandle.Subrule] = SCG.Dictionary();
    public GetSubruleAstHandle(ruleParser : IRecoveryRuleParser, ruleId : int, textPos : int) : AstHandle.Subrule
    {
      mutable handle;
      def key = (ruleId, textPos);
      unless (_subruleHandleCache.TryGetValue(key, out handle))
      {
        handle = AstHandle.Subrule(0, textPos, ruleParser, ruleId);
        _subruleHandleCache.Add(key, handle)
      }
      handle.AstPtr = TryGetAst(textPos, ruleId);
      handle
    }
  }
}
