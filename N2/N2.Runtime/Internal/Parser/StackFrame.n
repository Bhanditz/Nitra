using N2.Runtime;
using N2.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public partial class Parser
  {
    private _extensibleStackFrameCache : SCG.Dictionary[RecoveryStackFrame.Extensible, RecoveryStackFrame.Extensible] = SCG.Dictionary();
    public RecoveryStackFrame_Extensible(parent : RecoveryStackFrame, rulePraser : ExtensibleRuleParser, textPos : int, state : int) : RecoveryStackFrame.Extensible
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.Extensible(rulePraser, textPos, state), parent, _extensibleStackFrameCache);
    }

    private _extensiblePrefixStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ExtensiblePrefix, RecoveryStackFrame.ExtensiblePrefix] = SCG.Dictionary();
    public RecoveryStackFrame_ExtensiblePrefix(parent : RecoveryStackFrame, astHandle : AstHandle.ExtensiblePrefix, rulePraser : ExtensibleRuleParser) : RecoveryStackFrame.ExtensiblePrefix
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ExtensiblePrefix(astHandle, rulePraser), parent, _extensiblePrefixStackFrameCache);
    }

    private _extensiblePostfixStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ExtensiblePostfix, RecoveryStackFrame.ExtensiblePostfix] = SCG.Dictionary();
    public RecoveryStackFrame_ExtensiblePostfix(parent : RecoveryStackFrame, astHandle : AstHandle.ExtensiblePostfix, rulePraser : ExtensibleRuleParser) : RecoveryStackFrame.ExtensiblePostfix
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ExtensiblePostfix(astHandle, rulePraser), parent, _extensiblePostfixStackFrameCache);
    }

    private _ruleStackFrameCache : SCG.Dictionary[RecoveryStackFrame.Rule, RecoveryStackFrame.Rule] = SCG.Dictionary();
    public RecoveryStackFrame_Rule(parent : RecoveryStackFrame, astHandle : AstHandle, state : int) : RecoveryStackFrame.Rule
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.Rule(astHandle, state), parent, _ruleStackFrameCache);
    }

    private _listBodyStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ListBody, RecoveryStackFrame.ListBody] = SCG.Dictionary();
    public RecoveryStackFrame_ListBody(parent : RecoveryStackFrame, astHandle : AstHandle.Subrule, state : int, counter : int) : RecoveryStackFrame.ListBody
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ListBody(astHandle, state, counter), parent, _listBodyStackFrameCache);
    }

    private _listSeparatorStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ListSeparator, RecoveryStackFrame.ListSeparator] = SCG.Dictionary();
    public RecoveryStackFrame_ListSeparator(parent : RecoveryStackFrame, astHandle : AstHandle.Subrule, state : int, counter : int) : RecoveryStackFrame.ListSeparator
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ListSeparator(astHandle, state, counter), parent, _listSeparatorStackFrameCache);
    }

    private CacheRecoveryStackFrame[FrameType](newFrame : FrameType, parent : RecoveryStackFrame, cache : SCG.Dictionary[FrameType, FrameType]) : FrameType
      where FrameType : RecoveryStackFrame
    {
      mutable oldFrame;
      def frame = if (cache.TryGetValue(newFrame, out oldFrame))
        oldFrame
      else
      {
        cache.Add(newFrame, newFrame);
        newFrame
      }
      when (parent != null)
        _ = frame.Parents.Add(parent);
      frame
    }
  }
}
