using N2.Runtime;
using N2.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public partial class Parser
  {
    private _recoveryStackFrameCache : SCG.Dictionary[RecoveryStackFrame, RecoveryStackFrame] = SCG.Dictionary();
    public NormalRecoveryStackFrame(parent : RecoveryStackFrame, astHandle : AstHandle, state : int) : RecoveryStackFrame
    {
      ListRecoveryStackFrame(parent, astHandle, state, 0, 0, 0, FrameInfo.None)
    }

    public ListRecoveryStackFrame
      ( parent       : RecoveryStackFrame
      , astHandle    : AstHandle
      , state        : int
      , counter      : int
      , listStartPos : int
      , listEndPos   : int
      , info         : FrameInfo
      )              : RecoveryStackFrame
    {
      def newFrame = RecoveryStackFrame(astHandle, state, counter, listStartPos, listEndPos, info);
      mutable frame;
      if (_recoveryStackFrameCache.TryGetValue(newFrame, out frame))
      {
        when (parent != null)
          _ = frame.Parents.Add(parent);
        null;
      }
      else
      {
        _recoveryStackFrameCache.Add(newFrame, newFrame);
        when (parent != null)
          _ = newFrame.Parents.Add(parent);
        newFrame
      }
    }
  }
}
