using N2.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Runtime.Internal
{
  public struct ExtentionRuleParserState
  {
    public mutable newResult : int;
    public mutable newEndPos : int;
    public mutable bestResult : int;
    public mutable bestEndPos : int;
    public mutable lastResult : int;
    public mutable curTextPos : int;
    public mutable parser : Parser;

    public Append() : void
    {
      // выбираем лучшее правило: побеждает то правило, у которого находится поле спарсившее больше текста
      // если оба правила имеют одинаковое кол-во полей, размеры которых идентичны, ситуация считается неоднозначностью

      parser.ast[newResult] = parser.ast[newResult] & ExtensibleRuleParser.AstMask.Id;//очищаем флаги
      parser.ast[newResult + ExtensibleRuleParser.AstOfs.Next] = lastResult;
      lastResult = newResult;//добавляем в список
      //определяем является ли даный АСТ лучшим из тех что разобрали
      if (bestResult > 0)
      {
        if (bestEndPos < 0) if   (newEndPos >= 0) goto new_better; else goto equal;
        else                when (newEndPos < 0)  goto best_better;

        def newTokens  = parser.TokenEnumerator1.Start(newResult,  curTextPos);
        def bestTokens = parser.TokenEnumerator2.Start(bestResult, curTextPos);

        while (true)
        {
          def newSize = newTokens.NextTokenSize();
          def bestSize = bestTokens.NextTokenSize();
          when (newSize > bestSize) goto new_better;
          when (newSize < bestSize) goto best_better;
          when (newSize < 0)        goto equal;
        }
      }
      else
        goto new_better;

    label equal;//АСТ равен лучшему. Неоднозначность.
      parser.ast[newResult] = parser.ast[newResult] | ExtensibleRuleParser.AstFlags.Equal;
      assert(bestEndPos == newEndPos);
      return;

    label new_better;//Новый АСТ лучше
      bestEndPos = newEndPos;
      bestResult = newResult;
      parser.ast[newResult] = parser.ast[newResult] | ExtensibleRuleParser.AstFlags.Best;
      return;

    label best_better;
      return;
    }
  }
}
