using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  [Record]
  [StructuralEquality]
  public variant AstHandle
  {
    [EqualsIgnore]
    public mutable AstPtr  : int;
    public         TextPos : int;

    | Subrule
      {
        RuleParser : IRecoveryRuleParser;
        _ruleId : int;
      }

    | Simple
      {
        RuleParser : SimpleRuleParser;
      }

    | ExtensiblePrefix
      {
        [EqualsIgnore, RecordIgnore] Children : SCG.List[AstHandle.Extention] = SCG.List();
        RuleParserData : ExtensibleRuleParserData;
      }

    | ExtensiblePostfix
      {
        [EqualsIgnore, RecordIgnore] Children : SCG.List[AstHandle.Extention] = SCG.List();
        RuleParserData : ExtensibleRuleParserData;
      }

    | Extention
      {
        [EqualsIgnore]
        Parent : AstHandle;
        RuleParser : ExtentionRuleParser;

        public override UpdateAstPtr(parser : Parser) : void //TODO: обновлять ссылки для всех братьев разом.
        {
          when (AstPtr <= 0 && Parent.AstPtr > 0)
          {
            mutable listPtr = match (Parent)
            {
              | ExtensiblePrefix  => parser.ast[Parent.AstPtr + ExtensibleRuleParser.PrefixOfs.List]
              | ExtensiblePostfix => parser.ast[Parent.AstPtr + ExtensibleRuleParser.PostfixOfs.List]
              | _                 => assert3(false)
            }

            for (;listPtr > 0; listPtr = parser.ast[listPtr + ExtensibleRuleParser.AstOfs.Next])
              when ((parser.ast[listPtr] & ExtensibleRuleParser.AstMask.Id) == RuleParser.RuleId)
              {
                AstPtr = listPtr;
                break;
              }
          }
        }
      }

    public virtual UpdateAstPtr(parser : Parser) : void
    {
      when (AstPtr <= 0)
        AstPtr = parser.TryGetAst(TextPos, RuleId);
    }

    public RuleId : int
    {
      get
      {
        match (this)
        {
          | Subrule           as handle => handle._ruleId
          | Simple            as handle => handle.RuleParser.RuleId
          | ExtensiblePrefix  as handle => handle.RuleParserData.PrefixId
          | ExtensiblePostfix as handle => handle.RuleParserData.PostfixId
          | Extention         as handle => handle.RuleParser.RuleId
        }
      }
    }

    public override ToString() : string
    {
      match (this)
      {
        | Subrule           as handle => $"$(handle.RuleParser.RuleName)"
        | Simple            as handle => $"$(handle.RuleParser.RuleName)"
        | ExtensiblePrefix  as handle => $"$(handle.RuleParserData.Descriptor.Name)"
        | ExtensiblePostfix as handle => $"$(handle.RuleParserData.Descriptor.Name)"
        | Extention         as handle => $"$(handle.RuleParser.RuleName)"
      }
    }
  }
}
