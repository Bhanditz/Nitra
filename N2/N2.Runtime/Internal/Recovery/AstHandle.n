using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  [Record]
  public variant AstHandle
  {
    public mutable AstPtr  : int;
    public         TextPos : int;
    public abstract GetRuleParser() : IRecoveryRuleParser;

    | Subrule
      {
        RuleParser : IRecoveryRuleParser;
        RuleId : int;
        public override GetRuleParser() : IRecoveryRuleParser { RuleParser }
      }

    | Simple
      {
        RuleParser : SimpleRuleParser;
        public override GetRuleParser() : IRecoveryRuleParser { RuleParser }
      }

    | ExtensiblePrefix
      {
        RuleParserData : ExtensibleRuleParserData;
        public override GetRuleParser() : IRecoveryRuleParser { assert3(false) }
      }

    | ExtensiblePostfix
      {
        RuleParserData : ExtensibleRuleParserData;
        public override GetRuleParser() : IRecoveryRuleParser { assert3(false) }
      }

    | Extention
      {
        RuleParser : ExtentionRuleParser;
        public override GetRuleParser() : IRecoveryRuleParser { RuleParser }
      }

    public override ToString() : string
    {
      match (this)
      {
        | Subrule           as handle => $"$(handle.RuleParser.RuleName)"
        | Simple            as handle => $"$(handle.RuleParser.RuleName)"
        | ExtensiblePrefix  as handle => $"$(handle.RuleParserData.Descriptor.Name)"
        | ExtensiblePostfix as handle => $"$(handle.RuleParserData.Descriptor.Name)"
        | Extention         as handle => $"$(handle.RuleParser.RuleName)"
      }
    }
  }
}
