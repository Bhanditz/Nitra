using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  public enum FrameInfo
  {
    | None = 0
    | LoopBody
    | LoopSeparator
  }

  [Record]
  public abstract variant AstHandle
  {
    public mutable AstPtr  : int;
    public         TextPos : int;
    public abstract GetRuleParser() : IRecoveryRuleParser;

    | Subrule
    {
      RuleParser : IRecoveryRuleParser;
      RuleId : int;
      public override GetRuleParser() : IRecoveryRuleParser { RuleParser }
    }

    | Simple
    {
      RuleParser : SimpleRuleParser;
      public override GetRuleParser() : IRecoveryRuleParser { RuleParser :> IRecoveryRuleParser }
    }

    | Extensible
    {
      RuleParser : ExtensibleRuleParser;
      public override GetRuleParser() : IRecoveryRuleParser { RuleParser }
    }

    | Extention
    {
      RuleParser : ExtentionRuleParser;
      public override GetRuleParser() : IRecoveryRuleParser { RuleParser :> IRecoveryRuleParser }
    }
  }

  [Record]
  public class RecoveryStackFrame
  {
    public AstHandle    : AstHandle;
    [RecordIgnore] 
    public Parents      : SCG.HashSet[RecoveryStackFrame] = SCG.HashSet();
    public FailState    : int;
    public Counter      : int;
    public ListStartPos : int;
    public ListEndPos   : int;
    public Info         : FrameInfo;
                   
    public RuleParser : IRecoveryRuleParser { get { this.AstHandle.GetRuleParser() } }
    public AstPtr     : int                 { get { this.AstHandle.AstPtr } }
                   
    public override ToString() : string
    {
      def props = SCG.List();
      props.Add($"FailState=$FailState");
      when (Info != FrameInfo.None)
        props.Add($"Info=$Info");
      when (ListStartPos > 0)
        props.Add($"ListStartPos=$ListStartPos");
      when (ListEndPos > 0)
        props.Add($"ListEndPos=$ListEndPos");
      $"$(AstHandle.GetRuleParser().RuleName) = $(AstHandle.GetRuleParser().CodeWithStates)  (..$props)"
    }

    public override Equals(obj : object) : bool
    {
      match (obj)
      {
        | obj is this => 
             this.AstHandle    == obj.AstHandle : object
          && this.FailState    == obj.FailState
          && this.Counter      == obj.Counter
          && this.ListStartPos == obj.ListStartPos
          && this.ListEndPos   == obj.ListEndPos
          && this.Info         == obj.Info
        | _ => false
      }
    }
    
    public override GetHashCode() : int
    {
      AstHandle.GetHashCode() ^ FailState ^ Counter ^ ListStartPos ^ ListEndPos ^ Info.GetHashCode()
    }
  }
}
