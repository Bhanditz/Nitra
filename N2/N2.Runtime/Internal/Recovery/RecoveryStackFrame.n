using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  [Record]
  [StructuralEquality]
  public variant RecoveryStackFrame
  {
    [RecordIgnore]
    [EqualsIgnore]
    public Parents      : SCG.HashSet[RecoveryStackFrame] = SCG.HashSet();
    public TextPos      : int;

    | Extensible
      {
        RuleParser   : ExtensibleRuleParser;
        State        : int;
        public override GetNextState(state : int) : int { | 0 => 1 | _ => -1 }
      }

    | ExtensiblePrefix
      {
        AstHandle    : AstHandle.ExtensiblePrefix;
        RuleParser   : ExtensibleRuleParser;
        public override GetNextState(state : int) : int { _ = state; -1 }
      }

    | ExtensiblePostfix
      {
        AstHandle    : AstHandle.ExtensiblePostfix;
        RuleParser   : ExtensibleRuleParser;
        public override GetNextState(state : int) : int { _ = state; -1 }
      }

    | Rule
      {
        AstHandle    : AstHandle;
        State        : int;
        public override GetNextState(state : int) : int { AstHandle.GetRuleParser().GetNextState(state) }
      }

    | ListBody
      {
        AstHandle    : AstHandle.Subrule;
        State        : int;
        Counter      : int;
        public override GetNextState(state : int) : int { AstHandle.GetRuleParser().GetNextState(state) }
      }

    | ListSeparator
      {
        AstHandle    : AstHandle.Subrule;
        State        : int;
        Counter      : int;
        public override GetNextState(state : int) : int { AstHandle.GetRuleParser().GetNextState(state) }
        public override GetLoopBodyFrameForSeparatorState(textPos : int, parser : Parser) : RecoveryStackFrame.ListSeparator
        {
          mutable bodyId;
          mutable firstState;
          if (AstHandle.RuleParser.GetLoopBodyForSeparator(AstHandle.RuleId, out bodyId, out firstState))
          {
            assert3(Parents.Count == 1);
            def parent = Parents.First();
            def astHandle = parser.AstHandle_Subrule(AstHandle.RuleParser, bodyId, -1, textPos);
            def frame = parser.RecoveryStackFrame_ListSeparator(parent, textPos, astHandle, firstState, Counter);
            frame
          }
          else
            null
        }
      }

    public IsPrefixParsed : bool
    {
      get
      {
        match (this)
        {
          | ListBody     (handle, state, _) 
          | ListSeparator(handle, state, _)
          | Rule         (handle, state) =>
            def parser = handle.GetRuleParser();
            for (mutable i = parser.GetStartState(state); i < state; i = parser.GetNextState(i))
              unless (parser.IsVoidState(i))
                return true;
            false
            
          | Extensible        as frame => frame.State != 0
          | ExtensiblePrefix           => false
          | ExtensiblePostfix          => false
        }
      }
    }
    
    public IsLoopSeparatorStart : bool { get { this is ListSeparator } }
    
    public FailState : int
    {
      get
      {
        match (this)
        {
          | ListBody     (_, state, _) 
          | ListSeparator(_, state, _)
          | Extensible   (_, state)
          | Rule         (_, state) => state
          | ExtensiblePrefix
          | ExtensiblePostfix => 0
        }
      }
    }
    
    public IsVoidState(state : int) : bool
    {
      match (this)
      {
        | ListBody     (handle, _, _) 
        | ListSeparator(handle, _, _)
        | Rule         (handle, _) => handle.GetRuleParser().IsVoidState(state)
        | Extensible
        | ExtensiblePrefix
        | ExtensiblePostfix        => false
      }
    }
    
    public abstract GetNextState(state : int) : int;
    public virtual GetLoopBodyFrameForSeparatorState(textPos : int, parser : Parser) : RecoveryStackFrame.ListSeparator { IgnoreParams(); null }

    public GetSpeculativeFramesForState(textPos : int, parser : Parser, state : int) : array[RecoveryStackFrame]
    {
      def makeExtentionFrame(ruleParser)
      {
        def handle = parser.AstHandle_Extention(ruleParser, -1, textPos);
        parser.RecoveryStackFrame_Rule(this, textPos, handle, ruleParser.StartState)
      }
      match (this)
      {
        | Extensible as frame =>
          match (frame.State)
          {
            | 0 => array[parser.RecoveryStackFrame_ExtensiblePrefix(this, textPos, parser.AstHandle_Prefix(frame.RuleParser.ParserData, -1, textPos), frame.RuleParser)]
            | 1 => array[parser.RecoveryStackFrame_ExtensiblePostfix(this, textPos, parser.AstHandle_Postfix(frame.RuleParser.ParserData, -1, textPos), frame.RuleParser)]
            | _ => assert3(false)
          }
        | ExtensiblePrefix  as frame => frame.RuleParser.PrefixRules.MapToArray(makeExtentionFrame)
        | ExtensiblePostfix as frame => frame.RuleParser.PostfixRules.Skip(frame.RuleParser.FirstPostfixRule).MapToArray(makeExtentionFrame)
        | ListBody(astHandle, _, _)
        | ListSeparator(astHandle, _, _)
        | Rule(astHandle, _) =>
          def ruleParser = astHandle.GetRuleParser();
          match (ruleParser.GetRuleParserForState(state))
          {
            | null                               => array[]
            | ExtensibleRuleParser as ruleParser => array[parser.RecoveryStackFrame_Extensible(this, textPos, ruleParser, 0)]
            | SimpleRuleParser     as ruleParser => array[parser.RecoveryStackFrame_Rule(this, textPos, parser.AstHandle_Simple(ruleParser, -1, textPos), ruleParser.StartState)]
            | _ => assert3(false)
          }
      }
    }

    public IsTokenRule : bool
    {
      get
      {
        match (this)
        {
          | ListBody
          | ListSeparator => false
          | Extensible as frame => frame.RuleParser.IsTokenRule
          | ExtensiblePrefix
          | ExtensiblePostfix => false
          | Rule(handle, _) => 
            match (handle)
            {
              | Simple
              | Extention => handle.GetRuleParser().IsTokenRule // ???
              | _ => false
            }
        }
      }
    }

    public IsSpeculative : bool
    {
      get
      {
        match (this)
        {
          | ExtensiblePrefix(handle, _)
          | ExtensiblePostfix(handle, _)
          | ListBody     (handle, _, _)
          | ListSeparator(handle, _, _)
          | Rule         (handle, _) => handle.AstPtr < 0
          | Extensible               => assert3(false)
        }
      }
    }

    public TryParse(state : int, curTextPos : int, parsedStates : SCG.List[ParsedStateInfo], parser : Parser) : int
    {
      match (this)
      {
        | ExtensiblePrefix (handle, _)
        | ExtensiblePostfix(handle, _)
        | ListBody     (handle, _, _)
        | ListSeparator(handle, _, _)
        | Rule         (handle, _) => handle.GetRuleParser().TryParse(this, state, curTextPos, parsedStates, parser)
        | Extensible               => assert3(false);
      }
    }
    
    public override ToString() : string
    {
      def (name, rupeParser) = match (this)
      {
        | ExtensiblePrefix  as frame => ("ExtensiblePrefix",  frame.RuleParser)
        | ExtensiblePostfix as frame => ("ExtensiblePostfix", frame.RuleParser)
        | ListBody          as frame => ("ListBody",          frame.AstHandle.RuleParser)
        | ListSeparator     as frame => ("ListSeparator",     frame.AstHandle.RuleParser)
        | Rule              as frame => ("Rule",              frame.AstHandle.GetRuleParser())
        | Extensible        as frame => ("Extensible",        frame.RuleParser)
      }
      $"$name $(rupeParser.RuleName) = $(rupeParser.CodeWithStates) FailState=$FailState"
    }
  }
}
