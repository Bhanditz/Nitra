using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  public enum FrameInfo
  {
    | None = 0
    | LoopBody
    | LoopSeparator
  }
  
  [Record]
  public class RecoveryStackFrame
  {
    public         RuleParser   : IRecoveryRuleParser;
    public         RuleId       : int;
    public mutable AstPtr       : int;
    public         AstStartPos  : int;
    public         FailState    : int;
    public         Counter      : int;
    public         ListStartPos : int;
    public         ListEndPos   : int;
    public         IsRootAst    : bool;
    public         Info         : FrameInfo;

    public override ToString() : string
    {
      def props = SCG.List();
      props.Add($"FailState=$FailState");
      when (Info != FrameInfo.None)
        props.Add($"Info=$Info");
      when (ListStartPos > 0)
        props.Add($"ListStartPos=$ListStartPos");
      when (ListEndPos > 0)
        props.Add($"ListEndPos=$ListEndPos");
      when (IsRootAst)
        props.Add("RootAst");
      $"$(RuleParser.RuleName) = $(RuleParser.CodeWithStates)  (..$props)"
    }
  }
}
