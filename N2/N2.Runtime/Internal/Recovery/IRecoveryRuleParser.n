using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  [Record]
  public struct ParsedStateInfo
  {
    public State : int;
    public Size  : int;
  }

  public interface IRecoveryRuleParser
  {
    TryParse(recoveryStack : list[RecoveryStackFrame].Cons, startState : int, curTextPos : int, parsedStates : List[ParsedStateInfo], parser : N2.Internal.Parser) : int;
    GetParsersForState(startState : int) : array[IRecoveryRuleParser];
    IsStateCanParseEmptyString(state : int) : bool;
    IsVoidState(state : int) : bool;
    IsStartState(state : int) : bool;
    IsLoopSeparatorStart(state : int) : bool;
    CodeForState(state : int) : string;
    GetNextState(state : int) : int;
    PatchAst(startPos : int, startState : int, errorIndex : int, stack : list[RecoveryStackFrame].Cons, parser : N2.Internal.Parser) : void;

    StartState     : int    { get; }
    Code           : string { get; }
    CodeWithStates : string { get; }
    RuleName       : string { get; }
  }
}
