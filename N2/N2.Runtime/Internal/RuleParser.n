using N2.Runtime.Reflection;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Runtime.Reflection
{
  public interface IRuleParserReflection
  {
    Reflection(ruleId : int) : RuleStructure;
  }
}

namespace N2.Internal
{
  [Record]
  public abstract class RuleParser
  {
    public Grammar    : CompositeGrammar;
    public Descriptor : RuleDescriptor;
  }

  [Record]
  public abstract class StartRuleParser : RuleParser
  {
    public abstract Parse(pos : int, text : string, parser : ref Parser) : int;
  }

  public abstract class SimpleRuleParser : StartRuleParser, IRuleParserReflection
  {
    public RuleId     : int;

    public this(grammar : CompositeGrammar, descriptor : RuleDescriptor)
    {
      base(grammar, descriptor);
      RuleId = grammar.NewRuleId(this)
    }

    public abstract Init() : void;
    public abstract Reflection(ruleId : int) : RuleStructure;
  }

  public abstract class ExtentionRuleParser : RuleParser, IRuleParserReflection
  {
    public RuleId     : int;

    public LowerBound : char;
    public UpperBound : char;

    public this(grammar : CompositeGrammar, descriptor : RuleDescriptor, lowerBound : char, upperBound : char)
    {
      base(grammar, descriptor);
      LowerBound = lowerBound;
      UpperBound = upperBound;
      RuleId = grammar.NewRuleId(this)
    }

    public abstract Init() : void;
    public abstract Parse(pos : int, text : string, resultRef : ref int, parser : ref Parser) : int;
    public abstract Reflection(ruleId : int) : RuleStructure;
  }
}
