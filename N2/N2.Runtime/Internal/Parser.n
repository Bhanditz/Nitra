using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;

using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public enum ParsingMode
  {
    | Parsing
    | Recovery
    | EndRecovery
  }

#if !PARSER_DEBUG
  [DebuggerStepThroughAttribute]
#endif
  public struct Parser
  {
    public static ResultOffset = 0;

    public mutable ast            : array[int];
    public mutable memoize        : array[int];
    public mutable allocated      : int;
    public         parserHost     : ParserHost;
    public mutable ParsingMode    : ParsingMode;

    public         Source         : SourceSnapshot;
    public         Text           : string;
    public mutable LastParseStart : int;
    public mutable LastParseEnd   : int;
    public         RecoveryStack  : SCG.Stack[RecoveryInfo];
    public mutable MaxTextPos     : int;

    public ParseResult : string
    {
      get
      {
        if (LastParseEnd >= 0)
          Text.Substring(LastParseStart, LastParseEnd - LastParseStart)
        else
          "<fail>"
      }
    }

    public RestText : string
    {
      get { Text.Substring(if (LastParseEnd >= 0) LastParseEnd else LastParseStart) }
    }

    public mutable PreviousTextSize : int;

    public PreviousText : string
    {
      get
      {
        when (PreviousTextSize <= 0)
          PreviousTextSize = 20;

        def pos = if (LastParseEnd >= 0) LastParseEnd else LastParseStart;
        if (pos >= PreviousTextSize)
          Text.Substring(pos - PreviousTextSize, PreviousTextSize)
        else
          Text.Substring(0, pos)
      }
    }

    public this(source : SourceSnapshot, initalSize : int, parserHost : ParserHost)
    {
      RecoveryStack   = SCG.Stack();
      def textSize    = source.Text.Length;
      this.Source     = source;
      this.Text       = source.Text;
      this.ast        = array(if (initalSize < 10) 10 else initalSize);
      this.memoize    = array(textSize + 1);
      this.allocated  = 0;
      this.parserHost = parserHost;
      LastParseStart  = -1;
      LastParseEnd    = -1;
      MaxTextPos      = 0;
      ParsingMode     = ParsingMode.Parsing;
    }

    public Allocate(size : int) : int
    {
      def newAst = allocated;
      allocated = allocated + size;
      while (ast.Length <= allocated)
        Array.Resize(ref ast, (ast.Length * 3) / 2);

      newAst
    }

    public Allocate(size : int, ruleId : int) : int
    {
      def newAst = Allocate(size);
      ast[newAst] = ruleId;
      newAst;
    }

    public TryGetAst(pos : int, ruleId : int) : int
    {
      for (mutable astPtr = memoize[pos]; astPtr > 0; astPtr = ast[astPtr + 1])
        when (ast[astPtr] == ruleId)
          return astPtr;
      0;
    }

    public GetAst(pos : int, ruleId : int) : int
    {
      def astPtr = TryGetAst(pos , ruleId);
      assert(astPtr > 0);
      astPtr;
    }

    public AstSize(astPtr : int, begin : int, end : int) : int
    {
      mutable size = 0;
      def end = astPtr + end;
      for (mutable i = astPtr + begin; i < end; ++i)
        size += ast[i];
      size;
    }

    public StartRecovery(curTextPos : int) : void
    {
      _ = curTextPos;
      assert2(false);
      assert(false);
    }
  }
}
