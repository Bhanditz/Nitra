using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  [Record]
  public abstract class StartRuleParser : RuleParser
  {
    public abstract Parse(pos : int, text : string, parser : Parser) : int;
    public abstract FindRecoveryPosition(mutable curTextPos : int, stack : RecoveryStackFrame, parser : N2.Internal.Parser) : void;
    public abstract TryParse(recoveryStack : RecoveryStackFrame, startState : int, curTextPos : int, parsedStates : List[ParsedStateInfo], parser : N2.Internal.Parser) : int;

    public abstract GetFrameForFirstState(                         parser : Parser, parent : RecoveryStackFrame, textPos : int) : RecoveryStackFrame;
    public abstract GetFramesForState(           startState : int, parser : Parser, parent : RecoveryStackFrame, textPos : int) : array[RecoveryStackFrame];
    public abstract GetLoopBodyFrameForSeparatorState(state : int, parser : Parser, parent : RecoveryStackFrame, textPos : int) : RecoveryStackFrame;

    public abstract IsStateCanParseEmptyString   (state : int) : bool;
    public abstract IsVoidState                  (state : int) : bool;
    public abstract IsStartState                 (state : int) : bool;
    public abstract IsLoopSeparatorStart         (state : int) : bool;
    public abstract IsLoopSeparator              (state : int) : bool;
    public abstract IsLoopBody                   (state : int) : bool;

    public abstract IsTokenRule : bool { get; }
    public abstract StartRuleId : int  { get; }//TODO: Rename
  }
}
