using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  /// <summary>
  /// Description of Dump.
  /// </summary>
  public variant AstDump
  {
    | Ast    { name : string; fields: list[Field] }
    | Error  { name : string; text: string }
    | Splice { name : string }
    | Token  { value : string }
    | Option { value : option[AstDump] }
    | List   { value : list[AstDump] }
    | Tuple  { value : list[AstDump] }

    [Record]
    public struct Field
    {
      public Name : string;
      public Value : AstDump;
    }

    public override ToString() : string
    {
      using(def output = StringWriter())
      {
        WriteTo(output, "  ", 0);
        output.ToString();
      }
    }

    public WriteTo(output : TextWriter, tabSymbol : string) : void
    {
      WriteTo(output, tabSymbol, 0);
    }

    public WriteTo(output : TextWriter, tabSymbol : string, tabDepth : int) : void
    {
      Write(this, output, tabSymbol, tabDepth, newLineBeforeListAndTuple = false, newLineAfterToken = false)
    }

    private static Write(dump : AstDump, output : TextWriter, tabSymbol : string, tabDepth : int, newLineBeforeListAndTuple : bool = false, newLineAfterToken : bool = true) : void
    {
      def isNewLineSymbol(c)
      {
        | '\r' | '\n' | '\u2028' | '\u2029' => true
        | _ => false
      }
      def tab(output, symbol, depth)
      {
        for(mutable i = 0; i < depth; ++i)
          output.Write(symbol)
      }
      match(dump)
      {
        | Ast(name, fields) =>
          output.Write(name);
          output.WriteLine();
          foreach(field in fields)
          {
            tab(output, tabSymbol, tabDepth + 1);
            output.Write(field.Name);
            output.Write(" = ");
            Write(field.Value, output, tabSymbol, tabDepth + 1, newLineBeforeListAndTuple = true);
          }

        | Error(name, text) =>
          output.Write("!");
          output.Write(name);
          output.Write(" <#");
          output.Write(text);
          output.WriteLine("#>");

        | Splice(name) =>
          output.Write("$");
          output.WriteLine(name);

        | Token(value) when value.Length == 1 && !isNewLineSymbol(value[0]) && value[0] != '\'' with(openBrace = "'",  closeBrace = "'")
        | Token(value) when value.ForAll(c => !isNewLineSymbol(c) && c != '\"')                 with(openBrace = "\"", closeBrace = "\"")
        | Token(value)                                                                          with(openBrace = "<#", closeBrace = "#>") =>
          output.Write(openBrace);
          output.Write(value);
          output.Write(closeBrace);
          when(newLineAfterToken)
            output.WriteLine();
        | Option(Some(value)) =>
          output.Write("some ");
          Write(value, output, tabSymbol, tabDepth, newLineBeforeListAndTuple = newLineBeforeListAndTuple, newLineAfterToken = newLineAfterToken);

        | Option(None()) => output.WriteLine("none");
        | List([]) => output.WriteLine("[]");
        | List((Token :: _) as items) =>
          output.Write("[");
          foreach(item in items)
          {
            output.Write(" ");
            Write(item, output, tabSymbol, tabDepth, newLineAfterToken = false);
          }
          output.WriteLine(" ]");

        | List(items)  with(openBrace = "[", closeBrace = "]")
        | Tuple(items) with(openBrace = "(", closeBrace = ")") =>
          when(newLineBeforeListAndTuple)
          {
            output.WriteLine();
            tab(output, tabSymbol, tabDepth);
          }
          output.WriteLine(openBrace);
          foreach(item in items)
          {
            tab(output, tabSymbol, tabDepth + 1);
            Write(item, output, tabSymbol, tabDepth + 1);
          }
          tab(output, tabSymbol, tabDepth);
          output.WriteLine(closeBrace);
      }
    }
  }
}
