using N2.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Internal
{
  public abstract class ExtentionRuleParser : RuleParser, IRuleParserReflection
  {
    public RuleId     : int;

    public LowerBound : char;
    public UpperBound : char;


    public this(grammar : CompositeGrammar, descriptor : RuleDescriptor, lowerBound : char, upperBound : char)
    {
      base(grammar, descriptor);
      LowerBound = lowerBound;
      UpperBound = upperBound;
      RuleId = grammar.NewRuleId(this)
    }

    public abstract FieldsCount : int { get; }

    public abstract Init() : void;
    public abstract Reflection(ruleId : int) : RuleStructure;

    public abstract Parse(pos : int, text : string, resultRef : ref int, parser : Parser) : int;
    public abstract FindRecoveryPosition(mutable curTextPos : int, text : string, astPtr : int, parser : N2.Internal.Parser) : int;
    public abstract TryParse(recoveryStack : list[RecoveryStackFrame].Cons, startState : int, curTextPos : int, writeAstSize : bool, parser : N2.Internal.Parser) : int;
    public abstract GetParsersForState(startState : int) : array[IRecoveryRuleParser];
    public abstract IsStateCanParseEmptyString(state : int) : bool;
    public abstract IsVoidState(state : int) : bool;
  }
}
