using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public class WalkerHost
  {
    public ParserHost         : ParserHost { get; }
    public Type               : WalkerTypeDescriptor { get; }

    private _compositeWalkers : Hashtable[CompositeGrammar, CompositeAstWalker] = Hashtable();

    public this(parserHost : ParserHost, type : WalkerTypeDescriptor)
    {
      ParserHost = parserHost;
      Type       = type;
    }

    internal AddCompositeGrammar(compositeGrammar : CompositeGrammar) : void
    {
      _compositeWalkers.Add(compositeGrammar, CompositeAstWalker(this, compositeGrammar));
    }

    public GetRootWalker(result : ParseResult) : object
    {
      def walker = _compositeWalkers[result.RuleParser.Grammar];
      match (result.RuleDescriptor)
      {
        | descriptor is SimpleRuleDescriptor     => walker.GetWalker(descriptor)
        | descriptor is ExtensibleRuleDescriptor => walker.GetWalker(descriptor, 0)
        | _                                      => assert(false)
      }
    }
  }
}
