using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public interface IExtensibleRuleWalkerData
  {
    Init() : void;
  }

  public abstract class ExtensibleRuleWalkerData[T] : IExtensibleRuleWalkerData
  {
    public CompositeAstWalker : CompositeAstWalker;
    public ParserData         : ExtensibleRuleParserData;
    public PrefixWalkers      : array[PrefixRuleWalker[T]];
    public PostfixWalkers     : array[PostfixRuleWalker[T]];
    public Walkers            : array[ExtensibleRuleWalker[T]];

    public this(parserData : ExtensibleRuleParserData, compositeAstWalker : CompositeAstWalker)
    {
      CompositeAstWalker = compositeAstWalker;

      ParserData = parserData;

      PrefixWalkers = array(ParserData.PrefixParsers.Length);
      foreach (parser in ParserData.PrefixParsers with i)
        PrefixWalkers[i] = compositeAstWalker.NewWalker(parser) :> PrefixRuleWalker[T];

      PostfixWalkers = array(ParserData.PostfixParsers.Length);
      foreach (parser in ParserData.PostfixParsers with i)
        PostfixWalkers[i] = compositeAstWalker.NewWalker(parser) :> PostfixRuleWalker[T];

      Walkers = array(ParserData.Parsers.Count);
      foreach (parser when parser != null in ParserData.Parsers with bp)
        Walkers[bp] = NewWalker(this, parser);
    }

    public abstract NewWalker(walkerData : ExtensibleRuleWalkerData[T], parser : ExtensibleRuleParser) : ExtensibleRuleWalker[T];

    public Init() : void
    {
      foreach (walker in PrefixWalkers)
        walker.Init(CompositeAstWalker);
      foreach (walker in PostfixWalkers)
        walker.Init(CompositeAstWalker);
    }
  }
}
