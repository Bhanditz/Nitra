using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public class CompositeAstWalker
  {
    public Grammar                  : CompositeGrammar;
    public AstWalkerDescriptors     : Hashtable[GrammarDescriptor, GrammarWalkerDescriptor];
    public AstWalkerHost            : WalkerHost;

    private SimpleWalkers           : Hashtable[SimpleRuleDescriptor, AstWalkerBase];
    private ExtensibleWalkersData   : Hashtable[ExtensibleRuleDescriptor, object];

    public this(host : WalkerHost, grammar : CompositeGrammar)
    {
      AstWalkerHost        = host;
      Grammar              = grammar;
      AstWalkerDescriptors = Hashtable(grammar.Grammars.MapLazy(grammar => (grammar, host.FindGrammarWalkerDescriptor(grammar))));

      def makeSimpleWalker(descriptor, parser)
      {
        (descriptor, AstWalkerDescriptors[parser.Descriptor.Grammar].NewWalker(parser))
      }
      SimpleWalkers = grammar.SimpleRuleParsers.Map(makeSimpleWalker);

      def makeExtensibleWalkerData(descriptor, parserData)
      {
        (descriptor, AstWalkerDescriptors[parserData.Descriptor.Grammar].NewExtensibleRuleAstWalkerData(parserData, this))
      }
      ExtensibleWalkersData = grammar.ExtensibleRules.Map(makeExtensibleWalkerData);
    }

    public GetWalker[T](ruleDescriptor : SimpleRuleDescriptor) : SimpleAstWalker[T]
    {
      SimpleWalkers[ruleDescriptor] :> SimpleAstWalker[T]
    }

    public GetWalker[T](ruleDescriptor : ExtensibleRuleDescriptor) : ExtensibleAstWalker[T]
    {
      ExtensibleWalkersData[ruleDescriptor] :> ExtensibleAstWalker[T]
    }
  }
}
