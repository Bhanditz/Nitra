using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Runtime
{
  public abstract class WalkerTypeDescriptor
  {
    public abstract Name : string { get; }
    public virtual NewHost(parserHost : ParserHost) : WalkerHost
    {
      WalkerHost(parserHost, this)
    }

    [Memoize]
    public FindGrammarWalkerDescriptor(grammar : GrammarDescriptor) : GrammarWalkerDescriptor
    {
      def grammarDescriptorImplType = grammar.GetType();
      assert(grammarDescriptorImplType.Name == "GrammarDescriptorImpl");

      def grammarImplType = grammarDescriptorImplType.DeclaringType;
      assert(grammarImplType.Name == "GrammarImpl");

      def grammarType = grammarImplType.DeclaringType;

      def walkersModuleName = grammarType.FullName + Name + "Walkers";
      match (Type.GetType(walkersModuleName, false))
      {
        | null              => assert(false, $"Walker descriptor '$(Name)' not found for grammar '$(grammar.Name)'.")
        | walkersModuleType =>
          def descriptorProperty = walkersModuleType.GetProperty("StaticDescriptor");
          def descriptor = descriptorProperty.GetValue(null, null);
          descriptor :> GrammarWalkerDescriptor
      }
    }
  }
}
