using N2.Internal;
using N2.Runtime;
using N2.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace N2
{
  [Record]
  public sealed class ParseResult
  {
    public   ParserState    : Parser;
    public   RuleParser     : RuleParser     { get }
    public   Source         : SourceSnapshot { get }

    public   RuleDescriptor : RuleDescriptor { get { RuleParser.Descriptor } }
    public   ParserHost     : ParserHost     { get { ParserState.parserHost } }
    public   RawAst         : array[int]     { get { ParserState.ast } }
    public   RawMemoize     : array[int]     { get { ParserState.memoize } }
    public   RawResult      : int            { get { ParserState.ast[Parser.ResultOffset] } }
    public   IsSuccess      : bool           { get { RawResult >= 0 } }
    public   LastSuccessPos : int
    {
      get
      {
        def memoize = RawMemoize;

        for (mutable i = memoize.Length - 2; i >= 0; i--)
          when (memoize[i] > 0)
            return i;

        0
      }
    }

    public GetSpans(startPos : int, endPos : int, spans : List[SpanInfo]) : void
    {
      def walkerHost = this.ParserHost.GetWalkerHost(StandardWalkerTypes.Highlighter);
      def start_Walker = walkerHost.GetRootWalker(this);
      mutable num = 0;
      mutable parserState = this.ParserState;
      _ = late start_Walker.Walk(ref num, parserState, spans, startPos, endPos);
    }

    public GetOutlining(outlining : List[OutliningInfo]) : void
    {
      def timer = Stopwatch.StartNew();
      def context = N2.Internal.OutliningWalkerContext(outlining);
      def walkerHost = this.ParserHost.GetWalkerHost(StandardWalkerTypes.Outlining);
      def start_Walker = walkerHost.GetRootWalker(this);
      mutable num = 0;
      mutable parserState = this.ParserState;
      timer.Stop();
      Debug.WriteLine($"GetOutlining prepare: $(timer.Elapsed)");
      timer.Reset();
      timer.Start();
      _ = late start_Walker.Walk(ref num, parserState, context);
      timer.Stop();
      Debug.WriteLine($"GetOutlining Walk: $(timer.Elapsed)");
    }

    public Reflect() : ReflectionStruct
    {
      def walkerHost = this.ParserHost.GetWalkerHost(StandardWalkerTypes.Reflection);
      def start_Walker = walkerHost.GetRootWalker(this);
      mutable num = 0;
      mutable parserState = this.ParserState;
      def result = late start_Walker.Walk(ref num, parserState);
      result :> ReflectionStruct
    }

    public CollectErrors() : ErrorMessage
    {
      default(ErrorMessage)
    }
  }
}
