using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public abstract class ExtensibleRuleWalkerBase
  {
    public PrefixId             : int;
    public PostfixId            : int;
    public FirstPostfixRule     : int;
    public FirstPostfixRuleId   : int;
    public PrefixWalkersOffset  : int;
    public PostfixWalkersOffset : int;
    public Parser               : ExtensibleRuleParser;

    public this(parser : ExtensibleRuleParser)
    {
      Parser                = parser;
      PrefixId              = parser.PrefixId;
      PostfixId             = parser.PostfixId;

      FirstPostfixRule      = parser.FirstPostfixRule;
      FirstPostfixRuleId    = parser.FirstPostfixRuleId;

      PrefixWalkersOffset   = if (parser.PrefixRules.Length > 0)  parser.PrefixRules[0].RuleId  else 0; //FIXME empty array
      PostfixWalkersOffset  = if (parser.PostfixRules.Length > 0) parser.PostfixRules[0].RuleId else 0; //FIXME empty array
    }

    public RuleFullName : string
    {
      get { this.Parser.Descriptor.Grammar.Name + "." + this.Parser.Descriptor.Name }
    }

    protected FindFirstPrefix(pos : ref int, parser : Parser) : int
    {
      for (mutable ast = parser.memoize[pos]; ast > 0; ast = parser.ast[ast + ExtensibleRuleParser.PrefixOfs.Next])
        when (parser.ast[ast + ExtensibleRuleParser.PrefixOfs.Id] == PrefixId)
        {
          mutable result = parser.ast[ast + ExtensibleRuleParser.PrefixOfs.List];
          when (result < 0)
          {
            def error = parser.Errors[~result];
            pos += error.Skip.Length;
            result = error.Data;
          }
          while (result > 0 && (parser.ast[result + ExtensibleRuleParser.AstOfs.State] != N2.Internal.Parser.AstParsedState))
            result = parser.ast[result + ExtensibleRuleParser.PostfixAstOfs.Next];
          return result;
        }
      0
    }

    protected FindNextPrefix(prevPrefix : int, parser : Parser) : int
    {
      mutable result = parser.ast[prevPrefix + ExtensibleRuleParser.AstOfs.Next];
      while (result > 0 && (parser.ast[result + ExtensibleRuleParser.AstOfs.State] != N2.Internal.Parser.AstParsedState))
        result = parser.ast[result + ExtensibleRuleParser.PostfixAstOfs.Next];
      result
    }

    protected FindFirstPostfix(pos : int, parser : Parser) : int
    {
      for (mutable ast = parser.memoize[pos]; ast > 0; ast = parser.ast[ast + ExtensibleRuleParser.PostfixOfs.Next])
        when (parser.ast[ast + ExtensibleRuleParser.PostfixOfs.Id] == PostfixId)//нашли
        {
          mutable result = parser.ast[ast + ExtensibleRuleParser.PostfixOfs.AstList];//список разобраных с этого места правил
          // пропускаем правила с низкой силой связывания.
          while (result > 0 && (parser.ast[result] & ExtensibleRuleParser.PostfixMask.Id) < FirstPostfixRuleId)
            result = parser.ast[result + ExtensibleRuleParser.PostfixAstOfs.Next];
          // пропускаем плохие варианты.
          while (result > 0 && ((parser.ast[result] & ExtensibleRuleParser.PostfixMask.Mark) == ExtensibleRuleParser.PostfixMark.Bad || parser.ast[result + ExtensibleRuleParser.AstOfs.State] != N2.Internal.Parser.AstParsedState))
            result = parser.ast[result + ExtensibleRuleParser.PostfixAstOfs.Next];
          return result;
        }
      0
    }

    protected FindNextPostfix(mutable prevPostfix : int, parser : Parser) : int
    {
      //если у нас лучшее значение то заканчиваем перебор
      when ((parser.ast[prevPostfix] & ExtensibleRuleParser.PostfixMask.Mark) == ExtensibleRuleParser.PostfixMark.Best)
        return 0;
      prevPostfix = parser.ast[prevPostfix + ExtensibleRuleParser.PostfixAstOfs.Next];
      // пропускаем плохие варианты.
      while (prevPostfix > 0 && ((parser.ast[prevPostfix] & ExtensibleRuleParser.PostfixMask.Mark) == ExtensibleRuleParser.PostfixMark.Bad || parser.ast[prevPostfix + ExtensibleRuleParser.AstOfs.State] != N2.Internal.Parser.AstParsedState))
        prevPostfix = parser.ast[prevPostfix + ExtensibleRuleParser.PostfixAstOfs.Next];
      prevPostfix;
    }
  }
}
