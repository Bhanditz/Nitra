using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public sealed class WalkerHost
  {
    public ParserHost         : ParserHost { get; }
    public Type               : string     { get; }

    private _compositeWalkers : Hashtable[CompositeGrammar, CompositeAstWalker] = Hashtable();

    public this(parserHost : ParserHost, type : string)
    {
      ParserHost = parserHost;
      Type       = type;
    }

    [Memoize]
    internal FindGrammarWalkerDescriptor(grammar : GrammarDescriptor) : GrammarWalkerDescriptor
    {
      def walkersModuleName = grammar.FullName + Type + "Walkers";

      mutable candidates = [];
      foreach(assembly in ParserHost.AssemblyScope())
        match (assembly.GetType(walkersModuleName, false))
        {
          | null => ()
          | t    => candidates ::= t
        }

      match (candidates)
      {
        | [] => assert(false, $"Walker descriptor of type '$Type' not found for grammar '$(grammar.Name)'.")
        | [walkersModuleType] =>
          def descriptorProperty = walkersModuleType.GetProperty("StaticDescriptor");
          def descriptor = descriptorProperty.GetValue(null, null);
          descriptor :> GrammarWalkerDescriptor

        | walkerModuleTypes => assert(false, $<#Ambiguous walker descriptors of type '$Type' found for grammar '$(grammar.Name)': ..$(walkerModuleTypes; ", "; t => $"'$(t.FullName)' $(t.Assembly.CodeBase)").#>)
      }
    }

    internal AddCompositeGrammar(compositeGrammar : CompositeGrammar) : void
    {
      _compositeWalkers.Add(compositeGrammar, CompositeAstWalker(this, compositeGrammar));
    }

    public GetRootWalker(result : ParseResult) : object
    {
      def walker = _compositeWalkers[result.RuleParser.Grammar];
      match (result.RuleParser.Descriptor)
      {
        | descriptor is SimpleRuleDescriptor     => walker.GetWalker(descriptor)
        | descriptor is ExtensibleRuleDescriptor => walker.GetWalker(descriptor, 0)
        | _                                      => assert(false)
      }
    }
  }
}
