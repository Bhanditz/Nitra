using N2.Internal;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;

using SCG = System.Collections.Generic;

namespace N2
{
#if !PARSER_DEBUG
  [DebuggerStepThroughAttribute]
#endif
  public class ParserHost
  {
    private DefaultCompositeGrammar : CompositeGrammar { get; }

    // System.Collections.Hashtable по тому что:
    // Hashtable is thread safe for use by multiple reader threads and a single writing thread.
    // It is thread safe for multi-thread use when only one of the threads perform write (update) operations,
    // which allows for lock-free reads provided that the writers are serialized to the Hashtable.
    private _grammarSetCache : System.Collections.Hashtable = System.Collections.Hashtable();
    private mutable _ruleIndex : array[int] = array(0);

    private _idToRuleDescriptor : SCG.List[RuleDescriptor] = SCG.List();
    public NewRuleId(rd : RuleDescriptor) : int
    {
      def id = _idToRuleDescriptor.Count;
      _idToRuleDescriptor.Add(rd);
      id
    }

    public GetRuleDescriptorById(id : int) : RuleDescriptor
    {
      _idToRuleDescriptor[id]
    }

    public TryGetRuleDescriptorById(id : int) : option[RuleDescriptor]
    {
      if (0 <= id && id < _idToRuleDescriptor.Count)
        Some(_idToRuleDescriptor[id])
      else
        None()
    }

    public this()
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
    }

#if !PARSER_DEBUG
  [DebuggerStepThroughAttribute]
#endif
    [Record]
    private class Key
    {
      public CompositeGrammar : CompositeGrammar { get; }
      public GrammarDescriptor : GrammarDescriptor { get; }
      public override GetHashCode() : int { CompositeGrammar.GetHashCode() ^ GrammarDescriptor.GetHashCode() }
      public override Equals(that : object) : bool
      {
        def that = that :> Key;
        object.ReferenceEquals(CompositeGrammar, that.CompositeGrammar) && object.ReferenceEquals(GrammarDescriptor, that.GrammarDescriptor);
      }
    }

    public AddGrammar(parent : CompositeGrammar, grammarDescriptor : GrammarDescriptor) : CompositeGrammar
      requires object.ReferenceEquals(parent.ParserHost, this)
    {
      def key = Key(parent, grammarDescriptor);
      def res = _grammarSetCache[key];
      if (res == null)
      {
        lock (_grammarSetCache)
        {
          def res = _grammarSetCache[key];
          if (res == null)
          {
            def res = CompositeGrammar.AddGrammar(parent, grammarDescriptor);
            _grammarSetCache.Add(key, res);
            res;
          }
          else
            res :> CompositeGrammar;
        }
      }
      else
        res :> CompositeGrammar;
    }

    public DoParsing(source : SourceSnapshot, descriptor : SimpleRuleDescriptor) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor)
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : SimpleRuleDescriptor) : ParseResult
    {
      DoParsing(source, descriptor, grammar.GetSimpleRuleParser(descriptor))
    }

    public DoParsing(source : SourceSnapshot, descriptor : ExtensibleRuleDescriptor, bindingPower : int = 0) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, bindingPower)
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : ExtensibleRuleDescriptor, bindingPower : int = 0) : ParseResult
    {
      DoParsing(source, descriptor, grammar.GetExtensibleRuleParser(bindingPower, descriptor))
    }

    private DoParsing(source : SourceSnapshot, descriptor : RuleDescriptor, ruleParser : RuleParser) : ParseResult
    {
      def text = source.Text;
      mutable parser = N2.Internal.Parser(text, 1024, text.Length, this);
      _ = parser.Allocate(2);
      mutable astPtr = -1;
      def res = ruleParser.Parse(0, text, ref astPtr, ref parser);// TODO: Fixme // Повторяем пока не восстановимся от всех ошибок.
      parser.ast[Parser.ResultOffset] = res;
      parser.ast[Parser.AstOffset] = astPtr;
      ParseResult(parser, descriptor, source)
    }
  }
}
