using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Runtime;
using N2.Typing;

using System;
using System.IO;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

namespace N2.Serialization
{
  public sealed class ExportableSymbolReader : ISymbolRefReader
  {
    public CreateSymbols(symbolRegistry : ExternalSymbolReaderRegistry, root : NamespaceSymbol, assemblyId : byte, buffer : BinaryReader) : void
    {
      ResetMutableFields(); // reset Memoize caches
      _nodes.Clear();
      _localSymbols.Clear();
      _referencedAssemblies.Clear();
      _externalSymbols.Clear();

      AssemblyId = assemblyId;

      ReadNameTree(root.Node, buffer);
      ReadSymbols(symbolRegistry, buffer);
      ReadReferencedAssemblies(buffer);
      ReadNameTree(root.Node, buffer);
      ReadExternalSymbols(buffer);
    }

    public LoadSymbols(buffer : BinaryReader) : void
    {
      foreach (localSymbolInfo in _localSymbols.Values)
      {
        _ = buffer.BaseStream.Seek(localSymbolInfo.Position, SeekOrigin.Begin);
        localSymbolInfo.Symbol.Deserialize(buffer, this);
      }
    }

    public AssemblyId : byte { get; private set; }

    public ReferencedAssemblies : Seq[AssemblyName]
    {
      get { _referencedAssemblies.Values }
    }

    private ReadNameTree(rootNode : HierarchyNode, buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def id       = buffer.ReadInt32();
        def parentId = buffer.ReadInt32();
        def partName = buffer.ReadString();

        def parent   = if (parentId == -1) rootNode else _nodes[parentId];
        def node     = parent.AddNode(partName);
        _nodes.Add(id, node);
      }
    }

    private ReadSymbols(symbolReaderRegistry : ExternalSymbolReaderRegistry, buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def symbolTypeId = buffer.ReadString();
        def symbolReader = symbolReaderRegistry.Resolve(symbolTypeId);
        symbolReader.Invoke(this, buffer);
      }
    }

    private ReadReferencedAssemblies(buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def assemblyName = buffer.ReadString();
        def assemblyId   = buffer.ReadByte();

        _referencedAssemblies.Add(assemblyId, AssemblyName(assemblyName))
      }
    }

    private ReadExternalSymbols(buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def symbolTypeId = buffer.ReadString();

        def blockSize   = buffer.ReadInt32();
        def blockEndPos = blockSize + buffer.BaseStream.Position;
        while (buffer.BaseStream.Position < blockEndPos)
        {
          def symbolId   = buffer.ReadInt32();
          def nodeId     = buffer.ReadInt32();
          def assemblyId = buffer.ReadByte();
          def symbolRef  = ExternalSymbolReference(symbolTypeId, nodeId, assemblyId);
          _externalSymbols.Add(symbolId, symbolRef);
        }
      }
    }

    private ReadSymbolRef(buffer : BinaryReader) : ISymbol implements ISymbolRefReader.Read
    {
      def symbolId = buffer.ReadInt32();
      ResolveSymbol(symbolId)
    }

    private RegisterSymbol(symbol : IImportableSymbol, symbolId : int, pos : long) : void implements ISymbolRefReader.Register
    {
      _localSymbols.Add(symbolId, LocalSymbolInfo(symbol, pos))
    }

    private GetNode(nodeId : int) : HierarchyNode implements ISymbolRefReader.GetNode
    {
      _nodes[nodeId]
    }

    [Memoize]
    private ResolveSymbol(symbolId : int) : ISymbol
    {
      mutable localSymbolInfo;
      when (_localSymbols.TryGetValue(symbolId, out localSymbolInfo))
        return localSymbolInfo.Symbol;

      mutable externalSymbolRef;
      when (_externalSymbols.TryGetValue(symbolId, out externalSymbolRef))
      {
        def assemblyName = _referencedAssemblies[externalSymbolRef.ReferenceId];
        def node         = _nodes[externalSymbolRef.NodeId];
        def assemblyId   = Project.CurrentProject.GetAssemblyId(assemblyName);
        foreach (s is IExportableSymbol in node.GetChildren.[Symbol]())
          when (s.AssemblyId == assemblyId && string.Equals(s.SymbolTypeId, externalSymbolRef.SymbolTypeId, StringComparison.InvariantCulture))
            return s;
      }

      null
    }

    private _nodes                : Dictionary[int, HierarchyNode]           = Dictionary();
    private _localSymbols         : Dictionary[int, LocalSymbolInfo]         = Dictionary();
    private _referencedAssemblies : Dictionary[int, AssemblyName]            = Dictionary();
    private _externalSymbols      : Dictionary[int, ExternalSymbolReference] = Dictionary();

    [Record]
    private struct LocalSymbolInfo
    {
      public Symbol   : IImportableSymbol { get; }
      public Position : long              { get; }
    }

    [Record]
    private struct ExternalSymbolReference
    {
      public SymbolTypeId : string { get; }
      public NodeId       : int    { get; }
      public ReferenceId  : byte   { get; }
    }
  }
}
