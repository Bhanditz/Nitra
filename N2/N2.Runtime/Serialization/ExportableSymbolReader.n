using System.Reflection;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Typing;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace N2.Serialization
{
  public sealed class ExportableSymbolReader : ISymbolRefReader
  {
    public Read(symbolRegistry : ExternalSymbolReaderRegistry, root : NamespaceSymbol, buffer : BinaryReader) : void
    {
      _nodes.Clear();
      _symbols.Clear();
      _assemblyNames.Clear();
      _externalSymbols.Clear();

      ReadNameTree(root.Node, buffer);
      ReadSymbols(symbolRegistry, buffer);
      ReadReferencedAssemblies(buffer);
      ReadNameTree(root.Node, buffer);
      ReadExternalSymbols(buffer);
    }

    private ReadNameTree(rootNode : HierarchyNode, buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def id       = buffer.ReadInt32();
        def parentId = buffer.ReadInt32();
        def partName = buffer.ReadString();

        def parent   = if (parentId == -1) rootNode else _nodes[parentId];
        def node     = parent.AddNode(partName);
        _nodes.Add(id, node);
      }
    }

    private ReadSymbols(symbolReaderRegistry : ExternalSymbolReaderRegistry, buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def symbolTypeId = buffer.ReadString();
        def symbolReader = symbolReaderRegistry.Resolve(symbolTypeId);
        symbolReader.Invoke(this, buffer);
      }
    }

    private ReadReferencedAssemblies(buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def assemblyName = buffer.ReadString();
        def assemblyId   = buffer.ReadByte();

        _assemblyNames.Add(assemblyId, AssemblyName(assemblyName))
      }
    }

    private ReadExternalSymbols(buffer : BinaryReader) : void
    {
      def blockSize   = buffer.ReadInt32();
      def blockEndPos = blockSize + buffer.BaseStream.Position;
      while (buffer.BaseStream.Position < blockEndPos)
      {
        def symbolTypeId = buffer.ReadString();

        def blockSize   = buffer.ReadInt32();
        def blockEndPos = blockSize + buffer.BaseStream.Position;
        while (buffer.BaseStream.Position < blockEndPos)
        {
          def symbolId   = buffer.ReadInt32();
          def nodeId     = buffer.ReadInt32();
          def assemblyId = buffer.ReadByte();
          _externalSymbols.Add(symbolId, (symbolTypeId, _nodes[nodeId], _assemblyNames[assemblyId]));
        }
      }
    }

    private ReadSymbolRef(buffer : BinaryReader) : SymbolRefResolver implements ISymbolRefReader.Read
    {
      def symbolId = buffer.ReadInt32();
      SymbolRefResolver(symbolId)
    }

    private RegisterSymbol(symbol : Symbol, symbolId : int) : void implements ISymbolRefReader.Register
    {
      _symbols.Add(symbolId, symbol)
    }

    private GetNode(nodeId : int) : HierarchyNode implements ISymbolRefReader.GetNode
    {
      _nodes[nodeId]
    }

    private _nodes           : Dictionary[int, HierarchyNode]                         = Dictionary();
    private _symbols         : Dictionary[int, Symbol]                                = Dictionary();
    private _assemblyNames   : Dictionary[int, AssemblyName]                          = Dictionary();
    private _externalSymbols : Dictionary[int, string * HierarchyNode * AssemblyName] = Dictionary();
  }
}
