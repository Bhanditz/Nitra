using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Runtime;
using N2.Typing;

using System;
using System.IO;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

namespace N2.Serialization
{
  public sealed class ExportableSymbolReader : ISymbolRefReader
  {
    public CreateSymbols(symbolRegistry : ExternalSymbolReaderRegistry, root : NamespaceSymbol, assemblyId : byte, buffer : BinaryReader) : void
    {
      ResetMutableFields(); // reset Memoize caches
      _nodes.Clear();
      _localSymbols.Clear();
      _referencedAssemblies.Clear();
      _externalSymbols.Clear();

      AssemblyId = assemblyId;

      ReadNameTree(root.Node, buffer);
      ReadSymbols(symbolRegistry, buffer);
      ReadReferencedAssemblies(buffer);
      ReadNameTree(root.Node, buffer);
      ReadExternalSymbols(buffer);
    }

    public LoadSymbols(buffer : BinaryReader) : void
    {
      def loop()
      {
        def symbolId = buffer.ReadInt32();
        when (symbolId > 0)
        {
          def symbol = _localSymbols[symbolId];
          symbol.Deserialize(buffer, this);
          loop();
        }
      }
      loop();
    }

    public AssemblyId : byte { get; private set; }

    public ReferencedAssemblies : Seq[AssemblyName]
    {
      get { _referencedAssemblies.Values }
    }

    private ReadNameTree(rootNode : HierarchyNode, buffer : BinaryReader) : void
    {
      def loop()
      {
        def id = buffer.ReadInt32();
        when (id > 0)
        {
          def parentId = buffer.ReadInt32();
          def partName = buffer.ReadString();

          def parent   = if (parentId == -1) rootNode else _nodes[parentId];
          def node     = parent.AddNode(partName);
          _nodes.Add(id, node);
          loop();
        }
      }
      loop();
    }

    private ReadSymbols(symbolReaderRegistry : ExternalSymbolReaderRegistry, buffer : BinaryReader) : void
    {
      def loop()
      {
        def symbolTypeId = buffer.ReadString();
        unless (string.IsNullOrEmpty(symbolTypeId))
        {
          def symbolReader = symbolReaderRegistry.Resolve(symbolTypeId);
          symbolReader.Invoke(this, buffer);
          loop();
        }
      }
      loop();
    }

    private ReadReferencedAssemblies(buffer : BinaryReader) : void
    {
      def loop()
      {
        def assemblyId = buffer.ReadByte();
        when (assemblyId > 0)
        {
          def assemblyName = buffer.ReadString();
          _referencedAssemblies.Add(assemblyId, AssemblyName(assemblyName));
          loop();
        }
      }
      loop();
    }

    private ReadExternalSymbols(buffer : BinaryReader) : void
    {
      def loopTypes()
      {
        def symbolTypeId = buffer.ReadString();
        unless (string.IsNullOrEmpty(symbolTypeId))
        {
          def loopSymbols()
          {
            def symbolId = buffer.ReadInt32();
            when (symbolId > 0)
            {
              def nodeId     = buffer.ReadInt32();
              def assemblyId = buffer.ReadByte();
              def symbolRef  = ExternalSymbolReference(symbolTypeId, nodeId, assemblyId);
              _externalSymbols.Add(symbolId, symbolRef);
              loopSymbols();
            }
          }
          loopSymbols();
          loopTypes();
        }
      }
      loopTypes();
    }

    private ReadSymbolRef(buffer : BinaryReader) : ISymbol implements ISymbolRefReader.Read
    {
      def symbolId = buffer.ReadInt32();
      ResolveSymbol(symbolId)
    }

    private RegisterSymbol(symbolId : int, symbol : IImportableSymbol) : void implements ISymbolRefReader.Register
    {
      _localSymbols.Add(symbolId, symbol)
    }

    private GetNode(nodeId : int) : HierarchyNode implements ISymbolRefReader.GetNode
    {
      _nodes[nodeId]
    }

    [Memoize]
    private ResolveSymbol(symbolId : int) : ISymbol
    {
      mutable localSymbol;
      when (_localSymbols.TryGetValue(symbolId, out localSymbol))
        return localSymbol;

      mutable externalSymbolRef;
      when (_externalSymbols.TryGetValue(symbolId, out externalSymbolRef))
      {
        def assemblyName = _referencedAssemblies[externalSymbolRef.ReferenceId];
        def node         = _nodes[externalSymbolRef.NodeId];
        def assemblyId   = Project.CurrentProject.GetAssemblyId(assemblyName);
        foreach (s is IExportableSymbol in node.GetChildren.[Symbol]())
          when (s.AssemblyId == assemblyId && string.Equals(s.SymbolTypeId, externalSymbolRef.SymbolTypeId, StringComparison.InvariantCulture))
            return s;
      }

      null
    }

    private _nodes                : Dictionary[int,  HierarchyNode]           = Dictionary();
    private _localSymbols         : Dictionary[int,  IImportableSymbol]       = Dictionary();
    private _referencedAssemblies : Dictionary[byte, AssemblyName]            = Dictionary();
    private _externalSymbols      : Dictionary[int,  ExternalSymbolReference] = Dictionary();

    [Record]
    private struct ExternalSymbolReference
    {
      public SymbolTypeId : string { get; }
      public NodeId       : int    { get; }
      public ReferenceId  : byte   { get; }
    }
  }
}
