using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Parser
{
  internal class Grammars
  {
    private _grammarCompilers : List[GrammarCompiler] = List();
    private _manager : Compiler.ManagerClass;

    public this(manager : Compiler.ManagerClass)
    {
      _manager = manager;
    }

    public Add(gc : GrammarCompiler) : void
    {
      _grammarCompilers.Add(gc);
    }

    public static AddGrammarCompiler(manager : Compiler.ManagerClass, gc : GrammarCompiler) : void
    {
      def grammars = if (manager.UserData.Contains(typeof(Grammars)))
        manager.UserData[typeof(Grammars)] :> Grammars
      else
      {
        def grammars = Grammars(manager);
        manager.UserData[typeof(Grammars)] = grammars;
        manager.TypeTreeBuildFinish += _ => grammars.Generate();
        grammars
      }
      grammars.Add(gc);
    }

    public Generate() : void
    {
      when (!_manager.IsIntelliSenseMode)
      {
        def descriptors = _grammarCompilers.Map(gc => <[ typeof($(gc.GrammarTB.GetMemType() : typed).GrammarImpl) ]>);
        def grammars = <[ Nemerle.Parser.GrammarsAttribute(array[..$descriptors]) ]>;
        _manager.Hierarchy.AddAssemblyAttribute(_manager.CoreEnv, grammars);
      }
    }
  }
}
