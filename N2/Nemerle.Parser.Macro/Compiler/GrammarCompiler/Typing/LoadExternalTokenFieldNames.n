using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Parser.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Parser
{
  internal partial class GrammarCompiler
  {
    LoadExternalTokenFieldNames() : void
    {
      def env      = this.Manager.CoreEnv;
      def attrType = env.BindFixedType(<[ Nemerle.Parser.TokenFieldNameAttribute ]>);
      def loc      = LocationStack.Top();
      mutable tokenFieldNames = Map();
      
      foreach ((grammarRef, _) when grammarRef.Alias.IsNone in _externalGrammars)
      {
        def type = grammarRef.GrammarType.TypeInfo;
        
        foreach ((_, [<[ $(name : string) ]>, <[ array[..$tokens] ]>]) in type.GetModifiers().FindAttributesWithArgs(attrType.TypeInfo, env))
          foreach (<[ $(token : string) ]> in tokens)
            tokenFieldNames = tokenFieldNames.Replace(token, NameRef(loc, name));
      }
      
      _tokenFieldNames = tokenFieldNames;
    }
  }
}
