using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;

namespace N2.Model
{
  [Record]
  public class Usage : Attribute
  {
    public Text : string { get; private set; }
  }

  [Record]
  public variant RuleAttribute : Nemerle.Compiler.Located
  {
    | StartRule
    | Ast       { names : list[NameRef]; }
    | SpanClass { name  : NameRef; }
    | ExplicitSpaces
    
    public static GetUsages() : string
    {
      def ty = typeof(this);
      def options = ty.GetNestedTypes(BindingFlags.NonPublic | BindingFlags.Public);

      def makeUsage(opt : Type) : string
      {
        def attrs = opt.GetCustomAttributes(typeof(Usage), false);
        def usage = if (attrs.Length > 0) (attrs[0] :> Usage).Text else opt.Name;

        usage
      }

      $<#..$(options; " or "; makeUsage)#>
    }

    public override ToString() : string
    {
      match (this)
      {
        | StartRule                   => "StartRule"
        | Ast(names)                  => $"Ast$names"
        | SpanClass(name)             => $"SpanClass($name)"
        | ExplicitSpaces              => "ExplicitSpaces"
      }
    }
  }
}
