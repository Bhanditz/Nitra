using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Model
{
  [Record]
  public variant RuleDefinition : Nemerle.Compiler.Located
  {
    public Id              : int                  { get; }
    public Name            : NameRef              { get; }
    public Attributes      : list[RuleAttribute]  { get; }
    public TokenFieldNames : Map[string, NameRef] { get; }
    public KeywordRegexes  : list[KeywordRegex]   { get; }
    public ExtraFields     : list[ExtraField]     { get; }

    | ExtentionPoint   { retType : RuleType; }
    | ExtentionPrefix  { baseRuleName : NameRef; rule : Rule.Sequence; Names : list[NameRef]; }
    | ExtentionPostfix { baseRuleName : NameRef; bindingPower : int; rule : Rule.Sequence; Names : list[NameRef]; }
    | Simple           { retType : RuleType; rule : Rule.Sequence; Names : list[NameRef]; }
    | Regular          { rule : RegularRule; }
    | ExternalRule     { grammarRef : GrammarRef; isExtentionPoint : bool; }
    | Marker           { isExternal : bool }

    public IsStart     : bool { get { Attributes.Exists(_ is RuleAttribute.StartRule) } }
    public IsAst       : bool { get { !(this is Regular || this is ExternalRule || IsVoid) } }
    public IsExtention : bool { get { this is ExtentionPrefix || this is ExtentionPostfix } }
    public IsVoid      : bool { get { this is ExtentionPoint(Void) || this is Simple(Void, _, _) || this is Marker } }
    public IsExplicitSpaces : bool { [Memoize] get { Attributes.Exists(_ is RuleAttribute.ExplicitSpaces) } }
    public IsSuppressTrailingSpaces : bool { [Memoize] get { Attributes.Exists(_ is RuleAttribute.SuppressTrailingSpaces) } }

    public this(originalRuleDefinition : RuleDefinition)
    {
      base(originalRuleDefinition.Location);
      Id              = originalRuleDefinition.Id;
      Name            = originalRuleDefinition.Name;
      Attributes      = originalRuleDefinition.Attributes;
      TokenFieldNames = originalRuleDefinition.TokenFieldNames;
      KeywordRegexes  = originalRuleDefinition.KeywordRegexes;
      ExtraFields     = originalRuleDefinition.ExtraFields;
    }

    [Memoize]
    public GetNames(importedTokenFieldNames : Map[string, NameRef]) : list[NameRef]
    {
      //assert2("cond" != Name.AsName);
      def isNotImportantRule(rule : Rule) { !(rule.Type is RuleType.Void || rule is Rule.String) }
      def subRules = GetSubRules();
      def subRulesCount = subRules.Length;
      def names : list[_] = 
        match (this.Attributes.Find(_ is RuleAttribute.Ast))
        {
          | Some(ast is RuleAttribute.Ast) =>
            if (ast.names.Length == subRulesCount)
              ast.names
            else 
            {
              Message.Error(ast.Location, $"Expected $subRulesCount member got $(ast.names.Length)");
              
              if (ast.names.Length > subRulesCount)
                ast.names.Take(subRulesCount).NToList()
              else
                ast.names + NList.Repeat(NameRef(LocationStack.Top(), "_"), subRulesCount - ast.names.Length)
            }
            
          | _ when subRulesCount == 0 => []
          | _ => def loc = NameRef(LocationStack.Top(), "_"); NList.Repeat(loc, subRulesCount)
        };
      def aliases =
        match (this)
        {
          | ExtentionPrefix(rule=rule, Names=ns) | ExtentionPostfix(rule=rule, Names=ns) | Simple(rule=rule, Names=ns) =>
            def names = ns.NToList();
            assert2(names.Length == rule.rules.Length);
            NList.Map2(names, rule.rules, (n, r) => if (r.Type is RuleType.Void) null else n).Filter(null != _)
            
          | _ => null
        };
      
      def makeName(name : NameRef, rule : Rule) : NameRef
      {
        def toPascalCase(str : string, suffix : string = null) : string
        {
          def suffixIsEmpty = string.IsNullOrEmpty(suffix);
          if (str.Length == 0 || (char.IsUpper(str[0]) && suffixIsEmpty))
            str
          else
          {
            def suffixLength = if (suffixIsEmpty) 0 else suffix.Length;
            def buffer = array(suffixLength + str.Length);
            when (suffixLength > 0)
              suffix.CopyTo(0, buffer, 0, suffixLength);
            str.CopyTo(0, buffer, suffixLength, str.Length);
            buffer[suffixLength] = char.ToUpperInvariant(buffer[suffixLength]);
            string(buffer)
          }
        }
        def toPascalCaseName(name : NameRef) : NameRef
        {
          def str = name.Parts.Last;
          if (str.Length == 0 || char.IsUpper(str[0]))
            name
          else
            NameRef(name.Location, toPascalCase(str))
        }
        def makeKeywordName(str : string) : string
        {
          def isIdentifier(str : string) : bool
          {
            if (str.Length == 0)
              false
            else
            {
              def ch = str[0];
                  
              if (ch == '_' || char.IsLetter(ch))
                str.Exists(ch => ch == '_' || char.IsLetterOrDigit(ch)) // TODO: Performance problem
              else
                false
            }
          }

          if (isIdentifier(str))
            toPascalCase(str, "Kw")
          else
            Message.FatalError(rule.Location, $<#Name for literal "$str" not defined. You should define it by 'token field Name = String;' statement.#>)
        }
        def makeNameForRule(rule : Rule) : NameRef
        {
          | String(str) when this.TokenFieldNames.Contains(str) => this.TokenFieldNames.Get(str)
          | String(str) when importedTokenFieldNames.Contains(str)    => importedTokenFieldNames.Get(str)
          | String(str) => NameRef(name.Location, makeKeywordName(str))
          | Call(name, _) => toPascalCaseName(name)
          | PrefixCall(name, _) => toPascalCaseName(name)
          | Sequence([String as r, Rule(Type = RuleType.Void)]) => makeNameForRule(r) // handling inserted whitespace after string literals
          | Sequence(rules) when rules.Count(isNotImportantRule) == 1 => makeNameForRule(rules.First(isNotImportantRule))
          | Repeat(_, _, rule)
          | RepeatWithSeparator(_, _, rule, _) =>
            def name2 = makeNameForRule(rule);
            NameRef(name2.Location, name2.AsName + "s")
          
          | _ => 
            assert2(false);
            Message.FatalError(rule.Location, $<#Name for rule "$rule" not defined.#>)
        }
                  
        match (name.Parts)
        {
          | ["_"]  => makeNameForRule(rule)
          | [_]    => name
          | _      => assert2(false); assert(false);
        }
      }
      assert2(aliases == null || aliases.Length == names.Length);
      def names = if (aliases == null) names else NList.Map2(names, aliases, (n, alias) => if (n.AsName == "_") alias else n);;
      def names = NList.Map2(names, subRules, makeName);
      def nameIndex = Hashtable(names.GroupBy(n => n).Where(g => g.Count() > 1).Select(g => (g.Key, 1)));
      def makeIndexedName(n : NameRef) : NameRef
      {
        mutable index;
            
        if (nameIndex.TryGetValue(n, out index))
        {
          nameIndex[n] = index + 1;
          NameRef(n.Location, n.AsName + index)
        }
        else
          n
      }
      def result = names.Map(makeIndexedName);
      result
    }

    public GetRule() : option[Rule]
    {
      match (this)
      {
        | Marker
        | ExternalRule
        | Regular
        | ExtentionPoint         => None()
        | ExtentionPrefix as rd  => Some(rd.rule)
        | ExtentionPostfix as rd => Some(rd.rule)
        | Simple as rd           => Some(rd.rule)
      }
    }

    public GetSubRules() : list[Rule]
    {
      match (this)
      {
        | Marker
        | ExternalRule
        | Regular
        | ExtentionPoint         => []
        | ExtentionPrefix as rd  => rd.rule.GetSubRules()
        | ExtentionPostfix as rd => rd.rule.GetSubRules()
        | Simple as rd           => rd.rule.GetSubRules()
      }
    }

    public override Equals(that : object) : bool
    {
      | that is RuleDefinition => Id == that.Id
      | _ => false
    }

    public override GetHashCode() : int
    {
      Id.GetHashCode()
    }
  }
}
