using System;
using System.Collections.Generic;
using System.Text;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace N2.Model
{
  public class Grammar
  {
    private _grammar : Map[NameRef, RuleDefinition] = Map();

    public GrammarRefs : list[GrammarRef] { get; default [] }

    public SpanClasses : list[SpanClass]  { get; default [] }

    public BracePairs : list[BracePair]  { get; default [] }

    public this()
    {
    }

    private this
      ( grammar : Map[NameRef, RuleDefinition]
      , grammarRefs : list[GrammarRef]
      , spanClasses : list[SpanClass]
      , bracePairs : list[BracePair]
      )
    {
      _grammar = grammar;
      GrammarRefs = grammarRefs;
      SpanClasses = spanClasses;
      BracePairs = bracePairs;
    }

    public Add(ruleDefinition : RuleDefinition) : Grammar
    {
      Grammar(_grammar.Add(ruleDefinition.Name, ruleDefinition), GrammarRefs, SpanClasses, BracePairs);
    }

    public Add(grammarRef : GrammarRef) : Grammar
    {
      Grammar(_grammar, grammarRef :: GrammarRefs, SpanClasses, BracePairs);
    }

    public Add(spanClass : SpanClass) : Grammar
    {
      Grammar(_grammar, GrammarRefs, spanClass :: SpanClasses, BracePairs);
    }

    public Add(bracePair : BracePair) : Grammar
    {
      Grammar(_grammar, GrammarRefs, SpanClasses, bracePair :: BracePairs);
    }

    public GetRule(name : NameRef) : RuleDefinition
    {
      if (_grammar.Contains(name))
        _grammar.Get(name);
      else
        throw GrammarException($"There is no rule \"$name\" in grammar.", name.Location);
    }

    public Count : int
    {
      get { _grammar.Count }
    }

    public Names : list[NameRef]
    {
      get { _grammar.Map((name, _) => name) }
    }

    public Rules : list[RuleDefinition]
    {
      get { _grammar.Map((_, rd) => rd) }
    }

    public TransformRules
      ( transformSimple : RuleDefinition.Simple -> Rule.Sequence
      , transformExtentionPrefix : RuleDefinition.ExtentionPrefix -> Rule.Sequence
      , transformExtentionPostfix : RuleDefinition.ExtentionPostfix -> Rule.Sequence
      , transformRegular : RuleDefinition.Regular -> RegularRule
      ) : Grammar
    {
      _grammar.Fold(Grammar(Map(), GrammarRefs, SpanClasses, BracePairs), (_, rd, newGrammar) =>
      {
        def rd = match (rd : RuleDefinition)
        {
          | ExternalRule
          | ExtentionPoint  => rd
          | ExtentionPrefix as rd =>
            RuleDefinition.ExtentionPrefix
              ( rd.Location
              , rd.Id
              , rd.Name
              , rd.Attributes
              , rd.TokenFieldNames
              , rd.ExtraFields
              , rd.baseRuleName
              , transformExtentionPrefix(rd)
              , rd.Names
              )

          | ExtentionPostfix as rd =>
            RuleDefinition.ExtentionPostfix
              ( rd.Location
              , rd.Id
              , rd.Name
              , rd.Attributes
              , rd.TokenFieldNames
              , rd.ExtraFields
              , rd.baseRuleName
              , rd.bindingPower
              , transformExtentionPostfix(rd)
              , rd.Names
              )

          | Simple as rd    =>
            RuleDefinition.Simple
              ( rd.Location
              , rd.Id
              , rd.Name
              , rd.Attributes
              , rd.TokenFieldNames
              , rd.ExtraFields
              , rd.retType
              , transformSimple(rd)
              , rd.Names
              )

          | Regular as rd    =>
            RuleDefinition.Regular
              ( rd.Location
              , rd.Id
              , rd.Name
              , rd.Attributes
              , rd.TokenFieldNames
              , rd.ExtraFields
              , transformRegular(rd)
              )
        }
        newGrammar.Add(rd)
      })
    }

    /*public IsOptional(rule : Rule) : bool // TODO:Remove?
    {
      def isOptionalImpl(rule : Rule, visited : HashSet[Rule]) : bool
      {
        def isOptional = isOptionalImpl(_, visited);

        match (rule)
        {
          | Capture(_, rule1)                 => isOptional(rule1)
          | Choice(rules2)                    => rules2.Exists(isOptional)
          | Sequence(rules3)                  => rules3.ForAll(isOptional)
          | Repeat(n, _, rule5)               => n == 0 || isOptional(rule5)
          | Not                               => true
          | And                               => true
          | Scope(_, rule8)                   => isOptional(rule8)
          | Call(name, _)                     =>
            match (this.GetRule(name).GetRule())
            {
              | Some(r) =>
                if (visited.Add(r))
                  isOptional(r)
                else
                  false
              | _ => false
            }

          | Chars | Fsm                       => false
          | Cut                               => false // ???
        }
      }
      
      isOptionalImpl(rule, HashSet([rule]))
    }*/

    public override ToString() : string
    {
      def sb = StringBuilder();
      _ = sb.AppendLine($"Count:$Count");
      _ = sb.AppendLine("rules:");
      foreach((name, rule) in _grammar)
      {
        _ = sb.AppendLine($"  name:$(name)");
        _ = sb.AppendLine($"  rule type:$(rule.GetType().ToString())");
        _ = sb.AppendLine($"  rule:$(rule.ToString())");
        _ = sb.AppendLine(string.Empty);
      }

      sb.ToString()
    }
  }
}
