using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Model
{
  [Record]
  public variant ExtraField : Located
  {
    | Def        { Name : NameRef; Params : list[Name *  PExpr]; Type : PExpr; Body : PExpr; }
    | DefPrivate { Name : NameRef; Params : list[Name *  PExpr]; Type : PExpr; Body : PExpr; }
    | Abstract   { Name : NameRef; Params : list[Name *  PExpr]; Type : PExpr; }
    | Override   { Name : NameRef; Body : PExpr; }
    | OnError    { Name : NameRef; Body : PExpr; }

    public override ToString() : string
    {
      match (this)
      {
        | Override  (name, body) => $<#override $name = { $body };#>
        | OnError   (name, body) => $<#error $name = { $body };#>
        | Abstract  (name, parameters, type)       with (m = "",         end = ";")
        | Def       (name, parameters, type, body) with (m = "",         end = $"{ $body }")
        | DefPrivate(name, parameters, type, body) with (m = "private ", end = $"{ $body }") => 
          $<#$m$name(..$(parameters; ", "; ((p, t)) => $"$p : $t")) : $type$end#>
      }
    }
  }
}
