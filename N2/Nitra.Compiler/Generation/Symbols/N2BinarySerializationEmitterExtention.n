using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class N2SymbolRefBinarySerializationEmitterExtension : IBinarySerializationEmitterExtension
  {
    _environment : EmitterEnvironment;

    [RecordIgnore] mutable _nitraTypesWriterParam : string;
    [RecordIgnore] mutable _nitraTypesReaderParam : string;

    public CreateParameters(emitter : BinarySerializationEmitter) : void
    {
      _nitraTypesWriterParam = emitter.CreateSerializationParameter("nitraTypesWriter", <[ Nitra.Serialization.IN2TypesWriter ]>);
      _nitraTypesReaderParam = emitter.CreateDeserializationParameter("nitraTypesReader", <[ Nitra.Serialization.IN2TypesReader ]>);
    }

    public IsSupportedType(type : FixedType) : bool
    {
      type.TryRequire(_environment.IExportableSymbolTypeVar)
       || type.TryRequire(_environment.SymbolTypeVar)
       || type.Equals(_environment.LocationTypeVar)
    }

    public MakeWriteCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(_environment.IExportableSymbolTypeVar))
        <[ $(_nitraTypesWriterParam : usesite).WriteSymbolRef(obj, writer); ]>
      else if (type.TryRequire(_environment.SymbolTypeVar))
        <[ $(_nitraTypesWriterParam : usesite).WriteSymbolRef(obj :> Nitra.Serialization.IExportableSymbol, writer); ]>
      else if (type.Equals(_environment.LocationTypeVar))
        <[ $(_nitraTypesWriterParam : usesite).WriteLocation(obj, writer); ]>
      else
        assert(false)
    }

    public MakeReadCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(_environment.IExportableSymbolTypeVar) || type.TryRequire(_environment.SymbolTypeVar))
        <[
          ignore(typeCode);
          $(_nitraTypesReaderParam : usesite).ReadSymbolRef(reader) :> $(type : typed);
        ]>
      else if (type.Equals(_environment.LocationTypeVar))
        <[
          ignore(typeCode);
          $(_nitraTypesReaderParam : usesite).ReadLocation(reader);
        ]>
      else
        assert(false)
    }
  }
}
