using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class PostfixRuleWalkerEmitter : RuleWalkerEmitter[ExtensionRuleSymbol]
    {
      [RecordIgnore] public override WalkerTb : TypeBuilder { get; private set; }

      public override RuleParserBaseType : PExpr
      {
        get { <[ Nitra.Internal.ExtensionRuleParser ]> }
      }

      public override Define(walkersModule : TypeBuilder) : void
      {
        Generator.Init(this);

        def baseRule = Rule.BaseRule.Value;

        WalkerTb = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.DecorateWalkerName("Walker") : usesite) : $(WalkerEmitter.GetRuleWalkerFullName(baseRule, Generator, "PostfixWalker"))
          {
            private RuleParser : $(Rule.GetParserClassRef());

            public this(ruleParser : $(RuleParserBaseType))
            {
              RuleParser = ruleParser :> $(Rule.GetParserClassRef());
            }
          }
        ]>);

        def signature = Generator.GetSignature(baseRule);
        def code =
          if (Environment.IsIdeMode)
            <[ assert(false) ]>
          else
            Generator.WalkerCodeForExtensionRule(Rule);

        def returnTypeIsVoid = signature.ReturnType is <[ void ]>; // TODO: сделать более точную проверку на void
        def postfixParameters =
        {
          def mandatoryParameters =
            <[ parameter: __startPos : int ]>
            :: <[ parameter: pos : ref int ]>
            :: <[ parameter: astPtr : int ]>
            :: <[ parameter: parseResult : Nitra.Internal.ParseResult ]>
            :: signature.Parameters;

          if (returnTypeIsVoid) mandatoryParameters
          else <[ parameter: prefix : $(signature.ReturnType) ]> :: mandatoryParameters;
        }

        WalkerTb.DefineConditional(<[ decl:
          public override Walk(..$postfixParameters) : $(signature.ReturnType)
          {
            unchecked { $code; }
          }
        ]>);

        DefineInitMethod();
      }

      public override Emit() : void
      {
        WalkerTb.Compile();
      }
    }
  }
}
