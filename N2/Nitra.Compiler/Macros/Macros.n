using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    def manager = Nemerle.Macros.Manager();
    manager.MacroColors.InGlobalColor(N2SourceImpl.Instance(path, manager).BeforeInheritance);
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    def manager = Nemerle.Macros.Manager();
    manager.MacroColors.InGlobalColor(N2SourceImpl.Instance(path, manager).BeforeTypedMembers);
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    def manager = Nemerle.Macros.Manager();
    manager.MacroColors.InGlobalColor(N2SourceImpl.Instance(path, manager).WithTypedMembers);
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  public macro ExportableSymbol(tb : TypeBuilder, externalSymbolTypeName : PExpr = null)
  {
    tb.AddImplementedInterface(<[ Nitra.Serialization.IExportableSymbol ]>);
    def externalSymbolType =
      if (externalSymbolTypeName == null)
        None()
      else match (TypeVarEnv(tb.Manager).BindFixedType(tb.GlobalEnv, tb, externalSymbolTypeName, false))
      {
        | FixedType.Class(TypeBuilder as externalSymbolTb, []) =>
          externalSymbolTb.AddImplementedInterface(<[ Nitra.Serialization.IImportableSymbol ]>);
          externalSymbolTb.DisableImplicitConstructor();
          Some(externalSymbolTb)

        | _ =>
          Message.Error("Invalid external symbol type specified");
          None()
      };
    N2SourceImpl.AddExportableSymbol(tb, externalSymbolType);
  }
}
