using N2.Runtime;
using N2.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public partial class ParseResult
  {
    private _extensibleStackFrameCache : SCG.Dictionary[RecoveryStackFrame.Extensible, RecoveryStackFrame.Extensible] = SCG.Dictionary();
    public RecoveryStackFrame_Extensible(parent : RecoveryStackFrame, startPos : int, textPos : int, rulePraser : ExtensibleRuleParser, state : int) : RecoveryStackFrame.Extensible
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.Extensible(this, textPos, startPos, rulePraser, state), parent, _extensibleStackFrameCache);
    }

    public RecoveryStackFrame_Extensible_AlwaysReturn(parent : RecoveryStackFrame, startPos : int, textPos : int, rulePraser : ExtensibleRuleParser, state : int) : RecoveryStackFrame.Extensible
    {
      CacheRecoveryStackFrame_AlwaysReturn(RecoveryStackFrame.Extensible(this, textPos, startPos, rulePraser, state), parent, _extensibleStackFrameCache);
    }

    private _extensiblePrefixStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ExtensiblePrefix, RecoveryStackFrame.ExtensiblePrefix] = SCG.Dictionary();
    public RecoveryStackFrame_ExtensiblePrefix(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.ExtensiblePrefix, rulePraser : ExtensibleRuleParser) : RecoveryStackFrame.ExtensiblePrefix
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ExtensiblePrefix(this, textPos, astHandle, rulePraser), parent, _extensiblePrefixStackFrameCache);
    }

    public RecoveryStackFrame_ExtensiblePrefix_AlwaysReturn(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.ExtensiblePrefix, rulePraser : ExtensibleRuleParser) : RecoveryStackFrame.ExtensiblePrefix
    {
      CacheRecoveryStackFrame_AlwaysReturn(RecoveryStackFrame.ExtensiblePrefix(this, textPos, astHandle, rulePraser), parent, _extensiblePrefixStackFrameCache);
    }

    private _extensiblePostfixStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ExtensiblePostfix, RecoveryStackFrame.ExtensiblePostfix] = SCG.Dictionary();
    public RecoveryStackFrame_ExtensiblePostfix(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.ExtensiblePostfix, rulePraser : ExtensibleRuleParser) : RecoveryStackFrame.ExtensiblePostfix
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ExtensiblePostfix(this, textPos, astHandle, rulePraser), parent, _extensiblePostfixStackFrameCache);
    }

    public RecoveryStackFrame_ExtensiblePostfix_AlwaysReturn(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.ExtensiblePostfix, rulePraser : ExtensibleRuleParser) : RecoveryStackFrame.ExtensiblePostfix
    {
      CacheRecoveryStackFrame_AlwaysReturn(RecoveryStackFrame.ExtensiblePostfix(this, textPos, astHandle, rulePraser), parent, _extensiblePostfixStackFrameCache);
    }

    private _ruleStackFrameCache : SCG.Dictionary[RecoveryStackFrame.Rule, RecoveryStackFrame.Rule] = SCG.Dictionary();
    public RecoveryStackFrame_Rule(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle, state : int) : RecoveryStackFrame.Rule
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.Rule(this, textPos, astHandle, state), parent, _ruleStackFrameCache);
    }

    public RecoveryStackFrame_Rule_AlwaysReturn(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle, state : int) : RecoveryStackFrame.Rule
    {
      CacheRecoveryStackFrame_AlwaysReturn(RecoveryStackFrame.Rule(this, textPos, astHandle, state), parent, _ruleStackFrameCache);
    }

    private _listBodyStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ListBody, RecoveryStackFrame.ListBody] = SCG.Dictionary();
    public RecoveryStackFrame_ListBody(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.Subrule, state : int, counter : int) : RecoveryStackFrame.ListBody
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ListBody(this, textPos, astHandle, state, counter), parent, _listBodyStackFrameCache);
    }

    public RecoveryStackFrame_ListBody_AlwaysReturn(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.Subrule, state : int, counter : int) : RecoveryStackFrame.ListBody
    {
      CacheRecoveryStackFrame_AlwaysReturn(RecoveryStackFrame.ListBody(this, textPos, astHandle, state, counter), parent, _listBodyStackFrameCache);
    }

    private _listSeparatorStackFrameCache : SCG.Dictionary[RecoveryStackFrame.ListSeparator, RecoveryStackFrame.ListSeparator] = SCG.Dictionary();
    public RecoveryStackFrame_ListSeparator(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.Subrule, state : int, counter : int) : RecoveryStackFrame.ListSeparator
    {
      CacheRecoveryStackFrame(RecoveryStackFrame.ListSeparator(this, textPos, astHandle, state, counter), parent, _listSeparatorStackFrameCache);
    }

    public RecoveryStackFrame_ListSeparator_AlwaysReturn(parent : RecoveryStackFrame, textPos : int, astHandle : AstHandle.Subrule, state : int, counter : int) : RecoveryStackFrame.ListSeparator
    {
      CacheRecoveryStackFrame_AlwaysReturn(RecoveryStackFrame.ListSeparator(this, textPos, astHandle, state, counter), parent, _listSeparatorStackFrameCache);
    }

    private CacheRecoveryStackFrame[FrameType](newFrame : FrameType, parent : RecoveryStackFrame, cache : SCG.Dictionary[FrameType, FrameType]) : FrameType
      where FrameType : RecoveryStackFrame
    {
      mutable oldFrame;
      if (cache.TryGetValue(newFrame, out oldFrame))
      {
        when (parent != null)
        {
          //assert3(parent.TextPos == oldFrame.StartPos);
          when (GetAllParents(parent).Contains(oldFrame))
            return null;
          _ = oldFrame.Parents.Add(parent);
          CheckRecoveryStackFrameDAG(oldFrame);
        }
        null
      }
      else
      {
        when (parent != null)
        {
          //assert3(parent.TextPos == newFrame.StartPos);
          when (GetAllParents(parent).Contains(newFrame))
            return null;
          _ = newFrame.Parents.Add(parent);
          CheckRecoveryStackFrameDAG(newFrame);
        }
        cache.Add(newFrame, newFrame);
        newFrame
      }
    }

    private CacheRecoveryStackFrame_AlwaysReturn[FrameType](newFrame : FrameType, parent : RecoveryStackFrame, cache : SCG.Dictionary[FrameType, FrameType]) : FrameType
      where FrameType : RecoveryStackFrame
    {
      mutable oldFrame;
      if (cache.TryGetValue(newFrame, out oldFrame))
      {
        when (parent != null)
        {
          //assert3(parent.TextPos == oldFrame.StartPos);
          when (GetAllParents(parent).Contains(oldFrame))
            return null;
          _ = oldFrame.Parents.Add(parent);
          CheckRecoveryStackFrameDAG(oldFrame);
        }
        oldFrame
      }
      else
      {
        when (parent != null)
        {
          //assert3(parent.TextPos == newFrame.StartPos);
          when (GetAllParents(parent).Contains(oldFrame))
            return null;
          _ = newFrame.Parents.Add(parent);
          CheckRecoveryStackFrameDAG(newFrame);
        }
        cache.Add(newFrame, newFrame);
        newFrame
      }
    }

    private GetAllParents(frame : RecoveryStackFrame) : SCG.HashSet[RecoveryStackFrame]
    {
      def parents = SCG.HashSet();
      def check(parents, frame)
      {
        foreach (parent in frame.Parents)
          when (parents.Add(parent))
            check(parents, parent);
      }
      check(parents, frame);
      parents
    }

    public CheckRecoveryStackFrameDAG(frame : RecoveryStackFrame) : void
    {
      when (GetAllParents(frame).Contains(frame))
        assert3(false);
    }
  }
}
