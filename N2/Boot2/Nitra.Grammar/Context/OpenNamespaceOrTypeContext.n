using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = N2SyntaxAst;

namespace N2.Typing
{
  public class OpenNamespaceOrTypeContext : Context, INemerleEnvironmentContext
  {
    public OpenPath   : G.QualifiedIdentifier  { get; }
    public OpenSymbol : option[Symbol] { get; }

    public this(parent : Context, path : G.QualifiedIdentifier)
    {
      base(parent);
      OpenPath   = path;
      def parent = GetParent.[EnteredScopeContext]();
      // FIXME: we should check existence of namespace or type
      OpenSymbol = parent.TryBind(path);
    }

    [Memoize]
    GetNemerleEnvironment() : GlobalEnv implements INemerleEnvironmentContext.GetNemerleEnvironment
    {
      def parentEnv = Parent.GetNemerleEnvironment();
      parentEnv.AddOpenNamespace(OpenPath.Parts(), OpenPath.NLocation())
    }

    public override ToString() : string
    {
      OpenSymbol.Map(sym => "using " + sym.FullName) ?? "using <Error>"
    }
  }
}
