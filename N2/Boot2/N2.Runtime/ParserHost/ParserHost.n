using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    public SyncRoot : object { get; default object(); }

    private DefaultCompositeGrammar : CompositeGrammar { get; }

    internal AssemblyScope : Func[Seq[Assembly]] { get; }
    
    public RecoveryStrategy : Func[int, Parser, RecoveryResult] { get; set; }

    public this()
    {
      this(_defaultAssemblyScope)
    }

    public this(assemblyScope : Func[Seq[Assembly]])
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
      _compositeGrammars.Add(DefaultCompositeGrammar.Grammars, DefaultCompositeGrammar);
      AssemblyScope = assemblyScope;
    }

    private _walkers : Hashtable[string, WalkerHost] = Hashtable();

    public GetWalkerHost(walkerType : string) : WalkerHost
    {
      lock (SyncRoot)
      {
        if (_walkers.Contains(walkerType))
          _walkers[walkerType]
        else
        {
          def host = WalkerHost(this, walkerType);
          foreach (compositeGrammar in _compositeGrammars.Values)
            host.AddCompositeGrammar(compositeGrammar);
          _walkers[walkerType] = host;
          host;
        }
      }
    }

    private static _defaultAssemblyScope : Func[Seq[Assembly]] = () => AppDomain.CurrentDomain.GetAssemblies();
  }
}
