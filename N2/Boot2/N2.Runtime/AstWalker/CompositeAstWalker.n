using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public class CompositeAstWalker
  {
    public Grammar                  : CompositeGrammar;
    public WalkerHost               : WalkerHost;

    private SimpleWalkers           : Hashtable[SimpleRuleDescriptor, AstWalkerBase];
    private ExtensibleWalkersData   : Hashtable[ExtensibleRuleDescriptor, IExtensibleRuleAstWalkerData];

    internal NewWalker(ruleParser : RuleParser) : AstWalkerBase
    {
      WalkerHost.Type.FindGrammarWalkerDescriptor(ruleParser.Descriptor.Grammar).NewWalker(ruleParser)
    }

    internal NewExtensibleRuleAstWalkerData(parserData : ExtensibleRuleParserData) : IExtensibleRuleAstWalkerData
    {
      WalkerHost.Type.FindGrammarWalkerDescriptor(parserData.Descriptor.Grammar).NewExtensibleRuleAstWalkerData(parserData, this) :> IExtensibleRuleAstWalkerData // TODO
    }

    public this(host : WalkerHost, grammar : CompositeGrammar)
    {
      WalkerHost            = host;
      Grammar               = grammar;
      SimpleWalkers         = grammar.SimpleRuleParsers.Map((descriptor, parser) => (descriptor, NewWalker(parser)));
      ExtensibleWalkersData = grammar.ExtensibleRules.Map((descriptor, parserData) => (descriptor, NewExtensibleRuleAstWalkerData(parserData)));

      foreach (walker when walker != null in SimpleWalkers.Values)
        walker.Init(this);
      foreach (walker in ExtensibleWalkersData.Values)
        walker.Init();
    }

    public GetWalker[T](ruleDescriptor : SimpleRuleDescriptor) : SimpleAstWalker[T]
    {
      SimpleWalkers[ruleDescriptor] :> SimpleAstWalker[T]
    }

    public GetWalker[T](ruleDescriptor : ExtensibleRuleDescriptor, bindingPower : int) : ExtensibleAstWalker[T]
    {
      def walkers = (ExtensibleWalkersData[ruleDescriptor] :> ExtensibleRuleAstWalkerData[T]).Walkers;
      assert(bindingPower >= 0 && bindingPower < walkers.Length);
      assert(walkers[bindingPower] != null);
      walkers[bindingPower]
    }
  }
}
