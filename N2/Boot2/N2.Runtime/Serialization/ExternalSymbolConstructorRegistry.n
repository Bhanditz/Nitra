using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Typing;

using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace N2.Serialization
{
  public sealed class ExternalSymbolConstructorRegistry
  {
    private _readers : Dictionary[string, Action[ISymbolRefReader, BinaryReader]] = Dictionary();

    public Register(assembly : Assembly) : void
    {
      foreach (attr in assembly.GetCustomAttributes(typeof(ExportableSymbolsAttribute), false) :> array[ExportableSymbolsAttribute])
        foreach (symbolType in attr.SymbolTypes)
          Register(symbolType);
    }

    public Register(symbolType : Type) : void
    {
      def symbolTypeId = symbolType.FullName;
      def externalSymbolTypeName = (if (string.IsNullOrEmpty(symbolType.Namespace)) "TEMP." else symbolType.Namespace + ".TEMP.") + "External" + symbolType.Name;
      def externalSymbolType     = symbolType.Assembly.GetType(externalSymbolTypeName, throwOnError = true);
      def readSymbolsMethod      = externalSymbolType.GetMethod("CreateSymbols", BindingFlags.Public | BindingFlags.Static);
      def reader = Delegate.CreateDelegate(typeof(Action[ISymbolRefReader, BinaryReader]), readSymbolsMethod) :> Action[ISymbolRefReader, BinaryReader];
      _readers.Add(symbolTypeId, reader);
    }

    public Resolve(symbolTypeId : string) : Action[ISymbolRefReader, BinaryReader]
    {
      _readers[symbolTypeId]
    }

    public static CreateFromAppDomainAssemblies() : ExternalSymbolConstructorRegistry
    {
      def registry = ExternalSymbolConstructorRegistry();
      foreach (assembly in AppDomain.CurrentDomain.GetAssemblies())
        registry.Register(assembly);
      registry
    }
  }
}
