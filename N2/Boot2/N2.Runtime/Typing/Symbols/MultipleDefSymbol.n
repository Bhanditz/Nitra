using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace N2.Typing
{
  public abstract class MultipleDefSymbol : Symbol
  {
    volatile mutable _defenitions : list[Location];
    public Defenitions : list[Location] { get { _defenitions } }

    protected this(name : string)
    {
      base(name);
      _defenitions = [];
    }
    
    protected this(name : Location)
    {
      base(name.GetText());
      _defenitions = [name];
    }

    protected this(name : Located)
    {
      this(name.Location)
    }
    
    public AddDefenition(location : Location) : void
    {
      def defenitions         = _defenitions;
      def newDefenitions      = location :: defenitions;
      def originalDefenitions = Interlocked.Exchange(ref _defenitions, newDefenitions);
      
      when (originalDefenitions : object != defenitions)
        AddDefenition(location)
    }

    public override Locations : list[Location] { get { Defenitions } }
    public override FirstLocation : Location { get { Defenitions.Head } }
  }
}
