using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace N2.Typing
{
  public abstract class MultipleDefSymbol : Symbol
  {
    volatile mutable _definitions : list[Location];
    public Defenitions : list[Location] { get { _definitions } }

    protected this(name : string)
    {
      base(name);
      _definitions = [];
      AssemblyId   = AssemblyIds.NoAssembly;
    }
    
    protected this(name : Location)
    {
      base(name.GetText());
      _definitions = [name];
      AssemblyId   = AssemblyIds.NoAssembly;
    }

    protected this(name : Located)
    {
      this(name.Location)
    }
    
    public AddDefenition(location : Location) : void
    {
      def definitions         = _definitions;
      def newDefinitions      = location :: definitions;
      def originalDefinitions = Interlocked.Exchange(ref _definitions, newDefinitions);

      when (originalDefinitions : object != definitions)
        AddDefenition(location)
    }

    public override Locations : list[Location] { get { Defenitions } }
    public override FirstLocation : Location { get { Defenitions.Head } }
  }
}
