using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using N2.Internal;

namespace N2
{
  public abstract class Ast : Located
  {
    public this(location : Location)
    {
      base(location);
    }

    public virtual GetDump() : AstDump
    {
      AstDump.Ast(GetType().FullName, []) // stub
    }

    public override ToString() : string
    {
      ToString(N2.ToStringOptions.DebugIndent)
    }

    public ToString(options : N2.ToStringOptions) : string
    {
      def code = StringBuilder();
      PrettyPrint(code, 0, options);
      code.ToString()
    }

    protected static Indent(code : StringBuilder, currentIndent : int) : void
    {
      // TODO: Make indent customizable.
      _ = code.Append(' ', currentIndent * 2);
    }

    protected static Unindent(code : StringBuilder, _currentIndent : int) : void
    {
      // TODO: Make indent customizable.
      when (code.Length > 2)
      {
        assert2(code[code.Length - 1] == ' ');
        assert2(code[code.Length - 2] == ' ');
        code.Length -= 2;
      }
    }

    public PrettyPrint(code : StringBuilder, currentIndent : int, options : ToStringOptions) : void
    {
      mutable lastStartLine;
      mutable lastIndntEnd;
      PrettyPrint(code, currentIndent, options, ref lastStartLine, ref lastIndntEnd);
    }

    public virtual PrettyPrint(code : StringBuilder, currentIndent : int, options : ToStringOptions, lastStartLine : ref int, lastIndntEnd : ref int) : void
    {
      ignore(code, currentIndent, options, lastStartLine, lastIndntEnd);
    }
  }
}
