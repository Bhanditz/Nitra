using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace N2
{
  public class StringPrettyPrintWriter : PrettyPrintWriter
  {
    _buffer : StringBuilder;

    mutable _currentIndent : int;
    mutable _lastStartLine : int;
    mutable _lastIndentEnd : int;

    public this(options : PrettyPrintOptions = PrettyPrintOptions.None)
    {
      base(options);
      _buffer = StringBuilder();
    }

    public override Token(source : SourceSnapshot, token : NToken) : void
    {
      _ = _buffer.Append(source.Text, token.StartPos, token.Length);
    }

    public override String(token : NToken, text : string) : void
    {
      if (token.IsEmpty)
        when (Options %&& PrettyPrintOptions.MissingNodes)
          _ = _buffer.Append('<').Append(text).Append('>');
      else
        _ = _buffer.Append(text);
    }

    public override MissingNode(ruleDescriptor : RuleDescriptor) : void
    {
      when (Options %&& PrettyPrintOptions.MissingNodes)
        _ = _buffer.Append('<').Append(ruleDescriptor.Name).Append('>');
    }

    public override NewLine() : void
    {
      IndentNewLine();
    }

    public override NewLineAndIndent() : void
    {
      _currentIndent++;
      IndentNewLine();
    }

    public override Whitespace() : void
    {
      _ = _buffer.Append(' ');
    }

    public override Indent() : void
    {
      _currentIndent++;
      when (Options %&& PrettyPrintOptions.DebugIndent && _lastStartLine != _buffer.Length)
        _ = _buffer.Append("!!! The indentation increasing not from the beginning of line. !!!");
      IndentCurrentLine();
    }

    public override Unindent() : void
    {
      _currentIndent--;
      if (_lastIndentEnd == _buffer.Length)
      {
        _buffer.Length = _lastStartLine;
        IndentCurrentLine();
      }
      else if (Options %&& PrettyPrintOptions.DebugIndent)
        _ = _buffer.Append("!!! no new line before indentation decreasing !!!");
      else
        IndentNewLine();
    }

    private IndentNewLine() : void
    {
      _ = _buffer.AppendLine();
      _lastStartLine = _buffer.Length;
      IndentCurrentLine();
    }

    private IndentCurrentLine() : void
    {
      // TODO: Make indent customizable.
      _ = _buffer.Append(' ', _currentIndent * 2);
      _lastIndentEnd = _buffer.Length;
    }

    public override ToString() : string
    {
      _buffer.ToString()
    }
  }
}
