using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial abstract class RuleField2
  {
    [Record]
    public sealed class TokenString : RuleField2
    {
      public Rule : Rule.String;
      public str : string;

      [RecordIgnore] public Field : AstStruct2.StructField { get; private set; }

      public override CalculateAstInfo() : void
      {
        Field = AstStruct2.StructField(ParentAstStruct, this, false, true);
      }

      public override Compile() : void
      {
        def astSize = <[ $(str.Length) ]>;
        def checkCode = if (str == "")
        {
          <[ true ]>
        }
        else
        {
          def len = str.Length;
          def check = if (len > 1) <[curEndPos + $((len - 1) : int)]> else <[ curEndPos ]>;

          def makeCharCheckCode(ch : char, i : int) : PExpr
          {
            def index = if (i <= 0) <[ curEndPos ]> else <[ curEndPos + $(i : int) ]>;
            <[ text[$index] == $(ch : char) ]>
          }
          def exprs = str.Select(makeCharCheckCode);
          def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);
          <[ $check < text.Length && $condExpr ]>
        }

        //assert2(false);

        def (debugSetStart, debugSetEnd, fail, exit) =
          if (this.Compiler.Owner.Environment.Manager.Options.EmitDebug)
            (<[ parser.LastParseStart = curEndPos; ]>,
             <[ parser.LastParseEnd = curEndPos; ]>,
             <[ parser.LastParseEnd = -1; ]>,
             <[ () ]>)
          else
            (<[ () ]>, <[ () ]>, <[ () ]>, <[ () ]>);

        when (!this.Location.IsEmpty && this.Location.IsSourceAvailable)
        {
          checkCode.Location = this.Location;
          // Make the location directly behind the rule call. This allows you to see the result of the parsing rules.
          exit.Location = N.Location(this.Location.FileIndex, this.Location.EndLine, this.Location.EndColumn, this.Location.Line, this.Location.EndColumn + 1);
        }

        ParseCode =
        <[
          $(ParseLabel.Label());
          $debugSetStart;
          if ($checkCode)
          {
            $(AllocateParentAst());
            $(ParentAstPtr.SizeRef(Field)) = $astSize;
            curEndPos += $astSize;
            $debugSetEnd;
            $exit;
            $(ContinueParseLabel.Goto());
          }
          else
          {
            parseState = $(State : int);//состояние
            $fail;
            $exit;
            $(FailParseLabel.Goto());
          }
        ]>;
      }

      public override PrintContent() : string * string { ("TokenString", $<#"$str"#>) }
    }
  }
}
