using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField2
  {
    [Record]
    public sealed class Predicate : RuleField2
    {
      public Rule : Rule;
      fields : array[RuleField2];
      isAnd  : bool;

      public override InitChildren(compiler : RuleParserEmitter, parent : RuleField2, level : int, allFields : SCG.List[RuleField2]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astStruct : AstStruct2;
      [RecordIgnore] private mutable astPtr    : AstPointer2;
      public override CalculateAstInfo() : void
      {
        astStruct = InternalAstStruct2(this);
        astPtr    = AstPointer2(astStruct, "astPtr", this);
        CalculateAstInfo(astStruct, astPtr, fields);
      }

      public override Compile() : void
      {
        def save = <[ $StartTextPos = $CurTextPos; ]>;
        def load = <[ $CurTextPos = $StartTextPos; ]>;
        ParseCode =
          if (isAnd)
          <[
            $(ParseLabel.Label());          $save; $(fields[0].ParseLabel.Goto());
            $(astStruct.OkLabel.Label());   $load; $(ContinueParseLabel.Goto());
            $(astStruct.FailLabel.Label()); $load; $(FailParseLabel.Goto());
          ]>
          else
          <[
            $(ParseLabel.Label());          $save; $(fields[0].ParseLabel.Goto());
            $(astStruct.OkLabel.Label());   $load; $(FailParseLabel.Goto());
            $(astStruct.FailLabel.Label()); $load; $(ContinueParseLabel.Goto());
          ]>;
      }

      public override PrintContent() : string * string { ("Predicate", $<#$(PrintChildren(fields)) $isAnd#>) }
    }
  }
}
