using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class ParsingRuleDescriptorEmitter : IVariableEmitter
  {
    public Owner      : SyntaxModuleEmitter { get; }
    public RuleSymbol : RuleDefSymbol       { get; }

    [RecordIgnore] private mutable _descriptorTb : TypeBuilder;

    public NeedsAstInfo : bool { get { true } }

    public DefineDescriptor(astSize : int, rootAstStruct : option[RootAstStruct2]) : void
    {
      assert(_descriptorTb == null);
      def baseType = match(RuleSymbol)
      {
        | ExtensibleRuleSymbol      => <[ ExtensibleRuleDescriptor ]>
        | ExtentionRuleSymbol as rs =>
          match (rs.ExtentionType)
          {
            | Prefix                => <[ PrefixRuleDescriptor ]>
            | Postfix               => <[ PostfixRuleDescriptor ]>
          }
        | SimpleRuleSymbol          => <[ SimpleRuleDescriptor ]>
        | RegularRuleSymbol         => <[ RegularRuleDescriptor ]>
        | _                         => assert(false)
      }
      def baseTypes = baseType :: if (RuleSymbol.Options.IsStart) [<[ N2.IStartRuleDescriptor ]>] else [];
      def descriptorClass = <[decl:
        public sealed class $(RuleSymbol.DecorateRuleClassName() : dyn) : ..$baseTypes
        {
          private this() {}
        }
      ]>;
      when (RuleSymbol.Options.IsExplicitSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.ExplicitSpacesAttribute ]>);
      when (RuleSymbol.Options.IsSuppressTrailingSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.SuppressTrailingSpacesAttribute ]>);

      _descriptorTb = Owner.GrammarDescriptorImplTB.DefineNestedType(descriptorClass);
      _descriptorTb.DefineConditional(<[decl: public  override Name              : string                                          { get { $(RuleSymbol.Name : string) } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override Grammar           : N2.GrammarDescriptor                            { get { $(Owner.GrammarImplTB.GetMemType() : typed).StaticDescriptor } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override IdInGrammar       : int                                             { get { $(Owner.GetIdInGrammar(RuleSymbol) : int) } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override AstSize           : int                                             { get { $(astSize : int) } } ]>);
      _descriptorTb.DefineConditional(<[decl: private static   _staticDescriptor : $(RuleSymbol.DecorateRuleClassName() : dyn) = $(RuleSymbol.DecorateRuleClassName() : dyn)(); ]>);
      _descriptorTb.DefineConditional(<[decl: public  static   StaticDescriptor  : $(RuleSymbol.DecorateRuleClassName() : dyn) { get { _staticDescriptor } } ]>);

      when (RuleSymbol.Options.IsStart)
      {
        _descriptorTb.DefineConditional(<[decl:
          public Parse(source : N2.SourceSnapshot, parserHost : N2.ParserHost) : N2.ParseResult
          {
            parserHost.DoParsing(source, this)
          }
        ]>);
        Owner.GrammarImplTB.DefineConditional(<[ decl:
          public static $(RuleSymbol.Name + "RuleDescriptor" : usesite) : $(RuleSymbol.GetDescriptorClassRef())
          {
            get { $(RuleSymbol.GetDescriptorClassRef()).StaticDescriptor }
          }
        ]>);
      }

      match (RuleSymbol.Type)
      {
        | Chars => ()
        | Void  => _descriptorTb.DefineConditional(<[decl: public ResultType() : void {} ]>)
        | t     => _descriptorTb.DefineConditional(<[decl: public ResultType() : $(Owner.Environment.RuleTypeToNType(t) : typed) { mutable res; res } ]>)
      }

      def defineNewParserMethod(returnType)
      {
        _descriptorTb.DefineConditional(<[decl:
          public override NewParser(grammar : N2.CompositeGrammar) : $returnType
          {
            $(Owner.GrammarImplTB.GetMemType() : typed).$(RuleSymbol.DecorateRuleClassName() : dyn)(grammar.NewRuleId(this), grammar)
          }
        ]>);
      }
      def defineExtentionRuleMethods(baseRuleSymbol)
      {
        defineNewParserMethod(<[ N2.Internal.ExtentionRuleParser ]>);
        _descriptorTb.DefineConditional(<[decl:
          public override BaseRule : ExtensibleRuleDescriptor { get { $(baseRuleSymbol.GetDescriptorClassRef()).StaticDescriptor } }
        ]>);
      }
      match (RuleSymbol)
      {
        | ExtensibleRuleSymbol => ()
        | ExtentionRuleSymbol(BaseRule = RuleRef.Some(baseRuleSymbol), ExtentionType = Prefix) =>
          defineExtentionRuleMethods(baseRuleSymbol)

        | ExtentionRuleSymbol(BaseRule = RuleRef.Some(baseRuleSymbol), ExtentionType = Postfix(bindingPower, _)) =>
          defineExtentionRuleMethods(baseRuleSymbol);
          _descriptorTb.DefineConditional(<[decl: public override BindingPower : int { get { $(bindingPower : int) } } ]>);

        | SimpleRuleSymbol  => defineNewParserMethod(<[ N2.Internal.SimpleRuleParser ]>);
        | RegularRuleSymbol => ()
        | _       => assert(false)
      }

      DefineDebugView(rootAstStruct);
    }

    public Emit() : void
    {
      assert(_descriptorTb != null);
      _descriptorTb.Compile();
    }

    Environment : EmitterEnvironment implements IVariableEmitter.Environment { get { Owner.Environment } }

    CreateVariable(name : string) : PExpr implements IVariableEmitter.CreateVariable
    {
      <[ $(name : dyn) ]>
    }

    private DefineDebugView(rootAstStruct : option[RootAstStruct2]) : void
    {
      def makeFieldViews(astStruct : AstStruct2)
      {
        def makeHeaderSetter(field) { <[ debugAst[index + $(field.Offset)] = N2.Debug.DebugViewHeader(parser, index + $(field.Offset)) ]> }
        def makeSizeSetter(field)
        {
          def ofs = astStruct.SizesOffset + field.SizeOffset;
          <[ debugAst[index + $ofs] = N2.Debug.DebugViewSize(parser, index + $ofs) ]>
        }
        def makeAstSetter(field)
        {
          def ofs = astStruct.AstOffset + field.AstOffset;
          def makeAstRef(ruleSymbol)
          {
            <[ debugAst[index + $ofs] = N2.Debug.DebugViewAstRef(parser, index + $ofs, $(ruleSymbol.GetDescriptorClassRef()).StaticDescriptor) ]>
          }
          match (field.Field)
          {
            | RuleField2.Extensible     as ruleField => makeAstRef(ruleField.RuleSymbol)
            | RuleField2.ExternalAst    as ruleField => makeAstRef(ruleField.RuleSymbol)
            | RuleField2.Void           as ruleField => makeAstRef(ruleField.RuleSymbol)
            | RuleField2.Option         as ruleField =>
              <[
                debugAst[index + $ofs] = N2.Debug.DebugViewInternalRef(parser, index + $ofs, "Option", $(ruleField.astStruct.AstSize));
                when (parser.parser.ast[index + $ofs] > 0)
                {
                  def index = parser.parser.ast[index + $ofs];
                  $(makeFieldViews(ruleField.astStruct));
                }
              ]>

            | RuleField2.List           as ruleField =>
              def owner = ruleField.NextRef.Owner;
              def loop = if (!object.ReferenceEquals(owner, astStruct))
              {
                <[
                  def loop(index)
                  {
                    when (parser.parser.ast[index] > 0)
                    {
                      def index = parser.parser.ast[index];
                      $(makeFieldViews(owner));
                      loop(index + $(owner.AstOffset + ruleField.NextRef.AstOffset))
                    }
                  }
                  loop(index + $ofs)
                ]>
              }
              else
                <[ {} ]>;
              <[
                debugAst[index + $ofs] = N2.Debug.DebugViewInternalRef(parser, index + $ofs, "List", $(owner.AstSize));
                $loop
              ]>

            | RuleField2.List2          as ruleField =>
              def ruleOwner      = ruleField.NextRuleRef.Owner;
              def separatorOwner = ruleField.NextSeparatorRef.Owner;
              def loop = if (!(object.ReferenceEquals(ruleOwner, astStruct) || object.ReferenceEquals(separatorOwner, astStruct)))
              {
                <[
                  def loopRule(index)
                  {
                    when (parser.parser.ast[index] > 0)
                    {
                      def index = parser.parser.ast[index];
                      $(makeFieldViews(ruleOwner));
                      loopSeparator(index + $(ruleOwner.AstOffset + ruleField.NextRuleRef.AstOffset))
                    }
                  }
                  and loopSeparator(index)
                  {
                    when (parser.parser.ast[index] > 0)
                    {
                      def index = parser.parser.ast[index];
                      $(makeFieldViews(separatorOwner));
                      loopRule(index + $(separatorOwner.AstOffset + ruleField.NextSeparatorRef.AstOffset))
                    }
                  }
                  loopRule(index + $ofs)
                ]>
              }
              else
                <[ {} ]>;
              def astSize = if (object.ReferenceEquals(ruleOwner, astStruct)) separatorOwner.AstSize else ruleOwner.AstSize;
              <[
                debugAst[index + $ofs] = N2.Debug.DebugViewInternalRef(parser, index + $ofs, "List2", $astSize);
                $loop
              ]>
            | _ => <[ _ = $(field?.Field?.GetType()?.Name ?? "null?") ]>
          }
        }
        def astStruct = astStruct;
        def headerSetters = astStruct.HeaderFields.Map(makeHeaderSetter);
        def sizeSetters   = astStruct.SizeFields.Map(makeSizeSetter);
        def astSetters    = astStruct.AstFields.Map(makeAstSetter);
        <[ { ..$headerSetters } { ..$astSetters } { ..$sizeSetters } ]>;
      }
      if (Owner.Environment.IsIdeMode)
      {
        _descriptorTb.DefineConditional(<[decl:
          public override FillDebugAst(parser : N2.Debug.DebugParser, index : int, debugAst : array[object]) : void
          {
            _ = parser;
            _ = index;
            _ = debugAst;
          }
        ]>);
      }
      else
      {
        def setters = match (RuleSymbol)
        {
          | ExtentionRuleSymbol =>
            def rootAstStruct = rootAstStruct.Value;
            def terminatorOffset = rootAstStruct.TerminatorOffset;
            <[
              debugAst[index + $terminatorOffset] = N2.Debug.DebugViewTerminator(parser, index + $terminatorOffset);
              $(makeFieldViews(rootAstStruct));
            ]>

          | SimpleRuleSymbol => makeFieldViews(rootAstStruct.Value)
          | ExtensibleRuleSymbol as rs => makeFieldViews(ExtensibleAstStruct2(this, rs))

          | _ => <[ {} ]>
        }
        _descriptorTb.DefineConditional(<[decl:
          public override FillDebugAst(parser : N2.Debug.DebugParser, index : int, debugAst : array[object]) : void
          {
            $setters;
            debugAst[index] = N2.Debug.DebugViewAstDef(parser, index, $(RuleSymbol.GetDescriptorClassRef()).StaticDescriptor);
          }
        ]>);
      }
    }
  }
}
