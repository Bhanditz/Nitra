using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public static CheckStringCode(str : string, text : PExpr, textPos : PExpr) : PExpr
    {
      if (str == "")
      {
        <[ true ]>
      }
      else
      {
        def check = if (str.Length > 1) <[$textPos + $((str.Length - 1) : int)]> else <[ $textPos ]>;

        def makeCharCheckCode(ch : char, i : int) : PExpr
        {
          def index = if (i <= 0) <[ $textPos ]> else <[ $textPos + $(i : int) ]>;
          <[ $text[$index] == $(ch : char) ]>
        }
        def exprs = str.Select(makeCharCheckCode);
        def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);
        <[ $check < $text.Length && $condExpr ]>
      }
    }

    public override CompileTokenString(code : SCG.List[PExpr], field : RuleStructureField.TokenString) : void
    {
      def str = field.String;
      def astSize = str.Length;
      def checkCode = CheckStringCode(str, <[ text ]>, CurTextPos);
      def (debugSetStart, debugSetEnd, fail, exit) =
        if (Owner.Environment.Manager.Options.EmitDebug)
          (<[ parseResult.LastParseStart = $CurTextPos; ]>,
            <[ parseResult.LastParseEnd = $CurTextPos; ]>,
            <[ parseResult.LastParseEnd = -1; ]>,
            <[ () ]>)
        else
          (<[ () ]>, <[ () ]>, <[ () ]>, <[ () ]>);

      def loc = field.SrcRule.Location.NLocation();
      when (!loc.IsEmpty && loc.IsSourceAvailable)
      {
        checkCode.Location = loc;
        // Make the location directly behind the rule call. This allows you to see the result of the parsing rules.
        exit.Location = N.Location(loc.FileIndex, loc.EndLine, loc.EndColumn, loc.Line, loc.EndColumn + 1);
      }

      def (predicateCode, predicateFailLabel) = CompilePredicate(field.HeadPredicates);
      code.Add(
      <[
      $(ParseLabel(field));
        _ = $(field.ToString());
        $predicateCode;
      $(RecoveryLabel(field));
        $debugSetStart;
        if ($checkCode)
        {
          $(AllocateParentAst(field));
          $(AstPtr(field.Owner).Set(field, <[ $astSize ]>));
          $CurTextPos += $astSize;
          $debugSetEnd;
          $exit;
          $(GotoContinueParseLabel(field));
        }
        else
        {
          $predicateFailLabel;
          $(RecoveryCode());
          parseState = $(field.State : int);
          $fail;
          $exit;
          $(GotoFailParseLabel(field));
        }
      ]>)
    }
  }
}
