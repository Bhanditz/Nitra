using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public MakeTokenRuleCall(ruleSymbol : RegularRuleSymbol, curTextPos : PExpr, text : PExpr) : PExpr
    {
      def grammarType = PExprUtils.FromQualifiedIdentifier(ruleSymbol.DeclaringModule.Node.FullNameParts);
      <[ $grammarType.$(AssemblyConstants.GrammarImplName : usesite).$(ruleSymbol.DecorateRuleName() : dyn)($curTextPos, $text) ]>
    }

    public MakeSimpleRuleCall(ruleSymbol : SimpleRuleSymbol, curTextPos : PExpr, text : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol) : dyn).Parse($curTextPos, $text, parser) ]>
    }

    public MakeExtensibleRuleCall(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int, curTextPos : PExpr, text : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol, bindingPower) : dyn).Parse($curTextPos, $text, parser) ]>
    }

    public override CompileTokenCall(code : SCG.List[PExpr], field : RuleStructureField.TokenCall) : void
    {
      CompileCallImpl(code, MakeTokenRuleCall(field.Symbol, CurTextPos, <[ text ]>), field)
    }

    public override CompileExtensibleCall(code : SCG.List[PExpr], field : RuleStructureField.ExtensibleCall) : void
    {
      CompileCallImpl(code, MakeExtensibleRuleCall(field.Symbol, field.BindingPower, CurTextPos, <[ text ]>), field)
    }

    public override CompileSimpleCall(code : SCG.List[PExpr], field : RuleStructureField.SimpleCall) : void
    {
      CompileCallImpl(code, MakeSimpleRuleCall(field.Symbol, CurTextPos, <[ text ]>), field)
    }

    public CompileCallImpl(code : SCG.List[PExpr], call : PExpr, field : RuleStructureField) : void
    {
      def (debugSetLastResult, exit) =
        if (Owner.Environment.Manager.Options.EmitDebug)
          (<[ parser.LastParseStart = $CurTextPos; parser.LastParseEnd = newPos; ]>, <[ () ]>);
        else
          (<[ () ]>, <[ () ]>);

      def loc = field.SrcRule.Location.NLocation();
      when (!loc.IsEmpty && loc.IsSourceAvailable)
      {
        call.Location = loc;
        // Make the location directly behind the rule call. This allows you to see the result of the parsing rules.
        exit.Location = N.Location(loc.FileIndex, loc.EndLine, loc.EndColumn, loc.Line, loc.EndColumn + 1);
      }

      def (predicateCode, predicateFailLabel) = CompilePredicate(field.HeadPredicates);
      code.Add(<[
      $(ParseLabel(field));
        _ = $(field.ToString());
        $predicateCode;
        newPos = $call;
        tmpSize = newPos - $CurTextPos;
        $debugSetLastResult;
        if (newPos >= 0)
        {
          $(AllocateParentAst(field));
          $(AstPtr(field.Owner).Set(field, <[ tmpSize ]>));
          $CurTextPos = newPos;
          $exit;
          $(GotoContinueParseLabel(field));
        }
        else
        {
          $predicateFailLabel;
          $(RecoveryCode());
          parseState = $(field.State : int);//состояние
          $exit;
          $(GotoFailParseLabel(field));
        }
      $(RecoveryLabel(field)); // TODO: !!!!!!!!!
        $(GotoParseLabel(field));
      ]>)
    }
  }
}
