using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompilePredicate(code : SCG.List[PExpr], field : RuleStructureField.Predicate) : void
    {
      def maxPos = CreateVariable($"maxPos$(field.Level)");
      def save()     { <[ _ = $(field.SrcRule.ToString()); $(AstStart(field.Rule)) = $CurTextPos; $(maxPos : dyn) = parser.MaxTextPos; ]> }
      def loadOk()   { <[ $CurTextPos = $(AstStart(field.Rule)); parser.MaxTextPos = $(maxPos : dyn); ]> }
      def loadFail() { <[ $CurTextPos = $(AstStart(field.Rule)); when (parser.MaxTextPos < $(AstStart(field.Rule))) parser.MaxTextPos = $(AstStart(field.Rule)); ]> }
      code.Add(
        if (field.IsAnd)
        <[
          $(ParseLabel(field));     $(save());     $(GotoParseLabel(field.Rule.NotMarkerFields[0]));
          $(OkLabel(field.Rule));   $(loadOk());   $(GotoContinueParseLabel(field));
          $(FailLabel(field.Rule)); $(loadFail()); $(GotoFailParseLabel(field));
        ]>
        else
        <[
          $(ParseLabel(field));     $(save());     $(GotoParseLabel(field.Rule.NotMarkerFields[0]));
          $(OkLabel(field.Rule));   $(loadFail()); $(GotoFailParseLabel(field));
          $(FailLabel(field.Rule)); $(loadOk());   $(GotoContinueParseLabel(field));
        ]>);
      code.Add(<[
        $(RecoveryLabel(field));
          throw System.NotImplementedException("Recovery not implemented.");
      ]>);
    }
  }
}
