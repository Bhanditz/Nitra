using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public CompileBoolMethod(ruleStructure : RuleStructure.Ast, predicate : RuleStructureField -> bool) : PExpr
    {
      def cases = SCG.List();
      def (forTrue, forFalser) = ruleStructure.AllNonMarkerFields.ToNList().Partition(predicate);
      
      def truePatterns  = forTrue.  Map(field => <[ $(field.State) ]>);
      def falsePatterns = forFalser.Map(field => <[ $(field.State) ]>);
      
      unless (truePatterns.IsEmpty)
        cases.Add(MatchCase(truePatterns,  <[ true ]>));
      unless (falsePatterns.IsEmpty)
        cases.Add(MatchCase(falsePatterns, <[ false ]>));

      cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);
      
      <[ match (state) { ..$cases } ]>
    }
  }
}
