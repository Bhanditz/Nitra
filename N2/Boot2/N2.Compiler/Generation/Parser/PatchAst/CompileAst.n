using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal sealed partial class PatchAstMethodEmitter : MethodEmitter
  {
    public CompileAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      code.Add(<[ def frame     = stack.Head; ]>);
      code.Add(<[ def failState = frame.FailState; ]>);
      code.Add(<[ def astPtr    = frame.AstPtr; ]>);
      code.Add(<[ mutable level; ]>);

      code.Add(<[
        when (failState == startState)
        {
          // этим вызовом мы устанавливаем размер для поля соответствующего failState
          def pos42 = TryParse(stack, startState, startPos, true, parser);
          _ = pos42;
        }
      ]>);
      CompileFields(code, ruleStructure);
      def rootAstPtr = AstPointer.Existing(ruleStructure, "rootAstPtr");
      code.Add(<[
        def rootFrame = stack.Nth(level);
        def rootAstPtr =  rootFrame.AstPtr;
        $(rootAstPtr.Set(ruleStructure.HeaderState, <[ ~startState ]>));
      ]>);

      code.FlattenPExpr();
    }
  }
}
