using N2.Internal;
using N2.Typing;
using N2.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    private          _endLabel       : PExprLabel;

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      base(owner, ruleStructure, tb);
      _data         = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
      _endLabel     = Environment.MakeLabel("EndParse");
    }

    public Emit() : void
    {
      TypeBuilder.DefineConditional(<[decl:
        public override TryParse(frame : Nitra.Internal.RecoveryStackFrame, startState : int, mutable curTextPos : int, continueList : bool, parsedStates : SCG.List[Nitra.Internal.ParsedStateInfo], parseResult : Nitra.Internal.ParseResult) : int
        {
          def text = parseResult.Text;
          mutable startLevel;
          parsedStates.Clear();
          $(if (Environment.IsIdeMode)
            <[ ignore(recoveryStack, startState, curTextPos, parseResult, text, startLevel); -1 ]>
          else
            CompileAst(RuleStructure))
        }
      ]>);
      //TODO: Move this methods outside TryParseMethodEmitter
      DefineStateMapMethod("IsStateCanParseEmptyString", _.CanParseEmptyString);
      DefineStateMapMethod("IsVoidState",                field => field.SrcRule.Type is RuleType.Void);
      DefineStateMapMethod("IsStartState",               _.IsStart);
      DefineStateMapMethod("IsLoopSeparatorStart",       _.IsLoopSeparatorStart);
      DefineStateMapMethod("IsLoopSeparator",            _.IsLoopSeparator);
      DefineStateMapMethod("IsLoopBody",                 _.IsLoopBody);
      DefineStateMapMethod("GetStartState",               field : RuleStructureField => field.Owner.NonMarkerFields[0].State);
      DefineStateMapMethod("GetOffsetForState",           field : RuleStructureField => field.Offset);
      
      TypeBuilder.DefineConditional(<[decl: public override GetLoopBodyForSeparator(separatorId : int, bodyId : out int, firstState : out int) : bool { $(Compile_GetLoopBodyForSeparator(RuleStructure)) } ]>);
      TypeBuilder.DefineConditional(<[decl: public override GetRuleParserForState(state : int) : Nitra.Internal.IRecoveryRuleParser * int { $(Compile_GetRuleParserForState(RuleStructure)) } ]>);
      TypeBuilder.DefineConditional(<[decl: public override CodeForState(state : int) : string { $(Compile_CodeForState(RuleStructure)) } ]>);
      TypeBuilder.DefineConditional(<[decl: public override CodeForStates(startState : int, endState : int, skipOptionalStates : bool) : array[string] { $(Compile_CodeForStates(RuleStructure)) } ]>);
      TypeBuilder.DefineConditional(<[decl: public override IsTokenRule    : bool   { get { $(RuleStructure.Symbol.Options.IsTokenRule) } } ]>);
      TypeBuilder.DefineConditional(<[decl: public override Code           : string { get { $(RuleStructure.SrcRule.ToString()) } } ]>);
      TypeBuilder.DefineConditional(<[decl: public override CodeWithStates : string { get { $(RuleStructure.ToString()) } } ]>);
      TypeBuilder.DefineConditional(<[decl: public override RuleName       : string { get { $(RuleStructure.Symbol.Name) } } ]>);

      TypeBuilder.DefineConditional(<[decl: private static EmptyArray : array[Nitra.Internal.RecoveryStackFrame] = array(0) ]>);
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    Compile_GetLoopBodyForSeparator(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def loops = SCG.List();

      foreach (field is RuleStructureField.ListWithSeparator in ruleStructure.AllNonMarkerFields)
      {
        loops.Add(<[  
          when (separatorId == $(field.Separator.AstId : global))
          {
            bodyId = $(field.Rule.AstId : global);
            firstState = $(field.Rule.NonMarkerFields[0].State : int);
            return true;
          } ]>);
      }

      <[ IgnoreParams(); ..$loops; false ]>
    }

    Compile_GetRuleParserForState(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      foreach (field in ruleStructure.AllNonMarkerFields)
      {
        def value = match (field)
        {
          | Marker
          | Empty
          | TokenString
          | RegularCall                              => <[ (null, -1) ]>
          | SimpleCall    (ruleSymbol)               => <[ ($(Owner.MakeParserName(ruleSymbol) : global), $(Owner.MakeParserName(ruleSymbol) : global).RuleId) ]>
          | ExtensibleCall(ruleSymbol, bindingPower) => <[ ($(Owner.MakeParserName(ruleSymbol, bindingPower) : global), -1) ]>
          | Option                          as field => <[ (this, $(field.Rule.AstId : global)) ]>
          | List                            as field => <[ (this, $(field.Rule.AstId : global)) ]>
          | ListWithSeparator               as field => <[ (this, $(field.Rule.AstId : global)) ]>
        }
        code.Add(<[ case: | $(field.State) => $value ]>);
      }

      code.Add(<[ case: | _ => assert3(false) ]>);

      <[
        match (state)
        {
          ..$code
        }
      ]>
    }

    Compile_CodeForState(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def nextField(field : RuleStructureField) : RuleStructureField
      {
        if (field == null)
          null
        else if (field.NextSibling != null)
          field.NextSibling
        else
          nextField(field.Owner.Owner)
      }

      def code = SCG.List();

      for (mutable i = 0; i < ruleStructure.StateCount; i++)
      {
        mutable str = ruleStructure.CodeForState(i);
        def field = ruleStructure.AllNonMarkerFields[i];
        when (field.IsLoopSeparatorStart)
        {
          def afterLoopField = nextField(field);

          when (afterLoopField != null)
            str += ", " + ruleStructure.CodeForState(afterLoopField.State);
        }
        code.Add(<[ case: | $i => $str ]>);
      }

      code.Add(<[ case: | _ => assert3(false) ]>);

      <[
        match (state)
        {
          ..$code
        }
      ]>
    }

    Compile_CodeForStates(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      def fields = ruleStructure.AllNonMarkerFields;

      for (mutable i = 0; i < ruleStructure.StateCount; i++)
      {
        def field = fields[i];
        def str = field.SrcRule.ToString();
        if (field.CanParseEmptyString)
          code.Add(<[ case: | $i => unless (skipOptionalStates) result.Add($str) ]>);
        else
          code.Add(<[ case: | $i => result.Add($str) ]>);
      }

      code.Add(<[ case: | _ => assert3(false) ]>);

      <[
        assert3(endState >= -1);
        _ = skipOptionalStates;
        def result = SCG.List();
        
        for (mutable i = startState; i != endState; i = GetNextState(i))
        {
          match (i)
          {
            ..$code
          }
        }
        
        result.ToArray()
      ]>
    }

    EndOfFieldLevel(field : RuleStructureField) : PExpr
    {
      <[ startLevel > $(field.Level) ]>
    }

    AddParsedStateInfo(field : RuleStructureField, size : PExpr) : PExpr
    {
      <[
        when (startLevel == $(field.Level))
          parsedStates.Add(Nitra.Internal.ParsedStateInfo($(field.State), $size));
      ]>
    }

    public RecoveryCode() : PExpr
    {
      <[
        when (parseResult.MaxFailPos < curTextPos)
          parseResult.MaxFailPos = curTextPos;
      ]>
    }
  }
}
