using Nemerle;

namespace N2.Typing
{
  public class SymbolRef[T] : Located
    where T : Symbol
  {
    public Ref         : option[T] { get; }
    public IsGenerated : bool      { get; }
    
    public this(located : Located, reference : option[T])
    {
      this(located.Location, reference, false)
    }

    public this(fullName : Location, reference : option[T], isGenerated : bool)
    {
      base(fullName);
      Ref = reference;
      IsGenerated = isGenerated;
    }
    
    public override ToString() : string
    {
      match (Ref)
      {
        | Some(r) => r.Name
        | _       => $"$(GetText()) (unresolved)"
      }
    }
    
    [OverrideObjectEquals]
    public Equals(other : SymbolRef[T]) : bool
    {
      Ref.IsSome && other.Ref.Equals(Ref)
    }
    
    public static @==[K](self : SymbolRef[K], other : SymbolRef[T]) : bool
      where K : Symbol
    {
      match (self.Ref, other.Ref)
      {
        | (Some(self), Some(other)) => self : object == other : object
        | _ => false
      }
    }
    
    public override GetHashCode() : int
    {
      Ref.GetHashCode() + IsGenerated.GetHashCode()
    }
  }
}
