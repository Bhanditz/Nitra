using N2.ProjectSystem;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public sealed class NamespaceOrTypeAliasContext : Context, INemerleEnvironmentContext
  {
    public Name  : G.Identifier  { get; }
    public Path  : G.QIdentifier { get; }
    public Alias : AliasSymbol   { get; }

    public this(parent : Context, name : G.Identifier, path : G.QIdentifier)
    {
      base(parent);
      Name  = name;
      Path  = path;
      def p = this.GetParent.[EnteredNamespaceContext]();
      Alias = AliasSymbol(name, p.Bind(path));
    }

    [Memoize]
    GetNemerleEnvironment() : GlobalEnv implements INemerleEnvironmentContext.GetNemerleEnvironment
    {
      def parentEnv = Parent.GetNemerleEnvironment();
      parentEnv.AddNamespaceAlias(Name.Value(), Path.Parts(), Path.NLocation())
    }

    public override ToString() : string
    {
      "using " + Alias.Name + " = " + Alias.RealSymbol.Map(sym => sym.FullName)
    }
  }
}
