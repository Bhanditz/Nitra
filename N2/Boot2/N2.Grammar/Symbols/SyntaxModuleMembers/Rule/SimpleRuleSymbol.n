using Nemerle;

using N2.Model;
using N2.Typing.ExtraField;

using G = N2SyntaxAst;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class SimpleRuleSymbol : SyntaxRuleSymbol
  {
    public        override Description      : string         { get { "simple rule" } }
  }

  public sealed class ParsedSimpleRuleSymbol : SimpleRuleSymbol
  {
    public this (ast : G.Declaration_SimpleRule.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast : G.Declaration_SimpleRule.Ast;

    public override Type             : RuleType              { [Memoize] get { RuleType.Ref(this) } }
    public override Options          : RuleDefinitionOptions {           get { _ast.RuleAttributes.Options(RuleDefinitionOptions.Empty) } }
    public override Rule             : Rule.Sequence         {           get { _ast.TypedRule } }
    public override LastLocation     : option[Location]      { [Memoize] get { Some(_ast.RuleBody.GetLastLocation()) } }
    public override IdInGrammar      : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }

  public sealed class ParsedVoidRuleSymbol : SimpleRuleSymbol
  {
    public this (ast : G.Declaration_VoidRule.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast : G.Declaration_VoidRule.Ast;

    public override Description      : string                { get { "void rule" } }
    public override Type             : RuleType              { get { RuleType.Void() } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options(RuleDefinitionOptions.Empty) } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
    public override IdInGrammar      : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }
}
