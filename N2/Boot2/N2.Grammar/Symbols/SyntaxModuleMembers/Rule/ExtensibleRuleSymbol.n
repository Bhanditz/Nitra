using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;

using G = N2Syntax;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class ExtensibleRuleSymbol : SyntaxRuleSymbol
  {
    public sealed override Type             : RuleType      { get { RuleType.Ref(this) } }
    public sealed override Rule             : Rule.Sequence { get { assert2(false); null } }
    public        override Description      : string        { get { "extensible rule" } }
  }

  public sealed class ParsedExtensibleRuleSymbol : ExtensibleRuleSymbol
  {
    public this(ast : G.Declaration_ExtensibleRule.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    private _ast                     : G.Declaration_ExtensibleRule.Ast;

    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options(RuleDefinitionOptions.Empty) } }
    public override LastLocation     : option[Location]      { get { Some(_ast.RuleBody.GetLastLocation()) } }
    public override IdInGrammar      : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }
}
