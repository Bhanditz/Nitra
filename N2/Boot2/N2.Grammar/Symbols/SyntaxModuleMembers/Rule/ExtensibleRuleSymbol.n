using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;

using G = N2SyntaxAst;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class ExtensibleRuleSymbol : SyntaxRuleSymbol, IRuleDeclarationSite
  {
    public sealed override Type             : RuleType      { get { RuleType.Ref(this) } }
    public sealed override Rule             : Rule.Sequence { get { assert2(false); null } }
    public        override Description      : string        { get { "extensible rule" } }
  }

  public sealed class ParsedExtensibleRuleSymbol : ExtensibleRuleSymbol
  {
    public this(ast : G.ExtensibleRule.Ast, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                        : G.ExtensibleRule.Ast;

    public override DeclarationSite     : IRuleDeclarationSite  { get; }
    public override Options             : RuleDefinitionOptions { get { _ast.RuleAttributes.Options(RuleDefinitionOptions.Empty) } }
    public override LastLocation        : option[Location]      { get { Some(_ast.ExtensibleRuleBody.GetLastLocation()) } }
    public override IdInGrammar         : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
    public override CanParseEmptyString : bool                  { get { false } }
    public override FirstCharLowerBound : char                  { get char.MinValue }
    public override FirstCharUpperBound : char                  { get char.MaxValue }
  }
}
