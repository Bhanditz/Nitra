using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Imperative;
using Nemerle.Utility;

using N2.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing.ExtraField
{
  internal module ExtraFieldReflectionUtils
  {
    public ReflectProperties(project : N2Project, symbol : ExtraFieldSymbol) : ExtraFieldSignature * bool
    {
      match (project.NTypeOfRuleSymbol(symbol.DeclaringRule))
      {
        | FixedType.Class(ti, []) =>
          mutable signature;
          mutable isCached;
          foreach (method is IMethod in ti.LookupMember(symbol.Name, false))
          {
            def loc        = method.NameLocation.N2Location();
            def parameters = method.Header.ParametersDeclarations;
            def type       = <[ $(method.ReturnType : typed) ]>;
            signature      = ExtraFieldSignature(loc, parameters, type);

            foreach(attr in method.GetModifiers().GetCustomAttributes())
            {
              | <[ N2.Runtime.ExtraFieldAttribute() ]> with isCachedValue = false
              | <[ N2.Runtime.ExtraFieldAttribute($(isCachedValue : bool)) ]> =>
                isCached = isCachedValue;
                break;

              | _ => ()
            }

            break;
          }
          (signature, isCached)

        | _ => assert2(false); assert(false);
      }
    }
  }
}
