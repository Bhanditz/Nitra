using N2;
using N2.Utils;
using N2.Model;
using N2.ProjectSystem;
using N2.Runtime;
using N2.Typing;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Compiler;

using System.Collections.Generic;
using System.Text;
using System.Linq;

syntax module GrammarParser2
{
  token field OpenBrace           = "(";
  token field CloseBrace          = ")";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field OpenSquareBrace     = "[";
  token field CloseSquareBrace    = "]";
  token field SingleQuote         = "\'";
  token field Quote               = "\"";
  token field Semicolon           = ";";
  token field Comma               = ",";
  token field Colon               = ":";
  token field Assign              = "=";
  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = "+", "-", "*", "/", "?", "^", "%", "&", "!", ".";
  token field Backslash           = "\\";

  span class Comment;
  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+['A'..'Z', 'a'..'z', '_'..'_', '-'..'-']* rule S;

  marker i;   // increase a indent
  marker d;   // decrease a indent
  marker nl;  // optional spacer and plase for \n while pretty printing
  marker inl; // i + nl
  marker sm;  // optional spacer and prefer to print space while pretty printing

  alias Name            = Identifier;
  alias QualifiedName   = QIdentifier;
  alias NamespaceOrType = QIdentifier;
  alias Char            = Any;
  alias GrammarName     = QIdentifier;
  alias BaseName        = QIdentifier;

  token Keyword = "as" | "syntax" | "token" | "alias" | "in" | "out" | "rule";

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
  token Spaces = Space+;


  [ExplicitSpaces] syntax IgnoreToken;

  extend syntax IgnoreToken
  {
    [ExplicitSpaces, SpanClass(Comment)] SingleLineComment = "//" as Start (!NewLine Any)* as Body NewLine? as End;
    [ExplicitSpaces, SpanClass(Comment)] MultiLineComment  = "/*" as Start (!"*/" Any)*    as Body "*/"     as End;
    [ExplicitSpaces]                     SpaceToken        = Spaces;
  }

  [ExplicitSpaces] void s   = IgnoreToken*;                // optional spacer
  [ExplicitSpaces] void S   = !IdentifierPartCharacters s; // identifier break spacer

  token LetterCharacter           = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я'];//[Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter        = [Mn, Mc];
  token DecimalDigitCharacter     = [Nd];
  token ConnectingCharacter       = [Pc];
  token FormattingCharacter       = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter 
                                  | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar        = "\"" | "\\";
  token ReservedCharChar          = "\'" | "\\";

  [SpanClass(String), ExplicitSpaces]
  syntax StringLiteral                    = "\""  StringPart* "\""
  {
    Value() : string = FoldThrough(StringParts, StringBuilder(), _.Value(_)).ToString();
  }

  [ExplicitSpaces] syntax StringPart { Value(sb : StringBuilder) : StringBuilder; }

  extend syntax StringPart
  {
    [ExplicitSpaces] UnicodeEscapeSequenceStringPart = "\\u" HexDigit HexDigit HexDigit HexDigit
    {
      override Value = sb.Append(HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos));
    }
    [ExplicitSpaces] EscapeSequenceStringPart        = "\\"  Char
    {
      override Value = sb.Append(EscapeSequence(FirstChar(Char)));
    }
    [ExplicitSpaces] SimpleStringPart                = Chars
    {
      alias Chars = (!ReservedStringChar Any)+;
      override Value = sb.Append(this.GetText());
    }
  }

  [SpanClass(Char), ExplicitSpaces]
  syntax CharLiteral                      = "\'"  CharPart "\'" { Value() : char = CharPart.Value(); }

  [ExplicitSpaces] syntax CharPart { Value() : char;    }

  extend syntax CharPart
  {
    [ExplicitSpaces] SimpleCharPart                = !ReservedCharChar Char
    {
      override Value = FirstChar(this.Char);
    }
    [ExplicitSpaces] UnicodeEscapeSequenceCharPart = "\\u" HexDigit HexDigit HexDigit HexDigit
    {
      override Value = HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos);
    }
    [ExplicitSpaces] EscapeSequenceCharPart        = "\\" Char
    {
      override Value = EscapeSequence(FirstChar(this.Char));
    }
  }
  
  token Digits = ['0'..'9']+;

  [SpanClass(Number), ExplicitSpaces]
  syntax Number = Digits { Value() : int = DecToInt(this, Digits.StartPos, Digits.EndPos); }

  [ExplicitSpaces]
  syntax Identifier                       = !(Keyword !IdentifierPartCharacters) IdentifierBody
  {
    Value() : string = GetText(IdentifierBody);
    Identifier() : N2.Model.Identifier = N2.Model.Identifier(this, IdentifierBody);
    NameRef() : NameRef = NameRef(this.NLocation(), [GetText(IdentifierBody)]);
  }
  syntax QIdentifier                      = Names
  {
    alias Names = (Identifier; ".")+;
    Identifiers() : list[N2.Located] = Names[0].Map(_.Identifier());
    Parts() : list[string] = Names[0].Map(_.Value());
    CalcLocation() : N2.Location
    {
      def loc = this.Location;
      N2.Location(loc.Source, loc.StartPos, Names[0].LastOrDefault(n => n.Location.EndPos, loc.StartPos))
    }
    CalcLocations() : list[N2.Location] = Names[0].Map(_.Location);
    NameRef() : NameRef = NameRef(CalcLocation().NLocation(), Parts());
  }

  ///////////////////////////////////////////////////////////////////////////
  //
  
  [StartRule, ExplicitSpaces]
  syntax Start                = s Using*  TopDeclaration* !Any
  {
    CollectGlobalSymbols(rootNs : NamespaceSymbol) : void { _ = PassThrough(TopDeclarations, rootNs, _.CollectGlobalSymbols(_)); }
    [Cached] MakeContext(parent : Context) : Context
    {
      def context1 = FoldThrough(Usings, parent, _.MakeContext(_));
      def context2 = PassThrough(TopDeclarations, context1, _.MakeContext(_));
      context2
    }
    Typing() : list[SyntaxModuleData] = FoldThrough(TopDeclarations, [], _.Typing(_));

    Env(env : GlobalEnv) : GlobalEnv = FoldThrough(Usings, env, _.Env(_));
    GetSyntaxModules() : list[list[string] * SyntaxModule.Ast] = TopDeclarations.OfType.[SyntaxModule.Ast]().Select(ast => ([], ast)).NToList();
    GetSyntaxModuleDatas(inEnvironment : Environment[N2Project]) : list[SyntaxModuleData]
    {
      def env = FoldThrough(Usings, inEnvironment, _.GetEnvironment(_));
      TopDeclarations.Map(decl => decl.GetSyntaxModuleData(env))
    }
  }

  syntax Using
  {
    [Cached] MakeContext(parent : Context) : Context;
    Env(env : GlobalEnv) : GlobalEnv;
    GetEnvironment(inEnvironment : Environment[N2Project]) : Environment[N2Project];
  }

  extend syntax Using
  {
    UsingOpen  = "using" sm NamespaceOrType ";"
    {
      override MakeContext = OpenNamespaceOrTypeContext(parent, NamespaceOrType);
      override Env = env.AddOpenNamespace(NamespaceOrType.Parts(), NamespaceOrType.NLocation());
      override GetEnvironment = inEnvironment.AddOpen(NamespaceOrType.Parts(), NamespaceOrType.Location);
    }
    UsingAlias = "using" Name sm "=" sm NamespaceOrType ";"
    {
      override MakeContext = NamespaceOrTypeAliasContext(parent, Name, NamespaceOrType);
      override Env = env.AddNamespaceAlias(Name.Value(), NamespaceOrType.Parts(), NamespaceOrType.NLocation());
      override GetEnvironment = inEnvironment.AddAlias(Name.Value(), NamespaceOrType.Parts(), NamespaceOrType.Location);
    }
  }

  syntax TopDeclaration
  {
    CollectGlobalSymbols(ns : NamespaceSymbol) : NamespaceSymbol;
    [Cached] MakeContext(parent : Context) : Context;
    Typing(syntaxModules : list[SyntaxModuleData]) : list[SyntaxModuleData];

    GetSyntaxModuleData(inEnvironment : Environment[N2Project]) : SyntaxModuleData;
    GrammarRefs(env : GlobalEnv) : list[GrammarRef];
    GetTokenFieldNames() : Map[string, N2.Model.Identifier];
  }

  syntax SyntaxModule is TopDeclaration = "syntax"sm "module"sm Name nl "{" inl Import* Declaration* d "}" nl
  {
    override CollectGlobalSymbols
    {
      def sym = ParsedSyntaxModuleSymbol(this);
      _ = ns.Node.AddAndReport(sym, Name.Location);
      _ = PassThrough(Declarations, sym, _.CollectGlobalSymbols(_));
      ns
    }
    [Cached] private MakeSyntaxModuleContext(parent : Context, name : Identifier) : SyntaxModuleContext = SyntaxModuleContext(parent, name);
    override MakeContext
    {
      def context1 = MakeSyntaxModuleContext(parent, Name);
      def context2 = FoldThrough(Imports, context1, _.MakeContext(_));
      def context3 = SyntaxModuleBodyContext(context2);
      _ = FoldThrough(Declarations, context3, _.MakeContext(_));
      parent
    }
    override Typing
    {
      def ruleDefinitions = FoldThrough(Declarations, [], _.Typing(_));
      SyntaxModuleData(SyntaxModuleContext.Module, ruleDefinitions) :: syntaxModules
    }

    override GetSyntaxModuleData
    {
      def env = FoldThrough(Imports, inEnvironment.EnterIntoNode(Name.Value()), _.GetEnvironment(_));

      def ruleDefinitions = FoldThrough(Declarations, (N2Scope(env, ), []), _.CollectRuleDefinitions(_));
      def res = inEnvironment.Bind(Name);
      assert2(res.HasValue);
      SyntaxModuleData(res.Value, ruleDefinitions[1]);
    }
    override GrammarRefs = Imports.MapI((i, import) => import.GrammarRef(env, i));
    override GetTokenFieldNames = FoldThrough(Declarations, Map(), _.GetTokenFieldNames(_));
  }

  syntax Import
  {
    [Cached] MakeContext(parent : Context) : Context;
    GetEnvironment(inEnvironment : Environment[N2Project]) : Environment[N2Project];
    GrammarRef(env : GlobalEnv, index : int) : GrammarRef;
  }

  extend syntax Import
  {
    ImportSyntaxModuleDecl  = "using" sm NamespaceOrType                  ";"nl
    {
      override MakeContext = OpenNamespaceOrTypeContext(parent, NamespaceOrType);
      override GetEnvironment = inEnvironment.AddOpen(NamespaceOrType.Parts(), NamespaceOrType.Location);
      override GrammarRef = GrammarRef(NamespaceOrType.NLocation(), index, None(), BindFixedType(env, NamespaceOrType));
    }
    AliasSyntaxModuleDecl   = "using" sm Alias sm "="  sm NamespaceOrType ";"nl
    {
      alias Alias = Identifier;
      override MakeContext = NamespaceOrTypeAliasContext(parent, Alias, NamespaceOrType);
      override GetEnvironment = inEnvironment.AddAlias(Alias.Value(), NamespaceOrType.Parts(), NamespaceOrType.Location);
      override GrammarRef = GrammarRef(NamespaceOrType.NLocation(), index, Some(Alias.Identifier()), BindFixedType(env, NamespaceOrType));
    }
  }

  syntax RuleAttribute
  {
    Value() : N2.Model.RuleAttribute;
    Options(inScope : N2Scope, inOptions : RuleDefinitionOptions) : N2Scope * RuleDefinitionOptions = (inScope, inOptions);
    Options2(context : Context, inOptions : RuleDefinitionOptions) : Context * RuleDefinitionOptions = (context, inOptions);
  }

  extend syntax RuleAttribute
  {
    StartAttribute                  = AttributeName
    {
      alias AttributeName = "StartRule";
      override Value = RuleAttribute.StartRule(NLocation(this, AttributeName));
      override Options = (inScope, inOptions.SetStart(this, true));
      override Options2 = (context, inOptions.SetStart(this, true));
    }
    SpanClassAttribute              = AttributeName "(" Class ")"
    {
      alias AttributeName = "SpanClass";
      alias Class = Identifier;
      override Value = RuleAttribute.SpanClass(NLocation(this, AttributeName), Class.NameRef());
      override Options = (inScope, inScope.BindSpanClass(Class).Map(inOptions.SetSpanClass(Class, _)) ?? inOptions);
      override Options2 = (context, context.Bind.[SpanClassSymbol](Class).Map(inOptions.SetSpanClass(Class, _)) ?? inOptions);
    }
    ExplicitSpacesAttribute         = AttributeName
    {
      alias AttributeName = "ExplicitSpaces";
      override Value = RuleAttribute.ExplicitSpaces(NLocation(this, AttributeName));
      override Options = (inScope, inOptions.SetExplicitSpaces(this, true));
      override Options2 = (context, inOptions.SetExplicitSpaces(this, true));
    }
    SuppressTrailingSpacesAttribute = AttributeName
    {
      alias AttributeName = "SuppressTrailingSpaces";
      override Value = RuleAttribute.SuppressTrailingSpaces(NLocation(this, AttributeName));
      override Options = (inScope, inOptions.SetSuppressTrailingSpaces(this, true));
      override Options2 = (context, inOptions.SetSuppressTrailingSpaces(this, true));
    }
  }

  syntax RuleAttributeList = "[" (RuleAttribute; ","sm)+ "]"
  {
    Value(acc : list[N2.Model.RuleAttribute]) : list[N2.Model.RuleAttribute] = 
      FoldThrough(RuleAttributes[0], acc, (x, acc) => x.Value() :: acc);
    Options(inScope : N2Scope, inOptions : RuleDefinitionOptions) : N2Scope * RuleDefinitionOptions = 
      FoldThrough(RuleAttributes[0], (inScope, inOptions), _.Options(_));
    Options2(context : Context, inOptions : RuleDefinitionOptions) : Context * RuleDefinitionOptions = 
      FoldThrough(RuleAttributes[0], (context, inOptions), _.Options2(_));
  }
  syntax RuleAttributes    = RuleAttributeList*
  {
    Value() : list[N2.Model.RuleAttribute] = FoldThrough(RuleAttributeLists, [], (x, acc) => x.Value(acc));
    Options(inScope : N2Scope) : RuleDefinitionOptions = FoldThrough(RuleAttributeLists, (inScope, RuleDefinitionOptions()), _.Options(_))[1];
    Options2(context : Context) : RuleDefinitionOptions = FoldThrough(RuleAttributeLists, (context, RuleDefinitionOptions()), _.Options2(_))[1];
  }

  [StartRule]
  syntax Declaration
  {
    CollectGlobalSymbols(sm : SyntaxModuleSymbol) : SyntaxModuleSymbol = sm;
    [Cached] MakeContext(parent : Context) : Context = parent;
    Typing(ruleDefinitions : list[RuleDefinition2]) : list[RuleDefinition2] = ruleDefinitions;

    RuleRefs(ruleRefs : List[RuleRefSymbol]) : void { _ = ruleRefs; }
    CollectRuleDefinitions(inScope : N2Scope, ruleDefinitions : list[RuleDefinition2]) : N2Scope * list[RuleDefinition2] = (inScope, ruleDefinitions);
    GetTokenFieldNames(result : Map[string, N2.Model.Identifier]) : Map[string, N2.Model.Identifier] = result;
  }

  extend syntax Declaration
  {
    ExtentionRuleDecl       = RuleAttributes "syntax"  sm             Name  sm "is" sm BaseName sm "=" sm Rule  BodyDeclaration
    {
      override CollectGlobalSymbols = AddRefSymbol(sm, this, Name.Value());
      override Typing = ExtentionRule(Context, this.Location, RuleAttributes, Name, BaseName, Rule, BodyDeclaration) :: ruleDefinitions;

      override CollectRuleDefinitions = 
        (inScope, ExtentionRule(inScope, this.Location, RuleAttributes, Name, BaseName, Rule, BodyDeclaration) :: ruleDefinitions);
    }
    SimpleRuleDecl          = RuleAttributes "syntax"  sm             Name  sm "="  sm Rule                     BodyDeclaration
    {
      override CollectGlobalSymbols = AddRefSymbol(sm, this, Name.Value());
      override Typing = SimpleRule(Context, this.Location, RuleAttributes, Name, Rule, BodyDeclaration) :: ruleDefinitions;

      override CollectRuleDefinitions = 
        (inScope, SimpleRule(inScope, this.Location, RuleAttributes, Name, Rule, BodyDeclaration) :: ruleDefinitions);
    }
    ExtentionPointRuleDecl  = RuleAttributes "syntax"  sm             Name                                      BodyDeclaration
    {
      override CollectGlobalSymbols = AddRefSymbol(sm, this, Name.Value());
      override Typing = ExtentionPointRule(Context, this.Location, RuleAttributes, Name, BodyDeclaration) :: ruleDefinitions;

      override CollectRuleDefinitions
      {
        def ruleSymbol = inScope.Bind(Name);
        assert2(ruleSymbol.IsSome);
        def ruleDefinition = RuleDefinition2.ExtentionPoint(this.Location, inScope.GetNextRuleId(), null, ruleSymbol.Value, 
          BodyDeclaration.GetExtraFields(), RuleAttributes.Options(inScope));
        (inScope, ruleDefinition :: ruleDefinitions);
      }
    }
    TokenRuleDecl           = RuleAttributes "token"   sm             Name  sm "="  sm TokenRule                BodyDeclaration
    {
      override CollectGlobalSymbols = AddRefSymbol(sm, this, Name.Value());
      override MakeContext
      {
        _ = TokenRule.MakeContext(parent);
        parent
      }
      override Typing = TokenRule(Context, this.Location, RuleAttributes, Name, TokenRule, BodyDeclaration) :: ruleDefinitions;

      override CollectRuleDefinitions
      {
        def ruleSymbol = inScope.Bind(Name);
        assert2(ruleSymbol.IsSome);
        def ruleDefinition = RuleDefinition2.Regular(this.Location, inScope.GetNextRuleId(), null, ruleSymbol.Value, 
          BodyDeclaration.GetExtraFields(), RuleAttributes.Options(inScope), null /*TokenRule.RegularRule()*/);
        (inScope, ruleDefinition :: ruleDefinitions);
      }
    }
    VoidRuleDecl            = RuleAttributes "void"    sm             Name  sm "="  sm Rule                     BodyDeclaration
    {
      override CollectGlobalSymbols = AddRefSymbol(sm, this, Name.Value());
      override Typing = SimpleRule(Context, this.Location, RuleAttributes, Name, Rule, BodyDeclaration) :: ruleDefinitions;

      override CollectRuleDefinitions = 
        (inScope, SimpleRule(inScope, this.Location, RuleAttributes, Name, Rule, BodyDeclaration) :: ruleDefinitions);
    }
    MarkerDecl              =                "marker"  sm             Name                                      ";"nl
    {
      override CollectGlobalSymbols = AddRefSymbol(sm, this, Name.Value());
    }
    ExtendSyntaxDecl        =                "extend"  sm "syntax" sm BaseName nl "{" inl ExtendSyntaxMember* d "}"nl
    {
      override CollectGlobalSymbols
      {
        foreach (m in ExtendSyntaxMembers)
          m.CollectGlobalSymbols(sm);
        sm
      }
      override MakeContext = FoldThrough(ExtendSyntaxMembers, parent, _.MakeContext(_));
      override Typing = FoldThrough(ExtendSyntaxMembers, ruleDefinitions, (m, r) => m.Typing(r, BaseName));

      override CollectRuleDefinitions = FoldThrough(ExtendSyntaxMembers, (inScope, ruleDefinitions), (m, (s, r)) => m.CollectRuleDefinitions(s, r, BaseName));
    }
    AliasDecl               =                RuleAlias
    {
      override MakeContext = RuleAlias.GetContext(parent);
      override CollectRuleDefinitions =  (RuleAlias.OutScope(inScope), ruleDefinitions);
    }
    TokenField              =                "token"   sm "field"  sm Name  sm "="  sm (StringLiteral; ","sm)+  ";"nl
    {
      override GetTokenFieldNames
      {
        def name = Name.Identifier();
        FoldThrough(StringLiterals[0], result, (strLit, result) => result.Replace(strLit.Value(), name))
      }
      override MakeContext = TokenFieldContext(parent, Name, StringLiterals[0]);
      override CollectRuleDefinitions = (inScope.AddTokenFieldNames(Name.Identifier(), StringLiterals[0]), ruleDefinitions);
    }
    SpanClassDecl           =                "span"    sm "class"  sm Name MatchTokens                          ";"nl
    {
      alias MatchTokens = ("=" TokenRule)?;
      override MakeContext
      {
        def context = SpanClassContext(parent, Name, MatchTokens.Map((_, tokenRule) => tokenRule));
        _ = MatchTokens.Map((_, tokenRule) => tokenRule.MakeContext(context));
        context
      }
      override Typing
      {
        _ = MatchTokens.Map((_, tokenRule) => tokenRule.MakeMatcher());
        ruleDefinitions
      }
      override CollectRuleDefinitions = (inScope.AddSpanClass(Name.Identifier(), MatchTokens.Map((_, tr) => tr.RegularRule())), ruleDefinitions);
    }
    BracePairDecl           =                "braces"  sm             Open "," sm Close                          ";"nl
    {
      alias Open  = TokenRule;
      alias Close = TokenRule;
      override MakeContext
      {
        def context = BracePairContext(parent, Open, Close);
        _ = Open.MakeContext(context);
        _ = Close.MakeContext(context);
        context
      }
      override Typing
      {
        _ = Open.MakeMatcher();
        _ = Close.MakeMatcher();
        ruleDefinitions
      }
      override CollectRuleDefinitions = (inScope.AddBracePair(Open.RegularRule(), Close.RegularRule()), ruleDefinitions);
    }
    KeywordRegexDecl        =                "keyword" sm "regex"  sm TokenRule as MatchTokens sm "rule" sm Name ";"nl
    {
      override MakeContext
      {
        def context = KeywordRegexContext(parent, MatchTokens, Name);
        _ = MatchTokens.MakeContext(context);
        context
      }
      override Typing
      {
        _ = Context.Bind(Name);
        _ = MatchTokens.MakeMatcher();
        ruleDefinitions
      }
      override CollectRuleDefinitions = (inScope.AddKeywordRegex(MatchTokens.RegularRule(), Name.Identifier()), ruleDefinitions);
    }
  }

  syntax RuleAlias = "alias"   sm             Name  sm "="  sm Rule                     ";"nl
  {
    GetContext(context : Context) : Context = RuleAliasContext(context, Name, Rule);
    OutScope(inScope : N2Scope) : N2Scope =  inScope.AddAlias(Name.Value(), Rule);
  }

  syntax ExtendSyntaxMember = RuleAttributes Name "=" Rule BodyDeclaration
  {
    CollectGlobalSymbols(sm : SyntaxModuleSymbol) : void = _ = AddRefSymbol(sm, this, Name.Value());
    RuleRefs(ruleRefs : List[RuleRefSymbol]) : void = ruleRefs.Add(ParsedRuleRefSymbol(this, Name.Value()));
    [Cached] MakeContext(parent : Context) : Context = parent;
    Typing(ruleDefinitions : list[RuleDefinition2], baseName : QIdentifier) : list[RuleDefinition2] =
      ExtentionRule(Context, this.Location, RuleAttributes, Name, baseName, Rule, BodyDeclaration) :: ruleDefinitions;
    CollectRuleDefinitions(inScope : N2Scope, ruleDefinitions : list[RuleDefinition2], baseName : QIdentifier) : N2Scope * list[RuleDefinition2] =
      (inScope, ExtentionRule(inScope, this.Location, RuleAttributes, Name, baseName, Rule, BodyDeclaration) :: ruleDefinitions);
    GetAliases(inScope : N2Scope) : N2Scope = BodyDeclaration.GetAliases(inScope);
    GetAliases2(context : Context) : Context = BodyDeclaration.GetAliases2(context);
  }

  syntax BodyDeclaration
  {
    GetPrecedence() : int = 0;
    GetAliases2(context : Context) : Context = context;
    GetAliases(inScope : N2Scope) : N2Scope = inScope;
    GetExtraFields() : list[ExtraField2];
  }

  extend syntax BodyDeclaration
  {
    EmptyBodyDeclaration = ";"nl
    {
      override GetExtraFields = [];
    }
    BlockBodyDeclaration = "{"  BodyMemberDeclaration* "}"nl
    {
      override GetExtraFields = FoldThrough(BodyMemberDeclarations, [], _.GetExtraFields(_));
      override GetPrecedence
      {
        match (BodyMemberDeclarations.Map(_.GetPrecedence()).Filter(_.IsSome))
        {
          | [VSome((p, _))] => p
          | [] => 0
          | VSome((p, loc)) :: tail =>
            using (rootMsg = Project.CurrentProject.RootError(loc, "Too many 'precedence' directives. You can define only one a 'precedence' directive.", -1))
              foreach (other in tail)
                rootMsg.Hint(other.Value[1], "   other definition.");
            p
          | _ => assert2(false); 0
        }
      }
      override GetAliases2 = FoldThrough(BodyMemberDeclarations, context, _.GetAliases2(_));
      override GetAliases  = FoldThrough(BodyMemberDeclarations, inScope, _.GetAliases(_));
    }
  }

  syntax FieldInitializer = "=" sm Expression;

  syntax ExtraFieldsParam = Name sm ":" sm Type;
  [ExplicitSpaces]
  syntax ExtraFieldPrivate = "private" sm;

  syntax ExtraFieldAttribute;
  extend syntax ExtraFieldAttribute
  {
    Cached = AttributeName { alias AttributeName = "Cached"; }
  }
  syntax ExtraFieldAttributeList = "[" (ExtraFieldAttribute; ",")+ "]";
  syntax ExtraFieldAttributes = ExtraFieldAttributeList*;

  syntax BodyMemberDeclaration
  {
    GetPrecedence() : ValueOption[int * N2.Location] = VNone();
    GetAliases2(context : Context) : Context = context;
    GetAliases(inScope : N2Scope) : N2Scope = inScope;
    GetExtraFields(result : list[ExtraField2]) : list[ExtraField2] = result;
  }

  extend syntax BodyMemberDeclaration
  {
    ExtraFieldDeclaration1 = ExtraFieldAttributes ExtraFieldPrivate? Name sm "(" (ExtraFieldsParam; "," sm)* ")" sm ":" sm Type ExtraFieldBody
    {
      override GetExtraFields
      {
        def bodyLocation = ExtraFieldBody.BodyLocation();

        if (ExtraFieldPrivates.IsSome)
          if (!bodyLocation.IsEmpty)
            ExtraField2.DefPrivate(this.Location, Name.Identifier(), ExtraFieldsParams[0], Type, bodyLocation) :: result
          else
          {
            Project.CurrentProject.Error(this.Location, "A private extra field must have body.", -1);
            result
          }
        else if (!bodyLocation.IsEmpty)
          ExtraField2.Def(this.Location, Name.Identifier(), ExtraFieldsParams[0], Type, bodyLocation) :: result
        else
          ExtraField2.Abstract(this.Location, Name.Identifier(), ExtraFieldsParams[0], Type) :: result
      }
    }
    ExtraFieldDeclaration2 = ExtraFieldAttributes "override"     sm  Name ExtraFieldBody
    {
      override GetExtraFields = ExtraField2.Override(this.Location, Name.Identifier(), ExtraFieldBody.BodyLocation()) :: result;
    }
    ExtraFieldDeclaration3 = ExtraFieldAttributes "error"        sm  Name ExtraFieldBody
    {
      override GetExtraFields = ExtraField2.Override(this.Location, Name.Identifier(), ExtraFieldBody.BodyLocation()) :: result;
    }
    // TODO: Create "Once" attribute which prevent use rule more then one times.
    InnerAliasDeclaration  = RuleAlias
    {
      override GetAliases2 = RuleAlias.GetContext(context);
      override GetAliases = RuleAlias.OutScope(inScope);
    } 
    PrecedenceDeclaration  = "precedence"   sm  Precedence RightAssociative ";"
    {
      alias Precedence = Number;
      alias RightAssociative = ("right-associative")?;
      override GetPrecedence = VSome((if (RightAssociative.IsSome) -Precedence.Value() else Precedence.Value(), this.Location));
    }  // TODO: make precedence table
  }

  syntax ExtraFieldBody
  {
    BodyLocation() : N2.Location;
  }

  extend syntax ExtraFieldBody
  {
    ExtraFieldBody1     = Block
    {
      override BodyLocation = Block.Location;
  }
    ExtraFieldBody2     = sm "=" sm Expression ";" nl
    {
      override BodyLocation = Expression.Location;
    }
    ExtraFieldBodyEmpty = ";" nl
    {
      override BodyLocation = Location(this.Location.Source, this.Location.StartPos, this.Location.StartPos);
    }
  }

  syntax TypeParams = "[" (Type; ","sm)+ "]";
  syntax SimpleName = Identifier TypeParams?;

  syntax Type;
  
  extend syntax Type
  {
    Type1 = SimpleName;
    Type2 = Type "." SimpleName { precedence 20; }
    Type3 = Type "*" Type       { precedence 10; }
  }

  syntax Block = nl "{" inl (Expression; ";" nl)* ";"* as Semicolons d "}" nl;
  syntax Parentheses = "(" Expression? ")";

  syntax Content;

  extend syntax Content
  {
    Content1 = Block;
    Content2 = IgnoreToken+;
    Content3 = CharLiteral;
    Content4 = StringLiteral;
    Content5 = Parentheses;
    Content6 = "fold" sm Identifier "(" Expression ";" (Expression; ";"sm)+ ")";
  }

  syntax ExpressionContent;

  extend syntax ExpressionContent
  {
    ExpressionContent1 = Content;
    ExpressionContent2 = (!";" !")" !"}" !Content Any)+;
  }

  syntax Expression = ExpressionContent+;

  syntax Range { RangeSet(inCharSet : RangeSet) : RangeSet; }

  extend syntax Range
  {
    SingleCharRange = CharLiteral
    {
      override RangeSet = inCharSet.AddSingleCharRange(CharLiteral.Value());
    }
    CharRange       = CharLiteral ".." CharLiteral
    {
      override RangeSet = inCharSet.AddRange(CharLiteral1.Value(), CharLiteral2.Value());
    }
    UnicodeRange    = Name
    {
      override RangeSet = 
        if (UnicodeCategoryTable.StrToUnicodeCategory(Name.Value()) is Some(cat))
          inCharSet.AddRange(cat)
        else
        {
          Project.CurrentProject.Error(this, "Invalid unicode category.", -1);
          inCharSet
        };
    }
  }

  syntax TokenRule
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    [Cached] Typing() : RegularRule2;
    [Cached] MakeMatcher() : RegularRuleMatcher = Typing().MakeMatcher();
    RegularRule() : RegularRule;
  }

  alias SeparatorToken = TokenRule;
  
  extend syntax TokenRule
  {
    ChoiceTokenRule                  = LeftRule sm RightRules
    {
      alias LeftRule = TokenRule : 10;
      alias RightRules = ("|" TokenRule : 10)+;
      override MakeContext
      {
        def context1 = LeftRule.MakeContext(parent);
        def context2 = FoldThrough(RightRules, context1, ((_, r), c) => r.MakeContext(c));
        context2
      }
      override Typing = RegularRule2.Choice(Location, LeftRule.Typing() :: RightRules.Map(r => r[1].Typing()));
      override RegularRule = RegularRule.Choice(this.NLocation(), LeftRule.RegularRule() :: RightRules.Map(r => r[1].RegularRule()));
    }
    SequenceTokenRule                = LeftRule sm RightRules
    {
      alias LeftRule = TokenRule : 20;
      alias RightRules = (TokenRule : 20)+;
      override MakeContext
      {
        def context1 = LeftRule.MakeContext(parent);
        def context2 = FoldThrough(RightRules, context1, _.MakeContext(_));
        context2
      }
      override Typing = RegularRule2.Sequence(Location, LeftRule.Typing() :: RightRules.Map(_.Typing()));
      override RegularRule = RegularRule.Sequence(this.NLocation(), LeftRule.RegularRule() :: RightRules.Map(_.RegularRule()));
    }
    OptionalTokenRule                = TokenRule "?"
    {
      precedence 30;
      override MakeContext = TokenRule.MakeContext(parent);
      override Typing = RegularRule2.Repeat(Location, 0, Some(1), this.TokenRule.Typing());
      override RegularRule = RegularRule.Repeat(this.NLocation(), 0, Some(1), this.TokenRule.RegularRule());
    }
    ZeroOrManyTokenRule              = TokenRule "*"
    {
      precedence 30;
      override MakeContext = TokenRule.MakeContext(parent);
      override Typing = RegularRule2.Repeat(Location, 0, None(), this.TokenRule.Typing());
      override RegularRule = RegularRule.Repeat(this.NLocation(), 0, None(), this.TokenRule.RegularRule());
    }
    OneOrManyTokenRule               = TokenRule "+"
    {
      precedence 30;
      override MakeContext = TokenRule.MakeContext(parent);
      override Typing = RegularRule2.Repeat(Location, 1, None(), this.TokenRule.Typing());
      override RegularRule = RegularRule.Repeat(this.NLocation(), 1, None(), this.TokenRule.RegularRule());
    }
    CharTokenRule                    = CharLiteral
    {
      override Typing = RegularRule2.Chars(Location, [RangeSet().AddSingleCharRange(CharLiteral.Value())]);
      override RegularRule = RegularRule.Chars(this.NLocation(), [RangeSet().AddSingleCharRange(CharLiteral.Value())]);
    }
    StringTokenRule                  = StringLiteral
    {
      override Typing = RegularRule2.Chars(Location, RangeSet.MakeString(StringLiteral.Value()));
      override RegularRule = RegularRule.Chars(this.NLocation(), RangeSet.MakeString(StringLiteral.Value()));
    }
    CallTokenRule                    = QualifiedName
    {
      override Typing
      {
        def ruleRef = RuleRef(QualifiedName, Context.Bind(QualifiedName));
        RegularRule2.Call(Location, ruleRef)
      }
      override RegularRule { def n = this.QualifiedName.NameRef(); RegularRule.Call(n.Location,  n) }
    }
    RoundsTokenRule                  = "(" TokenRule ")" 
    {
      override MakeContext = TokenRule.MakeContext(parent);
      override Typing = TokenRule.Typing();
      override RegularRule = TokenRule.RegularRule();
    }
    RangeTokenRule                   = "[" (Range; ","sm)+ "]"
    {
      override Typing = RegularRule2.Chars(Location, [FoldThrough(Ranges[0], RangeSet(), _.RangeSet(_))]);
      override RegularRule = RegularRule.Chars(this.NLocation(), [FoldThrough(Ranges[0], RangeSet(), _.RangeSet(_))]);
    }
    ZeroOrManyWithSeparatorTokenRule = "(" TokenRule ";"sm SeparatorToken ")" "*"
    {
      override MakeContext = parent |> TokenRule.MakeContext |> SeparatorToken.MakeContext;
      override Typing = RegularRule2.RepeatWithSeparator(Location, 0, None(), TokenRule.Typing(), SeparatorToken.Typing());
      override RegularRule = RegularRule.RepeatWithSeparator(this.NLocation(), 0, None(), TokenRule.RegularRule(), SeparatorToken.RegularRule());
    }
    OneOrManyWithSeparatorTokenRule  = "(" TokenRule ";"sm SeparatorToken ")" "+"
    {
      override MakeContext = parent |> TokenRule.MakeContext |> SeparatorToken.MakeContext;
      override Typing = RegularRule2.RepeatWithSeparator(Location, 1, None(), TokenRule.Typing(), SeparatorToken.Typing());
      override RegularRule = RegularRule.RepeatWithSeparator(this.NLocation(), 1, None(), TokenRule.RegularRule(), SeparatorToken.RegularRule());
    }
  }

  alias SeparatorRule = Rule;

  syntax NamespaceName = Name { NameRef() : NameRef = Name.NameRef(); }

  syntax Rule
  {
    GetRule() : N2.Model.Rule;
    GetRule2(_baseRule : option[RuleRefSymbol], _precedence : int, _fieldName : option[string], inScope : N2Scope) : N2.Model.Rule2;  // precedence < 0 if it is right-associative
    Typing(_baseRule : option[RuleRefSymbol], _precedence : int, _fieldName : option[string], context : Context) : N2.Model.Rule2;  // precedence < 0 if it is right-associative
  }

  extend syntax Rule
  {
    SequenceRule                = LeftRule RightRules
    {
      alias LeftRule = Rule : 10;
      alias RightRules = (sm Rule : 10)+;

      override GetRule = Rule.Sequence(this.NLocation(), RuleType.Void(), 0, LeftRule.GetRule() :: RightRules.Map(_.GetRule()));
      override GetRule2
      {
        def bp1   = if (_precedence < 0) -_precedence + 1 else _precedence;
        def bp2   = if (_precedence < 0) -_precedence     else _precedence;
        def rules = LeftRule.GetRule2(_baseRule, bp1, None(), inScope) :: RightRules.Map(_.GetRule2(_baseRule, bp2, None(), inScope));
        def type  = MakeType(rules.Map(_.Type));
        Rule2.Sequence(this.Location, type, 0, MakeName(_fieldName, rules, inScope), rules);
      }
      override Typing
      {
        def bp1   = if (_precedence < 0) -_precedence + 1 else _precedence;
        def bp2   = if (_precedence < 0) -_precedence     else _precedence;
        def rules = LeftRule.Typing(_baseRule, bp1, None(), context) :: RightRules.Map(_.Typing(_baseRule, bp2, None(), context));
        def type  = MakeType(rules.Map(_.Type));
        Rule2.Sequence(this.Location, type, 0, MakeName(_fieldName, rules, context), rules);
      }
    }
    NotRule                     = "!" Rule : 20
    {
      override GetRule = Rule.Not(this.NLocation(), RuleType.Void(), 0, this.Rule.GetRule());
      override GetRule2
      {
        def rule = this.Rule.GetRule2(None(), 0, None(), inScope);
        Rule2.Not(this.Location, RuleType2.Void(), 0, "", rule);
      }
      override Typing
      {
        def rule = this.Rule.Typing(None(), 0, None(), context);
        Rule2.Not(this.Location, RuleType2.Void(), 0, "", rule);
      }
    }
    AndRule                     = "&" Rule : 20
    {
      override GetRule = Rule.And(this.NLocation(), RuleType.Void(), 0, this.Rule.GetRule());
      override GetRule2 = Rule2.And(this.Location, RuleType2.Void(), 0, "", this.Rule.GetRule2(None(), 0, None(), inScope));
      override Typing = Rule2.And(this.Location, RuleType2.Void(), 0, "", this.Rule.Typing(None(), 0, None(), context));
    }
    OptionalRule                = Rule "?"
    {
      precedence 30;
      override GetRule = Rule.Repeat(this.NLocation(), RuleType.Void(), 0, 0, Some(1), this.Rule.GetRule());
      override GetRule2
      {
        def rule  = this.Rule.GetRule2(None(), 0, None(), inScope);
        def type  = if (rule.Type is RuleType2.Void) RuleType2.Void() else RuleType2.Option(rule.Type);
        Rule2.Repeat(this.Location, type, 0, _fieldName ?? (rule.FieldName + "Opt"), 0, Some(1), rule);
      }
      override Typing
      {
        def rule  = this.Rule.Typing(None(), 0, None(), context);
        def type  = if (rule.Type is RuleType2.Void) RuleType2.Void() else RuleType2.Option(rule.Type);
        Rule2.Repeat(this.Location, type, 0, _fieldName ?? (rule.FieldName + "Opt"), 0, Some(1), rule);
      }
    }
    ZeroOrManyRule              = Rule "*"
    {
      precedence 30;
      override GetRule = Rule.Repeat(this.NLocation(), RuleType.Void(), 0, 0, None(), this.Rule.GetRule());
      override GetRule2
      {
        def rule  = this.Rule.GetRule2(None(), 0, None(), inScope);
        def type  = if (rule.Type is RuleType2.Void) RuleType2.Void() else RuleType2.List(rule.Type);
        Rule2.Repeat(this.Location, type, 0, MakePlural(_fieldName, rule, inScope), 0, None(), rule);
      }
      override Typing
      {
        def rule  = this.Rule.Typing(None(), 0, None(), context);
        def type  = if (rule.Type is RuleType2.Void) RuleType2.Void() else RuleType2.List(rule.Type);
        Rule2.Repeat(this.Location, type, 0, MakePlural(_fieldName, rule, context), 0, None(), rule);
      }
    }
    OneOrManyRule               = Rule "+"
    {
      precedence 30;
      override GetRule = Rule.Repeat(this.NLocation(), RuleType.Void(), 0, 1, None(), this.Rule.GetRule());
      override GetRule2
      {
        def rule  = this.Rule.GetRule2(None(), 0, None(), inScope);
        def type  = if (rule.Type is RuleType2.Void) RuleType2.Void() else RuleType2.List(rule.Type);
        Rule2.Repeat(this.Location, type, 0, MakePlural(_fieldName, rule, inScope), 1, None(), rule);
      }
      override Typing
      {
        def rule  = this.Rule.Typing(None(), 0, None(), context);
        def type  = if (rule.Type is RuleType2.Void) RuleType2.Void() else RuleType2.List(rule.Type);
        Rule2.Repeat(this.Location, type, 0, MakePlural(_fieldName, rule, context), 1, None(), rule);
      }
    }
    FieldName                   = Rule : 11 sm "as" sm Name
    {
      override GetRule
      {
        Project.CurrentProject.Error(this, "The 'as' operator not allowed in subrules.", -1);
        this.Rule.GetRule()
      }
      override GetRule2 = this.Rule.GetRule2(_baseRule, _precedence, Some(Name.Value()), inScope);
      override Typing = this.Rule.Typing(_baseRule, _precedence, Some(Name.Value()), context);
    }
    CharRule                    = CharLiteral
    {
      override GetRule = Rule.String(CharLiteral.NLocation(), RuleType.Void(), 0, CharLiteral.Value().ToString());
      override GetRule2
      {
        def value  = CharLiteral.Value().ToString();
        Rule2.String(CharLiteral.Location, RuleType2.Chars(), 0, MakeLiteralName(_fieldName, value, inScope), CharLiteral.Value().ToString());
      }
      override Typing
      {
        def value  = CharLiteral.Value().ToString();
        Rule2.String(CharLiteral.Location, RuleType2.Chars(), 0, MakeLiteralName(_fieldName, value, context), CharLiteral.Value().ToString());
      }
    }
    StringRule                  = StringLiteral
    {
      override GetRule = Rule.String(StringLiteral.NLocation(), RuleType.Void(), 0, StringLiteral.Value());
      override GetRule2
      {
        def value  = StringLiteral.Value().ToString();
        Rule2.String(StringLiteral.Location, RuleType2.Chars(), 0, MakeLiteralName(_fieldName, value, inScope), StringLiteral.Value().ToString());
      }
      override Typing
      {
        def value  = StringLiteral.Value().ToString();
        Rule2.String(StringLiteral.Location, RuleType2.Chars(), 0, MakeLiteralName(_fieldName, value, context), StringLiteral.Value().ToString());
      }
    }
    RoundsRule                  = "(" Rule ")"
    {
      override GetRule = this.Rule.GetRule();
      override GetRule2 = this.Rule.GetRule2(_baseRule, _precedence, _fieldName, inScope);
      override Typing = this.Rule.Typing(_baseRule, _precedence, _fieldName, context);
    }
    CallRule                    = QualifiedName BindingPower
    {
      alias BindingPower = (sm ":" sm Number)?;
      override GetRule = Rule.Call(QualifiedName.CalcLocation().NLocation(), RuleType.Void(), 0, QualifiedName.NameRef(), BindingPower.Map((_, num) => num.Value()) ?? 0);
      override GetRule2
      {
        def parts = QualifiedName.Parts();
        def newFieldName = _fieldName ?? ToPascalCase(parts.LastOrDefault(""));

        when (inScope.TryGetAlias(parts) is Some(rule))
          return rule.GetRule2(_baseRule, _precedence, Some(newFieldName), inScope);

        def ruleRef = RuleRef(QualifiedName, inScope.Bind(QualifiedName));
        def type = if (ruleRef.Ref is Some(ruleSymbol)) ruleSymbol.Type else RuleType2.Void();
        def bp =
          match (BindingPower)
          {
            | None
            | Some((_, num)) when num.Value() == 0 => if (_baseRule.Equals(ruleRef.Ref)) _precedence  else 0
            | Some((_, num)) =>
              when (_precedence != 0)
                Project.CurrentProject.Error(num, "You can't set a binding power if you set a precedence.", -1);
              num.Value()
          };
        Rule2.Call(QualifiedName.Location, type, 0, newFieldName, ruleRef, bp);
      }
      override Typing
      {
        def parts = QualifiedName.Parts();
        def newFieldName = _fieldName ?? ToPascalCase(parts.LastOrDefault(""));

        when (context.TryBind.[RuleAliasSymbol](QualifiedName) is Some(alias))
          return alias.Rule.Typing(_baseRule, _precedence, Some(newFieldName), context);

        def ruleRef = RuleRef(QualifiedName, context.Bind(QualifiedName));
        def type = 
          if (ruleRef.Ref is Some(ruleSymbol))
          {
            when (ruleSymbol is ParsedRuleRefSymbol[ExtendSyntaxMember.Ast])
              Project.CurrentProject.Error(QualifiedName, 
                "You can't use directly reference to a extending rule. Use reference to extending rule instead or make a separate rule.", -1);
            ruleSymbol.Type
          }
          else
            RuleType2.Void();
        def bp =
          match (BindingPower)
          {
            | None
            | Some((_, num)) when num.Value() == 0 => if (_baseRule.Equals(ruleRef.Ref)) _precedence  else 0
            | Some((_, num)) =>
              when (_precedence != 0)
                Project.CurrentProject.Error(num, "You can't set a binding power if you set a precedence.", -1);
              num.Value()
          };
        Rule2.Call(QualifiedName.Location, type, 0, newFieldName, ruleRef, bp);
      }
    }
    ZeroOrManyWithSeparatorRule        = "(" Rule ";"sm SeparatorRule ")" "*"
    {
      override GetRule = Rule.RepeatWithSeparator(this.NLocation(), RuleType.Void(), 0, 0, None(), this.Rule.GetRule(), this.SeparatorRule.GetRule(), false);
      override GetRule2
      {
        def rule    = this.Rule.GetRule2(None(), 0, None(), inScope);
        def sepRule = SeparatorRule.GetRule2(None(), 0, None(), inScope);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, inScope), 0, None(), rule, sepRule, false);
      }
      override Typing
      {
        def rule    = this.Rule.Typing(None(), 0, None(), context);
        def sepRule = SeparatorRule.Typing(None(), 0, None(), context);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, context), 0, None(), rule, sepRule, false);
      }
    }
    ZeroOrManyWithHangingSeparatorRule = "(" Rule ";"sm SeparatorRule ";"sm "?" ")" "*"
    {
      override GetRule = Rule.RepeatWithSeparator(this.NLocation(), RuleType.Void(), 0, 0, None(), this.Rule.GetRule(), this.SeparatorRule.GetRule(), true);
      override GetRule2
      {
        def rule    = this.Rule.GetRule2(None(), 0, None(), inScope);
        def sepRule = SeparatorRule.GetRule2(None(), 0, None(), inScope);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, inScope), 0, None(), rule, sepRule, true);
      }
      override Typing
      {
        def rule    = this.Rule.Typing(None(), 0, None(), context);
        def sepRule = SeparatorRule.Typing(None(), 0, None(), context);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, context), 0, None(), rule, sepRule, true);
      }
    }
    OneOrManyWithSeparatorRule         = "(" Rule ";"sm SeparatorRule ")" "+"
    {
      override GetRule = Rule.RepeatWithSeparator(this.NLocation(), RuleType.Void(), 0, 1, None(), this.Rule.GetRule(), this.SeparatorRule.GetRule(), false);
      override GetRule2
      {
        def rule    = this.Rule.GetRule2(None(), 0, None(), inScope);
        def sepRule = SeparatorRule.GetRule2(_baseRule, 0, None(), inScope);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, inScope), 1, None(), rule, sepRule, false);
      }
      override Typing
      {
        def rule    = this.Rule.Typing(None(), 0, None(), context);
        def sepRule = SeparatorRule.Typing(_baseRule, 0, None(), context);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, context), 1, None(), rule, sepRule, false);
      }
    }
    OneOrManyWithHangingSeparatorRule  = "(" Rule ";"sm SeparatorRule ";"sm "?" ")" "+"
    {
      override GetRule = Rule.RepeatWithSeparator(this.NLocation(), RuleType.Void(), 0, 1, None(), this.Rule.GetRule(), this.SeparatorRule.GetRule(), true);
      override GetRule2
      {
        def rule    = this.Rule.GetRule2(None(), 0, None(), inScope);
        def sepRule = SeparatorRule.GetRule2(_baseRule, 0, None(), inScope);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, inScope), 1, None(), rule, sepRule, true);
      }
      override Typing
      {
        def rule    = this.Rule.Typing(None(), 0, None(), context);
        def sepRule = SeparatorRule.Typing(_baseRule, 0, None(), context);
        def type  = MakeType(rule, sepRule);
        Rule2.RepeatWithSeparator(this.Location, type, 0, MakeName(_fieldName, rule, sepRule, context), 1, None(), rule, sepRule, true);
      }
    }
  }
}