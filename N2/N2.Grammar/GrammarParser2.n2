using N2;
using N2.Utils;
using N2.Model;
using N2.ProjectSystem;
using N2.Runtime;
using N2.Typing;
using Nemerle.Collections;
using Nemerle.Compiler;

using System.Collections.Generic;
using System.Text;
using System.Linq;

syntax module GrammarParser2
{
  token field OpenBrace           = "(";
  token field CloseBrace          = ")";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field OpenSquareBrace     = "[";
  token field CloseSquareBrace    = "]";
  token field SingleQuote         = "\'";
  token field Quote               = "\"";
  token field Semicolon           = ";";
  token field Comma               = ",";
  token field Colon               = ":";
  token field Assign              = "=";
  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = "+", "-", "*", "/", "?", "^", "%", "&", "!", ".";
  token field Backslash           = "\\";

  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+['A'..'Z', 'a'..'z', '_'..'_', '-'..'-']* rule S;

  marker i;   // increase a indent
  marker d;   // decrease a indent
  marker nl;  // optional spacer and plase for \n while pretty printing
  marker inl; // i + nl
  marker sm;  // optional spacer and prefer to print space while pretty printing

  alias Name            = Identifier;
  alias QualifiedName   = QIdentifier;
  alias NamespaceOrType = QIdentifier;
  alias Char            = Any;
  alias GrammarName     = QIdentifier;
  alias BaseName        = QIdentifier;

  token Keyword = "as" | "syntax" | "token" | "alias" | "in" | "out" | "rule";

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
  token Spaces = Space+;


  [ExplicitSpaces] syntax IgnoreToken;

  extend syntax IgnoreToken
  {
    [ExplicitSpaces] SingleLineComment = "//" as Start (!NewLine Any)* as Body NewLine? as End;
    [ExplicitSpaces] MultiLineComment  = "/*" as Start (!"*/" Any)*    as Body "*/"     as End;
    [ExplicitSpaces] SpaceToken        = Spaces;
  }

  [ExplicitSpaces] void s   = IgnoreToken*;                // optional spacer
  [ExplicitSpaces] void S   = !IdentifierPartCharacters s; // identifier break spacer

  token LetterCharacter           = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я'];//[Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter        = [Mn, Mc];
  token DecimalDigitCharacter     = [Nd];
  token ConnectingCharacter       = [Pc];
  token FormattingCharacter       = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter 
                                  | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar        = "\"" | "\\";
  token ReservedCharChar          = "\'" | "\\";

  [SpanClass(String), ExplicitSpaces]
  syntax StringLiteral                    = "\""  StringPart* "\""
  {
    Value() : string = FoldThrough(StringParts, StringBuilder(), _.Value(_)).ToString();
  }

  [ExplicitSpaces] syntax StringPart { Value(sb : StringBuilder) : StringBuilder; }

  extend syntax StringPart
  {
    [ExplicitSpaces] UnicodeEscapeSequenceStringPart = "\\u" HexDigit HexDigit HexDigit HexDigit
    {
      override Value = sb.Append(HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos));
    }
    [ExplicitSpaces] EscapeSequenceStringPart        = "\\"  Char
    {
      override Value = sb.Append(EscapeSequence(FirstChar(Char)));
    }
    [ExplicitSpaces] SimpleStringPart                = Chars
    {
      alias Chars = (!ReservedStringChar Any)+;
      override Value = sb.Append(this);
    }
  }

  [SpanClass(Char), ExplicitSpaces]
  syntax CharLiteral                      = "\'"  CharPart "\'" { Value() : char = CharPart.Value(); }

  [ExplicitSpaces] syntax CharPart { Value() : char; }

  extend syntax CharPart
  {
    [ExplicitSpaces] SimpleCharPart                = !ReservedCharChar Char
    {
      override Value = FirstChar(this.Char);
    }
    [ExplicitSpaces] UnicodeEscapeSequenceCharPart = "\\u" HexDigit HexDigit HexDigit HexDigit
    {
      override Value = HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos);
    }
    [ExplicitSpaces] EscapeSequenceCharPart        = "\\" Char
    {
      override Value = EscapeSequence(FirstChar(this.Char));
    }
  }
  
  token Digits = ['0'..'9']+;

  [SpanClass(Number), ExplicitSpaces]
  syntax Number = Digits { Value() : int = DecToInt(this, Digits.StartPos, Digits.EndPos); }

  [ExplicitSpaces]
  syntax Identifier                       = !(Keyword !IdentifierPartCharacters) IdentifierBody
  {
    Value() : string = GetText(IdentifierBody);
    Identifier() : N2.Model.Identifier = N2.Model.Identifier(this, IdentifierBody);
    NameRef() : NameRef = NameRef(this.NLocation(), [GetText(IdentifierBody)]);
  }
  syntax QIdentifier                      = Names
  {
    alias Names = (Identifier; ".")+;
    Parts() : list[string] = Names[0].Map(_.Value());
    CalcLocation() : N2.Location
    {
      def loc = this.Location;
      N2.Location(loc.Source, loc.StartPos, Names[0].LastOrDefault(n => n.Location.StartPos, loc.StartPos))
    }
    NameRef() : NameRef = NameRef(CalcLocation().NLocation(), Parts());
  }

  ///////////////////////////////////////////////////////////////////////////
  //
  
  [StartRule, ExplicitSpaces]
  syntax Start                = s Using*  TopDeclaration* !Any
  {
    Env(env : GlobalEnv) : GlobalEnv = FoldThrough(Usings, env, _.Env(_));
    GetSyntaxModules() : list[list[string] * SyntaxModule.Ast] = TopDeclarations.OfType.[SyntaxModule.Ast]().Select(ast => ([], ast)).NToList();
    GetSyntaxModuleDatas(inEnvironment : Environment[N2Project]) : list[SyntaxModuleData]
    {
      def env = FoldThrough(Usings, inEnvironment, _.GetEnvironment(_));
      TopDeclarations.Map(decl => decl.GetSyntaxModuleData(env))
    }
    //OutScope(inScope : N2.Scope) : N2.Scope = PassThrough(TopDeclarations, inScope, _.OutScope(_));
  }

  syntax Using
  {
    Env(env : GlobalEnv) : GlobalEnv;
    GetEnvironment(inEnvironment : Environment[N2Project]) : Environment[N2Project];
  }

  extend syntax Using
  {
    UsingOpen  = "using" sm NamespaceOrType ";"
    {
      override Env = env.AddOpenNamespace(NamespaceOrType.Parts(), NamespaceOrType.NLocation());
      override GetEnvironment = inEnvironment.AddOpen(NamespaceOrType.Parts(), NamespaceOrType.Location);
    }
    UsingAlias = "using" Name sm "=" sm NamespaceOrType ";"
    {
      override Env = env.AddNamespaceAlias(Name.Value(), NamespaceOrType.Parts(), NamespaceOrType.NLocation());
      override GetEnvironment = inEnvironment.AddAlias(Name.Value(), NamespaceOrType.Parts(), NamespaceOrType.Location);
    }
  }

  syntax TopDeclaration
  {
    RuleRefs(ruleRefs : List[RuleRefSymbol]) : void;
    GetSyntaxModuleData(inEnvironment : Environment[N2Project]) : SyntaxModuleData;
    GrammarRefs(env : GlobalEnv) : list[GrammarRef];
    //OutScope(inScope : N2.Scope) : N2.Scope = inScope;
  }

  syntax SyntaxModule is TopDeclaration = "syntax"sm "module"sm Name nl "{" inl Import* Declaration* d "}" nl
  {
    override RuleRefs = foreach (d in Declarations) d.RuleRefs(ruleRefs);
    override GetSyntaxModuleData
    {
      def env = FoldThrough(Imports, inEnvironment, _.GetEnvironment(_));

      def ruleDefinitions = FoldThrough(Declarations, (N2Scope(env, ), []), _.CollectRuleDefinitions(_));
      SyntaxModuleData(inEnvironment.Bind(Name.Value(), Name.Location).Value, ruleDefinitions[1]);
    }
    override GrammarRefs = Imports.MapI((i, import) => import.GrammarRef(env, i));
    //override OutScope
    //{
    //  def newScope = FoldThrough(Imports, inScope, _.OutScope(_));
    //  PassThrough(Declarations, newScope, _.OutScope(_));
    //}
  }

  syntax Import
  {
    GetEnvironment(inEnvironment : Environment[N2Project]) : Environment[N2Project];
    GrammarRef(env : GlobalEnv, index : int) : GrammarRef;
    //OutScope(inScope : N2.Scope) : N2.Scope = inScope;
  }

  extend syntax Import
  {
    ImportSyntaxModuleDecl  = "using" sm GrammarName                  ";"nl
    {
      override GetEnvironment = inEnvironment.AddOpen(GrammarName.Parts(), GrammarName.Location);
      override GrammarRef = GrammarRef(GrammarName.NLocation(), index, None(), BindFixedType(env, GrammarName));
    }
    AliasSyntaxModuleDecl   = "using" sm Alias sm "="  sm GrammarName ";"nl
    {
      alias Alias = Identifier;
      override GetEnvironment = inEnvironment.AddAlias(Alias.Value(), GrammarName.Parts(), GrammarName.Location);
      override GrammarRef = GrammarRef(GrammarName.NLocation(), index, Some(Alias.Identifier()), BindFixedType(env, GrammarName));
    }
  }

  syntax RuleAttribute { Value() : N2.Model.RuleAttribute; }

  extend syntax RuleAttribute
  {
    StartAttribute                  = AttributeName
    {
      alias AttributeName = "StartRule";
      override Value = RuleAttribute.StartRule(NLocation(this, AttributeName));
    }
    SpanClassAttribute              = AttributeName "(" Class ")"
    {
      alias AttributeName = "SpanClass";
      alias Class = QIdentifier;
      override Value = RuleAttribute.SpanClass(NLocation(this, AttributeName), Class.NameRef());
    }
    ExplicitSpacesAttribute         = AttributeName
    {
      alias AttributeName = "ExplicitSpaces";
      override Value = RuleAttribute.ExplicitSpaces(NLocation(this, AttributeName));
    }
    SuppressTrailingSpacesAttribute = AttributeName
    {
      alias AttributeName = "SuppressTrailingSpaces";
      override Value = RuleAttribute.SuppressTrailingSpaces(NLocation(this, AttributeName));
    }
  }

  syntax RuleAttributeList = "[" (RuleAttribute; ","sm)+ "]"
  {
    Value(acc : list[N2.Model.RuleAttribute]) : list[N2.Model.RuleAttribute] = 
      FoldThrough(RuleAttributes[0], acc, (x, acc) => x.Value() :: acc);
  }
  syntax RuleAttributes    = RuleAttributeList*
  {
    Value() : list[N2.Model.RuleAttribute] = FoldThrough(RuleAttributeLists, [], (x, acc) => x.Value(acc));
  }

  [StartRule]
  syntax Declaration
  {
    CollectRuleDefinitions(inScope : N2Scope, ruleDefinitions : list[RuleDefinition2]) : N2Scope * list[RuleDefinition2] = (inScope, ruleDefinitions);
    //OutScope(inScope : N2.Scope) : N2.Scope = inScope;
    RuleRefs(ruleRefs : List[RuleRefSymbol]) : void { _ = ruleRefs; }
  }

  extend syntax Declaration
  {
    ExtentionRuleDecl       = RuleAttributes "syntax"  sm             Name  sm "is" sm BaseName sm "=" sm Rule  BodyDeclaration
    {
      override CollectRuleDefinitions
      {
        def id = inScope.GetNextRuleId();
        //def ruleSymbol = inScope.Bind(Name);
        //def baseRuleSymbol = inScope.Bind(BaseName);
        //def localAliases = BodyDeclaration.Aliases();
        //def precedence = BodyDeclaration.Precedence();
        //def ruleDef = RuleDefinition2.
        //(inScope, ruleDef :: ruleDefinitions)
        (inScope, ruleDefinitions)
      }
      override RuleRefs = ruleRefs.Add(ParsedRuleRefSymbol(this, Name.Value()));
      //override OutScope { FieldNames(inScope); inScope }
      //FieldNames(scope : Scope) : list[string] = Rule.FieldNames(scope);
    }
    SimpleRuleDecl          = RuleAttributes "syntax"  sm             Name  sm "="  sm Rule                     BodyDeclaration
    {
      override RuleRefs = ruleRefs.Add(ParsedRuleRefSymbol(this, Name.Value()));
    }
    ExtentionPointRuleDecl  = RuleAttributes "syntax"  sm             Name                                      BodyDeclaration
    {
      override RuleRefs = ruleRefs.Add(ParsedRuleRefSymbol(this, Name.Value()));
    }
    ExtendSyntax            =                "extend"  sm "syntax" sm BaseName nl "{" inl ExtendSyntaxMember* d "}"nl
    {
      //override OutScope = PassThrough(ExtendSyntaxMembers, inScope, _.OutScope(_));
    }
    TokenRuleDecl           = RuleAttributes "token"   sm             Name  sm "="  sm TokenRule                BodyDeclaration
    {
      override RuleRefs = ruleRefs.Add(ParsedRuleRefSymbol(this, Name.Value()));
    }
    VoidRuleDecl            = RuleAttributes "void"    sm             Name  sm "="  sm Rule                     ";"nl
    {
      override RuleRefs = ruleRefs.Add(ParsedRuleRefSymbol(this, Name.Value()));
    }
    Alias                   =                "alias"   sm             Name  sm "="  sm Rule                     ";"nl;
    TokenField              =                "token"   sm "field"  sm Name  sm "="  sm (StringLiteral; ","sm)+  ";"nl
    {
      //override OutScope = inScope.Nested(SymbolEx.TokenField(StringLiterals[0], Name));
    }
    SpanClassDecl           =                "span"    sm "class"  sm Name MatchTokens                          ";"nl
    { alias MatchTokens = ("=" TokenRule)?; }
    BracePairDecl           =                "braces"  sm             Open ","sm Close                          ";"nl
    { alias Open = TokenRule; alias Close = TokenRule; }
    MarkerDecl              =                "marker"  sm             Name                                      ";"nl
    {
      override RuleRefs = ruleRefs.Add(MarkerSymbol(this, Name.Value(), false));
    }
    KeywordRegexDecl        =                "keyword" sm "regex"  sm TokenRule as MatchTokens sm "rule" sm Name ";"nl;
  }

  syntax ExtendSyntaxMember = RuleAttributes Name "=" Rule BodyDeclaration
  {
    //OutScope(inScope : N2.Scope) : N2.Scope = BodyDeclaration.OutScope(inScope);
  }

  syntax BodyDeclaration
  {
    //OutScope(inScope : N2.Scope) : N2.Scope = inScope;
  }

  extend syntax BodyDeclaration
  {
    EmptyBodyDeclaration = ";"nl;
    BlockBodyDeclaration = "{"  BodyMemberDeclaration* "}"nl
    {
      //override OutScope = PassThrough(BodyMemberDeclarations, inScope, _.OutScope(_));
    }
  }

  syntax FieldInitializer = "=" sm Expression;

  syntax BodyMemberDeclaration
  {
    //OutScope(inScope : N2.Scope) : N2.Scope = inScope;
  }

  syntax ExtraFieldsParam = Name sm ":" sm Type;
  [ExplicitSpaces]
  syntax ExtraFieldPrivate = "private" sm;

  extend syntax BodyMemberDeclaration
  {
    ExtraFieldDeclaration1 = ExtraFieldPrivate? Name sm "(" (ExtraFieldsParam; "," sm)* ")" sm ":" sm Type ExtraFieldBody;
    ExtraFieldDeclaration2 = "override"     sm  Name ExtraFieldBody;
    ExtraFieldDeclaration3 = "error"        sm  Name ExtraFieldBody;
    // TODO: Create "Once" attribute which prevent use rule more then one times.
    InnerAliasDeclaration  = "alias"        sm  Name "=" sm Rule ";"nl; 
    PrecedenceDeclaration  = "precedence"   sm  Precedence RightAssociative ";"
    {
      alias Precedence = Number;
      alias RightAssociative = ("right-associative")?;
    }  // TODO: make precedence table
  }

  syntax ExtraFieldBody;

  extend syntax ExtraFieldBody
  {
    ExtraFieldBody1     = Block;
    ExtraFieldBody2     = sm "=" sm Expression ";" nl;
    ExtraFieldBodyEmpty = ";" nl;
  }

  syntax TypeParams = "[" (Type; ","sm)+ "]";
  syntax SimpleName = Identifier TypeParams?;

  syntax Type;
  
  extend syntax Type
  {
    Type1 = SimpleName;
    Type2 = Type "." SimpleName { precedence 20; }
    Type3 = Type "*" Type       { precedence 10; }
  }

  syntax Block = nl "{" inl (Expression; ";" nl)* ";"* as Semicolons d "}" nl;
  syntax Parentheses = "(" Expression? ")";

  syntax Content;

  extend syntax Content
  {
    Content1 = Block;
    Content2 = IgnoreToken+;
    Content3 = CharLiteral;
    Content4 = StringLiteral;
    Content5 = Parentheses;
    Content6 = "fold" sm Identifier "(" Expression ";" (Expression; ";"sm)+ ")";
  }

  syntax ExpressionContent;

  extend syntax ExpressionContent
  {
    ExpressionContent1 = Content;
    ExpressionContent2 = (!";" !")" !"}" !Content Any)+;
  }

  syntax Expression = ExpressionContent+;

  syntax Range { RangeSet(inCharSet : RangeSet) : RangeSet; }

  extend syntax Range
  {
    SingleCharRange = CharLiteral
    {
      override RangeSet = inCharSet.AddSingleCharRange(CharLiteral.Value());
    }
    CharRange       = CharLiteral ".." CharLiteral
    {
      override RangeSet = inCharSet.AddRange(CharLiteral1.Value(), CharLiteral2.Value());
    }
    UnicodeRange    = Name
    {
      override RangeSet = 
        if (UnicodeCategoryTable.StrToUnicodeCategory(Name.Value()) is Some(cat))
          inCharSet.AddRange(cat)
        else
        {
          Project.CurrentProject.Error(this, "Invalid unicode category.", -1);
          inCharSet
        };
    }
  }

  syntax TokenRule
  {
    RegularRule() : RegularRule;
  }

  alias SeparatorToken = TokenRule;
  
  extend syntax TokenRule
  {
    ChoiceTokenRule                  = LeftRule sm RightRules
    {
      alias LeftRule = TokenRule : 10; alias RightRules = ("|" TokenRule : 10)+;
      override RegularRule = RegularRule.Choice(this.NLocation(), LeftRule.RegularRule() :: RightRules.Map(r => r[1].RegularRule()));
    }
    SequenceTokenRule                = LeftRule sm RightRules
    {
      alias LeftRule = TokenRule : 20; alias RightRules = (TokenRule : 20)+;
      override RegularRule = RegularRule.Sequence(this.NLocation(), LeftRule.RegularRule() :: RightRules.Map(_.RegularRule()));
    }
    OptionalTokenRule                = TokenRule "?"
    {
      precedence 30;
      override RegularRule = RegularRule.Repeat(this.NLocation(), 0, Some(1), this.TokenRule.RegularRule());
    }
    ZeroOrManyTokenRule              = TokenRule "*"
    {
      precedence 30;
      override RegularRule = RegularRule.Repeat(this.NLocation(), 0, None(), this.TokenRule.RegularRule());
    }
    OneOrManyTokenRule               = TokenRule "+"
    {
      precedence 30;
      override RegularRule = RegularRule.Repeat(this.NLocation(), 1, None(), this.TokenRule.RegularRule());
    }
    CharTokenRule                    = CharLiteral
    {
      override RegularRule = RegularRule.Chars(this.NLocation(), [RangeSet().AddSingleCharRange(CharLiteral.Value())]);
    }
    StringTokenRule                  = StringLiteral
    {
      override RegularRule = RegularRule.Chars(this.NLocation(), RangeSet.MakeString(StringLiteral.Value()));
    }
    CallTokenRule                    = QualifiedName
    {
      override RegularRule { def n = this.QualifiedName.NameRef(); RegularRule.Call(n.Location,  n) }
    }
    RoundsTokenRule                  = "(" TokenRule ")" 
    {
      override RegularRule = TokenRule.RegularRule();
    }
    RangeTokenRule                   = "[" (Range; ","sm)+ "]"
    {
      override RegularRule = RegularRule.Chars(this.NLocation(), [FoldThrough(Ranges[0], RangeSet(), _.RangeSet(_))]);
    }
    ZeroOrManyWithSeparatorTokenRule = "(" TokenRule ";"sm SeparatorToken ")" "*"
    {
      override RegularRule = RegularRule.RepeatWithSeparator(this.NLocation(), 0, None(), TokenRule.RegularRule(), SeparatorToken.RegularRule());
    }
    OneOrManyWithSeparatorTokenRule  = "(" TokenRule ";"sm SeparatorToken ")" "+"
    {
      override RegularRule = RegularRule.RepeatWithSeparator(this.NLocation(), 1, None(), TokenRule.RegularRule(), SeparatorToken.RegularRule());
    }
  }

  alias SeparatorRule = Rule;

  syntax NamespaceName = Name { NameRef() : NameRef = Name.NameRef(); }

  syntax Rule
  {
    //OutScope(inScope : N2.Scope) : N2.Scope = inScope;
    GetRule() : N2.Model.Rule;
    //FieldNames(scope : Scope) : string = [];
  }

  extend syntax Rule
  {
    SequenceRule                = LeftRule RightRules
    {
      alias LeftRule = Rule : 10;
      alias RightRules = (sm Rule : 10)+;

      override GetRule = Rule.Sequence(this.NLocation(), RuleType.Void(), 0, LeftRule.GetRule() :: RightRules.Map(_.GetRule()));
    }
    NotRule                     = "!" Rule : 20
    {
      override GetRule = Rule.Not(this.NLocation(), RuleType.Void(), 0, this.Rule.GetRule());
    }
    AndRule                     = "&" Rule : 20
    {
      override GetRule = Rule.And(this.NLocation(), RuleType.Void(), 0, this.Rule.GetRule());
    }
    OptionalRule                = Rule "?"
    {
      precedence 30;
      override GetRule = Rule.Repeat(this.NLocation(), RuleType.Void(), 0, 0, Some(1), this.Rule.GetRule());
    }
    ZeroOrManyRule              = Rule "*"
    {
      precedence 30;
      override GetRule = Rule.Repeat(this.NLocation(), RuleType.Void(), 0, 0, None(), this.Rule.GetRule());
    }
    OneOrManyRule               = Rule "+"
    {
      precedence 30;
      override GetRule = Rule.Repeat(this.NLocation(), RuleType.Void(), 0, 1, None(), this.Rule.GetRule());
    }
    FieldName                   = Rule : 11 sm "as" sm Name
    {
      override GetRule
      {
        Project.CurrentProject.Error(this, "The 'as' operator not allowed in subrules.", -1);
        this.Rule.GetRule()
      }
    }
    CharRule                    = CharLiteral
    {
      override GetRule = Rule.String(CharLiteral.NLocation(), RuleType.Void(), 0, CharLiteral.Value().ToString());
    }
    StringRule                  = StringLiteral
    {
      override GetRule = Rule.String(StringLiteral.NLocation(), RuleType.Void(), 0, StringLiteral.Value().ToString());
    }
    RoundsRule                  = "(" Rule ")"
    {
      override GetRule = this.Rule.GetRule();
    }
    CallRule                    = QualifiedName BindingPower
    {
      alias BindingPower = (sm ":" sm Number)?;
      override GetRule = Rule.Call(QualifiedName.NLocation(), RuleType.Void(), 0, QualifiedName.NameRef(), BindingPower.Map((_, num) => num.Value()) ?? 0);
    }
    ZeroOrManyWithSeparatorRule = "(" Rule ";"sm SeparatorRule ")" "*"
    {
      override GetRule = Rule.RepeatWithSeparator(this.NLocation(), RuleType.Void(), 0, 0, None(), this.Rule.GetRule(), this.SeparatorRule.GetRule());
    }
    OneOrManyWithSeparatorRule  = "(" Rule ";"sm SeparatorRule ")" "+"
    {
      override GetRule = Rule.RepeatWithSeparator(this.NLocation(), RuleType.Void(), 0, 1, None(), this.Rule.GetRule(), this.SeparatorRule.GetRule());
    }
    Scope                       = NamespaceName sm "{"sm Rule sm "}"sm
    {
      override GetRule = Rule.Scope(this.NLocation(), RuleType.Void(), 0, NamespaceName.NameRef(), this.Rule.GetRule());
    }
  }
}