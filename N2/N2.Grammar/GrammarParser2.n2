using N2;

syntax module GrammarParser2
{
  token field OpenBrace           = "(";
  token field CloseBrace          = ")";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field OpenSquareBrace     = "[";
  token field CloseSquareBrace    = "]";
  token field SingleQuote         = "\'";
  token field Quote               = "\"";
  token field Semicolon           = ";";
  token field Comma               = ",";
  token field Colon               = ":";
  token field Assign              = "=";
  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = "+", "-", "*", "/", "?", "^", "%", "&", "!";
  token field Backslash           = "\\";

  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  [StartRule]
  syntax Start                = s OpenNamespace*  TopDeclaration* !Any;

  [Ast(                         _,       Namespace,  _)]
  syntax OpenNamespace        = "using"s QIdentifier ";"s;

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
	token Spaces = Space+;


  syntax IgnoreToken;

  [Ast(                                      Start, Body,           NewLine)]
  syntax SingleLineComment  is IgnoreToken = "//"   (!NewLine Any)* NewLine?;

  [Ast(                                      Start, Body,        End)]
  syntax MultiLineComment   is IgnoreToken = "/*"   (!"*/" Any)* "*/";

  syntax SpaceToken         is IgnoreToken = Spaces;


  void s = IgnoreToken*;                      /* optional spacer          */
  void S = !IdentifierPartCharacters s; /* identifier break spacer  */


  token LetterCharacter           = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я'];//[Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter        = [Mn, Mc];
  token DecimalDigitCharacter     = [Nd];
  token ConnectingCharacter       = [Pc];
  token FormattingCharacter       = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar        = "\"" | "\\";
  token ReservedCharChar          = "\'" | "\\";

  alias Name          = Identifier;
  alias QualifiedName = QIdentifier;
  alias Char          = Any;

  syntax TopDeclaration;

  syntax SyntaxModule is TopDeclaration = "syntax"S "module"S Name "{"s  Declaration*  "}"s;

  [SpanClass(String)]
  syntax StringLiteral                    = "\""  StringPart* "\"" s;

  syntax StringPart;

  syntax UnicodeEscapeSequenceStringPart  is StringPart = "\\u" HexDigit HexDigit HexDigit HexDigit;
  syntax EscapeSequenceStringPart         is StringPart = "\\"  Char;
  syntax SimpleStringPart                 is StringPart = Chars { alias Chars = (!ReservedStringChar Any)+; }

  [SpanClass(Char)]
  syntax CharLiteral                      = "\'"  CharPart "\'" s;
  
  syntax CharPart;

  syntax SimpleCharPart                   is CharPart = !ReservedCharChar Char;
  syntax UnicodeEscapeSequenceCharPart    is CharPart = "\\u" HexDigit HexDigit HexDigit HexDigit;
  syntax EscapeSequenceCharPart           is CharPart = "\\" Char;
  
  token Digits = ['0'..'9']+;

  [SpanClass(Number)]
  syntax Number                           = Digits s;
  syntax Identifier                       = IdentifierBody s;
  syntax QIdentifier                      = Names             { alias Names = (Identifier; "."s)+; }
  
  syntax RuleAttribute;

  syntax StartAttribute     is RuleAttribute = AttributeName S                   { alias AttributeName = "StartRule"; }
  syntax AstAttribute       is RuleAttribute = AttributeName S "("s  Names ")"s  { alias AttributeName = "Ast";       alias Names = (Identifier; ","s)*; }
  syntax SpanClassAttribute is RuleAttribute = AttributeName S "("s  Class ")"s  { alias AttributeName = "SpanClass"; alias Class = QIdentifier; }

  syntax RuleAttributeList = "["s  (RuleAttribute; ","s)+ "]"s;
  syntax RuleAttributes    = RuleAttributeList*;

  syntax Declaration;

  alias GrammarName = QIdentifier;

  syntax TokenRuleDecl          is Declaration = RuleAttributes "token"S          Name "="s TokenRule ";"s;
  syntax VoidRuleDecl           is Declaration = RuleAttributes "void"S           Name "="s Rule ";"s;
  syntax SimpleRuleDecl         is Declaration = RuleAttributes "syntax"S         Name "="s Rule BodyDeclaration;
  syntax ExtentionPointRuleDecl is Declaration = RuleAttributes "syntax"S         Name ";"s;
  syntax Alias                  is Declaration =                "alias"S          Name "="s Rule ";"s;
  syntax TokenField             is Declaration =                "token"S "field"S Name "="s (StringLiteral; ","s)+ ";"s;
  syntax ExtentionRuleDecl      is Declaration = RuleAttributes "syntax"S         Name "is"S BaseName "="s Rule BodyDeclaration     { alias BaseName = QIdentifier; }
  syntax SpanClassDecl          is Declaration =                "span"S "class"S  Name MatchTokens ";"s                             { alias MatchTokens = ("="s TokenRule)?; }
  syntax BracePairDecl          is Declaration =                "braces"S         Open ","s Close ";"s                              { alias Open = TokenRule; alias Close = TokenRule; }
  syntax ImportSyntaxModuleDecl is Declaration =                "using"S          GrammarName ";"s;
  syntax AliasSyntaxModuleDecl  is Declaration =                "using"S          Alias "="s GrammarName ";"s                       { alias Alias = Identifier; }
  syntax OptionEmitDebugSources is Declaration =                "option"S         "EmitDebugSources"S "="s Value ";"s               { alias Value = Identifier; }

  syntax BodyDeclaration;

  syntax EmptyBodyDeclaration  is BodyDeclaration = ";"s;
  syntax BlokBodyDeclaration   is BodyDeclaration = "{"s  BodyMemberDeclaration* "}"s;

  syntax BodyMemberDeclaration;

  syntax InnerAliasDeclaration is BodyMemberDeclaration = "alias"S Name "="s Rule ";"s;                  // TODO: Create "Once" attribute which prevent use rule more then one times.
  syntax PrecedenceDeclaration is BodyMemberDeclaration = "precedence"S Precedence RightAssociative ";"s { alias Precedence = Number; alias RightAssociative = ("right-associative"S)?; }  // TODO: make precedence table

  syntax Range;

  syntax SingleCharRange is Range = CharLiteral;
  syntax CharRange       is Range = CharLiteral ".."s   CharLiteral;
  syntax UnicodeRange    is Range = Name;

  syntax TokenRule;

  alias SeparatorToken = TokenRule;

  syntax ChoiceTokenRule                  is TokenRule = LeftRule RightRules  { alias LeftRule = TokenRule : 10; alias RightRules = ("|"s TokenRule : 10)+; }
  syntax SequenceTokenRule                is TokenRule = LeftRule RightRules  { alias LeftRule = TokenRule : 20; alias RightRules = (TokenRule : 20)+; }
  syntax OptionalTokenRule                is TokenRule = TokenRule "?"s       { precedence 30; }
  syntax ZeroOrManyTokenRule              is TokenRule = TokenRule "*"s       { precedence 30; }
  syntax OneOrManyTokenRule               is TokenRule = TokenRule "+"s       { precedence 30; }
  syntax CharTokenRule                    is TokenRule = CharLiteral;
  syntax StringTokenRule                  is TokenRule = StringLiteral;
  syntax CallTokenRule                    is TokenRule = QualifiedName;
  syntax RoundsTokenRule                  is TokenRule = "("s TokenRule ")"s;
  syntax RangeTokenRule                   is TokenRule = "["s (Range; ","s)+ "]"s;
  syntax ZeroOrManyWithSeparatorTokenRule is TokenRule = "("s TokenRule ";"s SeparatorToken ")"s "*"s;
  syntax OneOrManyWithSeparatorTokenRule  is TokenRule = "("s TokenRule ";"s SeparatorToken ")"s "+"s;

  syntax Rule;

  alias SeparatorRule = Rule;

  syntax SequenceRule                is Rule = LeftRule RightRules                     { alias LeftRule = Rule : 10; alias RightRules = (Rule : 10)+; }
  syntax NotRule                     is Rule = "!"s Rule : 20;
  syntax AndRule                     is Rule = "&"s Rule : 20;
  syntax OptionalRule                is Rule = Rule : 30 "?"s;
  syntax ZeroOrManyRule              is Rule = Rule : 30 "*"s;
  syntax OneOrManyRule               is Rule = Rule : 30 "+"s;
  syntax CharRule                    is Rule = CharLiteral;
  syntax StringRule                  is Rule = StringLiteral;
  syntax RoundsRule                  is Rule = "("s  Rule ")"s;
  syntax CallRule                    is Rule = QualifiedName BindingPower              { alias BindingPower = (":"s Number)?; }
  syntax ZeroOrManyWithSeparatorRule is Rule = "("s Rule ";"s SeparatorRule ")"s "*"s;
  syntax OneOrManyWithSeparatorRule  is Rule = "("s Rule ";"s SeparatorRule ")"s "+"s;
  syntax Scope                       is Rule = Name "{"s Rule "}"s;
}