using N2.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class SyntaxModuleSymbol : SingleDefSymbol
  {
    public abstract TokenFields : list[TokenFieldSymbol] { get; }
  }

  public sealed class ParsedSyntaxModuleSymbol : SyntaxModuleSymbol
  {
    private _ast : G.SyntaxModule.Ast { get; }

    public this(ast : G.SyntaxModule.Ast)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public FinalContext : Context { get { _ast.FinalContext } }

    public override TokenFields : list[TokenFieldSymbol]
    {
      [Memoize] get
      {
        def loop(context : TokenFieldContext, acc : list[TokenFieldSymbol]) : list[TokenFieldSymbol]
        {
          if (null == context)
            acc
          else
            loop(context.TryGetParent(), context.TokenField :: acc)
        }
        loop(FinalContext.TryGetContext(), [])
      }
    }

    public override Description : string
    {
      get { "syntax module" }
    }
  }
}
