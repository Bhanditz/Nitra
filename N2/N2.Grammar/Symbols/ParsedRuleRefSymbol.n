using N2.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public class ParsedRuleRefSymbol[T] : RuleRefSymbol
    where T: N2.Ast
  {
    public this(value : T, name : string)
    {
      base(value, name);
      Value = value;
      Type  = match (value)
      {
        | _ is G.VoidRuleDecl  => RuleType2.Void()
        | _ is G.MarkerDecl    => RuleType2.Void()
        | _ is G.TokenRuleDecl => RuleType2.Chars()
        | _                    => RuleType2.Ref(this)
      }
      IsExtentionPoint = value is G.ExtentionPointRuleDecl;
    }

    public          Value            : T         { get; }
    public override Type             : RuleType2 { get; }
    public override IsExtentionPoint : bool      { get; }
    public override Description      : string    { get { typeof(T).BaseType.Name } }
    public override Options          : RuleDefinitionOptions
    {
      [Memoize]
      get
      {
        match (Value)
        {
          | ast is G.ExtentionRuleDecl.Ast      => ast.RuleAttributes.Options2()
          | ast is G.SimpleRuleDecl.Ast         => ast.RuleAttributes.Options2()
          | ast is G.ExtentionPointRuleDecl.Ast => ast.RuleAttributes.Options2()
          | ast is G.TokenRuleDecl.Ast          => ast.RuleAttributes.Options2()
          | ast is G.VoidRuleDecl.Ast           => ast.RuleAttributes.Options2()
          | _   is G.MarkerDecl.Ast             => RuleDefinitionOptions()
          | _                                   => assert2(false); assert(false);//RuleDefinitionOptions()
        }
      }
    }
  }
}
