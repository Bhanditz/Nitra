using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;

using System;
using System.Collections.Generic;
using System.Linq;

using G = N2Syntax;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class SpanClassSymbol : SingleDefSymbol
  {
    public abstract RegularRule     : option[RegularRule] { get; }
    public override Description     : string              { get "span class" }
    public abstract DeclaringModule : SyntaxModuleSymbol  { get; }
  }

  public sealed class ParsedSpanClassSymbol : SpanClassSymbol
  {
    private _ast : G.Declaration_SpanClass.Ast;

    public override DeclaringModule : SyntaxModuleSymbol { get; }

    public this(ast : G.Declaration_SpanClass.Ast, context : Context)
    {
      base(ast.Name);
      _ast = ast;
      def syntaxModuleSymbol = context.GetContext.[SyntaxModuleContext]().SyntaxModuleSymbol;
      DeclaringModule = syntaxModuleSymbol;
    }

    public override RegularRule : option[RegularRule]        { get { _ast.RegularRule } }
  }
}
