using N2.Model;
using N2.Typing.ExtraField;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record]
  [Symbol]
  public abstract class SimpleRuleSymbol : TypeBoundRuleSymbol
  {
    public abstract Rule         : Rule.Sequence  { get; }
    public override Description  : string         { get { "simple rule" } }

    public override GetSubRules()    : list[Rule] { Rule.GetSubRules() }
    public override GetAllSubRules() : list[Rule] { Rule.GetAllSubRules() }
  }

  public sealed class ParsedSimpleRuleSymbol : SimpleRuleSymbol
  {
    public this (ast : G.SimpleRuleDecl.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast : G.SimpleRuleDecl.Ast;
    
    public override Type             : RuleType              { get { _ast.Type } }
    public override IsExtentionPoint : bool                  { get { false } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
    public override LastLocation     : option[Location]      { get { Some(_ast.BodyDeclaration.GetLastLocation()) } }
  }

  public sealed class ParsedVoidRuleSymbol : SimpleRuleSymbol
  {
    public this (ast : G.VoidRuleDecl.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast : G.VoidRuleDecl.Ast;
    
    public override Description      : string                { get { "void rule" } }
    public override Type             : RuleType              { get { RuleType.Void() } }
    public override IsExtentionPoint : bool                  { get { false } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
  }
}
