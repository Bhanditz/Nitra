using Nemerle;

using N2.Model;
using N2.Typing.ExtraField;

using G = N2SyntaxAst;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class SimpleRuleSymbol : SyntaxRuleSymbol
  {
    public override Description : string { get { if (Type is RuleType.Void) "void rule" else "simple rule" } }
  }

  public sealed class ParsedSimpleRuleSymbol : SimpleRuleSymbol
  {
    public this(ast : G.Declaration.SimpleRule, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    public _ast : G.Declaration.SimpleRule;

    public override DeclarationSite  : IRuleDeclarationSite  { get; }
    public override Type             : RuleType              { [Memoize] get { RuleType.Ref(this) } }
    public override Options          : RuleDefinitionOptions {           get { _ast.RuleAttributes.Options(RuleDefinitionOptions.Empty) } }
    public override Rule             : Rule.Sequence         {           get { _ast.TypedRule } }
    public override LastLocation     : option[Location]      { [Memoize] get { Some(_ast.SimpleRuleBody.GetLastLocation()) } }
    public override IdInGrammar      : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }

  public sealed class ParsedVoidRuleSymbol : SimpleRuleSymbol
  {
    public this(ast : G.Declaration.VoidRule, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    public _ast : G.Declaration.VoidRule;

    public override DeclarationSite  : IRuleDeclarationSite  { get; }
    public override Type             : RuleType              { get { RuleType.Void() } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options(RuleDefinitionOptions.Empty) } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
    public override IdInGrammar      : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }
}
