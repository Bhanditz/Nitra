using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record]
  public abstract class RuleDefSymbol : RuleSymbol
  {
    public ExtraFields               : list[ExtraFieldSymbol] { [Memoize] get { Node.GetChildren.[ExtraField.ExtraFieldSymbol]().NToList() } }

    public abstract Type             : RuleType               { get; }
    public abstract IsExtentionPoint : bool                   { get; }
    public abstract Options          : RuleDefinitionOptions  { get; }

    //public abstract NonVoidSubRules  : list[Rule] { get; }
    //public abstract SubRules         : list[Rule] { get; }
    
    public virtual LastLocation      : option[Location] { get { None() } }

    public IsAst : bool
    {
      get
      {
        match (this)
        {
          | SimpleRuleSymbol as symbol => !(symbol.Type is RuleType.Void)
          | ExtensibleRuleSymbol       => true
          | ExtentionRuleSymbol        => true
          | _                          => false
        }
      }
    }
  }
}
