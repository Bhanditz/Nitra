using N2.Model;
using N2.Typing.ExtraField;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record]
  public abstract class ExtensibleRuleSymbol : TypeBoundRuleSymbol
  {
    public override Description : string { get { "extensible rule" } }
    public override Rule             : Rule.Sequence { get { assert2(false); null } }
  }

  public sealed class ParsedExtensibleRuleSymbol : ExtensibleRuleSymbol
  {
    public this(ast : G.ExtentionPointRuleDecl.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }
    
    private _ast                     : G.ExtentionPointRuleDecl.Ast;

    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override IsExtentionPoint : bool                  { get { true } }
    public override Type             : RuleType              { get { RuleType.Ref(this) } }
    public override LastLocation     : option[Location]      { get { Some(_ast.BodyDeclaration.GetLastLocation()) } }
  }
}