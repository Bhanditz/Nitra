using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record, /*ExportableSymbol*/]
  public abstract class RegularRuleSymbol : RuleDefSymbol
  {
    public abstract Rule         : RegularRule    { get; }
    public abstract Fsm          : FSM            { get; }
    public override Description  : string         { get { "regular rule" } }
  }

  public sealed class ParsedRegularRuleSymbol : RegularRuleSymbol
  {
    public this(ast : G.TokenRuleDecl.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast                      : G.TokenRuleDecl.Ast;

    public override Type             : RuleType              { get { RuleType.Chars() } }
    public override IsExtentionPoint : bool                  { get { false } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override Rule             : RegularRule           { get { _ast.RegularRule } }
    public override Fsm              : FSM                   { [Memoize] get { this.Rule.ConvertRegularRuleToFsm() } }
    public override LastLocation     : option[Location]      { get { Some(_ast.BodyDeclaration.GetLastLocation()) } }

    public override GetSubRules()    : list[Rule] { assert2(false); [] }
    public override GetAllSubRules() : list[Rule] { assert2(false); [] }
  }
}
