using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;

using G = N2Syntax;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class RegularRuleSymbol : RuleDefSymbol
  {
    public sealed override Type             : RuleType    { get { RuleType.Chars() } }
    public sealed override IsExtentionPoint : bool        { get { false } }
    public        abstract Rule             : RegularRule { get; }
    public                 Fsm              : FSM         { [Memoize] get { this.Rule.ConvertRegularRuleToFsm() } }
    public        override Description      : string      { get { "regular rule" } }
  }

  public sealed class ParsedRegularRuleSymbol : RegularRuleSymbol
  {
    public this(ast : G.Declaration_TokenRule.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast                      : G.Declaration_TokenRule.Ast;

    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override Rule             : RegularRule           { get { _ast.RegularRule } }
    public override LastLocation     : option[Location]      { get { Some(_ast.RuleBody.GetLastLocation()) } }
  }
}
