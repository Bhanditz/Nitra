using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record, ExportableSymbol]
  public abstract class ExtentionRuleSymbol : SyntaxRuleSymbol
  {
    public        abstract BaseRule         : SymbolRef[ExtensibleRuleSymbol] { get; }
    public sealed override IsExtentionPoint : bool                            { get { false } }
    public        override Description      : string                          { get { "extention rule" } }

    public variant ExtentionRuleType
    {
      | Prefix
      | Postfix { bindingPower : int; rule : Rule.Sequence }
    }

    public ExtentionType : ExtentionRuleType
    {
      [Memoize]
      get
      {
        match (Rule)
        {
          | Sequence(Call(baseRule, bindingPower) :: rules) when BaseRule == baseRule => ExtentionRuleType.Postfix(bindingPower, Rule.Sequence(Rule, rules))
          | _                                                                         => ExtentionRuleType.Prefix()
        }
      }
    }
  }

  public sealed class ParsedExtendSyntaxMember : ExtentionRuleSymbol
  {
    public this(ast : G.ExtendSyntaxMember.Ast, baseName : string)
    {
      base(ast.Name.Location, baseName + "_" + ast.Name.GetText());
      _ast = ast;
    }

    public _ast                      : G.ExtendSyntaxMember.Ast;

    public override BaseRule         : ExtensibleRuleRef     {            get { _ast.BaseRuleRef } }
    public override Type             : RuleType              {            get { _ast.Type } }
    public override Options          : RuleDefinitionOptions { [Memoize]  get { _ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         {            get { _ast.TypedRule } }
    public override LastLocation     : option[Location]
    {
      [Memoize]  get
      {
        match (_ast.BodyDeclarationOpt)
        {
          | Some(body) => Some(body.GetLastLocation())
          | _          => Some(Utils.MakeLastLocation(_ast))
        }
      }
    }
  }

  public sealed class ParsedExtentionRuleSymbol : ExtentionRuleSymbol
  {
    public this(ast : G.ExtentionRuleDecl.Ast)
    {
      base(ast.Name.Location, ast.BaseName.Parts().LastOrDefault("") + "_" + ast.Name.GetText());
      _ast = ast;
    }

    public _ast                      : G.ExtentionRuleDecl.Ast;

    public override BaseRule         : ExtensibleRuleRef     { get { _ast.BaseRuleRef } }
    public override Type             : RuleType              { get { _ast.Type } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
  }
}
