using N2.Model;
using N2.Typing.ExtraField;

using Nemerle;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record, /*ExportableSymbol*/]
  public abstract class ExtentionRuleSymbol : RuleDefSymbol
  {
    public abstract BaseRule      : SymbolRef[ExtensibleRuleSymbol] { get; }
    public abstract Rule          : Rule.Sequence                   { get; }
    public override Description   : string                          { get { "extention rule" } }

    public variant ExtentionRuleType
    {
      | Prefix
      | Postfix { bindingPower : int; rule : Rule }
    }

    public ExtentionType : ExtentionRuleType
    {
      [Memoize]
      get
      {
        match (Rule)
        {
          | Sequence(Call(baseRule, bindingPower) :: rules) when BaseRule == baseRule => ExtentionRuleType.Postfix(bindingPower, Rule.Sequence(Rule, rules))
          | _                                                                         => ExtentionRuleType.Prefix()
        }
      }
    }

    public override GetSubRules()    : list[Rule] { Rule.GetSubRules() }
    public override GetAllSubRules() : list[Rule] { Rule.GetAllSubRules() }
  }

  public sealed class ParsedExtendSyntaxMember : ExtentionRuleSymbol
  {
    public this(ast : G.ExtendSyntaxMember.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }
    
    public _ast                      : G.ExtendSyntaxMember.Ast;

    public override BaseRule         : ExtensibleRuleRef     {            get { _ast.BaseRuleRef } }
    public override Type             : RuleType              {            get { _ast.Type } }
    public override IsExtentionPoint : bool                  {            get { false } }
    public override Options          : RuleDefinitionOptions { [Memoize]  get { _ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         {            get { _ast.TypedRule } }
    public override LastLocation     : option[Location]      { [Memoize]  get { Some(_ast.BodyDeclaration.GetLastLocation()) } }
  }

  public sealed class ParsedExtentionRuleSymbol : ExtentionRuleSymbol
  {
    public this(ast : G.ExtentionRuleDecl.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public _ast                      : G.ExtentionRuleDecl.Ast;

    public override BaseRule         : ExtensibleRuleRef     { get { _ast.BaseRuleRef } }
    public override Type             : RuleType              { get { _ast.Type } }
    public override IsExtentionPoint : bool                  { get { false } }
    public override Options          : RuleDefinitionOptions { get { _ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         { get { _ast.TypedRule } }
  }
}
