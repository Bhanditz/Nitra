using N2.Model;

using Nemerle;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record]
  [Symbol]
  public abstract class ExtentionRuleSymbol : RuleDefSymbol
  {
    public abstract BaseRule      : SymbolRef[ExtensibleRuleSymbol] { get; }
    public abstract Rule          : Rule.Sequence                   { get; }
    public override Description   : string                          { get { "extention rule" } }

    public variant ExtentionRuleType
    {
      | Prefix
      | Postfix { bindingPower : int; rule : Rule }
    }

    public ExtentionType : ExtentionRuleType
    {
      [Memoize]
      get
      {
        match (Rule)
        {
          | Sequence(Call(baseRule, bindingPower) :: rules) when baseRule.Equals(BaseRule) => ExtentionRuleType.Postfix(bindingPower, Rule.Sequence(Rule, rules))
          | _                                                                              => ExtentionRuleType.Prefix()
        }
      }
    }

    public override GetSubRules()    : list[Rule] { Rule.GetSubRules() }
    public override GetAllSubRules() : list[Rule] { Rule.GetAllSubRules() }
  }

  public sealed class ParsedExtendSyntaxMember : ExtentionRuleSymbol
  {
    public this(ast : G.ExtendSyntaxMember.Ast)
    {
      base(ast.Name);
      Ast = ast;
    }
    
    public Ast                       : G.ExtendSyntaxMember.Ast;

    public override BaseRule         : ExtensibleRuleRef     { get { Ast.BaseRuleRef } }
    public override Type             : RuleType              { get { Ast.Type } }
    public override ExtraFields      : list[ExtraField]      { get { Ast.ExtraFields } }
    public override IsExtentionPoint : bool                  { get { false } }
    public override Options          : RuleDefinitionOptions { get { Ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         { get { Ast.TypedRule } }
    public override LastLocation     : option[Location]      { get { Some(Ast.BodyDeclaration.GetLastLocation()) } }
  }

  public sealed class ParsedExtentionRuleSymbol : ExtentionRuleSymbol
  {
    public this(ast : G.ExtentionRuleDecl.Ast)
    {
      base(ast.Name);
      Ast = ast;
    }

    public Ast                       : G.ExtentionRuleDecl.Ast;

    public override BaseRule         : ExtensibleRuleRef     { get { Ast.BaseRuleRef } }
    public override Type             : RuleType              { get { Ast.Type } }
    public override ExtraFields      : list[ExtraField]      { get { Ast.ExtraFields } }
    public override IsExtentionPoint : bool                  { get { false } }
    public override Options          : RuleDefinitionOptions { get { Ast.RuleAttributes.Options2() } }
    public override Rule             : Rule.Sequence         { get { Ast.TypedRule } }
  }
}
