using Nemerle;

using N2.Model;

namespace N2.Typing
{
  [Record]
  [Symbol]
  public abstract class ExtentionRuleSymbol : RuleDefSymbol
  {
    public abstract BaseRule      : SymbolRef[ExtensibleRuleSymbol] { get; }
    public abstract Rule          : Rule.Sequence                   { get; }
    public override Description   : string                          { get { "extention rule" } }

    public variant ExtentionRuleType
    {
      | Prefix
      | Postfix { BindingPower : int }
    }

    public ExtentionType : ExtentionRuleType
    {
      [Memoize]
      get
      {
        match (Rule)
        {
          | Sequence(Call(baseRule, bindingPower) :: _) when baseRule.Equals(BaseRule) => ExtentionRuleType.Postfix(bindingPower)
          | _                                                                          => ExtentionRuleType.Prefix()
        }
      }
    }

    public override GetSubRules()    : list[Rule] { Rule.GetSubRules() }
    public override GetAllSubRules() : list[Rule] { Rule.GetAllSubRules() }
  }
}
