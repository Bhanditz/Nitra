using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using N2.ProjectSystem;
using N2.Serialization;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing.ExtraField
{
  [Record, ExportableSymbol(ExternalAbstractSymbol)]
  public abstract class AbstractSymbol : DefinitionSymbol, ISignature, ICached
  {
    public abstract Signature : ExtraFieldSignature { get; }
    public abstract IsCached  : bool                { get; }

    Serialize(_ : BinaryWriter, _ : IN2TypesWriter) : void implements IExportableSymbol.Serialize
    {
      // all data is written to .NET metadata
    }
  }

  public sealed class ParsedAbstractSymbol : AbstractSymbol
  {
    _ast : G.ExtraFieldDeclaration1.Ast;

    public this(ast : G.ExtraFieldDeclaration1.Ast)
    {
      base(ast.Name);
      _ast = ast;
    }

    public override Signature : ExtraFieldSignature { get { _ast.Signature } }
    public override IsCached  : bool                { get { _ast.IsCached } }
  }

  public sealed class ExternalAbstractSymbol : AbstractSymbol
  {
    Deserialize(_ : BinaryReader, n2TypesReader : IN2TypesReader) : void implements IImportableSymbol.Deserialize
    {
      (Signature, IsCached) = ExtraFieldReflectionUtils.ReflectProperties(n2TypesReader.Project :> N2Project, this);
    }
  }
}
