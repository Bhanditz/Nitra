using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing.ExtraField
{
  public enum ExtraFieldModifier
  {
    | Def
    | DefPrivate
    | Abstract
    | Override
    | OnError
  }

  [Record]
  public abstract class ExtraFieldSymbol : SingleDefSymbol
  {
    public DeclaringRule : RuleSymbol { get; }
    public override Description : string { get { "extra field" } }
    
    public override ToString() : string
    {
      def cached    = match (this) { | x is ICached when x.IsCached => "[Cached] "            | _ => "" };
      def signature = match (this) { | x is ISignature              => x.Signature.ToString() | _ => "" };
      def body      = match (this) { | x is IBody                   => x.Body.ToString()      | _ => "" };
      def modifier  =
        match (this)
        {
          | DefPrivateSymbol => "private "
          | OnErrorSymbol    => "error "
          | OverrideSymbol   => "override "
          | _                     => ""
        };
        
      $"$cached$modifier$Name$signature$body"
    }
  }
}
