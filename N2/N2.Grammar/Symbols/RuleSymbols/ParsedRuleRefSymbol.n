using N2.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public variant ParsedRuleRefSymbol : RuleDefSymbol
  {
    //public Id           : int                    { get; }
    public          Value            : G.Declaration         { get; }
    public          Context          : Context               { get { Value.Context } }
    public override Type             : RuleType2             { get; }
    public override IsExtentionPoint : bool                  { get; }
    public override Description      : string                { get { Value.GetType().Name } }
    public override Options          : RuleDefinitionOptions { [Memoize] get { _ruleAttributes?.Options2() ?? RuleDefinitionOptions() } }
    public override ExtraFields      : list[ExtraField2]     { get { _bodyDeclaration.GetExtraFields(GrtRuleDefinitionType(), this, GetBaseRuleSymbol()) } }

    _ruleAttributes     : G.RuleAttributes;
    _bodyDeclaration    : G.BodyDeclaration;
    
    | ExtentionPoint
    | ExtentionPrefix  { BaseRule : RuleRef; Rule : Rule2.Sequence; }
    | ExtentionPostfix { BaseRule : RuleRef; Rule : Rule2.Sequence; BindingPower : int; }
    | Simple           {                     Rule : Rule2.Sequence; }
    | Regular          {                     Rule : RegularRule2; Fsm : FSM; }
    | Marker
    
    GetBaseRuleSymbol() : RuleRefSymbol
    {
      def ruleRef =
        match (this)
        {
          | ExtentionPrefix(baseRule, _)     => baseRule.Ref
          | ExtentionPostfix(baseRule, _, _) => baseRule.Ref
        };
        
      if (ruleRef.IsSome) ruleRef.Value else null
    }
    
    GrtRuleDefinitionType() : RuleDefinitionType
    {
      match (this)
      {
        | ExtentionPoint   => RuleDefinitionType.ExtentionPoint
        | ExtentionPrefix  => RuleDefinitionType.ExtentionPrefix
        | ExtentionPostfix => RuleDefinitionType.ExtentionPostfix
        | Simple           => RuleDefinitionType.Simple
        | Regular          => RuleDefinitionType.Regular
        | _                => assert(false)
      }
    }

    public this(value : G.Declaration, name : string, ruleAttributes : G.RuleAttributes, bodyDeclaration : G.BodyDeclaration)
    {
      base(value, name);
      
      _ruleAttributes  = ruleAttributes;
      _bodyDeclaration = bodyDeclaration;
      Value            = value;
      IsExtentionPoint = value is G.ExtentionPointRuleDecl;
      Type             = match (value)
      {
        | _ is G.VoidRuleDecl  => RuleType2.Void()
        | _ is G.MarkerDecl    => RuleType2.Void()
        | _ is G.TokenRuleDecl => RuleType2.Chars()
        | _                    => RuleType2.Ref(this)
      }
    }
  }
}
