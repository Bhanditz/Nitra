using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using System.Text;
using G = GrammarParser2;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace N2.Grammar
{
  type IntOrStringList = int * list[string];
  
  module Utils
  {
    public PassThrough[TElem, TValue](elems : list[TElem], value : TValue, func : TElem * TValue -> TValue) : TValue
    {
      mutable acc = value;
      
      foreach (elem in elems)
        acc = func(elem, acc);
        
      value
    }

    public FoldThrough[TElem, TValue](elems : list[TElem], mutable value : TValue, func : TElem * TValue -> TValue) : TValue
    {
      foreach (elem in elems)
        value = func(elem, value);
        
      value
    }

    //public FoldRightThrough[TElem, TValue](elems : list[TElem], mutable value : TValue, func : TElem * TValue -> TValue) : TValue
    //{
    //  def elems = List(elems);
    //  elems.Reverse();
    //  foreach (elem in elems)
    //    value = func(elem, value);
    //
    //  value
    //}

    public NLocation(this loc : N2.Location) : Compiler.Location
    {
      def (startLine, startCol) = loc.StartLineColumn;
      def (endLine, endCol) = loc.EndLineColumn;
      Location(loc.Source.FileIndex, startLine, startCol, endLine, endCol)
    }

    public NLocation(this located : N2.Located) : Compiler.Location
    {
      NLocation(located.Location)
    }
    
    public BindFixedType(env : GlobalEnv, located : N2.Located) : FixedType
    {
      def loc = located.NLocation();
      Util.locate(loc,
      {
        def expr = MainParser.ParseExpr(env, located.GetText(), located.NLocation(), allow_empty=false);
        env.BindFixedType(expr)
      })
    }
    
    private HexDigit(c : char) : int
    {
      | c when '0' <= c && c <= '9' => c : int - '0' : int
      | c when 'a' <= c && c <= 'f' => c : int - 'a' : int + 10
      | c when 'A' <= c && c <= 'F' => c : int - 'A' : int + 10
      | _ => assert2(false); assert(false);
    }

    public HexToChar(ast : N2.Ast, startPos : int, endPos : int) : char
    {
      unchecked HexTuInt(ast, startPos, endPos) :> char
    }
    
    public HexTuInt(ast : N2.Ast, startPos : int, endPos : int) : int
    {
      assert2(startPos < endPos);

      def text = ast.Location.Source.OriginalText;
      mutable result = HexDigit(text[startPos]);

      for (mutable i = startPos + 1; i < endPos; i++)
        unchecked result = (result << 4) + HexDigit(text[i]);
      
      result
    }

    //public Appent(this source : StringBuilder, text : N2.Located) : StringBuilder
    //{
    //  def loc = text.Location;
    //  source.Append(loc.Source.Text, loc.StartPos, loc.Length)
    //}
    
    //public LastOrDefault[T](this source : list[T], defaultValue : T) : T
    //{
    //  if (source.IsEmpty)
    //    defaultValue
    //  else
    //    source.Last
    //}

    public LastOrDefault[TElem, TResult](this source : list[TElem], func : TElem -> TResult, defaultValue : TResult) : TResult
    {
      if (source.IsEmpty)
        defaultValue
      else
        func(source.Last)
    }

    public static EscapeSequence(c : char) : char
    {
      | '\'' => '\'' | '\"' => '\"' | '\\' => '\\' | '0'  => '\0'
      | 'a'  => '\a' | 'b'  => '\b' | 'f'  => '\f' | 'n'  => '\n'
      | 'r'  => '\r' | 't'  => '\t' | 'v'  => '\v' | c    => c
    }
    
    public EscapeChar(ch : char) : string
    {
      | '\0' => @"'\0'"
      | '\t' => @"'\t'"
      | '\n' => @"'\n'"
      | '\r' => @"'\r'"
      | '\\' => @"'\\'"
      | '\'' => @"'\''"
      | x when x == char.MaxValue  => @" char.MaxValue"
      | c when char.IsLetter(c)
      | c when char.IsDigit(c)
      | c when char.IsPunctuation(c)
      | c when char.IsSeparator(c)
      | c when char.IsSymbol(c)      => $"'$c'"
      | c =>
        def c = c : uint;
        string.Format(<#'\u{0,4:X}'#>, c).Replace(' ', '0');
    }

    public EscapeStringChar(ch : char) : string
    {
      | '\0' => @"\0"
      | '\t' => @"\t"
      | '\n' => @"\n"
      | '\r' => @"\r"
      | '\\' => @"\\"
      | '\'' => @"\'"
      | c when char.IsLetter(c)
      | c when char.IsDigit(c)
      | c when char.IsPunctuation(c)
      | c when char.IsSeparator(c)
      | c when char.IsSymbol(c)      => $"'$c'"
      | c =>
        def c = c : uint;
        string.Format(<#'\u{0,4:X}'#>, c).Replace(' ', '0');
    }
  }
}
