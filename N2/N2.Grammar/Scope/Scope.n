using N2.Model;
using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  [Record]
  public class N2Scope
  {
    public Parent           : N2Scope                 { get; }
    public Env              : Environment[N2Project]  { get; }
    public Aliases          : Map[string, G.Rule]     { get; }
    public TokenFieldNames  : Map[string, Identifier] { get; }
    
    public this(env : Environment[N2Project])
    {
      this(null, env, Map(), Map())
    }

    public AddAlias(name : string, rule : G.Rule) : N2Scope
    {
      N2Scope(this, Env, Aliases.Replace(name, rule), TokenFieldNames)
    }

    public AddTokenFieldNames(name : Identifier, stringLiterals : list[G.StringLiteral]) : N2Scope
    {
      def tokenFieldNames = Utils.FoldThrough(stringLiterals, TokenFieldNames, (strLit, result) => result.Replace(strLit.Value(), name));
      N2Scope(this, Env, Aliases, tokenFieldNames)
    }

    public GetNextRuleId() : int
    {
      def project = Env.Project;
      project.GetNextRuleId()
    }
    
    public Bind[TProject, TSymbol](name : G.Identifier) : option[TSymbol]
      where TSymbol: Symbol
    {
      Env.Bind.[TSymbol](name.Value(), name.Location)
    }
    
    public Bind[TProject, TSymbol](name : G.QIdentifier) : option[TSymbol]
      where TSymbol: Symbol
    {
      Env.Bind.[TSymbol](name.Parts(), name.Location)
    }
  }
}
