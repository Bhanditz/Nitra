//using N2.Macros;
using N2.ProjectSystem;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace N2.Model
{
  [Record]
  public sealed class RuleDefinitionOptions
  {
    /*[LocatedOption]*/ public IsStart                  : bool            { get; private set; }
    /*[LocatedOption]*/ public IsExplicitSpaces         : bool            { get; private set; }
    /*[LocatedOption]*/ public IsSuppressTrailingSpaces : bool            { get; private set; }
    /*[LocatedOption]*/ public SpanClassSymbol          : SpanClassSymbol { get; private set; }
    
    public SetStart                  (_loc : Located, value : bool  )          : this  { IsStart                  = value; this }
    public SetExplicitSpaces         (_loc : Located, value : bool  )          : this  { IsExplicitSpaces         = value; this }
    public SetSuppressTrailingSpaces (_loc : Located, value : bool  )          : this  { IsSuppressTrailingSpaces = value; this }
    public SetSpanClass              (_loc : Located, value : SpanClassSymbol) : this  { SpanClassSymbol          = value; this }

    public SetExplicitSpaces         (value : bool) : void  { IsExplicitSpaces         = value; }
    public SetSuppressTrailingSpaces (value : bool) : void  { IsSuppressTrailingSpaces = value; }
    
    public this() { }
    
    public this(data : PExpr)
    {
      match (data)
      {
        | <[ array[..$elems] ]> =>
          foreach (e in elems)
          {
            | PExpr.Literal(Literal.String("Strat"))                    => IsStart = true;
            | PExpr.Literal(Literal.String("ExplicitSpaces"))           => IsExplicitSpaces = true;
            | PExpr.Literal(Literal.String("SuppressTrailingSpaces")) => IsSuppressTrailingSpaces = true;
            //| <[ $(x : string) ]> when x.StartsWith("SpanClass=") => SpanClass = Identifier(e.Location.N2Location(), x.Substring(x.IndexOf('=')));
            | _ => assert(false);
          }
          
        | _ => assert(false)
      }
    }

    public Serialize() : PExpr
    {
      mutable result = [];
      
      when (IsStart)
        result ::= <[ "Strat" ]>;

      when (IsExplicitSpaces)
        result ::= <[ "ExplicitSpaces" ]>;

      when (IsSuppressTrailingSpaces)
        result ::= <[ "SuppressTrailingSpaces" ]>;
        
      //when (SpanClass != null)
      //  result ::= <[ $("SpanClass=" + SpanClass) ]>;
      
      <[ array[..$result] ]>
    }
  }
}
