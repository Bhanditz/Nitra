//using N2.Macros;
using N2.ProjectSystem;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

[assembly: DefineSurround("newOptions", false, def newOptions = RuleDefinitionOptions(this), newOptions)]

namespace N2.Model
{
  [Record]
  public sealed class RuleDefinitionOptions
  {
    public static Empty : RuleDefinitionOptions = RuleDefinitionOptions();

    /*[LocatedOption]*/ public IsStart                  : bool            { get; private set; }
    /*[LocatedOption]*/ public IsExplicitSpaces         : bool            { get; private set; }
    /*[LocatedOption]*/ public IsSuppressTrailingSpaces : bool            { get; private set; }
    /*[LocatedOption]*/ public SpanClassSymbol          : SpanClassSymbol { get; private set; }
    /*[LocatedOption]*/ public IsTokenRule              : bool            { get; private set; }

    public SetStart                  (_loc : Located, value : bool  )          : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsStart                  = value }
    public SetExplicitSpaces         (_loc : Located, value : bool  )          : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsExplicitSpaces         = value }
    public SetSuppressTrailingSpaces (_loc : Located, value : bool  )          : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsSuppressTrailingSpaces = value }
    public SetSpanClass              (_loc : Located, value : SpanClassSymbol) : RuleDefinitionOptions { surroundwith(newOptions) newOptions.SpanClassSymbol          = value }
    public SetTokenRule              (_loc : Located, value : bool  )          : RuleDefinitionOptions
    {
      surroundwith(newOptions)
      {
        newOptions.IsTokenRule      = value;
        newOptions.IsExplicitSpaces = value;
      }
    }

    public this() { }

    public this(original : RuleDefinitionOptions)
    {
      this( isStart                  = original.IsStart
          , isExplicitSpaces         = original.IsExplicitSpaces
          , isSuppressTrailingSpaces = original.IsSuppressTrailingSpaces
          , spanClassSymbol          = original.SpanClassSymbol
          , isTokenRule              = original.IsTokenRule
          )
    }

    public InheritedCopy() : RuleDefinitionOptions
    {
      if (IsStart)
        surroundwith(newOptions) newOptions.IsStart = false
      else
        this
    }

    public override ToString() : string
    {
      def values = List();
      when (IsStart)                          values.Add("StartRule");
      when (IsExplicitSpaces && !IsTokenRule) values.Add("ExplicitSpaces");
      when (IsSuppressTrailingSpaces)         values.Add("SuppressTrailingSpaces");
      when (SpanClassSymbol != null)          values.Add($"SpanClass($(SpanClassSymbol.Node.FullName))");
      when (IsTokenRule)                      values.Add("TokenRule");
      $"[..$(values; \", \")]"
    }
  }
}
