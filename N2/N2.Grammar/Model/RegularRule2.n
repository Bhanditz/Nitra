using N2.Utils;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Extensions;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace N2.Model
{
  [Record, StructuralEquality]
  public variant RegularRule2 : Located
  {
    | Choice                  { rules    : list[RegularRule2]; }
    | Sequence                { rules    : list[RegularRule2]; }
    | Call                    { name     : RuleRef; }
    | Repeat                  { minCount : int; maxCount : option[int]; rule : RegularRule2; }
    | RepeatWithSeparator     { minCount : int; maxCount : option[int]; rule : RegularRule2; separator : RegularRule2; }
    | Chars                   {
                                  chars : list[RangeSet];
                                  public IsString : bool { get { chars.ForAll(_.IsSingleChar) } }
                              }
    public Priority : int
    {
      get
      {
        match (this)
        {
          | Chars                       => 5
          | Call                        => 5
          | Repeat                      => 4
          | RepeatWithSeparator         => 4
          | Sequence                    => 2
          | Choice                      => 1
        }
      }
    }

    public override ToString() : string
    {
      def p(rule : RegularRule2)
      {
        if (rule.Priority <= this.Priority)
          $"($rule)"
        else
          rule.ToString()
      }

      match (this)
      {
        | Call(name)                                     => name.ToString()
        | Choice(rules)                                  => $<#..$(rules; " | "; p)#>
        | Sequence(rules)                                => $<#..$(rules; " "; p)#>
        | Repeat(0, None, rule)                          => $"$(p(rule))*"
        | Repeat(1, None, rule)                          => $"$(p(rule))+"
        | Repeat(min, None, rule)                        => $"$(p(rule)){$min,}"
        | Repeat(0, Some(1), rule)                       => $"$(p(rule))?"
        | Repeat(min, Some(max), rule) when min == max   => $"$(p(rule)){$min}"
        | Repeat(min, Some(max), rule)                   => $"$(p(rule)){$min, $max}"
        | RepeatWithSeparator(0, None, rule, separator)  => $"($(p(rule)), $(p(separator)))*"
        | RepeatWithSeparator(1, None, rule, separator)  => $"($(p(rule)), $(p(separator)))+"
        | RepeatWithSeparator                            => assert(false);
        | Chars(chars) as c when c.IsString              => $<#''..$(chars; ""; r => $"$(EscapeStringChar(r.Ranges.Head.from))")''#>
        | Chars([chars])                                 => $"[$chars]"
        | Chars(chars)                                   => $<#(..$(chars; ", "; ch => $"[$ch]"))#>
      }
    }
  }
}
