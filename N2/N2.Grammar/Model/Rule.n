using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;

using N = Nemerle.Compiler;

namespace N2.Model
{
  [Record]
  public variant Rule : N.Located
  {
    public Type : RuleType;
    public Id   : int;
    
    | Sequence                { rules    : list[Rule]; }
    | Call                    { name     : NameRef; bindingPower : int; }
    | PrefixCall              { name     : NameRef; bindingPower : int; }
    | Repeat                  { minCount : int; maxCount : option[int]; rule : Rule; }
    | RepeatWithSeparator     { minCount : int; maxCount : option[int]; rule : Rule; separator : Rule; }
    | String                  { str : string; }
    | Not                     { rule : Rule; }
    | And                     { rule : Rule; }

    public this(originalRule : Rule)
    {
      base(originalRule.Location);
      Type = originalRule.Type;
      Id   = originalRule.Id;
    }

    public Priority : int
    {
      get
      {
        match (this)
        {
          | String                      => 5
          | Call                        => 5
          | PrefixCall                  => 5
          | Repeat                      => 4
          | RepeatWithSeparator         => 4
          | Not                         => 3
          | And                         => 3
          | Sequence                    => 2
        }
      }
    }

    public override ToString() : string
    {
      def p(rule : Rule)
      {
        if (rule.Priority <= this.Priority)
          $"($rule)"
        else
          rule.ToString()
      }

      match (this)
      {
        | Sequence(rules)                                => $<#..$(rules; " "; p)#>
        | Call(name, 0)                                  => name.ToString()
        | Call(name, bp)                                 => $<#$(name) : $bp#>
        | PrefixCall(name, bp)                           => $<#$(name) : prefix $bp#>
        | Repeat(0, None, rule)                          => $"$(p(rule))*"
        | Repeat(1, None, rule)                          => $"$(p(rule))+"
        | Repeat(min, None, rule)                        => $"$(p(rule)){$min,}"
        | Repeat(0, Some(1), rule)                       => $"$(p(rule))?"
        | Repeat(min, Some(max), rule) when min == max   => $"$(p(rule)){$min}"
        | Repeat(min, Some(max), rule)                   => $"$(p(rule)){$min, $max}"
        | RepeatWithSeparator(0, None, rule, separator)  => $"($(p(rule)), $(p(separator)))*"
        | RepeatWithSeparator(1, None, rule, separator)  => $"($(p(rule)), $(p(separator)))+"
        | RepeatWithSeparator                            => assert(false);
        | String(str)                                    => $<#'$str'#>
        | Not(rule)                                      => $"!$(p(rule))"
        | And(rule)                                      => $"&$(p(rule))"
      }
    }
    
    public GetAllSubRules() : list[Rule]
    {
      match (this)
      {
        | Rule.Sequence(rules) => rules
        | _ => [this]
      }
    }

    public GetSubRules() : list[Rule]
    {
      match (this)
      {
        | Rule.Sequence(rules) => rules.Filter(rule => !(rule.Type is RuleType.Void));
        //| _ when rule.Type is RuleType.Void => assert(false);
        //| _ => [rule]
        | _ => assert(false);
      }
    }
  }
}
