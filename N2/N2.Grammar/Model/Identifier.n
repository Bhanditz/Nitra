using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;
using N = Nemerle.Compiler;

namespace N2.Model
{
  public class Identifier : N2.Located, IComparable[Identifier]
  {
    public Value : string { get; }

    public this(location : Nemerle.Compiler.Location, value : string)
    {
      base(location.N2Location());
      Value = value;
    }

    public this(parent : N2.Located, token : N2.NToken) { this(N2.Location(parent.Location.Source, token)) }
    public this(location : N2.Location)                 { this(location.NLocation(), location.GetText()) }
    public this(located  : N2.Located)                  { this(located.NLocation(),  located.GetText()) }

    public this(pexpr : PExpr)
    {
      this(pexpr.Location, pexpr.ToString())
    }

    public override ToString() : string { Value }

    public CompareTo(that : Identifier) : int { Value.CompareTo(that.Value) }

    [Nemerle.OverrideObjectEquals]
    public Equals(that : Identifier)   : bool { Value.Equals(that.Value, StringComparison.Ordinal) }
    public EqualsToName(name : string) : bool { Value.Equals(name, StringComparison.Ordinal) }

    public override GetHashCode() : int { Value.GetHashCode() }

    public static @==(name1 : Identifier, name2 : Identifier) : bool
    {
      if (name1 : object == name2)
        true
      else if (null == name1 || null == name2)
        false
      else
        name1.Equals(name2)
    }

    public static @!=(name1 : Identifier, name2 : Identifier) : bool
    {
      !(name1 == name2)
    }
  }
}
