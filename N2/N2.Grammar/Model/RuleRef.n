using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public class RuleRef : Located
  {
    public Ref         : option[RuleRefSymbol] { get; }
    public IsGenerated : bool                  { get; }
    
    public this(fullName : G.QIdentifier, reference : option[RuleRefSymbol])
    {
      this(fullName.Location, reference, false)
    }
    
    public this(name : G.Identifier, reference : option[RuleRefSymbol])
    {
      this(name.Location, reference, false)
    }

    public this(fullName : Location, reference : option[RuleRefSymbol], isGenerated : bool)
    {
      base(fullName);
      Ref = reference;
      IsGenerated = isGenerated;
    }
    
    public override ToString() : string
    {
      match (Ref)
      {
        | Some(r) => r.Name
        | _       => $"$(GetText()) (unresolved)"
      }
    }
    
    [OverrideObjectEquals]
    public Equals(other : RuleRef) : bool
    {
      Ref.IsSome && other.Ref.Equals(Ref)
    }
    
    public override GetHashCode() : int
    {
      Ref.GetHashCode()
    }
  }
}
