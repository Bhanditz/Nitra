using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

using N = Nemerle.Compiler;

namespace N2.Model
{
  public class NameRef : N.Located, IComparable[NameRef]
  {
    public Parts : list[string] { get; }

    public this(location : Nemerle.Compiler.Location, parts : list[string])
    {
      base(location);
      Parts = parts;
    }

    public this(location : Nemerle.Compiler.Location, part : string)
    {
      this(location, [part])
    }

    public this(pexpr : Parsetree.PExpr)
    {
      this(pexpr.Location, [pexpr.ToString()])
    }

    public PartsCount : int { get { Parts.Length } }

    public LastPart : NameRef { get { NameRef(this.Location, Parts.Last) } }

    public override ToString() : string
    {
      $<#..$(Parts; ".")#>
    }

    public CompareTo(that : NameRef) : int
    {
      def cmp(parts1, parst2)
      {
        | (part1 :: parts1, part2 :: parst2) =>
          def res = StringComparer.Ordinal.Compare(part1, part2);
          if (res == 0)
            cmp(parts1, parst2)
          else
            res
         | ([], []) => 0
         | (_ , []) => 1
         | _        => -1
      }
      cmp(Parts, that.Parts);
    }

    [Nemerle.OverrideObjectEquals]
    public Equals(that : NameRef) : bool
    {
      CompareTo(that) == 0
    }

    public EqualsToName(name : string) : bool
    {
      StringComparer.Ordinal.Compare(AsName, name) == 0
    }

    public AsName : string
    {
      get
      {
        match (Parts)
        {
          | [part] => part
          | _      => assert2(false); assert(false);
        }
      }
    }

    public LastPartString : string
    {
      get
      {
        match (Parts)
        {
          | [part]    => part
          | []        => assert2(false); assert(false);
          | [_, part] => part
          | _         => Parts.Last
        }
      }
    }

    public override GetHashCode() : int
    {
      unchecked
      {
        mutable hash = 0;
        foreach (part in Parts)
          hash = (hash >> 3) + hash + part.GetHashCode();
        hash
      }
    }

    public static @==(name1 : NameRef, name2 : NameRef) : bool
    {
      if (object.ReferenceEquals(name1, name2))
        true
      else if (object.ReferenceEquals(name1, null) || object.ReferenceEquals(name2, null))
        false
      else
        name1.Equals(name2)
    }

    public static @!=(name1 : NameRef, name2 : NameRef) : bool
    {
      !(name1 == name2)
    }

    public static @+(name1 : NameRef, name2 : NameRef) : NameRef
    {
      NameRef(name1.Location + name2.Location, name1.Parts + name2.Parts)
    }

    public static @+(name1 : Identifier, name2 : NameRef) : NameRef
    {
      NameRef(name1.Location.NLocation() + name2.Location, name1.Value :: name2.Parts)
    }

    public static @+(name1 : NameRef, name2 : Identifier) : NameRef
    {
      NameRef(name2.Location.NLocation() + name1.Location, name2.Value :: name1.Parts)
    }
  }
}
