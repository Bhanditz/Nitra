using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Model
{
  [Record]
  public variant ExtraField2 : N2.Located
  {
    public Symbol : ExtraFieldRefSymbol { get; }

    | Def        { Signature : ExtraFieldSignature; Body : PExpr; }
    | DefPrivate { Signature : ExtraFieldSignature; Body : PExpr; }
    | Abstract   { Signature : ExtraFieldSignature; }
    | Override   { BaseExtraField : ExtraFieldRefSymbol; Body : PExpr; }
    | OnError    { Body : PExpr; }

    public override ToString() : string
    {
      def name = Symbol.Name;
      match (this)
      {
        | Override  (_, body) => $<#override $name = { $body };#>
        | OnError   (body)    => $<#error $name = { $body };#>
        | Abstract  (ExtraFieldSignature(Params = parameters, Type = type))       with (m = "",         end = ";")
        | Def       (ExtraFieldSignature(Params = parameters, Type = type), body) with (m = "",         end = $"{ $body }")
        | DefPrivate(ExtraFieldSignature(Params = parameters, Type = type), body) with (m = "private ", end = $"{ $body }") => $<#$m$name($parameters) : $type$end#>
      }
    }
  }

  [Record]
  public class ExtraFieldSignature : Located
  {
    public Params : list[PParameter] { get; }
    public Type   : PExpr            { get; }
  }
}
