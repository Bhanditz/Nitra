using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace N2.Model
{
  [Record]
  public variant Rule2 : N2.Located
  {
    public Type       : RuleType;
    public Id         : int;
    public FieldName  : string;
    
    | Sequence                { Rules     : list[Rule2]; }
    | Call                    { RuleRef   : RuleRef; BindingPower : int; }
    | PrefixCall              { RuleRef   : RuleRef; BindingPower : int; }
    | Repeat                  { MinCount  : int;     MaxCount     : option[int]; Rule : Rule2; }
    | RepeatWithSeparator     { MinCount  : int;     MaxCount     : option[int]; Rule : Rule2; Separator : Rule2; HangingSeparator : bool; }
    | String                  { Str       : string; }
    | Not                     { Rule      : Rule2; }
    | And                     { Rule      : Rule2; }

    public this(originalRule : Rule2)
    {
      base(originalRule.Location);
      Type      = originalRule.Type;
      Id        = originalRule.Id;
      FieldName = originalRule.FieldName;
    }

    public Priority : int
    {
      get
      {
        match (this)
        {
          | String                      => 5
          | Call                        => 5
          | PrefixCall                  => 5
          | Repeat                      => 4
          | RepeatWithSeparator         => 4
          | Not                         => 3
          | And                         => 3
          | Sequence                    => 2
        }
      }
    }

    public override ToString() : string
    {
      def p(rule : Rule2)
      {
        if (rule.Priority <= this.Priority)
          $"($rule)"
        else
          rule.ToString()
      }

      match (this)
      {
        | Sequence(rules)                                      => $<#..$(rules; " "; p)#>
        | Call(name, 0)                                        => name.ToString()
        | Call(name, bp)                                       => $<#$(name) : $bp#>
        | PrefixCall(name, bp)                                 => $<#$(name) : prefix $bp#>
        | Repeat(0, None, rule)                                => $"$(p(rule))*"
        | Repeat(1, None, rule)                                => $"$(p(rule))+"
        | Repeat(min, None, rule)                              => $"$(p(rule)){$min,}"
        | Repeat(0, Some(1), rule)                             => $"$(p(rule))?"
        | Repeat(min, Some(max), rule) when min == max         => $"$(p(rule)){$min}"
        | Repeat(min, Some(max), rule)                         => $"$(p(rule)){$min, $max}"
        | RepeatWithSeparator(0, None, rule, separator, false) => $"($(p(rule)); $(p(separator)))*"
        | RepeatWithSeparator(0, None, rule, separator, true)  => $"($(p(rule)); $(p(separator)); ?)*"
        | RepeatWithSeparator(1, None, rule, separator, false) => $"($(p(rule)); $(p(separator)))+"
        | RepeatWithSeparator(1, None, rule, separator, true)  => $"($(p(rule)); $(p(separator)); ?)+"
        | RepeatWithSeparator                                  => assert(false);
        | String(str)                                          => $<#'$str'#>
        | Not(rule)                                            => $"!$(p(rule))"
        | And(rule)                                            => $"&$(p(rule))"
      }
    }
    
    public GetAllSubRules() : list[Rule2]
    {
      match (this)
      {
        | Rule2.Sequence(rules) => rules
        | _ => [this]
      }
    }

    public GetSubRules() : list[Rule2]
    {
      match (this)
      {
        | Rule2.Sequence(rules) => rules.Filter(rule => !(rule.Type is RuleType.Void));
        | _ => assert(false);
      }
    }
  }
}
