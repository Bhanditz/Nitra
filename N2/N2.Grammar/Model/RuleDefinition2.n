using Nemerle.Compiler.Parsetree;
using System.Text;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Model
{
  [Record]
  public variant RuleDefinition2 : N2.Located
  {
    public Id           : int                    { get; }
    public Context      : Context                { get; }
    public RuleSymbol   : RuleRefSymbol          { get; }
    public ExtraFields  : list[ExtraField2]      { get; }
    public LastLocation : option[Location]       { get; }
    private _options    : RuleDefinitionOptions;

    | ExtentionPoint
    | ExtentionPrefix  { BaseRule : RuleRef; Rule : Rule2.Sequence; }
    | ExtentionPostfix { BaseRule : RuleRef; Rule : Rule2.Sequence; BindingPower : int; }
    | Simple           {                     Rule : Rule2.Sequence; }
    | Regular          {                     Rule : RegularRule2; Fsm : FSM; }
    | Marker

    public Type                     : RuleType2  { get { throw NotFiniteNumberException() } }
    public IsAst                    : bool       { get { !(this is Regular || IsVoid) } }
    public IsExtention              : bool       { get { this is ExtentionPrefix || this is ExtentionPostfix } }
    public IsVoid                   : bool       { get { throw NotFiniteNumberException() } }
    public IsStart                  : bool       { get { _options.IsStart } }
    public IsExplicitSpaces         : bool       { get { _options.IsExplicitSpaces } }
    public IsSuppressTrailingSpaces : bool       { get { _options.IsSuppressTrailingSpaces } }
    public SpanClass                : Identifier { get { _options.SpanClass } }

    public this(originalRuleDefinition : RuleDefinition2)
    {
      base(originalRuleDefinition.Location);
      Id              = originalRuleDefinition.Id;
      Context         = originalRuleDefinition.Context;
      RuleSymbol      = originalRuleDefinition.RuleSymbol;
      ExtraFields     = originalRuleDefinition.ExtraFields;
      _options        = originalRuleDefinition._options;
      LastLocation    = originalRuleDefinition.LastLocation;
    }

    public GetRule() : option[Rule2]
    {
      match (this)
      {
        | Marker
        | Regular
        | ExtentionPoint => None()
        | ExtentionPrefix(Rule = r)
        | ExtentionPostfix(Rule = r)
        | Simple(Rule = r)           => Some(r)
      }
    }

    public GetSubRules() : list[Rule2]
    {
      match (this)
      {
        | Marker
        | Regular
        | ExtentionPoint => []
        | ExtentionPrefix(Rule = r)
        | ExtentionPostfix(Rule = r)
        | Simple(Rule = r)           => r.Rules
      }
    }

    public GetRuleDefinitionType() : RuleDefinitionType
    {
      match (this)
      {
        | Marker           => assert(false)
        | Regular          => RuleDefinitionType.Regular
        | ExtentionPoint   => RuleDefinitionType.ExtentionPoint
        | ExtentionPrefix  => RuleDefinitionType.ExtentionPrefix
        | ExtentionPostfix => RuleDefinitionType.ExtentionPostfix
        | Simple           => RuleDefinitionType.Simple
      }
    }

    [OverrideObjectEquals]
    public Equals(that : RuleDefinition2) : bool
    {
      that.Id == that.Id
    }

    public override GetHashCode() : int { Id }
    
    public Serialize() : PExpr
    {
      def options = _options.Serialize();
      
      //def name = RuleSymbol.Name;
      
      //match (this)
      //{
      //  | ExtentionPoint                           => $"syntax $name;"
      //  | ExtentionPrefix(baseRule, rule)          => $"syntax $name is $(fullName(baseRule)) = $(rule.PreetyPrint());"
      //  | ExtentionPostfix(baseRule, rule, _)      => $"syntax $name is $(fullName(baseRule)) = $(rule.PreetyPrint());"
      //  | Simple(rule) when Type is RuleType2.Void => $"void $name = $(rule.PreetyPrint());"
      //  | Simple(rule)                             => $"syntax $name = $(rule.PreetyPrint());"
      //  | Regular(rule, _)                         => $"token $name = $(rule.PreetyPrint());"
      //  | Marker                                   => $"marker $name;"
      //};

      <[ $options ]>
    }
    
    public override ToString() : string
    {
      def name = RuleSymbol.Name;
      
      match (this)
      {
        | ExtentionPoint                           => $"syntax $name"
        | ExtentionPrefix(baseRule, rule)          => $"syntax $name is $baseRule = $rule"
        | ExtentionPostfix(baseRule, rule, _)      => $"syntax $name is $baseRule = $rule"
        | Simple(rule) when Type is RuleType2.Void => $"void $name = $rule"
        | Simple(rule)                             => $"syntax $name = $rule"
        | Regular(rule, _)                         => $"token $name = $rule"
        | Marker                                   => $"marker $name"
      }
    }
  }
}
