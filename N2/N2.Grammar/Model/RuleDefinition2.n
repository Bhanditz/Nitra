using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N = Nemerle.Compiler;

namespace N2.Model
{
  [Record]
  public variant RuleDefinition2 : N.Located
  {
    public Id          : int                  { get; }
    public RuleSymbol  : RuleRefSymbol        { get; }
    public Attributes  : list[RuleAttribute]  { get; }
    public ExtraFields : list[ExtraField]     { get; }
    public Type        : RuleType2            { get { RuleSymbol.Type } }

    | ExtentionPoint
    | ExtentionPrefix  { BaseRule : RuleRef; Names : list[string]; Rule : Rule.Sequence; }
    | ExtentionPostfix { BaseRule : RuleRef; Names : list[string]; Rule : Rule.Sequence; BindingPower : int; }
    | Simple           {                     Names : list[string]; Rule : Rule.Sequence; }
    | Regular
    | Marker

    public IsAst                    : bool {           get { !(this is Regular || IsVoid) } }
    public IsExtention              : bool {           get { this is ExtentionPrefix || this is ExtentionPostfix } }
    public IsVoid                   : bool {           get { RuleSymbol.Type is RuleType2.Void } }
    public IsExplicitSpaces         : bool { [Memoize] get { Attributes.Exists(_ is RuleAttribute.ExplicitSpaces) } }
    public IsSuppressTrailingSpaces : bool { [Memoize] get { Attributes.Exists(_ is RuleAttribute.SuppressTrailingSpaces) } }

    public this(originalRuleDefinition : RuleDefinition2)
    {
      base(originalRuleDefinition.Location);
      Id              = originalRuleDefinition.Id;
      RuleSymbol      = originalRuleDefinition.RuleSymbol;
      Attributes      = originalRuleDefinition.Attributes;
      ExtraFields     = originalRuleDefinition.ExtraFields;
    }

    public GetRule() : option[Rule]
    {
      match (this)
      {
        | Marker
        | Regular
        | ExtentionPoint         => None()
        | ExtentionPrefix as rd  => Some(rd.Rule)
        | ExtentionPostfix as rd => Some(rd.Rule)
        | Simple as rd           => Some(rd.Rule)
      }
    }

    public GetSubRules() : list[Rule]
    {
      match (this)
      {
        | Marker
        | Regular
        | ExtentionPoint         => []
        | ExtentionPrefix as rd  => rd.Rule.GetSubRules()
        | ExtentionPostfix as rd => rd.Rule.GetSubRules()
        | Simple as rd           => rd.Rule.GetSubRules()
      }
    }

    [OverrideObjectEquals]
    public Equals(that : RuleDefinition2) : bool
    {
      that.Id == that.Id
    }

    public override GetHashCode() : int { Id }
  }
}
