using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  public class EnteredNamespaceContext : EnteredScopeContext
  {
    public Namespace : NamespaceSymbol { get; }
    public Path      : list[Located]   { get; }

    public this(parent : Context, path : list[Located])
    {
      base(parent);
      Path = path;
      def parentNode = GetParent.[EnteredNamespaceContext]().Namespace;
      
      def enter(currentNs : NamespaceSymbol, path : list[Located]) : NamespaceSymbol
      {
        match (path)
        {
          | name :: tail =>
            mutable ns : NamespaceSymbol;
            if (currentNs.Node.TryGetSymbolEx(name.GetText(), out ns))
            {
              ns.AddDefenition(name.Location);
              if (tail.IsEmpty)
                ns
              else
                enter(ns, tail)
            }
            else
            {
              def newNs = NamespaceSymbol(name.Location);
              _ = currentNs.Node.Add(newNs, name.Location);
              if (tail.IsEmpty)
                newNs
              else
                enter(newNs, tail)
            }
            
          | [] => assert2(false); currentNs
        }
        
      }
      
      Namespace = enter(parentNode, path);
    }

    protected this(parent : Context, currentNode : NamespaceSymbol)
    {
      base(parent);
      Namespace = currentNode;
    }
    
    public override Bind[T](_name : list[Located]) : option[T]
    {
      None()
    }

    public override ToString() : string
    {
      "namespace " + Namespace.FullName
    }
  }
}
