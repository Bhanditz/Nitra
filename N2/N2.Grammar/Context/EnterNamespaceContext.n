using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  public class EnteredNamespaceContext : EnteredScopeContext, INemerleEnvironmentContext
  {
    public Entered   : list[NamespaceSymbol] { get; }

    /*
    public this(parent : Context, path : list[Located])
    {
      base(parent);
      Path = path;

      def enter(currentNs : NamespaceSymbol, path : list[Located], entered : list[NamespaceSymbol])
      {
        match (path)
        {
          | name :: tail =>
            match (currentNs.Node.BindMany.[NamespaceSymbol](name.GetText()))
            {
              | ns :: _ =>
                ns.AddDefinition(name.Location);
                def entered = ns :: entered;
                if (tail.IsEmpty)
                  entered
                else
                  enter(ns, tail, entered)

              | [] =>
                def newNs = NamespaceSymbol(name.Location);
                _ = currentNs.Node.Add(newNs, name.Location);
                def entered = newNs :: entered;
                if (tail.IsEmpty)
                  entered
                else
                  enter(newNs, tail, entered)
            }

          | [] => assert2(false); entered
        }
      }

      def parent = GetParent.[EnteredNamespaceContext]();
      Entered = 
        match (parent.Entered)
        {
          | [] => []
          | first :: _ => enter(first, path, []);
        };
    }
    */

    public this(parent : Context, currentNode : NamespaceSymbol)
    {
      base(parent);
      
      Namespace = currentNode;
      
      def getEnteredNss(currentNode : NamespaceSymbol, acc : list[NamespaceSymbol]) : list[NamespaceSymbol]
      {
        def parentNode = currentNode.Node.Parent;
        
        if (parentNode == null)
          currentNode :: acc
        else match (currentNode.Node.Parent.GetSymbol.[NamespaceSymbol]())
        {
          | [ns] => getEnteredNss(ns, currentNode :: acc)
          | _ => assert2(false); assert(false)
        }
      }

      Entered = getEnteredNss(currentNode, []);
    }

    public virtual Namespace : NamespaceSymbol { get; }

    public override CurrentSymbols : list[Symbol] { get { Entered.Map(x => x) } }

    [Memoize]
    GetNemerleEnvironment() : GlobalEnv implements INemerleEnvironmentContext.GetNemerleEnvironment
    {
      def parentEnv = Parent.GetNemerleEnvironment();
      parentEnv.Manager.CoreEnv.EnterIntoNamespace(Namespace.Node.FullNameParts)
    }

    public override ToString() : string
    {
      $<#namespace ..$(Entered; ".")#>
    }
  }
}
