using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  public class EnteredNamespaceContext : EnteredScopeContext
  {
    public Entered   : list[NamespaceSymbol] { get; }
    public Path      : list[Located]         { get; }

    public this(parent : Context, path : list[Located])
    {
      base(parent);
      Path = path;

      def enter(currentNs : NamespaceSymbol, path : list[Located], entered : list[NamespaceSymbol])
      {
        match (path)
        {
          | name :: tail =>
            mutable ns : NamespaceSymbol;
            if (currentNs.Node.TryGetSymbolEx(name.GetText(), out ns))
            {
              ns.AddDefenition(name.Location);
              def entered = ns :: entered;
              if (tail.IsEmpty)
                entered
              else
                enter(ns, tail, entered)
            }
            else
            {
              def newNs = NamespaceSymbol(name.Location);
              _ = currentNs.Node.Add(newNs, name.Location);
              def entered = newNs :: entered;
              if (tail.IsEmpty)
                entered
              else
                enter(newNs, tail, entered)
            }

          | [] => assert2(false); entered
        }
      }

      def parent = GetParent.[EnteredNamespaceContext]();
      Entered = 
        match (parent.Entered)
        {
          | [] => []
          | first :: _ => enter(first, path, []);
        };
    }

    protected this(parent : Context, currentNode : NamespaceSymbol)
    {
      base(parent);
      Entered = [currentNode];
    }

    public virtual Namespace : NamespaceSymbol
    {
      get
      {
        match (Entered)
        {
          | [] => GetParent.[EnteredNamespaceContext]().Namespace
          | head :: _ => head
        }
      }
    }

    public override CurrentSymbols : list[Symbol] { get { Entered.Map(x => x) } }

    public override ToString() : string
    {
      $<#namespace ..$(Entered; ".")#>
    }
  }
}
