using N2.ProjectSystem;
using N2.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  public abstract class EnteredScopeContext : Context
  {
    public ParentScope      : EnteredScopeContext      { get; }
    public OpenedNamespaces : list[Symbol]             { get; }
    public AliasMap         : Map[string, AliasSymbol] { get; }

    public this(parent : Context)
    {
      base(parent);
      unless (this is RootContext)
        ParentScope = GetParent();

      def lookupSymbols(context, openedNamespaces, aliasMap : Map[string, AliasSymbol])
      {
        match(context)
        {
          | null
          | EnteredScopeContext => (openedNamespaces, aliasMap)
          | OpenNamespaceOrTypeContext(OpenSymbol = Some(symbol)) =>
            lookupSymbols(context.Parent, symbol :: openedNamespaces, aliasMap)

          | NamespaceOrTypeAliasContext(Alias = AliasSymbol as aliasSymbol) =>
            when (aliasMap.Find(aliasSymbol.Name) is Some(previousDefinition))
              using(rootMsg = N2Project.CurrentProject.RootError(aliasSymbol.FirstLocation, $"Redifinition of alias $(aliasSymbol.Name).", -1))
                rootMsg.Error(previousDefinition.FirstLocation, "previous definition");
            lookupSymbols(context.Parent, openedNamespaces, aliasMap.Replace(aliasSymbol.Name, aliasSymbol))

          | _ => lookupSymbols(context.Parent, openedNamespaces, aliasMap)
        }
      }
      (OpenedNamespaces, AliasMap) = lookupSymbols(Parent, [], Map());
    }

    public abstract CurrentSymbols : list[Symbol] { get; }

    public sealed override BindMany[T](name : list[Location]) : BindingResult[T]
    {
      //assert2(false);
      match (BindByEnteredSymbol(name))
      {
        | []    => BindByOpenedNamespace(name, reportErrors)
        | [one] => Some(one)
        | head :: tail =>
          when (reportErrors)
          {
            using (rootMsg = N2Project.CurrentProject.RootError(head.FirstLocation, $"The $(aliasSymbol.Description) '$(symbol.Name)' contains a definition conflicting with alias '$(aliasSymbol.Name)'", -1))
              foreach (s in symbol.Locations)
                rootMsg.Hint(loc, "Previous definition.");
          }
          None()
      }
    }

    BindByEnteredSymbol[T](name : list[Location]) : BindingResult[T]
    {
      // пробуем сбиндиться по AliasMap
      // пробуем сбиндиться по ParentScope
      // если успешен только один, возвращем его
      // если оба успешны, сообщаем об ошибке и возвращаем алиас
      // если оба обломались и парнт == корень, то возвращем None()
      // если оба обломались делаем рекурсивный вызов у ParentScope
      def bindByAliasMap(name : list[Location]) : option[AliasSymbol] * list[Location]
      {
        | null | [] => (None(), [])
        | first :: tail => (AliasMap.Find(first.GetText()), tail) //TODO: сделать Find по подстроке
      }
      def bindByCurrentSymbols(name : list[Location], symbols : list[Symbol]) : list[Symbol] * list[Location] * list[Symbol]
      {
        | (firstName :: tailName, firstSymbol :: tailSymbols) =>
          match (firstSymbol.Node.BindMany(firstName))
          {
            | []     => ([], name, symbols)
            | result => (result, tailName, tailSymbols)
          }
        | (_, [])
        | ([], _) => ([], name, symbols)
      }
      def bindRealSymbol(aliasSymbol : AliasSymbol, nameTail : list[Location]) : list[T]
      {
        match (aliasSymbol.RealSymbol)
        {
          | None         => []
          | Some(symbol) => symbol.Node.BindMany(nameTail)
        }
      }
      def currentSymbols = if (ParentScope != null) ParentScope.CurrentSymbols else [];
      match (bindByAliasMap(name), bindByCurrentSymbols(name, currentSymbols))
      {
        | ((Some(aliasSymbol), aliasTailName), ([], _, _)) =>
          def candidates = bindRealSymbol(aliasSymbol, aliasTailName);
          BindingResult(candidates, [])

        | ((Some(_aliasSymbol), _aliasTailName), ((_ :: _) as _result, _, _)) =>
          def candidates = []; //bindRealSymbol(aliasSymbol, aliasTailName) + result;
          def messages =
            using (buffer = CompilerMessageList())
            {
              def currentSymbol = currentSymbols.Head;
              buffer.Error(name.Head, $"The $(currentSymbol.Description) '$(currentSymbol.FullName)' contains a definition conflicting with alias '$(aliasSymbol.Name)'", -1);
              buffer.GetMessages()
            };
          BindingResult(candidates, messages)

        | ((None, _), ((_ :: _) as result, _, _)) =>
          def candidates = result.OfType.[T]();
          BindingResult(candidates, [])

        | ((None, _), ([], _, _)) => ParentScope.BindByEnteredSymbol(name)

        //| ( (null, _), _) | ( _, null) => assert2(false); assert(false)
        //| ((Some(aliasSymbol), nameTail), (_ :: _) as symbols) =>
        //  // сообщаем об ошибке в любом случае!!!
        //  // и возвращаем пустой список
        
        //  match (bindRealSymbol(aliasSymbol, nameTail))
        //  {
        //    | []    => symbols
        //    | [one] => one :: symbols
        //    | many  => many + symbols
        //  }

        //| (                            _, (_ :: _) as symbols) => symbols
        //| ((Some(aliasSymbol), nameTail),                   _) => bindRealSymbol(aliasSymbol, nameTail)
        //| (                    (None, _),         []) =>
        //  if (ParentScope != null)
        //    ParentScope.BindByEnteredSymbol(name)
        //  else
        //    []
      }
    }

    BindByOpenedNamespace[T](name : list[Location]) : list[T]
    {
      def bind(name : list[Location], symbols : list[Symbol], acc) : list[T]
      {
        match (symbols)
        {
          | null | [] =>
            if (ParentScope != null)
              ParentScope.BindByOpenedNamespace(name)
            else
              []

          | first :: tail =>
            match (first.Node.BindMany.[T](name))
            {
              | []    => bind(name, tail, acc)
              | [one] => bind(name, tail, one :: acc)
              | many  => bind(name, tail, many + acc)
            }
        }
      }
      bind(name, OpenedNamespaces, [])
    }
  }
}
