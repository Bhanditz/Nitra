using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public class SpanClassContext : SimpleNameContext[SpanClassSymbol]
  {
    SpanClass : SpanClassSymbol { get; }
    protected override SymbolMap : Map[string, SpanClassSymbol] { get; }

    public this(parent : Context, name : G.Identifier, matchTokens : option[G.TokenRule])
    {
      base(parent);
      def parent = TryGetParent.[SpanClassContext]();
      SpanClass  = SpanClassSymbol(name, matchTokens);
      SymbolMap  = (parent?.SymbolMap ?? Map()).Replace(name.Value(), SpanClass);
      N2Project.CurrentProject.AddSymbolDef(SpanClass, name.Location);
    }

    public override ToString() : string
    {
      match(SpanClass.MatchTokens)
      {
        | Some(rule) => "span class " + SpanClass.Name + " = " + rule
        | None       => "span class " + SpanClass.Name
      }
    }
  }
}
