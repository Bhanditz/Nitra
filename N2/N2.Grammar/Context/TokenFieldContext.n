using N2.Model;
using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public class TokenFieldContext : SimpleNameContext[TokenFieldSymbol]
  {
    TokenField    : TokenFieldSymbol { get; }
    protected override SymbolMap : Map[string, TokenFieldSymbol] { get; }

    public TokenFieldNames : Map[string, TokenFieldSymbol] { get; }

    public this(parent : Context, name : G.Identifier, stringLiterals : list[G.StringLiteral])
    {
      base(parent);
      def parent      = TryGetParent.[TokenFieldContext]();
      TokenField      = TokenFieldSymbol(name, stringLiterals);
      SymbolMap       = (parent?.SymbolMap ?? Map()).Replace(name.Value(), TokenField);
      TokenFieldNames = stringLiterals.FoldLeft(parent?.TokenFieldNames ?? Map(), (lit, map) => map.Replace(lit.Value(), TokenField));
      N2Project.CurrentProject.AddSymbolDef(TokenField, name.Location);
    }

    public override ToString() : string
    {
      $<#token field $(TokenField.Name) = ..$(TokenField.StringLiterals; ", ")#>
    }
  }
}
