using N2.Model;
using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = N2Syntax;

namespace N2.Typing
{
  public class TokenFieldContext : Context, ITokenNamesMapContext
  {
    public TokenField    : TokenFieldSymbol { get; }
    public TokenNamesMap : Map[string, TokenFieldSymbol]
    {
      [Memoize] get
      {
        TokenField.StringLiterals.FoldLeft(GetParent.[ITokenNamesMapContext]().TokenNamesMap, (lit, map) => map.Replace(lit, TokenField))
      }
    }

    public this(parent : Context, name : G.Identifier, stringLiterals : list[G.StringLiteral])
    {
      base(parent);
      TokenField     = ParsedTokenFieldSymbol(name, stringLiterals);
      N2Project.CurrentProject.AddSymbolDef(TokenField, name.Location);
    }

    public override ToString() : string
    {
      $<#token field $(TokenField.Name) = ..$(TokenField.StringLiterals; ", ")#>
    }
  }

  public interface ITokenNamesMapContext : IContext
  {
    TokenNamesMap : Map[string, TokenFieldSymbol] { get; }
  }
}
