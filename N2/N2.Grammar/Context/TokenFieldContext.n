using N2.Model;
using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = N2Syntax;

namespace N2.Typing
{
  public class TokenFieldContext : Context
  {
    public TokenField    : TokenFieldSymbol { get; }
    public TokenNamesMap : Map[string, TokenFieldSymbol]
    {
      [Memoize] get
      {
        def appendSymbol(symbol : TokenFieldSymbol, map : Map[string, TokenFieldSymbol])
        {
          symbol.StringLiterals.FoldLeft(map, (lit, map) => map.Replace(lit, symbol))
        }
        def outerNamesMap = 
          match (TryGetParent.[TokenFieldContext]())
          {
            | null =>
              def walk(baseContext)
              {
                match (baseContext.TryGetParent.[OpenNamespaceOrTypeContext]())
                {
                  | null => Map()
                  | OpenNamespaceOrTypeContext(OpenSymbol = Some(SyntaxModuleSymbol as moduleSymbol)) as context =>
                    moduleSymbol.TokenFields.FoldLeft(walk(context), appendSymbol)

                  | context => walk(context)
                }
              }
              walk(this)

            | context => context.TokenNamesMap
          };
        appendSymbol(TokenField, outerNamesMap);
      }
    }

    public this(parent : Context, name : G.Identifier, stringLiterals : list[G.StringLiteral])
    {
      base(parent);
      TokenField     = ParsedTokenFieldSymbol(name, stringLiterals);
      N2Project.CurrentProject.AddSymbolDef(TokenField, name.Location);
    }

    public override ToString() : string
    {
      $<#token field $(TokenField.Name) = ..$(TokenField.StringLiterals; ", ")#>
    }
  }
}
