using N2.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Typing
{
  public class RuleAliasContext : Context
  {
    RuleAlias : RuleAliasSymbol { get; }
    
    public this(parent : Context, name : G.Identifier, rule : G.Rule)
    {
      base(parent);
      RuleAlias = RuleAliasSymbol(name, rule);
      N2Project.CurrentProject.AddSymbolDef(RuleAlias, name.Location);
    }

    protected override BindImpl[T](name : list[Location], reportError : bool) : option[T]
    {
      match (name)
      {
        | [one] => BindImpl(one, reportError)
        | _ => base.BindImpl(name, reportError)
      }
    }

    protected override BindImpl[T](name : Location, reportError : bool) : option[T]
    {
      if ((RuleAlias : object) is T && RuleAlias.Name == name)
        Some(RuleAlias :> T)
      else
        base.BindImpl(name, reportError)
    }

    public override ToString() : string
    {
      "alias " + RuleAlias.Name + " = " + RuleAlias.Rule;
    }
  }
}
