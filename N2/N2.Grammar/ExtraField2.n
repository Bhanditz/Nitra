using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;

namespace N2.Model
{
  [Record]
  public variant ExtraField2 : N2.Located
  {
    | Def        { Name : Identifier; Params : list[G.ExtraFieldsParam]; Type : G.Type; Body : N2.Location; }
    | DefPrivate { Name : Identifier; Params : list[G.ExtraFieldsParam]; Type : G.Type; Body : N2.Location; }
    | Abstract   { Name : Identifier; Params : list[G.ExtraFieldsParam]; Type : G.Type; }
    | Override   { Name : Identifier; Body : N2.Location; }
    | OnError    { Name : Identifier; Body : N2.Location; }

    public override ToString() : string
    {
      match (this)
      {
        | Override  (name, body) => $<#override $name = { $body };#>
        | OnError   (name, body) => $<#error $name = { $body };#>
        | Abstract  (name, parameters, type)       with (m = "",         end = ";")
        | Def       (name, parameters, type, body) with (m = "",         end = $"{ $body }")
        | DefPrivate(name, parameters, type, body) with (m = "private ", end = $"{ $body }") => $<#$m$name($parameters) : $type$end#>
      }
    }
  }
}
