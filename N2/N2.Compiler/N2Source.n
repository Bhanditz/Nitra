using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Imperative;
using N2.Model;

using System;
using System.Linq;

using SCG = System.Collections.Generic;
using G = GrammarParser2;

namespace N2
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    N2SourceImpl.Instance(path, Nemerle.Macros.ImplicitCTX().Manager).BeforeInheritance();
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    N2SourceImpl.Instance(path, Nemerle.Macros.ImplicitCTX().Manager).BeforeTypedMembers();
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Assembly)]
  public macro N2Source(path : string)
  {
    N2SourceImpl.Instance(path, Nemerle.Macros.ImplicitCTX().Manager).WithTypedMembers();
  }

  [Record]
  internal class SyntaxModule
  {
    public Name            : NameRef              { get; }
    public Grammar         : Grammar              { get; internal set; }
    public Imports         : list[Ast]            { get; }
    public GrammarCompiler : GrammarCompiler      { get; internal set; }
    public TypeBuilder     : TypeBuilder          { get; }
  }

  internal class N2SourceImpl
  {
    private Path          : string                 { get; }
    private Manager       : ManagerClass           { get; }
    private Env           : GlobalEnv              { get; set; }
    private SyntaxModules : SCG.List[SyntaxModule] = SCG.List();

    public this(path : string, manager : ManagerClass)
    {
      Path    = path;
      Manager = manager;
      Env     = Manager.CoreEnv;
    }

    public static Instance(path : string, manager : ManagerClass) : N2SourceImpl
    {
      def projDir = IO.Path.GetDirectoryName(manager.Options.ProjectPath);
      def path = 
        if (IO.Path.IsPathRooted(path))
          path;
        else
          IO.Path.Combine(projDir, path);
          
      if (manager.UserData.Contains(path))
        manager.UserData[path] :> N2SourceImpl;
      else
      {
        def impl = N2SourceImpl(path, manager);
        manager.UserData[path] = impl;
        impl;
      }
    }

    public BeforeInheritance() : void
    {
      when (!IO.File.Exists(Path))
      {
        Message.Error($<#The "$Path" not exists.#>);
        return;
      }

      def makeWrapperClass(source : ISource, processingCount : int) : void
      {
        // request rebuilding type tree when code changed
        if (processingCount > 1 && Manager.IsIntelliSenseMode)
          Manager.RequestOnBuildTypesTree();
        else
          try Parse(source) catch { | e => Message.Error(e.Message); }
      }
      SubscribeSourceChangedWithCounter(Manager, Location.GetFileIndex(Path), makeWrapperClass);
    }

    public BeforeTypedMembers() : void
    {
      foreach (sm in SyntaxModules)
      {
        try
        {
          foreach (import in sm.Imports)
          {
            | G.UsingDecl.Ast as decl =>
              def grammarType   = MainParser.ParseExpr(Env, decl.GrammarName.Location.GetText(), decl.GrammarName.NLocation());
              sm.Grammar = sm.Grammar.Add(GrammarRef(decl.NLocation(), sm.Grammar.GrammarRefs.Length, None(), Env.BindFixedType(grammarType)));

            | G.AliasDecl.Ast as decl =>
              def grammarType   = MainParser.ParseExpr(Env, decl.GrammarName.Location.GetText(), decl.GrammarName.NLocation());
              sm.Grammar = sm.Grammar.Add(GrammarRef(decl.NLocation(), sm.Grammar.GrammarRefs.Length, Some(decl.Alias.ToNameRef()), Env.BindFixedType(grammarType)));

            | _ => assert(false);
          }

          sm.GrammarCompiler = GrammarCompiler(Manager, Env, sm.TypeBuilder, sm.Grammar);
          sm.TypeBuilder.UserData[typeof(GrammarCompiler)] = sm.GrammarCompiler;
        }
        catch
        {
          | e is GrammarException =>
            def loc = if (e.Location != Location.Default) e.Location else sm.TypeBuilder.Location;
            Message.Error(loc,  e.Message);
          | _ is Nemerle.Compiler.Recovery => ()
          | e is Exception =>
            assert2(false, e.ToString());
            Message.Error(sm.TypeBuilder.Location,  $"Exception $e");
        }
      }
    }

    public WithTypedMembers() : void
    {
      foreach (sm in SyntaxModules)
      {
        try
        {
          if (sm.GrammarCompiler.Manager.IsIntelliSenseMode)
            IntelliSenseSupport.AddIntelliSenseSupport(sm.GrammarCompiler);
          else
            when (sm.GrammarCompiler.AllRules)
              sm.GrammarCompiler.CompileGrammar();

          sm.GrammarCompiler.DefineAllMethods();

          sm.TypeBuilder.Compile();
        }
        catch
        {
          | e is GrammarException =>
            def loc = if (e.Location != Location.Default) e.Location else sm.TypeBuilder.Location;
            Message.Error(loc,  e.Message);
          | _ is Nemerle.Compiler.Recovery => ()
          | e is Exception =>
            assert2(false, e.ToString());
            Message.Error(sm.TypeBuilder.Location,  $"Exception $e");
        }
      }
    }

    public Parse(source : ISource) : void
    {
      def parser = G.GrammarImpl();
      match (parser.ParseStart(SourceSnapshot(source.GetText(), source.FileIndex, Path)))
      {
        | None      =>
          def (pos, tokens) = parser.Parser.GetErrors();
          def loc = N2.Location(parser.Parser.ParsingSource, pos, pos + 1).ToNemerleLocation();
          foreach (token in tokens)
            Message.Error(loc, $"expected \"$(token.Name)\" in rule $(token.Rule.Grammar.Name).$(token.Rule.Name)");

        | Some(G.Start.Ast as start) =>
          foreach (openNamespace in start.OpenNamespaces)
          {
            | G.OpenNamespace.Ast as openNamespace =>
              Env = Env.AddOpenNamespace(openNamespace.Namespace.ToNameRef().Parts, openNamespace.Location.ToNemerleLocation());

            | _ => assert(false);
          }

          foreach (rd in start.TopDeclarations)
          {
            | G.SyntaxModule.Ast as syntaxModule => SyntaxModules.Add(ConvertSyntaxModule(syntaxModule));
            | _ => assert(false);
          }
        | _ => assert(false);
      }
    }

    public SubscribeSourceChangedWithCounter(manager : ManagerClass, fileIndex : int, handler : ISource * int -> void) : void
    {
      mutable counter = 0;
      manager.SubscribeSourceChanged(fileIndex, source =>
      {
        counter += 1;
        handler(source, counter);
      });
    }

    public static ToNemerleLocation(this loc : N2.Location) : Compiler.Location
    {
      def (startLine, startCol) = loc.StartLineColumn;
      def (endLine, endCol) = loc.EndLineColumn;
      Location(loc.Source.FileIndex, startLine, startCol, endLine, endCol)
    }

    public static NLocation(this ast : N2.Ast) : Compiler.Location
    {
      ast.Location.ToNemerleLocation();
    }

    public static ToName(this identifier : G.Identifier) : string
    {
      | G.Identifier.Ast as identifier => identifier.GetText(identifier.Name)
      | _ => Message.FatalError(identifier.NLocation(), "Error.");
    }

    public static ToNameRef(this identifier : G.Identifier) : NameRef
    {
      | G.Identifier.Ast as identifier => NameRef(identifier.NLocation(), [identifier.GetText(identifier.Name)])
      | _ => Message.FatalError(identifier.NLocation(), "Error.");
    }

    public static ToNameRef(this identifier : G.QIdentifier) : NameRef
    {
      | G.QIdentifier.Ast as identifier =>
        def nameRefs = identifier.Names[0].Map(_.ToNameRef());
        mutable nameRef = nameRefs.Head;
        foreach (nr in nameRefs.Tail)
          nameRef = nameRef + nr;
        nameRef
      | _ => Message.FatalError(identifier.NLocation(), "Error.");
    }

    private AddPrecedence(rule : Rule.Sequence, baseName : NameRef, precedence : G.Number, rightAssociative : bool) : Rule.Sequence
    {
      def newBindingPower = ConvertNumber(precedence);
      def updateCall(call, bindingPower, newBindingPower) : Rule
      {
        def bp = 
          if (bindingPower == 0)
            newBindingPower
          else
          {
            Message.Warning(call.Location, "You can't use Binding Power and 'precedence' simultaneously.");
            bindingPower
          };
          
        Rule.Call(call.Location, RuleType.Void(), 0, baseName, bp)
      }
      def checkUnary(call)
      {
        when (rightAssociative)
          Message.Error(call.Location, "You can't use 'right-associative' for a unary extending rule.");
      }
      match (rule.rules)
      {
        | (Call(n1, bp1) as call1) :: (String as op)                                    :: (Call(n2, bp2) as call2) :: rest when n1 == baseName && n2 == baseName with s = null // rec "op"   rec
        | (Call(n1, bp1) as call1) :: (String as op) :: (Rule(Type=RuleType.Void) as s) :: (Call(n2, bp2) as call2) :: rest when n1 == baseName && n2 == baseName  =>           // rec "op" s rec
          def newCall1 = updateCall(call1, bp1, newBindingPower + if (rightAssociative) 1 else 0);
          def newCall2 = updateCall(call2, bp2, newBindingPower);
          def rest2    = if (s == null) call2 :: rest else s :: newCall2 :: rest;
          Rule.Sequence(rule.Location, RuleType.Void(), 0, newCall1 :: op :: rest2)
          
        | [Call(n, bp) as call, String as op]                                when n == baseName with s = null // rec "op"
        | [Call(n, bp) as call, String as op, Rule(Type=RuleType.Void) as s] when n == baseName =>            // rec "op" s
          checkUnary(call);
          def newCall = updateCall(call, bp, newBindingPower);
          def rest    = if (s == null) [op] else [op, s];
          Rule.Sequence(rule.Location, RuleType.Void(), 0, newCall :: rest)
        
        | [String as op,                                Call(n, bp) as call] when n == baseName with s = null // "op"   rec 
        | [String as op, Rule(Type=RuleType.Void) as s, Call(n, bp) as call] when n == baseName =>            // "op" s rec
          checkUnary(call);
          def newCall = updateCall(call, bp, newBindingPower);
          def rest    = if (s == null) [call] else [s, newCall];
          
          Rule.Sequence(rule.Location, RuleType.Void(), 0, op :: rest)

        | _ => 
          Message.Error(precedence.Location.ToNemerleLocation(), 
            "You can use the 'precedence' for only rules satisfying the following patterns: 'E op E', 'op E', 'E op', 'E op s E', 'op E s', 'E op s'. Where op is literal and s is void rule call. Use a binding power instead.");
          rule
      }
    }
    
    public ConvertSyntaxModule(syntaxModule : G.SyntaxModule.Ast) : SyntaxModule
    {
      mutable grammar = Grammar();
      mutable imports = SCG.List();
      mutable tokenFieldNames = Map();
      mutable aliases = Map();
      mutable optionEmitDebugSources = true;
      def isAlias(rule) : bool
      {
        | Rule.Call(n, _) when aliases.Contains(n) => true
        | _ => false
      }
      def addSequence(rule : Rule) : Rule.Sequence * list[NameRef]
      {
        def names = SCG.List();
        def none  = NameRef(LocationStack.Top(), "_");
        def replaceAlias(rule) : Rule
        {
          | Rule.Call(n, _) when aliases.Contains(n) => names.Add(n); aliases.Get(n)
          | _ => names.Add(none); rule
        }
        match (rule)
        {
          | Rule.Sequence(rules) when rules.Exists(isAlias) => (Rule.Sequence(rule.Location, rule.Type, rule.Id, rules.Map(replaceAlias)), names.NToList())
          | Rule.Sequence as rule => (rule, NList.Repeat(none, rule.rules.Length))
          | _                     => (Rule.Sequence(rule.Location, RuleType.Void(), 0, [replaceAlias(rule)]), names.NToList())
        }
      }
      foreach (decl in syntaxModule.Declarations)
      {
        | G.UsingDecl.Ast as decl => imports.Add(decl)
        | G.AliasDecl.Ast as decl => imports.Add(decl)
        | G.OptionEmitDebugSources.Ast as opt =>
          match (opt.Value.ToName())
          {
            | "true"  => optionEmitDebugSources = true
            | "false" => optionEmitDebugSources = false
            | _       => Message.Error(opt.NLocation(), "Invalid value. true of false expected.")
          }

        | G.TokenRuleDecl.Ast as decl =>
          def name       = decl.Name.ToNameRef();
          def ruleId     = grammar.Count;
          def attributes = ConvertAttributes(decl.RuleAttributes);
          def rule       = ConvertTokenRule(decl.TokenRule);
          grammar = grammar.Add(RuleDefinition.Regular(name.Location, ruleId, name, attributes, tokenFieldNames, rule));

        | G.VoidRuleDecl.Ast  (RuleAttributes=attr, Name=name, Rule=rule) with type = RuleType.Void()
        | G.SimpleRuleDecl.Ast(RuleAttributes=attr, Name=name, Rule=rule) with type = RuleType.PType(<[ Ast ]>) =>
          def name          = name.ToNameRef();
          def ruleId        = grammar.Count;
          def attributes    = ConvertAttributes(attr);
          def (rule, names) = addSequence(ConvertRule(rule));
            
          grammar = grammar.Add(RuleDefinition.Simple(name.Location, ruleId, name, attributes, tokenFieldNames, type, rule, names));

        | G.ExtentionPointRuleDecl.Ast as decl =>
          def name       = decl.Name.ToNameRef();
          def ruleId     = grammar.Count;
          def attributes = ConvertAttributes(decl.RuleAttributes);
          def ruleType   = RuleType.PType(<[ Ast ]>);
          
          grammar = grammar.Add(RuleDefinition.ExtentionPoint(name.Location, ruleId, name, attributes, tokenFieldNames, ruleType));

        | G.ExtentionRuleDecl.Ast as decl =>
          def name            = decl.Name.ToNameRef();
          def ruleId          = grammar.Count;
          def attributes      = ConvertAttributes(decl.RuleAttributes);
          def (rule1, names)  = addSequence(ConvertRule(decl.Rule));
          def baseName        = decl.BaseName.ToNameRef();
          def rule2 =
            match (decl.BodyDeclaration)
            {
              //| G.EmptyBodyDeclaration.Ast => rule1
              | G.BlokBodyDeclaration.Ast(BodyMemberDeclarations=members) =>
                def subrules = members.Once.[G.SubruleNamesDeclaration.Ast]();
                def precedence = members.Once.[G.PrecedenceDeclaration.Ast]();
                
                if (precedence is Some(prec))
                  AddPrecedence(rule1, baseName, prec.Precedence, prec.RightAssociative.IsSome)
                else
                  rule1
              
              
              | _ => rule1
            };
          def ruleDecl = 
            match (rule2)
            {
              | Sequence((Call(callName, bindingPower) as call) :: rules) when callName == baseName =>
                RuleDefinition.ExtentionPostfix
                  ( name.Location
                  , ruleId
                  , name
                  , attributes
                  , tokenFieldNames
                  , baseName
                  , bindingPower
                  , Rule.Sequence(rule1.Location, RuleType.Void(), 0, Rule.PrefixCall(call.Location, RuleType.Void(), 0, baseName, bindingPower) :: rules)
                  , names
                  )

              | _ =>
                RuleDefinition.ExtentionPrefix
                  ( name.Location
                  , ruleId
                  , name
                  , attributes
                  , tokenFieldNames
                  , baseName
                  , rule2
                  , names
                  )
            };
          grammar = grammar.Add(ruleDecl);

        | G.Alias.Ast as alias =>
          def name = alias.Name.ToNameRef();
          def rule = ConvertRule(alias.Rule);
          aliases  = aliases.Replace(name, rule);
          
        | G.TokenField.Ast(StringLiterals=lits) as decl => 
          foreach (strLit is G.StringLiteral.Ast in lits[0])
            tokenFieldNames = tokenFieldNames.Replace(ConvertString(strLit), decl.Name.ToNameRef());

        | G.SpanClass.Ast as decl =>
          def name        = decl.Name.ToNameRef();
          def matchTokens = if (decl.MatchTokens is Some((_, matchTokens)))
            Some(ConvertTokenRule(matchTokens))
          else
            None();
          grammar = grammar.Add(SpanClass(decl.Location.ToNemerleLocation(), name, matchTokens));

        | G.BracePair.Ast as decl =>
          def open  = ConvertTokenRule(decl.Open);
          def close = ConvertTokenRule(decl.Close);
          grammar = grammar.Add(BracePair(decl.Location.ToNemerleLocation(), open, close));

        | error => Message.Error(error.NLocation(), "Error. Unknown declaration.");
      }
      def name = syntaxModule.Name.ToNameRef();
      def typeBuilder = Manager.CoreEnv.Define(<[decl:
          public partial abstract class $(name.AsName : dyn)
          {
          }
        ]>);
      
      DefineTokenFieldName(typeBuilder, tokenFieldNames);
      
      SyntaxModule(name, grammar, imports.NToList(), null, typeBuilder)
    }
    
    DefineTokenFieldName(typeBuilder : TypeBuilder, tokenFieldNames : Map[string, NameRef]) : void
    {
      foreach (g in tokenFieldNames.GroupBy((_, name) => name))
      {
        def tokens = g.Map((tok, _) => <[ $(tok : string) ]>);
        typeBuilder.Ast.AddCustomAttribute(
          <[ N2.TokenFieldNameAttribute($(g.Key.AsName : string), array[..$tokens]) ]>);
      }
    }

    public ConvertAttributes(attributes : G.RuleAttributes) : list[RuleAttribute]
    {
      def res = SCG.List();
      if (attributes is G.RuleAttributes.Ast as attributes)
        foreach (attribute in attributes.RuleAttributeLists)
        {
          | G.RuleAttributeList.Ast as attrList =>
            foreach (attribute in attrList.RuleAttributes[0])
            {
              | G.StartAttribute.Ast     as attr => res.Add(RuleAttribute.StartRule(attr.NLocation()))
              | G.AstAttribute.Ast       as attr => res.Add(RuleAttribute.Ast(attr.NLocation(), attr.Names[0].Map(_.ToNameRef())))
              | G.SpanClassAttribute.Ast as attr => res.Add(RuleAttribute.SpanClass(attr.NLocation(), attr.Class.ToNameRef()))
              | _ => Message.Error(attributes.NLocation(), "Error. Unknown attribute.");
            }
          | _ => Message.Error(attributes.NLocation(), "Error.");
        }
      else
        Message.Error(attributes.NLocation(), "Error.");
      res.NToList();
    }

    private HexDigit(c : char) : int
    {
      | c when '0' <= c && c <= '9' => c : int - '0' : int
      | c when 'a' <= c && c <= 'f' => c : int - 'a' : int + 10
      | c when 'A' <= c && c <= 'F' => c : int - 'A' : int + 10
      | _ => assert(false);
    }

    private EscapeSequence(c : char) : char
    {
      | '\'' => '\'' | '\"' => '\"' | '\\' => '\\' | '0'  => '\0'
      | 'a'  => '\a' | 'b'  => '\b' | 'f'  => '\f' | 'n'  => '\n'
      | 'r'  => '\r' | 't'  => '\t' | 'v'  => '\v' | c    => c
    }

    public ConvertChar(charLiteral : G.CharLiteral) : char
    {
      | G.CharLiteral.Ast as charLiteral =>
        match (charLiteral.CharPart)
        {
          | G.SimpleCharPart.Ast                as simple =>
            charLiteral.Location.Source.OriginalText[simple.Char.StartPos]

          | G.UnicodeEscapeSequenceCharPart.Ast as esc    =>
            def digit(tok) { HexDigit(charLiteral.Location.Source.OriginalText[tok.StartPos]) }
            (digit(esc.HexDigit1) * 0x1000 + digit(esc.HexDigit2) * 0x100 + digit(esc.HexDigit3) * 0x10 + digit(esc.HexDigit4)) :> char

          | G.EscapeSequenceCharPart.Ast        as esc =>
            EscapeSequence(charLiteral.Location.Source.OriginalText[esc.Char.StartPos])

          | error => Message.FatalError(error.NLocation(), "Error.");
        }
      | error => Message.FatalError(error.NLocation(), "Error.");
    }

    public ConvertString(stringLiteral : G.StringLiteral) : string
    {
      | G.StringLiteral.Ast as stringLiteral =>
        def sb = System.Text.StringBuilder();
        foreach (part in stringLiteral.StringParts)
        {
          | G.SimpleStringPart.Ast                as simple =>
            _ = sb.Append(simple.Location.GetText())

          | G.UnicodeEscapeSequenceStringPart.Ast as esc    =>
            def digit(tok) { HexDigit(stringLiteral.Location.Source.OriginalText[tok.StartPos]) }
            _ = sb.Append((digit(esc.HexDigit1) * 0x1000 + digit(esc.HexDigit2) * 0x100 + digit(esc.HexDigit3) * 0x10 + digit(esc.HexDigit4)) :> char)

          | G.EscapeSequenceStringPart.Ast        as esc =>
            _ = sb.Append(EscapeSequence(stringLiteral.Location.Source.OriginalText[esc.Char.StartPos]))

          | error => Message.Error(error.NLocation(), "Error.");
        }
        sb.ToString()

      | error => Message.FatalError(error.NLocation(), "Error.");
    }

    public ConvertNumber(numberLiteral : G.Number) : int
    {
      | G.Number.Ast as number =>
        int.Parse(number.GetText(number.Digits))

      | error => Message.FatalError(error.NLocation(), "Error.");
    }

    public ConvertTokenRule(rule : G.TokenRule) : RegularRule
    {
      | G.ChoiceTokenRule.Ast                  as rule =>
        def rules = ConvertTokenRule(rule.LeftRule) :: rule.RightRules.Map(r => ConvertTokenRule(r[1]));
        RegularRule.Choice(rule.NLocation(), rules)

      | G.SequenceTokenRule.Ast                as rule =>
        def rules = ConvertTokenRule(rule.LeftRule) :: rule.RightRules.Map(ConvertTokenRule(_));
        RegularRule.Sequence(rule.NLocation(), rules)

      | G.OptionalTokenRule.Ast                as rule =>
        RegularRule.Repeat(rule.NLocation(), 0, Some(1), ConvertTokenRule(rule.TokenRule))

      | G.ZeroOrManyTokenRule.Ast              as rule =>
        RegularRule.Repeat(rule.NLocation(), 0, None(), ConvertTokenRule(rule.TokenRule))

      | G.OneOrManyTokenRule.Ast               as rule =>
        RegularRule.Repeat(rule.NLocation(), 1, None(), ConvertTokenRule(rule.TokenRule))

      | G.RangeTokenRule.Ast                   as rule =>
        mutable charSet = RangeSet();
        foreach (range in rule.Ranges[0])
        {
          | G.SingleCharRange.Ast as ch =>
            def c = ConvertChar(ch.CharLiteral);
            charSet = charSet.AddRange(c, c);

          | G.CharRange.Ast as range =>
            def s = ConvertChar(range.CharLiteral1);
            def e = ConvertChar(range.CharLiteral2);
            charSet = charSet.AddRange(s, e);

          | G.UnicodeRange.Ast as cat =>
            if (UnicodeCategoryTable.StrToUnicodeCategory(cat.Name.ToName()) is Some(cat))
              charSet = charSet.AddRange(cat);
            else
              Message.Error(cat.NLocation(), "Invalid unicode category.");

          | error => Message.Error(error.NLocation(), "Error.");
        }
        RegularRule.Chars(rule.NLocation(), [charSet])

      | G.CharTokenRule.Ast                    as rule =>
        def c = ConvertChar(rule.CharLiteral);
        RegularRule.Chars(rule.NLocation(), [RangeSet().AddRange(c, c)])

      | G.StringTokenRule.Ast                  as rule =>
        RegularRule.Chars(rule.NLocation(), ConvertString(rule.StringLiteral).Map(c => RangeSet().AddRange(c, c)))

      | G.RoundsTokenRule.Ast                  as rule =>
        ConvertTokenRule(rule.TokenRule)

      | G.CallTokenRule.Ast                    as rule =>
        RegularRule.Call(rule.Name.NLocation(), rule.Name.ToNameRef())

      | G.ZeroOrManyWithSeparatorTokenRule.Ast as rule =>
        RegularRule.RepeatWithSeparator(rule.NLocation(), 0, None(), ConvertTokenRule(rule.TokenRule), ConvertTokenRule(rule.Separator))

      | G.OneOrManyWithSeparatorTokenRule.Ast  as rule =>
        RegularRule.RepeatWithSeparator(rule.NLocation(), 1, None(), ConvertTokenRule(rule.TokenRule), ConvertTokenRule(rule.Separator))

      | _ => Message.FatalError(rule.NLocation(), "Error.");
    }

    public ConvertRule(rule : G.Rule) : Rule
    {
      | G.SequenceRule.Ast                as rule =>
        def rules = ConvertRule(rule.LeftRule) :: rule.RightRules.Map(ConvertRule(_));
        Rule.Sequence(rule.NLocation(), RuleType.Void(), 0, rules)

      | G.NotRule.Ast                     as rule =>
        Rule.Not(rule.NLocation(), RuleType.Void(), 0, ConvertRule(rule.Rule))

      | G.AndRule.Ast                     as rule =>
        Rule.And(rule.NLocation(), RuleType.Void(), 0, ConvertRule(rule.Rule))

      | G.OptionalRule.Ast                as rule =>
        Rule.Repeat(rule.NLocation(), RuleType.Void(), 0, 0, Some(1), ConvertRule(rule.Rule))

      | G.ZeroOrManyRule.Ast              as rule =>
        Rule.Repeat(rule.NLocation(), RuleType.Void(), 0, 0, None(), ConvertRule(rule.Rule))

      | G.OneOrManyRule.Ast               as rule =>
        Rule.Repeat(rule.NLocation(), RuleType.Void(), 0, 1, None(), ConvertRule(rule.Rule))

      | G.CharRule.Ast                    as rule =>
        def c = ConvertChar(rule.CharLiteral);
        Rule.String(rule.NLocation(), RuleType.Void(), 0, c.ToString())

      | G.StringRule.Ast                  as rule =>
        Rule.String(rule.NLocation(), RuleType.Void(), 0, ConvertString(rule.StringLiteral))

      | G.RoundsRule.Ast                  as rule =>
        ConvertRule(rule.Rule)

      | G.CallRule.Ast                    as rule =>
        def bp = match (rule.BindingPower)
        {
          | Some((_, bp)) => ConvertNumber(bp)
          | None          => 0
        }
        Rule.Call(rule.Name.NLocation(), RuleType.Void(), 0, rule.Name.ToNameRef(), bp)

      | G.ZeroOrManyWithSeparatorRule.Ast as rule =>
        Rule.RepeatWithSeparator(rule.NLocation(), RuleType.Void(), 0, 0, None(), ConvertRule(rule.Rule), ConvertRule(rule.Separator))

      | G.OneOrManyWithSeparatorRule.Ast  as rule =>
        Rule.RepeatWithSeparator(rule.NLocation(), RuleType.Void(), 0, 1, None(), ConvertRule(rule.Rule), ConvertRule(rule.Separator))

      | G.Scope.Ast  as rule =>
        Rule.Scope(rule.NLocation(), RuleType.Void(), 0, rule.Name.ToNameRef(), ConvertRule(rule.Rule))

      | _ => Message.FatalError(rule.NLocation(), "Error.");
    }
  }
}
