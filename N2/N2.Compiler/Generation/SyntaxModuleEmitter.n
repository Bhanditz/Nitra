using N2.Model;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal partial class SyntaxModuleEmitter
  {
    public Manager : ManagerClass;
    public IsDebug  : bool { get; }

    public GrammarTB               : TypeBuilder;
    public GrammarImplTB           : TypeBuilder;
    public GrammarDescriptorImplTB : TypeBuilder;

    public this(manager : ManagerClass, syntaxModuleData : SyntaxModuleData)
    {
      Manager = manager;
      IsDebug = manager.Options.IsConstantDefined("DEBUG") || manager.Options.IsConstantDefined("PARSER_DEBUG");

      def syntaxModuleSymbol = syntaxModuleData.Name;
      def env = Manager.CoreEnv.EnterIntoNamespace(["TEMP"]).EnterIntoNamespace(syntaxModuleSymbol.Node.Parent.FullNameParts);

      GrammarTB               = env.Define(<[ decl: public abstract partial class $(syntaxModuleSymbol.Name : usesite) { } ]>);
      GrammarImplTB           = GrammarTB.DefineNestedType(MakeGrammarImpl());
      GrammarDescriptorImplTB = GrammarImplTB.DefineNestedType(MakeGrammarDescriptorImpl());
    }

    public Emit() : void
    {
      GrammarDescriptorImplTB.Compile();
      GrammarImplTB.Compile();
      GrammarTB.Compile();
    }
  }
}
