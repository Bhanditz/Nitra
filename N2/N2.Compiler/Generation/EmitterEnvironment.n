using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal class EmitterEnvironment
  {
    public Manager                           : ManagerClass  { get; }
    public IsDebug                           : bool          { get; }
    public EnableOptimization                : bool          { get { !IsDebug } }
    public IsIdeMode                         : bool          { get { Manager.IsIntelliSenseMode } }
    public OptionTypeInfo                    : TypeInfo      { get; }
    public ListTypeInfo                      : TypeInfo      { get; }
    public AstTypeInfo                       : TypeInfo      { get; }
    public AstTypeVar                        : FixedType     { get; }
    public NTokenTypeInfo                    : TypeInfo      { get; }
    public NTokenTypeVar                     : FixedType     { get; }
    public SymbolTypeInfo                    : TypeInfo      { get; }
    public SymbolTypeVar                     : FixedType     { get; }
    public ExportableSymbolAttributeTypeInfo : TypeInfo      { get; }
    public ExportableSymbolAttributeTypeVar  : FixedType     { get; }
    public Root                              : HierarchyNode { get; }

    public this(manager : ManagerClass, root : HierarchyNode)
    {
      Manager                           = manager;
      IsDebug                           = manager.Options.IsConstantDefined("DEBUG") || manager.Options.IsConstantDefined("PARSER_DEBUG");
      OptionTypeInfo                    = Manager.LookupTypeInfo("Nemerle.Core.option", 1);
      ListTypeInfo                      = Manager.LookupTypeInfo("Nemerle.Core.list", 1);
      AstTypeInfo                       = Manager.LookupTypeInfo("N2.Ast", 0);
      AstTypeVar                        = FixedType.Class(AstTypeInfo, []);
      NTokenTypeInfo                    = Manager.LookupTypeInfo("N2.NToken", 0);
      NTokenTypeVar                     = FixedType.Class(NTokenTypeInfo, []);
      SymbolTypeInfo                    = Manager.LookupTypeInfo("N2.Typing.Symbol", 0);
      SymbolTypeVar                     = FixedType.Class(SymbolTypeInfo, []);
      ExportableSymbolAttributeTypeInfo = Manager.LookupTypeInfo("N2.Typing.ExportableSymbolAttribute", 0);
      ExportableSymbolAttributeTypeVar  = FixedType.Class(ExportableSymbolAttributeTypeInfo, []);
      Root                              = root;
    }

    public NamespaceOfSymbol(symbol : Symbol) : GlobalEnv
    {
      Manager.CoreEnv.EnterIntoNamespace(symbol.Node.Parent.FullNameParts);
    }
  }
}
