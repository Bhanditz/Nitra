using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal class EmitterEnvironment
  {
    public Manager            : ManagerClass { get; }
    public IsDebug            : bool         { get; }
    public EnableOptimization : bool         { get { !IsDebug } }
    public IsIdeMode          : bool         { get { Manager.IsIntelliSenseMode } }
    public OptionTypeInfo     : TypeInfo     { get; }
    public ListTypeInfo       : TypeInfo     { get; }
    public AstTypeInfo        : TypeInfo     { get; }
    public AstTypeVar         : FixedType    { get; }
    public NTokenTypeInfo     : TypeInfo     { get; }
    public NTokenTypeVar      : FixedType    { get; }

    private _ruleDefinitionTable : Dictionary[RuleRefSymbol, RuleDefinition2] = Dictionary();

    public this(manager : ManagerClass, syntaxModules : IEnumerable[SyntaxModuleData])
    {
      Manager        = manager;
      IsDebug        = manager.Options.IsConstantDefined("DEBUG") || manager.Options.IsConstantDefined("PARSER_DEBUG");
      OptionTypeInfo = Manager.LookupTypeInfo("Nemerle.Core.option", 1);
      ListTypeInfo   = Manager.LookupTypeInfo("Nemerle.Core.list", 1);
      AstTypeInfo    = Manager.LookupTypeInfo("N2.Ast", 0);
      AstTypeVar     = FixedType.Class(AstTypeInfo, []);
      NTokenTypeInfo = Manager.LookupTypeInfo("N2.NToken", 0);
      NTokenTypeVar  = FixedType.Class(NTokenTypeInfo, []);

      foreach (sm in syntaxModules)
        foreach (rd in sm.RuleDefs)
          _ruleDefinitionTable.Add(rd.RuleSymbol, rd);
    }

    public GetRuleDefinition(symbol : RuleRefSymbol) : RuleDefinition2
    {
      assert2(_ruleDefinitionTable.ContainsKey(symbol));
      _ruleDefinitionTable[symbol]
    }
  }
}
