using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public class EmitterEnvironment
  {
    public Manager                   : ManagerClass  { get; }
    public IsDebug                   : bool          { get; }
    public EnableOptimization        : bool          { get { !IsDebug } }
    public IsIdeMode                 : bool          { get { Manager.IsIntelliSenseMode } }
    public OptionTypeInfo            : TypeInfo      { get; }
    public ListTypeInfo              : TypeInfo      { get; }
    public AstTypeInfo               : TypeInfo      { get; }
    public AstTypeVar                : FixedType     { get; }
    public NTokenTypeInfo            : TypeInfo      { get; }
    public NTokenTypeVar             : FixedType     { get; }
    public LocationTypeInfo          : TypeInfo      { get; }
    public LocationTypeVar           : FixedType     { get; }
    public SymbolTypeInfo            : TypeInfo      { get; }
    public SymbolTypeVar             : FixedType     { get; }
    public IExportableSymbolTypeInfo : TypeInfo      { get; }
    public IExportableSymbolTypeVar  : FixedType     { get; }
    public Root                      : HierarchyNode { get; }

    public this(manager : ManagerClass, root : HierarchyNode)
    {
      Manager                   = manager;
      IsDebug                   = manager.Options.IsConstantDefined("DEBUG") || manager.Options.IsConstantDefined("PARSER_DEBUG");
      OptionTypeInfo            = Manager.LookupTypeInfo("Nemerle.Core.option", 1);
      ListTypeInfo              = Manager.LookupTypeInfo("Nemerle.Core.list", 1);
      AstTypeInfo               = Manager.LookupTypeInfo("N2.Ast", 0);
      AstTypeVar                = FixedType.Class(AstTypeInfo, []);
      NTokenTypeInfo            = Manager.LookupTypeInfo("N2.NToken", 0);
      NTokenTypeVar             = FixedType.Class(NTokenTypeInfo, []);
      LocationTypeInfo          = Manager.LookupTypeInfo("N2.Location", 0);
      LocationTypeVar           = FixedType.Class(LocationTypeInfo, []);
      SymbolTypeInfo            = Manager.LookupTypeInfo("N2.Typing.Symbol", 0);
      SymbolTypeVar             = FixedType.Class(SymbolTypeInfo, []);
      IExportableSymbolTypeInfo = Manager.LookupTypeInfo("N2.Serialization.IExportableSymbol", 0);
      IExportableSymbolTypeVar  = FixedType.Class(IExportableSymbolTypeInfo, []);
      Root                      = root;
    }

    public NamespaceOfSymbol(symbol : Symbol) : GlobalEnv
    {
      Manager.CoreEnv.EnterIntoNamespace(symbol.Node.Parent.FullNameParts);
    }

    [Memoize]
    public NTypeOfRuleSymbol(symbol : RuleSymbol) : FixedType
    {
      BindFixedType(symbol.Node.Parent.FullNameParts + [MakePublicRuleName(symbol)])
    }

    [Memoize]
    public PTypeOfRuleSymbol(symbol : RuleSymbol) : PExpr
    {
      <[ $(NTypeOfRuleSymbol(symbol) : typed) ]>
    }

    [Memoize]
    public RuleTypeToNType(ruleType : RuleType) : TypeVar
    {
      def ruleTypeToNType(_ : RuleType)
      {
        | Chars        => NTokenTypeVar
        | Ref(symbol)  => NTypeOfRuleSymbol(symbol)
        | List(ty)     => FixedType.Class(ListTypeInfo, [ruleTypeToNType(ty)])
        | Option(Void) => FixedType.Void()
        | Option(ty)   => FixedType.Class(OptionTypeInfo, [ruleTypeToNType(ty)])
        | Tuple(types) =>
          match (types.MapFiltered(ty => !(ty is RuleType.Void), ruleTypeToNType))
          {
            | [ty]  => ty
            | types => FixedType.Tuple(types)
          }

        | Void         => FixedType.Void()
      }
      ruleTypeToNType(ruleType)
    }

    public MakePublicRuleName(symbol : RuleSymbol) : string
    {
      MakePublicName(symbol.Name)
    }

    private BindFixedType(typeName : list[string]) : FixedType
    {
      match (Manager.CoreEnv.LookupType(typeName))
      {
        | Some(ty) => FixedType.Class(ty, [])
        | None     => assert2(false); assert(false)
      }
    }

    private static MakePublicName(name : string) : string
    {
      if (name.Length == 0 || char.IsUpper(name[0]))
        name
      else
      {
        def nameChars = name.ToCharArray();
        nameChars[0] = char.ToUpperInvariant(nameChars[0]);
        string(nameChars)
      }
    }
  }
}
