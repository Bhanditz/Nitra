using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal abstract class RuleParserEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }

    public abstract Emit() : void;

    protected DecorateRuleName(symbol : RuleRefSymbol) : string
    {
      $"_#_$(symbol.Name)_"
    }

    protected DecorateRuleName(rd : RuleDefinition2) : string
    {
      DecorateRuleName(rd.RuleSymbol)
    }

    protected DefineImplementation(member : ClassMember) : void
    {
      if (Owner.Environment.IsDebug)
        Owner.GrammarImplTB.DefineConditional(member)
      else
        Owner.GrammarImplTB.Define(member)
    }

    public static DecorateRuleClassName(rd : RuleDefinition2) : string
    {
      | ExtentionPoint   => $"_#point#___$(rd.RuleSymbol.Name)_"
      | ExtentionPrefix  => $"_#prefix#__$(rd.RuleSymbol.Name)_"
      | ExtentionPostfix => $"_#postfix#_$(rd.RuleSymbol.Name)_"
      | Simple           => $"_#simple#__$(rd.RuleSymbol.Name)_"
      | Regular          => $"_#regular#_$(rd.RuleSymbol.Name)_"
      | Marker           => assert(false)
    }

    protected DefineInit(tb : TypeBuilder) : void
    {
      //def getDescriptor(rd)
      //{
      //  <[ $(_grammarCompiler.GetDescriptorClassRef(rd)).StaticDescriptor ]>
      //}
      //def inits = SCG.List();
      //foreach ((rd, name) in _simpleCalls)
      //{
      //  tb.DefineConditional(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
      //  inits.Add(<[ $(name : dyn) = Grammar.GetSimpleRuleParser($(getDescriptor(rd))); ]>);
      //}
      //foreach ((rd, bp, name) in _extensibleCalls)
      //{
      //  tb.DefineConditional(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
      //  inits.Add(<[ $(name : dyn) = Grammar.GetExtensibleRuleParser($bp, $(getDescriptor(rd))); ]>);
      //}
      tb.DefineConditional(<[decl:
        public override Init() : void
        {
          //..$(inits.NToList())
        }
      ]>);
    }

    protected DefineParse(tb : TypeBuilder, rd : RuleDefinition2, rule : Rule2) : void
    {
      tb.DefineConditional(<[decl:
        public override Parse(mutable curEndPos : int, text : string, resultRef : ref int, parser : ref N2.Internal.Parser) : int
        {
          //$(Compile(rd, rule))
          -1
        }
      ]>);
    }
  }
}
