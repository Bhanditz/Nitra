using N2.Compiler.RuleField;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }
    public RuleSymbol : RuleDefSymbol { get; }

    public this(owner : SyntaxModuleEmitter, ruleSymbol : RuleDefSymbol)
    {
      Owner          = owner;
      RuleSymbol     = ruleSymbol;
    }

    public abstract DefineParser() : void;

    public abstract DefineParserMethods() : void;

    public abstract Emit() : void;

    protected DefineImplementation(member : ClassMember) : void
    {
      if (Owner.Environment.IsDebug)
        Owner.GrammarImplTB.DefineConditional(member)
      else
        Owner.GrammarImplTB.Define(member)
    }

    public mutable _astStructure : RuleStructure.Ast = null;
    protected MakeRuleFields(ruleSymbol : SyntaxRuleSymbol) : void
    {
      assert(_astStructure == null);
      when (!Owner.Environment.IsIdeMode)
        _astStructure = TransformRule(ruleSymbol);
    }

    protected DefineInit(tb : TypeBuilder) : void
    {
      def getDescriptor(ruleSymbol : RuleDefSymbol)
      {
        <[ $(ruleSymbol.GetDescriptorClassRef()).StaticDescriptor ]>
      }
      def inits = List();

      def reflectionCases = List();
      def reflectionFields = List();
      def structReflect(ruleField : RuleField) : list[PExpr]
      {
        def makeCode(type : PExpr, desc : string, astStruct : AstStruct) : PExpr
        {
          def subrules = List();
          foreach (sizeField in astStruct.SizeFields)
          {
            def (subruleType, subruleDesc, args) = match (sizeField.Field)
            {
              | RuleField.List               as x => (<[ N2.Runtime.Reflection.RuleInfo.List              ]>, x.Rule.ToString(), structReflect(sizeField.Field))
              | RuleField.List2              as x => (<[ N2.Runtime.Reflection.RuleInfo.ListWithSeparator ]>, x.Rule.ToString(), structReflect(sizeField.Field))
              | RuleField.Option             as x => (<[ N2.Runtime.Reflection.RuleInfo.Option            ]>, x.Rule.ToString(), structReflect(sizeField.Field))
              | RuleField.Predicate          as x => (<[ N2.Runtime.Reflection.RuleInfo.Predicate         ]>, x.Rule.ToString(), structReflect(sizeField.Field))
              | RuleField.ExtensibleRuleCall as x => (<[ N2.Runtime.Reflection.RuleInfo.ExtensibleCall    ]>, x.RuleSymbol.Name, [])
              | RuleField.TokenRuleCall      as x => (<[ N2.Runtime.Reflection.RuleInfo.TokenCall         ]>, x.RuleSymbol.Name, [])
              | RuleField.SimpleRuleCall     as x => (<[ N2.Runtime.Reflection.RuleInfo.SimpleCall        ]>, x.RuleSymbol.Name, [<[ ($(MakeParserName(x.RuleSymbol) : dyn) :> N2.Internal.SimpleRuleParser).RuleId ]>])
              | RuleField.Void               as x => (<[ N2.Runtime.Reflection.RuleInfo.SimpleCall        ]>, x.RuleSymbol.Name, [<[ ($(MakeParserName(x.RuleSymbol) : dyn) :> N2.Internal.SimpleRuleParser).RuleId ]>])
              | RuleField.TokenString        as x => (<[ N2.Runtime.Reflection.RuleInfo.TokenString       ]>, x.Rule.ToString(), [])
              | RuleField.Ast                     => assert(false)
              | _                                 => assert(false);
            }
            def args = [<[ $(sizeField.Offset) ]>, <[ $subruleDesc ]>, <[ $(sizeField.Field.State) ]>] + args;
            subrules.Add(<[ $subruleType(..$args) ]>);
          }
          def field = $"reflectionField$(reflectionFields.Count)";
          reflectionFields.Add((field, type));
          reflectionCases.Add(<[case: | _ when ruleId == $(astStruct.AstId : dyn) => $(field : dyn) ]>);
          <[
            $(field : dyn) = $type($(astStruct.AstId : dyn), $desc, System.Collections.ObjectModel.ReadOnlyCollection(array[..$(subrules.NToList())]));
            $(field : dyn);
          ]>
        }
        match (ruleField)
        {
          | RuleField.Ast       as x => [makeCode(<[ N2.Runtime.Reflection.RuleStructure.Ast                        ]>, x.RuleSymbol.Name, x.astStruct)]
          | RuleField.List      as x => [makeCode(<[ N2.Runtime.Reflection.RuleStructure.List                       ]>, $"Item: $(x.Rule)", x.astStruct)]
          | RuleField.Option    as x => [makeCode(<[ N2.Runtime.Reflection.RuleStructure.Option                     ]>, x.Rule.ToString(), x.astStruct)]
          | RuleField.Predicate as x => [makeCode(<[ N2.Runtime.Reflection.RuleStructure.Predicate                  ]>, x.Rule.ToString(), x.astStruct)]
          | RuleField.List2     as x => [makeCode(<[ N2.Runtime.Reflection.RuleStructure.ListWithSeparatorRule      ]>, $"Rule.Item: $(x.Rule.Rule)", x.astRuleStruct),
                                         makeCode(<[ N2.Runtime.Reflection.RuleStructure.ListWithSeparatorSeparator ]>, $"Separator.Item: $(x.Rule.Separator)", x.astSeparatorStruct)]
          | _                        => assert(false);
        }
      }
      def reflection = structReflect(_fields[0]).Head;
      reflectionCases.Add(<[case: | _ => assert(false) ]>);
      foreach ((_astStruct, id) in InternalRuleIds.KeyValuePairs)
      {
        tb.DefineConditional(<[decl: public mutable $(id : dyn) : int; ]>);
        inits.Add(<[ $(id : dyn) = Grammar.NewRuleId(this); ]>);
      }
      foreach ((field, type) in reflectionFields)
        tb.DefineConditional(<[decl: private mutable $(field : dyn) : $type ]>);

      tb.DefineConditional(<[decl:
        public override Reflection(ruleId : int) : N2.Runtime.Reflection.RuleStructure
        {
          when ($(reflectionFields[reflectionFields.Count - 1][0] : dyn) == null)
            _ = $(reflection);

          match (ruleId)
          {
            ..$(reflectionCases.NToList())
          }
        }]>);

      foreach ((ruleSymbol, name) in _simpleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
        inits.Add(<[ $(name : dyn) = Grammar.GetSimpleRuleParser($(getDescriptor(ruleSymbol))); ]>);
      }
      foreach ((ruleSymbol, bp, name) in _extensibleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
        inits.Add(<[ $(name : dyn) = Grammar.GetExtensibleRuleParser($(getDescriptor(ruleSymbol)), $bp); ]>);
      }
      tb.DefineConditional(<[decl:
        public override Init() : void
        {
          ..$(inits.NToList())
        }
      ]>);
    }

    protected DefineParse(tb : TypeBuilder) : void
    {
      def code = if (Owner.Environment.IsIdeMode)
        <[ _ = curEndPos; _ = text; _ = resultRef; _ = parser; -1 ]>;
      else
      {
        assert(_astStructure != null);
        CompileAst(_astStructure);
      }
      tb.DefineConditional(<[decl:
        public override Parse(mutable curEndPos : int, text : string, resultRef : ref int, parser : ref N2.Internal.Parser) : int
        {
          $code
        }
      ]>);
    }
  }
}
