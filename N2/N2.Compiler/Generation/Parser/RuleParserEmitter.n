using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal abstract class RuleParserEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }

    public abstract Emit() : void;

    protected DecorateRuleName(symbol : RuleRefSymbol) : string
    {
      $"_#_$(symbol.Name)_"
    }

    protected DecorateRuleName(rd : RuleDefinition2) : string
    {
      DecorateRuleName(rd.RuleSymbol)
    }

    protected DefineImplementation(member : ClassMember) : void
    {
      if (Owner.Environment.IsDebug)
        _ = Owner.GrammarImplTB.DefineConditional(member)
      else
        Owner.GrammarImplTB.Define(member)
    }
  }
}
