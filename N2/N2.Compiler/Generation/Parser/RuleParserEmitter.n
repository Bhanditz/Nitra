using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal abstract class RuleParserEmitter : IVariableEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }
    public RuleSymbol : RuleDefSymbol { get; }

    public this(owner : SyntaxModuleEmitter, ruleSymbol : RuleDefSymbol)
    {
      Owner          = owner;
      RuleSymbol     = ruleSymbol;
      EndLabel       = owner.Environment.MakeLabel("EndParse");
    }

    public abstract DefineParser(astSize : out int, rootAstStruct : out option[RootAstStruct2], externalCalls : List[RuleSymbol]) : void;

    public abstract DefineParserMethods() : void;

    public abstract Emit() : void;

    protected DefineImplementation(member : ClassMember) : void
    {
      if (Owner.Environment.IsDebug)
        Owner.GrammarImplTB.DefineConditional(member)
      else
        Owner.GrammarImplTB.Define(member)
    }

    public InternalRuleIds : Hashtable[InternalAstStruct2, string] = Hashtable();
    public MakeRuleId(ruleField : InternalAstStruct2) : string
    {
      def name = $"RuleId$(InternalRuleIds.Count)";
      InternalRuleIds[ruleField] = name;
      name;
    }

    [Memoize]
    public MakeTokenCall(ruleSymbol : RegularRuleSymbol) : PExpr
    {
      def grammarType = PExprUtils.FromQualifiedIdentifier(ruleSymbol.DeclaringModule.Node.FullNameParts);
      <[ $grammarType.GrammarImpl.$(ruleSymbol.DecorateRuleName() : dyn) ]>
    }

    private _simpleCalls : List[SimpleRuleSymbol * string] = List();

    [Memoize]
    public MakeCall(ruleSymbol : SimpleRuleSymbol) : PExpr
    {
      def name = $"_parser_s$(_simpleCalls.Count)_$(ruleSymbol.Name)";
      _simpleCalls.Add((ruleSymbol, name));
      <[ $(name : dyn).Parse ]>
    }

    private _extensibleCalls : List[ExtensibleRuleSymbol * int * string] = List();

    [Memoize]
    public MakeCall(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int) : PExpr
    {
      def name = $"_parser_e$(_extensibleCalls.Count)_$(ruleSymbol.Name)";
      _extensibleCalls.Add((ruleSymbol, bindingPower, name));
      <[ $(name : dyn).Parse ]>
    }

    Environment : EmitterEnvironment implements IVariableEmitter.Environment { get { Owner.Environment } }


    private _names : Dictionary[string, PExpr] = Dictionary();

    CreateVariable(name : string) : PExpr implements IVariableEmitter.CreateVariable
    {
      mutable nameRef;
      if (_names.TryGetValue(name, out nameRef))
        nameRef
      else
      {
        nameRef = <[ $(name : dyn) ]>;
        _names[name] = nameRef;
        nameRef;
      }
    }

    public EndLabel : PExprLabel { get; private set; }

    private mutable _fields : array[RuleField2];

    protected MakeRuleFields(ruleSymbol : RuleDefSymbol, rule : Rule, astSize : out int, rootAstStruct : out option[RootAstStruct2], externalCalls : List[RuleSymbol]) : void
    {
      assert(_fields == null);
      def conv(rule : Rule) : array[RuleField2]
      {
        def loc = rule.NLocation();
        match (rule)
        {
          | And                   as rule => array[RuleField2.Predicate  (loc, rule, conv(rule.Rule), true)]
          | Not                   as rule => array[RuleField2.Predicate  (loc, rule, conv(rule.Rule), false)]
          | Repeat(0, Some(1), _) as rule => array[RuleField2.Option     (loc, rule, conv(rule.Rule))]
          | Repeat                as rule => array[RuleField2.List       (loc, rule, conv(rule.Rule),                       rule.MinCount, rule.MaxCount)]
          | RepeatWithSeparator   as rule => array[RuleField2.List2      (loc, rule, conv(rule.Rule), conv(rule.Separator), rule.MinCount, rule.MaxCount, rule.HangingSeparator)]
          | String                as rule => array[RuleField2.TokenString(loc, rule, rule.Str)]
          | Sequence              as rule => rule.Rules.Map(conv(_)).Flatten().NToArray();
          | Call(RuleRef.Some(MarkerSymbol), _) => array[]
          | Call(RuleRef.Some(ruleSymbol), bindingPower) =>
            match (ruleSymbol)
            {
              | ExtensibleRuleSymbol                   as rs => array[RuleField2.Extensible(loc, rs, bindingPower)]
              | SimpleRuleSymbol(Type = RuleType.Void) as rs => array[RuleField2.Void(loc, rs)]
              | SimpleRuleSymbol                       as rs => array[RuleField2.ExternalAst(loc, rs)]
              | RegularRuleSymbol                      as rs => array[RuleField2.TokenCall(loc, rs)]
              | MarkerSymbol                                 => array[]
              | _                                            => assert(false)
            }

          | Call(RuleRef.None, _) => assert2(false, "Typing bug: not bound symbol."); assert(false)
        }
      }
      if (Owner.Environment.IsIdeMode)
      {
        _fields = array[];
        astSize = 0;
        rootAstStruct = None();
      }
      else
      {
        def loc = rule.NLocation();
        def rule = match (ruleSymbol)
        {
          | ExtentionRuleSymbol(ExtentionType = Postfix(_, rule)) => rule
          | _ => rule
        }
        def ast = RuleField2.Ast(loc, Owner.Environment.IsDebug, conv(rule), ruleSymbol);
        def fields = List();
        ast.Init(this, null, 0, fields);
        ast.CalculateAstInfo();
        foreach (field in fields)
          field.Compile();
        _fields = fields.NToArray();

        match (ast.astStruct)
        {
          | null =>
            astSize       = 0;
            rootAstStruct = None();

          | astStruct =>
            astSize       = astStruct.AstSize;
            rootAstStruct = Some(astStruct);
        }

        def grammarNode = ruleSymbol.Node.Parent;
        foreach ((callSymbol, _) in _simpleCalls)
          when (callSymbol.Node.Parent : object != grammarNode)
            externalCalls.Add(callSymbol);
        foreach ((callSymbol, _, _) in _extensibleCalls)
          when (callSymbol.Node.Parent : object != grammarNode)
            externalCalls.Add(callSymbol);
      }
    }

    protected DefineInit(tb : TypeBuilder) : void
    {
      def getDescriptor(ruleSymbol : RuleDefSymbol)
      {
        <[ $(ruleSymbol.GetDescriptorClassRef()).StaticDescriptor ]>
      }
      def inits = List();

      foreach (id in InternalRuleIds.Values)
      {
        tb.DefineConditional(<[decl: public mutable $(id : dyn) : int; ]>);
        inits.Add(<[ $(id : dyn) = Grammar.NewRuleId(null); ]>);
      }

      foreach ((ruleSymbol, name) in _simpleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
        inits.Add(<[ $(name : dyn) = Grammar.GetSimpleRuleParser($(getDescriptor(ruleSymbol))); ]>);
      }
      foreach ((ruleSymbol, bp, name) in _extensibleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
        inits.Add(<[ $(name : dyn) = Grammar.GetExtensibleRuleParser($(getDescriptor(ruleSymbol)), $bp); ]>);
      }
      tb.DefineConditional(<[decl:
        public override Init() : void
        {
          ..$(inits.NToList())
        }
      ]>);
    }

    protected DefineParse(tb : TypeBuilder, ruleSymbol : RuleDefSymbol, rule : Rule) : void
    {
      assert(_fields != null);
      def code = List();
      if (Owner.Environment.IsIdeMode)
        code.Add(<[ _ = curEndPos; _ = text; _ = resultRef; _ = parser; -1 ]>);
      else
      {
        code.Add(<[ _ = $(rule.ToString()) ]>);
        code.AddRange(_fields.Map(field => <[ _ = $(field.Print()) ]>));
        code.Add(<[
          mutable tmpResult  : int; _ = tmpResult;
          mutable tmpSize    : int; _ = tmpSize;
          mutable parseState : int; _ = parseState;
          mutable newPos     : int; _ = newPos;
        ]>);
        code.AddRange(_names.Filter(kv => kv.Key != "resultRef").Map(kv => <[ mutable $(kv.Key : dyn) ]>));
        code.AddRange(_fields.Map(field => field.ParseCode));
        if (ruleSymbol.LastLocation is Some(loc) when Owner.Environment.Manager.Options.EmitDebug)
        {
          //assert2(false);
          def debugCode = <[ () ]>;
          debugCode.Location = loc.NLocation();
          code.Add(<[ $(EndLabel.Label()); $debugCode; curEndPos; ]>);
        }
        else
          code.Add(<[ $(EndLabel.Label()); curEndPos; ]>);
      }
      tb.DefineConditional(<[decl:
        public override Parse(mutable curEndPos : int, text : string, resultRef : ref int, parser : ref N2.Internal.Parser) : int
        {
          ..$(code.FlattenPExprSequence())
        }
      ]>);
    }
  }
}
