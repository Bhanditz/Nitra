using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter : IConstantEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }
    public RuleSymbol : RuleDefSymbol { get; }
    public Environment : EmitterEnvironment { get { Owner.Environment } }
    public this(owner : SyntaxModuleEmitter, ruleSymbol : RuleDefSymbol)
    {
      Owner          = owner;
      RuleSymbol     = ruleSymbol;
    }

    private mutable _callCounter : int = 0;
    private _simpleCalls : List[SimpleRuleSymbol * string] = List();

    [Memoize]
    public MakeParserName(ruleSymbol : SimpleRuleSymbol) : string
    {
      Owner.CallRule(ruleSymbol);
      def name = $"_parser_$(_callCounter)_$(ruleSymbol.Name)";
      _simpleCalls.Add((ruleSymbol, name));
      ++_callCounter;
      name
    }

    private _extensibleCalls : List[ExtensibleRuleSymbol * int * string] = List();

    [Memoize]
    public MakeParserName(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int) : string
    {
      Owner.CallRule(ruleSymbol);
      def name = $"_parser_$(_callCounter)_$(ruleSymbol.Name)";
      _extensibleCalls.Add((ruleSymbol, bindingPower, name));
      ++_callCounter;
      name
    }

    public abstract DefineParser() : void;

    public abstract DefineParserMethods() : void;

    public abstract Emit() : void;

    protected DefineImplementation(member : ClassMember) : void
    {
      if (Owner.Environment.IsDebug)
        Owner.GrammarImplTB.DefineConditional(member)
      else
        Owner.GrammarImplTB.Define(member)
    }

    protected DefineInit(tb : TypeBuilder, ruleStructure : RuleStructure.Ast) : void
    {
      def inits = List();

      def reflectionCases = List();
      def reflectionFields = List();
      def structReflect(ruleStructure : RuleStructure) : PExpr
      {
        def type = match (ruleStructure)
        {
          | RuleStructure.Ast                        => <[ N2.Runtime.Reflection.RuleStructure.Ast                        ]>
          | RuleStructure.List                       => <[ N2.Runtime.Reflection.RuleStructure.List                       ]>
          | RuleStructure.Option                     => <[ N2.Runtime.Reflection.RuleStructure.Option                     ]>
          | RuleStructure.Predicate                  => <[ N2.Runtime.Reflection.RuleStructure.Predicate                  ]>
          | RuleStructure.ListWithSeparatorRule      => <[ N2.Runtime.Reflection.RuleStructure.ListWithSeparatorRule      ]>
          | RuleStructure.ListWithSeparatorSeparator => <[ N2.Runtime.Reflection.RuleStructure.ListWithSeparatorSeparator ]>
        }
        def subrules = List();
        foreach (field in ruleStructure.NotMarkerFields)
        {
          def (subruleType, args) =
            match (field)
            {
              | RuleStructureField.Empty                   => (<[ N2.Runtime.Reflection.RuleInfo.Empty             ]>, [])
              | RuleStructureField.List               as x => (<[ N2.Runtime.Reflection.RuleInfo.List              ]>, [structReflect(x.Rule)])
              | RuleStructureField.ListWithSeparator  as x => (<[ N2.Runtime.Reflection.RuleInfo.ListWithSeparator ]>, [structReflect(x.Rule), structReflect(x.Separator)])
              | RuleStructureField.Option             as x => (<[ N2.Runtime.Reflection.RuleInfo.Option            ]>, [structReflect(x.Rule)])
              | RuleStructureField.SimpleCall         as x => (<[ N2.Runtime.Reflection.RuleInfo.SimpleCall        ]>, [<[ $(MakeParserName(x.Symbol) : global).RuleId ]>, <[ $(x.Symbol.IsToken : bool) ]>])
              | RuleStructureField.ExtensibleCall     as x => (<[ N2.Runtime.Reflection.RuleInfo.ExtensibleCall    ]>, [<[ $(MakeParserName(x.Symbol, x.BindingPower) : global).PrefixId ]>, <[ $(MakeParserName(x.Symbol, x.BindingPower) : global).PostfixId ]>, <[ $(x.Symbol.IsToken : bool) ]>])
              | RuleStructureField.TokenCall               => (<[ N2.Runtime.Reflection.RuleInfo.TokenCall         ]>, [])
              | RuleStructureField.TokenString             => (<[ N2.Runtime.Reflection.RuleInfo.TokenString       ]>, [])
              | RuleStructureField.Marker(sym)             => (<[ N2.Runtime.Reflection.RuleInfo.Marker            ]>, [<[ $(sym.FullName : string) ]>])
            };
          def args = [<[ $(field.Offset) ]>, <[ $(field.SrcRule.ToString()) ]>, <[ $(field.State) ]>] + args;
          subrules.Add(<[ $subruleType(..$args) ]>);
        }
        def field = $"reflectionField$(reflectionFields.Count)";
        reflectionFields.Add((field, type));
        reflectionCases.Add(<[case: | _ when ruleId == $(ruleStructure.AstId : global) => $(field : global) ]>);
        <[
          $(field : global) = $type($(ruleStructure.AstId : global), $(ruleStructure.SrcRule.ToString()), System.Collections.ObjectModel.ReadOnlyCollection(array[..$(subrules.NToList())]));
          $(field : global);
        ]>
      }
      def reflection = structReflect(ruleStructure);
      reflectionCases.Add(<[case: | _ => assert(false) ]>);
      foreach (structure in ruleStructure.InternalRuleStructures)
      {
        tb.DefineConditional(<[decl: public mutable $(structure.AstId : global) : int; ]>);
        inits.Add(<[ $(structure.AstId : global) = Grammar.NewRuleId(this); ]>);
      }
      foreach ((field, type) in reflectionFields)
        tb.DefineConditional(<[decl: private mutable $(field : global) : $type ]>);

      tb.DefineConditional(<[decl:
        public override Reflection(ruleId : int) : N2.Runtime.Reflection.RuleStructure
        {
          when ($(reflectionFields[reflectionFields.Count - 1][0] : global) == null)
            _ = $(reflection);

          match (ruleId)
          {
            ..$(reflectionCases.NToList())
          }
        }]>);

      foreach ((ruleSymbol, name) in _simpleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : global) : N2.Internal.SimpleRuleParser; ]>);
        inits.Add(<[ $(name : global) = Grammar.GetSimpleRuleParser($(ruleSymbol.GetRuleDescriptorRef())); ]>);
      }
      foreach ((ruleSymbol, bp, name) in _extensibleCalls)
      {
        tb.DefineConditional(<[decl: private mutable $(name : global) : N2.Internal.ExtensibleRuleParser; ]>);
        inits.Add(<[ $(name : global) = Grammar.GetExtensibleRuleParser($(ruleSymbol.GetRuleDescriptorRef()), $bp); ]>);
      }

      tb.DefineConditional(<[decl:
        public override Init() : void
        {
          ..$(inits.NToList())
        }
      ]>);
    }

    protected DefineParse(tb : TypeBuilder, ruleStructure : RuleStructure.Ast) : void
    {
      ParseMethodEmitter(this, tb, ruleStructure).Emit();
      TryParseMethodEmitter(this, tb, ruleStructure).Emit();
      FindRecoveryPositionMethodEmitter(this, tb, ruleStructure).Emit();
    }

    protected DefineGetNextState(tb : TypeBuilder, ruleStructure : RuleStructure.Ast) : void
    {
      def fields = ruleStructure.AllFields
        .Where(field => !(field is RuleStructureField.Marker))
        .OrderBy(_.State)
        .ToList();
      assert(fields.Select((f, i) => (f.State, i)).All((state, i) => state == i)); // ensure states are sequential starting from 0
      def states = fields.Select(f => if (f.NextSibling != null) <[ $(f.NextSibling.State : int) ]> else  <[ -1 ]>);
      tb.DefineConditional(<[ decl:
        private static _stateMap : array[int] = array[..$states];
      ]>);
      tb.DefineConditional(<[ decl:
        public GetNextState(state : int) : int
        {
          _stateMap[state]
        }
      ]>);
    }

    protected DefineStartState(tb : TypeBuilder, ruleStructure : RuleStructure.Ast) : void
    {
      def startState = ruleStructure.NotMarkerFields[0].State;
      tb.DefineConditional(<[ decl:
        public StartState : int { get $(startState : int) }
      ]>);
    }

    protected DefinePatchAst(tb : TypeBuilder, ruleStructure : RuleStructure.Ast) : void
    {
      PatchAstMethodEmitter(this, tb, ruleStructure).Emit();
    }

    public abstract CreateConstant(name : string, value : int) : string;
  }
}
