using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    public CompileParseList(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
      def counter = ListItemCounter(this, field);
      def listStartPos() { <[ $(CreateVariable($"listStartPos$(field.Level)") : dyn) ]> }
      def ifCounterEqualsToMaxThenContinue()
      {
        if (field.MaxCount is Some(max))
          <[
            when ($(counter.Ref()) == $max)
              $(field.ParserExtention().ContinueParseLabel.Goto());
          ]>
        else
          <[ {} ]>
      }
      def ifCounterLessThanMinThenFail()
      {
        if (field.MinCount > 0)
          <[
            when ($(counter.Ref()) < $(field.MinCount))
              $(field.ParserExtention().FailParseLabel.Goto());
          ]>
        else
          <[ {} ]>
      }

      def firstChild = field.Rule.Fields[0];
      code.Add(<[
        $(field.ParserExtention().ParseLabel.Label());
          _ = $(field.SrcRule.ToString());
          $(AllocateParentAst(field));
          $(counter.Init());
          $(listStartPos()) = $CurTextPos;
          $(field.Rule.ParserExtention().AstStart) = $CurTextPos;
          $(firstChild.ParserExtention().ParseLabel.Goto());

        $(field.Rule.ParserExtention().OkLabel.Label());
          $(counter.Inc());
          $(field.Owner.ParserExtention().AstPtr.Set(field, <[ $CurTextPos - $(listStartPos()) ]>));
          $(ifCounterEqualsToMaxThenContinue());
          $(field.Rule.ParserExtention().AstStart) = $CurTextPos;
          $(firstChild.ParserExtention().ParseLabel.Goto());

        $(field.Rule.ParserExtention().FailLabel.Label());
          $(ifCounterLessThanMinThenFail());
          $CurTextPos = $(field.Rule.ParserExtention().AstStart);
          $(field.Owner.ParserExtention().AstPtr.Set(field, <[ $CurTextPos - $(listStartPos()) ]>));
          $(field.ParserExtention().ContinueParseLabel.Goto());

        $(field.ParserExtention().RecoveryLabel.Label());
          $(counter.Init());
          $(listStartPos()) = $CurTextPos;
          $(field.Rule.ParserExtention().AstStart) = $CurTextPos;
          when (true)
          {
            def listEndPos = $CurTextPos + $(field.Owner.ParserExtention().AstPtr.GetSize(field));
            when ($CurTextPos == listEndPos)
              $(firstChild.ParserExtention().ParseLabel.Goto());
            mutable itemEndPos = $CurTextPos;
            while (itemEndPos != listEndPos)
            {
              $(counter.Inc());
              $CurTextPos = itemEndPos;
              $(field.Rule.ParserExtention().AstPtr.Var) = parser.GetAst($CurTextPos, $(field.Rule.AstId : dyn));
              itemEndPos += parser.AstSize($(field.Rule.ParserExtention().AstPtr.Var), $(field.Rule.SizesStart), $(field.Rule.SizesEnd));
            }
            $(counter.Dec());
            _ = "Мы перед последним элеменом цикла. Начинаем парсить хвост...";
            $(firstChild.ParserExtention().ParseLabel.Goto());
          }
      ]>);
      CompileFields(code, field.Rule.Fields);
    }
  }
}
