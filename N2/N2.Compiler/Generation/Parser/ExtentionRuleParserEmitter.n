using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class ExtentionRuleParserEmitter : RuleParserEmitter
  {
    public Rule : Rule.Sequence { get; }
    private _ruleStructure : RuleStructure.Ast;

    public this(owner : SyntaxModuleEmitter, rs : ExtentionRuleSymbol)
    {
      base(owner, rs);
      Rule = rs.Rule;
      _ruleStructure = rs.Structure;
    }

    [RecordIgnore] private mutable _parserTb : TypeBuilder;

    public override DefineParser() : void
    {
      assert(_parserTb == null);
      _parserTb = Owner.GrammarImplTB.DefineNestedType(<[decl:
        public class $(RuleSymbol.DecorateRuleClassName() : dyn) : N2.Internal.ExtentionRuleParser
        {
          public this(grammar : N2.CompositeGrammar)
          {
            base(grammar, $(RuleSymbol.GetDescriptorClassRef()).StaticDescriptor, char.MinValue, char.MaxValue);//TODO: Fix me.
          }
        }
      ]>);
      MakeRuleFields(RuleSymbol :> SyntaxRuleSymbol);
    }

    public override DefineParserMethods() : void
    {
      assert(_parserTb != null);
      DefineParse(_parserTb, _ruleStructure);
      DefineInit(_parserTb, _ruleStructure);
    }

    public override Emit() : void
    {
      assert(_parserTb != null);
      _parserTb.Compile();
    }
  }
}
