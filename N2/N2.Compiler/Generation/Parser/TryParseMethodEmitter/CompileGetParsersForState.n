using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public CompileGetParsersForState(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def cases = SCG.List();
      foreach (field in ruleStructure.AllFields)
      {
        | Marker                         => ()
        | ExtensibleCall(SyntaxRuleSymbol(Type=Void), _)
        | SimpleCall(SyntaxRuleSymbol(Type=Void))        => cases.Add(<[ case: | $(field.State) => EmptyArray ]>);//TODO: А это точно нужно пропускать?
        | ExtensibleCall(ruleSymbol, bp) => cases.Add(<[ case: | $(field.State) => array[$(Owner.MakeParserName(ruleSymbol, bp) : usesite) : N2.Internal.IRecoveryRuleParser] ]>);
        | SimpleCall(ruleSymbol)         => cases.Add(<[ case: | $(field.State) => array[$(Owner.MakeParserName(ruleSymbol) : usesite) :> N2.Internal.IRecoveryRuleParser] ]>);
        | _                              => cases.Add(<[ case: | $(field.State) => EmptyArray ]>);
      }
      cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);

      <[ match (startState) { ..$cases }]>
    }
  }
}
