using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public CompileAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def makeContinueStateSelector() : PExpr
      {
        def continueCases = SCG.List();
        foreach (field in ruleStructure.AllNonMarkerFields)
        {
          def getContinueStateCode(field : RuleStructureField) : PExpr
          {
            def initList()//TODO: Fix counters
            {
              <[
                assert3(frame.Parents.Count == 1);
                def parent = frame.Parents.First();
                $(ListStartPos(field)) = parent.TextPos;
                $(ListEndPos(field))   = frame.TextPos;
              ]>
            }
            match (field.Owner)
            {
              | List =>
                <[
                  $(initList());
                  $(GotoParseLabel((field.Owner.Owner :> RuleStructureField.List).Rule.NotMarkerFields[0]));
                ]>;
              | ListWithSeparatorRule =>
                <[
                  $(initList());
                  $(GotoParseLabel((field.Owner.Owner :> RuleStructureField.ListWithSeparator).Separator.NotMarkerFields[0]))
                ]>;
              | ListWithSeparatorSeparator =>
                <[
                  $(initList());
                  $(GotoParseLabel((field.Owner.Owner :> RuleStructureField.ListWithSeparator).Rule.NotMarkerFields[0]))
                ]>;
              | _ => <[ $(_endLabel.Goto()) ]>;
            }
          }
          def sourceStateComment = field.ToString();
          match (field)
          {
            | _ when field.IsPredicate =>
              continueCases.Add(<[ case: | $(field.State) => assert(false, $($"Cannot continue parse from predicate state: '$sourceStateComment'.")) ]>);
            | RuleStructureField(Owner=RuleStructure(Owner=RuleStructureField.List as lst)) when lst.IsSkipAnyPattern =>
              continueCases.Add(<[ case: | $(field.State) => assert(false, $($"Cannot parse from optimized loop state: '$sourceStateComment'.")) ]>);
            | _ =>
              def code = getContinueStateCode(field);
              continueCases.Add(<[ case: | $(field.State) => _ = $sourceStateComment; startLevel = $(field.Level); $code; ]>);
          }
        }
        continueCases.Add(<[ case: | x => assert(false, $"Unknown continue parse state '$x'.") ]>);
        <[ assert(continueList); match (frame.FailState) { ..$continueCases } ]>
      }

      def makeStartStateSelector() : PExpr
      {
        def startCases = SCG.List();
        startCases.Add(<[ case: | -1 => $(makeContinueStateSelector()) ]>);
        foreach (field in ruleStructure.AllNonMarkerFields)
        {
          def comment = field.ToString();
          match (field)
          {
            | _ when field.IsPredicate =>
              startCases.Add(<[ case: | $(field.State) => assert(false, $($"Cannot parse from predicate state: '$comment'.")) ]>);
            | RuleStructureField(Owner=RuleStructure(Owner=RuleStructureField.List as lst)) when lst.IsSkipAnyPattern =>
              startCases.Add(<[ case: | $(field.State) => assert(false, $($"Cannot parse from optimized loop state: '$comment'.")) ]>);
            | _ =>
              startCases.Add(<[ case: | $(field.State) => _ = $comment; startLevel = $(field.Level); $(GotoParseLabel(field)) ]>);
          }
        }
        startCases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);
        <[ match (startState) { ..$startCases } ]>
      }

      def code = SCG.List();
      code.Add(<[ ignore(curTextPos, parser); ]>);
      code.Add(<[ _ = $(ruleStructure.ToString()) ]>);
      code.Add(makeStartStateSelector());

      //parse ok
      code.Add(OkLabel(ruleStructure));
      code.Add(_endLabel.Goto());

      //parse fail
      code.Add(FailLabel(ruleStructure));
      code.Add(<[ $CurTextPos = -1; ]>);
      code.Add(_endLabel.Goto());

      CompileFields(code, ruleStructure);

      code.Add(_endLabel.Label());
      code.Add(<[ $CurTextPos; ]>);

      def codeWithVariables = SCG.List();
      codeWithVariables.Add(<[
        def     targetState : int = frame.FailState; _ = targetState;
        mutable tmpSize     : int; _ = tmpSize;
        mutable newPos      : int; _ = newPos;

      ]>);
      codeWithVariables.AddRange(LocalVariables.Map(name => <[ mutable $(name : global) ]>));
      codeWithVariables.AddRange(code);

      codeWithVariables.FlattenPExpr();
    }
  }
}
