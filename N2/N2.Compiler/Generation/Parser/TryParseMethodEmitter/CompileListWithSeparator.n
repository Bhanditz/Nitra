using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void
    {
      def hangingSeparatorCode = if (field.HangingSeparator)
        <[ $(ListEndPos(field)) = $CurTextPos; ]>
      else
        <[ {} ]>;

      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));

      def firstRuleChild = field.Rule.NotMarkerFields[0];
      def firstSeparatorChild = field.Separator.NotMarkerFields[0];
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.ToString());
          $headPredicateCode;
          $(ListStartPos(field)) = $CurTextPos;
          $(ListEndPos(field))   = $CurTextPos;
          $(GotoParseLabel(firstRuleChild));

        $(OkLabel(field.Rule));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          $(ListEndPos(field)) = $CurTextPos;
          $(GotoParseLabel(firstSeparatorChild));

        $(FailLabel(field.Rule));
          if ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          else
          {
            $CurTextPos = $(ListEndPos(field));
            $(AddParsedStateInfo(field, <[ $(ListEndPos(field)) - $(ListStartPos(field)) ]>));
            $(GotoContinueParseLabel(field));
          }

        $(OkLabel(field.Separator));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          $hangingSeparatorCode;
          $(GotoParseLabel(firstRuleChild));

        $(FailLabel(field.Separator));
          if ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          else
          {
            $CurTextPos = $(ListEndPos(field));
            $(AddParsedStateInfo(field, <[ $(ListEndPos(field)) - $(ListStartPos(field)) ]>));
            $(GotoContinueParseLabel(field));
          }
      ]>);
    }
  }
}
