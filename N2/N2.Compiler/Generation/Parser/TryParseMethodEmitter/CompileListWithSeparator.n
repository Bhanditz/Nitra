using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void
    {
      //def counter = ListItemCounter(this, field);
      def hangingSeparatorCode = if (field.HangingSeparator)
        <[ $(ListEndPos(field)) = $CurTextPos; ]>
      else
        <[ {} ]>;

      def firstRuleChild = field.Rule.NotMarkerFields[0];
      def firstSeparatorChild = field.Separator.NotMarkerFields[0];
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.SrcRule.ToString());
          //$(counter.Init());
          $(ListEndPos(field)) = $CurTextPos;
          $(GotoParseLabel(firstRuleChild));

        $(OkLabel(field.Rule));
          //$(counter.Inc());
          $(ListEndPos(field)) = $CurTextPos;
          //$(ifCounterEqualsToMaxThenContinue());
          $(GotoParseLabel(firstSeparatorChild));

        $(FailLabel(field.Rule));
          //$(ifCounterLessThanMinThenFail());
          when ($(ListEndPos(field)) > 0)
            $CurTextPos = $(ListEndPos(field));
          $(GotoContinueParseLabel(field));

        $(OkLabel(field.Separator));
          $hangingSeparatorCode;
          $(GotoParseLabel(firstRuleChild));

        $(FailLabel(field.Separator));
          //$(ifCounterLessThanMinThenFail());
          when ($(ListEndPos(field)) > 0)
            $CurTextPos = $(ListEndPos(field));
          $(GotoContinueParseLabel(field));
      ]>);
    }
  }
}
