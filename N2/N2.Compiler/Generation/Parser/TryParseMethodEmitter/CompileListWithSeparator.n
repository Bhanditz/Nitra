using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void
    {
      //def counter = ListItemCounter(this, field);
      def listStartPos() { <[ $(CreateVariable($"listStartPos$(field.Level)") : dyn) ]> }
      def listEndPos  () { <[ $(CreateVariable($"listEndPos$(field.Level)") : dyn) ]> }
      //def ifCounterEqualsToMaxThenContinue()
      //{
      //  if (field.MaxCount is Some(max))
      //    <[
      //      when ($(counter.Ref()) == $max)
      //        $(field.ParserExtention().ContinueParseLabel.Goto());
      //    ]>
      //  else
      //    <[ {} ]>
      //}
      //def ifCounterLessThanMinThenFail()
      //{
      //  if (field.MinCount > 0)
      //    <[
      //      when ($(counter.Ref()) < $(field.MinCount))
      //        $(field.ParserExtention().FailParseLabel.Goto());
      //    ]>
      //  else
      //    <[ {} ]>
      //}
      def hangingSeparatorCode = if (field.HangingSeparator)
        <[ $(listEndPos()) = $CurTextPos; ]>
      else
        <[ {} ]>;

      def firstRuleChild = field.Rule.Fields[0];
      def firstSeparatorChild = field.Separator.Fields[0];
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.SrcRule.ToString());
          //$(counter.Init());
          $(listStartPos()) = $CurTextPos;
          $(listEndPos()) = $CurTextPos;
          $(AstStart(field.Rule)) = $CurTextPos;
          $(GotoParseLabel(firstRuleChild));

        $(OkLabel(field.Rule));
          //$(counter.Inc());
          $(listEndPos()) = $CurTextPos;
          //$(ifCounterEqualsToMaxThenContinue());
          $(AstStart(field.Separator)) = $CurTextPos;
          $(GotoParseLabel(firstSeparatorChild));

        $(FailLabel(field.Rule));
          //$(ifCounterLessThanMinThenFail());
          $CurTextPos = $(listEndPos());
          $(GotoContinueParseLabel(field));

        $(OkLabel(field.Separator));
          $hangingSeparatorCode;
          $(AstStart(field.Rule)) = $CurTextPos;
          $(GotoParseLabel(firstRuleChild));

        $(FailLabel(field.Separator));
          //$(ifCounterLessThanMinThenFail());
          $CurTextPos = $(listEndPos());
          $(GotoContinueParseLabel(field));
      ]>);
    }
  }
}
