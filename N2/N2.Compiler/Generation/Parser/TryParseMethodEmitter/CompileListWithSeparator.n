using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void
    {
      def hangingSeparatorCode = if (field.HangingSeparator)
        <[ $(ListEndPos(field)) = $CurTextPos; ]>
      else
        <[ {} ]>;

      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));
      def tailRulePredicateCode = CompilePredicate(field.Rule.TailPredicates, GotoFailLabel(field.Rule));
      def tailSeparatorPredicateCode = CompilePredicate(field.Separator.TailPredicates, GotoFailLabel(field.Separator));

      def firstRuleChild = field.Rule.NotMarkerFields[0];
      def firstSeparatorChild = field.Separator.NotMarkerFields[0];
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.SrcRule.ToString());
          $headPredicateCode;
          $(ListEndPos(field)) = $CurTextPos;
          $(GotoParseLabel(firstRuleChild));

        $(OkLabel(field.Rule));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          $tailRulePredicateCode;
          $(ListEndPos(field)) = $CurTextPos;
          $(GotoParseLabel(firstSeparatorChild));

        $(FailLabel(field.Rule));
          when ($(ListEndPos(field)) > 0)
            $CurTextPos = $(ListEndPos(field));
          if ($(EndOfFieldLevel(field)))
          {
            $CurTextPos = -1;
            $(_endLabel.Goto());
          }
          else
            $(GotoContinueParseLabel(field));

        $(OkLabel(field.Separator));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          $tailSeparatorPredicateCode;
          $hangingSeparatorCode;
          $(GotoParseLabel(firstRuleChild));

        $(FailLabel(field.Separator));
          when ($(ListEndPos(field)) > 0)
            $CurTextPos = $(ListEndPos(field));
          if ($(EndOfFieldLevel(field)))
          {
            $CurTextPos = -1;
            $(_endLabel.Goto());
          }
          else
            $(GotoContinueParseLabel(field));
      ]>);
    }
  }
}
