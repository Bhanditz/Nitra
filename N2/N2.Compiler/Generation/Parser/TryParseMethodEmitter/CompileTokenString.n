using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileTokenString(code : SCG.List[PExpr], field : RuleStructureField.TokenString) : void
    {
      def astSize = field.String.Length;
      def makeStringCheckCode(str : string) : PExpr
      {
        if (str == "")
          <[ true ]>
        else
        {
          def check = if (astSize > 1) <[$CurTextPos + $((astSize - 1) : int)]> else <[ $CurTextPos ]>;

          def makeCharCheckCode(ch : char, i : int) : PExpr
          {
            def index = if (i <= 0) <[ $CurTextPos ]> else <[ $CurTextPos + $(i : int) ]>;
            <[ text[$index] == $(ch : char) ]>
          }
          def exprs = str.Select(makeCharCheckCode);
          def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);
          <[ $check < text.Length && $condExpr ]>
        }
      }
      
      def checkCode = makeStringCheckCode(field.String);
      def predicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.ToString());
          $predicateCode;
          if ($checkCode)
          {
            $(AddParsedStateInfo(field, <[ $astSize ]>));
            $CurTextPos += $astSize;
            $(GotoContinueParseLabel(field));
          }
          else
          {
            $(RecoveryCode());
            $(GotoFailParseLabel(field));
          }
      ]>);
    }
  }
}
