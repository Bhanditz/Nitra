using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileList(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
      def counter = ListItemCounter(this, field);
      //def ifCounterEqualsToMaxThenContinue()
      //{
      //  if (field.MaxCount is Some(max))
      //    <[
      //      when ($(counter.Ref()) == $max)
      //        $(field.ParserExtention().ContinueParseLabel.Goto());
      //    ]>
      //  else
      //    <[ {} ]>
      //}
      //def ifCounterLessThanMinThenFail()
      //{
      //  if (field.MinCount > 0)
      //    <[
      //      when ($(counter.Ref()) < $(field.MinCount))
      //        $(field.ParserExtention().FailParseLabel.Goto());
      //    ]>
      //  else
      //    <[ {} ]>
      //}

      def firstChild = field.Rule.Fields[0];
      code.Add(<[
        $(field.ParserExtention().ParseLabel.Label());
          _ = $(field.SrcRule.ToString());
          $(counter.Init());
          $(field.Rule.ParserExtention().AstStart) = $CurTextPos;
          $(firstChild.ParserExtention().ParseLabel.Goto());

        $(field.Rule.ParserExtention().OkLabel.Label());
          $(counter.Inc());
          //$(ifCounterEqualsToMaxThenContinue());
          $(field.Rule.ParserExtention().AstStart) = $CurTextPos;
          $(firstChild.ParserExtention().ParseLabel.Goto());

        $(field.Rule.ParserExtention().FailLabel.Label());
          //$(ifCounterLessThanMinThenFail());
          $CurTextPos = $(field.Rule.ParserExtention().AstStart);
          $(field.ParserExtention().ContinueParseLabel.Goto());
      ]>);
    }
  }
}
