using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public CompileSkipAny(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
      assert3(field.Rule.Fields.Length == 1);
      
      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));
      def firstChild        = field.Rule.NotMarkerFields[0];
      def fail              = PExprLabel(this.Environment.Manager, "childFail");
      def childPredicateCode = CompilePredicate(firstChild.HeadPredicates, fail.Goto());
      
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.ToString());
          $headPredicateCode;
          while ($(CurTextPos) < text.Length)
          {
            $childPredicateCode;
            ++ $(CurTextPos);
          }
          $(fail.Label());
          $(GotoContinueParseLabel(field));
      ]>);
    }

    public override CompileList(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
      when (field.IsSkipAnyPattern)
      {
        CompileSkipAny(code, field);
        return;
      }

      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));

      def firstChild = field.Rule.NotMarkerFields[0];
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.ToString());
          $headPredicateCode;
          $(ListStartPos(field)) = $CurTextPos;
          $(ListEndPos(field))   = $CurTextPos;
          $(GotoParseLabel(firstChild));

        $(OkLabel(field.Rule));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          when ($(ListEndPos(field)) == $CurTextPos)
            $(GotoContinueParseLabel(field));
          $(ListEndPos(field)) = $CurTextPos;

          $(GotoParseLabel(firstChild));

        $(FailLabel(field.Rule));
          if ($(EndOfFieldLevel(field)))//TODO: Fix counter invariants
          {
            $CurTextPos = -1;
            $(_endLabel.Goto());
          }
          else
          {
            $CurTextPos = $(ListEndPos(field));
            $(AddParsedStateInfo(field, <[ $(ListEndPos(field)) - $(ListStartPos(field)) ]>));
            $(GotoContinueParseLabel(field));
          }
      ]>);
    }
  }
}
