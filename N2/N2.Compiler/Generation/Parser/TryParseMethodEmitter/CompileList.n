using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileList(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));
      def tailPredicateCode = CompilePredicate(field.Rule.TailPredicates, GotoFailLabel(field.Rule));

      def firstChild = field.Rule.NotMarkerFields[0];
      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.SrcRule.ToString());
          $headPredicateCode;
          $(GotoParseLabel(firstChild));

        $(OkLabel(field.Rule));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          $tailPredicateCode;
          $(GotoParseLabel(firstChild));

        $(FailLabel(field.Rule));
          if ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          else
            $(GotoContinueParseLabel(field));
      ]>);
    }
  }
}
