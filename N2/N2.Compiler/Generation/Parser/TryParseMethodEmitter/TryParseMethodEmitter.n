using N2.Typing;
using N2.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment : EmitterEnvironment { get { Owner.Environment } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner         = owner;
      _tb           = tb;
      RuleStructure = ruleStructure;
      _data         = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
    }

    public Emit() : void
    {
      _tb.DefineConditional(<[decl:
        public override TryParse(astPtr : int, mutable curTextPos : int, text : string, parser : ref N2.Internal.Parser, startState : int) : int
        {
          $(if (Environment.IsIdeMode)
            <[ ignore(astPtr, curTextPos, text, parser, startState); -1 ]>
          else
            CompileAst(RuleStructure))
        }
      ]>);
      _tb.DefineConditional(<[decl:
        public override GetParsersForState(startState : int) : array[N2.Internal.IRecoveryRuleParser]
        {
          $(if (Environment.IsIdeMode)
            <[ ignore(startState); null ]>
          else
            CompileGetParsersForState(RuleStructure))
        }
      ]>);
      _tb.DefineConditional(<[decl: public StatesCount    : int    { get { $(RuleStructure.StateCount) } } ]>);
      _tb.DefineConditional(<[decl: public Code           : string { get { $(RuleStructure.SrcRule.ToString()) } } ]>);
      _tb.DefineConditional(<[decl: public CodeWithStates : string { get { $(RuleStructure.ToString()) } } ]>);
      _tb.DefineConditional(<[decl: public RuleName       : string { get { $(RuleStructure.Symbol.Name) } } ]>);

      _tb.DefineConditional(<[decl: private static EmptyArray : array[N2.Internal.IRecoveryRuleParser] = array(0) ]>);
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }
  }
}
