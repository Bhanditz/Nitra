using N2.Typing;
using N2.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment : EmitterEnvironment { get { Owner.Environment } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner                       = owner;
      _tb                         = tb;
      RuleStructure               = ruleStructure;
      _ruleStructureDataContainer = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
    }

    public Emit() : void
    {
      _tb.DefineConditional(<[decl:
        public override TryParse(astPtr : int, curTextPos : int, text : string, parser : ref N2.Internal.Parser, startState : int) : int
        {
          $(if (Environment.IsIdeMode)
            <[ _ = curTextPos; _ = text; _ = parser; _ = startState; -1 ]>
          else
            CompileAst(RuleStructure))
        }
      ]>);
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }
  }
}
