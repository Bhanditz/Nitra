using N2.Typing;
using N2.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public           Owner         : RuleParserEmitter { get; }
    public           RuleStructure : RuleStructure.Ast;
    private          _tb           : TypeBuilder;
    private          _endLabel     : PExprLabel;
    public  override Environment   : EmitterEnvironment { get { Owner.Environment } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner         = owner;
      _tb           = tb;
      RuleStructure = ruleStructure;
      _data         = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
      _endLabel     = Environment.MakeLabel("EndParse");
    }

    public Emit() : void
    {
      _tb.DefineConditional(<[decl:
        public override TryParse(stackFrame : N2.Internal.RecoveryStackFrame, startState : int, mutable curTextPos : int, parser : N2.Internal.Parser) : int
        {
          def text = parser.Text;
          mutable startLevel;
          $(if (Environment.IsIdeMode)
            <[ ignore(stackFrame, startState, curTextPos, parser, text, startLevel); -1 ]>
          else
            CompileAst(RuleStructure))
        }
      ]>);
      _tb.DefineConditional(<[decl:
        public override GetParsersForState(startState : int) : array[N2.Internal.IRecoveryRuleParser]
        {
          $(if (Environment.IsIdeMode)
            <[ ignore(startState); null ]>
          else
            CompileGetParsersForState(RuleStructure))
        }
      ]>);
      _tb.DefineConditional(<[decl: public StatesCount    : int    { get { $(RuleStructure.StateCount) } } ]>);
      _tb.DefineConditional(<[decl: public Code           : string { get { $(RuleStructure.SrcRule.ToString()) } } ]>);
      _tb.DefineConditional(<[decl: public RuleName       : string { get { $(RuleStructure.Symbol.Name) } } ]>);
      _tb.DefineConditional(<[decl: public CodeWithStates : string { get { $(RuleStructure.ToString()) } } ]>);
      _tb.DefineConditional(<[decl: public CodeForState(state : int) : string { $(CompileCodeForState(RuleStructure)) } ]>);

      _tb.DefineConditional(<[decl: private static EmptyArray : array[N2.Internal.IRecoveryRuleParser] = array(0) ]>);
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    CompileCodeForState(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def nextField(field : RuleStructureField) : RuleStructureField
      {
        if (field == null)
          null
        else if (field.NextSibling != null)
          field.NextSibling
        else
          nextField(field.Owner.Owner)
      }

      def code = SCG.List();
      
      for (mutable i = 0; i < ruleStructure.StateCount; i++)
      {
        mutable str = ruleStructure.CodeForState(i);
        def field = ruleStructure.AllNonMarkerFields[i];
        when (field.IsLoopSeparatorStart)
        {
          def afterLoopField = nextField(field);
          
          when (afterLoopField != null)
            str += ", " + ruleStructure.CodeForState(afterLoopField.State);
        }
        code.Add(<[ case: | $i => $str ]>);
      }
        
      code.Add(<[ case: | _ => assert2(false); assert(false);  ]>);
      
      <[
        match (state)
        {
          ..$code
        }
      ]>
    }

    EndOfFieldLevel(field : RuleStructureField) : PExpr
    {
      <[ startLevel > $(field.Level) ]>
    }
  }
}
