using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public MakeSimpleRuleCall(ruleSymbol : SimpleRuleSymbol, curTextPos : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol) : dyn).FindRecoveryPosition($curTextPos, parser) ]>
    }

    public MakeExtensibleRuleCall(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int, curTextPos : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol, bindingPower) : dyn).FindRecoveryPosition($curTextPos, parser) ]>
    }

    public override CompileExtensibleCall(code : SCG.List[PExpr], field : RuleStructureField.ExtensibleCall) : void
    {
      CompileCallImpl(code, MakeExtensibleRuleCall(field.Symbol, field.BindingPower, CurTextPos), field)
    }

    public override CompileSimpleCall(code : SCG.List[PExpr], field : RuleStructureField.SimpleCall) : void
    {
      CompileCallImpl(code, MakeSimpleRuleCall(field.Symbol, CurTextPos), field)
    }

    public CompileCallImpl(code : SCG.List[PExpr], call : PExpr, field : RuleStructureField) : void
    {
      code.Add(CheckState(field, <[
        $(RecoveryStackFramePush(field));
        when (parser.MaxFailPos == curTextPos)
          parser.StartRecovery(curTextPos);
        $call;
        $(RecoveryStackFramePop());
      ]>))
    }
  }
}
