using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    private CompileToken(field : RuleStructureField) : PExpr
    {
      CheckState(field, <[
        when (parser.MaxFailPos == $CurTextPos)
        {
          def stack = $(MakeRecoveryStackFrame(field, CurTextPos));
          when (stack != null)
            parser.RecoveryStacks.Add(stack);
        }
      ]>)
    }

    public override CompileTokenString(code : SCG.List[PExpr], field : RuleStructureField.TokenString) : void
    {
      code.Add(CompileToken(field))
    }

    public override CompileTokenCall(code : SCG.List[PExpr], field : RuleStructureField.TokenCall) : void
    {
      code.Add(CompileToken(field))
    }
  }
}
