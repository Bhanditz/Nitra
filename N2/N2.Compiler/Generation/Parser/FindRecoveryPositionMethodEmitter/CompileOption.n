using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public override CompileOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void
    {
      code.Add(<[
      $(ParseLabel(field));
        _ = $(field.SrcRule.ToString());
        $(AstStart(field.Rule)) = $CurTextPos;
        $(GotoParseLabel(field.Rule.NotMarkerFields[0]));

      $(OkLabel(field.Rule));
        $(GotoContinueParseLabel(field));

      $(FailLabel(field.Rule));
        $CurTextPos = $(AstStart(field.Rule));
        $(GotoContinueParseLabel(field));

      $(RecoveryLabel(field));
        when ($(AstPtr(field.Owner).GetSize(field)) > 0)
          $(AstPtr(field.Rule).Var) = parser.GetAst($CurTextPos, $(field.Rule.AstId : dyn));
        $(GotoParseLabel(field.Rule.NotMarkerFields[0]));
      ]>);
    }
  }
}
