using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public override CompilePredicate(code : SCG.List[PExpr], field : RuleStructureField.Predicate) : void
    {
      def save = <[ _ = $(field.SrcRule.ToString()); $(AstStart(field.Rule)) = $CurTextPos; ]>;
      def load = <[ $CurTextPos = $(AstStart(field.Rule)); ]>;
      code.Add(
        if (field.IsAnd)
        <[
          $(ParseLabel(field));     $save; $(GotoParseLabel(field.Rule.NotMarkerFields[0]));
          $(OkLabel(field.Rule));   $load; $(GotoContinueParseLabel(field));
          $(FailLabel(field.Rule)); $load; $(GotoFailParseLabel(field));
        ]>
        else
        <[
          $(ParseLabel(field));     $save; $(GotoParseLabel(field.Rule.NotMarkerFields[0]));
          $(OkLabel(field.Rule));   $load; $(GotoFailParseLabel(field));
          $(FailLabel(field.Rule)); $load; $(GotoContinueParseLabel(field));
        ]>);
      code.Add(<[
        $(RecoveryLabel(field));
          $(GotoContinueParseLabel(field));
      ]>);
    }
  }
}
