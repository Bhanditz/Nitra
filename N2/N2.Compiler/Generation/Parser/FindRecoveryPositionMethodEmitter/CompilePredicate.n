using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public override CompilePredicate(code : SCG.List[PExpr], field : RuleStructureField.Predicate) : void
    {
      def save = <[ _ = $(field.SrcRule.ToString()); $(Data(field.Rule).AstStart) = $CurTextPos; ]>;
      def load = <[ $CurTextPos = $(Data(field.Rule).AstStart); ]>;
      code.Add(
        if (field.IsAnd)
        <[
          $(Data(field).ParseLabel.Label());     $save; $(Data(field.Rule.Fields[0]).ParseLabel.Goto());
          $(Data(field.Rule).OkLabel.Label());   $load; $(Data(field).ContinueParseLabel.Goto());
          $(Data(field.Rule).FailLabel.Label()); $load; $(Data(field).FailParseLabel.Goto());
        ]>
        else
        <[
          $(Data(field).ParseLabel.Label());     $save; $(Data(field.Rule.Fields[0]).ParseLabel.Goto());
          $(Data(field.Rule).OkLabel.Label());   $load; $(Data(field).FailParseLabel.Goto());
          $(Data(field.Rule).FailLabel.Label()); $load; $(Data(field).ContinueParseLabel.Goto());
        ]>);
      code.Add(<[
        $(Data(field).RecoveryLabel.Label());
          throw System.NotImplementedException("Recovery not implemented.");
      ]>);
    }
  }
}
