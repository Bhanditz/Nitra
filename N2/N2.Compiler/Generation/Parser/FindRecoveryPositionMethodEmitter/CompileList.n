using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public override CompileList(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
      CompileFuntion(field.Rule);
      def localVariableEmitter = LocalVariableEmitter();
      def stateData = ListStateData(localVariableEmitter, field);
      def itemPtr = AstPointer.New(field.Rule, ConstantEmitter, this, "itemPtr");
      def body = <[
        $(stateData.Init());
        $(stateData.FrameInfo) = N2.Internal.FrameInfo.LoopBody;
        $(stateData.ListStartPos) = $CurTextPos;
        mutable lastItemStart = -1;
        mutable itemEndPos = $CurTextPos;
        while (lastItemStart < itemEndPos)
        {
          $(stateData.Inc());
          def $(itemPtr.Var) = parser.TryGetAst(itemEndPos, $(field.Rule.AstId : global));
          if ($(itemPtr.Var) > 0 && $(itemPtr.Get(itemPtr.Structure.HeaderState)) == N2.Internal.Parser.AstParsedState)
          {
            lastItemStart = itemEndPos;
            itemEndPos += parser.AstSize($(itemPtr.Var), $(field.Rule.SizesStart), $(field.Rule.SizesEnd));
          }
          else
          {
            when (lastItemStart >= 0)
            {
              $(stateData.Dec());
              $(stateData.ListEndPos) = lastItemStart;
              $(FunctionName(field.Rule) : global)(lastItemStart, $(MakeRecoveryStackFrame(field)) :: stack, parser);
              $(stateData.Inc());
            }
            $(stateData.ListEndPos) = itemEndPos;
            $(FunctionName(field.Rule) : global)(itemEndPos, $(MakeRecoveryStackFrame(field)) :: stack, parser);
            break;
          }
        }
      ]>;
      code.Add(CheckState(field, <[
        ..$(localVariableEmitter.Define());
        $body;
      ]>))
    }
  }
}
