using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment     : EmitterEnvironment { get { Owner.Environment } }
    public override ConstantEmitter : IConstantEmitter   { get { Owner } }
    private EndLabel : PExprLabel;

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner                       = owner;
      _tb                         = tb;
      RuleStructure               = ruleStructure;
      _data                       = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
      EndLabel                    = Environment.MakeLabel("EndParse");
    }

    public Emit() : void
    {
      CompileFuntion(RuleStructure)
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    public MakeRecoveryStackFrameList(field : RuleStructureField, isBody : bool) : PExpr
    {
      def frameInfo = if (isBody) <[ N2.Internal.FrameInfo.LoopBody ]> else <[ N2.Internal.FrameInfo.LoopSeparator ]>;
      def (counter, listStartPos, listEndPos) =
        match (field)
        {
          | List              as field when field.UseCounter => def data = ListStateData(this, field); (data.Counter, data.ListStartPos, data.ListEndPos)
          | ListWithSeparator as field when field.UseCounter => def data = ListStateData(this, field); (data.Counter, data.ListStartPos, data.ListEndPos)
          | List              as field                       => def data = ListStateData(this, field); (<[ 0 ]>,      data.ListStartPos, data.ListEndPos)
          | ListWithSeparator as field                       => def data = ListStateData(this, field); (<[ 0 ]>,      data.ListStartPos, data.ListEndPos)
          | _                                                => assert(false);
        };
      <[ parser.ListRecoveryStackFrame(stack, astHandle, $(field.State), $counter, $listStartPos, $listEndPos, $frameInfo); ]>
    }

    public MakeRecoveryStackFrame(field : RuleStructureField) : PExpr
    {
      match (field)
      {
        | List | ListWithSeparator => assert(false);
        | _                        => ()
      };
      <[ parser.NormalRecoveryStackFrame(stack, astHandle, $(field.State)); ]>
    }
  }
}
