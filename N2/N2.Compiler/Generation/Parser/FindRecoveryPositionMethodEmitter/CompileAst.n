using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public CompileAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      def (saveIgnoreRecovery, loadIgnoreRecovery) = if (ruleStructure.Symbol.Type is RuleType.Void)
      {
        (<[ $(CreateVariable("ignoreRecovery") : dyn) = parser.IgnoreRecovery; parser.IgnoreRecovery = true; ]>,
        <[ parser.IgnoreRecovery = $(CreateVariable("ignoreRecovery") : dyn) ]>)
      }
      else
      {
        (<[ {} ]>, <[ {} ]>)
      }

      code.Add(<[ _ = $(ruleStructure.SrcRule.ToString()) ]>);
      code.Add(saveIgnoreRecovery);
      if (ruleStructure.Symbol is SimpleRuleSymbol)
        code.Add(<[
          $(AstPtr(ruleStructure).Var) = parser.TryGetAst($CurTextPos, RuleId);
          if ($(AstPtr(ruleStructure).Var) > 0)
            parseState = parser.ast[$(AstPtr(ruleStructure).Var) + 2];
          else
            parseState = 0;
        ]>)
      else
        code.Add(<[
          $(AstPtr(ruleStructure).Var) = astPtr;
          parseState = parser.ast[astPtr + 2];
        ]>);

      code.Add(<[
        when (parseState == $(~int.MaxValue))
          parseState = $(ruleStructure.NotMarkerFields.Last().State)
      ]>);
      foreach (field in ruleStructure.NotMarkerFields)
      {
        when (field.NextSibling != null)
        {
          def skip = if (field is RuleStructureField.Predicate)
            <[ assert(false) ]>;
          else
            <[ $CurTextPos += $(AstPtr(field.Owner).GetSize(field)) ]>;
          code.Add(<[
            if (parseState >= $(field.NextSibling.EndState))
              $skip;
            else
              $(GotoRecoveryLabel(field))
          ]>);
        }
      }
      code.Add(GotoRecoveryLabel(ruleStructure.NotMarkerFields.Last()));

      //parse ok
      code.Add(<[ $(OkLabel(ruleStructure)); ]>);
      code.Add(<[ $(EndLabel.Goto()); ]>);

      //parse fail
      code.Add(<[ $(FailLabel(ruleStructure)); ]>);
      code.Add(<[ $(EndLabel.Goto()); ]>);
      CompileFields(code, ruleStructure.Fields);

      code.Add(<[ $(EndLabel.Label()); $loadIgnoreRecovery; $CurTextPos; ]>);

      def variables = SCG.List();
      variables.Add(<[
        mutable parseState : int; _ = parseState;
        mutable newPos     : int; _ = newPos;
      ]>);
      variables.AddRange(LocalVariables.Filter(_ != "resultRef").Map(name => <[ mutable $(name : dyn) ]>));

      variables.Concat(code).FlattenPExpr();
    }
  }
}
