using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public CompileFuntion(structure : RuleStructure) : void
    {
      def body = if (Owner.Environment.IsIdeMode)
        <[ IgnoreParams(); assert(false); ]>
      else
        CompileFuntionBody(structure);
      def function = match (structure)
      {
        | RuleStructure.Ast(Symbol = ExtensionRuleSymbol) =>
          <[decl:
            public override FindRecoveryPosition(mutable curTextPos : int, astPtr : int, stack : N2.Internal.RecoveryStackFrame, parser : N2.Internal.Parser) : void
            {
              $body
            }
          ]>
        | RuleStructure.Ast(Symbol = SimpleRuleSymbol) =>
          <[decl:
            public override FindRecoveryPosition(mutable curTextPos : int, stack : N2.Internal.RecoveryStackFrame, parser : N2.Internal.Parser) : void
            {
              $body
            }
          ]>
        | RuleStructure.Ast => assert3(false)
        | RuleStructure.List                       as structure1 when structure1.UseCounter
        | RuleStructure.ListWithSeparatorRule      as structure2 when structure2.UseCounter
        | RuleStructure.ListWithSeparatorSeparator as structure3 when structure3.UseCounter =>
          <[decl:
            private $(FunctionName(structure) : global)(mutable curTextPos : int, counter : int, stack : N2.Internal.RecoveryStackFrame, parser : N2.Internal.Parser) : void
            {
              $body
            }
          ]>;
        | _ =>
          <[decl:
            private $(FunctionName(structure) : global)(mutable curTextPos : int, stack : N2.Internal.RecoveryStackFrame, parser : N2.Internal.Parser) : void
            {
              $body
            }
          ]>;
      }
      TypeBuilder.DefineConditional(function);
    }

    public CompileFuntionBody(structure : RuleStructure) : PExpr
    {
      def setAstPtr = match (structure)
      {
        | RuleStructure.Ast(Symbol = ExtensionRuleSymbol) =>
          <[
            def $(AstPtr(structure).Var) = astPtr;
            def astHandle = parser.AstHandle_Extension(stack, this, $(AstPtr(structure).Var), $CurTextPos);
          ]>
        | RuleStructure.Ast(Symbol = SimpleRuleSymbol) =>
          <[
            def $(AstPtr(structure).Var) = parser.TryGetAst($CurTextPos, $(structure.AstId : global));
            def astHandle = parser.AstHandle_Simple(this, $(AstPtr(structure).Var), $CurTextPos);
          ]>
        | Option
        | List
        | ListWithSeparatorRule
        | ListWithSeparatorSeparator =>
          <[
            def $(AstPtr(structure).Var) = parser.TryGetAst($CurTextPos, $(structure.AstId : global));
            def astHandle = parser.AstHandle_Subrule(this, $(structure.AstId : global), $(AstPtr(structure).Var), $CurTextPos);
          ]>
        | RuleStructure.Ast => assert(false);
        | RuleStructure.Predicate => assert(false);
      }

      def fieldsCode = SCG.List();
      CompileFieldsNoneRecursive(fieldsCode, structure);
      def failFields = structure.NonMarkerFields.Skip(1).NToList();
      def endSelect = Environment.MakeLabel("EndSelect");
      def selectFailFieldMatch =
        [<[case: | $(structure.NonMarkerFields.First().State) => startState = $(structure.NonMarkerFields.First().State); $(endSelect.Goto());]>] +
        failFields.Map(field => <[case: | $(field.State) => $(GotoSelectStartStateLabel(field.PrevSibling))]>) +
        [<[case: | _ => assert3(false) ]>];
      def selectFailField = failFields.Reverse().Map(_.PrevSibling).Map(field => <[ $(SelectStartStateLabel(field)); startState = $(field.State); when ($(AstPtr(structure).GetRaw(field)) != 0) $(endSelect.Goto()); ]>);
      <[
        _ = $(structure.ToString());
        $setAstPtr;

        mutable startState;
        mutable parseState;
        if ($(AstPtr(structure).Var) > 0)
        {
          parseState = $(AstPtr(structure).Get(structure.HeaderState))
        }
        else
        {
          parseState = $(structure.NonMarkerFields.First().State);
          startState = $(structure.NonMarkerFields.First().State);
          $(endSelect.Goto());
        }

        when (parseState == N2.Internal.Parser.AstParsedState)
          parseState = $(structure.NonMarkerFields.Last().State);
        assert3(parseState >= 0);

        match (parseState)
        {
          ..$selectFailFieldMatch
        }
        ..$selectFailField;
        $(endSelect.Label());

        ret: { $(fieldsCode.FlattenPExpr()) }
      ]>.FlattenPExpr();
    }
  }
}
