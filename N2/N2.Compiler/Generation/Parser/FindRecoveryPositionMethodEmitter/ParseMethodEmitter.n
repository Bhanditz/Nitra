using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment : EmitterEnvironment { get { Owner.Environment } }
    private EndLabel : PExprLabel;

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner                       = owner;
      _tb                         = tb;
      RuleStructure               = ruleStructure;
      _data                       = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
      EndLabel                    = Environment.MakeLabel("EndParse");
    }

    public Emit() : void
    {
      if (RuleStructure.Symbol is ExtentionRuleSymbol)
      {
        _tb.DefineConditional(<[decl:
          public override FindRecoveryPosition(mutable curTextPos : int, text : string, astPtr : int, parser : ref N2.Internal.Parser) : int
          {
            $(if (Owner.Environment.IsIdeMode)
              <[ _ = curTextPos; _ = text; _ = astPtr; _ = parser; -1 ]>
            else
              CompileAst(RuleStructure))
          }
        ]>);
      }
      else
      {
        _tb.DefineConditional(<[decl:
          public override FindRecoveryPosition(mutable curTextPos : int, text : string, parser : ref N2.Internal.Parser) : int
          {
            $(if (Owner.Environment.IsIdeMode)
              <[ _ = curTextPos; _ = text; _ = parser; -1 ]>
            else
              CompileAst(RuleStructure))
          }
        ]>);
      }
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    public RecoveryInfoCode(field : RuleStructureField) : PExpr
    {
      def statesCount = RuleStructure.NotMarkerFields.Last().State + 1;
      def code        = RuleStructure.SrcRule.ToString();
      <[ N2.Internal.RecoveryInfo(this, $(field.State), $statesCount, $(AstPtr(RuleStructure).Var), $code) ]>
    }

    public RecoveryCode(field : RuleStructureField) : PExpr
    {
      <[
        when (parser.MaxTextPos == curTextPos)
        {
          parser.RecoveryStack.Push($(RecoveryInfoCode(field)));
          parser.StartRecovery(curTextPos);
          if (parser.ParsingMode == N2.Internal.ParsingMode.EndRecovery)
            $(EndLabel.Goto());
          else
            _ = parser.RecoveryStack.Pop();
        }
      ]>
    }
  }
}
