using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class ExtentionPrefixRuleParserEmitter : RuleParserEmitter
  {
    public RuleDefinition : RuleDefinition2.ExtentionPrefix { get; }

    public override Emit() : void
    {
      def className = DecorateRuleClassName(RuleDefinition);
      def implClass = <[decl:
        public class $(className : dyn) : N2.Internal.ExtentionRuleParser
        {
          public this(ruleId : int, grammar : N2.CompositeGrammar)
          {
            base(ruleId, grammar, char.MinValue, char.MaxValue);//TODO: Fix me.
          }
        }
      ]>;
      def tb = Owner.GrammarImplTB.DefineNestedType(implClass);
      DefineParse(tb, RuleDefinition, RuleDefinition.Rule);
      DefineInit(tb);
      tb.Compile();
    }
  }
}
