using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter
  {
    [Record]
    private sealed class RuleStructureData : RuleStructureDataBase[ParseMethodEmitter]
    {
      [RecordIgnore] public mutable OkLabel   : PExprLabel;
      [RecordIgnore] public mutable FailLabel : PExprLabel;
      [RecordIgnore] public mutable AstPtr    : AstPointer;
                     public         AstStart  : PExpr { get { <[ $(Emitter.CreateVariable($"astStart$(Structure.Level)") : dyn) ]> } }

      public override Init() : void
      {
        AstPtr = AstPointer.New(Structure, Emitter, "astPtr");
        if (Structure.Owner == null)
        {
          assert(Structure is RuleStructure.Ast);
          OkLabel   = Emitter.Environment.MakeLabel("Ast_Ok");
          FailLabel = Emitter.Environment.MakeLabel("Ast_Fail");
        }
        else
        {
          assert(!(Structure is RuleStructure.Ast));
          OkLabel   = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(Structure.Owner.State)_Ok");
          FailLabel = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(Structure.Owner.State)_Fail");
        }
      }
    }

    [Record]
    private sealed class RuleStructureFieldData : RuleStructureFieldDataBase[ParseMethodEmitter]
    {
      [RecordIgnore] public mutable ParseLabel         : PExprLabel;
      [RecordIgnore] public mutable RecoveryLabel      : PExprLabel;
                     public         ContinueParseLabel : PExprLabel { get { if (Field.NextSibling == null) Emitter.Data(Field.Owner).OkLabel else Emitter.Data(Field.NextSibling).ParseLabel } }
                     public         FailParseLabel     : PExprLabel { get { Emitter.Data(Field.Owner).FailLabel } }

      public override Init() : void
      {
        ParseLabel    = Emitter.Environment.MakeLabel($"Parse_$(Field.GetType().Name)_$(Field.State)");
        RecoveryLabel = Emitter.Environment.MakeLabel($"Recovery_$(Field.GetType().Name)_$(Field.State)");
      }
    }

    _ruleStructureDataContainer : RuleStructureDataContainer[ParseMethodEmitter, RuleStructureData, RuleStructureFieldData];
    private Data(ruleStructure : RuleStructure) : RuleStructureData
    {
      _ruleStructureDataContainer.RuleStructureData[ruleStructure]
    }

    private Data(ruleStructureField : RuleStructureField) : RuleStructureFieldData
    {
      _ruleStructureDataContainer.RuleStructureFieldData[ruleStructureField]
    }
  }
}
