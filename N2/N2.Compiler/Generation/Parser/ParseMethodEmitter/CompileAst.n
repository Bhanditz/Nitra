using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public CompileFuntion(structure : RuleStructure) : void
    {
      def body = if (Owner.Environment.IsIdeMode)
        <[ IgnoreParams(); assert(false); ]>
      else
        CompileFuntionBody(structure);
      def function = match (structure)
      {
        | RuleStructure.Ast(Symbol = ExtentionRuleSymbol) =>
          <[decl:
            public override Parse(mutable curTextPos : int, text : string, resultRef : ref int, parser : N2.Internal.Parser) : int
            {
              $body
            }
          ]>
        | RuleStructure.Ast(Symbol = SimpleRuleSymbol) =>
          <[decl:
            public override Parse(mutable curTextPos : int, text : string, parser : N2.Internal.Parser) : int
            {
              $body
            }
          ]>
        | RuleStructure.Ast => assert3(false)
        | _ =>
          <[decl:
            private $(FunctionName(structure) : global)(mutable curTextPos : int, text : string, parser : N2.Internal.Parser) : int
            {
              $body
            }
          ]>;
      }
      _tb.DefineConditional(function);
    }

    public CompileFuntionBody(structure : RuleStructure) : PExpr
    {
      def code = SCG.List();
      def endLabel = Environment.MakeLabel("EndParse");
      def setResultRef = if (structure is RuleStructure.Ast(Symbol = ExtentionRuleSymbol))
        <[ resultRef = $(AstPtr(structure).Var); ]>
      else
        <[ {} ]>;
      def jumpToRecovery(structure : RuleStructure) : PExpr
      {
        def code = SCG.List();
        def field = structure.NonMarkerFields.First();
        code.Add(<[
          if (parseState >= $(field.EndState))
            $CurTextPos += $(AstPtr(field.Owner).GetSize(field)); // skip
          else
            continueParse();
        ]>);
        foreach (field in structure.NonMarkerFields.Skip(1))
          code.Add(<[
            if (parseState >= $(field.EndState))
              $CurTextPos += $(AstPtr(field.Owner).GetSize(field)); // skip
            else
              $(GotoRecoveryLabel(field))
          ]>);
        code.Add(<[ assert3(false) ]>);
        <[ { continueParse: { ..$code } } ]>.FlattenPExpr();
      }
      def checkMemoize(structure : RuleStructure, okCode : PExpr, failCode : PExpr) : PExpr
      {
        <[
          $(AstPtr(structure).Var) = parser.TryGetAst($CurTextPos, $(structure.AstId : global));
          when ($(AstPtr(structure).Var) > 0)
          {
            parseState = $(AstPtr(structure).Get(structure.HeaderState));
            if (parseState == N2.Internal.Parser.AstParsedState)
            {
              $CurTextPos += parser.AstSize($(AstPtr(structure).Var), $(structure.SizesStart), $(structure.SizesEnd));
              $okCode;
            }
            else if (parseState < 0)
            {
              parseState = ~parseState;
              $(jumpToRecovery(structure : RuleStructure));
            }
            else
            {
              $failCode
            }
          }
        ]>
      }
      def memoizeCode = if (structure is RuleStructure.Ast as ruleStructure)
      {
        if (ruleStructure.Symbol is SimpleRuleSymbol)
          checkMemoize(ruleStructure, endLabel.Goto(),
          <[
            $CurTextPos = -1;
            def maxFailPos = $(AstPtr(ruleStructure).GetSize(ruleStructure.NonMarkerFields.Last()));
            when (maxFailPos > parser.MaxFailPos)
              parser.MaxFailPos = maxFailPos;
            $(endLabel.Goto());
          ]>)
        else
          <[
            $(AstPtr(ruleStructure).Var) = 0;
            when (resultRef > 0)
            {
              $(AstPtr(ruleStructure).Var) = resultRef;
              parseState = parser.ast[resultRef + 2];
              when (parseState == N2.Internal.Parser.AstParsedState)
              {
                return $CurTextPos + parser.AstSize($(AstPtr(structure).Var), $(structure.SizesStart), $(structure.SizesEnd));
              }
              assert(parseState < 0);
              parseState = ~parseState;
              $(jumpToRecovery(ruleStructure));
            }
          ]>;
      }
      else
        checkMemoize(structure, GotoOkLabel(structure), GotoFailLabel(structure));
      code.Add(<[
        mutable tmpSize    : int; _ = tmpSize;
        mutable parseState : int; _ = parseState;
        mutable newPos     : int; _ = newPos;
        mutable $(AstPtr(structure).Var);
        mutable $(AstStart(structure));
      ]>);
      code.Add(<[ _ = $(structure.ToString()) ]>);
      code.Add(memoizeCode);
      //code.AddRange(_fields.Map(field => <[ _ = $(field.Print()) ]>));

      code.Add(<[ $(AstStart(structure)) = $CurTextPos; ]>);
      CompileFieldsNoneRecursive(code, structure);

      //parse ok
      code.Add(OkLabel(structure));
      code.Add(AstPtr(structure).Set(structure.HeaderState, <[ N2.Internal.Parser.AstParsedState ]>));// правило полностью разобрано.
      code.Add(setResultRef);
      code.Add(endLabel.Goto());

      //parse fail
      code.Add(FailLabel(structure));
      code.Add(<[ when ($(AstPtr(structure).Var) > 0) // АСТ создано
                  {
                    $(AstPtr(structure).Set(structure.HeaderState, <[ parseState ]>));
                    $(AstPtr(structure).Set(structure.NonMarkerFields.Last(), <[ parser.MaxFailPos ]>));
                    $setResultRef;
                  }
      ]>);
      code.Add(<[ $CurTextPos = -1; $(endLabel.Goto()); ]>);

      def debugCode = if (structure is RuleStructure.Ast(Symbol = SyntaxRuleSymbol(LastLocation = Some(loc))) when Owner.Environment.Manager.Options.EmitDebug)
      {
        def debugCode = <[ () ]>;
        debugCode.Location = loc.NLocation();
        debugCode;
      }
      else
        <[ {} ]>;
      code.Add(<[ $(endLabel.Label()); $debugCode; $CurTextPos; ]>);

      code.FlattenPExpr();
    }
  }
}
