using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public CompileAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      def endLabel = Environment.MakeLabel("EndParse");
      def recoveryLabel = Environment.MakeLabel("Recovery");
      def checkAstMemoize = if (ruleStructure.Symbol is SimpleRuleSymbol)
        <[
          when ($CurTextPos <= text.Length)
          {
            for (mutable ast = parser.memoize[$CurTextPos]; ast > 0; ast = parser.ast[ast + 1])
            {
              when (parser.ast[ast] == RuleId)
              {
                parseState = parser.ast[ast + 2];
                if (parseState == -1)
                {
                  mutable i = ast + $(ruleStructure.SizesStart);
                  mutable end = ast + $(ruleStructure.SizesEnd);
                  for (; i < end; ++i)
                    $CurTextPos += parser.ast[i];
                  $(endLabel.Goto());
                }
                else
                {
                  when (parser.IsRecoveryMode)
                  {
                    $(Data(ruleStructure).AstPtr.Var) = ast;
                    $(recoveryLabel.Goto());
                  }
                  $CurTextPos = -1;
                  $(endLabel.Goto());
                }
              }
            }
          }
        ]>
      else
        <[
          when (parser.IsRecoveryMode)
          {
            $(Data(ruleStructure).AstPtr.Var) = resultRef;
            parseState = parser.ast[resultRef + 2];
            $(recoveryLabel.Goto());
          }
        ]>;

      def setResultRef = if (ruleStructure.Symbol is ExtentionRuleSymbol)
        <[ resultRef = $(Data(ruleStructure).AstPtr.Var); ]>
      else
        <[ {} ]>;

      code.Add(<[ _ = $(ruleStructure.SrcRule.ToString()) ]>);
      //code.AddRange(_fields.Map(field => <[ _ = $(field.Print()) ]>));

      code.Add(<[ $(Data(ruleStructure).AstStart) = $CurTextPos; ]>);
      code.Add(checkAstMemoize);
      code.Add(<[ $(Data(ruleStructure.Fields[0]).ParseLabel.Goto()); ]>);

      //parse ok
      code.Add(<[ $(Data(ruleStructure).OkLabel.Label()); ]>);
      code.Add(<[ $(Data(ruleStructure).AstPtr.Set(ruleStructure.HeaderState, <[ -1 ]>)) ]>);// состояние разбора -1 если правило полностью разобрано.
      code.Add(setResultRef);
      code.Add(<[ $(endLabel.Goto()); ]>);

      //parse fail
      code.Add(<[ $(Data(ruleStructure).FailLabel.Label()); ]>);
      code.Add(<[ when (parseState > $(Data(ruleStructure).AllocateState)) // АСТ создано
                  {
                    $(Data(ruleStructure).AstPtr.Set(ruleStructure.HeaderState, <[ parseState ]>));
                    $setResultRef;
                  }
      ]>);
      code.Add(<[ $CurTextPos = -1; $(endLabel.Goto()); ]>);
      CompileFields(code, ruleStructure.Fields);

      code.Add(recoveryLabel.Label());
      //code.Add(<[ assert2(false) ]>);
      foreach (field in ruleStructure.Fields)
      {
        when (field.NextSibling != null)
        {
          def skip = if (field is RuleStructureField.Predicate)
            <[ assert(false) ]>;
          else
            <[ $CurTextPos += $(Data(field.Owner).AstPtr.GetSize(field)) ]>;
          code.Add(<[
            if (parseState >= $(field.NextSibling.EndState))
              $skip;
            else
              $(Data(field).RecoveryLabel.Goto())
          ]>);
        }
      }
      code.Add(<[ assert2(false); assert(false) ]>);

      if (ruleStructure.Symbol.LastLocation is Some(loc) when Owner.Environment.Manager.Options.EmitDebug)
      {
        //assert2(false);
        def debugCode = <[ () ]>;
        debugCode.Location = loc.NLocation();
        code.Add(<[ $(endLabel.Label()); $debugCode; $CurTextPos; ]>);
      }
      else
        code.Add(<[ $(endLabel.Label()); $CurTextPos; ]>);

      def variables = SCG.List();
      variables.Add(<[
        mutable tmpSize    : int; _ = tmpSize;
        mutable parseState : int; _ = parseState;
        mutable newPos     : int; _ = newPos;
      ]>);
      variables.AddRange(LocalVariables.Filter(_ != "resultRef").Map(name => <[ mutable $(name : dyn) ]>));

      variables.Concat(code).FlattenPExpr();
    }
  }
}
