using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public CompileAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      def endLabel = Environment.MakeLabel("EndParse");
      def recoveryLabel = Environment.MakeLabel("Recovery");
      def (saveMaxFailPos, loadMaxFailPos) = if (ruleStructure.Symbol.Type is RuleType.Void)
      {
        def savedMaxFailPos = CreateVariable("savedMaxFailPos");
        (<[ $(savedMaxFailPos : dyn) = parser.MaxFailPos ]>, <[ parser.MaxFailPos = $(savedMaxFailPos  : dyn) ]>)
      }
      else
      {
        (<[ {} ]>, <[ {} ]>)
      }
      def checkAstMemoize = if (ruleStructure.Symbol is SimpleRuleSymbol)
        CheckMemoize(ruleStructure, endLabel.Goto(),
        <[
          $CurTextPos = -1;
          def maxFailPos = $(AstPtr(ruleStructure).GetSize(ruleStructure.NotMarkerFields.Last()));
          when (maxFailPos > parser.MaxFailPos)
            parser.MaxFailPos = maxFailPos;
          $(endLabel.Goto());
        ]>)
      else
        <[
          when (resultRef > 0)
          {
            $(AstPtr(ruleStructure).Var) = resultRef;
            parseState = parser.ast[resultRef + 2];
            assert(parseState < 0 && parseState != N2.Internal.Parser.AstParsedState);
            parseState = ~parseState;
            $(recoveryLabel.Goto());
          }
        ]>;

      def setResultRef = if (ruleStructure.Symbol is ExtentionRuleSymbol)
        <[ resultRef = $(AstPtr(ruleStructure).Var); ]>
      else
        <[ {} ]>;

      code.Add(<[ _ = $(ruleStructure.ToString()) ]>);
      //code.AddRange(_fields.Map(field => <[ _ = $(field.Print()) ]>));

      code.Add(saveMaxFailPos);
      code.Add(<[ $(AstStart(ruleStructure)) = $CurTextPos; ]>);
      code.Add(checkAstMemoize);
      code.Add(GotoParseLabel(ruleStructure.NotMarkerFields[0]));

      def (predicateCode, predicateFailLabel) = CompilePredicate(ruleStructure.TailPredicates);

      //parse ok
      code.Add(OkLabel(ruleStructure));
      code.Add(predicateCode);
      code.Add(AstPtr(ruleStructure).Set(ruleStructure.HeaderState, <[ N2.Internal.Parser.AstParsedState ]>));// правило полностью разобрано.
      code.Add(setResultRef);
      code.Add(endLabel.Goto());

      //parse fail
      code.Add(FailLabel(ruleStructure));
      code.Add(predicateFailLabel);
      code.Add(<[ when (parseState > $(ruleStructure.AllocateState)) // АСТ создано
                  {
                    $(AstPtr(ruleStructure).Set(ruleStructure.HeaderState, <[ parseState ]>));
                    $(AstPtr(ruleStructure).Set(ruleStructure.NotMarkerFields.Last(), <[ parser.MaxFailPos ]>));
                    $setResultRef;
                  }
      ]>);
      code.Add(<[ $CurTextPos = -1; $(endLabel.Goto()); ]>);
      CompileFields(code, ruleStructure);

      code.Add(recoveryLabel.Label());
      code.Add(JumpToRecovery(ruleStructure));

      def debugCode = if (ruleStructure.Symbol.LastLocation is Some(loc) when Owner.Environment.Manager.Options.EmitDebug)
      {
        def debugCode = <[ () ]>;
        debugCode.Location = loc.NLocation();
        debugCode;
      }
      else
        <[ {} ]>;
      code.Add(<[ $(endLabel.Label()); $debugCode; $loadMaxFailPos; $CurTextPos; ]>);

      def variables = SCG.List();
      variables.Add(<[
        mutable tmpSize    : int; _ = tmpSize;
        mutable parseState : int; _ = parseState;
        mutable newPos     : int; _ = newPos;
      ]>);
      variables.AddRange(LocalVariables.Filter(_ != "resultRef").Map(name => <[ mutable $(name : dyn) ]>));

      variables.Concat(code).FlattenPExpr();
    }
  }
}
