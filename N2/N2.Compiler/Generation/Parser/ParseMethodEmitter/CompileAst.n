using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public CompileAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def code = SCG.List();
      def setResultRef = if (ruleStructure.Symbol is ExtentionRuleSymbol)
        <[ resultRef = $(AstPtr(ruleStructure).Var); ]>
      else
        <[ {} ]>;

      code.Add(<[ _ = $(ruleStructure.ToString()) ]>);
      //code.AddRange(_fields.Map(field => <[ _ = $(field.Print()) ]>));

      code.Add(<[ $(AstStart(ruleStructure)) = $CurTextPos; ]>);
      code.Add(GotoParseLabel(ruleStructure.NonMarkerFields[0]));

      //parse ok
      code.Add(OkLabel(ruleStructure));
      code.Add(AstPtr(ruleStructure).Set(ruleStructure.HeaderState, <[ N2.Internal.Parser.AstParsedState ]>));// правило полностью разобрано.
      code.Add(setResultRef);
      code.Add(_endLabel.Goto());

      //parse fail
      code.Add(FailLabel(ruleStructure));
      code.Add(<[ when ($(AstPtr(ruleStructure).Var) > 0) // АСТ создано
                  {
                    $(AstPtr(ruleStructure).Set(ruleStructure.HeaderState, <[ parseState ]>));
                    $(AstPtr(ruleStructure).Set(ruleStructure.NonMarkerFields.Last(), <[ parser.MaxFailPos ]>));
                    $setResultRef;
                  }
      ]>);
      code.Add(<[ $CurTextPos = -1; $(_endLabel.Goto()); ]>);
      CompileFields(code, ruleStructure);

      def debugCode = if (ruleStructure.Symbol.LastLocation is Some(loc) when Owner.Environment.Manager.Options.EmitDebug)
      {
        def debugCode = <[ () ]>;
        debugCode.Location = loc.NLocation();
        debugCode;
      }
      else
        <[ {} ]>;
      code.Add(<[ $(_endLabel.Label()); $debugCode; $CurTextPos; ]>);

      def variables = SCG.List();
      variables.Add(<[
        mutable tmpSize    : int; _ = tmpSize;
        mutable parseState : int; _ = parseState;
        mutable newPos     : int; _ = newPos;
      ]>);
      variables.AddRange(LocalVariables.Filter(_ != "resultRef").Map(name => <[ mutable $(name : global) ]>));

      variables.Concat(code).FlattenPExpr();
    }
  }
}
