using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment : EmitterEnvironment { get { Owner.Environment } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner         = owner;
      _tb           = tb;
      RuleStructure = ruleStructure;
      InitRuleStructure(ruleStructure);
    }

    public Emit() : void
    {
      if (RuleStructure.Symbol is ExtentionRuleSymbol)
      {
        _tb.DefineConditional(<[decl:
          public override Parse(mutable curTextPos : int, text : string, resultRef : ref int, parser : ref N2.Internal.Parser) : int
          {
            $(if (Owner.Environment.IsIdeMode)
              <[ _ = curTextPos; _ = text; _ = resultRef; _ = parser; -1 ]>
            else
              CompileAst(RuleStructure))
          }
        ]>);
      }
      else
      {
        _tb.DefineConditional(<[decl:
          public override Parse(mutable curTextPos : int, text : string, parser : ref N2.Internal.Parser) : int
          {
            $(if (Owner.Environment.IsIdeMode)
              <[ _ = curTextPos; _ = text; _ = parser; -1 ]>
            else
              CompileAst(RuleStructure))
          }
        ]>);
      }
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    public AllocateParentAst(field : RuleStructureField) : PExpr
    {
      def structure = field.Owner;
      if (field.AllocateAst)
      {
        match (structure)
        {
          | RuleStructure.Predicate =>
            <[
              unless (parser.IsRecoveryMode)
                $(Data(structure).AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
            ]>

          | RuleStructure.Ast(Symbol = N2.Typing.ExtentionRuleSymbol) =>
            <[
              unless (parser.IsRecoveryMode)
              {
                $(Data(structure).AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
                parser.ast[$(Data(structure).AstPtr.Var) + $(structure.TerminatorOffset)] = -1;
              }
            ]>

          | _ =>
            <[
              unless (parser.IsRecoveryMode)
              {
                $(Data(structure).AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
                $(Data(structure).AstPtr.Set(structure.HeaderNext, <[ parser.memoize[$(Data(structure).AstStart)] ]>));
                parser.memoize[$(Data(structure).AstStart)] = $(Data(structure).AstPtr.Var);
              }
            ]>
        }
      }
      else
        <[ {} ]>
    }

    public RecoveryCode() : PExpr
    {
      <[
        when (parser.MaxTextPos < curTextPos)
          parser.MaxTextPos = curTextPos;
      ]>
    }
  }
}
