using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment     : EmitterEnvironment { get { Owner.Environment } }
    public override ConstantEmitter : IConstantEmitter   { get { Owner } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner         = owner;
      _tb           = tb;
      RuleStructure = ruleStructure;
      _data         = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
    }

    public Emit() : void
    {
      if (RuleStructure.Symbol is ExtentionRuleSymbol)
      {
        _tb.DefineConditional(<[decl:
          public override Parse(mutable curTextPos : int, text : string, resultRef : ref int, parser : N2.Internal.Parser) : int
          {
            $(if (Owner.Environment.IsIdeMode)
              <[ _ = curTextPos; _ = text; _ = resultRef; _ = parser; -1 ]>
            else
              CompileAst(RuleStructure))
          }
        ]>);
      }
      else
      {
        _tb.DefineConditional(<[decl:
          public override Parse(mutable curTextPos : int, text : string, parser : N2.Internal.Parser) : int
          {
            $(if (Owner.Environment.IsIdeMode)
              <[ _ = curTextPos; _ = text; _ = parser; -1 ]>
            else
              CompileAst(RuleStructure))
          }
        ]>);
      }
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    public AllocateParentAst(field : RuleStructureField) : PExpr
    {
      def structure = field.Owner;
      if (field.AllocateAst)
      {
        match (structure)
        {
          | RuleStructure.Predicate
          | RuleStructure.Ast(Symbol = N2.Typing.ExtentionRuleSymbol) =>
            <[
              $(AstPtr(structure).Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
            ]>

          | _ =>
            <[
              assert2(parser.TryGetAst($(AstStart(structure)), $(structure.AstId : dyn)) == 0);
              $(AstPtr(structure).Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
              $(AstPtr(structure).Set(structure.HeaderNext, <[ parser.memoize[$(AstStart(structure))] ]>));
              parser.memoize[$(AstStart(structure))] = $(AstPtr(structure).Var);
            ]>
        }
      }
      else
        <[ {} ]>
    }

    public RecoveryCode() : PExpr
    {
      <[
        when (parser.MaxFailPos < curTextPos)
          parser.MaxFailPos = curTextPos;
      ]>
    }

    private CheckOwnerMemoize(field : RuleStructureField) : PExpr
    {
      if (field.IsStart && !field.IsPredicate && !(field.Owner is RuleStructure.Ast))
        CheckMemoize(field.Owner, GotoOkLabel(field.Owner), GotoFailLabel(field.Owner));
      else
        <[ {} ]>
    }

    private CheckMemoize(structure : RuleStructure, okCode : PExpr, failCode : PExpr) : PExpr
    {
      <[
        $(AstPtr(structure).Var) = parser.TryGetAst($CurTextPos, $(structure.AstId : dyn));
        when ($(AstPtr(structure).Var) > 0)
        {
          parseState = $(AstPtr(structure).Get(structure.HeaderState));
          if (parseState == N2.Internal.Parser.AstParsedState)
          {
            $CurTextPos += parser.AstSize($(AstPtr(structure).Var), $(structure.SizesStart), $(structure.SizesEnd));
            $okCode;
          }
          else if (parseState < 0)
          {
            parseState = ~parseState;
            $(JumpToRecovery(structure : RuleStructure));
          }
          else
          {
            $failCode
          }
        }
      ]>
    }

    private JumpToRecovery(structure : RuleStructure) : PExpr
    {
      def code = SCG.List();
      foreach (field in structure.NotMarkerFields)
        code.Add(<[
          if (parseState >= $(field.EndState))
            $CurTextPos += $(AstPtr(field.Owner).GetSize(field)); // skip
          else
            $(GotoRecoveryLabel(field))
        ]>);
      code.Add(<[ assert2(false); assert(false) ]>);
      code.FlattenPExpr();
    }
  }
}
