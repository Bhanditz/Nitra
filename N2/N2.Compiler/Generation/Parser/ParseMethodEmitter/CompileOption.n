using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void
    {
      CompileFuntion(field.Rule);
      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));

      code.Add(<[
      $(ParseLabel(field));
        _ = $(field.ToString());
        $headPredicateCode;
        $(AllocateParentAst(field));
      $(RecoveryLabel(field));
        newPos = $(FunctionName(field.Rule) : global)($CurTextPos, text, parser);
        if (newPos > 0)
        {
          $(AstPtr(field.Owner).Set(field, <[ newPos - $CurTextPos ]>));
          $CurTextPos = newPos;
        }
        else
        {
          $(AstPtr(field.Owner).Set(field, <[ 0 ]>));
        }
        $(GotoContinueParseLabel(field));
      ]>);
    }
  }
}
