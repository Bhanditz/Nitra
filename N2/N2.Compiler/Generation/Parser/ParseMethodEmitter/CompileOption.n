using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void
    {
      code.Add(<[
      $(Data(field).ParseLabel.Label());
        _ = $(field.SrcRule.ToString());
        $(AllocateParentAst(field));
        $(Data(field.Rule).AstStart) = $CurTextPos;
        $(Data(field.Rule.Fields[0]).ParseLabel.Goto());

      $(Data(field.Rule).OkLabel.Label());
        $(Data(field.Owner).AstPtr.Set(field, <[ $CurTextPos - $(Data(field.Rule).AstStart) ]>));
        $(Data(field).ContinueParseLabel.Goto());

      $(Data(field.Rule).FailLabel.Label());
        $(Data(field.Owner).AstPtr.Set(field, <[ 0 ]>));
        $CurTextPos = $(Data(field.Rule).AstStart);
        $(Data(field).ContinueParseLabel.Goto());

      $(Data(field).RecoveryLabel.Label());
        when ($(Data(field.Owner).AstPtr.GetSize(field)) > 0)
          $(Data(field.Rule).AstPtr.Var) = parser.GetAst($CurTextPos, $(field.Rule.AstId : dyn));
        $(Data(field.Rule.Fields[0]).ParseLabel.Goto());
      ]>);
    }
  }
}
