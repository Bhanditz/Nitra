using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal variant RuleStructure
  {
                   public         SrcRule          : N2.Model.Rule;
                   public         Fields           : array[RuleStructureField];
    [RecordIgnore] public mutable Owner            : RuleStructureField;
    [RecordIgnore] public mutable Header           : array[RuleStructureHeaderField];
    [RecordIgnore] public mutable AstId            : string;
    [RecordIgnore] public mutable AllocateState    : int;
    [RecordIgnore] public mutable Level            : int;
    [RecordIgnore] public mutable OkLabel          : PExprLabel;
    [RecordIgnore] public mutable FailLabel        : PExprLabel;
    [RecordIgnore] public mutable VariableEmitter  : IVariableEmitter;
    [RecordIgnore] public mutable AstPtr           : AstPointer;
                   public         HasTerminator    : bool  { get { this is Ast(Symbol = ExtentionRuleSymbol) } }
                   public         TerminatorOffset : int   { get { Fields[Fields.Length - 1].Offset + Fields[Fields.Length - 1].Size } }
                   public         SizesOffset      : int   { get { Header.Length } }
                   public         Size             : int   { get { TerminatorOffset + if (HasTerminator) 1 else 0 } }
                   public         AstStart         : PExpr { get { <[ $(VariableEmitter.CreateVariable($"astStart$(Level)") : dyn) ]> } }
                   public         HeaderId         : RuleStructureHeaderField { get { Header[0] } }
                   public         HeaderNext       : RuleStructureHeaderField { get { Header[1] } }
                   public         HeaderState      : RuleStructureHeaderField { get { Header[2] } }

    | Ast { Symbol : SyntaxRuleSymbol }
    | Option
    | List
    | ListWithSeparatorRule
    | ListWithSeparatorSeparator
    | Predicate
  }
}
