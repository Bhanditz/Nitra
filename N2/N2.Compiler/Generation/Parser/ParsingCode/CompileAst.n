using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    public CompileAst(code : SCG.List[PExpr], ruleStructure : RuleStructure.Ast, endLabel : PExprLabel) : void
    {
      def checkAstMemoize = if (ruleStructure.Symbol is SimpleRuleSymbol)
        <[
          when ($CurTextPos <= text.Length)
          {
            for (mutable ast = parser.memoize[$CurTextPos]; ast > 0; ast = parser.ast[ast + 1])
            {
              when (parser.ast[ast] == RuleId)
              {
                if (parser.ast[ast + 2] == -1)
                {
                  resultRef = ast;
                  mutable i = ast + $(ruleStructure.SizesOffset);
                  mutable end = i + $(ruleStructure.Fields.Length);
                  for (; i < end; ++i)
                    curEndPos += parser.ast[i];
                  $(endLabel.Goto());
                }
                else
                {
                  curEndPos = -1;
                  $(endLabel.Goto());
                }
              }
            }
          }
        ]>
      else
        <[ () ]>;

      code.Add(<[ $(ruleStructure.AstStart) = $CurTextPos; ]>);
      code.Add(checkAstMemoize);
      code.Add(<[ $(ruleStructure.Fields[0].ParseLabel.Goto()); ]>);

      //parse ok
      code.Add(<[ $(ruleStructure.OkLabel.Label()); ]>);
      code.Add(<[ $(ruleStructure.AstPtr.Set(ruleStructure.HeaderState, <[ -1 ]>)) ]>);// состояние разбора -1 если правило полностью разобрано.
      code.Add(<[ resultRef = $(ruleStructure.AstPtr.Var); ]>);
      code.Add(<[ $(endLabel.Goto()); ]>);

      //parse fail
      code.Add(<[ $(ruleStructure.FailLabel.Label()); ]>);
      code.Add(<[ when (parseState > $(ruleStructure.AllocateState)) // АСТ создано
                  {
                    $(ruleStructure.AstPtr.Set(ruleStructure.HeaderState, <[ parseState ]>));
                    resultRef = $(ruleStructure.AstPtr.Var);
                  }
      ]>);
      code.Add(<[ curEndPos = -1; $(endLabel.Goto()); ]>);
      CompileFields(code, ruleStructure.Fields);
    }
  }
}
