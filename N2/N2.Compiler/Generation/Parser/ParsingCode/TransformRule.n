using N2.Compiler.RuleField;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    protected TransformRule(ruleSymbol : SyntaxRuleSymbol) : RuleStructure.Ast
    {
      def conv(rule : Rule) : array[RuleStructureField]
      {
        match (rule)
        {
          | And                   as rule => array[RuleStructureField.Predicate        (rule, RuleStructure.Predicate(rule.Rule, conv(rule.Rule)), true)]
          | Not                   as rule => array[RuleStructureField.Predicate        (rule, RuleStructure.Predicate(rule.Rule, conv(rule.Rule)), false)]
          | Repeat(0, Some(1), _) as rule => array[RuleStructureField.Option           (rule, RuleStructure.Option(rule.Rule, conv(rule.Rule)))]
          | Repeat                as rule => array[RuleStructureField.List             (rule, RuleStructure.List(rule.Rule, conv(rule.Rule)), rule.MinCount, rule.MaxCount)]
          | RepeatWithSeparator   as rule => array[RuleStructureField.ListWithSeparator(rule, RuleStructure.ListWithSeparatorRule(rule.Rule, conv(rule.Rule)), RuleStructure.ListWithSeparatorSeparator(rule.Separator, conv(rule.Separator)), rule.MinCount, rule.MaxCount, rule.HangingSeparator)]
          | String                as rule => array[RuleStructureField.TokenString      (rule, rule.Str)]
          | Sequence              as rule => rule.Rules.Map(conv(_)).Flatten().NToArray();
          | Call(RuleRef.Some(ruleSymbol) as ruleRef, bindingPower) =>
            match (ruleSymbol)
            {
              | ExtensibleRuleSymbol                   as rs => array[RuleStructureField.ExtensibleCall(rule, rs, bindingPower)]
              | SimpleRuleSymbol                       as rs => array[RuleStructureField.SimpleCall(rule, rs)]
              | RegularRuleSymbol                      as rs => array[RuleStructureField.TokenCall(rule, rs)]
              | MarkerSymbol                                 => array[]
              | _                                            => Message.FatalError(ruleRef.NLocation(), $"N2ICE Typing bug: invalid symbol bound. $(ruleSymbol.GetType().Name)");
            }
          | Call(RuleRef.None as ruleRef, _) => Message.FatalError(ruleRef.NLocation(), "N2ICE Typing bug: not bound symbol.");
        }
      }
      def rule = match (ruleSymbol)
      {
        | ExtentionRuleSymbol(ExtentionType = Postfix(_, rule)) => rule
        | _ => ruleSymbol.Rule
      }
      def ast = RuleStructure.Ast(rule, conv(rule), ruleSymbol);
      mutable state = 0;
      def initStructure(structure : RuleStructure, owner : RuleStructureField, level)
      {
        structure.Level           = level;
        structure.Owner           = owner;
        structure.VariableEmitter = this;
        structure.AstPtr          = AstPointer(structure, "astPtr");
        if (owner == null)
        {
          assert(structure is RuleStructure.Ast);
          structure.OkLabel   = Environment.MakeLabel("Ast_Ok");
          structure.FailLabel = Environment.MakeLabel("Ast_Fail");
          structure.Header    = array[RuleStructureHeaderField.Id(structure, 0), RuleStructureHeaderField.Next(structure, 1), RuleStructureHeaderField.State(structure, 2)];
        }
        else
        {
          assert(!(structure is RuleStructure.Ast));
          structure.OkLabel   = Environment.MakeLabel($"$(structure.GetType().Name)_$(owner.State)_Ok");
          structure.FailLabel = Environment.MakeLabel($"$(structure.GetType().Name)_$(owner.State)_Fail");
          structure.Header    = array[RuleStructureHeaderField.Id(structure, 0), RuleStructureHeaderField.Next(structure, 1)];
        }

        def fields = structure.Fields;
        for (mutable i = 0; i < fields.Length - 1; ++i)
          fields[i].NextSibling = fields[i + 1];

        for (mutable i = 0; i < fields.Length; ++i)
          fields[i].Owner = structure;

        for (mutable i = 0; i < fields.Length; ++i)
          initField(fields[i], level);

        fields[0].Offset = structure.Header.Length;
        for (mutable i = 1; i < fields.Length; ++i)
          fields[i].Offset = fields[i - 1].Offset + fields[i - 1].Size;

        match (fields.Find(field => !(field is RuleStructureField.Predicate)))
        {
          | Some(field) =>
            field.AllocateAst = true;
            structure.AllocateState = field.State;

          | None()      => assert(false);
        }
      }
      and initField(field : RuleStructureField, level)
      {
        field.Level         = level;
        field.State         = state; ++state;
        field.ParseLabel    = Environment.MakeLabel($"Parse_$(field.GetType().Name)_$(field.State)");
        field.RecoveryLabel = Environment.MakeLabel($"Recovery_$(field.GetType().Name)_$(field.State)");
        match (field)
        {
          | TokenString                                 => field.Size = 1;
          | TokenCall                                   => field.Size = 1;
          | ExtensibleCall                              => field.Size = 1;
          | SimpleCall                                  => field.Size = 1;
          | Option           (rule)                     => field.Size = 1; initStructure(rule, field, level + 1);
          | List             (rule, _, _)               => field.Size = 1; initStructure(rule, field, level + 1);
          | Predicate        (rule, _)                  => field.Size = 0; initStructure(rule, field, level + 1);
          | ListWithSeparator(rule, separator, _, _, _) => field.Size = 1; initStructure(rule, field, level + 1); initStructure(separator, field, level + 1);
        }
      }
      initStructure(ast, null, 0);
      ast
    }
  }
}
