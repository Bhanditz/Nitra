using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    public CompileOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void
    {
      code.Add(<[
      $(field.ParserExtention().ParseLabel.Label());
        _ = $(field.SrcRule.ToString());
        $(AllocateParentAst(field));
        $(field.Rule.ParserExtention().AstStart) = $CurTextPos;
        $(field.Rule.Fields[0].ParserExtention().ParseLabel.Goto());

      $(field.Rule.ParserExtention().OkLabel.Label());
        $(field.Owner.ParserExtention().AstPtr.Set(field, <[ $CurTextPos - $(field.Rule.ParserExtention().AstStart) ]>));
        $(field.ParserExtention().ContinueParseLabel.Goto());

      $(field.Rule.ParserExtention().FailLabel.Label());
        $(field.Owner.ParserExtention().AstPtr.Set(field, <[ 0 ]>));
        $CurTextPos = $(field.Rule.ParserExtention().AstStart);
        $(field.ParserExtention().ContinueParseLabel.Goto());

      $(field.ParserExtention().RecoveryLabel.Label());
        when ($(field.Owner.ParserExtention().AstPtr.GetSize(field)) > 0)
          $(field.Rule.ParserExtention().AstPtr.Var) = parser.GetAst($CurTextPos, $(field.Rule.AstId : dyn));
        $(field.Rule.Fields[0].ParserExtention().ParseLabel.Goto());
      ]>);
      CompileFields(code, field.Rule.Fields);
    }
  }
}
