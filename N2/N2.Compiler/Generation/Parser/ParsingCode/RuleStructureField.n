using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  public variant RuleStructureField
  {
                   public         SrcRule            : N2.Model.Rule;
    [RecordIgnore] public mutable Owner              : RuleStructure;
    [RecordIgnore] public mutable State              : int;
    [RecordIgnore] public mutable Level              : int;
    [RecordIgnore] public mutable Size               : int;
    [RecordIgnore] public mutable Offset             : int;
    [RecordIgnore] public mutable NextSibling        : RuleStructureField;
    [RecordIgnore] public mutable AllocateAst        : bool = false;
    [RecordIgnore] public mutable Tag                : object;

    | TokenString       { String : string; }
    | TokenCall         { Symbol : RegularRuleSymbol; }
    | ExtensibleCall    { Symbol : ExtensibleRuleSymbol; BindingPower : int; }
    | SimpleCall        { Symbol : SimpleRuleSymbol; }
    | Option            { Rule   : RuleStructure.Option; }
    | List              { Rule   : RuleStructure.List; MinCount : int; MaxCount : option[int]; }
    | ListWithSeparator { Rule   : RuleStructure.ListWithSeparatorRule; Separator : RuleStructure.ListWithSeparatorSeparator; MinCount : int; MaxCount : option[int]; HangingSeparator : bool; }
    | Predicate         { Rule   : RuleStructure.Predicate; IsAnd : bool; }
  }
}
