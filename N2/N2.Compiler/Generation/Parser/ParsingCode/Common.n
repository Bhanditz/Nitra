using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    public CurTextPos : PExpr { get { <[ curTextPos ]> } }
    public CompileFields(code : SCG.List[PExpr], fields : array[RuleStructureField]) : void
    {
      foreach (field in fields)
      {
        | TokenString       as field => CompileTokenString      (code, field)
        | Option            as field => CompileOption           (code, field)
        | List              as field => CompileList             (code, field)
        | ListWithSeparator as field => CompileListWithSeparator(code, field)
        | Predicate         as field => CompilePredicate        (code, field)
        | TokenCall         as field => code.Add(MakeCallCodeImpl(<[ $(MakeTokenCall(field.Symbol))(curEndPos, text) ]>, field))
        | ExtensibleCall    as field => code.Add(MakeSyntaxCallCode(MakeCall(field.Symbol, field.BindingPower), field))
        | SimpleCall        as field => code.Add(MakeSyntaxCallCode(MakeCall(field.Symbol), field))
      }
    }

    public MakeSyntaxCallCode(call : PExpr, field : RuleStructureField) : PExpr
    {
      MakeCallCodeImpl(<[ $call(curEndPos, text, ref tmpResult, ref parser) ]>, field)
    }

    public MakeCallCodeImpl(call : PExpr, field : RuleStructureField) : PExpr
    {
      def (debugSetLastResult, exit) =
        if (this.Compiler.Owner.Environment.Manager.Options.EmitDebug)
          (<[ parser.LastParseStart = curEndPos; parser.LastParseEnd = newPos; ]>, <[ () ]>);
        else
          (<[ () ]>, <[ () ]>);

      def loc = field.SrcRule.Location.NLocation();
      when (!loc.IsEmpty && loc.IsSourceAvailable)
      {
        call.Location = loc;
        // Make the location directly behind the rule call. This allows you to see the result of the parsing rules.
        exit.Location = N.Location(loc.FileIndex, loc.EndLine, loc.EndColumn, loc.Line, loc.EndColumn + 1);
      }

      <[
      $(field.ParseLabel.Label());
        tmpResult = -1;
        newPos = $call;
        tmpSize = newPos - curEndPos;
        $debugSetLastResult;
        if (newPos >= 0)
        {
          $(AllocateParentAst(field));
          $(field.Owner.AstPtr.Set(field, <[ tmpSize ]>));
          curEndPos = newPos;
          $exit;
          $(field.ContinueParseLabel.Goto());
        }
        else
        {
          parseState = $(field.State : int);//состояние
          $exit;
          $(field.FailParseLabel.Goto());
        }
      ]>
    }

    public AllocateParentAst(field : RuleStructureField) : PExpr
    {
      def structure = field.Owner;
      if (field.AllocateAst)
      {
        match (structure)
        {
          | RuleStructure.Predicate =>
            <[
              $(structure.AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
            ]>

          | RuleStructure.Ast(Symbol = N2.Typing.ExtentionRuleSymbol) =>
            <[
              $(structure.AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
              parser.ast[$(structure.AstPtr.Var) + $(structure.TerminatorOffset)] = -1;
            ]>

          | _ =>
            <[
              $(structure.AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
              $(structure.AstPtr.Set(structure.HeaderNext, <[ parser.memoize[$(structure.AstStart)] ]>));
              parser.memoize[$(structure.AstStart)] = $(structure.AstPtr.Var);
            ]>
        }
      }
      else
        <[ {} ]>
    }

    public IsAstAllocatetdCode(structure : RuleStructure) : PExpr
    {
      <[ parseState > $(structure.AllocateState) ]>
    }
  }
}
