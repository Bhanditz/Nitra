using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter : IVariableEmitter
  {
    Environment : EmitterEnvironment implements IVariableEmitter.Environment { get { Owner.Environment } }

    private _names : SCG.HashSet[string] = SCG.HashSet();

    CreateVariable(name : string) : string implements IVariableEmitter.CreateVariable
    {
      _ = _names.Add(name);
      name
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }
    public CompileFields(code : SCG.List[PExpr], fields : array[RuleStructureField]) : void
    {
      foreach (field in fields)
      {
        | TokenString       as field => CompileTokenString      (code, field)
        | Option            as field => CompileOption           (code, field)
        | List              as field => CompileList             (code, field)
        | ListWithSeparator as field => CompileListWithSeparator(code, field)
        | Predicate         as field => CompilePredicate        (code, field)
        | TokenCall         as field => code.Add(MakeCallCodeImpl(<[ $(MakeTokenCall(field.Symbol))($CurTextPos, text) ]>, field))
        | ExtensibleCall    as field => code.Add(MakeSyntaxCallCode(MakeCall(field.Symbol, field.BindingPower), field))
        | SimpleCall        as field => code.Add(MakeSyntaxCallCode(MakeCall(field.Symbol), field))
      }
    }

    public AllocateParentAst(field : RuleStructureField) : PExpr
    {
      def structure = field.Owner;
      if (field.AllocateAst)
      {
        match (structure)
        {
          | RuleStructure.Predicate =>
            <[
              unless (parser.IsRecoveryMode)
                $(structure.ParserExtention().AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
            ]>

          | RuleStructure.Ast(Symbol = N2.Typing.ExtentionRuleSymbol) =>
            <[
              unless (parser.IsRecoveryMode)
              {
                $(structure.ParserExtention().AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
                parser.ast[$(structure.ParserExtention().AstPtr.Var) + $(structure.TerminatorOffset)] = -1;
              }
            ]>

          | _ =>
            <[
              unless (parser.IsRecoveryMode)
              {
                $(structure.ParserExtention().AstPtr.Var) = parser.Allocate($(structure.Size), $(structure.AstId : dyn));
                $(structure.ParserExtention().AstPtr.Set(structure.HeaderNext, <[ parser.memoize[$(structure.ParserExtention().AstStart)] ]>));
                parser.memoize[$(structure.ParserExtention().AstStart)] = $(structure.ParserExtention().AstPtr.Var);
              }
            ]>
        }
      }
      else
        <[ {} ]>
    }

    public RecoveryCode() : PExpr
    {
      <[
        when (parser.MaxTextPos <= curTextPos)
        {
          if (parser.MaxTextPos == curTextPos && parser.IsRecoveryMode)
          {
            assert2(false);
          }
          else
          {
            parser.MaxTextPos = curTextPos;
          }
        }
      ]>
    }
  }
}
