using N2.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public abstract class MethodEmitter : IVariableEmitter
  {
    public abstract Environment : EmitterEnvironment { get; };
    protected LocalVariables : SCG.HashSet[string] = SCG.HashSet();

    public CreateVariable(name : string) : string
    {
      _ = LocalVariables.Add(name);
      name
    }

    public CompileFields(code : SCG.List[PExpr], fields : array[RuleStructureField]) : void
    {
      foreach (field in fields)
      {
        | TokenString       as field => CompileTokenString      (code, field);
        | Option            as field => CompileOption           (code, field); CompileFields(code, field.Rule.Fields);
        | List              as field => CompileList             (code, field); CompileFields(code, field.Rule.Fields);
        | ListWithSeparator as field => CompileListWithSeparator(code, field); CompileFields(code, field.Rule.Fields); CompileFields(code, field.Separator.Fields);
        | Predicate         as field => CompilePredicate        (code, field); CompileFields(code, field.Rule.Fields);
        | TokenCall         as field => CompileTokenCall        (code, field);
        | ExtensibleCall    as field => CompileExtensibleCall   (code, field);
        | SimpleCall        as field => CompileSimpleCall       (code, field);
      }
    }

    public abstract CompileTokenCall(code : SCG.List[PExpr], field : RuleStructureField.TokenCall) : void;
    public abstract CompileExtensibleCall(code : SCG.List[PExpr], field : RuleStructureField.ExtensibleCall) : void;
    public abstract CompileSimpleCall(code : SCG.List[PExpr], field : RuleStructureField.SimpleCall) : void;
    public abstract CompileList(code : SCG.List[PExpr], field : RuleStructureField.List) : void;
    public abstract CompileListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void;
    public abstract CompilePredicate(code : SCG.List[PExpr], field : RuleStructureField.Predicate) : void;
    public abstract CompileOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void;
    public abstract CompileTokenString(code : SCG.List[PExpr], field : RuleStructureField.TokenString) : void;
  }
}
