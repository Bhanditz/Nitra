using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using Nemerle.Compiler;

namespace N2.Compiler
{
  internal sealed partial class PatchAstMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment     : EmitterEnvironment { get { Owner.Environment } }
    public override ConstantEmitter : IConstantEmitter   { get { Owner } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner         = owner;
      _tb           = tb;
      RuleStructure = ruleStructure;
    }

    public Emit() : void
    {
      _tb.DefineConditional(<[decl:
        public override PatchAst(startPos : int, mutable startState : int, errorIndex : int, frame : N2.Internal.RecoveryStackFrame, parser : N2.Internal.Parser) : bool
        {
          $(if (Owner.Environment.IsIdeMode)
            <[ ignore(startPos, startState, stack, parser); ]>
          else
            CompileAst(RuleStructure))
        }
      ]>);
    }

    public override CompileEmpty            (_code : SCG.List[PExpr], _field : RuleStructureField.Empty)             : void { throw NotSupportedException() }
    public override CompileTokenCall        (_code : SCG.List[PExpr], _field : RuleStructureField.TokenCall)         : void { throw NotSupportedException() }
    public override CompileExtensibleCall   (_code : SCG.List[PExpr], _field : RuleStructureField.ExtensibleCall)    : void { throw NotSupportedException() }
    public override CompileSimpleCall       (_code : SCG.List[PExpr], _field : RuleStructureField.SimpleCall)        : void { throw NotSupportedException() }
    public override CompileList             (_code : SCG.List[PExpr], _field : RuleStructureField.List)              : void { throw NotSupportedException() }
    public override CompileListWithSeparator(_code : SCG.List[PExpr], _field : RuleStructureField.ListWithSeparator) : void { throw NotSupportedException() }
    public override CompileOption           (_code : SCG.List[PExpr], _field : RuleStructureField.Option)            : void { throw NotSupportedException() }
    public override CompileTokenString      (_code : SCG.List[PExpr], _field : RuleStructureField.TokenString)       : void { throw NotSupportedException() }
  }
}
