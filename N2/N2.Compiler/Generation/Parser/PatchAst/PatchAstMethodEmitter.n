using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using Nemerle.Compiler;

namespace N2.Compiler
{
  internal sealed partial class PatchAstMethodEmitter : MethodEmitter
  {
    public Owner : RuleParserEmitter { get; }
    public RuleStructure : RuleStructure.Ast;
    private _tb : TypeBuilder;
    public override Environment : EmitterEnvironment { get { Owner.Environment } }

    public this(owner : RuleParserEmitter, tb : TypeBuilder, ruleStructure : RuleStructure.Ast)
    {
      Owner         = owner;
      _tb           = tb;
      RuleStructure = ruleStructure;
      //_data         = RuleStructureDataContainer(ruleStructure, this, RuleStructureData, RuleStructureFieldData);
    }

    public Emit() : void
    {
      _tb.DefineConditional(<[decl:
        public PatchAst(failPos : int, startPos : int, startState : int, stack : list[N2.Internal.RecoveryStackFrame].Cons, parser : N2.Internal.Parser) : void
        {
          $(if (Owner.Environment.IsIdeMode)
            <[ ignore(failPos, startPos, startState, stack, parser); ]>
          else
            CompileAst(RuleStructure))
        }
      ]>);
    }
  }
}
