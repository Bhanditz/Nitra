using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal sealed partial class PatchAstMethodEmitter : MethodEmitter
  {
    public override CompileListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void
    {
      def ruleCode = SCG.List();
      CompileFields(ruleCode, field.Rule);

      code.Add(<[
        if (failState == $(field.State))
        {
          level = $(field.Level);
          startState = $(GetNewStartState(field));
        }
        else when ($(field.State) < failState && failState <= $(field.Rule.NotMarkerFields.Last().State))
        {
          ..$ruleCode
        }
      ]>);

    }
  }
}
