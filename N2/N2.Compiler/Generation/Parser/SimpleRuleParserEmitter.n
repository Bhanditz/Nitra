using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class SimpleRuleParserEmitter : RuleParserEmitter
  {
    public Rule : Rule.Sequence { get; }

    public this(owner : SyntaxModuleEmitter, ruleSymbol : SimpleRuleSymbol)
    {
      base(owner, ruleSymbol);
      this.Rule = ruleSymbol.Rule;
    }

    [RecordIgnore] private mutable _parserTb : TypeBuilder;

    public override DefineParser(astSize : out int, rootAstStruct : out option[RootAstStruct2], externalCalls : List[RuleSymbol]) : void
    {
      assert(_parserTb == null);
      def implClass = <[decl:
        public class $(this.RuleSymbol.DecorateRuleClassName() : dyn) : N2.Internal.SimpleRuleParser
        {
          public this(ruleId : int, grammar : N2.CompositeGrammar)
          {
            base(grammar, $(Owner.Environment.GetDescriptorClassRef(this.RuleSymbol.RuleSymbol)).StaticDescriptor, ruleId);
          }
        }
      ]>;
      _parserTb = Owner.GrammarImplTB.DefineNestedType(implClass);
      MakeRuleFields(this.RuleSymbol, this.Rule, out astSize, out rootAstStruct, externalCalls);
    }

    public override DefineParserMethods() : void
    {
      assert(_parserTb != null);
      DefineParse(_parserTb, this.RuleSymbol, this.Rule);
      DefineInit(_parserTb);
    }

    public override Emit() : void
    {
      assert(_parserTb != null);
      _parserTb.Compile();
    }
  }
}
