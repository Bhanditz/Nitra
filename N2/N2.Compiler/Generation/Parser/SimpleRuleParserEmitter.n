using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class SimpleRuleParserEmitter : RuleParserEmitter
  {
    public Rule : Rule2.Sequence { get; }

    public this(owner : SyntaxModuleEmitter, ruleDefinition : RuleDefinition2.Simple)
    {
      base(owner, ruleDefinition);
      Rule = ruleDefinition.Rule;
    }

    [RecordIgnore] private mutable _parserTb : TypeBuilder;

    public override DefineParser(astSize : out int, externalCalls : List[RuleRefSymbol]) : void
    {
      assert(_parserTb == null);
      def implClass = <[decl:
        public class $(RuleDefinition.DecorateRuleClassName() : dyn) : N2.Internal.RuleParser
        {
          public this(ruleId : int, grammar : N2.CompositeGrammar)
          {
            base(ruleId, grammar);
          }
        }
      ]>;
      _parserTb = Owner.GrammarImplTB.DefineNestedType(implClass);
      MakeRuleFields(RuleDefinition, Rule, out astSize, externalCalls);
    }

    public override DefineParserMethods() : void
    {
      assert(_parserTb != null);
      DefineParse(_parserTb, RuleDefinition, Rule);
      DefineInit(_parserTb);
    }

    public override Emit() : void
    {
      assert(_parserTb != null);
      _parserTb.Compile();
    }
  }
}
