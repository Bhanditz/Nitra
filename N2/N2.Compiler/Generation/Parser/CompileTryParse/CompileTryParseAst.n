using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal abstract partial class RuleParserEmitter
  {
    CompileFindRecoveryPositionAst(_ruleStructure : RuleStructure.Ast) : PExpr
    {
      <[ assert(false) ]>
    }

    public CompileTryParseAst(ruleStructure : RuleStructure.Ast) : PExpr
    {
      def cases = SCG.List();
      foreach (field in ruleStructure.AllFields)
        cases.Add(<[ case: | $(field.State) => $(field.ParserExtention().ParseLabel.Goto()) ]>);
      cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);

      def code = SCG.List();
      code.Add(<[ match (startState) { ..$cases } ]>);
      CompileFieldsForTryParse(code, ruleStructure.Fields);
      code.FlattenPExpr();
    }
    
    private CompileFieldsForTryParse(code : SCG.List[PExpr], fields : array[RuleStructureField]) : void
    {
      foreach (field in fields)
      {
        | TokenString       as field => CompileTryParseTokenString      (code, field)
        | Option            as field => CompileTryParseOption           (code, field)
        | List              as field => CompileTryParseList             (code, field)
        | ListWithSeparator as field => CompileTryParseListWithSeparator(code, field)
        | Predicate         as field => CompileTryParsePredicate        (code, field)
        | TokenCall         as field => code.Add(MakeCallCodeImpl(<[ $(MakeTokenCall(field.Symbol))($CurTextPos, text) ]>, field))
        | ExtensibleCall    as field => code.Add(MakeSyntaxCallCode(MakeCall(field.Symbol, field.BindingPower), field))
        | SimpleCall        as field => code.Add(MakeSyntaxCallCode(MakeCall(field.Symbol), field))
      }
    }

    private CompileTryParseTokenString(code : SCG.List[PExpr], field : RuleStructureField.TokenString) : void
    {
      def makeStringCheckCode(str : string) : PExpr
      {
        if (str == "")
          <[ true ]>
        else
        {
          def len = str.Length;
          def check = if (len > 1) <[$CurTextPos + $((len - 1) : int)]> else <[ $CurTextPos ]>;

          def makeCharCheckCode(ch : char, i : int) : PExpr
          {
            def index = if (i <= 0) <[ $CurTextPos ]> else <[ $CurTextPos + $(i : int) ]>;
            <[ text[$index] == $(ch : char) ]>
          }
          def exprs = str.Select(makeCharCheckCode);
          def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);
          <[ $check < text.Length && $condExpr ]>
        }
      }
      def astSize = <[ $(field.String.Length) ]>;
      def checkCode = makeStringCheckCode(field.String);
      code.Add(<[
        $(field.ParserExtention().ParseLabel.Label());
          _ = $(field.SrcRule.ToString());
          if ($checkCode)
          {
            $CurTextPos += $astSize;
            $(field.ParserExtention().ContinueParseLabel.Goto());
          }
          else
            $(field.ParserExtention().FailParseLabel.Goto());
      ]>);
    }

    private CompileTryParseOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void
    {
    }

    private CompileTryParseList(code : SCG.List[PExpr], field : RuleStructureField.List) : void
    {
    }

    private CompileTryParseListWithSeparator(code : SCG.List[PExpr], field : RuleStructureField.ListWithSeparator) : void
    {
    }

    private CompileTryParsePredicate(code : SCG.List[PExpr], field : RuleStructureField.Predicate) : void
    {
      
    }
    
    
  }
}
