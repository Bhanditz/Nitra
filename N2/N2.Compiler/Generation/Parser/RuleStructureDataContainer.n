using N2.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal abstract class RuleStructureDataBase[Emitter]
  {
    public Emitter   : Emitter;
    public Structure : RuleStructure;
    public abstract Init() : void;
  }

  [Record]
  internal abstract class RuleStructureFieldDataBase[Emitter]
  {
    public Emitter   : Emitter;
    public Field     : RuleStructureField;
    public abstract Init() : void;
    
    public LabelSufix : string
    {
      [Memoize]
      get
      {
        def fieldName = Field.SrcRule.FieldName;
        def sufix = Field.GetType().Name + "_" + if (string.IsNullOrEmpty(fieldName)) "" else (fieldName + "_") + Field.State;
        sufix
      }
    }
  }

  internal sealed class RuleStructureDataContainer[Emitter, RuleStructureData, RuleStructureFieldData]
    where RuleStructureData : RuleStructureDataBase[Emitter]
    where RuleStructureFieldData : RuleStructureFieldDataBase[Emitter]
  {
    public this
      ( ast                   : RuleStructure.Ast
      , emitter               : Emitter
      , newStructureData      : Emitter * RuleStructure -> RuleStructureData
      , newStructureFieldData : Emitter * RuleStructureField -> RuleStructureFieldData
      )
    {
      def initStructure(structure : RuleStructure)
      {
        def data = newStructureData(emitter, structure);
        data.Init();
        RuleStructureData.Add(structure, data);
        foreach (field in structure.Fields)
          initField(field);
      }
      and initField(field : RuleStructureField)
      {
        def data = newStructureFieldData(emitter, field);
        data.Init();
        RuleStructureFieldData.Add(field, data);
        match (field)
        {
          | Option           (rule)                     => initStructure(rule);
          | List             (rule, _, _)               => initStructure(rule);
          | ListWithSeparator(rule, separator, _, _, _) => initStructure(rule); initStructure(separator);
          | _ => ()
        }
      }
      initStructure(ast);
    }

    public RuleStructureData      : Hashtable[RuleStructure, RuleStructureData] = Hashtable();
    public RuleStructureFieldData : Hashtable[RuleStructureField, RuleStructureFieldData] = Hashtable();
  }
}
