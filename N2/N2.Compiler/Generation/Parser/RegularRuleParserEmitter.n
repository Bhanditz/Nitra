using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class RegularRuleParserEmitter : RuleParserEmitter
  {
    public Fsm : FSM { get; }

    public this (owner : SyntaxModuleEmitter, ruleSymbol : RegularRuleSymbol)
    {
      base(owner, ruleSymbol);
      Fsm = ruleSymbol.Fsm;
    }

    public override DefineParser(astSize : out int, rootAstStruct : out option[RootAstStruct2], externalCalls : List[RuleRefSymbol]) : void
    {
      _ = externalCalls;
      def methodName = RuleSymbol.DecorateRuleName();
      def body =
        if (Owner.Environment.IsIdeMode)
          <[ _ = pos; _ = text; 0 ]>
        else
          FsmEmitter(Owner.Environment, Fsm).Emit();
      DefineImplementation(<[decl:
        public static $(methodName : dyn)(pos : int, text : string) : int
        {
          unchecked
          {
            mutable c : char;
            _ = c; // eliminate warning "a local value c was never used"
            $body;
          }
        }
      ]>);
      astSize = 0;
      rootAstStruct = None();
    }

    public override DefineParserMethods() : void
    {
    }

    public override Emit() : void
    {
    }
  }
}
