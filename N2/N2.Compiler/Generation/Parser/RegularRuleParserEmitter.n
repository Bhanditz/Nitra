using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class RegularRuleParserEmitter : RuleParserEmitter
  {
    public RuleDefinition : RuleDefinition2.Regular { get; }
    private _fsmEmitter : FsmEmitter;

    public this (owner : SyntaxModuleEmitter, ruleDefinition : RuleDefinition2.Regular)
    {
      base(owner);
      RuleDefinition = ruleDefinition;
      _fsmEmitter = FsmEmitter(owner.Environment, ruleDefinition.Fsm);
    }

    public override DefineParser() : void
    {
      def methodName = RuleDefinition.DecorateRuleName();
      def body = _fsmEmitter.Emit();
      DefineImplementation(<[decl:
        public static $(methodName : dyn)(pos : int, text : string) : int
        {
          unchecked
          {
            mutable c : char;
            _ = c; // eliminate warning "a local value c was never used"
            $body;
          }
        }
      ]>);
    }

    public override Emit() : void
    {
    }
  }
}
