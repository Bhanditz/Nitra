using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class ExtentionPostfixRuleParserEmitter : RuleParserEmitter
  {
    public RuleDefinition : RuleDefinition2.ExtentionPostfix { get; }

    [RecordIgnore] private mutable _parserTb : TypeBuilder;

    public override DefineParser() : void
    {
      def className = DecorateRuleClassName(RuleDefinition);
      def implClass = <[decl:
        public class $(className : dyn) : N2.Internal.ExtentionRuleParser
        {
          public this(ruleId : int, grammar : N2.CompositeGrammar)
          {
            base(ruleId, grammar, char.MinValue, char.MaxValue);//TODO: Fix me.
          }
        }
      ]>;
      _parserTb = Owner.GrammarImplTB.DefineNestedType(implClass);
    }

    public override Emit() : void
    {
      assert(_parserTb != null);
      DefineParse(_parserTb, RuleDefinition, RuleDefinition.Rule);
      DefineInit(_parserTb);
      _parserTb.Compile();
    }
  }
}
