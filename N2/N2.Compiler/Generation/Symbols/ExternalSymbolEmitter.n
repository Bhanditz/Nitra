using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class ExternalSymbolEmitter
  {
    public Environment        : EmitterEnvironment { get; }
    public TargetSymbolType   : TypeBuilder        { get; }
    public ExternalSymbolType : TypeBuilder        { get; }

    public this (environment : EmitterEnvironment, symbolType : TypeBuilder)
    {
      Environment        = environment;
      TargetSymbolType   = symbolType;
      ExternalSymbolType = TargetSymbolType.GlobalEnv.EnterIntoNamespace(["TEMP"]).Define(<[ decl:
        public sealed class $("External" + symbolType.Name : usesite) : $(symbolType.GetMemType() : typed)
        {
        }
      ]>);
    }

    public DefineMembers() : void
    {
      ExternalSymbolType.DefineConditional(<[ decl: 
        public this(name : string)
        {
          base(name);
        }
      ]>);

      ExternalSymbolType.Define(<[ decl: 
        public override Locations : list[N2.Location]
        {
          get { [] }
        }
      ]>);

      ExternalSymbolType.Define(<[ decl: 
        public override FirstLocation : N2.Location
        {
          get { N2.Location.Default }
        }
      ]>);

      def makeDescriptionText(text) : string
      {
        def length =
        {
          def symbolText = "Symbol";
          if (text.EndsWith(symbolText))
            text.Length - symbolText.Length
          else
            text.Length;
        }
        def buffer = System.Text.StringBuilder();
        mutable needWordbreak = false;
        for (mutable i = 0; i < length; ++i)
        {
          def c = text[i];
          if (char.IsUpper(c))
          {
            when (needWordbreak)
            {
              _ = buffer.Append(' ');
              needWordbreak = false;
            }
          }
          else
            needWordbreak = true;
          _ = buffer.Append(char.ToLowerInvariant(c));
        }
        buffer.ToString()
      }
      ExternalSymbolType.Define(<[ decl: 
        public override Description : string
        {
          get { $(makeDescriptionText(ExternalSymbolType.Name) : string) }
        }
      ]>);
    }

    public Emit() : void
    {
      ExternalSymbolType.Compile();
    }
  }
}
