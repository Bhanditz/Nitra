using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class ExternalSymbolEmitter
  {
    public Environment        : EmitterEnvironment { get; }
    public TargetSymbolType   : TypeBuilder        { get; }
    public ExternalSymbolType : TypeBuilder        { get; }

    private _serializationEmitter : BinarySerializationEmitter;

    private sealed class SymbolProperty
    {
      public this(property : IProperty)
      {
        Property = property;
      }

      public Property           : IProperty { get; }
      public OverriddenProperty : IProperty { get; set; }
    }

    public this (environment : EmitterEnvironment, symbolType : TypeBuilder, serializationEmitter : BinarySerializationEmitter)
    {
      Environment           = environment;
      TargetSymbolType      = symbolType;
      _serializationEmitter = serializationEmitter;
      ExternalSymbolType    = TargetSymbolType.GlobalEnv.EnterIntoNamespace(["TEMP"]).Define(<[ decl:
        public sealed class $("External" + symbolType.Name : usesite) : $(symbolType.GetMemType() : typed), N2.Serialization.IImportableSymbol
        {
        }
      ]>);
      ExternalSymbolType.DisableImplicitConstructor();
    }

    public DefineMembers() : void
    {
      TargetSymbolType.DefineConditional(<[ decl: 
        SymbolTypeId : string implements N2.Serialization.ISymbol.SymbolTypeId
        {
          get { $(TargetSymbolType.FullName : string) }
        }
      ]>);

      def isSymbolProperty(p)
      {
        // TODO: add attribute check
        !_systemProperties.Contains(p.Name) && p.GetGetter()?.IsAbstract
      }
      def symbolProperties = TargetSymbolType
        .GetProperties(BindingFlags.Instance | BindingFlags.Public)
        .MapFiltered(isSymbolProperty, SymbolProperty(_));

      def serializeBody = List();
      serializeBody.Add(<[ ignore(writer, symbolRefWriter) ]>);
      foreach (prop in symbolProperties)
        serializeBody.Add(_serializationEmitter.MakeMemberSerializationCode(TargetSymbolType.GetMemType(), prop.Property, <[ this ]>));
      serializeBody.Add(<[ writer.Write(N2.Serialization.TypeTag.Empty :> byte); ]>);

      TargetSymbolType.DefineConditional(<[ decl: 
        Serialize(writer : System.IO.BinaryWriter, symbolRefWriter : N2.Serialization.ISymbolRefWriter) : void implements N2.Serialization.IExportableSymbol.Serialize
        {
          ..$(serializeBody.ToNList())
        }
      ]>);

      foreach (prop in symbolProperties)
        DefineSymbolProperty(prop);

      ExternalSymbolType.Define(<[ decl:
        public override Description : string { get { $(MakeDescriptionText(ExternalSymbolType.Name) : string) } }
      ]>);

      ExternalSymbolType.DefineConditional(<[ decl:
        public static ReadSymbols(symbolRefReader : N2.Serialization.ISymbolRefReader, buffer : System.IO.BinaryReader) : void
        {
          def blockSize   = buffer.ReadInt32();
          def blockEndPos = blockSize + buffer.BaseStream.Position;
          while (buffer.BaseStream.Position < blockEndPos)
          {
            def symbolId = buffer.ReadInt32();
            def nodeId   = buffer.ReadInt32();
            if (nodeId == 0)
            {
              def name     = buffer.ReadString();
              def bodySize = buffer.ReadInt32();
              def location = N2.Location.Default;
              def symbol   = $(ExternalSymbolType.GetMemType() : typed)(location, name, symbolRefReader.AssemblyId);
              symbolRefReader.Register(symbol, symbolId, buffer.BaseStream.Position);
              _ = buffer.BaseStream.Seek(bodySize, System.IO.SeekOrigin.Current);
            }
            else
            {
              def bodySize = buffer.ReadInt32();
              def node     = symbolRefReader.GetNode(nodeId);
              def location = N2.Location.Default;
              def symbol   = $(ExternalSymbolType.GetMemType() : typed)(location, node.PartName, symbolRefReader.AssemblyId);
              node.SetSymbol(symbol, location);
              symbolRefReader.Register(symbol, symbolId, buffer.BaseStream.Position);
              _ = buffer.BaseStream.Seek(bodySize, System.IO.SeekOrigin.Current);
            }
          }
        }
      ]>);

      def deserializeBody = List();
      deserializeBody.Add(<[ ignore(reader, symbolRefReader) ]>);
      deserializeBody.Add(_serializationEmitter.MakeMembersDeserializationCode(ExternalSymbolType.GetMemType(), symbolProperties.Map(_.OverriddenProperty), <[ this ]>));

      ExternalSymbolType.DefineConditional(<[ decl:
        Deserialize(reader : System.IO.BinaryReader, symbolRefReader : N2.Serialization.ISymbolRefReader) : void implements N2.Serialization.IImportableSymbol.Deserialize
        {
          ..$(deserializeBody.ToNList())
        }
      ]>);

      foreach (ctor when !ctor.IsStatic in TargetSymbolType.GetConstructors())
        match (ctor.GetParameters())
        {
          | [p1, p2] when p1.Type.Equals(Environment.LocationTypeVar) && p2.Type.Equals(Environment.Manager.InternalType.String) =>
            ExternalSymbolType.Define(<[ decl:
              public this(definition : N2.Location, name : string, assemblyId : byte)
              {
                base(definition, name);
                AssemblyId = assemblyId;
              }
            ]>);
            break;

          | [p1] when p1.Type.Equals(Environment.Manager.InternalType.String) =>
            ExternalSymbolType.Define(<[ decl:
              public this(definition : N2.Location, name : string, assemblyId : byte)
              {
                base(name);
                AssemblyId = assemblyId;
                _definition = definition;
              }
            ]>);
            ExternalSymbolType.Define(<[ decl: private          _definition   : N2.Location                                 ]>);
            ExternalSymbolType.Define(<[ decl: public  override Locations     : list[N2.Location] { get { [_definition] } } ]>);
            ExternalSymbolType.Define(<[ decl: public  override FirstLocation : N2.Location       { get {  _definition  } } ]>);
            break;

          | _ => ()
        }
    }

    public Emit() : void
    {
      ExternalSymbolType.Compile();
    }

    private DefineSymbolProperty(property : SymbolProperty) : void
    {
      property.OverriddenProperty = ExternalSymbolType.DefineAndReturn(<[ decl:
        public override $(property.Property.Name : usesite) : $(property.Property.GetMemType() : typed)
        {
          get;
          private set;
        }
      ]>) :> IProperty;
    }

    private static _systemProperties : HashSet[string] = HashSet(["Description", "Locations", "FirstLocation"]);

    private static MakeDescriptionText(text : string) : string
    {
      def length =
      {
        def symbolText = "Symbol";
        if (text.EndsWith(symbolText))
          text.Length - symbolText.Length
        else
          text.Length;
      }
      def buffer = System.Text.StringBuilder();
      mutable needWordbreak = false;
      for (mutable i = 0; i < length; ++i)
      {
        def c = text[i];
        if (char.IsUpper(c))
        {
          when (needWordbreak)
          {
            _ = buffer.Append(' ');
            needWordbreak = false;
          }
        }
        else
          needWordbreak = true;
        _ = buffer.Append(char.ToLowerInvariant(c));
      }
      buffer.ToString()
    }
  }
}
