using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Typing;

namespace N2.Compiler
{
  internal sealed class ExternalSymbolLoaderEmitter
  {
    public  Environment        : EmitterEnvironment      { get; }
    public  RootNamespace      : NamespaceSymbol         { get; }
    public  SymbolLoaderType   : TypeBuilder             { get; }
    private _exportableSymbols : List[Symbol] { get; }

    public this (environment : EmitterEnvironment, rootNamespace : NamespaceSymbol)
    {
      Environment        = environment;
      RootNamespace      = rootNamespace;
      _exportableSymbols = CollectExportableSymbols(rootNamespace);
      SymbolLoaderType   =
        if (_exportableSymbols.Count > 0)
          environment.Manager.CoreEnv.Define(<[ decl:
            internal sealed class N2Symbols
            {
            }
          ]>);
        else
          null;
    }

    public DefineMembers() : void
    {
      when (SymbolLoaderType != null)
      {
        def nsDeclarations = List();
        def nsVariables = Dictionary();
        def getNsVariable(node : HierarchyNode) : PExpr
        {
          mutable var;
          unless (nsVariables.TryGetValue(node, out var))
          {
            var =
              if (!string.IsNullOrEmpty(node.PartName))
              {
                def name = Util.tmpname(node.FullName);
                def decl = <[ def $(name : usesite) = $(getNsVariable(node.Parent)).AddNode([ $(node.PartName : string)]) ]>;
                nsDeclarations.Add(decl);
                <[ $(name : usesite) ]>;
              }
              else
                <[ rootNode ]>;
            nsVariables[node] = var;
          }
          var
        }

        def typeNames = Dictionary();
        def getTypeName(type)
        {
          mutable name;
          unless (typeNames.TryGetValue(type, out name))
          {
            name = PExpr.FromQualifiedIdentifier(Environment.Manager, type.FullName);
            typeNames[type] = name;
          }
          name
        }

        def symbolDeclarations = List();
        foreach (symbol in _exportableSymbols)
        {
          def symbolType = getTypeName((symbol :> IExportableSymbol).GetBaseSymbolType());
          def ctorName   = getTypeName((symbol :> IExportableSymbol).GetExternalSymbolType());
          def loc        = <[ N2.Location.Default ]>;
          def nsNode    = getNsVariable(symbol.Node.Parent);
          symbolDeclarations.Add(<[ _ = $nsNode.AddAndReport.[$symbolType]($ctorName($loc, $(symbol.Name : string)), $loc) ]>);
        }

        def buffer = List();
        buffer.Add(<[ def rootNode = rootNamespace.Node ]>);
        buffer.Add(<[ assert(string.IsNullOrEmtpy(rootNode.PartName)) ]>);
        buffer.AddRange(nsDeclarations);
        buffer.AddRange(symbolDeclarations);

        SymbolLoaderType.Define(<[ decl:
          public LoadSymbols(rootNamespace : NamespaceSymbol) : void
          {
            ..$(buffer.ToNList())
          }
        ]>);
      }
    }

    public Emit() : void
    {
      when (SymbolLoaderType != null)
        SymbolLoaderType.Compile();
    }

    private static CollectExportableSymbols(rootNamespace : NamespaceSymbol) : List[Symbol]
    {
      def buffer = List();
      def visitNode(node)
      {
        foreach (symbol in node.GetChildren.[Symbol]())
        {
          when (symbol.AssemblyId == AssemblyIds.CurrentAssembly && symbol is IExportableSymbol)
            buffer.Add(symbol);
          visitNode(symbol.Node)
        }
      }
      visitNode(rootNamespace.Node);
      buffer
    }
  }
}
