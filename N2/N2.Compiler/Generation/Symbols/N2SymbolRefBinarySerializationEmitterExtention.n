using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class N2SymbolRefBinarySerializationEmitterExtention : IBinarySerializationEmitterExtention
  {
    _environment : EmitterEnvironment;

    [RecordIgnore] mutable _symbolRefWriterParam : string;
    [RecordIgnore] mutable _symbolRefReaderParam : string;

    public CreateParameters(emitter : BinarySerializationEmitter) : void
    {
      _symbolRefWriterParam = emitter.CreateSerializationParameter("symbolRefWriter", <[ N2.Serialization.ISymbolRefWriter ]>);
      _symbolRefReaderParam = emitter.CreateDeserializationParameter("symbolRefReader", <[ N2.Serialization.ISymbolRefReader ]>);
    }

    public IsSupportedType(type : FixedType) : bool
    {
      type.TryRequire(_environment.IExportableSymbolTypeVar)
       || type.TryRequire(_environment.SymbolTypeVar)
       || type.Equals(_environment.LocationTypeVar)
    }

    public MakeWriteCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(_environment.IExportableSymbolTypeVar))
        <[
          $(_symbolRefWriterParam : usesite).WriteSymbolRef(obj, writer);
        ]>
      else if (type.TryRequire(_environment.SymbolTypeVar))
        <[
          assert2(obj is N2.Serialization.IExportableSymbol);
          $(_symbolRefWriterParam : usesite).WriteSymbolRef(obj :> N2.Serialization.IExportableSymbol, writer);
        ]>
      else if (type.Equals(_environment.LocationTypeVar))
        <[
          $(_symbolRefWriterParam : usesite).WriteLocation(obj, writer);
        ]>
      else
        assert(false)
    }

    public MakeReadCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(_environment.IExportableSymbolTypeVar) || type.TryRequire(_environment.SymbolTypeVar))
        <[
          ignore(typeCode);
          $(_symbolRefReaderParam : usesite).ReadSymbolRef(reader) :> $(type : typed);
        ]>
      else if (type.Equals(_environment.LocationTypeVar))
        <[
          ignore(typeCode);
          $(_symbolRefReaderParam : usesite).ReadLocation(reader);
        ]>
      else
        assert(false)
    }
  }
}
