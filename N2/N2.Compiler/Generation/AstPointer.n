using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  public interface IVariableEmitter
  {
    Environment : EmitterEnvironment { get; }
    CreateVariable(name : string) : string;
  }

  public class AstPointer
  {
    private Structure : RuleStructure;
    public  Name      : string;
    public  Var       : PExpr { get { <[ $(Name : dyn) ]> } }

    private this(ruleStructure : RuleStructure, name : string)
    {
      Structure = ruleStructure;
      Name      = name;
    }

    public static New(ruleStructure : RuleStructure, variableEmitter : IVariableEmitter, prefix : string) : AstPointer
    {
      AstPointer(ruleStructure, variableEmitter.CreateVariable(ruleStructure.MakeVariableName(prefix)));
    }

    public static Existing(ruleStructure : RuleStructure, name : string) : AstPointer
    {
      AstPointer(ruleStructure, name);
    }

    private Ref(headerField : RuleStructureHeaderField) : PExpr
    {
      if (object.ReferenceEquals(Structure, headerField.Owner))
        <[ parser.ast[$Var + $(headerField.Offset)] ]>
      else
        PExpr.Error("Type mismatch.")
    }

    public Set(headerField : RuleStructureHeaderField, value : PExpr) : PExpr
    {
      <[ $(Ref(headerField)) = $value ]>
    }

    public Get(headerField : RuleStructureHeaderField) : PExpr
    {
      <[ $(Ref(headerField)) ]>
    }

    private Ref(structField : RuleStructureField) : PExpr
    {
      CheckTypeAndReturn(structField, <[ parser.ast[$Var + $(structField.Offset)] ]>)
    }

    public Set(structField : RuleStructureField, value : PExpr) : PExpr
    {
      <[ $(Ref(structField)) = $value ]>
    }

    public GetSize(structField : RuleStructureField) : PExpr
    {
      CheckTypeAndReturn(structField, <[ parser.GetSize($Var + $(structField.Offset)) ]>)
    }

    public GetSkipAndSize(structField : RuleStructureField) : PExpr
    {
      CheckTypeAndReturn(structField, <[ parser.GetSkipAndSize($Var + $(structField.Offset)) ]>)
    }

    private CheckTypeAndReturn(structField : RuleStructureField, result : PExpr) : PExpr
    {
      if (object.ReferenceEquals(Structure, structField.Owner))
        if (structField.Size == 1)
          result
        else
          PExpr.Error("Invalid field access.")
      else
        PExpr.Error("Type mismatch.")
    }
  }
}
