using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class RuleDescriptorEmitter
  {
    public Owner          : SyntaxModuleEmitter { get; }
    public RuleDefinition : RuleDefinition2     { get; }

    [RecordIgnore] private mutable _descriptorTb : TypeBuilder;

    public DefineDescriptor(astSize : int) : void
    {
      assert(_descriptorTb == null);
      def baseType = match(RuleDefinition)
      {
        | ExtentionPoint   => <[ ExtensibleRuleDescriptor ]>
        | ExtentionPrefix  => <[ PrefixRuleDescriptor ]>
        | ExtentionPostfix => <[ PostfixRuleDescriptor ]>
        | Simple           => <[ SimpleRuleDescriptor ]>
        | Regular          => <[ RegularRuleDescriptor ]>
        | Marker           => assert(false)
      }
      def baseTypes = baseType :: if (RuleDefinition.IsStart) [<[ N2.IStartRuleDescriptor ]>] else [];
      def descriptorClass = <[decl:
        public sealed class $(RuleDefinition.DecorateRuleClassName() : dyn) : ..$baseTypes
        {
          private this() {}
        }
      ]>;
      when (RuleDefinition.IsExplicitSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.ExplicitSpacesAttribute ]>);
      when (RuleDefinition.IsSuppressTrailingSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.SuppressTrailingSpacesAttribute ]>);
      _descriptorTb = Owner.GrammarDescriptorImplTB.DefineNestedType(descriptorClass);
      _descriptorTb.DefineConditional(<[decl: public  override Name              : string                                          { get { $(RuleDefinition.RuleSymbol.Name : string) } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override Grammar           : N2.GrammarDescriptor                            { get { $(Owner.GrammarImplTB.GetMemType() : typed).StaticDescriptor } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override AstSize           : int                                             { get { $(astSize : int) } } ]>);
      _descriptorTb.DefineConditional(<[decl: private static   _staticDescriptor : $(RuleDefinition.DecorateRuleClassName() : dyn) = $(RuleDefinition.DecorateRuleClassName() : dyn)(); ]>);
      _descriptorTb.DefineConditional(<[decl: public  static   StaticDescriptor  : $(RuleDefinition.DecorateRuleClassName() : dyn) { get { _staticDescriptor } } ]>);
    }

    public Emit() : void
    {
      assert(_descriptorTb != null);
      _descriptorTb.Compile();
    }
  }
}
