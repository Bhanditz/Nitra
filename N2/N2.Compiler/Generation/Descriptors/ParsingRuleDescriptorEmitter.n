using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class ParsingRuleDescriptorEmitter
  {
    public Owner      : SyntaxModuleEmitter { get; }
    public RuleSymbol : RuleDefSymbol       { get; }

    [RecordIgnore] private mutable _descriptorTb : TypeBuilder;

    public NeedsAstInfo : bool { get { true } }

    public DefineDescriptor(astSize : int) : void
    {
      assert(_descriptorTb == null);
      def baseType = match(RuleSymbol)
      {
        | ExtensibleRuleSymbol      => <[ ExtensibleRuleDescriptor ]>
        | ExtentionRuleSymbol as rs =>
          match (rs.ExtentionType)
          {
            | Prefix                => <[ PrefixRuleDescriptor ]>
            | Postfix               => <[ PostfixRuleDescriptor ]>
          }
        | SimpleRuleSymbol          => <[ SimpleRuleDescriptor ]>
        | RegularRuleSymbol         => <[ RegularRuleDescriptor ]>
        | _                         => assert(false)
      }
      def baseTypes = baseType :: if (RuleSymbol.Options.IsStart) [<[ N2.IStartRuleDescriptor ]>] else [];
      def descriptorClass = <[decl:
        public sealed class $(RuleSymbol.DecorateRuleClassName() : dyn) : ..$baseTypes
        {
          private this() {}
        }
      ]>;
      when (RuleSymbol.Options.IsExplicitSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.ExplicitSpacesAttribute ]>);
      when (RuleSymbol.Options.IsSuppressTrailingSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.SuppressTrailingSpacesAttribute ]>);

      _descriptorTb = Owner.GrammarDescriptorImplTB.DefineNestedType(descriptorClass);
      _descriptorTb.DefineConditional(<[decl: public  override Name              : string                                          { get { $(RuleSymbol.Name : string) } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override Grammar           : N2.GrammarDescriptor                            { get { $(Owner.GrammarImplTB.GetMemType() : typed).StaticDescriptor } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override IdInGrammar       : int                                             { get { $(Owner.GetIdInGrammar(RuleSymbol) : int) } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override AstSize           : int                                             { get { $(astSize : int) } } ]>);
      _descriptorTb.DefineConditional(<[decl: private static   _staticDescriptor : $(RuleSymbol.DecorateRuleClassName() : dyn) = $(RuleSymbol.DecorateRuleClassName() : dyn)(); ]>);
      _descriptorTb.DefineConditional(<[decl: public  static   StaticDescriptor  : $(RuleSymbol.DecorateRuleClassName() : dyn) { get { _staticDescriptor } } ]>);

      when (RuleSymbol.Options.IsStart)
      {
        _descriptorTb.DefineConditional(<[decl:
          public Parse(source : N2.SourceSnapshot, parserHost : N2.ParserHost) : N2.ParseResult
          {
            parserHost.DoParsing(source, this)
          }
        ]>);
        Owner.GrammarImplTB.DefineConditional(<[ decl:
          public static $(RuleSymbol.Name + "RuleDescriptor" : usesite) : $(RuleSymbol.GetDescriptorClassRef())
          {
            get { $(RuleSymbol.GetDescriptorClassRef()).StaticDescriptor }
          }
        ]>);
      }

      match (RuleSymbol.Type)
      {
        | Chars => ()
        | Void  => _descriptorTb.DefineConditional(<[decl: public ResultType() : void {} ]>)
        | t     => _descriptorTb.DefineConditional(<[decl: public ResultType() : $(Owner.Environment.RuleTypeToNType(t) : typed) { mutable res; res } ]>)
      }

      def defineNewParserMethod(returnType)
      {
        _descriptorTb.DefineConditional(<[decl:
          public override NewParser(grammar : N2.CompositeGrammar) : $returnType
          {
            $(Owner.GrammarImplTB.GetMemType() : typed).$(RuleSymbol.DecorateRuleClassName() : dyn)(grammar.NewRuleId(this), grammar)
          }
        ]>);
      }
      def defineExtentionRuleMethods(baseRuleSymbol)
      {
        defineNewParserMethod(<[ N2.Internal.ExtentionRuleParser ]>);
        _descriptorTb.DefineConditional(<[decl:
          public override BaseRule : ExtensibleRuleDescriptor { get { $(baseRuleSymbol.GetDescriptorClassRef()).StaticDescriptor } }
        ]>);
      }
      match (RuleSymbol)
      {
        | ExtensibleRuleSymbol => ()
        | ExtentionRuleSymbol(BaseRule = RuleRef.Some(baseRuleSymbol), ExtentionType = Prefix) =>
          defineExtentionRuleMethods(baseRuleSymbol)

        | ExtentionRuleSymbol(BaseRule = RuleRef.Some(baseRuleSymbol), ExtentionType = Postfix(bindingPower, _)) =>
          defineExtentionRuleMethods(baseRuleSymbol);
          _descriptorTb.DefineConditional(<[decl: public override BindingPower : int { get { $(bindingPower : int) } } ]>);

        | SimpleRuleSymbol  => defineNewParserMethod(<[ N2.Internal.SimpleRuleParser ]>);
        | RegularRuleSymbol => ()
        | _       => assert(false)
      }
    }

    public Emit() : void
    {
      assert(_descriptorTb != null);
      _descriptorTb.Compile();
    }
  }
}
