using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class ParsingRuleDescriptorEmitter : RuleDescriptorEmitter, IVariableEmitter
  {
    [RecordIgnore] private mutable _descriptorTb : TypeBuilder;

    public override NeedsAstInfo : bool { get { true } }

    public override DefineDescriptor(astSize : int, rootAstStruct : option[RootAstStruct2]) : void
    {
      assert(_descriptorTb == null);
      def baseType = match(RuleDefinition)
      {
        | ExtentionPoint   => <[ ExtensibleRuleDescriptor ]>
        | ExtentionPrefix  => <[ PrefixRuleDescriptor ]>
        | ExtentionPostfix => <[ PostfixRuleDescriptor ]>
        | Simple           => <[ SimpleRuleDescriptor ]>
        | Regular          => <[ RegularRuleDescriptor ]>
        | Marker           => assert(false)
      }
      def baseTypes = baseType :: if (RuleDefinition.IsStart) [<[ N2.IStartRuleDescriptor ]>] else [];
      def descriptorClass = <[decl:
        public sealed class $(RuleDefinition.DecorateRuleClassName() : dyn) : ..$baseTypes
        {
          private this() {}
        }
      ]>;
      when (RuleDefinition.IsExplicitSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.ExplicitSpacesAttribute ]>);
      when (RuleDefinition.IsSuppressTrailingSpaces)
        descriptorClass.AddCustomAttribute(<[ N2.SuppressTrailingSpacesAttribute ]>);

      _descriptorTb = Owner.GrammarDescriptorImplTB.DefineNestedType(descriptorClass);
      _descriptorTb.DefineConditional(<[decl: public  override Name              : string                                          { get { $(RuleDefinition.RuleSymbol.Name : string) } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override Grammar           : N2.GrammarDescriptor                            { get { $(Owner.GrammarImplTB.GetMemType() : typed).StaticDescriptor } } ]>);
      _descriptorTb.DefineConditional(<[decl: public  override AstSize           : int                                             { get { $(astSize : int) } } ]>);
      _descriptorTb.DefineConditional(<[decl: private static   _staticDescriptor : $(RuleDefinition.DecorateRuleClassName() : dyn) = $(RuleDefinition.DecorateRuleClassName() : dyn)(); ]>);
      _descriptorTb.DefineConditional(<[decl: public  static   StaticDescriptor  : $(RuleDefinition.DecorateRuleClassName() : dyn) { get { _staticDescriptor } } ]>);

      when (RuleDefinition.IsStart)
        _descriptorTb.DefineConditional(<[decl:
          public Parse(source : N2.SourceSnapshot, parserHost : N2.ParserHost) : N2.ParseResult
          {
            parserHost.DoParsing(source, this)
          }
        ]>);

      match (RuleDefinition.Type)
      {
        | Chars => ()
        | Void  => _descriptorTb.DefineConditional(<[decl: public ResultType() : void {} ]>)
        | t     => _descriptorTb.DefineConditional(<[decl: public ResultType() : $(Owner.RuleTypeToNType(t) : typed) { mutable res; res } ]>)
      }

      def defineNewParserMethod(returnType)
      {
        _descriptorTb.DefineConditional(<[decl:
          public override NewParser(ruleId : int, grammar : N2.CompositeGrammar) : $returnType
          {
            $(Owner.GrammarImplTB.GetMemType() : typed).$(RuleDefinition.DecorateRuleClassName() : dyn)(ruleId, grammar)
          }
        ]>);
      }
      def defineExtentionRuleMethods(baseRuleSymbol)
      {
        defineNewParserMethod(<[ N2.Internal.ExtentionRuleParser ]>);
        _descriptorTb.DefineConditional(<[decl:
          public override BaseRule : ExtensibleRuleDescriptor { get { $(Owner.Environment.GetDescriptorClassRef(baseRuleSymbol)).StaticDescriptor } }
        ]>);
      }
      match (RuleDefinition)
      {
        | ExtentionPoint => ()
        | ExtentionPrefix(BaseRule = RuleRef(Ref = Some(baseRuleSymbol))) =>
          defineExtentionRuleMethods(baseRuleSymbol)

        | ExtentionPostfix(BaseRule = RuleRef(Ref = Some(baseRuleSymbol)), BindingPower = bindingPower) =>
          defineExtentionRuleMethods(baseRuleSymbol);
          _descriptorTb.DefineConditional(<[decl: public override BindingPower : int { get { $(bindingPower : int) } } ]>);

        | Simple  => defineNewParserMethod(<[ N2.Internal.RuleParser ]>);
        | Regular => ()
        | _       => assert(false)
      }

      DefineCreateAst(rootAstStruct);
      //TODO: implement these methods
      _descriptorTb.DefineConditional(<[decl:
        public override FillDebugAst(parser : N2.Debug.DebugParser, index : int, debugAst : array[object]) : void
        {
          ignore(parser, index, debugAst);
          throw System.NotImplementedException();
        }
      ]>);
      _descriptorTb.DefineConditional(<[decl:
        public override GetAstLength(parserHost : N2.ParserHost, ast : array[int], index : int) : int
        {
          ignore(parserHost, ast, index);
          throw System.NotImplementedException();
        }
      ]>);
      _descriptorTb.DefineConditional(<[ decl:
        public override GetSpans(parserHost : N2.ParserHost, ast : array[int], index : int, pos : int, length : int, startPos : int, endPos : int, spans : System.Collections.Generic.List[SpanInfo]) : void
        {
          ignore(parserHost, ast, index, pos, length, startPos, endPos, spans);
          throw System.NotImplementedException();
        }
      ]>)
    }

    public override Emit() : void
    {
      assert(_descriptorTb != null);
      _descriptorTb.Compile();
    }

    Environment : EmitterEnvironment implements IVariableEmitter.Environment { get { Owner.Environment } }

    CreateVariable(name : string) : PExpr implements IVariableEmitter.CreateVariable
    {
      <[ $(name : dyn) ]>
    }

    private DefineCreateAst(rootAstStruct : option[RootAstStruct2]) : void
    {
      def rootAstMaker(arguments : list[PExpr]) : PExpr
      {
        def arguments = <[ N2.Location(source, pos, curPos) ]> :: <[ [] ]> :: arguments;
        <[ $(Owner.RuleTypeToNType(RuleDefinition.Type) : typed).Ast(..$arguments) ]>
      }
      def internalAstMaker(_ : list[PExpr]) : PExpr
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
      def makeReader(structField : AstStruct2.StructField, astPointer : AstPointer2) : PExpr
      {
        match(structField.Field)
        {
          | RuleField2.TokenString
          | RuleField2.TokenCall =>
            <[ N2.NToken(curPos, curPos + curLength) ]>

          | RuleField2.ExternalAst(ruleSymbol = ruleSymbol) =>
            <[
              $(Owner.Environment.GetDescriptorClassRef(ruleSymbol))
                .StaticCreateAst(source, parserHost, ast, ast[$(astPointer.AstOffset(structField))], curPos)
            ]>

          | RuleField2.ExtentionPoint(ruleSymbol = ruleSymbol) =>
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              parserHost.GetRuleDescriptorById(ast[astIndex])
                .CreateAst(source, parserHost, ast, astIndex, curPos)
                :> $(Owner.RuleTypeToNType(ruleSymbol.Type) : typed)
            ]>

          | RuleField2.List(astStruct = itemStruct, NextRef = nextRef) =>
            def itemPointer   = AstPointer2(itemStruct, "astIndex", this);
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              if (astIndex > 0)
              {
                def astBuffer = System.Collections.Generic.List(16);
                def loop(astIndex)
                {
                  astBuffer.Add($(makeAst(itemStruct, itemPointer, internalAstMaker)));
                  def astIndex = ast[$(itemPointer.AstOffset(nextRef))];
                  when (astIndex > 0)
                    loop(astIndex);
                }
                loop(astIndex);
                Nemerle.Collections.NList.ToList(astBuffer)
              }
              else []
            ]>

          | RuleField2.List2(astRuleStruct = itemStruct, astSeparatorStruct = separatorStruct, NextRuleRef = nextItemRef, NextSeparatorRef = nextSeparatorRef, hangingSeparator = hangingSeparator) =>
            def itemPointer = AstPointer2(itemStruct, "astIndex", this);
            def separatorPointer = AstPointer2(separatorStruct, "separatorIndex", this);
            def readNextAst()
            {
              if (hangingSeparator)
                <[
                  separatorBuffer.Add($(makeAst(separatorStruct, separatorPointer, internalAstMaker)));
                  def nextAstIndex = ast[$(separatorPointer.AstOffset(nextSeparatorRef))];
                  when (nextAstIndex > 0)
                    loop(nextAstIndex);
                ]>
              else
                <[
                  def nextAstIndex = ast[$(separatorPointer.AstOffset(nextSeparatorRef))];
                  when (nextAstIndex > 0)
                  {
                    separatorBuffer.Add($(makeAst(separatorStruct, separatorPointer, internalAstMaker)));
                    loop(nextAstIndex);
                  }
                ]>
            }
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              if (astIndex > 0)
              {
                def astBuffer = System.Collections.Generic.List(16);
                def separatorBuffer = System.Collections.Generic.List(16);
                def loop(astIndex)
                {
                  astBuffer.Add($(makeAst(itemStruct, itemPointer, internalAstMaker)));
                  def separatorIndex = ast[$(itemPointer.AstOffset(nextItemRef))];
                  when (separatorIndex > 0)
                    $(readNextAst());
                }
                loop(astIndex);
                (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer))
              }
              else ([], [])
            ]>

          | RuleField2.Option(astStruct = valueAstStruct) =>
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              if (astIndex > 0)
                Some($(makeAst(valueAstStruct, AstPointer2(valueAstStruct, "astIndex", this), internalAstMaker)))
              else
                None()
            ]>

          | _ => assert(false)
        }
      }
      and makeAst(astStruct : AstStruct2, astPointer : AstPointer2, maker : list[PExpr] -> PExpr) : PExpr
      {
        def statements = SCG.List();
        def arguments = SCG.List();
        def visitStructField(structField : AstStruct2.StructField, isPrefixRef : bool) : void
        {
          def getLengthExpr()
          {
            if(isPrefixRef)
              <[
                curLength =
                {
                  def astIndex = ast[$(astPointer.AstOffset(structField))];
                  parserHost.GetRuleDescriptorById(ast[astIndex]).GetAstLength(parserHost, ast, astIndex)
                }
              ]>
            else
              <[ curLength = ast[$(astPointer.SizeOffset(structField))] ]>
          }
          match (structField.Field)
          {
            | RuleField2.Ast
            | RuleField2.Predicate => ()
            | RuleField2.Void =>
              statements.Add(getLengthExpr());
              statements.Add(<[ curPos += curLength ]>);

            | RuleField2.List   with incrementPos = false
            | RuleField2.List2  with incrementPos = false
            | RuleField2.Option with incrementPos = false
            | _                 with incrementPos = true =>
              def varName = Util.tmpname("ast");
              statements.Add(getLengthExpr());
              statements.Add(<[ def $(varName : usesite) = $(makeReader(structField, astPointer)) ]>);
              arguments.Add(<[ $(varName : usesite) ]>);
              when (incrementPos)
                statements.Add(<[ curPos += curLength ]>);
          }
        }
        when (astStruct is PostfixAstStruct2 as astStruct)
          visitStructField(astStruct.PrefixRef, true);
        foreach (sizeField in astStruct.SizeFields)
          visitStructField(sizeField, false);
        statements.Add(maker(arguments.ToNList()));
        <[ { ..$(statements.ToNList()) } ]>
      }
      match (RuleDefinition)
      {
        | Simple           when RuleDefinition.IsAst =>
          def astStruct  = rootAstStruct.Value;
          def astPointer = AstPointer2(astStruct, "index", this);
          _descriptorTb.DefineConditional(<[decl:
            public static StaticCreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : $(Owner.RuleTypeToNType(RuleDefinition.Type) : typed)
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              mutable curPos = pos;
              mutable curLength;
              ignore(source, parserHost, ast, index, curPos, curLength);
              $(makeAst(astStruct, astPointer, rootAstMaker))
            }
          ]>);
          _descriptorTb.DefineConditional(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              StaticCreateAst(source, parserHost, ast, index, pos)
            }
          ]>);

        | ExtentionPrefix  when RuleDefinition.IsAst
        | ExtentionPostfix when RuleDefinition.IsAst =>
          def astStruct  = rootAstStruct.Value;
          def astPointer = AstPointer2(astStruct, "index", this);
          _descriptorTb.DefineConditional(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              mutable curPos = pos;
              mutable curLength;
              ignore(source, parserHost, ast, index, curPos, curLength);
              $(makeAst(astStruct, astPointer, rootAstMaker))
            }
          ]>);

        | ExtentionPoint when RuleDefinition.IsAst =>
          def astStruct = ExtensibleAstStruct2(this, RuleDefinition);
          def astPointer = AstPointer2(astStruct, "index", this);
          _descriptorTb.DefineConditional(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              def astIndex = ast[$(astPointer.AstOffset(astStruct.AstRef))];
              parserHost.GetRuleDescriptorById(ast[astIndex]).CreateAst(source, parserHost, ast, astIndex, pos)
            }
          ]>);

        | _ =>
          _descriptorTb.DefineConditional(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              ignore(source, parserHost, ast, index, pos);
              throw System.NotImplementedException();
            }
          ]>);
      }
    }
  }
}
