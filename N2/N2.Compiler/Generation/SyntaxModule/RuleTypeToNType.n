using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace N2.Compiler
{
  internal partial class SyntaxModuleEmitter
  {
    public RuleTypeToNType(ruleType : RuleType2) : TypeVar
    {
      def ruleTypeToNType(_ : RuleType2)
      {
        | Chars        => Environment.NTokenTypeVar
        | Ref(symbol)  => BindFixedType(symbol.Node.Parent.FullNameParts + [MakePublicRuleName(symbol.Name)])
        | List(ty)     => FixedType.Class(Environment.ListTypeInfo, [ruleTypeToNType(ty)])
        | Option(Void) => FixedType.Void()
        | Option(ty)   => FixedType.Class(Environment.OptionTypeInfo, [ruleTypeToNType(ty)])
        | Tuple(types) =>
          match (types.MapFiltered(ty => !(ty is RuleType2.Void), ruleTypeToNType))
          {
            | [ty]  => ty
            | types => FixedType.Tuple(types)
          }

        | Void         => FixedType.Void()
      }
      ruleTypeToNType(ruleType)
    }

    private BindFixedType(typeName : list[string]) : FixedType
    {
      match (Env.LookupType(typeName))
      {
        | Some(ty) => FixedType.Class(ty, [])
        | None     => assert2(false); assert(false)
      }
    }
  }
}
