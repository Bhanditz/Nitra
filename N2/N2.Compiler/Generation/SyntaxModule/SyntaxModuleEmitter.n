using N2.Model;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal partial class SyntaxModuleEmitter
  {
    public Environment  : EmitterEnvironment { get; }
    public Env          : GlobalEnv          { get; }
    public SyntaxModule : SyntaxModuleData   { get; }

    public GrammarTB               : TypeBuilder { get; }
    public GrammarImplTB           : TypeBuilder { get; }
    public GrammarDescriptorImplTB : TypeBuilder { get; }

    private _allEmitters            : list[RuleDefinitionEmitter];
    private _extentionPointEmitters : list[RuleDefinitionEmitter];
    private _otherEmitters          : list[RuleDefinitionEmitter];

    public this(environment : EmitterEnvironment, syntaxModule : SyntaxModuleData)
    {
      Environment  = environment;
      SyntaxModule = syntaxModule;
      Env          = Environment.Manager.CoreEnv.EnterIntoNamespace(["TEMP"]).EnterIntoNamespace(syntaxModule.Name.Node.Parent.FullNameParts);

      GrammarTB               = Env.Define(<[ decl: public abstract partial class $(syntaxModule.Name.Name : usesite) { } ]>);
      GrammarImplTB           = GrammarTB.DefineNestedType(MakeGrammarImpl());
      GrammarDescriptorImplTB = GrammarImplTB.DefineNestedType(MakeGrammarDescriptorImpl());

      _allEmitters = SyntaxModule.RuleDefs.MapFiltered(_.IsAst, RuleDefinitionEmitter(this, _));
      (_extentionPointEmitters, _otherEmitters) = _allEmitters.Partition(x => x.RuleDefinition is RuleDefinition2.ExtentionPoint);
    }

    public DefineExtentionPointAstTypes() : void
    {
      foreach (emitter in _extentionPointEmitters)
        emitter.DefineAstTypes();
    }

    public DefineOtherAstTypes() : void
    {
      foreach (emitter in _otherEmitters)
        emitter.DefineAstTypes();
    }

    public DefineAstMembers() : void
    {
      foreach (emitter in _allEmitters)
        emitter.DefineAstMembers();
    }

    public Emit() : void
    {
      foreach (emitter in _allEmitters)
        emitter.Emit();
      GrammarDescriptorImplTB.Compile();
      GrammarImplTB.Compile();
      GrammarTB.Compile();
    }
  }
}
