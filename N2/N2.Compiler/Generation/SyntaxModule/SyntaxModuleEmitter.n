using N2.Model;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal partial class SyntaxModuleEmitter
  {
    public Manager      : ManagerClass     { get; }
    public Env          : GlobalEnv        { get; }
    public IsDebug      : bool             { get; }
    public SyntaxModule : SyntaxModuleData { get; }

    public GrammarTB               : TypeBuilder { get; }
    public GrammarImplTB           : TypeBuilder { get; }
    public GrammarDescriptorImplTB : TypeBuilder { get; }

    private _ruleDefinitionEmitters : list[RuleDefinitionEmitter];

    public this(manager : ManagerClass, syntaxModule : SyntaxModuleData)
    {
      Manager      = manager;
      SyntaxModule = syntaxModule;
      Env          = Manager.CoreEnv.EnterIntoNamespace(["TEMP"]).EnterIntoNamespace(syntaxModule.Name.Node.Parent.FullNameParts);
      IsDebug      = manager.Options.IsConstantDefined("DEBUG") || manager.Options.IsConstantDefined("PARSER_DEBUG");

      GrammarTB               = Env.Define(<[ decl: public abstract partial class $(syntaxModule.Name.Name : usesite) { } ]>);
      GrammarImplTB           = GrammarTB.DefineNestedType(MakeGrammarImpl());
      GrammarDescriptorImplTB = GrammarImplTB.DefineNestedType(MakeGrammarDescriptorImpl());

      _astType    = FixedType.Class(Manager.LookupTypeInfo("N2.Ast", 0), []);
      _ntokenType = FixedType.Class(Manager.LookupTypeInfo("N2.NToken", 0), []);
      _optionType = Manager.LookupTypeInfo("Nemerle.Core.option", 1);
      _listType   = Manager.LookupTypeInfo("Nemerle.Core.list", 1);

      _ruleDefinitionEmitters = SyntaxModule.RuleDefs.MapFiltered(_.IsAst, RuleDefinitionEmitter(this, _));
    }

    public DefineAstTypes() : void
    {
      foreach (emitter in _ruleDefinitionEmitters)
        emitter.DefineAstTypes();
    }

    public DefineAstMembers() : void
    {
      foreach (emitter in _ruleDefinitionEmitters)
        emitter.DefineAstMembers();
    }

    public Emit() : void
    {
      foreach (emitter in _ruleDefinitionEmitters)
        emitter.Emit();
      GrammarDescriptorImplTB.Compile();
      GrammarImplTB.Compile();
      GrammarTB.Compile();
    }

    private _astType    : FixedType;
    private _ntokenType : FixedType;
    private _optionType : TypeInfo;
    private _listType   : TypeInfo;
  }
}
