using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal module EnvironmentExtensions
  {
    public MakeLabel(this environment : EmitterEnvironment, name : string) : PExprLabel
    {
      PExprLabel(environment.Manager, name);
    }

    public MakeLabels(this environment : EmitterEnvironment, count : int) : array[PExprLabel]
    {
      def labels = array(count);
      for (mutable i = 0; i < labels.Length; ++i)
        labels[i] = MakeLabel(environment, $"label$i");
      labels
    }

    public GetDescriptorClassRef(this symbol : RuleSymbol) : PExpr
    {
      def path = symbol.Node.Parent.FullNameParts + [AssemblyConstants.GrammarImplName, AssemblyConstants.GrammarDescriptorImplName, symbol.DecorateRuleClassName()];
      PExprUtils.FromQualifiedIdentifier(path);
    }
  }
}
