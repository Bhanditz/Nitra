using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal module RuleNameDecorators
  {
    private DecorateRuleClassNameImpl(ruleDefinitionType : RuleDefinitionType, name : string) : string
    {
      match (ruleDefinitionType)
      {
        | ExtentionPoint   => $"_#point#___$(name)_"
        | ExtentionPrefix  => $"_#prefix#__$(name)_"
        | ExtentionPostfix => $"_#postfix#_$(name)_"
        | Simple           => $"_#simple#__$(name)_"
        | Regular          => $"_#regular#_$(name)_"
      }
    }

    public DecorateRuleClassName(this symbol : RuleRefSymbol, environment : EmitterEnvironment) : string
    {
      def ruleDefinitionType = match (symbol)
      {
        | symbol is ExternalRuleRefSymbol => symbol.RuleDefinitionType
        | _                               => environment.GetRuleDefinition(symbol).GetRuleDefinitionType()
      }
      DecorateRuleClassNameImpl(ruleDefinitionType, symbol.Name)
    }

    public DecorateRuleClassName(this rd : RuleDefinition2) : string
    {
      DecorateRuleClassNameImpl(rd.GetRuleDefinitionType(), rd.RuleSymbol.Name)
    }

    public DecorateRuleName(this symbol : RuleRefSymbol) : string
    {
      $"_#_$(symbol.Name)_"
    }

    public DecorateRuleName(this rd : RuleDefinition2) : string
    {
      DecorateRuleName(rd.RuleSymbol)
    }
  }
}
