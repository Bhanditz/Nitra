using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal interface IVariableEmitter
  {
    Environment : EmitterEnvironment { get; }
    CreateVariable(name : string) : PExpr;
  }

  internal class AstPointer
  {
    public AstStruct : AstStruct;
    public Var       : PExpr;
    public this(astStruct : AstStruct, name : string, variableEmitter : IVariableEmitter)
    {
      AstStruct = astStruct;
      Var       = variableEmitter.CreateVariable(name);
    }
    public this(astStruct : AstStruct, name : string, field : RuleField)
    {
      this(astStruct, $"$name$(field.Level)", field.Compiler);
    }

    public HeaderOffset(headerField : AstStruct.HeaderField) : PExpr
    {
      if (object.ReferenceEquals(AstStruct, headerField.Owner))
        <[ $Var + $(headerField.Offset) ]>
      else
        PExpr.Error("Type mismatch.")
    }
    public HeaderRef(headerField : AstStruct.HeaderField) : PExpr
    {
      <[ parser.ast[$(HeaderOffset(headerField))] ]>
    }

    public SizeOffset(structField : AstStruct.StructField) : PExpr
    {
      if (object.ReferenceEquals(AstStruct, structField.Owner))
        <[ $Var + $(structField.Offset) ]>
      else
        PExpr.Error("Type mismatch.")
    }
    public SizeRef(structField : AstStruct.StructField) : PExpr
    {
      <[ parser.ast[$(SizeOffset(structField))] ]>
    }
  }
}
