using N2.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class ListItemCounter
  {
    private _variableEmitter : IVariableEmitter;
    private _fieldLevel      : int;
    private _useCounter      : bool;

    private this(variableEmitter : IVariableEmitter, fieldLevel : int, useCounter : bool)
    {
      _variableEmitter = variableEmitter;
      _useCounter      = useCounter;
      _fieldLevel      = fieldLevel;
    }

    public this(variableEmitter : IVariableEmitter, field : RuleStructureField.List)
    {
      this(variableEmitter, field.Level, field.MinCount > 0 || field.MaxCount is Some(_))
    }

    public this(variableEmitter : IVariableEmitter, field : RuleStructureField.ListWithSeparator)
    {
      this(variableEmitter, field.Level, field.MinCount > 0 || field.MaxCount is Some(_))
    }

    public Init() : PExpr
    {
      if (_useCounter) <[ $(Ref())  = 0 ]> else <[ {} ]>
    }

    public Inc() : PExpr
    {
      if (_useCounter) <[ ++ $(Ref())   ]> else <[ {} ]>
    }

    public Dec() : PExpr
    {
      if (_useCounter) <[ -- $(Ref())   ]> else <[ {} ]>
    }

    public Ref() : PExpr
    {
      <[ $(_variableEmitter.CreateVariable($"counter$(_fieldLevel)") : dyn) ]>
    }
  }
}
