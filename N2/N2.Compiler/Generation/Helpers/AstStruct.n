using N2.Typing;
using Nemerle;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Model;

namespace N2.Compiler
{
  internal abstract class RootAstStruct2 : AstStruct2
  {
    public StateRef  : AstStruct2.HeaderField { get; private set; }

    public this(variableEmitter : IVariableEmitter, ruleField : RuleField2)
    {
      def okLabel   = variableEmitter.Environment.MakeLabel("Ast_Ok");
      def failLabel = variableEmitter.Environment.MakeLabel("Ast_Fail");
      base(variableEmitter, ruleField, <[ RuleId ]>, okLabel, failLabel);
      StateRef  = AstStruct2.HeaderField(this);
    }
  }

  [Record]
  internal class SimpleAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { false } }
  }

  [Record]
  internal class PrefixAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { true } }
  }

  [Record]
  internal class PostfixAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { true } }
  }

  internal class InternalAstStruct2 : AstStruct2
  {
    public override HasTerminator : bool { get { false } }
    public this(field : RuleField2, ruleId : PExpr, name : string = "")
    {
      def variableEmitter = field.Compiler : IVariableEmitter;
      def okLabel         = variableEmitter.Environment.MakeLabel($"$(field.GetType().Name)_$(name)_$(field.State)_Ok");
      def failLabel       = variableEmitter.Environment.MakeLabel($"$(field.GetType().Name)_$(name)_$(field.State)_Fail");
      base(variableEmitter, field, ruleId, okLabel, failLabel);
    }
    public this(field : RuleField2, ruleParserEmitter : RuleParserEmitter, name : string = "")
    {
      this(field, ruleParserEmitter.MakeRuleId(this), name);
    }
  }

  internal abstract class AstStruct2
  {
    public RuleField       : RuleField2;
    public VariableEmitter : IVariableEmitter;
    public AstId           : PExpr;
    public OkLabel         : PExprLabel;
    public FailLabel       : PExprLabel;

    public IdRef           : AstStruct2.HeaderField { get; private set; }
    public NextRef         : AstStruct2.HeaderField { get; private set; }

    public this(variableEmitter : IVariableEmitter, ruleField : RuleField2, astId : PExpr, okLabel : PExprLabel, failLabel : PExprLabel)
    {
      RuleField       = ruleField;
      IdRef           = AstStruct2.HeaderField(this);
      NextRef         = AstStruct2.HeaderField(this);
      VariableEmitter = variableEmitter;
      AstId           = astId;
      OkLabel         = okLabel;
      FailLabel       = failLabel;
    }

    public AstStart : PExpr { get { VariableEmitter.CreateVariable($"astStart$(RuleField.Level)") } }

    public mutable HeaderFields     : SCG.List[HeaderField] = SCG.List();
    public mutable SizeFields       : SCG.List[StructField] = SCG.List();

    public mutable AllocateState    : int;

    public SizesOffset            : int  { get { HeaderFields.Count } }
    public TerminatorOffset       : int  { get { HeaderFields.Count + SizeFields.Count } }

    public TerminatorSize         : int  { get { if (HasTerminator) 1 else 0 } }
    public abstract HasTerminator : bool { get; }

    public AstSize                : int { get { HeaderFields.Count + SizeFields.Count + TerminatorSize } }

    public class HeaderField
    {
      public Owner : AstStruct2;
      public Offset : int;
      public this(owner : AstStruct2)
      {
        Owner = owner;
        Offset = owner.HeaderFields.Count;
        owner.HeaderFields.Add(this);
      }
    }

    public class StructField
    {
      public Owner : AstStruct2;
      public Field : RuleField2;
      public SizeOffset : int;
      public this(owner : AstStruct2, field : RuleField2)
      {
        Owner = owner;
        Field = field;
        SizeOffset = owner.SizeFields.Count;
        owner.SizeFields.Add(this);
      }
    }
  }
}
