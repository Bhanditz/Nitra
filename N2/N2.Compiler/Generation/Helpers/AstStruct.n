using Nemerle;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Model;

namespace N2.Compiler
{
  internal abstract class RootAstStruct2 : AstStruct2
  {
    public IdRef     : AstStruct2.HeaderField { get; private set; }
    public NextRef   : AstStruct2.HeaderField { get; private set; }
    public StateRef  : AstStruct2.HeaderField { get; private set; }

    public this(compiler : RuleParserEmitter)
    {
      def okLabel   = compiler.Owner.Environment.MakeLabel("Ast_Ok");
      def failLabel = compiler.Owner.Environment.MakeLabel("Ast_Fail");
      base(compiler, okLabel, failLabel);
      IdRef     = AstStruct2.HeaderField(this);
      NextRef   = AstStruct2.HeaderField(this);
      StateRef  = AstStruct2.HeaderField(this);
    }
  }

  [Record]
  internal class SimpleAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { false } }
  }

  [Record]
  internal class PrefixAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { true } }
  }

  internal class PostfixAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { true } }
    public PrefixRef : AstStruct2.StructField;
    public this(compiler : RuleParserEmitter, rd : RuleDefinition2.ExtentionPostfix)
    {
      base(compiler);
      def field = RuleField2.ExtentionPoint(rd.RuleSymbol.FirstLocation.NLocation()/*loc*/, rd.BaseRule.Ref.Value, 0);
      PrefixRef = AstStruct2.StructField(this, field, true, false);
    }
  }

  internal class ExtensibleAstStruct2 : RootAstStruct2
  {
    public override HasTerminator : bool { get { false } }
    public AstRef  : AstStruct2.StructField;
    public BestRef : AstStruct2.StructField;
    public this(compiler : RuleParserEmitter, rd : RuleDefinition2)
    {
      base(compiler);
      def field = RuleField2.ExtentionPoint(rd.RuleSymbol.FirstLocation.NLocation()/*loc*/, rd.RuleSymbol, 0);
      AstRef  = AstStruct2.StructField(this, field, true, false);
      BestRef = AstStruct2.StructField(this, field, true, false);
    }
  }

  internal class InternalAstStruct2 : AstStruct2
  {
    public override HasTerminator : bool { get { false } }
    public this(field : RuleField2, name : string = "")
    {
      def okLabel   = field.Compiler.Owner.Environment.MakeLabel($"$(field.GetType().Name)_$(name)_$(field.State)_Ok");
      def failLabel = field.Compiler.Owner.Environment.MakeLabel($"$(field.GetType().Name)_$(name)_$(field.State)_Fail");
      base(field.Compiler, okLabel, failLabel);
    }
  }

  internal abstract class AstStruct2
  {
    public Compiler  : RuleParserEmitter;
    public OkLabel   : PExprLabel;
    public FailLabel : PExprLabel;

    public this(compiler : RuleParserEmitter, okLabel : PExprLabel, failLabel : PExprLabel)
    {
      Compiler  = compiler;
      OkLabel   = okLabel;
      FailLabel = failLabel;
    }

    public mutable HeaderFields     : SCG.List[HeaderField] = SCG.List();
    public mutable SizeFields       : SCG.List[StructField] = SCG.List();
    public mutable AstFields        : SCG.List[StructField] = SCG.List();

    public mutable AllocateState    : int;
    public mutable MultipleVariants : bool = false;

    public SizesOffset            : int  { get { HeaderFields.Count } }
    public TerminatorOffset       : int  { get { HeaderFields.Count + SizeFields.Count } }
    public AstOffset              : int  { get { TerminatorOffset + TerminatorSize } }

    public TerminatorSize         : int  { get { if (HasTerminator) 1 else 0 } }
    public abstract HasTerminator : bool { get; }

    public AstSize : int { get { HeaderFields.Count + SizeFields.Count + TerminatorSize + AstFields.Count } }

    public class HeaderField
    {
      public Owner : AstStruct2;
      public Offset : int;
      public this(owner : AstStruct2)
      {
        Owner = owner;
        Offset = owner.HeaderFields.Count;
        owner.HeaderFields.Add(this);
      }
    }

    public class StructField
    {
      public Owner : AstStruct2;
      public Field : RuleField2;
      public SizeOffset : int;
      public AstOffset  : int;
      public HaveSize : bool { get { SizeOffset >= 0 } }
      public HaveAst  : bool { get { AstOffset >= 0 } }
      public this(owner : AstStruct2, field : RuleField2, ast : bool, size : bool)
      {
        Owner = owner;
        Field = field;
        if (size)
        {
          SizeOffset = owner.SizeFields.Count;
          owner.SizeFields.Add(this);
        }
        else
        {
          SizeOffset = -1;
        }
        if (ast)
        {
          AstOffset = owner.AstFields.Count;
          owner.AstFields.Add(this);
        }
        else
        {
          AstOffset = -1;
        }
      }
    }
  }
}
