using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2.Compiler
{
  internal partial class RuleDefinitionEmitter
  {
    public DefineAstMembers() : void
    {
      when (_astTb != null)
      {
        CreateAstFields();
        DefineAstFields();
        DefineAstCtor();
        DefineAstGetDump();
      }
      when (_spliceTb != null)
        DefineSpliceGetDump();
      when (_errorTb != null)
        DefineErrorGetDump();
    }

    private CreateAstFields() : void
    {
      def fieldNameUniqueness = SCG.Dictionary();
      def plainAstFields = SCG.List();
      foreach (rule when !(rule.Type is RuleType2.Void) in RuleDefinition.GetSubRules())
      {
        def fieldName = if (string.IsNullOrEmpty(rule.FieldName)) "Node" else Utils.ToPascalCase(rule.FieldName);
        def fieldType = rule.Type;
        plainAstFields.Add(fieldName, fieldType);
        fieldNameUniqueness[fieldName] = !fieldNameUniqueness.ContainsKey(fieldName);
      }
      def fieldNameCounters = SCG.Dictionary();
      def finalAstFields = SCG.List();
      foreach ((fieldName, fieldType) in plainAstFields)
      {
        def indexedFieldName =
          if (fieldNameUniqueness[fieldName])
            fieldName
          else
          {
            mutable counter;
            _ = fieldNameCounters.TryGetValue(fieldName, out counter);
            counter += 1;
            fieldNameCounters[fieldName] = counter;
            if (char.IsDigit(fieldName, fieldName.Length - 1))
              fieldName + "_" + counter.ToString()
            else
              fieldName + counter.ToString()
          }
        finalAstFields.Add(indexedFieldName, fieldType);
      }
      _astFields = finalAstFields.ToNList();
    }

    private DefineAstFields() : void
    {
      foreach ((fieldName, fieldType) in _astFields)
        _astTb.DefineConditional(<[decl: public $(fieldName : usesite) : $(Owner.RuleTypeToNType(fieldType) : typed) ]>);
    }

    private DefineAstCtor() : void
    {
      def args = SCG.List();
      args.Add(<[ parameter: location : N2.Location ]>);
      args.Add(<[ parameter: error : list[N2.ErrorInfo] ]>);
      def init = SCG.List();
      init.Add(<[ base(location, error) ]>);
      foreach ((fieldName, fieldType) in _astFields)
      {
        args.Add(<[ parameter: $(fieldName : usesite) : $(Owner.RuleTypeToNType(fieldType) : typed)  ]>);
        init.Add(<[ this.$(fieldName : usesite) = $(fieldName : usesite) ]>);
      }
      _astTb.DefineConditional(<[decl: public this(..$(args.ToNList())) { ..$(init.ToNList()) } ]>);
    }

    private DefineAstGetDump() : void
    {
      def makeDump(expr : PExpr, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType2)
        {
          | _ when type.IsVoidDeep() => <[ () ]>
          | _ when Owner.RuleTypeToNType(type).TryUnify(Owner.Environment.NTokenTypeVar)
          | Chars        => <[ N2.Internal.AstDump.Token(GetText($expr)) ]>
          | Ref          => <[ $expr.GetDump(); ]>
          | List(type)   =>
            <[
              N2.Internal.AstDump.List($expr.Map(fun(_item)
              {
                $(makeDump(<[ $("_item" : dyn) ]>, type))
              }))
            ]>

          | Option(Void) => <[ () ]>
          | Option(type) =>
            <[
              match ($expr)
              {
                | Some(_item) => N2.Internal.AstDump.Option(Some($(makeDump(<[ $("_item" : dyn) ]>, type))));
                | _ => N2.Internal.AstDump.Option(None())
              }
            ]>

          | Tuple(types) when types.Count(ty => !(ty is RuleType2.Void)) == 1 => <[ $expr.GetDump(); ]>
          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType2.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => <[ $($"_item$n" : dyn) ]>);
            <[
              {
                def (..$names) = $expr;
                N2.Internal.AstDump.Tuple([..$(names.Zip(types).Map(makeDump))]);
              }
            ]>

          | Void => assert(false);
        }
      }
      def makeFieldDump(name, type) : PExpr
      {
        <[ N2.Internal.AstDump.Field($(name : string), $(makeDump(<[ this.$(name : dyn) ]>, type))) ]>
      }
      _astTb.DefineConditional(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Ast($(_baseTb.FullName : string), [..$(_astFields.Map(makeFieldDump))])
        }
      ]>);
    }

    private DefineSpliceGetDump() : void
    {
      _spliceTb.DefineConditional(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Splice($(_baseTb.FullName : string))
        }
      ]>);
    }

    private DefineErrorGetDump() : void
    {
      _errorTb.DefineConditional(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Error($(_baseTb.FullName : string), GetText())
        }
      ]>);
    }
  }
}
