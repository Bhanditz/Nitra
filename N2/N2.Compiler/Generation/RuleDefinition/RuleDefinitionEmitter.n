using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2.Compiler
{
  internal partial class RuleDefinitionEmitter
  {
    public Owner          : SyntaxModuleEmitter { get; }
    public RuleDefinition : RuleDefinition2     { get; }

    public this(owner : SyntaxModuleEmitter, ruleDefinition : RuleDefinition2)
    {
      Owner = owner;
      RuleDefinition = ruleDefinition;
    }

    mutable _baseTb    : TypeBuilder;
    mutable _astTb     : TypeBuilder;
    mutable _spliceTb  : TypeBuilder;
    mutable _errorTb   : TypeBuilder;
    mutable _astFields : list[string * RuleType2];

    public Emit() : void
    {
      when (_astTb != null)
        _astTb.Compile();
      when (_errorTb != null)
        _errorTb.Compile();
      when (_spliceTb != null)
        _spliceTb.Compile();
      _baseTb.Compile();
    }
  }
}
