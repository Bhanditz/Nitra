using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2.Compiler
{
  internal partial class RuleAstEmitter
  {
    public DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol =>
          CreateBaseAstTypeBuilder(defineType);
          CreateErrorAstTypeBuilder();
          CreateSpliceAstTypeBuilder();

        | SimpleRuleSymbol =>
          CreateBaseAstTypeBuilder(defineType);
          CreateErrorAstTypeBuilder();
          CreateSpliceAstTypeBuilder();
          CreateSimpleAstTypeBuilder();

        | ExtentionRuleSymbol as ruleSymbol =>
          CreateExtentionAstTypeBuilder(defineType, ruleSymbol.BaseRule.Value);

        | _ => assert(false)
      }
    }

    private CreateBaseAstTypeBuilder(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(_baseTb == null);
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol
        | SimpleRuleSymbol     =>
          _baseTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
            defineType(<[decl:
            public abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.AstTypeVar : typed)
            {
              public this(location : N2.Location)
              {
                base(location)
              }
            }
          ]>))

        | _ => assert2(false); assert(false)
      }
    }

    private CreateSimpleAstTypeBuilder() : void
    {
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class Ast : $(_baseTb.GetMemType() : typed)
        {
        }
      ]>));
    }

    private CreateExtentionAstTypeBuilder(defineType : ClassMember.TypeDeclaration -> TypeBuilder, baseRule : ExtensibleRuleSymbol) : void
    {
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        defineType(<[decl:
        public partial new class $(this.RuleSymbol.Name : usesite) : $(Environment.GetAstType(baseRule) : typed)
        {
        }
      ]>));
    }

    private CreateErrorAstTypeBuilder() : void
    {
      assert(_errorTb == null);
      _errorTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class ErrorAst : $(_baseTb.GetMemType() : typed)
        {
          public this(location : N2.Location)
          {
            base(location)
          }
        }
      ]>));
    }

    private CreateSpliceAstTypeBuilder() : void
    {
      assert(_spliceTb == null);
      _spliceTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class SpliceAst : $(_baseTb.GetMemType() : typed)
        {
          public this(location : N2.Location)
          {
            base(location)
          }
        }
      ]>));
    }
  }
}
