using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2.Compiler
{
  internal partial class RuleAstEmitter
  {
    public DefineTypes() : void
    {
      CreateBaseAstTypeBuilder();
      match (this.RuleSymbol)
      {
        | _ is ExtensibleRuleSymbol =>
          CreateErrorAstTypeBuilder();
          CreateSpliceAstTypeBuilder();

        | _ is SimpleRuleSymbol =>
          CreateErrorAstTypeBuilder();
          CreateSpliceAstTypeBuilder();
          CreateAstTypeBuilder();

        | _ is ExtentionRuleSymbol =>
          CreateAstTypeBuilder();

        | _ => assert(false)
      }
    }
    
    private CreateBaseAstTypeBuilder() : void
    {
      assert(_baseTb == null);
      match (this.RuleSymbol)
      {
        | _ is ExtensibleRuleSymbol with baseType = Owner.Environment.AstTypeVar
        | _ is SimpleRuleSymbol     with baseType = Owner.Environment.AstTypeVar
        | ExtentionRuleSymbol(BaseRule = ExtensibleRuleRef.Some(ExtensibleRuleSymbol(Type = RuleType.Ref as baseTypeRef)))
            with baseType = Owner.Environment.RuleTypeToNType(baseTypeRef) =>
          def mods = NemerleModifiers.Abstract %| NemerleModifiers.Public %| NemerleModifiers.Partial;
          def attrsAndMods = AttributesAndModifiers(mods, []);

          _baseTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
            Owner.GrammarTB.DefineNestedType(<[decl:
            ..$attrsAndMods class $(Owner.Environment.MakePublicRuleName(this.RuleSymbol) : dyn) : $(baseType : typed)
            {
              public this(location : N2.Location, errors : list[N2.ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>))

        | _ => assert2(false); assert(false)
      }
    }

    private CreateAstTypeBuilder() : void
    {
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl: 
        public partial new class Ast : $(_baseTb.GetMemType() : typed)
        {
        }
      ]>));
    }

    private CreateErrorAstTypeBuilder() : void
    {
      assert(_errorTb == null);
      _errorTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(), 
        _baseTb.DefineNestedType(<[decl: 
        public partial new class Error : $(_baseTb.GetMemType() : typed)
        {
          public this(location : N2.Location, errors : list[N2.ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
    }

    private CreateSpliceAstTypeBuilder() : void
    {
      assert(_spliceTb == null);
      _spliceTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl: 
        public partial new class Splice : $(_baseTb.GetMemType() : typed)
        {
          public this(location : N2.Location, errors : list[N2.ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
    }
  }
}
