using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2.Compiler
{
  [Record]
  internal partial class RuleAstEmitter : IAstEmitter
  {
    public Environment           : EmitterEnvironment   { get; }
    public RuleSymbol            : SyntaxRuleSymbol     implements IAstEmitter.Symbol { get; }
    public SymbolDeclarationSite : IRuleDeclarationSite { get { RuleSymbol.DeclarationSite } }
    public AstTypeBuilder        : TypeBuilder          { get { _baseTb } }

    [RecordIgnore] private mutable _baseTb    : TypeBuilder;
    [RecordIgnore] private mutable _astTb     : TypeBuilder;
    [RecordIgnore] private mutable _spliceTb  : TypeBuilder;
    [RecordIgnore] private mutable _errorTb   : TypeBuilder;
    [RecordIgnore] private mutable _astFields         : list[Rule];
    [RecordIgnore] private mutable _astFieldsWithVoid : list[Rule];

    private RuleName : string { get { $<#..$(RuleSymbol.ModuleRelativeName; ".")#> } }

    public Emit() : void
    {
      when (_astTb != null)    _astTb.Compile();
      when (_errorTb != null)  _errorTb.Compile();
      when (_spliceTb != null) _spliceTb.Compile();
      when (_baseTb != null)   _baseTb.Compile();
    }
  }
}
