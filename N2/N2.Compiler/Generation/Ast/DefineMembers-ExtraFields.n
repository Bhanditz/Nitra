using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2.Compiler
{
  internal partial class RuleAstEmitter
  {
    private DefineBaseAstRuleMethods() : void
    {
      foreach (field in RuleSymbol.RuleMethods)
      {
        | RuleMethod.AbstractSymbol  (Signature = signature, IsCached = isCached)
        | RuleMethod.DefPrivateSymbol(Signature = signature, IsCached = isCached) =>
          def n     = <[ $(field.Name : usesite) ]>.name;
          def attrs = <[ N2.Runtime.RuleMethodAttribute($(isCached : bool)) ]>;
          when (isCached)
            _baseTb.Define(<[ decl: public virtual $(cachingPropertyName(n) : name) : $(signature.Type) { get { throw System.NotImplementedException(); } } ]>);
          _baseTb.Define(<[ decl: [$attrs] public abstract $(n : name)(..$(signature.Params)) : $(signature.Type); ]>);

        | RuleMethod.DefSymbol (Signature = signature, IsCached = isCached, Body = body) =>
          def n     = <[ $(field.Name : usesite) ]>.name;
          def attrs = <[ N2.Runtime.RuleMethodAttribute($(isCached : bool)) ]>;
          if (RuleSymbol is SimpleRuleSymbol)
          {
            when (isCached)
              _baseTb.Define(<[ decl: public virtual $(cachingPropertyName(n) : name) : $(signature.Type) { get { throw System.NotImplementedException(); } } ]>);
            _baseTb.Define(<[ decl: [$attrs] public abstract $(n : name)(..$(signature.Params)) : $(signature.Type); ]>);
          }
          else
          {
            def body2 = if (isCached) addCaching(_baseTb, n, signature.Type, body.Expr, NemerleModifiers.Virtual) else body.Expr;
            def body3 = addRecursionCheck(_baseTb, body2);
            _baseTb.Define(<[ decl: [$attrs] public virtual  $(n : name)(..$(signature.Params)) : $(signature.Type) $body3 ]>);
          }

        | _ => ()
      }
    }

    private DefineAstRuleMethods() : void
    {
      foreach (field in RuleSymbol.RuleMethods)
      {
        | RuleMethod.DefPrivateSymbol (Signature = signature, IsCached = isCached, Body = body)
        | RuleMethod.DefSymbol        (Signature = signature, IsCached = isCached, Body = body) =>
          def n     = <[ $(field.Name : usesite) ]>.name;
          def flags = if (_baseTb != null) NemerleModifiers.Public %| NemerleModifiers.Override else NemerleModifiers.Public;
          def mods  = AttributesAndModifiers(flags, [<[ N2.Runtime.RuleMethodAttribute($(isCached : bool)) ]>]);
          def body2 = if (isCached) addCaching(_astTb, n, signature.Type, body.Expr, flags) else body.Expr;
          def body3 = addRecursionCheck(_astTb, body2);
          _astTb.Define(<[  decl: ..$mods $(n : name)(..$(signature.Params)) : $(signature.Type) $body3 ]>);

        | RuleMethod.OverrideSymbol(BaseRuleMethod = baseRuleMethodSymbol, Body = body) =>
          def n          = <[ $(field.Name : usesite) ]>.name;
          def signature  = baseRuleMethodSymbol.Value.GetRuleMethodSignature();
          def isCached   = baseRuleMethodSymbol.Value.GetRuleMethodIsCached();
          def parameters = signature.Params;
          def type       = signature.Type;
          def attrs      = <[ N2.Runtime.RuleMethodAttribute($(isCached : bool)) ]>;
          def body2      = if (isCached) addCaching(_astTb, n, type, body.Expr, NemerleModifiers.Override) else body.Expr;
          def body3      = addRecursionCheck(_astTb, body2);
          _astTb.Define(<[ decl: [$attrs] public override $(n : name)(..$parameters) : $type $body3 ]>);

        | _ => ()
      }
    }

    private DefineSpliceRuleMethods() : void
    {
      foreach (field in RuleSymbol.RuleMethods)
      {
        | RuleMethod.AbstractSymbol  (Signature = signature)
        | RuleMethod.DefPrivateSymbol(Signature = signature)
        | RuleMethod.DefSymbol       (Signature = signature) =>
          def n    = <[ $(field.Name : usesite) ]>.name;
          def body = SCG.List();
          foreach (p in signature.Params)
            body.Add(<[ _ = $(p.ReferencingExpr); ]>);
          body.Add(<[ throw System.InvalidOperationException("This method should not be invoked.") ]>);
          _spliceTb.Define(<[ decl:
            public override $(n : name)(..$(signature.Params)) : $(signature.Type)
            {
              ..$(body.ToNList())
            }
          ]>);

        | _ => ()
      }
    }

    private DefineMissingRuleMethods() : void
    {
      def ruleMethodsWithErrorHandler = SCG.HashSet();
      foreach (field is RuleMethod.RuleMethodMissingValueSymbol in RuleSymbol.RuleMethods)
        _ = ruleMethodsWithErrorHandler.Add(field.HandlingRuleMethod.Value);

      foreach (field in RuleSymbol.RuleMethods)
      {
        | RuleMethod.AbstractSymbol  (Signature = signature) when !ruleMethodsWithErrorHandler.Contains(field)
        | RuleMethod.DefPrivateSymbol(Signature = signature) when !ruleMethodsWithErrorHandler.Contains(field)
        | RuleMethod.DefSymbol       (Signature = signature) when !ruleMethodsWithErrorHandler.Contains(field) =>
          def n    = <[ $(field.Name : usesite) ]>.name;
          def body = SCG.List();
          foreach (p in signature.Params)
            body.Add(<[ _ = $(p.ReferencingExpr); ]>);
          def msg = $"An attempt to access '$(field.Name)' extra field of '$(RuleSymbol.Name)' rule which contains a parse error. Implement the 'missing' handler for this extra field.";
          body.Add(<[ throw System.NotImplementedException($(msg : string)) ]>);
          _missingTb.Define(<[ decl:
            public override $(n : name)(..$(signature.Params)) : $(signature.Type)
            {
              ..$(body.ToNList())
            }
          ]>);

        | RuleMethod.RuleMethodMissingValueSymbol(Body = body, HandlingRuleMethod = handlingField) =>
          def n          = <[ $(field.Name : usesite) ]>.name;
          def signature  = handlingField.Value.GetRuleMethodSignature();
          def parameters = signature.Params;
          def type       = signature.Type;
          _missingTb.Define(<[ decl: public override $(n : name)(..$parameters) : $type $(body.Expr) ]>);

        | _ => ()
      }
    }

    private DefineAmbiguousRuleMethods() : void
    {
      foreach (field in RuleSymbol.RuleMethods)
      {
        | RuleMethod.AbstractSymbol  (Signature = signature)
        | RuleMethod.DefPrivateSymbol(Signature = signature)
        | RuleMethod.DefSymbol       (Signature = signature) =>
          def n    = <[ $(field.Name : usesite) ]>.name;
          def body = SCG.List();
          foreach (p in signature.Params)
            body.Add(<[ _ = $(p.ReferencingExpr); ]>);
          def msg = $"An attempt to access '$(field.Name)' extra field of '$(RuleSymbol.Name)' rule which contains ambiguous node.";
          body.Add(<[ throw System.NotImplementedException($(msg : string)) ]>);
          _ambiguousTb.Define(<[ decl:
            public override $(n : name)(..$(signature.Params)) : $(signature.Type)
            {
              ..$(body.ToNList())
            }
          ]>);

        | _ => ()
      }
    }

    private static cachingPropertyName(ruleMethodName : Name) : Name
    {
      regexp match (ruleMethodName.Id)
      {
        | "(Get|Compute|Calculate|Calc|Create|Make|Evaluate|Eval)(?<baseName>.*)" => <[ $(baseName : usesite) ]>.name
        | _ =>  <[ $("Computed" + ruleMethodName.Id : usesite) ]>.name
      }
    }

    private static addRecursionCheck(tb : TypeBuilder, body : PExpr) : PExpr.Sequence
    {
      def bitField = tb.GetBitFieldManager().Allocate();
      <[
        when ($(bitField.Read()))
          throw System.InvalidOperationException("Recursion detected (see stack trace for details).");
        $(bitField.Set());
        try $body
        finally $(bitField.Clear());
      ]>
    }

    private static addCaching(tb : TypeBuilder, name : Name, type : PExpr, body : PExpr, additonalFlags : NemerleModifiers) : PExpr
    {
      def bitField = tb.GetBitFieldManager().Allocate();
      def fieldName = <[ $(Util.tmpname(name.Id + "_cache") : usesite) ]>.name;
      tb.Define(<[ decl: private mutable $(fieldName : name) : $type ]>);
      def mods = Modifiers(NemerleModifiers.Public %| additonalFlags, []);
      tb.Define(<[ decl:
        ..$mods $(cachingPropertyName(name) : name) : $type
        {
          get
          {
            unless ($(bitField.Read()))
            {
              //FIXME: fix compiler bug!!
              //assert2(false, "Extra field value not computed yet.");
              throw System.InvalidOperationException("Extra field value not computed yet.");
            }
            $(fieldName : name);
          }
        }
      ]>);

      <[
        if ($(bitField.Read()))
          $(fieldName : name);
        else
        {
          $(fieldName : name) = $body;
          $(bitField.Set());
          $(fieldName : name);
        }
      ]>
    }
  }
}
