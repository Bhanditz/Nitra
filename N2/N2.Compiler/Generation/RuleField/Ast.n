using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class Ast : RuleField
    {
      private isDebug : bool;
      private fields : array[RuleField];
      public RuleSymbol : RuleDefSymbol;

      public IsSimple : bool { get { RuleSymbol is SimpleRuleSymbol } }

      public override InitChildren(compiler : RuleParserEmitter, level : int, allFields : SCG.List[RuleField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, this, level, allFields);
      }

      [RecordIgnore] public mutable astStruct : RootAstStruct;
      [RecordIgnore] public mutable astPtr    : AstPointer;
      public override CalculateAstInfo() : void
      {
        astStruct = match (RuleSymbol)
        {
          | ExtensibleRuleSymbol       => assert2(false); assert(false);
          | ExtentionRuleSymbol        => RootAstStruct(Compiler, this, true)
          | SimpleRuleSymbol           => RootAstStruct(Compiler, this, false)
          | _                          => assert(false);
        }
        astPtr = AstPointer(astStruct, "astPtr", this);
        CalculateAstInfo(astStruct, astPtr, fields);
      }

      public override Compile() : void
      {
        def code = SCG.List();
        code.Add(<[ $(astStruct.AstStart) = $CurTextPos; ]>);
        code.Add(CheckAstMemoize());
        code.Add(<[ $(fields[0].ParseLabel.Goto()); ]>);

        //parse ok
        code.Add(<[ $(astStruct.OkLabel.Label()); ]>);
        code.Add(<[ $(astPtr.HeaderRef(astStruct.StateRef)) = -1; ]>);// состояние разбора -1 если правило полностью разобрано.
        code.Add(<[ resultRef = $(astPtr.Var); ]>);
        code.Add(<[ $(Compiler.EndLabel.Goto()); ]>);

        //parse fail
        code.Add(<[ $(astStruct.FailLabel.Label()); ]>);
        code.Add(<[ when ($(IsAstAllocatetdCode(astStruct))) // АСТ создано
                    {
                      $(astPtr.HeaderRef(astStruct.StateRef)) = parseState;
                      resultRef = $(astPtr.Var);
                    }
        ]>);
        code.Add(<[ curEndPos = -1; $(Compiler.EndLabel.Goto()); ]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      private CheckAstMemoize() : PExpr
      {
        if (IsSimple)
          <[
            when ($CurTextPos <= text.Length)
            {
              for (mutable ast = parser.memoize[$CurTextPos]; ast > 0; ast = parser.ast[ast + 1])
              {
                when (parser.ast[ast] == RuleId)
                {
                  if (parser.ast[ast + 2] == -1)
                  {
                    resultRef = ast;
                    mutable i = ast + $(astStruct.SizesOffset);
                    mutable end = i + $(astStruct.SizeFields.Count);
                    for (; i < end; ++i)
                      curEndPos += parser.ast[i];
                    $(Compiler.EndLabel.Goto());
                  }
                  else
                  {
                    curEndPos = -1;
                    $(Compiler.EndLabel.Goto());
                  }
                }
              }
            }
          ]>
        else
          <[ () ]>
      }

      public override PrintContent() : string * string { ("Ast", $<#$(PrintChildren(fields))#>) }
    }
  }
}
