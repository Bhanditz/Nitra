using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    public mutable ParentAstStruct : AstStruct = null;
    public mutable ParentAstPtr    : AstPointer = null;
    public mutable AllocateAst     : bool = false;
    public mutable NextSibling     : RuleField = null;

    public abstract CalculateAstInfo() : void;

    public CalculateAstInfo(astStruct : AstStruct, astPtr : AstPointer, fields : array[RuleField]) : void
    {
      match (fields.Find(field => !(field is RuleField.Predicate)))
      {
        | Some(field) =>
          field.AllocateAst = true;
          astStruct.AllocateState = field.State;

        | None()      => assert(false);
      }

      for (mutable i = 0; i < fields.Length - 1; ++i)
        fields[i].NextSibling = fields[i + 1];

      foreach (field in fields)
      {
        field.ParentAstStruct = astStruct;
        field.ParentAstPtr    = astPtr;
        field.CalculateAstInfo();
      }
    }
  }
}
