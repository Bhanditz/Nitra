using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;
using N2.Typing;

namespace N2.Compiler
{
  internal partial abstract class RuleField2
  {
    [Record]
    public sealed class Extensible : RuleField2
    {
      public RuleSymbol   : ExtensibleRuleSymbol;
      public BindingPower : int;

      [RecordIgnore] public Field : AstStruct2.StructField { get; private set; }

      public override CalculateAstInfo() : void
      {
        Field = AstStruct2.StructField(ParentAstStruct, this, true, true);
      }

      public override Compile() : void
      {
        def call  = Compiler.MakeCall(RuleSymbol, BindingPower);
        ParseCode = MakeSyntaxCallCode(call, Field)
      }

      public override PrintContent() : string * string { ("Extensible", $<#$(RuleSymbol.Name) $BindingPower#>) }
    }
  }
}
