using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField2
  {
    [Record]
    public sealed class Option : RuleField2
    {
      public Rule : Rule.Repeat;
      fields : array[RuleField2];

      public override InitChildren(compiler : RuleParserEmitter, parent : RuleField2, level : int, allFields : SCG.List[RuleField2]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public Field   : AstStruct2.StructField { get; private set; }

      [RecordIgnore] public  mutable astStruct : AstStruct2;
      [RecordIgnore] private mutable astPtr    : AstPointer2;
      public override CalculateAstInfo() : void
      {
        astStruct = InternalAstStruct2(this);
        astPtr    = AstPointer2(astStruct, "astPtr", this);
        Field     = AstStruct2.StructField(ParentAstStruct, this);
        CalculateAstInfo(astStruct, astPtr, fields);
      }

      public override Compile() : void
      {
        ParseCode = <[
        $(ParseLabel.Label());
          $(AllocateParentAst());
          $StartTextPos = $CurTextPos;
          $(fields[0].ParseLabel.Goto());

        $(astStruct.OkLabel.Label());
          $(ParentAstPtr.SizeRef(Field)) = $CurTextPos - $StartTextPos;
          $(ContinueParseLabel.Goto());

        $(astStruct.FailLabel.Label());
          $(ParentAstPtr.SizeRef(Field)) = 0;
          $CurTextPos = $StartTextPos;
          $(ContinueParseLabel.Goto());
        ]>;
      }

      public override PrintContent() : string * string { ("Option", $<#$(PrintChildren(fields))#>) }
    }
  }
}
