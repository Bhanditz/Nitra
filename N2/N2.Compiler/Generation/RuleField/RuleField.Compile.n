using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

using N = Nemerle.Compiler;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    public this(location : N.Location) { this.Location = location; }

    public Location : N.Location;
    public mutable ParseCode : PExpr;
    public abstract Compile() : void;

    public ContinueParseLabel : PExprLabel { get { if (NextSibling == null) ParentAstStruct.OkLabel else NextSibling.ParseLabel } }
    public FailParseLabel     : PExprLabel { get { ParentAstStruct.FailLabel } }

    public CurTextPos     : PExpr { get { <[ curEndPos ]> } }//TODO: Rename

    public AllocateParentAst() : PExpr
    {
      if (AllocateAst)
      {
        match (Parent)
        {
          | RuleField.Ast(RuleSymbol = N2.Typing.ExtentionRuleSymbol) =>
            <[
              $(ParentAstPtr.Var) = parser.Allocate($(ParentAstStruct.AstSize), $(ParentAstStruct.AstId : dyn));
              parser.ast[$(ParentAstPtr.Var) + $(ParentAstStruct.TerminatorOffset)] = -1;
            ]>
          | _ =>
            <[
              $(ParentAstPtr.Var) = parser.Allocate($(ParentAstStruct.AstSize), $(ParentAstStruct.AstId : dyn));
              $(ParentAstPtr.HeaderRef(ParentAstStruct.NextRef)) = parser.memoize[$(ParentAstStruct.AstStart)];
              parser.memoize[$(ParentAstStruct.AstStart)] = $(ParentAstPtr.Var);
            ]>
        }
      }
      else
        <[ {} ]>
    }

    public IsAstAllocatetdCode(astStruct : AstStruct) : PExpr
    {
      <[ parseState > $(astStruct.AllocateState) ]>
    }

    public MakeSyntaxCallCode(call : PExpr, field : AstStruct.StructField) : PExpr
    {
      MakeCallCodeImpl(<[ $call(curEndPos, text, ref tmpResult, ref parser) ]>, field)
    }

    public MakeCallCodeImpl(call : PExpr, field : AstStruct.StructField) : PExpr
    {
      def (debugSetLastResult, exit) =
        if (this.Compiler.Owner.Environment.Manager.Options.EmitDebug)
          (<[ parser.LastParseStart = curEndPos; parser.LastParseEnd = newPos; ]>, <[ () ]>);
        else
          (<[ () ]>, <[ () ]>);

        when (!this.Location.IsEmpty && this.Location.IsSourceAvailable)
        {
          call.Location = this.Location;
          // Make the location directly behind the rule call. This allows you to see the result of the parsing rules.
          exit.Location = N.Location(this.Location.FileIndex, this.Location.EndLine, this.Location.EndColumn, this.Location.Line, this.Location.EndColumn + 1);
        }

      <[
      $(ParseLabel.Label());
        tmpResult = -1;
        newPos = $call;
        tmpSize = newPos - curEndPos;
        $debugSetLastResult;
        if (newPos >= 0)
        {
          $(AllocateParentAst());
          $(ParentAstPtr.SizeRef(field)) = tmpSize;
          curEndPos = newPos;
          $exit;
          $(ContinueParseLabel.Goto());
        }
        else
        {
          parseState = $(State : int);//состояние
          $exit;
          $(FailParseLabel.Goto());
        }
      ]>
    }
  }
}
