using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField2
  {
    [Record]
    public sealed class List : RuleField2
    {
      public Rule : Rule.Repeat;
      fields : array[RuleField2];
      min    : int;
      max    : option[int];

      public override InitChildren(compiler : RuleParserEmitter, parent : RuleField2, level : int, allFields : SCG.List[RuleField2]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public Field   : AstStruct2.StructField { get; private set; }

      [RecordIgnore] public  mutable astStruct   : AstStruct2;
      [RecordIgnore] private mutable astPtr      : AstPointer2;
      public override CalculateAstInfo() : void
      {
        astStruct     = InternalAstStruct2(this);
        astPtr        = AstPointer2(astStruct, "astPtr", this);
        Field         = AstStruct2.StructField(ParentAstStruct, this);
        CalculateAstInfo(astStruct, astPtr, fields);
      }

      public Counter : PExpr { get { (Compiler : IVariableEmitter).CreateVariable($"counter$Level") } }

      public override Compile() : void
      {
        def useCounter = min > 0 || max is Some(_);
        def counterInit() { if (useCounter) <[ $Counter  = 0 ]> else <[ {} ]> }
        def counterInc()  { if (useCounter) <[ ++ $Counter   ]> else <[ {} ]> }
        def ifCounterEqualsToMaxThenContinue()
        {
          if (max is Some(max))
            <[
              when ($Counter == $max)
                $(ContinueParseLabel.Goto());
            ]>
          else
            <[ {} ]>
        }
        def ifCounterLessThanMinThenFail()
        {
          if (min > 0)
            <[
              when ($Counter < $min)
                $(FailParseLabel.Goto());
            ]>
          else
            <[ {} ]>
        }

        def firstChild = fields[0];
        def code = SCG.List();
        code.Add(<[
          $(ParseLabel.Label());
            $(AllocateParentAst());
            $(counterInit());
            $StartTextPos = $CurTextPos;
            $TextPos = $CurTextPos;
            $(firstChild.ParseLabel.Goto());

          $(astStruct.OkLabel.Label());
            $(counterInc());
            $(ParentAstPtr.SizeRef(Field)) = $CurTextPos - $StartTextPos;
            $(ifCounterEqualsToMaxThenContinue());
            $TextPos = $CurTextPos;
            $(firstChild.ParseLabel.Goto());

          $(astStruct.FailLabel.Label());
            $(ifCounterLessThanMinThenFail());
            $CurTextPos = $TextPos;
            $(ParentAstPtr.SizeRef(Field)) = $CurTextPos - $StartTextPos;
            $(ContinueParseLabel.Goto());
        ]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("List", $<#$(PrintChildren(fields)) $min $max#>) }
    }
  }
}
