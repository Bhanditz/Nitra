using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal sealed class VisitorTypeEmitter
  {
    public Environment             : EmitterEnvironment { get; }
    public Env                     : GlobalEnv          { get; }
    public VisitorType             : VisitorTypeSymbol  { get; }
    public VisitorTypeDescriptorTB : TypeBuilder        { get; }
    public VisitorHostTB           : TypeBuilder        { get; }

    public this(environment : EmitterEnvironment, visitorType : VisitorTypeSymbol)
    {
      Environment             = environment;
      VisitorType             = visitorType;
      Env                     = Environment.NamespaceOfSymbol(visitorType);
      VisitorTypeDescriptorTB = Env.Define(<[ decl: public sealed class $(visitorType.Name : usesite) : N2.Runtime.WalkerTypeDescriptor { } ]>);
      VisitorHostTB           = VisitorTypeDescriptorTB.DefineNestedType(<[ decl: public sealed class Host : N2.Runtime.WalkerHost { } ]>);
    }

    public DefineMembers() : void
    {
      when (VisitorType.DefaultReturnType is Some(type))
        VisitorTypeDescriptorTB.DefineConditional(<[decl:
          public DefaultReturnType() : $(type)
          {
            $(TExpr.DefaultValue() : typed)
          }
        ]>);

      VisitorTypeDescriptorTB.DefineConditional(<[decl:
        public CommonParameters(..$(VisitorType.DefaultParameters)) : void
        {
          ignore(..$(VisitorType.DefaultParameters.Map(param => <[ $(param.Name : dyn) ]>)))
        }
      ]>);

      VisitorTypeDescriptorTB.DefineConditional(<[decl:
        public override NewHost() : N2.Runtime.WalkerHost
        {
          $(VisitorTypeDescriptorTB.GetMemType() : typed).Host()
        }
      ]>);

      VisitorTypeDescriptorTB.DefineConditional(<[decl:
        private static _staticDescriptor : N2.Runtime.WalkerTypeDescriptor = $(VisitorType.Name : usesite)();
      ]>);

      VisitorTypeDescriptorTB.DefineConditional(<[decl:
        public static StaticDescriptor : N2.Runtime.WalkerTypeDescriptor { get { _staticDescriptor } }
      ]>);

      VisitorHostTB.DefineConditional(<[decl:
        public override Type : N2.Runtime.WalkerTypeDescriptor { get { $(VisitorTypeDescriptorTB.GetMemType() : typed).StaticDescriptor } }
      ]>);
    }

    public Emit() : void
    {
      VisitorHostTB.Compile();
      VisitorTypeDescriptorTB.Compile();
    }
  }
}