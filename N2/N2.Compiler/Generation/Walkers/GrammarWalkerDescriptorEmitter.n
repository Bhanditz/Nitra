using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal class GrammarWalkerDescriptorEmitter
  {
    public Owner : SyntaxModuleEmitter { get; }

    private _walkerTypeDescriptorInfo : WalkerTypeDescriptorInfo;

    public this(owner : SyntaxModuleEmitter, walkerTypeDescriptorInfo : WalkerTypeDescriptorInfo)
    {
      Owner = owner;
      _walkerTypeDescriptorInfo = walkerTypeDescriptorInfo;
    }

    mutable _tb : TypeBuilder;

    public DefineTypes() : void
    {
      assert(_tb == null);

      _tb = Owner.GrammarTB.DefineNestedType(<[ decl:
        public sealed class $(Owner.SyntaxModule.Name + "AstWalkerDescriptor" : usesite) : N2.Runtime.GrammarWalkerDescriptor
        {
          private this () {}
        }
      ]>);
    }

    public DefineMembers() : void
    {
      assert(_tb != null);

      _tb.DefineConditional(<[ decl:
        private static _staticDescriptor : $(_tb.GetMemType() : typed) = $(_tb.GetMemType() : typed)();
      ]>);

      _tb.DefineConditional(<[ decl:
        public static StaticDescriptor : $(_tb.GetMemType() : typed) { get { _staticDescriptor } }
      ]>);

      _tb.DefineConditional(<[ decl:
        public override Type : N2.Runtime.WalkerTypeDescriptor
        {
          get { $(_walkerTypeDescriptorInfo.TypeExpr) }
        }
      ]>);

      _tb.DefineConditional(<[ decl:
        public override Grammar : N2.GrammarDescriptor
        {
          get { $(Owner.GrammarImplTB.GetMemType() : typed).StaticDescriptor }
        }
      ]>);

      def cases = List();
      foreach (walkerEmitter in _walkerTypeDescriptorInfo.Walkers)
        cases.Add(<[ case: | $(Owner.GetIdInGrammar(walkerEmitter.RuleSymbol) : int) => $(walkerEmitter.TB.GetMemType() : typed)() ]>);
      cases.Add(<[ case: | _ => assert(false) ]>);

      _tb.DefineConditional(<[ decl:
        public override NewWalker(ruleParser : N2.Internal.RuleParser) : N2.Runtime.AstWalkerBase
        {
          assert(Grammar.Equals(ruleParser.Grammar));
          match (ruleParser.Descriptor.IdInGrammar)
          {
            ..$(cases.ToNList())
          }
        }
      ]>);

      _tb.DefineConditional(<[ decl:
        public override NewExtensibleRuleAstWalkerData(parserData : N2.Runtime.ExtensibleRuleParserData, compositeAstWalker : N2.Runtime.CompositeAstWalker) : object
        {
          ignore(parserData, compositeAstWalker);
          throw System.NotImplementedException();
        }
      ]>);
    }

    public Emit() : void
    {
      assert(_tb != null);

      _tb.Compile();
    }
  }

  [Record]
  internal sealed class WalkerTypeDescriptorInfo
  {
    public TypeExpr : PExpr { get; }
    public Walkers  : list[AbstractWalkerEmitter] { get; }
  }
}
