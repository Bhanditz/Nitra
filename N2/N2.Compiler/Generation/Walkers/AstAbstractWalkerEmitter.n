using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal class AstAbstractWalkerEmitter : AbstractWalkerEmitter
  {
    public override WalkerTypeName() : string
    {
      RuleSymbol.Name + "AstWalker"
    }

    public override DefineMembers(rootAstStruct : option[RootAstStruct]) : void
    {
      base.DefineMembers(rootAstStruct);
      def parms =
        <[ parameter: $("location" : usesite) : N2.Location ]>
        :: <[ parameter: $("errorInfo" : usesite) : list[N2.ErrorInfo] ]> //TODO: удалить этот параметр
        :: RuleSymbol.NonVoidSubRules.Map(r => <[ parameter: $(r.FieldName : usesite) : $(Owner.Environment.RuleTypeToNType(r.Type) : typed) ]>);
      TB.DefineConditional(<[ decl:
        public Accept(..$parms) : $(Owner.Environment.RuleTypeToNType(RuleSymbol.Type) : typed)
        {
          $(Owner.Environment.NTypeOfRuleSymbol(RuleSymbol) : typed).Ast(..$(parms.Map(p => <[ $(p.Name : usesite) ]>)))
        }
      ]>);
    }

    public override RootAstMaker(_astStruct : AstStruct, arguments : list[PExpr]) : PExpr
    {
      def acceptArgs =
        <[ N2.Location(parser.Source, startPos, pos) ]>
        :: <[ [] ]>
        :: arguments;
      <[ this.Accept(..$acceptArgs) ]>
    }

    public override InternalAstMaker(_astStruct : AstStruct, arguments : list[PExpr]) : PExpr
    {
      match (arguments)
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
    }

    public override WalkMethodReturnType(ruleType : RuleType) : PExpr
    {
      <[ $(Owner.Environment.RuleTypeToNType(ruleType) : typed) ]>
    }

    public override TokenWalkCode(_structField : AstStruct.StructField) : PExpr
    {
      <[ N2.NToken(tokenPos, pos) ]>
    }

    public override ListWalkCode(_structField : AstStruct.StructField, itemAst : PExpr) : PExpr * PExpr * PExpr * PExpr
    {
      def init       = <[ def astBuffer = System.Collections.Generic.List(16); ]>;
      def addItem    = <[ astBuffer.Add($itemAst); ]>;
      def returnCode = <[ Nemerle.Collections.NList.ToList(astBuffer) ]>;
      def emptyCode  = <[ [] ]>;
      (init, addItem, returnCode, emptyCode)
    }

    public override List2WalkCode(_structField : AstStruct.StructField, itemAst : PExpr, separatorAst : PExpr) : PExpr * PExpr * PExpr * PExpr * PExpr
    {
      def init         = <[ def astBuffer = System.Collections.Generic.List(16); def separatorBuffer = System.Collections.Generic.List(16); ]>;
      def addItem      = <[ astBuffer.Add($itemAst); ]>;
      def addSeparator = <[ separatorBuffer.Add($separatorAst); ]>;
      def returnCode   = <[ (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer)) ]>;
      def emptyCode    = <[ ([], []) ]>;
      (init, addItem, addSeparator, returnCode, emptyCode)
    }

    public override OptionWalkCode(_structField : AstStruct.StructField, valueAst : PExpr) : PExpr * PExpr
    {
      def someCode = <[ Some($valueAst) ]>;
      def noneCode = <[ None() ]>;
      (someCode, noneCode)
    }

    public override SkipVoid() : bool { true }
  }
}
