using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using N2.Model;
using N2.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal class ReflectionAbstractWalkerEmitter : AbstractWalkerEmitter
  {
    public override WalkerTypeName() : string
    {
      RuleSymbol.Name + "ReflectionWalker"
    }

    private MakeReflectionStruct(name : PExpr, location : PExpr, items : PExpr) : PExpr
    {
      <[ N2.Runtime.Reflection.ReflectionStruct($name, $location, System.Collections.ObjectModel.ReadOnlyCollection.[N2.Runtime.Reflection.ReflectionStruct]($items)) ]>
    }

    private MakeName(ruleField : RuleField) : string
    {
      match (ruleField)
      {
        | RuleField.List               as x => x.Rule.ToString()
        | RuleField.List2              as x => x.Rule.ToString()
        | RuleField.Option             as x => x.Rule.ToString()
        | RuleField.Predicate          as x => x.Rule.ToString()
        | RuleField.ExtensibleRuleCall as x => x.RuleSymbol.Name
        | RuleField.TokenRuleCall      as x => x.RuleSymbol.Name
        | RuleField.SimpleRuleCall     as x => x.RuleSymbol.Name
        | RuleField.Void               as x => x.RuleSymbol.Name
        | RuleField.TokenString        as x => x.Rule.ToString()
        | RuleField.Ast                as x => x.RuleSymbol.Name
        | _                                 => assert(false);
      }
    }

    public override RootAstMaker(astStruct : AstStruct, arguments : list[PExpr]) : PExpr
    {
      MakeReflectionStruct(<[ $(MakeName(astStruct.RuleField)) ]>, <[ N2.NToken(startPos, pos) ]>, <[ array[..$arguments] ]>);
    }

    public override InternalAstMaker(astStruct : AstStruct, arguments : list[PExpr]) : PExpr
    {
      MakeReflectionStruct(<[ $(MakeName(astStruct.RuleField)) ]>, <[ N2.NToken(startPos, pos) ]>, <[ array[..$arguments] ]>);
    }

    public override WalkMethodReturnType(_ruleType : RuleType) : PExpr
    {
      <[ N2.Runtime.Reflection.ReflectionStruct ]>
    }

    public override TokenWalkCode(structField : AstStruct.StructField) : PExpr
    {
      MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(tokenPos, pos) ]>, <[ array(0) ]>);
    }

    public override ListWalkCode(structField : AstStruct.StructField, itemAst : PExpr) : PExpr * PExpr * PExpr * PExpr
    {
      def init       = <[ def listStartPos = pos; def astBuffer = System.Collections.Generic.List(16); ]>;
      def addItem    = <[ astBuffer.Add($itemAst); ]>;
      def returnCode = MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(listStartPos, pos) ]>, <[ astBuffer ]>);
      def emptyCode  = MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(pos, pos) ]>, <[ array(0) ]>);
      (init, addItem, returnCode, emptyCode)
    }

    public override List2WalkCode(structField : AstStruct.StructField, itemAst : PExpr, separatorAst : PExpr) : PExpr * PExpr * PExpr * PExpr * PExpr
    {
      def init         = <[ def listStartPos = pos; def astBuffer = System.Collections.Generic.List(16); ]>;
      def addItem      = <[ astBuffer.Add($itemAst); ]>;
      def addSeparator = <[ astBuffer.Add($separatorAst); ]>;
      def returnCode   = MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(listStartPos, pos) ]>, <[ astBuffer ]>);
      def emptyCode    = MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(pos, pos) ]>, <[ array(0) ]>);
      (init, addItem, addSeparator, returnCode, emptyCode)
    }

    public override OptionWalkCode(structField : AstStruct.StructField, valueAst : PExpr) : PExpr * PExpr
    {
      def someCode = <[
        def startOprionPos = pos;
        def value = $valueAst;
        $(MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(startOprionPos, pos) ]>, <[ array[value] ]>));
      ]>;
      def noneCode = MakeReflectionStruct(<[ $(MakeName(structField.Field)) ]>, <[ N2.NToken(pos, pos) ]>, <[ array(0) ]>);
      (someCode, noneCode)
    }

    public override SkipVoid() : bool { false }
  }
}
