using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  public class AstWalkerGenerator : WalkerGenerator
  {
    public Environment : EmitterEnvironment { get; }

    public override Name : string { get "Ast" }

    public override GetWalkerTypeDescriptorExpr() : PExpr
    {
      <[ N2.Runtime.AstWalkerTypeDescriptor.StaticDescriptor ]>
    }

    public override GetSignature(rule : RuleSymbol) : WalkerSignature
    {
      WalkerSignature([], Environment.PTypeOfRuleSymbol(rule));
    }

    public override MakeCodeForField(field : RuleStructureField, parentAstPointer : void -> AstPointer) : PExpr
    {
      match (field)
      {
        | SimpleCall(ruleSymbol) with bp = 0
        | ExtensibleCall(ruleSymbol, bp) =>
          if (ruleSymbol.Type is RuleType.Void)
            SkipCall(field, parentAstPointer)
          else
            <[ this.$(CallWalker(ruleSymbol, bp) : dyn).Walk(ref pos, ref parser); ]>

        | TokenCall
        | TokenString =>
          MakeToken(field, parentAstPointer, <[ N2.NToken(tokenPos, pos) ]>)

        | Option as field =>
          MakeOption(
            field            = field,
            parentAstPointer = parentAstPointer,
            someCode         = <[ Some($(MakeInternalAst(field.Rule, "valuePointer"))) ]>,
            noneCode         = <[ None() ]>)

        | List as lst=>
          MakeForEach(field            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ def astBuffer = System.Collections.Generic.List(16); ]>,
            item             = <[ astBuffer.Add($(MakeInternalAst(lst.Rule, "itemPointer"))) ]>,
            returnCode       = <[ Nemerle.Collections.NList.ToList(astBuffer) ]>,
            emptyCode        = <[ [] ]>);

        | ListWithSeparator as lst=>
          MakeForEachWithSeparator(
            field            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ def astBuffer = System.Collections.Generic.List(16); def separatorBuffer = System.Collections.Generic.List(16); ]>,
            item             = <[ astBuffer.Add($(MakeInternalAst(lst.Rule, "itemPointer"))) ]>,
            separator        = <[ separatorBuffer.Add($(MakeInternalAst(lst.Separator, "separatorPointer"))) ]>,
            returnCode       = <[ (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer)) ]>,
            emptyCode        = <[ ([], []) ]>);
            
        | Predicate => assert(false)
      }
    }

    public override InternalAstMaker(_ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr
    {
      match (arguments)
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
    }

    //public override MakeGenerator(ruleStruct : RuleStructure.Ast) : WalkerCode
    //{
    //  def makeCodeForField(field : RuleStructureField) : PExpr
    //  {
    //    def fieldLocCode = NTokenOf(field);
    //
    //    match (field)
    //    {
    //      | SimpleCall(ruleSymbol) | ExtensibleCall(ruleSymbol , _) =>
    //        <[  when ($fieldLocCode.IntersectsWith(startPos, endPos))
    //              $(MakeVisit(field))(spans, startPos, endPos) ]>
    //
    //      | TokenCall(symbol) =>
    //        if (symbol.Options.SetSpanClass != null)
    //          <[ 
    //            def loc = $fieldLocCode;
    //            when (loc.IntersectsWith(startPos, endPos))
    //              spans.Add(N2.SpanInfo(loc, 
    //                $(MakeSpanClassFieldName(symbol.Options.SetSpanClass.Name) : dyn)))
    //          ]>
    //        else
    //          <[ () ]>
    //        
    //      | String(str, None) => ()
    //      | String(str, Some(spanClass)) =>
    //        <[  when ($fieldLocCode.IntersectsWith(startPos, endPos))
    //              spans.Add(N2.SpanInfo($fieldLocCode, 
    //                $(MakeSpanClassFieldName(spanClass.Name) : dyn))) ]>
    //
    //      | Option(subRuleStruct) as field =>
    //        MakeOption(field, MakeCodeForStruct(subRuleStruct))
    //
    //      | List(subRuleStruct, _, _) as lst =>
    //        // если MakeCodeForStruct(subRuleStruct) вернет <[ () ]> 
    //        // то результатом ForEach будет <[ () ]>
    //        MakeForEach(lst, MakeCodeForStruct(subRuleStruct))
    //
    //      | ListWithSeparator(ruleStruct, separatorStruct, _, _) as lst =>
    //        // если MakeCodeForStruct(subRuleStruct) вернет <[ () ]> 
    //        // то результатом ForEachWithSeparator будет <[ () ]>
    //        MakeForEachWithSeparator(lst, 
    //          makeCodeForField(ruleStruct), makeCodeForField(separatorStruct))
    //            
    //      | Predicate => ()
    //    }
    //  }
    //
    //  def code = MakeCodeForStruct(ruleStruct);
    //  def codeForAst =
    //    if (symbol.Options.SetSpanClass != null)
    //      <[ 
    //        { ..$code }
    //        def loc = $(NTokenOf(ruleStruct));
    //        when (loc.IntersectsWith(startPos, endPos))
    //          spans.Add(N2.SpanInfo(loc, 
    //            $(MakeSpanClassFieldName(symbol.Options.SetSpanClass.Name) : dyn)))
    //      ]>
    //    else
    //      <[ ..$code ]>;
    //
    //  WalkerCode(codeForAst, 
    //        [<[ parameter: spans    : System.Collections.Generic.List[N2.SpanInfo] ]>,
    //         <[ parameter: startPos : int ]>,
    //         <[ parameter: endPos   : int ]>
    //        ], 
    //        <[ void ]>)
    //}
    //
    //MakeCodeForStruct(ruleStruct : RuleStructure) : PExpr
    //{
    //  def code = ruleStruct.Fields.Map(MakeCodeForField);
    //  <[ ..$code ]>
    //}

    public override MakeGenerator(ruleSymbol : SyntaxRuleSymbol/*, astPointer : void -> AstPointer*/) : WalkerCode
    {
      def ruleStruct = ruleSymbol.Structure;
      def (astPointer, initPointer) = MakeAstPointer(ruleStruct, "astPtr");
      def statements = List();
      def arguments  = List();
      
      arguments.Add(<[ N2.Location(parser.Source, startPos, pos) ]>);
      arguments.Add(<[ [] ]>);
      when (ruleStruct is RuleStructure.Ast(Symbol = ExtentionRuleSymbol(ExtentionType=Postfix)))
        arguments.Add(<[ prefix ]>);

      foreach (field in ruleStruct.Fields)
      {
        | RuleStructureField.Predicate => ()
        | RuleStructureField.SimpleCall(symbol)        when symbol.Type is RuleType.Void
        | RuleStructureField.ExtensibleCall(symbol, _) when symbol.Type is RuleType.Void =>
          statements.Add(MakeCodeForField(field, astPointer));

        | _                =>
          def varName = Nemerle.Compiler.Util.tmpname("ast");
          statements.Add(<[ def $(varName : usesite) = $(MakeCodeForField(field, astPointer)) ]>);
          arguments.Add(<[ $(varName : usesite) ]>);
      }

      WalkerCode(<[
        $(initPointer());
        { ..$(statements.NToList()); }
        $(Environment.NTypeOfRuleSymbol(ruleSymbol) : typed).Ast(..$(arguments.NToList()))
      ]>)
    }
  }
}
