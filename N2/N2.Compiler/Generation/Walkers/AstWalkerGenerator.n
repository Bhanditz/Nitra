using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public class AstWalkerGenerator : WalkerGenerator
  {
    public override MakeCodeForField(field : RuleStructureField, parentAstPointer : void -> AstPointer) : PExpr
    {
      match (field)
      {
        | SimpleCall(ruleSymbol) with bp = 0
        | ExtensibleCall(ruleSymbol, bp) =>
          if (ruleSymbol.Type is RuleType.Void)
            <[ pos += $(parentAstPointer().Get(field)); ]>
          else
            <[ this.$(CallWalker(ruleSymbol, bp) : dyn).Walk(ref pos, ref parser); ]>

        | TokenCall
        | TokenString =>
          MakeToken(field, parentAstPointer, <[ N2.NToken(tokenPos, pos) ]>)

        | Option as field =>
          MakeOption
            ( field            = field
            , parentAstPointer = parentAstPointer
            , someCode         = <[ Some($(MakeInternalAst(field.Rule, "valuePointer"))) ]>
            , noneCode         = <[ None() ]>
            )

        | List as lst=>
          MakeForEach
            ( field            = lst
            , parentAstPointer = parentAstPointer
            , init             = <[ def astBuffer = System.Collections.Generic.List(16); ]>
            , item             = <[ astBuffer.Add($(MakeInternalAst(lst.Rule, "itemPointer"))) ]>
            , returnCode       = <[ Nemerle.Collections.NList.ToList(astBuffer) ]>
            , emptyCode        = <[ [] ]>
            );

        | ListWithSeparator as lst=>
          MakeForEachWithSeparator
            ( field            = lst
            , parentAstPointer = parentAstPointer
            , init             = <[ def astBuffer = System.Collections.Generic.List(16); def separatorBuffer = System.Collections.Generic.List(16); ]>
            , item             = <[ astBuffer.Add($(MakeInternalAst(lst.Rule, "itemPointer"))) ]>
            , separator        = <[ separatorBuffer.Add($(MakeInternalAst(lst.Separator, "separatorPointer"))) ]>
            , returnCode       = <[ (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer)) ]>
            , emptyCode        = <[ ([], []) ]>
            );

        | _ => assert(false)
      }
    }

    public override RootAstMaker(_ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr
    {
      def acceptArgs =
        <[ N2.Location(parser.Source, startPos, pos) ]>
        :: <[ [] ]>
        :: arguments;
      <[ this.Accept(..$acceptArgs) ]>
    }

    public override InternalAstMaker(_ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr
    {
      match (arguments)
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
    }

    public Emit() : void
    {
      assert(_tb != null);
      _tb.Compile();
    }

    public override MakeGenerator(ruleStruct : RuleStructure.Ast) : WalkerCode
    {
    }
  }
}
