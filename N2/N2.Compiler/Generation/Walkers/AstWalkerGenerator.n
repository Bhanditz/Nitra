using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public class AstWalkerGenerator : WalkerGenerator
  {
    public override MakeCodeForField(field : RuleStructureField, parentAstPointer : void -> AstPointer) : PExpr
    {
      match (field)
      {
        | Option as field =>
          MakeOption
            ( field
            , parentAstPointer
            , <[ Some($(MakeInternalAst(field.Rule, "valuePointer"))) ]>
            , <[ None() ]>
            )

        | List as lst=>
          MakeForEach
            ( lst
            , parentAstPointer
            , <[ def astBuffer = System.Collections.Generic.List(16); ]>
            , <[ astBuffer.Add($(MakeInternalAst(lst.Rule, "itemPointer"))) ]>
            , <[ Nemerle.Collections.NList.ToList(astBuffer) ]>
            , <[ [] ]>
            );

        | ListWithSeparator as lst=>
          MakeForEachWithSeparator
            ( lst
            , parentAstPointer
            , <[ def astBuffer = System.Collections.Generic.List(16); def separatorBuffer = System.Collections.Generic.List(16); ]>
            , <[ astBuffer.Add($(MakeInternalAst(lst.Rule, "itemPointer"))) ]>
            , <[ separatorBuffer.Add($(MakeInternalAst(lst.Separator, "separatorPointer"))) ]>
            , <[ (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer)) ]>
            , <[ ([], []) ]>
            );

        | _ => assert(false)
      }
    }

    public override RootAstMaker(_ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr
    {
      def acceptArgs =
        <[ N2.Location(parser.Source, startPos, pos) ]>
        :: <[ [] ]>
        :: arguments;
      <[ this.Accept(..$acceptArgs) ]>
    }

    public override InternalAstMaker(_ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr
    {
      match (arguments)
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
    }

    public override MakeGenerator(ruleStruct : RuleStructure.Ast) : WalkerCode
    {
    }
  }
}
