using N2.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  public sealed class WalkerCode
  {
    public Code : PExpr;
  }

  [Record]
  public sealed class WalkerSignature
  {
    public Parameters : list[PParameter];
    public ReturnType : PExpr;
  }

  public abstract class WalkerGenerator
  {
    public abstract Name : string { get; }

    public virtual SupportsVoidRules : bool { get false }

    private calls : Hashtable[RuleSymbol * int, string] = Hashtable();
    public CallWalker(ruleSymbol : RuleSymbol, bp : int) : string
    {
      def key = (ruleSymbol, bp);
      if (calls.ContainsKey(key))
        calls[key];
      else
      {
        def name = $"walkerRef$(calls.Count)";
        calls.Add(key, name);
        name
      }
    }

    public abstract GetSignature(ruleStructure : RuleStructure.Ast) : WalkerSignature;
    public abstract MakeGenerator(ruleStructure : RuleStructure.Ast) : WalkerCode;
    public abstract MakeCodeForField(field : RuleStructureField, parentAstPointer : void -> AstPointer) : PExpr;
    public abstract RootAstMaker(ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr;
    public abstract InternalAstMaker(ruleStructure : RuleStructure, arguments : list[PExpr]) : PExpr;

    public abstract WalkMethodReturnType(ruleType : RuleType) : PExpr;
    private GetWalkerType(rule : RuleSymbol) : PExpr
    {
      | SimpleRuleSymbol     as s => <[ N2.Runtime.SimpleRuleWalker[$(WalkMethodReturnType(s.Type))] ]>
      | ExtensibleRuleSymbol as s => <[ N2.Runtime.ExtensibleRuleWalker[$(WalkMethodReturnType(s.Type))] ]>
      | _ => assert2(false); assert(false)
    }

    public GetWalkerBaseType(rule : RuleSymbol) : PExpr
    {
      | SimpleRuleSymbol                             as s => <[ N2.Runtime.SimpleRuleWalker[$(WalkMethodReturnType(s.Type))] ]>
      | ExtentionRuleSymbol(ExtentionType = Prefix)  as s => <[ N2.Runtime.PrefixRuleWalker[$(WalkMethodReturnType(s.Type))] ]>
      | ExtentionRuleSymbol(ExtentionType = Postfix) as s => <[ N2.Runtime.PostfixRuleWalker[$(WalkMethodReturnType(s.Type))] ]>
      | _ => assert2(false); assert(false)
    }

    public MakeInternalAst(ruleStructure : RuleStructure, name : string) : PExpr
    {
      def (getPointer, initPointer) = MakeAstPointer(ruleStructure, name);
      def ast = MakeAst(ruleStructure, getPointer, InternalAstMaker);
      <[ $(initPointer()); $ast ]>
    }

    public MakeAstPointer(ruleStructure : RuleStructure, name : string) : (void -> AstPointer) * (void -> PExpr)
    {
      mutable astPointer = null;
      def getPointer()
      {
        when (astPointer == null)
          astPointer = AstPointer(ruleStructure, name);
        astPointer
      }
      def initPointer()
      {
        if (astPointer == null)
          <[ () ]>
        else
          <[
            def $(name : dyn) = {
              astPtr:
              {
                for (mutable ast = parser.memoize[pos]; ast > 0; ast = parser.ast[ast + 1])
                  when (parser.ast[ast] == $(ruleStructure.AstId : dyn))
                    astPtr(ast);
                assert(false);
              }
            }
          ]>
      }
      (getPointer, initPointer)
    }

    public virtual MakeAst(ruleStructure : RuleStructure, astPointer : void -> AstPointer, maker : RuleStructure * list[PExpr] -> PExpr) : PExpr
    {
      def statements = List();
      def arguments = List();
      when (ruleStructure is RuleStructure.Ast(Symbol = ExtentionRuleSymbol(ExtentionType = Postfix)))
        arguments.Add(<[ prefix ]>);

      when (!(ruleStructure is RuleStructure.Ast))
      {
        statements.Add(<[ def startPos = pos; ]>);
        statements.Add(<[ _ = startPos; ]>);
      }

      foreach (field in ruleStructure.Fields)
        match (field)
        {
          | RuleStructureField.Predicate => ()
          | RuleStructureField.SimpleCall(symbol)        when symbol.Type is RuleType.Void
          | RuleStructureField.ExtensibleCall(symbol, _) when symbol.Type is RuleType.Void =>
            statements.Add(<[ pos += $(astPointer().Get(field)) ]>);

          | _                =>
            def varName = Nemerle.Compiler.Util.tmpname("ast");
            statements.Add(<[ def $(varName : usesite) = $(MakeCodeForField(field, astPointer)) ]>);
            arguments.Add(<[ $(varName : usesite) ]>);
        }

      statements.Add(maker(ruleStructure, arguments.ToNList()));
      <[ { ..$(statements.ToNList()) } ]>
    }

    public MakeToken
      ( field            : RuleStructureField
      , parentAstPointer : void -> AstPointer
      , code             : PExpr
      ) : PExpr
    {
      <[
        def tokenPos = pos;
        pos += $(parentAstPointer().Get(field));
        $code;
      ]>
    }

    public MakeOption
      ( field            : RuleStructureField.Option
      , parentAstPointer : void -> AstPointer
      , someCode         : PExpr
      , noneCode         : PExpr
      ) : PExpr
    {
      <[
        if ($(parentAstPointer().Get(field)) > 0)
          $someCode;
        else
          $noneCode;
      ]>
    }

    public MakeForEach
      ( field            : RuleStructureField.List
      , parentAstPointer : void -> AstPointer
      , init             : PExpr
      , item             : PExpr
      , returnCode       : PExpr
      , emptyCode        : PExpr
      ) : PExpr
    {
      def loopCode = <[
        def loop()
        {
          $item;
          if (listEnd > pos)
            loop();
          else
            assert(listEnd == pos);
        }
      ]>;
      MakeForEachImpl
        (field             = field
        , parentAstPointer = parentAstPointer
        , init             = init
        , loopCode         = loopCode
        , returnCode       = returnCode
        , emptyCode        = emptyCode)
    }

    public MakeForEachWithSeparator
      ( field            : RuleStructureField.ListWithSeparator
      , parentAstPointer : void -> AstPointer
      , init             : PExpr
      , item             : PExpr
      , separator        : PExpr
      , returnCode       : PExpr
      , emptyCode        : PExpr
      ) : PExpr
    {
      def loopCode = <[
        def loop()
        {
          $item;
          if (listEnd > pos)
          {
            $separator;
            if (listEnd > pos)
              loop();
            else
              assert(listEnd == pos);
          }
          else
            assert(listEnd == pos);
        }
      ]>;
      MakeForEachImpl
        (field             = field
        , parentAstPointer = parentAstPointer
        , init             = init
        , loopCode         = loopCode
        , returnCode       = returnCode
        , emptyCode        = emptyCode)
    }

    private MakeForEachImpl
      (field            : RuleStructureField
      , parentAstPointer : void -> AstPointer
      , init             : PExpr
      , loopCode         : PExpr
      , returnCode       : PExpr
      , emptyCode        : PExpr
      ) : PExpr
    {
      def nonemptyCode = List();
      match(init)
      {
        | <[ { ..$exprs } ]> => nonemptyCode.AddRange(exprs)
        | e                  => nonemptyCode.Add(e)
      }
      nonemptyCode.Add(loopCode);
      nonemptyCode.Add(<[ loop() ]>);
      nonemptyCode.Add(returnCode);
      <[
        def listEnd = pos + $(parentAstPointer().Get(field));
        if (listEnd > pos) { ..$(nonemptyCode.NToList()) }
        else $emptyCode
      ]>
    }
  }
}
