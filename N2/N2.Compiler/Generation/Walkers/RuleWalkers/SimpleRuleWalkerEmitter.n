using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class SimpleRuleWalkerEmitter : RuleWalkerEmitter[SimpleRuleSymbol]
    {
      [RecordIgnore] public override WalkerTb : TypeBuilder { get; private set; }

      public override RuleParserBaseType : PExpr
      {
        get { <[ N2.Internal.SimpleRuleParser ]> }
      }

      public override Define(walkersModule : TypeBuilder) : void
      {
        def signature = Generator.GetSignature(Rule.Structure);
        //def code = Generator.MakeGenerator(Rule.Structure);

        def parameters =
          <[ parameter: pos : ref int ]>
          :: <[ parameter: parser : ref N2.Internal.Parser ]>
          :: signature.Parameters;

        WalkerTb = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.Name + "_Walker" : usesite) : N2.Runtime.WalkerBase
          {
            public RuleId : int { get; }

            public override Init(compositeAstWalker : N2.Runtime.CompositeAstWalker) : void
            {
              
            }

            public Walk(..$parameters) : $(signature.ReturnType)
            {
              assert(false)
            }
          }
        ]>);
      }

      public override Emit() : void
      {
        WalkerTb.Compile();
      }
    }
  }
}
