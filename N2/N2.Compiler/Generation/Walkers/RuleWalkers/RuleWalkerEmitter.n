using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    private interface IRuleWalkerEmitter
    {
      Rule               : RuleSymbol  { get; }
      WalkerTb           : TypeBuilder { get; }
      RuleParserBaseType : PExpr       { get; }
      Define(walkersModule : TypeBuilder) : void;
      Emit() : void;
    }

    [Record]
    private abstract class RuleWalkerEmitter[TRuleSymbol] : IRuleWalkerEmitter where TRuleSymbol : RuleSymbol
    {
      public Environment : EmitterEnvironment { get; }
      public Generator   : WalkerGenerator    { get; }
      public Rule        : TRuleSymbol implements IRuleWalkerEmitter.Rule { get; }
      public abstract WalkerTb : TypeBuilder { get; }

      public abstract RuleParserBaseType : PExpr { get; }

      public abstract Define(walkersModule : TypeBuilder) : void;
      public abstract Emit() : void;
    }
  }
}
