using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class ExtensibleRuleWalkerEmitter : RuleWalkerEmitter[ExtensibleRuleSymbol]
    {
      [RecordIgnore] private mutable _prefixWalkerTB  : TypeBuilder;
      [RecordIgnore] private mutable _postfixWalkerTB : TypeBuilder;
      [RecordIgnore] private mutable _walkerDataTB    : TypeBuilder;
      [RecordIgnore] private mutable _walkerTB        : TypeBuilder;

      public override Define(walkersModule : TypeBuilder) : void
      {
        def signature = Generator.GetSignature(Rule.Structure);
        def returnTypeIsVoid = signature.ReturnType is <[ void ]>; // TODO: сделать более точную проверку на void

        def prefixParameters =
          <[ parameter: pos : ref int ]>
          :: <[ parameter: astPtr : int ]>
          :: <[ parameter: parser : ref N2.Internal.Parser ]>
          :: signature.Parameters;

        _prefixWalkerTB = walkersModule.DefineNestedType(<[ decl:
          public abstract class $(Rule.Name + "_PrefixWalker" : usesite) : N2.Runtime.WalkerBase
          {
            public abstract Walk(..$prefixParameters) : $(signature.ReturnType);
          }
        ]>);

        def postfixParameters =
        {
          def mandatoryParameters =
            <[ parameter: startPos : int ]>
            :: <[ parameter: pos : ref int ]>
            :: <[ parameter: astPtr : int ]>
            :: <[ parameter: parser : ref N2.Internal.Parser ]>
            :: signature.Parameters;

          if (returnTypeIsVoid) mandatoryParameters
          else <[ parameter: prefix : $(signature.ReturnType) ]> :: mandatoryParameters;
        }

        _postfixWalkerTB = walkersModule.DefineNestedType(<[ decl:
          public abstract class $(Rule.Name + "_PostfixWalker" : usesite) : N2.Runtime.WalkerBase
          {
            public abstract Walk(..$postfixParameters) : $(signature.ReturnType);
          }
        ]>);

        _walkerDataTB = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.Name + "_WalkerData" : usesite) : N2.Runtime.IExtensibleRuleWalkerData
          {
            public CompositeAstWalker : CompositeAstWalker;
            public ParserData         : ExtensibleRuleParserData;
            public PrefixWalkers      : array[$(FixedType.Class(_prefixWalkerTB, []) : typed)];
            public PostfixWalkers     : array[$(FixedType.Class(_postfixWalkerTB, []) : typed)];

            public this(parserData : N2.Runtime.ExtensibleRuleParserData, compositeAstWalker : N2.Runtime.CompositeAstWalker)
            {
              CompositeAstWalker = compositeAstWalker;

              ParserData = parserData;

              PrefixWalkers = array(ParserData.PrefixParsers.Length);
              foreach (parser in ParserData.PrefixParsers with i)
                PrefixWalkers[i] = compositeAstWalker.NewWalker(parser) :> $(FixedType.Class(_prefixWalkerTB, []) : typed);

              PostfixWalkers = array(ParserData.PostfixParsers.Length);
              foreach (parser in ParserData.PostfixParsers with i)
                PostfixWalkers[i] = compositeAstWalker.NewWalker(parser) :> $(FixedType.Class(_postfixWalkerTB, []) : typed);

              Walkers = array(ParserData.Parsers.Count);
              foreach (parser when parser != null in ParserData.Parsers with bp)
                Walkers[bp] = NewWalker(parser);
            }

            public Init() : void
            {
              foreach (walker in PrefixWalkers)
                walker.Init(CompositeAstWalker);
              foreach (walker in PostfixWalkers)
                walker.Init(CompositeAstWalker);
            }
          }
        ]>);

        def prefixWalkCallArguments =
          <[ ref newPos ]>
          :: <[ ast ]>
          :: <[ ref parser ]>
          :: signature.Parameters.Map(p => <[ $(p.Name : usesite)]>);

        def postfixWalkCallArguments = 
        {
          def mandatoryArguments =
            <[ prefixStartPos ]>
            :: <[ ref newPos ]>
            :: <[ ast ]>
            :: <[ ref parser ]>
            :: signature.Parameters.Map(p => <[ $(p.Name : usesite)]>);

          if (returnTypeIsVoid) mandatoryArguments
          else <[ prefixValue ]> :: mandatoryArguments
        }

        def walkParameters =
          <[ parameter: pos : ref int ]>
          :: <[ parameter: parser : ref Parser ]>
          :: signature.Parameters;

        def addAmbiguilityArguments(valueExpr, walkerExpr)
        {
          if (returnTypeIsVoid)
            walkerExpr
          else
            <[ ($valueExpr, $walkerExpr) ]>
        }

        def onPrefixAmbiguityParameters =
        {
          def ambiguityListType =
            if(returnTypeIsVoid) <[ System.Collections.Generic.List[$(FixedType.Class(_prefixWalkerTB, []) : typed)] ]>
            else <[ System.Collections.Generic.List[$(signature.ReturnType) * $(FixedType.Class(_prefixWalkerTB, []) : typed)] ]>;

          <[ parameter: startPos : int ]>
          :: <[ parameter: endPos : int ]>
          :: <[ parameter: parser : ref N2.Internal.Parser ]>
          :: <[ parameter: ambiguities : $ambiguityListType ]>
          :: signature.Parameters;
        }

        def onPrefixAmbiguityArguments =
          <[ pos ]>
          :: <[ firstNewPos ]>
          :: <[ ref parser ]>
          :: <[ ambiguilitys ]>
          :: signature.Parameters.Map(p => <[ $(p.Name : usesite)]>);

        def onPostfixAmbiguityParameters =
        {
          def ambiguityListType =
            if(returnTypeIsVoid) <[ System.Collections.Generic.List[$(FixedType.Class(_postfixWalkerTB, []) : typed)] ]>
            else <[ System.Collections.Generic.List[$(signature.ReturnType) * $(FixedType.Class(_postfixWalkerTB, []) : typed)] ]>;

          <[ parameter: startPos : int ]>
          :: <[ parameter: endPos : int ]>
          :: <[ parameter: parser : ref N2.Internal.Parser ]>
          :: <[ parameter: ambiguities : $ambiguityListType ]>
          :: signature.Parameters;
        }

        def onPostfixAmbiguityArguments =
          <[ pos ]>
          :: <[ firstNewPos ]>
          :: <[ ref parser ]>
          :: <[ ambiguilitys ]>
          :: signature.Parameters.Map(p => <[ $(p.Name : usesite)]>);

        def onPrefixMissedParameters =
          <[ parameter: pos : int ]>
          :: <[ parameter: parser : ref N2.Internal.Parser ]>
          :: signature.Parameters;

        def onPrefixMissedArguments =
          <[ pos ]>
          :: <[ ref parser ]>
          :: signature.Parameters.Map(p => <[ $(p.Name : usesite)]>);

        _walkerTB = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.Name + "_Walker" : usesite) : N2.Runtime.ExtensibleRuleWalkerBase
          {
            public PrefixWalkers : array[$(FixedType.Class(_prefixWalkerTB, []) : typed)];
            public PostfixWalkers : array[$(FixedType.Class(_postfixWalkerTB, []) : typed)];

            public this(walkerData : $(FixedType.Class(_walkerDataTB, []) : typed), parser : N2.Internal.ExtensibleRuleParser)
            {
              base(parser);

              PrefixWalkers         = walkerData.PrefixWalkers;
              PostfixWalkers        = walkerData.PostfixWalkers;
            }

            public OnPrefixAmbiguity(..$onPrefixAmbiguityParameters) : $(signature.ReturnType)
            {
              _ = parser;
              _ = endPos;
              throw N2.Runtime.PrefixAmbiguityException($"Ambiguity between prefix rules of '$RuleFullName'.", startPos, Parser, ambiguities);
            }

            public OnPostfixAmbiguity(..$onPostfixAmbiguityParameters) : $(signature.ReturnType)
            {
              _ = parser;
              _ = endPos;
              throw N2.Runtime.PostfixAmbiguityException($"Ambiguity between postfix rules of '$RuleFullName'.", startPos, Parser, ambiguities);
            }

            public OnPrefixMissed(..$onPrefixMissedParameters) : $(signature.ReturnType)
            {
              _ = parser;
              throw N2.Runtime.PrefixMissedException($"Expected '$RuleFullName' rule.", pos, Parser);
            }

            // этот код должен генерироваться, так как через него протаскиваются параметры и возвращаемое значение.
            public Walk(..$walkParameters) : $(signature.ReturnType)
            {
              mutable newPos;
              mutable ast = FindFirstPrefix(pos, ref parser);
              if (ast > 0)
              {
                mutable prefixWalker = PrefixWalkers[parser.ast[ast + ExtensibleRuleParser.AstOfs.Id] - PrefixWalkersOffset];
                newPos = pos;
                def prefixStartPos = pos;
                mutable prefixValue = prefixWalker.Walk(..$prefixWalkCallArguments);
                ast = FindNextPrefix(ast, ref parser);
                when (ast > 0)
                {
                  def firstNewPos = newPos;
                  def ambiguilitys = System.Collections.Generic.List();
                  ambiguilitys.Add($(addAmbiguilityArguments(<[ prefixValue ]>, <[ prefixWalker ]>)));
                  while (ast > 0)
                  {
                    def nextPrefixWalker = PrefixWalkers[parser.ast[ast + ExtensibleRuleParser.AstOfs.Id] - PrefixWalkersOffset];
                    newPos = pos;
                    def nextValue = nextPrefixWalker.Walk(..$prefixWalkCallArguments);
                    assert(newPos == firstNewPos);
                    ambiguilitys.Add($(addAmbiguilityArguments(<[ nextValue ]>, <[ nextPrefixWalker ]>)));
                    prefixWalker = nextPrefixWalker;
                    ast = FindNextPrefix(ast, ref parser);
                  }
                  prefixValue = OnPrefixAmbiguity(..$onPrefixAmbiguityArguments);
                }
                pos = newPos;

                mutable postfixWalker;
                mutable postfixValue;
                while (pos < parser.Text.Length && { ast = FindFirstPostfix(pos, ref parser); ast > 0 })
                {
                  postfixWalker = PostfixWalkers[(parser.ast[ast + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.PostfixMask.Id) - PostfixWalkersOffset];
                  newPos = pos;
                  postfixValue = postfixWalker.Walk(..$postfixWalkCallArguments);
                  when (newPos == pos)
                    break;
                  ast = FindNextPostfix(ast, ref parser);
                  when (ast > 0)
                  {
                    def firstNewPos = newPos;
                    def ambiguilitys = System.Collections.Generic.List();
                    ambiguilitys.Add($(addAmbiguilityArguments(<[ postfixValue ]>, <[ postfixWalker ]>)));
                    while (ast > 0)
                    {
                      def nextWalker = PostfixWalkers[(parser.ast[ast + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.PostfixMask.Id) - PostfixWalkersOffset];
                      newPos = pos;
                      def nextValue = nextWalker.Walk(..$postfixWalkCallArguments);
                      assert(newPos == firstNewPos);
                      ambiguilitys.Add($(addAmbiguilityArguments(<[ nextValue ]>, <[ nextWalker ]>)));
                      postfixWalker = nextWalker;
                      ast = FindNextPostfix(ast, ref parser);
                    }
                    postfixValue = OnPostfixAmbiguity(..$onPostfixAmbiguityArguments);
                  }
                  prefixValue = postfixValue;
                  pos = newPos;
                }
                prefixValue;
              }
              else
              {
                OnPrefixMissed(..$onPrefixMissedArguments);
              }
            }
          }
        ]>);

        _walkerDataTB.Define(<[ decl:
            public Walkers : array[$(FixedType.Class(_walkerTB, []) : typed)];
        ]>);

        _walkerDataTB.Define(<[decl:
          public NewWalker(parser : N2.Runtime.ExtensibleRuleParser) : $(FixedType.Class(_walkerTB, []) : typed)
          {
            $(FixedType.Class(_walkerTB, []) : typed)(this, parser)
          }
        ]>);
      }

      public override Emit() : void
      {
        _prefixWalkerTB.Compile();
        _postfixWalkerTB.Compile();
        _walkerDataTB.Compile();
        _walkerTB.Compile();
      }
    }
  }
}
