using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class ExtentionRuleWalkerEmitter : RuleWalkerEmitter[ExtentionRuleSymbol]
    {
      [RecordIgnore] public override WalkerTb : TypeBuilder { get; private set; }

      public override RuleParserBaseType : PExpr
      {
        get { <[ N2.Internal.ExtentionRuleParser ]> }
      }

      public override Define(walkersModule : TypeBuilder) : void
      {
        def signature = Generator.GetSignature(Rule.BaseRule.Value);
        WalkerTb =
          match (Rule.ExtentionType)
          {
            | Prefix  =>
              def prefixParameters =
                <[ parameter: pos : ref int ]>
                :: <[ parameter: astPtr : int ]>
                :: <[ parameter: parser : ref N2.Internal.Parser ]>
                :: signature.Parameters;

              walkersModule.DefineNestedType(<[ decl:
                public sealed class $(Rule.Name + "_Walker" : usesite) : $(Rule.BaseRule.Value.Name + "_PrefixWalker" : usesite)
                {
                  private RuleParser : $(Rule.GetParserClassRef());
                  public this(ruleParser : $(RuleParserBaseType))
                  {
                    RuleParser = ruleParser :> $(Rule.GetParserClassRef());
                  }

                  public override Init(compositeAstWalker : N2.Runtime.CompositeAstWalker) : void
                  {

                  }

                  public override Walk(..$prefixParameters) : $(signature.ReturnType)
                  {
                    assert(false)
                  }
                }
              ]>);

            | Postfix =>
              def returnTypeIsVoid = signature.ReturnType is <[ void ]>; // TODO: сделать более точную проверку на void
              def postfixParameters =
              {
                def mandatoryParameters =
                  <[ parameter: startPos : int ]>
                  :: <[ parameter: pos : ref int ]>
                  :: <[ parameter: astPtr : int ]>
                  :: <[ parameter: parser : ref N2.Internal.Parser ]>
                  :: signature.Parameters;

                if (returnTypeIsVoid) mandatoryParameters
                else <[ parameter: prefix : $(signature.ReturnType) ]> :: mandatoryParameters;
              }

              walkersModule.DefineNestedType(<[ decl:
                public sealed class $(Rule.Name + "_Walker" : usesite) : $(Rule.BaseRule.Value.Name + "_PostfixWalker" : usesite)
                {
                  private RuleParser : $(Rule.GetParserClassRef());
                  public this(ruleParser : $(RuleParserBaseType))
                  {
                    RuleParser = ruleParser :> $(Rule.GetParserClassRef());
                  }

                  public override Init(compositeAstWalker : N2.Runtime.CompositeAstWalker) : void
                  {

                  }


                  public override Walk(..$postfixParameters) : $(signature.ReturnType)
                  {
                    assert(false)
                  }
                }
              ]>);
          }
      }

      public override Emit() : void
      {
        WalkerTb.Compile();
      }
    }
  }
}
