using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class ExtentionRuleWalkerEmitter : RuleWalkerEmitter[ExtentionRuleSymbol]
    {
      [RecordIgnore] private mutable _walkerTB : TypeBuilder;

      public override Define(walkersModule : TypeBuilder) : void
      {
        _walkerTB =
          match (Rule.ExtentionType)
          {
            | Prefix  => walkersModule.DefineNestedType(<[ decl:
                public sealed class $(Rule.Name + "_Walker" : usesite) : $(Rule.BaseRule.Value.Name + "_PrefixWalker" : usesite)
                {
                }
              ]>);

            | Postfix => walkersModule.DefineNestedType(<[ decl:
                public sealed class $(Rule.Name + "_Walker" : usesite) : $(Rule.BaseRule.Value.Name + "_PostfixWalker" : usesite)
                {
                }
              ]>);
          }
      }

      public override Emit() : void
      {
        _walkerTB.Compile();
      }
    }
  }
}
