using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    public Environment  : EmitterEnvironment { get; }
    public SyntaxModule : SyntaxModuleSymbol { get; }
    public Generator    : WalkerGenerator    { get; }

    private mutable _walkerModuleTB     : TypeBuilder;
    private mutable _walkerDescriptorTB : TypeBuilder;
    private         _extensibleRuleWalkerEmitters : List[ExtensibleRuleWalkerEmitter] = List();
    private         _otherRuleWalkerEmitters      : List[IRuleWalkerEmitter]          = List();

    public this(environment : EmitterEnvironment, syntaxModule : SyntaxModuleSymbol, generator : WalkerGenerator)
    {
      Environment  = environment;
      SyntaxModule = syntaxModule;
      Generator    = generator;

      foreach (ruleSymbol in SyntaxModule.Node.GetChildren.[SyntaxRuleSymbol]())
      {
        | ruleSymbol when ruleSymbol.Type is RuleType.Void && !Generator.SupportsVoidRules => ()
        | ExtensibleRuleSymbol as ruleSymbol =>
          _extensibleRuleWalkerEmitters.Add(ExtensibleRuleWalkerEmitter(Environment, Generator, ruleSymbol));

        | SimpleRuleSymbol     as ruleSymbol =>
          _otherRuleWalkerEmitters.Add(SimpleRuleWalkerEmitter(Environment, Generator, ruleSymbol));

        | ExtentionRuleSymbol  as ruleSymbol =>
          match (ruleSymbol.ExtentionType)
          {
            | Prefix  => _otherRuleWalkerEmitters.Add(PrefixRuleWalkerEmitter(Environment, Generator, ruleSymbol));
            | Postfix => _otherRuleWalkerEmitters.Add(PostfixRuleWalkerEmitter(Environment, Generator, ruleSymbol));
          }

        | _ => ()
      }
    }

    public static GetWalkerModuleName(syntaxModule : SyntaxModuleSymbol, generator : WalkerGenerator) : string
    {
      syntaxModule.Name + generator.Name + "Walkers"
    }

    public static GetRuleWalkerFullName(ruleSymbol : SyntaxRuleSymbol, generator : WalkerGenerator, suffix : string) : PExpr
    {
      def moduleName = GetWalkerModuleName(ruleSymbol.DeclaringModule, generator);
      def fullName = ruleSymbol.DeclaringModule.Node.Parent.FullNameParts + [moduleName, ruleSymbol.Name + suffix];
      PExprUtils.FromQualifiedIdentifier(fullName)
    }

    public DefineModule() : void
    {
      assert(_walkerModuleTB == null);

      _walkerModuleTB = Environment.NamespaceOfSymbol(SyntaxModule).Define(<[ decl: public module $(GetWalkerModuleName(SyntaxModule, Generator) : usesite) {} ]>);
    }

    public DefineExtensibleRuleWalkers() : void
    {
      assert(_walkerModuleTB != null);

      foreach (emitter in _extensibleRuleWalkerEmitters)
        emitter.Define(_walkerModuleTB);
    }

    public DefineOtherRuleWalkers() : void
    {
      assert(_walkerModuleTB != null);

      foreach (emitter in _otherRuleWalkerEmitters)
        emitter.Define(_walkerModuleTB);
    }

    public DefineDescriptor() : void
    {
      assert(_walkerModuleTB != null);
      assert(_walkerDescriptorTB == null);

      _walkerDescriptorTB = _walkerModuleTB.DefineNestedType(<[ decl:
        private sealed class $("WalkerDescriptor" : usesite) : N2.Runtime.GrammarWalkerDescriptor
        {
          public this() {}
        }
      ]>);

      _walkerDescriptorTB.DefineConditional(<[ decl:
        public override WalkerType : string
        {
          get { $(Generator.Name : string) }
        }
      ]>);

      _walkerDescriptorTB.DefineConditional(<[ decl:
        public override Grammar : N2.GrammarDescriptor
        {
          get { $(PExprUtils.FromQualifiedIdentifier(SyntaxModule.Node.FullNameParts)).StaticDescriptor }
        }
      ]>);

      def cases = List();
      foreach (walkerEmitter in _otherRuleWalkerEmitters)
        cases.Add(<[ case:
          | $(walkerEmitter.Rule.IdInGrammar : int) =>
            $(walkerEmitter.WalkerTb.GetMemType() : typed)(ruleParser :> $(walkerEmitter.RuleParserBaseType))
        ]>);
      cases.Add(<[ case: | _ => null ]>); // TODO FIXME assert(false)

      _walkerDescriptorTB.DefineConditional(<[ decl:
        public override NewWalker(ruleParser : N2.Internal.RuleParser) : N2.Runtime.WalkerBase
        {
          assert(Grammar.Equals(ruleParser.Descriptor.Grammar));
          match (ruleParser.Descriptor.IdInGrammar)
          {
            ..$(cases.ToNList())
          }
        }
      ]>);

      def cases = List();
      foreach (walkerEmitter in _extensibleRuleWalkerEmitters)
        cases.Add(<[ case:
          | $(walkerEmitter.Rule.IdInGrammar : int) =>
            $(walkerEmitter.WalkerDataTb.GetMemType() : typed)(parserData, compositeAstWalker)
        ]>);
      cases.Add(<[ case: | _ => assert(false) ]>);

      _walkerDescriptorTB.DefineConditional(<[ decl:
        public override NewExtensibleRuleWalkerData(parserData : N2.Runtime.ExtensibleRuleParserData, compositeAstWalker : N2.Runtime.CompositeAstWalker) : N2.Runtime.ExtensibleRuleWalkerData
        {
          ignore(parserData, compositeAstWalker);
          match (parserData.Descriptor.IdInGrammar)
          {
            ..$(cases.ToNList())
          }
        }
      ]>);

      _walkerModuleTB.DefineConditional(<[ decl:
        private static _staticDescriptor : N2.Runtime.GrammarWalkerDescriptor = $(_walkerDescriptorTB.GetMemType() : typed)();
      ]>);

      _walkerModuleTB.DefineConditional(<[ decl:
        public static StaticDescriptor : N2.Runtime.GrammarWalkerDescriptor { get { _staticDescriptor } }
      ]>);
    }

    public Emit() : void
    {
      assert(_walkerModuleTB != null);

      foreach (emitter in _extensibleRuleWalkerEmitters)
        emitter.Emit();

      foreach (emitter in _otherRuleWalkerEmitters)
        emitter.Emit();

      _walkerDescriptorTB.Compile();
      _walkerModuleTB.Compile();
    }
  }
}
