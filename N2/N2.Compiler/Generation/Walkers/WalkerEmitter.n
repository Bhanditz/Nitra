using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed partial class WalkerEmitter
  {
    public Environment  : EmitterEnvironment { get; }
    public SyntaxModule : SyntaxModuleSymbol { get; }
    public Generator    : WalkerGenerator    { get; }

    private mutable _walkerModuleTB     : TypeBuilder;
    private         _ruleWalkerEmitters : List[IRuleWalkerEmitter] = List();

    public this(environment : EmitterEnvironment, syntaxModule : SyntaxModuleSymbol, generator : WalkerGenerator)
    {
      Environment  = environment;
      SyntaxModule = syntaxModule;
      Generator    = generator;

      foreach (ruleSymbol in SyntaxModule.Node.GetChildren.[ExtensibleRuleSymbol]())
        _ruleWalkerEmitters.Add(ExtensibleRuleWalkerEmitter(Environment, Generator, ruleSymbol));

      foreach (ruleSymbol in SyntaxModule.Node.GetChildren.[SyntaxRuleSymbol]())
      {
        | SimpleRuleSymbol(Type = RuleType.Void) as ruleSymbol when Generator.SupportsVoidRules
        | SimpleRuleSymbol                       as ruleSymbol => _ruleWalkerEmitters.Add(SimpleRuleWalkerEmitter(Environment, Generator, ruleSymbol));
        | ExtentionRuleSymbol                    as ruleSymbol => _ruleWalkerEmitters.Add(ExtentionRuleWalkerEmitter(Environment, Generator, ruleSymbol));
        | _ => ()
      }
    }

    public Define() : void
    {
      assert(_walkerModuleTB == null);

      def name = SyntaxModule.Name + Generator.Name + "Walkers";
      _walkerModuleTB = Environment.NamespaceOfSymbol(SyntaxModule).Define(<[ decl: public module $(name : usesite) {} ]>);

      foreach (emitter in _ruleWalkerEmitters)
        emitter.Define(_walkerModuleTB);
    }

    public Emit() : void
    {
      assert(_walkerModuleTB != null);
      foreach (emitter in _ruleWalkerEmitters)
        emitter.Emit();

      _walkerModuleTB.Compile();
    }
  }
}
