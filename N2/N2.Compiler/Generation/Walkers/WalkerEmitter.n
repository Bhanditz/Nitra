using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  public sealed class WalkerEmitter
  {
    public Environment  : EmitterEnvironment { get; }
    public SyntaxModule : SyntaxModuleSymbol { get; }
    public Generator    : WalkerGenerator    { get; }

    private mutable _walkerModuleTB     : TypeBuilder;
    private         _ruleWalkerEmitters : List[IRuleWalkerEmitter] = List();

    public this(environment : EmitterEnvironment, syntaxModule : SyntaxModuleSymbol, generator : WalkerGenerator)
    {
      Environment  = environment;
      SyntaxModule = syntaxModule;
      Generator    = generator;

      foreach (ruleSymbol in SyntaxModule.Node.GetChildren.[ExtensibleRuleSymbol]())
        _ruleWalkerEmitters.Add(ExtensibleRuleWalkerEmitter(Environment, Generator, ruleSymbol));

      foreach (ruleSymbol in SyntaxModule.Node.GetChildren.[SyntaxRuleSymbol]())
      {
        | SimpleRuleSymbol(Type = RuleType.Void) as ruleSymbol when Generator.SupportsVoidRules
        | SimpleRuleSymbol                       as ruleSymbol => _ruleWalkerEmitters.Add(SimpleRuleWalkerEmitter(Environment, Generator, ruleSymbol));
        | ExtentionRuleSymbol                    as ruleSymbol => _ruleWalkerEmitters.Add(ExtentionRuleWalkerEmitter(Environment, Generator, ruleSymbol));
        | _ => ()
      }
    }

    public Define() : void
    {
      assert(_walkerModuleTB == null);

      def name = SyntaxModule.Name + Generator.Name + "Walkers";
      _walkerModuleTB = Environment.NamespaceOfSymbol(SyntaxModule).Define(<[ decl: public module $(name : usesite) {} ]>);

      foreach (emitter in _ruleWalkerEmitters)
        emitter.Define(_walkerModuleTB);
    }

    public Emit() : void
    {
      assert(_walkerModuleTB != null);
      foreach (emitter in _ruleWalkerEmitters)
        emitter.Emit();

      _walkerModuleTB.Compile();
    }

    private interface IRuleWalkerEmitter
    {
      Rule : RuleSymbol { get }
      Define(walkersModule : TypeBuilder) : void;
      Emit() : void;
    }

    [Record]
    private abstract class RuleWalkerEmitter[TRuleSymbol] : IRuleWalkerEmitter where TRuleSymbol : RuleSymbol
    {
      public Environment : EmitterEnvironment { get; }
      public Generator   : WalkerGenerator    { get; }
      public Rule        : TRuleSymbol implements IRuleWalkerEmitter.Rule { get; }

      public abstract Define(walkersModule : TypeBuilder) : void;
      public abstract Emit() : void;
    }

    [Record]
    private sealed class SimpleRuleWalkerEmitter : RuleWalkerEmitter[SimpleRuleSymbol]
    {
      public override Define(walkersModule : TypeBuilder) : void
      {
        
      }

      public override Emit() : void
      {
        
      }
    }


    [Record]
    private sealed class ExtensibleRuleWalkerEmitter : RuleWalkerEmitter[ExtensibleRuleSymbol]
    {
      [RecordIgnore] private mutable _prefixWalkerTB  : TypeBuilder;
      [RecordIgnore] private mutable _postfixWalkerTB : TypeBuilder;

      public override Define(walkersModule : TypeBuilder) : void
      {
        def signature = Generator.GetSignature();
        _prefixWalkerTB = walkersModule.DefineNestedType(<[ decl:
          public abstract class $(Rule.Name + "PrefixWalker" : usesite) : N2.Runtime.WalkerBase
          {
            public abstract Walk(pos : ref int, astPtr : int, parser : ref Parser) : void;
          }
        ]>);
        _postfixWalkerTB = walkersModule.DefineNestedType(<[ decl:
          public abstract class $(Rule.Name + "PostfixWalker" : usesite) : N2.Runtime.WalkerBase
          {
            public abstract Walk(prefix : T, startPos : int, pos : ref int, astPtr : int, parser : ref Parser) : void;
          }
        ]>);
      }

      public override Emit() : void
      {
        _prefixWalkerTB.Compile();
        _postfixWalkerTB.Compile();
      }
    }

    [Record]
    private sealed class ExtentionRuleWalkerEmitter : RuleWalkerEmitter[ExtentionRuleSymbol]
    {
      public override Define(walkersModule : TypeBuilder) : void
      {
        
      }

      public override Emit() : void
      {
        
      }
    }
  }
}
