using N2.Model;
using N2.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal sealed class AstPointerAllocator
  {
    private         _ruleStructure : RuleStructure;
    private         _baseName      : string;
    private mutable _astPointer    : AstPointer;
    private mutable _declared      : bool;

    public this (ruleStructure : RuleStructure, baseName : string)
    {
      _ruleStructure = ruleStructure;
      _baseName      = baseName;
    }

    public Allocate() : AstPointer
    {
      assert(!_declared);

      when (_astPointer == null)
        _astPointer = AstPointer.New(_ruleStructure, _baseName);
      _astPointer
    }

    public Declare() : PExpr
    {
      assert(!_declared);

      _declared = true;
      if (_astPointer == null)
        <[ () ]>
      else
        <[
          def $(_astPointer.Name : dyn) = {
            astPtr:
            {
              for (mutable ast = parser.memoize[pos]; ast > 0; ast = parser.ast[ast + 1])
                when (parser.ast[ast] == this.RuleParser.$(_ruleStructure.AstId : dyn))
                  astPtr(ast);
              assert(false);
            }
          }
        ]>
    }
  }
}
