using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  [StructuralEquality]
  public class AmbiguousSymbol : Symbol
  {
    public this(ambiguousList : list[Symbol])
    {
      assert2(ambiguousList.Length > 1);
      def first = ambiguousList.Head;
      def name  = first.Name;
      def node  = first.Node;

      base(first.Location);

      foreach (s in ambiguousList)
      {
        assert2(s.Name == name);
        assert2(s.Node : object == node);
      }

      AmbiguousList = ambiguousList;
    }
    
    public AmbiguousList : list[Symbol] { get; }
    
    public GetAmbiguous[T](exclude : T = default(_)) : Seq[T]
      where T: Symbol
    {
      def result = AmbiguousList.OfType.[T]();
      
      if (exclude == null)
        result
      else
        result.Where(x => x : object != exclude)
    }
    
    public ReportAlreadyDefined[T](newSymbol : T) : void
      where T: Symbol
    {
      def ambiguousSyntaxModules = GetAmbiguous(exclude = newSymbol);
      Message.Error(newSymbol.NLocation(), $"The $(newSymbol) '$(newSymbol.Name)' already defined.");
      foreach (other in ambiguousSyntaxModules)
        Message.Hint(other.NLocation(), "   previous definition.");
    }
    
    public override Description : string
    {
      get { "some symbols" }
    }
  }
}
