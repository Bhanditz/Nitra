using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace N2.Typing
{
  public class HierarchyNode : IEquatable[HierarchyNode]
  {
    //static private Root : HierarchyNode = HierarchyNode(null, null, null);
    public this()
    {
      this(null, null, null)
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private mutable _children : Hashtable[string, HierarchyNode] = Hashtable();
    
    private Children : Hashtable[string, HierarchyNode]
    {
      get
      {
        when (_children == null)
          _children = Hashtable();
        _children
      }
    }
    
    public PartName : string { get; }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    mutable _symbol : N2.Typing.Symbol;
    
    public Symbol : N2.Typing.Symbol
    {
      get { _symbol ?? Symbol.Default }
    }
    
    private this(parent : HierarchyNode, symbol : N2.Typing.Symbol, partName : string)
    {
      Parent = parent;
      _symbol = symbol;
      PartName = partName;
      
      when (parent != null)
        parent.Children[symbol.Name] = this;
        
      assert2(symbol == null || symbol.Node == null);
      
      when (symbol != null)
      {
        if (_symbol == null)
          _symbol = symbol;
        else (_symbol != symbol)
      }
    }
    
    public Add([NotNull] symbol : N2.Typing.Symbol) : HierarchyNode
    {
      HierarchyNode(this, symbol, symbol.Name)
    }

    public AddNamespace([NotNull] partName : string) : HierarchyNode
    {
      mutable child;
      if (_children?.TryGetValue(partName, out child))
        child
      else
      {
        def result = HierarchyNode(this, null, partName);
        Children[partName] = result;
        result
      }
    }

    public AddNamespace([NotNull] parts : list[string]) : HierarchyNode
    {
      mutable parent = this;
      foreach (part in parts)
        parent = parent.AddNamespace(part);
      parent
    }

    public Parent : HierarchyNode { get; }
  }
}
