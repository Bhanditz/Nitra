using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace N2.Typing
{
  public class HierarchyNode : IEquatable[HierarchyNode]
  {
    //static private Root : HierarchyNode = HierarchyNode(null, null, null);
    public this()
    {
      this(null, null)
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private mutable _children : Hashtable[string, HierarchyNode] = Hashtable();
    
    private Children : Hashtable[string, HierarchyNode]
    {
      get
      {
        when (_children == null)
          _children = Hashtable();
        _children
      }
    }
    
    public PartName : string { get; }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    mutable _symbol : N2.Typing.Symbol;
    
    public Symbol : N2.Typing.Symbol
    {
      get { _symbol }
    }
    
    private this(parent : HierarchyNode, partName : string)
    {
      Parent   = parent;
      PartName = partName;
      
      when (parent != null)
        parent.Children.Add(partName, this);
    }

    public FullNameParts : list[string]
    {
      [Memoize]
      get
      {
        def loop(node : HierarchyNode, parts : list[string]) : list[string]
        {
          if (node.Parent == null)
            parts
          else
            loop(node.Parent, node.PartName :: parts)
            
        }
        
        loop(this, [])
      }
    }
    
    public FullName : string { [Memoize] get { $<#..$(FullNameParts; ".")#> } }


    public SetSymbol([NotNull] symbol : Symbol) : void
    {
      assert2(symbol.Name == PartName);
      assert2(symbol.Node == null);
      
      match (_symbol, symbol)
      {
        | (null, _) => _symbol = symbol;
        | (a1 is AmbiguousSymbol, a2 is AmbiguousSymbol) => _symbol = AmbiguousSymbol(a1.AmbiguousList + a2.AmbiguousList);
        | (a1 is AmbiguousSymbol, s) => _symbol = AmbiguousSymbol(s :: a1.AmbiguousList);
        | (_, _ is AmbiguousSymbol) => assert2(false);
        | (s1, s2) => _symbol = AmbiguousSymbol([s1, s2]);
      }
        
      _symbol.Node = this;
    }
    
    public Add([NotNull] symbol : N2.Typing.Symbol) : HierarchyNode
    {
      def node = AddNode(symbol.Name);
      node.SetSymbol(symbol);
      node
    }

    public AddNode([NotNull] partName : string) : HierarchyNode
    {
      mutable child;
      if (_children?.TryGetValue(partName, out child))
        child
      else
      {
        def result = HierarchyNode(this, partName);
        Children[partName] = result;
        result
      }
    }

    public AddNode([NotNull] parts : list[string]) : HierarchyNode
    {
      mutable parent = this;
      foreach (part in parts)
        parent = parent.AddNode(part);
      parent
    }

    public Parent : HierarchyNode { get; }
    
    public override ToString() : string { FullName }
  }
}
