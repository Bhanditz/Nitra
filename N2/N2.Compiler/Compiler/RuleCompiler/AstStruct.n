using Nemerle;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal class FieldOffsets
  {
    public AstStruct : AstStruct;
    private SizeOffset : option[int];
    private AstOffset  : option[int];

    public BestSizePExpr : PExpr
    {
      get
      {
        assert(AstStruct.Field.Level == 0);
        def ofs = if (SizeOffset is Some(ofs))
          <[ $(AstStruct.HeaderSize + ofs) ]>;
        else
          PExpr.Error("Invalid size offset.");
        <[ parser.ast[bestAstPos + $ofs] ]>
      }
    }

    public SizePExpr       : PExpr { get { <[ parser.ast[$SizeOffsetPExpr] ]> } }
    public SizeOffsetPExpr : PExpr
    {
      get
      {
        def ofs = if (SizeOffset is Some(ofs))
          <[ $(AstStruct.HeaderSize + ofs) ]>;
        else
          PExpr.Error("Invalid size offset.");
        <[ $(AstStruct.AstPosPExpr) + $ofs ]>
      }
    }

    public AstPExpr       : PExpr { get { <[ parser.ast[$AstOffsetPExpr] ]> } }
    public AstOffsetPExpr : PExpr
    {
      get
      {
        def ofs = if (AstOffset is Some(ofs))
          <[ $(AstStruct.HeaderSize + AstStruct.SizeOffsetsSize + AstStruct.Terminator + ofs) ]>;
        else
          PExpr.Error("Invalid ast offset.");
        <[ $(AstStruct.AstPosPExpr) + $ofs ]>
      }
    }
  }

  internal class AstStruct
  {
    public Field : AstField;
    public this(Field : AstField)
    {
      this.Field = Field;
    }
    public mutable HeaderSize      : int = 0;
    public mutable SizeOffsetsSize : int = 0;
    public mutable Terminator      : int = 0;
    public mutable AstOffsetsSize  : int = 0;
    public AstSize : int { get { HeaderSize + SizeOffsetsSize + Terminator + AstOffsetsSize } }
    public TerminatorOffset : int { get { HeaderSize + SizeOffsetsSize } }

    public mutable OkLabel   : PExprLabel;
    public mutable FailLabel : PExprLabel;

    public AstPosPExpr  : PExpr { get { <[ $($"astPos$(Field.Level)" : dyn) ]> } }
    public TextPosPExpr : PExpr { get { <[ $($"textPos$(Field.Level)" : dyn) ]> } }

    public AllocateField(size : option[int], ast : option[int]) : FieldOffsets
    {
      def sizeOffset = SizeOffsetsSize;
      def astOffset  = AstOffsetsSize;
      def sizeOffset = if (size is Some(size)) { SizeOffsetsSize += size; Some(sizeOffset) } else None();
      def astOffset  = if (ast  is Some(ast))  { AstOffsetsSize  += ast;  Some(astOffset)  } else None();
      FieldOffsets(this, sizeOffset, astOffset)
    }
  }
}
