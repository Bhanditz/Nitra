using Nemerle;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  internal class AstStruct
  {
    public Field : RuleField;
    public IsAst : bool { get { Field is RuleField.Ast } }

    public OkLabel   : PExprLabel;
    public FailLabel : PExprLabel;

    public this(field : RuleField, labelName : string)
    {
      Field     = field;
      OkLabel   = Field.Compiler.MakeLabel($"$(labelName)_$(Field.State)_Ok");
      FailLabel = Field.Compiler.MakeLabel($"$(labelName)_$(Field.State)_Fail");
    }

    private mutable HeaderSize      : int = 0;
    private mutable SizesSize       : int = 0;
    private mutable AstOffsetsSize  : int = 0;
    public  mutable AllocateState   : int;

    public TerminatorOffset : int { get { HeaderSize + SizesSize } }
    public TerminatorSize   : int { get { if (IsAst) 1 else 0 } }

    public AstSize : int { get { HeaderSize + SizesSize + TerminatorSize + AstOffsetsSize } }

    [Record]
    public abstract class FieldBase
    {
      public AstStruct : AstStruct;
      public abstract OffsetInStruct : int { get; }
    }

    public class HeaderField : FieldBase
    {
      public override OffsetInStruct : int { get { InternalOffset } }
      private InternalOffset : int;
      public this(astStruct : AstStruct)
      {
        base(astStruct);
        InternalOffset = astStruct.HeaderSize;
        astStruct.HeaderSize += 1;
      }
    }

    public class SizeField : FieldBase
    {
      public override OffsetInStruct : int { get { InternalOffset + AstStruct.HeaderSize } }
      private InternalOffset : int;
      public this(astStruct : AstStruct)
      {
        base(astStruct);
        assert(astStruct.IsAst);
        InternalOffset = astStruct.SizesSize;
        astStruct.SizesSize += 1;
      }
      public BestRef : PExpr { get { <[ parser.ast[bestAstPos + $(AstStruct.HeaderSize : int)] ]> } }
    }

    public class AstField : FieldBase
    {
      public override OffsetInStruct : int { get { InternalOffset + AstStruct.HeaderSize + AstStruct.SizesSize + AstStruct.TerminatorSize } }
      private InternalOffset : int;
      public this(astStruct : AstStruct)
      {
        base(astStruct);
        InternalOffset = astStruct.AstOffsetsSize;
        astStruct.AstOffsetsSize += 1;
      }
    }
  }
}
