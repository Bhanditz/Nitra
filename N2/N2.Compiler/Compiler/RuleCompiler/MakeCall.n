using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class RuleCompiler
  {
    private MakeTokenCall(rd : RuleDefinition) : PExpr
    {
      | Regular      as rd => <[ $(_grammarCompiler.GrammarImplTB.GetMemType() : typed).$(_grammarCompiler.DecorateRuleName(rd) : dyn) ]>
      | ExternalRule as rd => <[ $(rd.grammarRef.GrammarType : typed).GrammarImpl.$(_grammarCompiler.DecorateRuleName(rd) : dyn) ]>
      | _                  => assert(false)
    }

    private _simpleCalls : SCG.List[RuleDefinition * string] = SCG.List();

    [Memoize]
    private MakeCall(rd : RuleDefinition) : PExpr
    {
      def name = $"_simple_rule_parser_$(_simpleCalls.Count)";
      _simpleCalls.Add((rd, name));
      <[ $(name : dyn).Parse ]>
    }

    private _extensibleCalls : SCG.List[RuleDefinition * int * string] = SCG.List();

    [Memoize]
    private MakeCall(rd : RuleDefinition, bindingPower : int) : PExpr
    {
      def name = $"_extensible_rule_parser_$(_extensibleCalls.Count)";
      _extensibleCalls.Add((rd, bindingPower, name));
      <[ $(name : dyn).Parse ]>
    }
  }
}
