using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Compiler;

namespace N2
{
  internal partial class RuleCompiler
  {
    private Convert(rule : Rule) : array[RuleField]
    {
      def conv(rule : Rule) : array[RuleField]
      {
        match (rule)
        {
          | And                   as rule => array[RuleField.Predicate  (conv(rule.rule), true)]
          | Not                   as rule => array[RuleField.Predicate  (conv(rule.rule), false)]
          | Repeat(0, Some(1), _) as rule => array[RuleField.Option     (conv(rule.rule))]
          | Repeat                as rule => array[RuleField.List       (conv(rule.rule),                       rule.minCount, rule.maxCount)]
          | RepeatWithSeparator   as rule => array[RuleField.List2      (conv(rule.rule), conv(rule.separator), rule.minCount, rule.maxCount)]
          | String                as rule => array[RuleField.TokenString(rule.str)]
          | Sequence              as rule => rule.rules.Map(conv(_)).Flatten().NToArray();
          | Call                  as rule =>
            def rd   = _grammarCompiler.TypedGrammar.GetRule(rule.name);
            match (rd, _grammarCompiler.GetRuleType(rd))
            {
              | (ExtentionPoint         , _    ) => array[RuleField.ExtentionPoint(rd, rule.bindingPower)]
              | (ExternalRule(_, true)  , _    ) => array[RuleField.ExtentionPoint(rd, rule.bindingPower)]
              | (ExternalRule(_, false) , Void ) => array[RuleField.Void(rd)]
              | (ExternalRule(_, false) , _    ) => array[RuleField.ExternalAst(rd)]
              | (Simple                 , Void ) => array[RuleField.Void(rd)]
              | (Simple                 , _    ) => array[RuleField.ExternalAst(rd)]
              | (Regular                , _    ) => array[RuleField.TokenCall(rd)]
              | (Marker                 , _    ) => array[]
              | _     => assert(false);
            }
          | PrefixCall                  => assert(false)
        }
      }
      def rule = match (rule)
      {
        | Sequence(PrefixCall :: rules) as rule => Rule.Sequence(rule.Location, rule.Type, rule.Id, rules)
        | rule => rule
      }
      def ast = RuleField.Ast(conv(rule), _ruleDefinition);
      def fields = SCG.List();
      ast.Init(this, null, 0, fields);
      ast.CalculateAstInfo();
      fields.Iter(_.Compile());
      fields.NToArray();
    }
  }
}
