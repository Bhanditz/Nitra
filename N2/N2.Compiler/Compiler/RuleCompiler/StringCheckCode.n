using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class RuleCompiler
  {
    public StringCheckCode(pos : PExpr, str : string) : PExpr
    {
      def len = str.Length;
      def check = if (len > 1) <[$pos + $((len - 1) : int)]> else <[ $pos ]>;

      def makeCharCheckCode(ch : char, i : int) : PExpr
      {
        def index = if (i <= 0) <[ $pos ]> else <[ $pos + $(i : int) ]>;
        <[ text[$index] == $(ch : char) ]>
      }
      def exprs = str.Select(makeCharCheckCode);
      def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);
      <[ $check < text.Length && $condExpr ]>
    }
  }
}
