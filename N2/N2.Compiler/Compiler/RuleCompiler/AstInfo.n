using Nemerle;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Compiler
{
  [Record]
  internal class FieldOffsets
  {
    public AstInfo : AstInfo;
    private SizeOffset : int;
    private AstOffset  : int;

    public BestSizePExpr : PExpr
    {
      get
      {
        assert(AstInfo.Field.Level == 0);
        def ofs = if (SizeOffset < 0)
          PExpr.Error("Invalid size offset.")
        else
          <[ $(AstInfo.HeaderSize + SizeOffset) ]>;
        <[ parser.ast[bestAstPos + $ofs] ]>
      }
    }

    public SizePExpr    : PExpr { get { <[ parser.ast[$SizePosPExpr] ]> } }
    public SizePosPExpr : PExpr
    {
      get
      {
        def ofs = if (SizeOffset < 0)
          PExpr.Error("Invalid size offset.")
        else
          <[ $(AstInfo.HeaderSize + SizeOffset) ]>;
        <[ $($"astPos$(AstInfo.Field.Level)" : dyn) + $ofs ]>
      }
    }

    public AstPExpr    : PExpr { get { <[ parser.ast[$AstPosPExpr] ]> } }
    public AstPosPExpr : PExpr
    {
      get
      {
        def ofs = if (AstOffset < 0)
          PExpr.Error("Invalid ast offset.")
        else
          <[ $(AstInfo.HeaderSize + AstInfo.SizeOffsetsSize + AstInfo.Terminator + AstOffset) ]>;
        <[ $($"astPos$(AstInfo.Field.Level)" : dyn) + $ofs ]>
      }
    }
  }

  internal class AstInfo
  {
    public Field : AstField;
    public this(Field : AstField)
    {
      this.Field = Field;
    }
    public mutable HeaderSize      : int = 0;
    public mutable SizeOffsetsSize : int = 0;
    public mutable Terminator      : int = 0;
    public mutable AstOffsetsSize  : int = 0;
    public AstSize : int { get { HeaderSize + SizeOffsetsSize + Terminator + AstOffsetsSize } }
    public TerminatorOffset : int { get { HeaderSize + SizeOffsetsSize } }

    public mutable OkLabel   : int;
    public mutable FailLabel : int;

    public AllocateField(size : int, ast : int) : FieldOffsets
    {
      when (size > 0) SizeOffsetsSize += size;
      when (ast > 0)  AstOffsetsSize  += ast;
      FieldOffsets(this, size, ast)
    }
  }
}
