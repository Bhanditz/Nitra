using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal class PExprLabel
  {
    private _manager : ManagerClass;
    private _id      : int;
    public this(manager : ManagerClass, name : string)
    {
      _manager = manager;
      _id      = _manager.GetNewId(name);
    }
    public Goto()  : PExpr { PExpr.Typed(Location.Default, TExpr.Goto(_manager.InternalType.Void, _id, 1)) }
    public Label() : PExpr { PExpr.Typed(Location.Default, TExpr.Label(_manager.InternalType.Void, _id, TExpr.DefaultValue(_manager.InternalType.Void))) }
  }

  internal partial class RuleCompiler
  {
    public MakeLabel(name : string) : PExprLabel
    {
      PExprLabel(_grammarCompiler.Manager, name);
    }

    public MakeLabels(count : int) : array[PExprLabel]
    {
      def labels = array(count);
      for (mutable i = 0; i < labels.Length; ++i)
        labels[i] = MakeLabel($"label$i");
      labels
    }

    public static FlattenPExprSequence(this seq : SCG.IEnumerable[PExpr], recursive : bool = true) : list[PExpr]
    {
      def expandSequence(expr : PExpr)
      {
        | Sequence(exprs) => if (recursive) exprs.FlattenPExprSequence(true) else exprs
        | _               => [expr]
      }
      seq.Map(expandSequence).Flatten();
    }
  }
}
