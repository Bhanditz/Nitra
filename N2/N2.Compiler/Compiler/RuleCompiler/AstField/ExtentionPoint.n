using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class ExtentionPoint : AstField
    {
      rd           : RuleDefinition;
      bindingPower : int;

      public override AllocateFieldOffsets(astInfo : AstInfo) : FieldOffsets
      {
        astInfo.AllocateField(Some(1), Some(2));
      }

      public override Compile() : void
      {
        ParseCode = MakeRuleCall(<[ $(Compiler.MakeCall(rd, bindingPower))(curEndPos, text, $(FieldOffsets.AstOffsetPExpr), ref parser) ]>)
      }

      public override PrintContent() : string * string { ("ExtentionPoint", $<#$(rd.Name) $bindingPower#>) }
    }
  }
}
