using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Option : AstField
    {
      fields : array[AstField];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : SCG.List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astInfo : AstInfo;
      public override CalculateAstInfo() : void
      {
        astInfo            = AstInfo(this);
        astInfo.OkLabel    = Compiler.MakeLabel();
        astInfo.FailLabel  = Compiler.MakeLabel();
        CalculateAstInfo(astInfo, fields)
      }

      public override Compile() : void
      {
        ParseCode = <[
          parseState = $State;

        $(Compiler.Label(astInfo.OkLabel));
          $(FieldOffsets.SizePExpr) = asdasd;
          $(FieldOffsets.AstPExpr)  = $(astInfo.AstPosPExpr);
          $(Compiler.Goto(ParentAstInfo.OkLabel));

        $(Compiler.Label(astInfo.FailLabel));
          $(FieldOffsets.SizePExpr) = 0;
          $(FieldOffsets.AstPExpr)  = -1;
          $(Compiler.Goto(ParentAstInfo.OkLabel));
        ]>
      }

      public override PrintContent() : string * string { ("Option", $<#$(PrintChildren(fields))#>) }
    }
  }
}
