using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Option : AstField
    {
      fields : array[AstField];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astInfo : AstInfo;
      public override CalculateAstInfo() : void
      {
        astInfo = AstInfo();
        CalculateAstInfo(astInfo, fields)
      }

      public override Compile() : void
      {
        ParseCode = PExpr.Error("Option not implemented");
      }

      public override PrintContent() : string * string { ("Option", $<#$(PrintChildren(fields))#>) }
    }
  }
}
