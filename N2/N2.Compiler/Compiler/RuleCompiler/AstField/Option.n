using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Option : AstField
    {
      fields : array[AstField];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : SCG.List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct            = AstStruct(this);
        astStruct.OkLabel    = Compiler.MakeLabel($"OkLabel$State");
        astStruct.FailLabel  = Compiler.MakeLabel($"FailLabel$State");
        CalculateAstInfo(astStruct, fields)
      }

      public override Compile() : void
      {
        ParseCode = <[
        $(ParseLabel.Label());
          parseState = $State;
          $(astStruct.TextPosPExpr) = curEndPos;

        $(astStruct.OkLabel.Label());
          $(FieldOffsets.SizePExpr) = curEndPos - $(astStruct.TextPosPExpr);
          $(FieldOffsets.AstPExpr)  = $(astStruct.AstPosPExpr);
          $(ParentAstInfo.OkLabel.Goto());

        $(astStruct.FailLabel.Label());
          $(FieldOffsets.SizePExpr) = 0;
          $(FieldOffsets.AstPExpr)  = -1;
          $(ParentAstInfo.OkLabel.Goto());
        ]>
      }

      public override PrintContent() : string * string { ("Option", $<#$(PrintChildren(fields))#>) }
    }
  }
}
