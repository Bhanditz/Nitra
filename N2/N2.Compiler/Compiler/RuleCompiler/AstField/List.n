using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class List : AstField
    {
      fields : array[AstField];
      min    : int;
      max    : option[int];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : SCG.List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct            = AstStruct(this);
        astStruct.OkLabel    = Compiler.MakeLabel($"OkLabel$State");
        astStruct.FailLabel  = Compiler.MakeLabel($"FailLabel$State");
        CalculateAstInfo(astStruct, fields);
      }

      public override Compile() : void
      {
        def useCounter = min > 0 || max is Some(_);
        def code = SCG.List();
code.Add(<[
                                                    $(ParseLabel.Label());
                                                      $(FieldOffsets.SizePExpr)  = 0;
                                                      $(FieldOffsets.AstPExpr)   = -1;
                                                      $TextPosPExpr  = curEndPos;
                                                      $ListTailPExpr = -1;
]>); when (useCounter) code.Add(<[                    $CounterPExpr  = 0;
]>); code.Add(<[                                      $(fields[0].ParseLabel.Goto());

                                                    $(astStruct.OkLabel.Label());
]>); when (useCounter) code.Add(<[                    ++ $(CounterPExpr);
]>); code.Add(<[                                      $(FieldOffsets.SizePExpr) = curEndPos - $TextPosPExpr;
                                                      parser.ast[$AstPosPExpr] = -1;
                                                      if ($ListTailPExpr == -1)
                                                        $(FieldOffsets.AstPExpr) = $AstPosPExpr;
                                                      else
                                                        parser.ast[$ListTailPExpr] = $AstPosPExpr;
                                                      $ListTailPExpr = $AstPosPExpr;
]>); when (max is Some(max)) code.Add(<[              when ($CounterPExpr == $max)
                                                        $(ContinueParseLabel.Goto());
]>); code.Add(<[                                      $(fields[0].ParseLabel.Goto());

                                                    $(astStruct.FailLabel.Label());
                                                      when (parseState > $(fields[0].State)) // АСТ создано
                                                      {
                                                        parser.ast[$AstPosPExpr] = -1;
                                                        if ($ListTailPExpr == -1)
                                                          $(FieldOffsets.AstPExpr) = ~ $AstPosPExpr;
                                                        else
                                                          parser.ast[$ListTailPExpr] = ~ $AstPosPExpr;
                                                      }
]>); if (min > 0) code.Add(<[                         if ($CounterPExpr > $min)
                                                        $(ContinueParseLabel.Goto());
                                                      else
                                                        $(FailParseLabel.Goto());
]>); else code.Add(<[                                 $(ContinueParseLabel.Goto());
]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("List", $<#$(PrintChildren(fields)) $min $max#>) }
    }
  }
}
