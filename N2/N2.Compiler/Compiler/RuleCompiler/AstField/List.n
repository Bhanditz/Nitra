using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class List : AstField
    {
      fields : array[AstField];
      min    : int;
      max    : option[int];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct            = AstStruct(this);
        astStruct.OkLabel    = Compiler.MakeLabel($"OkLabel$State");
        astStruct.FailLabel  = Compiler.MakeLabel($"FailLabel$State");
        CalculateAstInfo(astStruct, fields);
      }

      public override Compile() : void
      {
        ParseCode = PExpr.Error("List not implemented");
      }

      public override PrintContent() : string * string { ("List", $<#$(PrintChildren(fields)) $min $max#>) }
    }
  }
}
