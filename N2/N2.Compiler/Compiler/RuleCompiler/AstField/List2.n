using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class List2 : AstField
    {
      fields1 : array[AstField];
      fields2 : array[AstField];
      min     : int;
      max     : option[int];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : List[AstField]) : void
      {
        foreach (field in fields1)
          field.Init(compiler, parent, level, allFields);
        foreach (field in fields2)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable ast1Info : AstInfo;
      [RecordIgnore] private mutable ast2Info : AstInfo;
      public override CalculateAstInfo() : void
      {
        ast1Info            = AstInfo(this);
        ast1Info.OkLabel    = Compiler.MakeLabel();
        ast1Info.FailLabel  = Compiler.MakeLabel();
        ast2Info            = AstInfo(this);
        ast2Info.OkLabel    = Compiler.MakeLabel();
        ast2Info.FailLabel  = Compiler.MakeLabel();
        CalculateAstInfo(ast1Info, fields1);
        CalculateAstInfo(ast2Info, fields2);
      }

      public override Compile() : void
      {
        ParseCode = PExpr.Error("List2 not implemented");
      }

      public override PrintContent() : string * string { ("List2", $<#$(PrintChildren(fields1)) $(PrintChildren(fields2)) $min $max#>) }
    }
  }
}
