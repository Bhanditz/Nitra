using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    public mutable SizeOffset : PExpr;
    public mutable AstOffset : PExpr;

    public virtual GetSizeOffset(astInfo : AstInfo) : PExpr * int
    {
      (<[ $(astInfo.HeaderSize + astInfo.SizeOffsetsSize) ]> , 1)
    }

    public virtual GetAstOffset(astInfo : AstInfo) : PExpr * int
    {
      (<[ $(astInfo.HeaderSize + astInfo.SizeOffsetsSize + astInfo.Terminator + astInfo.AstOffsetsSize) ]> , 1)
    }

    public mutable ParentAstInfo : AstInfo = null;
    public mutable IsFirstChild : bool = false;

    public virtual CalculateAstInfo() : void { }
    public CalculateAstInfo(astInfo : AstInfo, fields : array[AstField]) : void
    {
      fields[0].IsFirstChild = true;
      foreach (field in fields)
        field.ParentAstInfo = astInfo;
      foreach (field in fields)
      {
        def (expr, size) = field.GetSizeOffset(astInfo);
        field.SizeOffset = expr;
        astInfo.SizeOffsetsSize += size;
      }

      foreach (field in fields)
      {
        def (expr, size) = field.GetAstOffset(astInfo);
        field.AstOffset = expr;
        astInfo.AstOffsetsSize += size;
      }

      foreach (field in fields)
        field.CalculateAstInfo();
    }
  }
}
