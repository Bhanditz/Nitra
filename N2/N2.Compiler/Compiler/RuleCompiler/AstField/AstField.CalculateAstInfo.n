using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    public virtual AllocateFieldOffsets(astStruct : AstStruct) : FieldOffsets
    {
      astStruct.AllocateField(Some(1), Some(1));
    }

    public mutable FieldOffsets : FieldOffsets = null;
    public mutable ParentAstInfo : AstStruct = null;
    public mutable IsFirstChild : bool = false;
    public mutable IsLastChild : bool = false;
    public mutable NextSibling : AstField = null;
    public mutable PrevSibling : AstField = null;

    public virtual CalculateAstInfo() : void { }
    public CalculateAstInfo(astStruct : AstStruct, fields : array[AstField]) : void
    {
      fields[0].IsFirstChild                = true;
      fields[fields.Length - 1].IsLastChild = true;

      for (mutable i = 0; i < fields.Length; ++i)
      {
        when (i != 0)                 fields[i].PrevSibling = fields[i - 1];
        when (i != fields.Length - 1) fields[i].NextSibling = fields[i + 1];
      }

      foreach (field in fields)
      {
        field.ParentAstInfo = astStruct;
        field.FieldOffsets  = field.AllocateFieldOffsets(astStruct);
        field.CalculateAstInfo();
      }
    }
  }
}
