using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Ast : AstField
    {
      private fields : array[AstField];
      private ruleDefinition : RuleDefinition;

      private IsPrefix    : bool { get { ruleDefinition is RuleDefinition.ExtentionPrefix } }
      private IsPostfix   : bool { get { ruleDefinition is RuleDefinition.ExtentionPostfix } }
      private IsExtension : bool { get { IsPrefix || IsPostfix } }

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : SCG.List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct            = AstStruct(this);
        astStruct.HeaderSize = 3;
        astStruct.Terminator = 1;
        astStruct.OkLabel    = Compiler.MakeLabel($"OkLabel$State");
        astStruct.FailLabel  = Compiler.MakeLabel($"FailLabel$State");
        FieldOffsets = if (IsPostfix)
          astStruct.AllocateField(None(), Some(1));
         else
          astStruct.AllocateField(None(), None());
        CalculateAstInfo(astStruct, fields);
      }

      public override Compile() : void
      {
        def code = SCG.List();
when (IsExtension) code.Add(<[                  if (parser.ast[resultPos + 1] == -1)
                                                   isBest = true;
                                                 else
                                                   bestAstPos = parser.ast[resultPos + 1] + 4;

]>); code.Add(<[                                $(fields[0].ParseLabel.Goto());
                                              $(astStruct.OkLabel.Label());
                                                parser.ast[astPos0 + 2] = -1; // состояние разбора -1 если правило полностью разобрано.

]>); if (IsPostfix) code.Add(<[                 $(FieldOffsets.AstPExpr) = parser.ast[resultPos];
                                                parser.ast[resultPos + 1] = astPos0;

]>); else code.Add(<[                           parser.ast[resultPos] = astPos0;

]>); code.Add(<[                                return curEndPos;
                                              $(astStruct.FailLabel.Label());
                                                parser.ast[astPos0 + 2] = parseState;
                                                when (isBest && parser.ast[resultPos] == -1)
                                                  parser.ast[resultPos] = astPos0;
                                                return -1
]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("Ast", $<#$(PrintChildren(fields))#>) }
    }
  }
}
