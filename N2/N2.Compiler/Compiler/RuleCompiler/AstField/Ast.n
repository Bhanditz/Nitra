using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Ast : AstField
    {
      private fields : array[AstField];
      private isPostfix : bool;

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : SCG.List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct            = AstStruct(this);
        astStruct.HeaderSize = 3;
        astStruct.Terminator = 1;
        astStruct.OkLabel    = Compiler.MakeLabel($"OkLabel$State");
        astStruct.FailLabel  = Compiler.MakeLabel($"FailLabel$State");
        when (isPostfix)
          astStruct.AstOffsetsSize = 1;
        FieldOffsets = if (isPostfix)
          astStruct.AllocateField(None(), Some(1));
         else
          astStruct.AllocateField(None(), None());
        CalculateAstInfo(astStruct, fields);
      }

      public override Compile() : void
      {
        def parseCode = SCG.List();
        parseCode.Add(<[  if (parser.ast[resultPos] == -1)
                            isBest = true
                          else
                            bestAstPos = resultPos + 4
        ]>);
        parseCode.Add(<[   $(fields[0].ParseLabel.Goto()) ]>);

        parseCode.Add(<[   $(astStruct.OkLabel.Label()) ]>);
        parseCode.Add(<[   parser.ast[astPos0 + 2] = -1 ]>); // состояние разбора -1 если правило полностью разобрано.
        if (isPostfix)
        {
          parseCode.Add(<[ $(FieldOffsets.AstPExpr) = parser.ast[resultPos] ]>);
          parseCode.Add(<[ parser.ast[resultPos + 1] = astPos0 ]>);
        }
        else
        {
          parseCode.Add(<[ parser.ast[resultPos] = astPos0 ]>);
        }
        parseCode.Add(<[   return curEndPos ]>);

        parseCode.Add(<[   $(astStruct.FailLabel.Label()) ]>);
        parseCode.Add(<[   parser.ast[astPos0 + 2] = parseState ]>);
        parseCode.Add(<[   when (isBest && parser.ast[resultPos] == -1)
                             parser.ast[resultPos] = astPos0;
                      ]>);
        parseCode.Add(<[   return -1 ]>);
        ParseCode = PExpr.Sequence(parseCode.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("Ast", $<#$(PrintChildren(fields))#>) }
    }
  }
}
