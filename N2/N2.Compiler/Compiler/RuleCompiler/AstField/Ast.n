using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Ast : AstField
    {
      private fields : array[AstField];

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astInfo : AstInfo;
      public override CalculateAstInfo() : void
      {
        astInfo            = AstInfo();
        astInfo.HeaderSize = 3;
        astInfo.Terminator = 1;
        SizeOffset         = PExpr.Error("No size offset for Ast.");
        AstOffset          = PExpr.Error("No ast offset for Ast.");
        CalculateAstInfo(astInfo, fields);
      }

      public override GetAstOffset(_astInfo : AstInfo) : PExpr * int
      {
        (PExpr.Error("No ast offset for Ast."), 0)
      }

      public override Compile() : void
      {
        ParseCode = PExpr.Error("Ast not implemented");
      }

      public override PrintContent() : string * string { ("Ast", $<#$(PrintChildren(fields))#>) }
    }
  }
}
