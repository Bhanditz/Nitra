using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class AstField
  {
    [Record]
    public sealed class Predicate : AstField
    {
      fields : array[AstField];
      isAnd  : bool;

      public override InitChildren(compiler : RuleCompiler, parent : AstField, level : int, allFields : List[AstField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] private mutable astInfo : AstInfo;
      public override CalculateAstInfo() : void
      {
        astInfo            = AstInfo(this);
        astInfo.OkLabel    = Compiler.MakeLabel();
        astInfo.FailLabel  = Compiler.MakeLabel();
        CalculateAstInfo(astInfo, fields)
      }

      public override AllocateFieldOffsets(astInfo : AstInfo) : FieldOffsets
      {
        astInfo.AllocateField(-1, -1);
      }

      public override Compile() : void
      {
        ParseCode = PExpr.Error("Predicate not implemented");
      }

      public override PrintContent() : string * string { ("Predicate", $<#$(PrintChildren(fields)) $isAnd#>) }
    }
  }
}
