using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class RuleCompiler
  {
    public DefineInit(tb : TypeBuilder) : void
    {
      def getDescriptor(rd)
      {
        <[ $(_grammarCompiler.GetDescriptorClassRef(rd)).StaticDescriptor ]>
      }
      def inits = SCG.List();
      foreach ((rd, name) in _simpleCalls)
      {
        _ = tb.DefineWithSource(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
        inits.Add(<[ $(name : dyn) = Grammar.GetSimpleRuleParser($(getDescriptor(rd))); ]>);
      }
      foreach ((rd, bp, name) in _extensibleCalls)
      {
        _ = tb.DefineWithSource(<[decl: private mutable $(name : dyn) : N2.Internal.RuleParser; ]>);
        inits.Add(<[ $(name : dyn) = Grammar.GetExtensibleRuleParser($bp, $(getDescriptor(rd))); ]>);
      }
      _ = tb.DefineWithSource(<[decl:
        public override Init() : void
        {
          ..$(inits.NToList())
        }
      ]>);
    }
  }
}
