using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class RuleCompiler
  {
    private RemoveMarkers(rule : Rule) : Rule
    {
      // TODO: add type checker (see asserts)
      def convert(r : Rule) : option[Rule]
      {
        | String => Some(r)
        | PrefixCall(name, _)
        | Call(name, _) =>
          if (_grammarCompiler.TypedGrammar.GetRule(name) is RuleDefinition.Marker)
            None()
          else
            Some(r)

        | Sequence(rules) =>
          def rules = rules.Map(convert).MapFiltered(_.IsSome, _.Value);
          match(rules)
          {
            | []    => assert2(false); assert(false)
            | [r]   => Some(r)
            | rules => Some(Rule.Sequence(r, rules));
          }

        | Repeat(min, max, rule)                                           => Some(Rule.Repeat(r, min, max, RemoveMarkers(rule)))
        | RepeatWithSeparator(min, max, rule, separator, hangingSeparator) => Some(Rule.RepeatWithSeparator(r, min, max, RemoveMarkers(rule), RemoveMarkers(separator), hangingSeparator))
        | Not(rule)                                                        => Some(Rule.Not(r, RemoveMarkers(rule)))
        | And(rule)                                                        => Some(Rule.And(r, RemoveMarkers(rule)))
      }
      match (convert(rule))
      {
        | Some(r) =>
          match (r)
          {
            | Sequence => r
            | _        => Rule.Sequence(rule, [r]);
          }
        | None    => assert2(false); assert(false)
      }
    }
  }
}
