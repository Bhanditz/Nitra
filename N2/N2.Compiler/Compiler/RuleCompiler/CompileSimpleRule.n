using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class RuleCompiler
  {
    public CompileSimpleRule(rd : RuleDefinition.Simple) : void
    {
      def methodName = _grammarCompiler.DecorateRuleName(rd);
      def isVoid = _grammarCompiler.GetRuleType(rd.Name) is RuleType.Void;

      def (subRulesCode, results) = CompileRule(rd.rule);
      def body = if (isVoid)
        PExpr.Sequence([subRulesCode]);
      else
      {
        def setResult = MakeHandlerCall(results);
        def names     = _grammarCompiler.DefineMemoize(rd.Name, rd);
        <[
          {
            if ($(names.StartPos : dyn) == pos)
            {
              when ($(names.EndPos : dyn) >= 0)
                result = $(names.Result : dyn);
              $(names.EndPos : dyn)
            }
            else
            {
              def newPos = $subRulesCode;

              $(names.StartPos : dyn) = pos;
              $(names.EndPos : dyn) = newPos;

              when (newPos >= 0)
              {
                $setResult;
                $(names.Result : dyn) = result;
              }

              newPos
            }
          }
        ]>
      }
      def body = <[
        unchecked
        {
          mutable c : char;
          _ = c; // eliminate warning "a local value c was never used"
          $(DefVars(_vars.ToListRev(), body))
        }
      ]>;
      if (isVoid)
      {
        _grammarCompiler.DefineImplementation(<[decl:
          public $(methodName : dyn)(pos : int, text : string) : int
          {
            $body
          }
        ]>)
      }
      else
      {
        def returnType              = _grammarCompiler.GetRuleNType(rd);
        _grammarCompiler.DefineImplementation(<[decl:
          public $(methodName : dyn)(pos : int, text : string, result : ref $(returnType : typed)) : int
          {
            $body
          }
        ]>)
      }
    }
  }
}
