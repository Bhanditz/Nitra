using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class ExtentionPoint : RuleField
    {
      rd           : RuleDefinition;
      bindingPower : int;

      [RecordIgnore] public SizeRef   : AstStruct.SizeField { get; private set; }
      [RecordIgnore] public PrefixRef : AstStruct.AstField  { get; private set; }
      [RecordIgnore] public BestRef   : AstStruct.AstField  { get; private set; }

      public override CalculateAstInfo() : void
      {
        when (ParentAstStruct.IsAst)
          SizeRef = AstStruct.SizeField(ParentAstStruct);
        PrefixRef = AstStruct.AstField(ParentAstStruct);
        BestRef   = AstStruct.AstField(ParentAstStruct);
      }

      public override Compile() : void
      {
        ParseCode = MakeRuleCall(<[ $(Compiler.MakeCall(rd, bindingPower))(curEndPos, text, $(Parent.AstPtr.Offset(PrefixRef)), ref parser) ]>, SizeRef)
      }

      public override PrintContent() : string * string { ("ExtentionPoint", $<#$(rd.Name) $bindingPower#>) }
    }
  }
}
