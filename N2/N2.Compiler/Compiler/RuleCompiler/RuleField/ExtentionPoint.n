using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class ExtentionPoint : RuleField
    {
      public ruleDefinition : RuleDefinition;
      public bindingPower   : int;

      [RecordIgnore] public SizeRef : AstStruct.SizeField { get; private set; }
      [RecordIgnore] public AstRef  : AstStruct.AstField  { get; private set; }

      public override CalculateAstInfo() : void
      {
        SizeRef = AstStruct.SizeField(ParentAstStruct);
        AstRef  = AstStruct.AstField(ParentAstStruct, this);
      }

      public override Compile() : void
      {
        def call  = Compiler.MakeCall(ruleDefinition, bindingPower);
        ParseCode = MakeSyntaxCallCode(call, Some(AstRef), SizeRef)
      }

      public override PrintContent() : string * string { ("ExtentionPoint", $<#$(ruleDefinition.Name) $bindingPower#>) }
    }
  }
}
