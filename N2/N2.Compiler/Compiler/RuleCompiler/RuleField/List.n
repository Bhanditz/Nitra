using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class List : RuleField
    {
      fields : array[RuleField];
      min    : int;
      max    : option[int];

      public override InitChildren(compiler : RuleCompiler, parent : RuleField, level : int, allFields : SCG.List[RuleField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public SizeParentRef : AstStruct.SizeField { get; private set; }
      [RecordIgnore] public AstParentRef  : AstStruct.AstField  { get; private set; }
      [RecordIgnore] public NextRef       : AstStruct.AstField  { get; private set; }

      [RecordIgnore] private mutable astStruct   : AstStruct;
      [RecordIgnore] private mutable astPtr      : AstPointer;
      [RecordIgnore] private mutable listTailPtr : AstPointer;
      public override CalculateAstInfo() : void
      {
        astStruct     = InternalAstStruct(this);
        astPtr        = AstPointer(astStruct, "astPtr", this);
        listTailPtr   = AstPointer(astStruct, "listTailPtr", this);
        SizeParentRef = AstStruct.SizeField(ParentAstStruct);
        AstParentRef  = AstStruct.AstField(ParentAstStruct, this);
        NextRef = AstStruct.AstField(astStruct, this);
        CalculateAstInfo(astStruct, astPtr, fields);
      }

      public Counter : PExpr { get { Compiler.GetName($"counter$Level") } }

      public override Compile() : void
      {
        def useCounter = min > 0 || max is Some(_);
        def counterInit() { if (useCounter) <[ $Counter  = 0 ]> else <[ {} ]> }
        def counterInc()  { if (useCounter) <[ ++ $Counter   ]> else <[ {} ]> }
        def ifCounterEqualsToMaxThenContinue()
        {
          if (max is Some(max))
            <[
              when ($Counter == $max)
                $(ContinueParseLabel.Goto());
            ]>
          else
            <[ {} ]>
        }
        def ifCounterLessThanMinThenFail()
        {
          if (min > 0)
            <[
              when ($Counter < $min)
                $(FailParseLabel.Goto());
            ]>
          else
            <[ {} ]>
        }

        def firstChild = fields[0];
        def code = SCG.List();
        code.Add(<[
          $(ParseLabel.Label());
            $(counterInit());
            $(listTailPtr.Var) = -1;
            $StartTextPos = $CurTextPos;
            $TextPos = $CurTextPos;
            $(firstChild.ParseLabel.Goto());

          $(astStruct.OkLabel.Label());
            $(counterInc());
            $(astPtr.Ref(NextRef)) = -1;
            if ($(listTailPtr.Var) == -1)
            {
              $(AllocateParentAst());
              $(ParentAstPtr.Ref(AstParentRef)) = $(astPtr.Var);
            }
            else
              $(listTailPtr.Ref(NextRef)) = $(astPtr.Var);
            $(ParentAstPtr.Ref(SizeParentRef)) = $CurTextPos - $StartTextPos;
            $(listTailPtr.Var) = $(astPtr.Var);
            $(ifCounterEqualsToMaxThenContinue());
            $TextPos = $CurTextPos;
            $(firstChild.ParseLabel.Goto());

          $(astStruct.FailLabel.Label());
            when ($(IsAstAllocatetdCode(astStruct))) // АСТ создано
            {
              $(astPtr.Ref(NextRef)) = -1;
              if ($(listTailPtr.Var) == -1)
                $(ParentAstPtr.Ref(AstParentRef)) = ~ $(astPtr.Var);
              else
                $(listTailPtr.Ref(NextRef)) = ~ $(astPtr.Var);
            }
            $(ifCounterLessThanMinThenFail());
            $CurTextPos = $TextPos;
            $(ParentAstPtr.Ref(SizeParentRef)) = $CurTextPos - $StartTextPos;
            $(ContinueParseLabel.Goto());
        ]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("List", $<#$(PrintChildren(fields)) $min $max#>) }
    }
  }
}
