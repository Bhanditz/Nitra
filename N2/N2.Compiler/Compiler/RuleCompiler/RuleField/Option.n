using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class Option : RuleField
    {
      fields : array[RuleField];

      public override InitChildren(compiler : RuleCompiler, parent : RuleField, level : int, allFields : SCG.List[RuleField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public SizeRef : AstStruct.SizeField { get; private set; }
      [RecordIgnore] public AstRef  : AstStruct.AstField  { get; private set; }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct = AstStruct(this, "Option");
        when (ParentAstStruct.IsAst)
          SizeRef = AstStruct.SizeField(ParentAstStruct);
        AstRef = AstStruct.AstField(ParentAstStruct);
        CalculateAstInfo(astStruct, fields);
      }

      public override Compile() : void
      {
        ParseCode = <[
        $(ParseLabel.Label());
          $TextPos = curEndPos;
          $(fields[0].ParseLabel.Goto());

        $(astStruct.OkLabel.Label());
          $(SetSizeCode(SizeRef, <[ curEndPos - $TextPos ]>));
          $(Parent.AstPtr.Ref(AstRef)) = $(AstPtr.Var);
          $(ContinueParseLabel.Goto());

        $(astStruct.FailLabel.Label());
          $(SetSizeCode(SizeRef, <[ 0 ]>));
          if (parseState > $(fields[0].State)) // АСТ создано
            $(Parent.AstPtr.Ref(AstRef)) = ~ $(AstPtr.Var);
          else
            $(Parent.AstPtr.Ref(AstRef)) = -1;
          $(ContinueParseLabel.Goto());
        ]>
      }

      public override PrintContent() : string * string { ("Option", $<#$(PrintChildren(fields))#>) }
    }
  }
}
