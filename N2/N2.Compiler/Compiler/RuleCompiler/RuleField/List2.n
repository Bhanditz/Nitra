using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class List2 : RuleField
    {
      fields1 : array[RuleField];
      fields2 : array[RuleField];
      min     : int;
      max     : option[int];

      public override InitChildren(compiler : RuleCompiler, parent : RuleField, level : int, allFields : SCG.List[RuleField]) : void
      {
        foreach (field in fields1)
          field.Init(compiler, parent, level, allFields);
        foreach (field in fields2)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public SizeRef : AstStruct.SizeField { get; private set; }
      [RecordIgnore] public Next1Ref : AstStruct.AstField { get; private set; }
      [RecordIgnore] public Next2Ref : AstStruct.AstField { get; private set; }

      [RecordIgnore] private mutable ast1Struct : AstStruct;
      [RecordIgnore] private mutable ast2Struct : AstStruct;
      public override CalculateAstInfo() : void
      {
        ast1Struct = AstStruct(this, "List2_1");
        ast2Struct = AstStruct(this, "List2_2");
        when (ParentAstStruct.IsAst)
          SizeRef = AstStruct.SizeField(ParentAstStruct);
        Next1Ref = AstStruct.AstField(ast1Struct);
        Next2Ref = AstStruct.AstField(ast2Struct);
        CalculateAstInfo(ast1Struct, fields1);
        CalculateAstInfo(ast2Struct, fields2);
      }

      public override Compile() : void
      {
        /*def useCounter = min > 0 || max is Some(_);
        def counterInit() { if (useCounter) <[ $CounterPExpr  = 0 ]> else <[ {} ]> }
        def counterInc()  { if (useCounter) <[ ++ $CounterPExpr   ]> else <[ {} ]> }
        def counterWhenMax()
        {
          if (max is Some(max))
            <[
              when ($CounterPExpr == $max)
                $(ContinueParseLabel.Goto());
            ]>
          else
            <[ {} ]>
        }
        def counterWhenMin()
        {
          if (min > 0)
            <[
              if ($CounterPExpr >= $min)
                $(ContinueParseLabel.Goto());
              else
                $(FailParseLabel.Goto());
            ]>
          else
            <[ $(ContinueParseLabel.Goto()) ]>
        }

        def sizeInit() { if (ParentAstStruct.IsAst) <[ $(SizeRef.Ref) = 0 ]> else <[ {} ]> }
        def sizeSet()  { if (ParentAstStruct.IsAst) <[ $(SizeRef.Ref) = curEndPos - $TextPosPExpr ]> else <[ {} ]> }
        def code = SCG.List();
        code.Add(<[
          $(ParseLabel.Label());
            $(sizeInit());
            $(counterInit());
            $(Next1Ref.Ref) = -1;
            $TextPosPExpr  = curEndPos;
            $ListTailPExpr = -1;
            $(fields[0].ParseLabel.Goto());

          $(astStruct.OkLabel.Label());
            $(sizeSet());
            $(counterInc());
            parser.ast[$AstPosPExpr] = -1;
            if ($ListTailPExpr == -1)
              $(NextRef.Ref) = $AstPosPExpr;
            else
              parser.ast[$ListTailPExpr] = $AstPosPExpr;
            $ListTailPExpr = $AstPosPExpr;
            $(counterWhenMax());
            $(fields[0].ParseLabel.Goto());

          $(astStruct.FailLabel.Label());
            when (parseState > $(fields[0].State)) // АСТ создано
            {
              parser.ast[$AstPosPExpr] = -1;
              if ($ListTailPExpr == -1)
                $(NextRef.Ref) = ~ $AstPosPExpr;
              else
                parser.ast[$ListTailPExpr] = ~ $AstPosPExpr;
            }
            $(counterWhenMin());
        ]>);*/
        ParseCode = PExpr.Error("List2 Not implemented")//.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("List2", $<#$(PrintChildren(fields1)) $(PrintChildren(fields2)) $min $max#>) }
    }
  }
}
