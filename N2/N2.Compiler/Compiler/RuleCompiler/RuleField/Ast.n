using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class Ast : RuleField
    {
      private fields : array[RuleField];
      private ruleDefinition : RuleDefinition;

      public IsPrefix    : bool { get { ruleDefinition is RuleDefinition.ExtentionPrefix } }
      public IsPostfix   : bool { get { ruleDefinition is RuleDefinition.ExtentionPostfix } }
      public IsExtension : bool { get { IsPrefix || IsPostfix } }

      public override InitChildren(compiler : RuleCompiler, parent : RuleField, level : int, allFields : SCG.List[RuleField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public IdRef     : AstStruct.HeaderField { get; private set; }
      [RecordIgnore] public SizeRef   : AstStruct.HeaderField { get; private set; }
      [RecordIgnore] public StateRef  : AstStruct.HeaderField { get; private set; }
      [RecordIgnore] public PrefixRef : AstStruct.AstField    { get; private set; }

      [RecordIgnore] private mutable astStruct : AstStruct;
      public override CalculateAstInfo() : void
      {
        astStruct = AstStruct(this, "Ast");
        IdRef     = AstStruct.HeaderField(astStruct);
        SizeRef   = AstStruct.HeaderField(astStruct);
        StateRef  = AstStruct.HeaderField(astStruct);
        when (IsPostfix)
          PrefixRef = AstStruct.AstField(astStruct);
        CalculateAstInfo(astStruct, fields);
        astStruct.MultipleVariants = IsExtension;
      }

      public PrevResultPtr : AstPointer { [Memoize] get { AstPointer(this, "prevResultPtr") } }
      public override Compile() : void
      {
        def code = SCG.List();
        def resultPtr = if (IsPostfix) <[ resultPtr + 1 ]> else <[ resultPtr ]>;
        when (astStruct.MultipleVariants)
          code.Add(<[
            if (parser.ast[$resultPtr] == -1)
              isBest = true;
            else
              bestAstPos = parser.ast[$resultPtr];
          ]>);
        code.Add(<[ $(fields[0].ParseLabel.Goto()); ]>);

        def returnAstCode = if (astStruct.MultipleVariants)
          <[
            when (isBest) // данный АСТ лучше того что был до него.
            {
              $(PrevResultPtr.Var) = parser.ast[$resultPtr];
              when ($(PrevResultPtr.Var) == -1 || $(PrevResultPtr.Ref(StateRef)) != -1) // предыдущего АСТ нет или предыдущий АСТ тоже не полный.
                parser.ast[$resultPtr] = $(AstPtr.Var);
            }
          ]>;
        else
          <[ parser.ast[$resultPtr] = $(AstPtr.Var); ]>;

        //parse ok
        code.Add(<[ $(astStruct.OkLabel.Label()); ]>);
        code.Add(<[ $(AstPtr.Ref(StateRef)) = -1; ]>);// состояние разбора -1 если правило полностью разобрано.
        code.Add(returnAstCode);
        code.Add(<[ $(Compiler.EndLabel.Goto()); ]>);

        //parse fail
        code.Add(<[ $(astStruct.FailLabel.Label()); ]>);
        code.Add(<[ when ($(IsAstAllocatetdCode(astStruct))) // АСТ создано
                    {
                      $(AstPtr.Ref(StateRef)) = parseState;
                      $returnAstCode;
                    }
        ]>);
        code.Add(<[ curEndPos = -1; $(Compiler.EndLabel.Goto()); ]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("Ast", $<#$(PrintChildren(fields))#>) }
    }
  }
}
