using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    [Record]
    public sealed class Ast : RuleField
    {
      private fields : array[RuleField];
      public ruleDefinition : RuleDefinition;

      public IsPrefix    : bool { get { ruleDefinition is RuleDefinition.ExtentionPrefix } }
      public IsPostfix   : bool { get { ruleDefinition is RuleDefinition.ExtentionPostfix } }
      public IsExtension : bool { get { IsPrefix || IsPostfix } }

      public override InitChildren(compiler : RuleCompiler, parent : RuleField, level : int, allFields : SCG.List[RuleField]) : void
      {
        foreach (field in fields)
          field.Init(compiler, parent, level, allFields);
      }

      [RecordIgnore] public mutable astStruct : RootAstStruct;
      [RecordIgnore] public mutable astPtr    : AstPointer;
      public override CalculateAstInfo() : void
      {
        astStruct = match (ruleDefinition)
        {
          | ExtentionPoint   => ExtensibleAstStruct(Compiler, ruleDefinition)
          | ExtentionPrefix  => PrefixAstStruct(Compiler)
          | ExtentionPostfix => PostfixAstStruct(Compiler)
          | Simple           => SimpleAstStruct(Compiler)
          | Regular          => assert(false);
          | Marker           => assert(false);
          | ExternalRule     => assert(false);
        }
        astPtr = AstPointer(astStruct, "astPtr", this);
        CalculateAstInfo(astStruct, astPtr, fields);
        astStruct.MultipleVariants = IsExtension;
      }

      public override Compile() : void
      {
        def code = SCG.List();
#if DEBUG || PARSER_DEBUG
        code.Add(<[
          when (parser.ruleCalls[curEndPos] == null)
            parser.ruleCalls[curEndPos] = System.Collections.Generic.List();
          parser.ruleCalls[curEndPos].Add(parser.parserHost.GetRuleDescriptorById(RuleId));
        ]>);
#endif
        when (astStruct.MultipleVariants)
          code.Add(<[
            if (resultRef == -1)
              isBest = true;
            else
              bestAstPos = resultRef;
          ]>);
        code.Add(<[ $(fields[0].ParseLabel.Goto()); ]>);
        def resultRef = AstPointer(astStruct, "resultRef");
        def returnAstCode = if (astStruct.MultipleVariants)
          <[
            if (isBest || parser.ast[$(resultRef.Var) + 2] != -1)
            {
              $(resultRef.Var) = $(astPtr.Var);
            }
            else
            {
              curEndPos = -1;
            }
          ]>;
        else
          <[ resultRef = $(astPtr.Var); ]>;

        def returnBadAstCode = if (astStruct.MultipleVariants)
          <[
            when (isBest && ($(resultRef.Var) == -1 || $(resultRef.HeaderRef(astStruct.StateRef)) != -1)) // предыдущего АСТ нет или предыдущий АСТ тоже не полный.
              $(resultRef.Var) = $(astPtr.Var);
          ]>;
        else
          <[ resultRef = $(astPtr.Var); ]>;

        //parse ok
        code.Add(<[ $(astStruct.OkLabel.Label()); ]>);
        code.Add(<[ $(astPtr.HeaderRef(astStruct.StateRef)) = -1; ]>);// состояние разбора -1 если правило полностью разобрано.
        code.Add(returnAstCode);
        code.Add(<[ $(Compiler.EndLabel.Goto()); ]>);

        //parse fail
        code.Add(<[ $(astStruct.FailLabel.Label()); ]>);
        code.Add(<[ when ($(IsAstAllocatetdCode(astStruct))) // АСТ создано
                    {
                      $(astPtr.HeaderRef(astStruct.StateRef)) = parseState;
                      $returnBadAstCode;
                    }
        ]>);
        code.Add(<[ curEndPos = -1; $(Compiler.EndLabel.Goto()); ]>);
        ParseCode = PExpr.Sequence(code.FlattenPExprSequence());
      }

      public override PrintContent() : string * string { ("Ast", $<#$(PrintChildren(fields))#>) }
    }
  }
}
