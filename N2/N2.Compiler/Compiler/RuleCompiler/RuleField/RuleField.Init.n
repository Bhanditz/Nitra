using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Model;

namespace N2.Compiler
{
  internal partial abstract class RuleField
  {
    public mutable Compiler          : RuleCompiler;
    public mutable Parent            : RuleField;
    public mutable State             : int;
    public mutable Level             : int;
    public mutable ParseLabel        : PExprLabel;
    public mutable RecoveryLabel     : PExprLabel;

    public virtual Init(compiler : RuleCompiler, parent : RuleField, level : int, allFields : List[RuleField]) : void
    {
      Compiler       = compiler;
      Parent         = parent;
      Level          = level;
      State          = allFields.Count;
      ParseLabel     = compiler.MakeLabel($"Parse$State \"$(Print())\"");
      RecoveryLabel  = compiler.MakeLabel($"Recovery$State \"$(Print())\"");
      allFields.Add(this);
      InitChildren(compiler, this, level + 1, allFields);
    }

    public virtual InitChildren(compiler : RuleCompiler, parent : RuleField, level : int, allFields : List[RuleField]) : void
    {
      _ = compiler;
      _ = parent;
      _ = level;
      _ = allFields;
    }
  }
}
