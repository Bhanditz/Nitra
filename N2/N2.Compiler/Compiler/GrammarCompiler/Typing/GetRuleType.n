using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public GetRuleType(rd : RuleDefinition) : RuleType
    {
      GetRuleType(rd.Name);
    }

    [Memoize]
    public GetRuleType(name : NameRef) : RuleType
    {
      def rd = ParsedGrammar.GetRule(name);
      def ty = match (rd)
      {
        | ExternalRule as rd                      => _externalRuleTypeGetters[rd.grammarRef.Id](NameRef(rd.Name.Location, rd.Name.Parts.Last()))
        | ExtentionPoint                          => assert(rd.IsAst); RuleType.NType(DefineAstType(rd).GetMemType());
        | Simple(ty, _, _) as rd                  => if (rd.IsAst) RuleType.NType(DefineAstType(rd).GetMemType()) else ty
        | Regular                                 => RuleType.Chars()
        | ExtentionPrefix(baseRuleName, _, _)
        | ExtentionPostfix(baseRuleName, _, _, _) => if (rd.IsAst) RuleType.NType(DefineAstType(rd).GetMemType()) else GetRuleType(baseRuleName)
      }
      def ty = match (ty) { | PType(ty) => RuleType.NType(BindFixedType(ty)) | _ => ty };
      def ty = match (ty) { | RuleType.NType(ty) when ty.Equals(ty.Manager.InternalType.Void) => RuleType.Void() | _ => ty };
      ty
    }
  }
}
