using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using N2.Model;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public MakeTypedGrammar(grammar : Grammar) : Grammar
    {
      def optimizeType(ty : RuleType)
      {
        | List(Void)
        | Option(Void)
        | Tuple(types) when types.ForAll(_ is RuleType.Void)
                       => RuleType.Void()

        | _            => ty
      }

      def doTyping(curRule : Rule.Sequence) : Rule.Sequence
      {
        mutable curId = 0;
        def newId()
        {
          ++curId;
          curId;
        }

        def typeRule(curRule : Rule) : Rule
        {
          def id = newId();
          match (curRule)
          {
            | Sequence(rules)              =>
              def rules = rules.Map(typeRule(_));
              def types = rules.Map(rule => rule.Type);
              def type  = optimizeType(RuleType.Tuple(types));
              Rule.Sequence(curRule.Location, type, id, rules);

            | Call(name, bp)               =>
              def type = optimizeType(GetRuleType(name));
              Rule.Call(curRule.Location, type, id, name, bp);

            | PrefixCall(name, bp)         =>
              def type = optimizeType(GetRuleType(name));
              Rule.PrefixCall(curRule.Location, type, id, name, bp);

            | Repeat(0, Some(1), rule)     =>
              def rule = typeRule(rule);
              def type = optimizeType(RuleType.Option(rule.Type));
              Rule.Repeat(curRule.Location, type, id, 0, Some(1), rule);

            | Repeat(min, max, rule)       =>
              def rule = typeRule(rule);
              def type = optimizeType(RuleType.List(rule.Type));
              Rule.Repeat(curRule.Location, type, id, min, max, rule);

            | RepeatWithSeparator(min, max, rule, separator)       =>
              def rule      = typeRule(rule);
              def separator = typeRule(separator);
              def type = optimizeType(RuleType.Tuple([RuleType.List(rule.Type), RuleType.List(separator.Type)]));
              Rule.RepeatWithSeparator(curRule.Location, type, id, min, max, rule, separator);

            | String(str) => Rule.String(curRule.Location, RuleType.Chars(), id, str);
            | Scope(name, rule)            =>
              def rule = typeRule(rule);
              Rule.Scope(rule.Location, rule.Type, id, name, rule);

            | Not(rule) => Rule.Not(curRule.Location, RuleType.Void(), id, typeRule(rule));
            | And(rule) => Rule.And(curRule.Location, RuleType.Void(), id, typeRule(rule));
            | Cut => Rule.Cut(curRule.Location, RuleType.Void(), id);
          }
        }
        typeRule(curRule) :> Rule.Sequence
      }

      grammar.TransformRules
        ( rd => doTyping(rd.rule)
        , rd => doTyping(rd.rule)
        , rd => doTyping(rd.rule)
        , rd => rd.rule
        )
    }
  }
}
