using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Imperative;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    LoadExtraFields(ruleType : RuleType) : list[ExtraField]
    {
      | RuleType.NType(FixedType.Class(ti, [])) =>
        //assert2(false);
        def hasExtraFieldAttribute(m : IMember) : bool
        {
          m.GetModifiers().IsCustomAttributeDefined("N2.Runtime.ExtraFieldAttribute", Manager.CoreEnv)
        }
        def methods = ti.GetMembers(BindingFlags.Instance | BindingFlags.Public).Filter(hasExtraFieldAttribute).OfType.[IMethod]();
        def methodToExtraField(m : IMethod) : ExtraField
        {
          def name       = NameRef(m.NameLocation, m.Name);
          def parameters = m.Header.ParametersDeclarations;
          def type       = <[ $(m.ReturnType : typed) ]>;
          if (m.IsAbstract)
            ExtraField.Abstract(m.Location, name, parameters, type)
          else
            ExtraField.Def(m.Location, name, parameters, type, <[ () ]>)
        }
        
        methods.Map(methodToExtraField)
        
      | _ => []
    }
  }
}
