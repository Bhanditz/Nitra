using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using N2.Model;

namespace N2
{
  internal partial class GrammarCompiler
  {
    private AddWhitespaceRules() : void
    {
      def sName = NameRef(Location.Default, "s");
      def SName = NameRef(Location.Default, "S");
      def sNameLookupResult = ParsedGrammar.TryGetRule(sName);
      def SNameLookupResult = ParsedGrammar.TryGetRule(SName);

      def externalKeywordRegexes = ParsedGrammar.KeywordRegexes.Filter(_.IsExternal);
      def compiledKeywordRegex = ParsedGrammar.KeywordRegexes.ToDictionary(_.Id, kr => FSMMatch.MakeMatcher(ConvertRegularRuleToFsm(ParsedGrammar, kr.Match)));

      def convertRule(rd : RuleDefinition, r : Rule.Sequence, names : list[NameRef]) : Rule.Sequence * list[NameRef]
      {
        def convert(r : Rule) : list[Rule]
        {
          def needSpaces(name)
          {
            def rd = ParsedGrammar.GetRule(name);
            rd.IsExplicitSpaces || rd is RuleDefinition.Regular
          }
          def makeWhitespaceRuleCall(r : Rule, whitespaceRuleLookupResult : option[RuleDefinition], whitespaceRuleName : NameRef)
          {
            def loc = r.Location.FromEndAsGenerated();
            def nameLocated = NameRef(loc, whitespaceRuleName.Parts);
            match (whitespaceRuleLookupResult)
            {
              | Some => Rule.Call(loc, RuleType.Void(), 0, nameLocated, 0)
              | None => Message.FatalError(rd.Name.Location, $"Whitespace rule '$sName' is required")
            }
          }
          def convertFlattened(r : Rule) : Rule
          {
            match(convert(r))
            {
              | []    => assert(false)
              | [x]   => x
              | rules => Rule.Sequence(r, rules)
            }
          }
          match (r)
          {
            | Cut => [r]
            | PrefixCall(name, _)
            | Call(name, _) =>
              result :
              {
                def nameLookupResult = ParsedGrammar.TryGetRule(name);
                when (nameLookupResult.IsSome)
                  if (nameLookupResult.Equals(sNameLookupResult) || nameLookupResult.Equals(SNameLookupResult))
                    Message.Error(r.Location, "Unexpected whitespace rule. Mark rule with 'ExplicitSpaces' attribute.");
                  else when (needSpaces(name))
                    result([r, makeWhitespaceRuleCall(r, sNameLookupResult, sName)]);
                [r]
              }

            | String(str) =>
              def checkMatch(keywordRegex, acc)
              {
                mutable compiledKr;
                unless (compiledKeywordRegex.TryGetValue(keywordRegex.Id, out compiledKr))
                  assert(false);
                acc || compiledKr(str)
              }
              def isKeyword = rd.KeywordRegexes.FoldLeft(false, checkMatch) || externalKeywordRegexes.FoldLeft(false, checkMatch);
              def whitespaceRuleCall = 
                if (isKeyword)
                  makeWhitespaceRuleCall(r, SNameLookupResult, SName)
                else
                  makeWhitespaceRuleCall(r, sNameLookupResult, sName);
              [r, whitespaceRuleCall]

            | Scope(name, rule)                              => [Rule.Scope(r, name, convertFlattened(rule))]
            | Repeat(min, max, rule)                         => [Rule.Repeat(r, min, max, convertFlattened(rule))]
            | RepeatWithSeparator(min, max, rule, separator) => [Rule.RepeatWithSeparator(r, min, max, convertFlattened(rule), convertFlattened(separator))]
            | Not(rule)                                      => [Rule.Not(r, convertFlattened(rule))]
            | And(rule)                                      => [Rule.And(r, convertFlattened(rule))]
            | Sequence(rules)                                => [Rule.Sequence(r, rules.Map(convert).Flatten())]
          }
        }
        // we have to add fake names for inserted whitespace rules
        def fakeName = NameRef(Location.Default, "_");
        def newNames = SCG.List();
        def newRules = SCG.List();
        def ruleList = r.rules.Map(convert);
        assert(ruleList.Length == names.Length);
        foreach((rules, name) in ruleList.Zip(names))
        {
          mutable nextName = name;
          foreach (rule in rules)
          {
            newRules.Add(rule);
            newNames.Add(nextName);
            nextName = fakeName;
          }
        }
        (Rule.Sequence(r, newRules.ToNList()), newNames.ToNList())
      }
      def convertRuleDefinition(rd : RuleDefinition)
      {
        | ExtentionPoint
        | ExtentionPrefix  when rd.IsExplicitSpaces
        | ExtentionPostfix when rd.IsExplicitSpaces
        | Simple           when rd.IsExplicitSpaces
        | Regular
        | ExternalRule
        | Marker       => rd

        | ExtentionPrefix(baseRuleName, rule, names) =>
          def (rule, names) = convertRule(rd, rule, names);
          RuleDefinition.ExtentionPrefix(rd, baseRuleName, rule, names)

        | ExtentionPostfix(baseRuleName, bindingPower, rule, names) =>
          def (rule, names) = convertRule(rd, rule, names);
          RuleDefinition.ExtentionPostfix(rd, baseRuleName, bindingPower, rule, names)

        | Simple(retType, rule, names) =>
          def (rule, names) = convertRule(rd, rule, names);
          RuleDefinition.Simple(rd, retType, rule, names)
      }
      mutable grammar = Grammar(ParsedGrammar.GrammarRefs, ParsedGrammar.SpanClasses, ParsedGrammar.BracePairs, ParsedGrammar.KeywordRegexes);
      foreach(rd in ParsedGrammar.Rules) 
        grammar = grammar.Add(convertRuleDefinition(rd));
      WhitespacedGrammar = grammar;
    }
  }
}
