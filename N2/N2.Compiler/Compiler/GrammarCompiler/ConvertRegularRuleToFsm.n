using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public static ConvertRegularRuleToFsm(grammar : Grammar, rr : RegularRule) : FSM
    {
      def convert(_ : RegularRule) : FSM
      {
        | Choice(rules)                            => FSMBuilder.Choice(rules.Map(convert))
        | Sequence(rules)                          => FSMBuilder.Seq(rules.Map(convert))
        | Chars(chars)                             => FSMBuilder.Seq(chars)
        | Repeat(min, max, rule)                   => FSMBuilder.Repeat(min, max, convert(rule))
        | RepeatWithSeparator(min, max, rule, sep) => FSMBuilder.RepeatWithSeparator(min, max, convert(rule), convert(sep))
        | Call(name) =>
          match (grammar.GetRule(name))
          {
            | Regular as rd => convert(rd.rule);
            | _ => assert(false)
          }
      }
      convert(rr)
    }
  }
}
