using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Parser.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using Nemerle.Parser.Internal;

namespace Nemerle.Parser
{
  internal partial class GrammarCompiler
  {
    public ConvertRegularRuleToFsm(_rr : RegularRule) : FSM
    {
      | Choice(rules)                            => FSMBuilder.Choice(rules.Map(ConvertRegularRuleToFsm))
      | Sequence(rules)                          => FSMBuilder.Seq(rules.Map(ConvertRegularRuleToFsm))
      | Chars(chars)                             => FSMBuilder.Seq(chars)
      | Repeat(min, max, rule)                   => FSMBuilder.Repeat(min, max, ConvertRegularRuleToFsm(rule))
      | RepeatWithSeparator(min, max, rule, sep) => FSMBuilder.RepeatWithSeparator(min, max, ConvertRegularRuleToFsm(rule), ConvertRegularRuleToFsm(sep))
      | Call(name) =>
        match (TypedGrammar.GetRule(name))
        {
          | Regular as rd => ConvertRegularRuleToFsm(rd.rule);
          | _ => assert(false)
        }
    }

  }
}
