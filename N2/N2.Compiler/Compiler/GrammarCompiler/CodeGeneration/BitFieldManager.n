using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2
{
  public class BitFieldManager
  {
    _tb                       : TypeBuilder;
    mutable _fieldsCreated    : int;
    mutable _currentFieldName : string;

    public this(tb : TypeBuilder)
    {
      _tb = tb;
    }

    public Allocate() : BitField
    {
      when (unchecked((_fieldsCreated % 8) == 0))
      {
        _currentFieldName = Util.tmpname("bitField");
        _tb.Define(<[ decl: private mutable $(_currentFieldName : usesite) : byte ]>);
      }
      def mask = unchecked(1b << (_fieldsCreated % 8));
      _fieldsCreated += 1;
      BitField(_currentFieldName, mask)
    }
  }

  [Record]
  public class BitField
  {
    _fieldName : string;
    _mask      : byte;

    public Read() : PExpr
    {
      <[ unchecked(this.$(_fieldName : usesite) %&& $(_mask : int)) ]>
    }

    public Set() : PExpr
    {
      <[ unchecked(this.$(_fieldName : usesite) = this.$(_fieldName : usesite) %| $(_mask : byte)) ]>
    }

    public Clear() : PExpr
    {
      <[ unchecked(this.$(_fieldName : usesite) = this.$(_fieldName : usesite) %& $(~_mask : byte)) ]>
    }
  }

  public module BitFieldExtensions
  {
    public GetBitFieldManager(this tb : TypeBuilder) : BitFieldManager
    {
      def key = typeof(BitFieldManager);
      match (tb.UserData[key])
      {
        | result is BitFieldManager => result
        | null =>
          def result = BitFieldManager(tb);
          tb.UserData[key] = result;
          result
        | _ => assert(false)
      }
    }
  }
}
