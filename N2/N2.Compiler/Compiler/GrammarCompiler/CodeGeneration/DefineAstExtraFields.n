using Nemerle;
using Nemerle.Text;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    private GetExtraFieldDefinition(baseRule : RuleDefinition, fieldName : NameRef) : ValueOption[ExtraField.Abstract]
    {
      // TODO: Этот код будет работать только для RuleDefinition-ов спарсеных с кода. Надо обеспечить загрузку ExtraFields из внешних сборок.
      foreach (field in baseRule.ExtraFields)
      {
        | Abstract(name, _, _) as x           when name == fieldName => return VSome(x);
        | Def     (name, parameters, type, _) when name == fieldName => return VSome(ExtraField.Abstract(field.Location, field.IsCached, name, parameters, type));
        | _ => ()
      }
      
      VNone()
    }
    
    private DefineExtraFields(baseAstTb : TypeBuilder, astTb : TypeBuilder, errorTb : TypeBuilder, spliceTb : TypeBuilder, rd : RuleDefinition) : void
    {
      //assert2(rd.Name.AsName !=	"number");
      def extraFields = rd.ExtraFields;
      def names = SCG.HashSet();
      def definedErrorHendlers = SCG.HashSet();

      def cachingPropertyName(extraFieldName : Name) : Name
      {
        regexp match (extraFieldName.Id)
        {
          | "(Get|Compute|Calculate|Calc|Create|Make|Evaluate|Eval)(?<baseName>.*)" => <[ $(baseName : usesite) ]>.name
          | _ =>  <[ $("Computed" + extraFieldName.Id : usesite) ]>.name
        }
      }

      def addRecursionCheck(tb : TypeBuilder, body : PExpr) : PExpr.Sequence
      {
        def bitField = tb.GetBitFieldManager().Allocate();
        <[
          when ($(bitField.Read()))
            throw System.InvalidOperationException("Recursion detected (see stack trace for details).");
          $(bitField.Set());
          try $body
          finally $(bitField.Clear());
        ]>
      }

      def addCaching(tb : TypeBuilder, name : Name, type : PExpr, body : PExpr, isOverride : bool) : PExpr
      {
        def bitField = tb.GetBitFieldManager().Allocate();
        def fieldName = <[ $(Util.tmpname(name.Id + "_cache") : usesite) ]>.name;
        tb.Define(<[ decl: private mutable $(fieldName : name) : $type ]>);
        def mods = Modifiers(NemerleModifiers.Public %| if (isOverride) NemerleModifiers.Override else NemerleModifiers.Virtual, []);
        tb.Define(<[ decl:
          ..$mods $(cachingPropertyName(name) : name) : $type
          {
            get
            {
              unless ($(bitField.Read()))
              {
                //FIXME: fix compiler bug!!
                //assert2(false, "Extra field value not computed yet.");
                throw System.InvalidOperationException("Extra field value not computed yet.");
              }
              $(fieldName : name);
            }
          }
        ]>);

        <[
          if ($(bitField.Read()))
            $(fieldName : name);
          else
          {
            $(fieldName : name) = $body;
            $(bitField.Set());
            $(fieldName : name);
          }
        ]>
      }

      foreach (field in extraFields with i)
      {
        | Abstract (name, parameters, type) with body = null
        | DefPrivate(name, parameters, type, body)  
        | Def(name, parameters, type, body) => 
          def n          = <[ $(name.AsName : dyn) ]>.name;

          unless (names.Add(name))
          {
            Message.Error(name.Location, $"The rule '$(rd.Name)' already contains a definition for '$name'.");
            continue;
          }

          unless (rd is RuleDefinition.ExtentionPoint || rd is RuleDefinition.Simple || field is ExtraField.DefPrivate)
          {
            Message.Error(name.Location, "A public extra field must be defined in a extention point rule or a simple rule only.");
            continue;
          }

          def attrs = <[ N2.Runtime.ExtraFieldAttribute($(field.IsCached : bool)) ]>;

          if (rd is RuleDefinition.Simple)
          {
            when (field.IsCached)
              baseAstTb.Define(<[ decl: public virtual $(cachingPropertyName(n) : name) : $type { get { throw System.NotImplementedException(); } } ]>);
            def body2 = if (field.IsCached) addCaching(astTb, n, type, body, true) else body;
            def body3 = addRecursionCheck(astTb, body2);
            baseAstTb.Define(<[ decl: [$attrs] public abstract $(n : name)(..$parameters) : $type; ]>);
            astTb.Define(<[     decl: [$attrs] public override $(n : name)(..$parameters) : $type $body3 ]>);
          }
          else if (body == null)
          {
            when (field.IsCached)
              baseAstTb.Define(<[ decl: public virtual $(cachingPropertyName(n) : name) : $type { get { throw System.NotImplementedException(); } } ]>);
            baseAstTb.Define(<[ decl: [$attrs] public abstract $(n : name)(..$parameters) : $type; ]>);
          }
          else
          {
            def body2 = if (field.IsCached) addCaching(baseAstTb, n, type, body, false) else body;
            def body3 = addRecursionCheck(baseAstTb, body2);
            baseAstTb.Define(<[ decl: [$attrs] public virtual  $(n : name)(..$parameters) : $type $body3 ]>);
          }

        | OnError(name, body) | Override(name, body) =>
          match (rd)
          {
            | RuleDefinition.ExtentionPostfix(baseRuleName, _, _, _) | RuleDefinition.ExtentionPrefix(baseRuleName, _, _) =>
              def extPoint = TypedGrammar.GetRule(baseRuleName);
              // TODO: Добавить Grammar.Contains и сделать проверку наличия правила.
              assert2(extPoint is RuleDefinition.ExtentionPoint || extPoint is RuleDefinition.ExternalRule);
              def baseFieldOpt = GetExtraFieldDefinition(extPoint, name);
              when (baseFieldOpt.IsNone)
              {
                Message.Error(name.Location, $"No '$name' extra field to override.");
                continue;
              }
              def baseField = baseFieldOpt.Value;

              def n          = <[ $(name.AsName : dyn) ]>.name;
              def parameters = baseField.Params;
              def type       = baseField.Type;

              when (field is ExtraField.OnError)
                unless (definedErrorHendlers.Add(name))
                  Message.Error(name.Location, "Redefinition of error hendler.");

              def attrs = <[ N2.Runtime.ExtraFieldAttribute($(field.IsCached || baseField.IsCached : bool)) ]>;
              def tb = if (field is ExtraField.OnError) errorTb else astTb;
              def body2 = if (field.IsCached || baseField.IsCached) addCaching(tb, n, type, body, baseField.IsCached) else body;
              def body3 = addRecursionCheck(tb, body2);
              tb.Define(<[ decl: [$attrs] public override $(n : name)(..$parameters) : $type $body3 ]>);

            | _ =>
              if (field is ExtraField.OnError)
                Message.Error(name.Location, "A error hendler for a extra field can be defined only in extending rules.");
              else
                Message.Error(name.Location, "A extra field can be overridden only in extending rules.");
              continue;
          }
      }
      
      match (rd)
      {
        | RuleDefinition.ExtentionPoint
        | RuleDefinition.Simple =>
          foreach (field in rd.ExtraFields)
          {
            | Abstract (name, parameters, type)
            | Def(name, parameters, type, _) when !definedErrorHendlers.Contains(name) =>
              def n         = <[ $(name.AsName : dyn) ]>.name;
              def ignores   = parameters.Map(p => <[ _ = $(p.ReferencingExpr); ]>);

              when (errorTb != null)
              {
                def msg = $"Parse error handling for '$name' extra field of '$(rd.Name)' rule is not implemented.";
                def errorBody = <[ 
                  { ..$ignores }
                  throw System.NotImplementedException($msg); ]>;
                errorTb.Define(<[ decl: public override $(n : name)(..$parameters) : $type $errorBody ]>);
              }

              when (spliceTb != null)
              {
                def spliceBody = <[ 
                  { ..$ignores } 
                  assert2(false, "This method should not be invoked."); assert(false); ]>;
                spliceTb.Define(<[ decl: public override $(n : name)(..$parameters) : $type $spliceBody ]>);
              }
                
            | _ => ()
          }
          
        | _ => ()
      }
    }
  }
}
