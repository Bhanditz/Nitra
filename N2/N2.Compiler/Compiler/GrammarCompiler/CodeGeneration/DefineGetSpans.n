using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Compiler;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public DefineGetSpans(rd : RuleDefinition, descriptorTB : TypeBuilder) : void
    {
      def makeReader(structField : AstStruct.StructField, astPointer : AstPointer) : PExpr
      {
        match(structField.Field)
        {
          | RuleField.TokenString(str = str) =>
            def spanClass = TypedGrammar.SpanClasses.Find(spanClass =>
            {
              match (spanClass.Match)
              {
                | Some(rr) => FSMMatch.MakeMatcher(ConvertRegularRuleToFsm(TypedGrammar, rr))(str)//TODO:Optimize
                | None => false;
              }
            });
            if (spanClass is Some(spanClass))
              <[
                when (curSpan.IntersectsWith(startPos, endPos))
                  spans.Add(N2.SpanInfo(curSpan, $(MakeSpanClassFieldName(spanClass.Name) : dyn)))
              ]>
            else
              <[ () ]>

          | RuleField.TokenCall(ruleDefinition = rd) =>
            if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
              <[
                when (curSpan.IntersectsWith(startPos, endPos))
                  spans.Add(N2.SpanInfo(curSpan, $(MakeSpanClassFieldName(spanClass.name) : dyn)))
              ]>
            else
              <[ () ]>

          | RuleField.Void(ruleDefinition = rd)
          | RuleField.ExternalAst(ruleDefinition = rd) =>
            <[
              when (curSpan.IntersectsWith(startPos, endPos))
                $(GetStaticDescriptorRef(rd))
                  .GetSpans(parserHost, ast, ast[$(astPointer.AstOffset(structField))], curPos, curLength, startPos, endPos, spans)
            ]>

          | RuleField.ExtentionPoint =>
            <[
              when (curSpan.IntersectsWith(startPos, endPos))
              {
                def astIndex = ast[$(astPointer.AstOffset(structField))];
                parserHost.GetRuleDescriptorById(ast[astIndex])
                  .GetSpans(parserHost, ast, astIndex, curPos, curLength, startPos, endPos, spans)
              }
            ]>

          | RuleField.List(astStruct = itemStruct, NextRef = nextRef) =>
            def itemPointer   = AstPointer(itemStruct, "astIndex");
            <[
              def loop(astIndex)
              {
                when (astIndex > 0)
                {
                  $(makeGetSpans(itemStruct, itemPointer));
                  loop(ast[$(itemPointer.AstOffset(nextRef))]);
                }
              }
              loop(ast[$(astPointer.AstOffset(structField))])
            ]>

          | RuleField.List2(astRuleStruct = itemStruct, astSeparatorStruct = separatorStruct, NextRuleRef = nextItemRef, NextSeparatorRef = nextSeparatorRef) =>
            def itemPointer = AstPointer(itemStruct, "astIndex");
            def separatorPointer = AstPointer(separatorStruct, "separatorIndex");
            <[
              def loop(astIndex)
              {
                when (astIndex > 0)
                {
                  $(makeGetSpans(itemStruct, itemPointer));
                  def separatorIndex = ast[$(itemPointer.AstOffset(nextItemRef))];
                  when (separatorIndex > 0)
                  {
                    def nextAstIndex = ast[$(separatorPointer.AstOffset(nextSeparatorRef))];
                    when (nextAstIndex > 0)
                    {
                      $(makeGetSpans(separatorStruct, separatorPointer));
                      loop(astIndex);
                    }
                  }
                }
              }
              loop(ast[$(astPointer.AstOffset(structField))])
            ]>

          | RuleField.Option(astStruct = valueAstStruct) =>
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              when (astIndex > 0)
                $(makeGetSpans(valueAstStruct, AstPointer(valueAstStruct, "astIndex")))
            ]>

          | _ => assert(false)
        }
      }
      and makeGetSpans(astStruct : AstStruct, astPointer : AstPointer) : PExpr
      {
        def statements = SCG.List();
        def visitStructField(structField : AstStruct.StructField, isPrefixRef : bool) : void
        {
          def getLengthExpr()
          {
            if(isPrefixRef)
              <[
                curLength =
                {
                  def astIndex = ast[$(astPointer.AstOffset(structField))];
                  parserHost.GetRuleDescriptorById(ast[astIndex]).GetAstLength(parserHost, ast, astIndex)
                }
              ]>
            else
              <[ curLength = ast[$(astPointer.SizeOffset(structField))] ]>
          }
          match (structField.Field)
          {
            | RuleField.Ast
            | RuleField.Predicate => ()
            | RuleField.List   with incrementPos = false
            | RuleField.List2  with incrementPos = false
            | RuleField.Option with incrementPos = false
            | _                with incrementPos = true =>
              statements.Add(getLengthExpr());
              statements.Add(<[ curSpan = N2.NToken(curPos, curPos + curLength) ]>);
              statements.Add(<[ $(makeReader(structField, astPointer)) ]>);
              when (incrementPos)
                statements.Add(<[ curPos = curSpan.EndPos ]>);
          }
        }
        when (astStruct is PostfixAstStruct as astStruct)
          visitStructField(astStruct.PrefixRef, true);
        foreach (sizeField in astStruct.SizeFields)
          visitStructField(sizeField, false);
        <[ { ..$(statements.ToNList()) } ]>
      }
      match(rd)
      {
        | Simple
        | ExtentionPrefix
        | ExtentionPostfix =>
          def ruleCompiler = _ruleCompilers[rd];
          def astStruct = ruleCompiler.RootField.astStruct;
          def astPointer = AstPointer(astStruct, "index");
          def selfCode = 
            if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
              <[
                spans.Add(N2.SpanInfo(curSpan, $(MakeSpanClassFieldName(spanClass.name) : dyn)))
              ]>
            else
              <[ () ]>;
          _ = descriptorTB.DefineConditional(<[ decl:
            public override GetSpans(parserHost : N2.ParserHost, ast : array[int], index : int, pos : int, length : int, startPos : int, endPos : int, spans : System.Collections.Generic.List[SpanInfo]) : void
            {
              mutable curPos = pos;
              mutable curLength;
              mutable curSpan = N2.NToken(pos, pos + length);
              ignore(parserHost, ast, index, startPos, endPos, spans, curLength, curSpan);
              $selfCode;
              $(makeGetSpans(astStruct, astPointer));
            }
          ]>)

        | ExtentionPoint =>
          def ruleCompiler = _ruleCompilers[rd];
          def astStruct = ExtensibleAstStruct(ruleCompiler, rd);
          def astPointer = AstPointer(astStruct, "index");
          _ = descriptorTB.DefineConditional(<[decl:
            public override GetSpans(parserHost : N2.ParserHost, ast : array[int], index : int, pos : int, length : int, startPos : int, endPos : int, spans : System.Collections.Generic.List[SpanInfo]) : void
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              def astIndex = ast[$(astPointer.AstOffset(astStruct.AstRef))];
              parserHost.GetRuleDescriptorById(ast[astIndex]).GetSpans(parserHost, ast, astIndex, pos, length, startPos, endPos, spans)
            }
          ]>)

        | _ =>
          _ = descriptorTB.DefineConditional(<[ decl:
            public override GetSpans(parserHost : N2.ParserHost, ast : array[int], index : int, pos : int, length : int, startPos : int, endPos : int, spans : System.Collections.Generic.List[SpanInfo]) : void
            {
              ignore(parserHost, ast, index, pos, length, startPos, endPos, spans);
              throw System.NotImplementedException();
            }
          ]>)
      }
    }
  }
}
