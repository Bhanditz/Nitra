using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    [Memoize]
    public DefineAstType(rd : RuleDefinition) : TypeBuilder
    {
      assert(rd.IsAst);
      match (rd)
      {
        | RuleDefinition.ExtentionPoint(PType(basePType)) with baseType = BindFixedType(basePType)
        | RuleDefinition.ExtentionPoint(NType(baseType))
        | RuleDefinition.Simple(PType(basePType), _, _)   with baseType = BindFixedType(basePType)
        | RuleDefinition.Simple(NType(baseType), _, _)
        | RuleDefinition.ExtentionPrefix                  with baseType = GetBaseRuleNType(rd)
        | RuleDefinition.ExtentionPostfix                 with baseType = GetBaseRuleNType(rd) =>
          def mods = NemerleModifiers.Abstract %| NemerleModifiers.Public %| NemerleModifiers.Partial;
          def attrsAndMods = AttributesAndModifiers(mods, []);
          
          Util.locate(rd.Name.Location,
          GrammarTB.DefineNestedType(<[decl:
            ..$attrsAndMods class $(MakePublicRuleName(rd.Name) : dyn) : $(baseType : typed)
            {
              public this(location : Location, errors : list[ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>))

        | _ => assert(false)
      }
    }

    private DefineErrorAst(rd : RuleDefinition, baseAstTb : TypeBuilder) : TypeBuilder
    {
      def errorTb = Util.locate(rd.Name.Location, 
        baseAstTb.DefineNestedType(<[decl: 
        public partial new class Error : $(baseAstTb.GetMemType() : typed)
        {
          public this(location : Location, errors : list[ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
      DefineErrorGetDump(errorTb, baseAstTb.FullName);
      errorTb
    }

    private DefineSpliceAst(rd : RuleDefinition, baseAstTb : TypeBuilder) : TypeBuilder
    {
      def spliceTb = Util.locate(rd.Name.Location,
        baseAstTb.DefineNestedType(<[decl: 
        public partial new class Splice : $(baseAstTb.GetMemType() : typed)
        {
          public this(location : Location, errors : list[ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
      DefineSpliceGetDump(spliceTb, baseAstTb.FullName);
      spliceTb
    }

    public DefineAst() : void
    {
      assert2(GrammarTB != null);
      
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);

        def (errorTb, spliceTb) =
          if (rd is RuleDefinition.ExtentionPoint || rd is RuleDefinition.Simple)
            (DefineErrorAst(rd, tb), DefineSpliceAst(rd, tb))
          else
            (null, null);

        match (rd)
        {
          | RuleDefinition.ExtentionPoint => Util.locate(rd.Name.Location, DefineExtraFields(tb, null, errorTb, spliceTb, rd));
          | RuleDefinition.ExtentionPostfix
          | RuleDefinition.ExtentionPrefix
          | RuleDefinition.Simple =>
            def args = GetAstFieldsTypes(rd).WithDefault([]);

            def astTb = Util.locate(rd.Name.Location,
              tb.DefineNestedType(<[decl: 
              public partial new class Ast : $(tb.GetMemType() : typed)
              {
              }
            ]>));

            def names = rd.GetNames(_tokenFieldNames).Map(_.AsName);
            assert2(names.Length == args.Length);
            def members = names.Zip(args);

            DefineAstFields(astTb, members);
            DefineAstCtor(astTb, members);
            DefineAstGetErrors(astTb, members);
            when (rd.GetRule() is Some(Rule.Sequence(rules)))
              DefineToString(astTb, names, rules);
            DefineAstGetDump(astTb, tb.FullName, members);
            when (rd.GetRule() is Some(rule))
              DefineAstGetSpans(astTb, rule, rd);

            Util.locate(rd.Name.Location, DefineExtraFields(tb, astTb, errorTb, spliceTb, rd));

            astTb.Compile();

          | RuleDefinition.Marker
          | RuleDefinition.ExternalRule
          | RuleDefinition.Regular => assert(false);
        }

        when (errorTb != null)
          errorTb.Compile();
        when (spliceTb != null)
          spliceTb.Compile();
        tb.Compile();
      }
    }

    private DefineAstFields(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def fields = members.Map((name, argType) => <[decl: public $(name : dyn) : $(RuleTypeToNType(argType) : typed); ]>);
      foreach (field in fields)
        astTb.Define(field);
    }

    private DefineAstCtor(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def locationName = <[ $(Nemerle.Compiler.Parsetree.Name("location") : name) ]>;
      def errorsName   = <[ $(Nemerle.Compiler.Parsetree.Name("error") : name) ]>;
      def args
        =  <[ $locationName : Location ]>
        :: <[ $errorsName : list[ErrorInfo] ]>
        :: members.Map((name, argType) => <[ $(name : dyn) : $(RuleTypeToNType(argType) : typed) ]>)
        ;
      _ = astTb.DefineConditional(<[decl:
        public this(..$(args.Map(PParameter)))
        {
            base($locationName, $errorsName);
            { ..$(members.Map((name, _) => <[ this.$(name : dyn) = $(name : dyn); ]>)) }
        }
      ]>);
    }
  }
}
