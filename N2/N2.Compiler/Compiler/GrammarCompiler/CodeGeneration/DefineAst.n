using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    [Memoize]
    public DefineAstType(rd : RuleDefinition) : TypeBuilder
    {
      assert(rd.IsAst);
      match (rd)
      {
        | RuleDefinition.ExtentionPoint(PType(basePType)) with baseType = BindFixedType(basePType)
        | RuleDefinition.ExtentionPoint(NType(baseType))
        | RuleDefinition.Simple(PType(basePType), _, _)   with baseType = BindFixedType(basePType)
        | RuleDefinition.Simple(NType(baseType), _, _)
        | RuleDefinition.ExtentionPrefix                  with baseType = GetBaseRuleNType(rd)
        | RuleDefinition.ExtentionPostfix                 with baseType = GetBaseRuleNType(rd) =>
          def mods = NemerleModifiers.Abstract %| NemerleModifiers.Public %| NemerleModifiers.Partial;
          def attrsAndMods = AttributesAndModifiers(mods, []);
          
          Util.locate(rd.Name.Location,
          GrammarTB.DefineNestedType(<[decl:
            ..$attrsAndMods class $(MakePublicRuleName(rd.Name) : dyn) : $(baseType : typed)
            {
              public this(location : Location, errors : list[ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>))

        | _ => assert(false)
      }
    }

    private DefineErrorAst(rd : RuleDefinition, baseAstTb : TypeBuilder) : TypeBuilder
    {
      def errorTb = Util.locate(rd.Name.Location, 
        baseAstTb.DefineNestedType(<[decl: 
        public partial new class Error : $(baseAstTb.GetMemType() : typed)
        {
          public this(location : Location, errors : list[ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
      DefineErrorGetDump(errorTb, baseAstTb.FullName);
      errorTb
    }

    private DefineSpliceAst(rd : RuleDefinition, baseAstTb : TypeBuilder) : TypeBuilder
    {
      def spliceTb = Util.locate(rd.Name.Location,
        baseAstTb.DefineNestedType(<[decl: 
        public partial new class Splice : $(baseAstTb.GetMemType() : typed)
        {
          public this(location : Location, errors : list[ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
      DefineSpliceGetDump(spliceTb, baseAstTb.FullName);
      spliceTb
    }

    public DefineAst() : void
    {
      assert2(GrammarTB != null);
      
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);

        def (errorTb, spliceTb) =
          if (rd is RuleDefinition.ExtentionPoint || rd is RuleDefinition.Simple)
            (DefineErrorAst(rd, tb), DefineSpliceAst(rd, tb))
          else
            (null, null);

        match (rd)
        {
          | RuleDefinition.ExtentionPoint => Util.locate(rd.Name.Location, DefineExtraFields(tb, null, errorTb, spliceTb, rd));
          | RuleDefinition.ExtentionPostfix
          | RuleDefinition.ExtentionPrefix
          | RuleDefinition.Simple =>
            def args = GetAstFieldsTypes(rd).WithDefault([]);

            def astTb = Util.locate(rd.Name.Location,
              tb.DefineNestedType(<[decl: 
              public partial new class Ast : $(tb.GetMemType() : typed)
              {
              }
            ]>));

            def names = rd.GetNames(_tokenFieldNames).Map(_.AsName);
            assert2(names.Length == args.Length);
            def members = names.Zip(args);

            DefineAstFields(astTb, members);
            DefineAstCtor(astTb, members);
            DefineAstGetErrors(astTb, members);
            when (rd.GetRule() is Some(Rule.Sequence(rules)))
              DefineToString(astTb, names, rules);
            DefineAstGetDump(astTb, tb.FullName, members);
            when (rd.GetRule() is Some(rule))
              DefineAstGetSpans(astTb, rule, rd);

            Util.locate(rd.Name.Location, DefineExtraFields(tb, astTb, errorTb, spliceTb, rd));

            astTb.Compile();

          | RuleDefinition.Marker
          | RuleDefinition.ExternalRule
          | RuleDefinition.Regular => assert(false);
        }

        when (errorTb != null)
          errorTb.Compile();
        when (spliceTb != null)
          spliceTb.Compile();
        tb.Compile();
      }
    }

    private DefineToString(astTb : TypeBuilder, names : list[string], rules : list[Rule]) : void
    {
      //assert2(astTb.FullName != "N2Parser.NamespaceDeclaration.Ast");
      def isNoNeedVar(rule : Rule) { rule.Type is RuleType.Void || rule is Rule.String }
      def isVoid(ruleType : RuleType)
      {
        | Void
        | Tuple(types) when types.ForAll(isVoid)
        | Option(type) when isVoid(type)         => true
        | _                                      => false
      }
      def zipWithNames(mutable names : list[string], rules : list[Rule]) : list[string * Rule]
      {
        def result = SCG.List();
        
        foreach (rule in rules)
        {
          def isVoid = isVoid(rule.Type);
          def name   = if (isVoid) "_" else names.Head;
          unless (isVoid)
            names = names.Tail;
          result.Add(name, rule);
        }
        
        result.NToList()
      }
      def members = zipWithNames(names, rules);
      def fieldToString(name : string, rule : Rule) : PExpr
      {
        def loop(expr : PExpr, rule : Rule) : PExpr
        {
          def result =
            match (rule)
            {
              | String(str)                                     => <[ _ = code.Append($str); ]>
              | And | Not                                       => <[ () ]>
              | Sequence(rules)                                 => 
                def members2 = rules.MapI((i, r) => if (isNoNeedVar(r)) (<[ _ ]>, r), else (<[ $($"_item$i" : dyn) ]>, r));
                def noNeedVars = members2.ForAll((_, r) => isNoNeedVar(r));
                def varNames = $[ n | (n, r) in members2, !(r.Type is RuleType.Void) ]; // make list of names for not void rules
                def lines = members2.Map(loop);
                match (varNames)
                {
                  | _ when noNeedVars
                  | []        => <[ { ..$lines } ]>
                  | [varName] => <[ { ..$(<[ def $varName      = $expr; ]> :: lines) } ]>
                  | _         => <[ { ..$(<[ def (..$varNames) = $expr; ]> :: lines) } ]>
                }
              
              | Call(name, _bp) when rule.Type is RuleType.Void =>
                def newLine() { <[ _ = code.AppendLine(); Indent(code, currentIndent); ]> }
                match (name.LastPartString)
                {
                  | "S"
                  | "s"   => <[ () ]> // TODO: add analysis of a space usefulness
                  | "nl"  => newLine()
                  | "inl" 
                  | "nli" => <[ currentIndent++; $(newLine()) ]>
                  | "d"   => <[ currentIndent--; Unindent(code, currentIndent); ]>
                  | "i"   => <[ currentIndent++; Indent(code, 1); ]>
                  | _     => <[ _ = code.Append(' '); ]>
                }

              | Call when rule.Type is RuleType.Chars           => <[ def tok = $expr; _ = code.Append(this.Location.Source.Text, tok.StartPos, tok.Length); ]>
              | Call | PrefixCall                               => <[ $expr.PrettyPrint(code, currentIndent, options); ]>
              | Repeat(_, _, rule) when isVoid(rule.Type)       => <[ _ = code.Append(' '); ]>
              | Repeat(0, Some(1), rule)                        => <[ when ($expr is Some(_x)) $(loop(<[ _x ]>, rule)) ]>
              | Repeat(_, _, rule)                              => <[ foreach (_elem in $expr) $(loop(<[ _elem ]>, rule)); ]>
              | RepeatWithSeparator(_, _, rule, separator, _)   => 
                if (separator.GetAllSubRules().ForAll(isNoNeedVar))
                  <[  def (elems, separators) = $expr;
                      assert2(elems.IsEmpty || elems.Length >= separators.Length);
                      def endIndex = separators.Length;
                      
                      foreach (elem in elems with i)
                      {
                        $(loop(<[ elem ]>, rule));
                    
                        when (endIndex != i)
                          $(loop(<[ separator ]>, separator));
                      } ]>
                else
                  <[  def (elems, separators) = $expr;
                      assert2(elems.IsEmpty || elems.Length >= separators.Length);
                      mutable separatorRest = separators;
                    
                      foreach (elem in elems)
                      {
                        $(loop(<[ elem ]>, rule));
                    
                        unless (separatorRest.IsEmpty)
                        {
                          def separator = separatorRest.Head;
                          $(loop(<[ separator ]>, separator));
                          separatorRest = separatorRest.Tail;
                        }
                      } ]>
            };
          
          result
        }

        loop(<[ this.$(name : dyn) ]>, rule);
      }

      def code = members.Map(fieldToString);
      def body = <[ { ..$code } ]>;
      _ = astTb.DefineWithSource(<[ decl: 
        public override PrettyPrint(code : System.Text.StringBuilder, mutable currentIndent : int, options : N2.ToStringOptions) : void
        {
          _ = $(astTb.FullName); // TODO: Remove at release!!!
          _ = currentIndent; _ = options; _ = currentIndent;
          $body
        } ]>);
    }

    private DefineAstFields(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def fields = members.Map((name, argType) => <[decl: public $(name : dyn) : $(RuleTypeToNType(argType) : typed); ]>);
      foreach (field in fields)
        astTb.Define(field);
    }

    private DefineAstCtor(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def locationName = <[ $(Nemerle.Compiler.Parsetree.Name("location") : name) ]>;
      def errorsName   = <[ $(Nemerle.Compiler.Parsetree.Name("error") : name) ]>;
      def args
        =  <[ $locationName : Location ]>
        :: <[ $errorsName : list[ErrorInfo] ]>
        :: members.Map((name, argType) => <[ $(name : dyn) : $(RuleTypeToNType(argType) : typed) ]>)
        ;
      _ = astTb.DefineWithSource(<[decl:
        public this(..$(args.Map(PParameter)))
        {
            base($locationName, $errorsName);
            { ..$(members.Map((name, _) => <[ this.$(name : dyn) = $(name : dyn); ]>)) }
        }
      ]>);
    }
  }
}
