using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;
using Nemerle.Imperative;

namespace N2
{
  internal partial class GrammarCompiler
  {
    [Memoize]
    public DefineAstType(rd : RuleDefinition) : TypeBuilder
    {
      assert(rd.IsAst);
      match (rd)
      {
        | RuleDefinition.ExtentionPoint(PType(basePType)) with baseType = BindFixedType(basePType)
        | RuleDefinition.ExtentionPoint(NType(baseType))
        | RuleDefinition.Simple(PType(basePType), _, _)   with baseType = BindFixedType(basePType)
        | RuleDefinition.Simple(NType(baseType), _, _)
        | RuleDefinition.ExtentionPrefix                  with baseType = GetBaseRuleNType(rd)
        | RuleDefinition.ExtentionPostfix                 with baseType = GetBaseRuleNType(rd) =>
          GrammarTB.DefineNestedType(<[decl:
            public partial class $(MakePublicRuleName(rd.Name) : dyn) : $(baseType : typed)
            {
              public this(location : Location, errors : list[ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>)

        | _ => assert(false)
      }
    }

    public DefineAst() : void
    {
      assert2(GrammarTB != null);
      unless (Manager.IsIntelliSenseMode)
        Manager.TypeTreeBuildFinish += MakeExtraFieldsCalcs;
      
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);
        
        match (GetAstFieldsTypes(rd))
        {
          | None with args = []
          | Some(args) =>
            def errorTb = tb.DefineNestedType(<[decl: 
              public partial new class Error : $(tb.GetMemType() : typed)
              {
                public this(location : Location, errors : list[ErrorInfo])
                {
                  base(location, errors)
                }
              }
            ]>);
            DefineErrorGetDump(errorTb, tb.FullName);
            errorTb.Compile();

            def spliceTb = tb.DefineNestedType(<[decl: 
              public partial new class Splice : $(tb.GetMemType() : typed)
              {
                public this(location : Location, errors : list[ErrorInfo])
                {
                  base(location, errors)
                }
              }
            ]>);
            DefineSpliceGetDump(spliceTb, tb.FullName);
            spliceTb.Compile();

            match (rd)
            {
              | RuleDefinition.ExtentionPoint => DefineExtraFields(tb, rd);
              | RuleDefinition.ExtentionPostfix
              | RuleDefinition.ExtentionPrefix
              | RuleDefinition.Simple =>
                def astTb = tb.DefineNestedType(<[decl: 
                  public partial new class Ast : $(tb.GetMemType() : typed)
                  {
                  }
                ]>);
                
                def names = rd.GetNames(_tokenFieldNames).Map(_.AsName);
                assert2(names.Length == args.Length);
                def members = names.Zip(args);

                DefineAstFields(astTb, members);
                DefineAstCtor(astTb, members);
                DefineAstGetErrors(astTb, members);
                when (rd.GetRule() is Some(Rule.Sequence(rules)))
                  DefineToString(astTb, names, rules);
                DefineAstGetDump(astTb, tb.FullName, members);
                when (rd.GetRule() is Some(rule))
                  DefineAstGetSpans(astTb, rule, rd);
                  
                DefineCalcExtraField(astTb, rd);
                DefineExtraFields(tb, rd);

                astTb.Compile();
                
              | RuleDefinition.ExternalRule
              | RuleDefinition.Regular => assert(false);
            }
          | _ => assert(false)
        }
        tb.Compile();
      }
    }
    
    private DefineToString(astTb : TypeBuilder, names : list[string], rules : list[Rule]) : void
    {
      //assert2(astTb.FullName != "N2Parser.NamespaceDeclaration.Ast");
      def isNoNeedVar(rule : Rule) { rule.Type is RuleType.Void || rule is Rule.String }
      def isVoid(ruleType : RuleType)
      {
        | Void
        | Tuple(types) when types.ForAll(isVoid)
        | Option(type) when isVoid(type)         => true
        | _                                      => false
      }
      def zipWithNames(mutable names : list[string], rules : list[Rule]) : list[string * Rule]
      {
        def result = SCG.List();
        
        foreach (rule in rules)
        {
          def isVoid = isVoid(rule.Type);
          def name   = if (isVoid) "_" else names.Head;
          unless (isVoid)
            names = names.Tail;
          result.Add(name, rule);
        }
        
        result.NToList()
      }
      def members = zipWithNames(names, rules);
      def fieldToString(name : string, rule : Rule) : PExpr
      {
        def loop(expr : PExpr, rule : Rule) : PExpr
        {
          def result =
            match (rule)
            {
              | String(str)                                     => <[ _ = code.Append($str); ]>
              | And | Cut | Not                                 => <[ () ]>
              | Scope(_, rule)                                  => loop(expr, rule)
              | Sequence(rules)                                 => 
                def members2 = rules.MapI((i, r) => if (isNoNeedVar(r)) (<[ _ ]>, r), else (<[ $($"_item$i" : dyn) ]>, r));
                def noNeedVars = members2.ForAll((_, r) => isNoNeedVar(r));
                def varNames = $[ n | (n, r) in members2, !(r.Type is RuleType.Void) ]; // make list of names for not void rules
                def lines = members2.Map(loop);
                match (varNames)
                {
                  | _ when noNeedVars
                  | []        => <[ { ..$lines } ]>
                  | [varName] => <[ { ..$(<[ def $varName      = $expr; ]> :: lines) } ]>
                  | _         => <[ { ..$(<[ def (..$varNames) = $expr; ]> :: lines) } ]>
                }
              
              | Call(name, _bp) when rule.Type is RuleType.Void =>
                def newLine() { <[ _ = code.AppendLine(); Indent(code, currentIndent); ]> }
                match (name.LastPartString)
                {
                  | "S"
                  | "s"   => <[ () ]> // TODO: add analysis of a space usefulness
                  | "nl"  => newLine()
                  | "inl" 
                  | "nli" => <[ currentIndent++; $(newLine()) ]>
                  | "d"   => <[ currentIndent--; Unindent(code, currentIndent); ]>
                  | "i"   => <[ currentIndent++; Indent(code, 1); ]>
                  | _     => <[ _ = code.Append(' '); ]>
                }

              | Call when rule.Type is RuleType.Chars           => <[ def tok = $expr; _ = code.Append(this.Location.Source.Text, tok.StartPos, tok.Length); ]>
              | Call | PrefixCall                               => <[ $expr.PrettyPrint(code, currentIndent, options); ]>
              | Repeat(_, _, rule) when isVoid(rule.Type)       => <[ _ = code.Append(' '); ]>
              | Repeat(0, Some(1), rule)                        => <[ when ($expr is Some(_x)) $(loop(<[ _x ]>, rule)) ]>
              | Repeat(_, _, rule)                              => <[ foreach (_elem in $expr) $(loop(<[ _elem ]>, rule)); ]>
              | RepeatWithSeparator(_, _, rule, separator)      => 
                if (separator.GetAllSubRules().ForAll(isNoNeedVar))
                  <[  def (elems, separators) = $expr;
                      assert2(elems.IsEmpty || elems.Length > separators.Length);
                      def endIndex = elems.Length - 1;
                      
                      foreach (elem in elems with i)
                      {
                        $(loop(<[ elem ]>, rule));
                    
                        when (endIndex != i)
                          $(loop(<[ separator ]>, separator));
                      } ]>
                else
                  <[  def (elems, separators) = $expr;
                      assert2(elems.IsEmpty || elems.Length > separators.Length);
                      mutable separatorRest = separators;
                    
                      foreach (elem in elems)
                      {
                        $(loop(<[ elem ]>, rule));
                    
                        unless (separatorRest.IsEmpty)
                        {
                          def separator = separatorRest.Head;
                          $(loop(<[ separator ]>, separator));
                          separatorRest = separatorRest.Tail;
                        }
                      } ]>
            };
          
          result
        }

        loop(<[ this.$(name : dyn) ]>, rule);
      }

      def code = members.Map(fieldToString);
      def body = <[ { ..$code } ]>;
      _ = astTb.DefineWithSource(<[ decl: 
        public override PrettyPrint(code : System.Text.StringBuilder, mutable currentIndent : int, options : N2.ToStringOptions) : void
        {
          _ = $(astTb.FullName); // TODO: Remove at release!!!
          _ = currentIndent; _ = options; _ = currentIndent;
          $body
        } ]>);
    }

    private DefineAstFields(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def fields = members.Map((name, argType) => <[decl: public $(name : dyn) : $(RuleTypeToNType(argType) : typed); ]>);
      foreach (field in fields)
        astTb.Define(field);
    }

    private DefineAstCtor(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def locationName = <[ $(Nemerle.Compiler.Parsetree.Name("location") : name) ]>;
      def errorsName   = <[ $(Nemerle.Compiler.Parsetree.Name("error") : name) ]>;
      def args
        =  <[ $locationName : Location ]>
        :: <[ $errorsName : list[ErrorInfo] ]>
        :: members.Map((name, argType) => <[ $(name : dyn) : $(RuleTypeToNType(argType) : typed) ]>)
        ;
      _ = astTb.DefineWithSource(<[decl:
        public this(..$(args.Map(PParameter)))
        {
            base($locationName, $errorsName);
            { ..$(members.Map((name, _) => <[ this.$(name : dyn) = $(name : dyn); ]>)) }
        }
      ]>);
    }

    IsVoidDeep(type : RuleType) : bool
    {
      | Void => true
      | Option(t) | List(t) => IsVoidDeep(t)
      | Tuple(types) => types.ForAll(IsVoidDeep)
      | Chars | PType | NType => false
    }
    
    private DefineAstGetErrors(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def makeGetErrors(expr : PExpr, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType)
        {
          | _ when IsVoidDeep(type) => <[ () ]>
          | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
          | Chars        => <[ () ]>
          | PType        => <[ $expr.GetErrors(errors); ]>
          | NType        => <[ $expr.GetErrors(errors); ]>
          | List(type)   =>
            <[
              foreach (_item in $expr)
                $(makeGetErrors(<[ $("_item" : dyn) ]>, type));
            ]>

          | Option(type) =>
            <[
              match ($expr)
              {
                | Some(_item) => $(makeGetErrors(<[ $("_item" : dyn) ]>, type));
                | _ => ()
              }
            ]>

          | Tuple(types) when types.Count(ty => !(ty is RuleType.Void)) == 1 => <[ $expr.GetErrors(errors); ]>
          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => <[ $($"_item$n" : dyn) ]>);
            <[
              {
                def (..$names) = $expr;
                { ..$(names.Zip(types).Map(makeGetErrors)) };
              }
            ]>
          | Void => assert(false);
        }
      }
      _ = astTb.DefineWithSource(<[decl:
        public override GetErrors(errors : System.Collections.Generic.List[ErrorInfo]) : void
        {
          base.GetErrors(errors); 
          { ..$(members.Map((name, type) => makeGetErrors(<[ this.$(name : dyn) ]>, type))) }
        }
      ]>);
    }

    private DefineAstGetSpans(astTb : TypeBuilder, rule : Rule, rd : RuleDefinition) : void
    {
      def isEmpty(code : PExpr) : bool { code is <[ () ]> }
      def mapRules(rules : list[Rule], func) : PExpr
      {
        def exprs = rules.Map(func);
        
        if (exprs.ForAll(_ is <[ () ]>))
          <[ () ]>
        else if (exprs is [_])
          exprs.Head
        else
          <[ { ..$exprs } ]>
      }
      def nameMap = SCG.Dictionary();
      def rules = rule.GetSubRules();
      def fieldNames = rd.GetNames(_tokenFieldNames);
      assert(rules.Length == fieldNames.Length);
      foreach ((name, rule) in fieldNames.Zip(rules))
        nameMap[rule.Id] = name.AsName;
      def getName(rule) : Name
      {
        mutable name;
        def id = rule.Id;
        
        if (nameMap.TryGetValue(id, out name))
          <[ $(name : dyn) ]>.name//Name.NameInCurrentColor(nameMap[id], astTb.GlobalEnv)
        else
           Name.NameInCurrentColor($"_ast_$id", astTb.GlobalEnv)
      }
      def makeGetSpans(rule : Rule) : PExpr
      {
        def varName = 
          if (nameMap.ContainsKey(rule.Id))
            <[ this.$(getName(rule) : name) ]>
          else
            <[ $(getName(rule) : name) ]>;
        
        match (rule : Rule)
        {
          | PrefixCall(ruleName, _)
          | Call(ruleName, _) =>
            def rd = TypedGrammar.GetRule(ruleName);
            if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
            {
              if (rd is RuleDefinition.Regular)
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      spans.Add(N2.SpanInfo($varName, $(MakeSpanClassFieldName(spanClass.name) : dyn))) ]>
              else
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      $varName.GetSpans(spans, startPos, endPos) ]>
            }
            else
            {
              if (rd is RuleDefinition.Regular)
                <[ () ]> // we not need SpanClass.Default spans 
                //<[ when ($varName.IntersectsWith(startPos, endPos))
                //     spans.Add(N2.SpanInfo($varName, N2.SpanClass.Default)) ]>
              else
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      $varName.GetSpans(spans, startPos, endPos) ]>
            }

          | String(str) =>
            def spanClass = TypedGrammar.SpanClasses.Find(spanClass =>
            {
              match (spanClass.Match)
              {
                | Some(rr) => FSMMatch.MakeMatcher(ConvertRegularRuleToFsm(rr))(str)//TODO:Optimize
                | None => false;
              }
            });
            if (spanClass is Some(spanClass))
              <[  when ($varName.IntersectsWith(startPos, endPos))
                    spans.Add(N2.SpanInfo($varName, $(MakeSpanClassFieldName(spanClass.Name) : dyn))) ]>
            else
              <[ () ]> // we not need SpanClass.Default spans
              //<[  when ($varName.IntersectsWith(startPos, endPos))
              //      spans.Add(N2.SpanInfo($varName, N2.SpanClass.Default)) ]>

          | Sequence(rules) =>
            def rules = rules.Filter(rule => !(rule.Type is RuleType.Void));
            def names = rules.Map(getName).Map(name => <[ $(name : name)]>);
            def code  = mapRules(rules, makeGetSpans);
            
            match (names)
            {
              | [name] =>
                if (!isEmpty(code))
                  <[
                    {
                      def $name = $varName;
                      $code;
                    }
                  ]>
                else
                  <[ () ]>
                  
              | [] | null => assert(false)
              | names =>
                if (!isEmpty(code))
                  <[
                    {
                      def (..$names) = $varName;
                      $code;
                    }
                  ]>
                else
                  <[ () ]>
            }

          | Repeat(0, Some(1), subRule) =>
            def code = makeGetSpans(subRule);
            
            if (!isEmpty(code))
              <[
                match($varName)
                {
                  | Some($(getName(subRule) : name)) => $code
                  | _ => ()
                }
              ]>
            else
              <[ () ]>

          | Repeat(_, _, subRule) =>
            def code = makeGetSpans(subRule);
            
            if (!isEmpty(code))
              <[
                foreach ($(getName(subRule) : name) in $varName)
                  $code
              ]>
            else
              <[ () ]>

          | RepeatWithSeparator(_, _, rule, separator) =>
            def codeForRule             = makeGetSpans(rule);
            def codeForSeparator        = makeGetSpans(separator);
            def isCodeForRuleEmpty      = isEmpty(codeForRule);
            def isCodeForSeparatorEmpty = isEmpty(codeForSeparator);
            
            if (isCodeForRuleEmpty && isCodeForSeparatorEmpty)
              <[ () ]>
            else
            {
              def codeForRules =
                if (isCodeForSeparatorEmpty)
                  <[
                    foreach ($(getName(rule) : name) in $varName[0])
                      $codeForRule;
                  ]>
                else
                  <[ () ]>;
              def codeForSeparators =
                if (isCodeForRuleEmpty)
                  <[
                    foreach ($(getName(separator) : name) in $varName[1])
                      $codeForSeparator;
                  ]>
                else
                  <[ () ]>;
                  
              <[ $codeForRules; $codeForSeparators; ]>
            }
              
          | Scope(_, rule) =>
            def code = makeGetSpans(rule);
            
            if (!isEmpty(code))
              <[
                def $(getName(rule) : name) = $varName;
                $code;
              ]>
            else
              <[ () ]>

          | And | Not | Cut => assert(false);
        }
      }
      def selfCode = 
        if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
          <[ 
            def loc = this.Location.NToken;
            when (loc.IntersectsWith(startPos, endPos))
              spans.Add(N2.SpanInfo(loc, $(MakeSpanClassFieldName(spanClass.name) : dyn))) 
          ]>
        else
          <[ () ]>;
      def subRuleCode  = mapRules(rules, makeGetSpans);
      
      def bodyCode =
        if (isEmpty(selfCode) && isEmpty(subRuleCode))
          <[ _ = spans; _ = startPos; _ = endPos; ]>
        else
          <[ $selfCode; $subRuleCode; ]>;
      
      _ = astTb.DefineWithSource(<[decl:
        public override GetSpans(spans : System.Collections.Generic.List[N2.SpanInfo], startPos : int, endPos : int) : void
        {
          ignore(spans, startPos, endPos);
          $bodyCode
        }
      ]>);
    }

    private DefineAstGetDump(astTb : TypeBuilder, astFullName : string, members : list[string * RuleType]) : void
    {
      def makeDump(expr : PExpr, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType)
        {
          | _ when IsVoidDeep(type) => <[ () ]>
          | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
          | Chars        => <[ N2.Internal.AstDump.Token(GetText($expr)) ]>
          | PType        => <[ $expr.GetDump(); ]>
          | NType        => <[ $expr.GetDump(); ]>
          | List(type)   =>
            <[
              N2.Internal.AstDump.List($expr.Map(fun(_item)
              {
                $(makeDump(<[ $("_item" : dyn) ]>, type))
              }))
            ]>

          | Option(Void) => <[ () ]>
          | Option(type) =>
            <[
              match ($expr)
              {
                | Some(_item) => N2.Internal.AstDump.Option(Some($(makeDump(<[ $("_item" : dyn) ]>, type))));
                | _ => N2.Internal.AstDump.Option(None())
              }
            ]>

          | Tuple(types) when types.Count(ty => !(ty is RuleType.Void)) == 1 => <[ $expr.GetDump(); ]>
          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => <[ $($"_item$n" : dyn) ]>);
            <[
              {
                def (..$names) = $expr;
                N2.Internal.AstDump.Tuple([..$(names.Zip(types).Map(makeDump))]);
              }
            ]>

          | Void => assert(false);
        }
      }
      def makeFieldDump(name, type) : PExpr
      {
        <[ N2.Internal.AstDump.Field($(name : string), $(makeDump(<[ this.$(name : dyn) ]>, type))) ]>
      }
      _ = astTb.DefineWithSource(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Ast($(astFullName : string), [..$(members.Map(makeFieldDump))])
        }
      ]>);
    }

    private DefineErrorGetDump(errorTb : TypeBuilder, astFullName : string) : void
    {
      _ = errorTb.DefineWithSource(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Error($(astFullName : string), GetText())
        }
      ]>);
    }

    private DefineSpliceGetDump(spliceTb : TypeBuilder, astFullName : string) : void
    {
      _ = spliceTb.DefineWithSource(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Splice($(astFullName : string))
        }
      ]>);
    }

    private DefineExtraFields(baseAstTb : TypeBuilder, rd : RuleDefinition) : void
    {
      //assert2(rd.Name.AsName !=	"expr");
      def extraFields = rd.ExtraFields;
      
      foreach (extraField in extraFields with i)
      {
        | InFieldDef(name, type) => baseAstTb.Define(<[ decl: public $(name.AsName : dyn) : $type { get; set; } ]>);
        | OutFieldDef(name, type, init) =>
          when (rd is RuleDefinition.ExtentionPoint)
            when (init is Some(x))
              Message.Error(x.Location, "A extention point can't have calculations.");
          baseAstTb.Define(<[ decl: public $(name.AsName : dyn) : $type { get; set; } ]>);
          
        | SetField(name, _) =>
          when (rd is RuleDefinition.ExtentionPoint)
            Message.Error(name.Location, "A extention point can't have calculations.");
      }
    }
    
    private DefineCalcExtraField(astTb : TypeBuilder, rd : RuleDefinition) : void
    {
      def extraFields = rd.ExtraFields;
      
      unless (extraFields.IsEmpty)
        astTb.UserData[typeof(ExtraField)] = extraFields;

      mutable cases : list[MatchCase] = [<[ case: | _ => System.Diagnostics.Debug.Assert(false, "Invalid property extra field " + fieldIndex); ]>];

      def addThis(expr) : PExpr
      {
        | <[ this.$(_ : name) ]>
        | <[ this.$(_ : name).$(_ : name) ]> => expr      
        | <[ $(n1 : name).$(n2 : name) ]> => <[ this.$(n1 : name).$(n2 : name) ]>
        | <[ $(n : name) ]> => <[ this.$(n : name) ]>
        | _ => Message.FatalError(expr.Location, "You can assign value only to 'in' extra fields of sabrules.")
      }
      
      foreach (extraField in extraFields with i)
      {
        | InFieldDef => ()
        | OutFieldDef(name, _, Some(expr)) => cases ::= <[ case: | $i => this.$(name.AsName : dyn) = $expr; ]>
        | OutFieldDef(_, _, _) => ()
        | SetField(name, expr)             => cases ::= <[ case: | $i => $(addThis(name)) = $expr; ]>
      }
        
          //_ = $(astTb.FullName);
      _ = astTb.Define(<[decl:
        public override CalcExtraField(fieldIndex : int) : void
        {
          match (fieldIndex)
          {
            ..$cases
          }
        } ]>);
    }

    static GetAllNestedTypes(tb : TypeBuilder) : Seq[TypeBuilder]
    {
      foreach (x is TypeBuilder in tb.GetNestedTypes())
      {
        yield x;
        
        foreach (y in GetAllNestedTypes(x))
          yield y;
      }
    }

    MakeExtraFieldsCalcs(_manager : ManagerClass) : void
    {
      assert2(false);
      
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);
        
        foreach (astTb in GetAllNestedTypes(tb))
        {
          def extraFields = astTb.UserData[typeof(ExtraField)] :> list[ExtraField];
        
          when (extraFields == null)
            continue;
        
          def methods = astTb.GetMethods();
        
          foreach (method is MethodBuilder when method.Name == "CalcExtraField" in methods)
          {
            match (method.Header.body)
            {
              | FunBody.Typed(tExpr) => 
                _ = tExpr;
                
              | _ => ()
            }
            
            def typer = Typer(method);
            typer.RunFullTyping();
          
            match (method.Header.body)
            {
              | FunBody.Typed(_tExpr) => ()//IO.File.AppendAllText(@"c:\p\ParserGenerator\N2\log.txt", $"CalcExtraField: $tExpr");
              | _ => assert2(false);
            }
          }
        }
      }
    }
  }
}
