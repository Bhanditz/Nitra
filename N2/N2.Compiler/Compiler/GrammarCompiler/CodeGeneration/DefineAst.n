using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;
using Nemerle.Imperative;

namespace N2
{
  internal partial class GrammarCompiler
  {
    [Memoize]
    public DefineAstType(rd : RuleDefinition) : TypeBuilder
    {
      assert(rd.IsAst);
      match (rd)
      {
        | RuleDefinition.ExtentionPoint(PType(basePType)) with baseType = BindFixedType(basePType)
        | RuleDefinition.ExtentionPoint(NType(baseType))
        | RuleDefinition.Simple(PType(basePType), _)      with baseType = BindFixedType(basePType)
        | RuleDefinition.Simple(NType(baseType), _)
        | RuleDefinition.ExtentionPrefix                  with baseType = GetBaseRuleNType(rd)
        | RuleDefinition.ExtentionPostfix                 with baseType = GetBaseRuleNType(rd) =>
          GrammarTB.DefineNestedType(<[decl:
            public partial class $(MakePublicRuleName(rd.Name) : dyn) : $(baseType : typed)
            {
              public this(location : Location, errors : list[ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>)

        | _ => assert(false)
      }
    }

    public DefineAst() : void
    {
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);
        
        match (GetAstFieldsTypes(rd))
        {
          | None with args = []
          | Some(args) =>
            tb.DefineNestedType(<[decl: 
              public partial new class Error : $(tb.GetMemType() : typed)
              {
                public this(location : Location, errors : list[ErrorInfo])
                {
                  base(location, errors)
                }
              }
            ]>).Compile();

            tb.DefineNestedType(<[decl: 
              public partial new class Splice : $(tb.GetMemType() : typed)
              {
                public this(location : Location, errors : list[ErrorInfo])
                {
                  base(location, errors)
                }
              }
            ]>).Compile();

            match (rd)
            {
              | RuleDefinition.ExtentionPoint => ()
              | RuleDefinition.ExtentionPostfix
              | RuleDefinition.ExtentionPrefix
              | RuleDefinition.Simple =>
                def astTb = tb.DefineNestedType(<[decl: 
                  public partial new class Ast : $(tb.GetMemType() : typed)
                  {
                  }
                ]>);
                
                def members = rd.GetNames(_tokenFieldNames).Map(_.AsName).Zip(args);

                DefineAstFields(astTb, members);
                DefineAstCtor(astTb, members);
                DefineAstGetErrors(astTb, members);
                when (rd.GetRule() is Some(rule))
                  DefineAstGetSpans(astTb, rule, rd);

                astTb.Compile();
              | RuleDefinition.ExternalRule
              | RuleDefinition.Regular => assert(false);
            }
          | _ => assert(false)
        }
        tb.Compile();
      }
    }

    private DefineAstFields(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def fields = members.Map((name, argType) => <[decl: public $(name : dyn) : $(RuleTypeToNType(argType) : typed); ]>);
      foreach (field in fields)
        astTb.Define(field);
    }

    private DefineAstCtor(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def locationName = <[ $(Nemerle.Compiler.Parsetree.Name("location") : name) ]>;
      def errorsName   = <[ $(Nemerle.Compiler.Parsetree.Name("error") : name) ]>;
      def args
        =  <[ $locationName : Location ]>
        :: <[ $errorsName : list[ErrorInfo] ]>
        :: members.Map((name, argType) => <[ $(name : dyn) : $(RuleTypeToNType(argType) : typed) ]>)
        ;
      _ = astTb.DefineWithSource(<[decl:
        public this(..$(args.Map(PParameter)))
        {
            base($locationName, $errorsName);
            { ..$(members.Map((name, _) => <[ this.$(name : dyn) = $(name : dyn); ]>)) }
        }
      ]>);
    }

    private DefineAstGetErrors(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def makeGetErrors(name, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType)
        {
          | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
          | Chars        => <[ () ]>
          | Tuple([_])   => <[ $(name : dyn).GetErrors(errors); ]>
          | PType        => <[ $(name : dyn).GetErrors(errors); ]>
          | NType        => <[ $(name : dyn).GetErrors(errors); ]>
          | List(type)   =>
            <[
              foreach (_item in $(name : dyn))
                $(makeGetErrors("_item", type));
            ]>

          | Option(type) =>
            <[
              match ($(name : dyn))
              {
                | Some(_item) => $(makeGetErrors("_item", type));
                | _ => ()
              }
            ]>

          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => $"_item$n");
            <[
              {
                def (..$(names.Map(name => <[ $(name : dyn) ]>))) = $(name : dyn);
                { ..$(names.Zip(types).Map(makeGetErrors)) };
              }
            ]>

          | Void         => assert(false)
        }
      }
      _ = astTb.DefineWithSource(<[decl:
        public override GetErrors(errors : System.Collections.Generic.List[ErrorInfo]) : void
        {
          base.GetErrors(errors);
          { ..$(members.Map(makeGetErrors)) }
        }
      ]>);
    }

    private DefineAstGetSpans(astTb : TypeBuilder, rule : Rule, rd : RuleDefinition) : void
    {
      def isEmpty(code : PExpr) : bool { code is <[ () ]> }
      def mapRules(rules : list[Rule], func) : PExpr
      {
        def exprs = rules.Map(func);
        
        if (exprs.ForAll(_ is <[ () ]>))
          <[ () ]>
        else if (exprs is [_])
          exprs.Head
        else
          <[ { ..$exprs } ]>
      }
      def nameMap = SCG.Dictionary();
      def rules = rule.GetSubRules();
      def fieldNames = rd.GetNames(_tokenFieldNames);
      assert(rules.Length == fieldNames.Length);
      foreach ((name, rule) in fieldNames.Zip(rules))
        nameMap[rule.Id] = name.AsName;
      def getName(rule) : Name
      {
        mutable name;
        def id = rule.Id;
        
        if (nameMap.TryGetValue(id, out name))
          <[ $(name : dyn) ]>.name//Name.NameInCurrentColor(nameMap[id], astTb.GlobalEnv)
        else
           Name.NameInCurrentColor($"_ast_$id", astTb.GlobalEnv)
      }
      def makeGetSpans(rule : Rule) : PExpr
      {
        def varName = 
          if (nameMap.ContainsKey(rule.Id))
            <[ this.$(getName(rule) : name) ]>
          else
            <[ $(getName(rule) : name) ]>;
        
        match (rule : Rule)
        {
          | PrefixCall(ruleName, _)
          | Call(ruleName, _) =>
            def rd = TypedGrammar.GetRule(ruleName);
            if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
            {
              if (rd is RuleDefinition.Regular)
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      spans.Add(N2.SpanInfo($varName, $(MakeSpanClassFieldName(spanClass.name) : dyn))) ]>
              else
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      $varName.GetSpans(spans, startPos, endPos) ]>
            }
            else
            {
              if (rd is RuleDefinition.Regular)
                <[ () ]> // we not need SpanClass.Default spans 
                //<[ when ($varName.IntersectsWith(startPos, endPos))
                //     spans.Add(N2.SpanInfo($varName, N2.SpanClass.Default)) ]>
              else
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      $varName.GetSpans(spans, startPos, endPos) ]>
            }

          | String(str) =>
            def spanClass = TypedGrammar.SpanClasses.Find(spanClass =>
            {
              match (spanClass.Match)
              {
                | Some(rr) => FSMMatch.MakeMatcher(ConvertRegularRuleToFsm(rr))(str)//TODO:Optimize
                | None => false;
              }
            });
            if (spanClass is Some(spanClass))
              <[  when ($varName.IntersectsWith(startPos, endPos))
                    spans.Add(N2.SpanInfo($varName, $(MakeSpanClassFieldName(spanClass.Name) : dyn))) ]>
            else
              <[ () ]> // we not need SpanClass.Default spans
              //<[  when ($varName.IntersectsWith(startPos, endPos))
              //      spans.Add(N2.SpanInfo($varName, N2.SpanClass.Default)) ]>

          | Sequence(rules) =>
            def rules = rules.Filter(rule => !(rule.Type is RuleType.Void));
            def names = rules.Map(getName).Map(name => <[ $(name : name)]>);
            def code  = mapRules(rules, makeGetSpans);
            
            match (names)
            {
              | [name] =>
                if (!isEmpty(code))
                  <[
                    {
                      def $name = $varName;
                      $code;
                    }
                  ]>
                else
                  <[ () ]>
                  
              | [] | null => assert(false)
              | names =>
                if (!isEmpty(code))
                  <[
                    {
                      def (..$names) = $varName;
                      $code;
                    }
                  ]>
                else
                  <[ () ]>
            }

          | Repeat(0, Some(1), subRule) =>
            def code = makeGetSpans(subRule);
            
            if (!isEmpty(code))
              <[
                match($varName)
                {
                  | Some($(getName(subRule) : name)) => $code
                  | _ => ()
                }
              ]>
            else
              <[ () ]>

          | Repeat(_, _, subRule) =>
            def code = makeGetSpans(subRule);
            
            if (!isEmpty(code))
              <[
                foreach ($(getName(subRule) : name) in $varName)
                  $code
              ]>
            else
              <[ () ]>

          | RepeatWithSeparator(_, _, rule, separator) =>
            def codeForRule             = makeGetSpans(rule);
            def codeForSeparator        = makeGetSpans(separator);
            def isCodeForRuleEmpty      = isEmpty(codeForRule);
            def isCodeForSeparatorEmpty = isEmpty(codeForSeparator);
            
            if (isCodeForRuleEmpty && isCodeForSeparatorEmpty)
              <[ () ]>
            else
            {
              def codeForRules =
                if (isCodeForSeparatorEmpty)
                  <[
                    foreach ($(getName(rule) : name) in $varName[0])
                      $codeForRule;
                  ]>
                else
                  <[ () ]>;
              def codeForSeparators =
                if (isCodeForRuleEmpty)
                  <[
                    foreach ($(getName(separator) : name) in $varName[1])
                      $codeForSeparator;
                  ]>
                else
                  <[ () ]>;
                  
              <[ $codeForRules; $codeForSeparators; ]>
            }
              
          | Scope(_, rule) =>
            def code = makeGetSpans(rule);
            
            if (!isEmpty(code))
              <[
                def $(getName(rule) : name) = $varName;
                $code;
              ]>
            else
              <[ () ]>

          | And | Not | Cut => assert(false);
        }
      }


      def selfCode = 
        if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
          <[ 
            def loc = this.Location.NToken;
            when (loc.IntersectsWith(startPos, endPos))
              spans.Add(N2.SpanInfo(loc, $(MakeSpanClassFieldName(spanClass.name) : dyn))) 
          ]>
        else
          <[ () ]>;
      def subRuleCode  = mapRules(rules, makeGetSpans);
      
      def bodyCode =
        if (isEmpty(selfCode) && isEmpty(subRuleCode))
          <[ _ = spans; _ = startPos; _ = endPos; ]>
        else
          <[ $selfCode; $subRuleCode; ]>;
      
      _ = astTb.DefineWithSource(<[decl:
        public override GetSpans(spans : System.Collections.Generic.List[N2.SpanInfo], startPos : int, endPos : int) : void
        {
          $bodyCode
        }
      ]>);
    }
  }
}
