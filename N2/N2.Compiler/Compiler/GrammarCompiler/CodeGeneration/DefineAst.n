using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    [Memoize]
    public DefineAstType(rd : RuleDefinition) : TypeBuilder
    {
      assert(rd.IsAst);
      match (rd)
      {
        | RuleDefinition.ExtentionPoint(PType(basePType)) with baseType = BindFixedType(basePType)
        | RuleDefinition.ExtentionPoint(NType(baseType))
        | RuleDefinition.Simple(PType(basePType), _, _)   with baseType = BindFixedType(basePType)
        | RuleDefinition.Simple(NType(baseType), _, _)
        | RuleDefinition.ExtentionPrefix                  with baseType = GetBaseRuleNType(rd)
        | RuleDefinition.ExtentionPostfix                 with baseType = GetBaseRuleNType(rd) =>
          def mods = NemerleModifiers.Abstract %| NemerleModifiers.Public %| NemerleModifiers.Partial;
          def attrsAndMods = AttributesAndModifiers(mods, []);
          
          Util.locate(rd.Name.Location,
          GrammarTB.DefineNestedType(<[decl:
            ..$attrsAndMods class $(MakePublicRuleName(rd.Name) : dyn) : $(baseType : typed)
            {
              public this(location : Location, errors : list[ErrorInfo])
              {
                base(location, errors)
              }
            }
          ]>))

        | _ => assert(false)
      }
    }

    private DefineErrorAst(rd : RuleDefinition, baseAstTb : TypeBuilder) : TypeBuilder
    {
      def errorTb = Util.locate(rd.Name.Location, 
        baseAstTb.DefineNestedType(<[decl: 
        public partial new class Error : $(baseAstTb.GetMemType() : typed)
        {
          public this(location : Location, errors : list[ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
      DefineErrorGetDump(errorTb, baseAstTb.FullName);
      errorTb
    }

    private DefineSpliceAst(rd : RuleDefinition, baseAstTb : TypeBuilder) : TypeBuilder
    {
      def spliceTb = Util.locate(rd.Name.Location,
        baseAstTb.DefineNestedType(<[decl: 
        public partial new class Splice : $(baseAstTb.GetMemType() : typed)
        {
          public this(location : Location, errors : list[ErrorInfo])
          {
            base(location, errors)
          }
        }
      ]>));
      DefineSpliceGetDump(spliceTb, baseAstTb.FullName);
      spliceTb
    }

    public DefineAst() : void
    {
      assert2(GrammarTB != null);
      
      foreach (rd when rd.IsAst in TypedGrammar.Rules)
      {
        def tb = DefineAstType(rd);

        def (errorTb, spliceTb) =
          if (rd is RuleDefinition.ExtentionPoint || rd is RuleDefinition.Simple)
            (DefineErrorAst(rd, tb), DefineSpliceAst(rd, tb))
          else
            (null, null);

        match (rd)
        {
          | RuleDefinition.ExtentionPoint => Util.locate(rd.Name.Location, DefineExtraFields(tb, null, errorTb, spliceTb, rd));
          | RuleDefinition.ExtentionPostfix
          | RuleDefinition.ExtentionPrefix
          | RuleDefinition.Simple =>
            def args = GetAstFieldsTypes(rd).WithDefault([]);

            def astTb = Util.locate(rd.Name.Location,
              tb.DefineNestedType(<[decl: 
              public partial new class Ast : $(tb.GetMemType() : typed)
              {
              }
            ]>));

            def names = rd.GetNames(_tokenFieldNames).Map(_.AsName);
            assert2(names.Length == args.Length);
            def members = names.Zip(args);

            DefineAstFields(astTb, members);
            DefineAstCtor(astTb, members);
            DefineAstGetErrors(astTb, members);
            when (rd.GetRule() is Some(Rule.Sequence(rules)))
              DefineToString(astTb, names, rules);
            DefineAstGetDump(astTb, tb.FullName, members);
            when (rd.GetRule() is Some(rule))
              DefineAstGetSpans(astTb, rule, rd);

            Util.locate(rd.Name.Location, DefineExtraFields(tb, astTb, errorTb, spliceTb, rd));

            astTb.Compile();

          | RuleDefinition.Marker
          | RuleDefinition.ExternalRule
          | RuleDefinition.Regular => assert(false);
        }

        when (errorTb != null)
          errorTb.Compile();
        when (spliceTb != null)
          spliceTb.Compile();
        tb.Compile();
      }
    }
    
    private DefineToString(astTb : TypeBuilder, names : list[string], rules : list[Rule]) : void
    {
      //assert2(astTb.FullName != "N2Parser.NamespaceDeclaration.Ast");
      def isNoNeedVar(rule : Rule) { rule.Type is RuleType.Void || rule is Rule.String }
      def isVoid(ruleType : RuleType)
      {
        | Void
        | Tuple(types) when types.ForAll(isVoid)
        | Option(type) when isVoid(type)         => true
        | _                                      => false
      }
      def zipWithNames(mutable names : list[string], rules : list[Rule]) : list[string * Rule]
      {
        def result = SCG.List();
        
        foreach (rule in rules)
        {
          def isVoid = isVoid(rule.Type);
          def name   = if (isVoid) "_" else names.Head;
          unless (isVoid)
            names = names.Tail;
          result.Add(name, rule);
        }
        
        result.NToList()
      }
      def members = zipWithNames(names, rules);
      def fieldToString(name : string, rule : Rule) : PExpr
      {
        def loop(expr : PExpr, rule : Rule) : PExpr
        {
          def result =
            match (rule)
            {
              | String(str)                                     => <[ _ = code.Append($str); ]>
              | And | Not                                       => <[ () ]>
              | Sequence(rules)                                 => 
                def members2 = rules.MapI((i, r) => if (isNoNeedVar(r)) (<[ _ ]>, r), else (<[ $($"_item$i" : dyn) ]>, r));
                def noNeedVars = members2.ForAll((_, r) => isNoNeedVar(r));
                def varNames = $[ n | (n, r) in members2, !(r.Type is RuleType.Void) ]; // make list of names for not void rules
                def lines = members2.Map(loop);
                match (varNames)
                {
                  | _ when noNeedVars
                  | []        => <[ { ..$lines } ]>
                  | [varName] => <[ { ..$(<[ def $varName      = $expr; ]> :: lines) } ]>
                  | _         => <[ { ..$(<[ def (..$varNames) = $expr; ]> :: lines) } ]>
                }
              
              | Call(name, _bp) when rule.Type is RuleType.Void =>
                def newLine() { <[ _ = code.AppendLine(); Indent(code, currentIndent); ]> }
                match (name.LastPartString)
                {
                  | "S"
                  | "s"   => <[ () ]> // TODO: add analysis of a space usefulness
                  | "nl"  => newLine()
                  | "inl" 
                  | "nli" => <[ currentIndent++; $(newLine()) ]>
                  | "d"   => <[ currentIndent--; Unindent(code, currentIndent); ]>
                  | "i"   => <[ currentIndent++; Indent(code, 1); ]>
                  | _     => <[ _ = code.Append(' '); ]>
                }

              | Call when rule.Type is RuleType.Chars           => <[ def tok = $expr; _ = code.Append(this.Location.Source.Text, tok.StartPos, tok.Length); ]>
              | Call | PrefixCall                               => <[ $expr.PrettyPrint(code, currentIndent, options); ]>
              | Repeat(_, _, rule) when isVoid(rule.Type)       => <[ _ = code.Append(' '); ]>
              | Repeat(0, Some(1), rule)                        => <[ when ($expr is Some(_x)) $(loop(<[ _x ]>, rule)) ]>
              | Repeat(_, _, rule)                              => <[ foreach (_elem in $expr) $(loop(<[ _elem ]>, rule)); ]>
              | RepeatWithSeparator(_, _, rule, separator, _)   => 
                if (separator.GetAllSubRules().ForAll(isNoNeedVar))
                  <[  def (elems, separators) = $expr;
                      assert2(elems.IsEmpty || elems.Length >= separators.Length);
                      def endIndex = separators.Length;
                      
                      foreach (elem in elems with i)
                      {
                        $(loop(<[ elem ]>, rule));
                    
                        when (endIndex != i)
                          $(loop(<[ separator ]>, separator));
                      } ]>
                else
                  <[  def (elems, separators) = $expr;
                      assert2(elems.IsEmpty || elems.Length >= separators.Length);
                      mutable separatorRest = separators;
                    
                      foreach (elem in elems)
                      {
                        $(loop(<[ elem ]>, rule));
                    
                        unless (separatorRest.IsEmpty)
                        {
                          def separator = separatorRest.Head;
                          $(loop(<[ separator ]>, separator));
                          separatorRest = separatorRest.Tail;
                        }
                      } ]>
            };
          
          result
        }

        loop(<[ this.$(name : dyn) ]>, rule);
      }

      def code = members.Map(fieldToString);
      def body = <[ { ..$code } ]>;
      _ = astTb.DefineWithSource(<[ decl: 
        public override PrettyPrint(code : System.Text.StringBuilder, mutable currentIndent : int, options : N2.ToStringOptions) : void
        {
          _ = $(astTb.FullName); // TODO: Remove at release!!!
          _ = currentIndent; _ = options; _ = currentIndent;
          $body
        } ]>);
    }

    private DefineAstFields(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def fields = members.Map((name, argType) => <[decl: public $(name : dyn) : $(RuleTypeToNType(argType) : typed); ]>);
      foreach (field in fields)
        astTb.Define(field);
    }

    private DefineAstCtor(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def locationName = <[ $(Nemerle.Compiler.Parsetree.Name("location") : name) ]>;
      def errorsName   = <[ $(Nemerle.Compiler.Parsetree.Name("error") : name) ]>;
      def args
        =  <[ $locationName : Location ]>
        :: <[ $errorsName : list[ErrorInfo] ]>
        :: members.Map((name, argType) => <[ $(name : dyn) : $(RuleTypeToNType(argType) : typed) ]>)
        ;
      _ = astTb.DefineWithSource(<[decl:
        public this(..$(args.Map(PParameter)))
        {
            base($locationName, $errorsName);
            { ..$(members.Map((name, _) => <[ this.$(name : dyn) = $(name : dyn); ]>)) }
        }
      ]>);
    }

    IsVoidDeep(type : RuleType) : bool
    {
      | Void => true
      | Option(t) | List(t) => IsVoidDeep(t)
      | Tuple(types) => types.ForAll(IsVoidDeep)
      | Chars | PType | NType => false
    }
    
    private DefineAstGetErrors(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def makeGetErrors(expr : PExpr, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType)
        {
          | _ when IsVoidDeep(type) => <[ () ]>
          | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
          | Chars        => <[ () ]>
          | PType        => <[ $expr.GetErrors(errors); ]>
          | NType        => <[ $expr.GetErrors(errors); ]>
          | List(type)   =>
            <[
              foreach (_item in $expr)
                $(makeGetErrors(<[ $("_item" : dyn) ]>, type));
            ]>

          | Option(type) =>
            <[
              match ($expr)
              {
                | Some(_item) => $(makeGetErrors(<[ $("_item" : dyn) ]>, type));
                | _ => ()
              }
            ]>

          | Tuple(types) when types.Count(ty => !(ty is RuleType.Void)) == 1 => <[ $expr.GetErrors(errors); ]>
          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => <[ $($"_item$n" : dyn) ]>);
            <[
              {
                def (..$names) = $expr;
                { ..$(names.Zip(types).Map(makeGetErrors)) };
              }
            ]>
          | Void => assert(false);
        }
      }
      _ = astTb.DefineWithSource(<[decl:
        public override GetErrors(errors : System.Collections.Generic.List[ErrorInfo]) : void
        {
          base.GetErrors(errors); 
          { ..$(members.Map((name, type) => makeGetErrors(<[ this.$(name : dyn) ]>, type))) }
        }
      ]>);
    }

    private DefineAstGetSpans(astTb : TypeBuilder, rule : Rule, rd : RuleDefinition) : void
    {
      def isEmpty(code : PExpr) : bool { code is <[ () ]> }
      def mapRules(rules : list[Rule], func) : PExpr
      {
        def exprs = rules.Map(func);
        
        if (exprs.ForAll(_ is <[ () ]>))
          <[ () ]>
        else if (exprs is [_])
          exprs.Head
        else
          <[ { ..$exprs } ]>
      }
      def nameMap = SCG.Dictionary();
      def rules = rule.GetSubRules();
      def fieldNames = rd.GetNames(_tokenFieldNames);
      assert(rules.Length == fieldNames.Length);
      foreach ((name, rule) in fieldNames.Zip(rules))
        nameMap[rule.Id] = name.AsName;
      def getName(rule) : Name
      {
        mutable name;
        def id = rule.Id;
        
        if (nameMap.TryGetValue(id, out name))
          <[ $(name : dyn) ]>.name//Name.NameInCurrentColor(nameMap[id], astTb.GlobalEnv)
        else
           Name.NameInCurrentColor($"_ast_$id", astTb.GlobalEnv)
      }
      def makeGetSpans(rule : Rule) : PExpr
      {
        def varName = 
          if (nameMap.ContainsKey(rule.Id))
            <[ this.$(getName(rule) : name) ]>
          else
            <[ $(getName(rule) : name) ]>;
        
        match (rule : Rule)
        {
          | PrefixCall(ruleName, _)
          | Call(ruleName, _) =>
            def rd = TypedGrammar.GetRule(ruleName);
            if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
            {
              if (rd is RuleDefinition.Regular)
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      spans.Add(N2.SpanInfo($varName, $(MakeSpanClassFieldName(spanClass.name) : dyn))) ]>
              else
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      $varName.GetSpans(spans, startPos, endPos) ]>
            }
            else
            {
              if (rd is RuleDefinition.Regular)
                <[ () ]> // we not need SpanClass.Default spans 
                //<[ when ($varName.IntersectsWith(startPos, endPos))
                //     spans.Add(N2.SpanInfo($varName, N2.SpanClass.Default)) ]>
              else
                <[  when ($varName.IntersectsWith(startPos, endPos))
                      $varName.GetSpans(spans, startPos, endPos) ]>
            }

          | String(str) =>
            def spanClass = TypedGrammar.SpanClasses.Find(spanClass =>
            {
              match (spanClass.Match)
              {
                | Some(rr) => FSMMatch.MakeMatcher(ConvertRegularRuleToFsm(TypedGrammar, rr))(str)//TODO:Optimize
                | None => false;
              }
            });
            if (spanClass is Some(spanClass))
              <[  when ($varName.IntersectsWith(startPos, endPos))
                    spans.Add(N2.SpanInfo($varName, $(MakeSpanClassFieldName(spanClass.Name) : dyn))) ]>
            else
              <[ () ]> // we not need SpanClass.Default spans
              //<[  when ($varName.IntersectsWith(startPos, endPos))
              //      spans.Add(N2.SpanInfo($varName, N2.SpanClass.Default)) ]>

          | Sequence(rules) =>
            def rules = rules.Filter(rule => !(rule.Type is RuleType.Void));
            def names = rules.Map(getName).Map(name => <[ $(name : name)]>);
            def code  = mapRules(rules, makeGetSpans);
            
            match (names)
            {
              | [name] =>
                if (!isEmpty(code))
                  <[
                    {
                      def $name = $varName;
                      $code;
                    }
                  ]>
                else
                  <[ () ]>
                  
              | [] | null => assert(false)
              | names =>
                if (!isEmpty(code))
                  <[
                    {
                      def (..$names) = $varName;
                      $code;
                    }
                  ]>
                else
                  <[ () ]>
            }

          | Repeat(0, Some(1), subRule) =>
            def code = makeGetSpans(subRule);
            
            if (!isEmpty(code))
              <[
                match($varName)
                {
                  | Some($(getName(subRule) : name)) => $code
                  | _ => ()
                }
              ]>
            else
              <[ () ]>

          | Repeat(_, _, subRule) =>
            def code = makeGetSpans(subRule);
            
            if (!isEmpty(code))
              <[
                foreach ($(getName(subRule) : name) in $varName)
                  $code
              ]>
            else
              <[ () ]>

          | RepeatWithSeparator(_, _, rule, separator, _) =>
            def codeForRule             = makeGetSpans(rule);
            def codeForSeparator        = makeGetSpans(separator);
            def isCodeForRuleEmpty      = isEmpty(codeForRule);
            def isCodeForSeparatorEmpty = isEmpty(codeForSeparator);
            
            if (isCodeForRuleEmpty && isCodeForSeparatorEmpty)
              <[ () ]>
            else
            {
              def codeForRules =
                if (isCodeForSeparatorEmpty)
                  <[
                    foreach ($(getName(rule) : name) in $varName[0])
                      $codeForRule;
                  ]>
                else
                  <[ () ]>;
              def codeForSeparators =
                if (isCodeForRuleEmpty)
                  <[
                    foreach ($(getName(separator) : name) in $varName[1])
                      $codeForSeparator;
                  ]>
                else
                  <[ () ]>;
                  
              <[ $codeForRules; $codeForSeparators; ]>
            }
              
          | And | Not => assert(false);
        }
      }
      def selfCode = 
        if (rd.Attributes.Find(_ is RuleAttribute.SpanClass) is Some(RuleAttribute.SpanClass as spanClass))
          <[ 
            def loc = this.Location.NToken;
            when (loc.IntersectsWith(startPos, endPos))
              spans.Add(N2.SpanInfo(loc, $(MakeSpanClassFieldName(spanClass.name) : dyn)))
          ]>
        else
          <[ () ]>;
      def subRuleCode  = mapRules(rules, makeGetSpans);

      _ = astTb.DefineWithSource(<[decl:
        public override GetSpans(spans : System.Collections.Generic.List[N2.SpanInfo], startPos : int, endPos : int) : void
        {
          ignore(spans, startPos, endPos);

          when (this.Comments != null)
          {
            assert2(false);
            foreach (comment in this.Comments)
              when (comment.IntersectsWith(startPos, endPos))
                spans.Add(N2.SpanInfo(comment, $(MakeSpanClassFieldName("Comment") : dyn)));
          }
         
          $selfCode;
          $subRuleCode
        }
      ]>);
    }

    private DefineAstGetDump(astTb : TypeBuilder, astFullName : string, members : list[string * RuleType]) : void
    {
      def makeDump(expr : PExpr, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType)
        {
          | _ when IsVoidDeep(type) => <[ () ]>
          | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
          | Chars        => <[ N2.Internal.AstDump.Token(GetText($expr)) ]>
          | PType        => <[ $expr.GetDump(); ]>
          | NType        => <[ $expr.GetDump(); ]>
          | List(type)   =>
            <[
              N2.Internal.AstDump.List($expr.Map(fun(_item)
              {
                $(makeDump(<[ $("_item" : dyn) ]>, type))
              }))
            ]>

          | Option(Void) => <[ () ]>
          | Option(type) =>
            <[
              match ($expr)
              {
                | Some(_item) => N2.Internal.AstDump.Option(Some($(makeDump(<[ $("_item" : dyn) ]>, type))));
                | _ => N2.Internal.AstDump.Option(None())
              }
            ]>

          | Tuple(types) when types.Count(ty => !(ty is RuleType.Void)) == 1 => <[ $expr.GetDump(); ]>
          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => <[ $($"_item$n" : dyn) ]>);
            <[
              {
                def (..$names) = $expr;
                N2.Internal.AstDump.Tuple([..$(names.Zip(types).Map(makeDump))]);
              }
            ]>

          | Void => assert(false);
        }
      }
      def makeFieldDump(name, type) : PExpr
      {
        <[ N2.Internal.AstDump.Field($(name : string), $(makeDump(<[ this.$(name : dyn) ]>, type))) ]>
      }
      _ = astTb.DefineWithSource(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Ast($(astFullName : string), [..$(members.Map(makeFieldDump))])
        }
      ]>);
    }

    private DefineErrorGetDump(errorTb : TypeBuilder, astFullName : string) : void
    {
      _ = errorTb.DefineWithSource(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Error($(astFullName : string), GetText())
        }
      ]>);
    }

    private DefineSpliceGetDump(spliceTb : TypeBuilder, astFullName : string) : void
    {
      _ = spliceTb.DefineWithSource(<[decl:
        public override GetDump() : N2.Internal.AstDump
        {
          N2.Internal.AstDump.Splice($(astFullName : string))
        }
      ]>);
    }

    private GetExtraFieldDefinition(baseRule : RuleDefinition, fieldName : NameRef) : ValueOption[ExtraField.Abstract]
    {
      // TODO: Этот код будет работать только для RuleDefinition-ов спарсеных с кода. Надо обеспечить загрузку ExtraFields из внешних сборок.
      foreach (field in baseRule.ExtraFields)
      {
        | Abstract(name, _, _) as x           when name == fieldName => return VSome(x);
        | Def     (name, parameters, type, _) when name == fieldName => return VSome(ExtraField.Abstract(field.Location, name, parameters, type));
        | _ => ()
      }
      
      VNone()
    }
    
    private DefineExtraFields(baseAstTb : TypeBuilder, astTb : TypeBuilder, errorTb : TypeBuilder, spliceTb : TypeBuilder, rd : RuleDefinition) : void
    {
      //assert2(rd.Name.AsName !=	"number");
      def extraFields = rd.ExtraFields;
      def names = SCG.HashSet();
      def definedErrorHendlers = SCG.HashSet();
      
      foreach (field in extraFields with i)
      {
        | Abstract (name, parameters, type) with body = null
        | DefPrivate(name, parameters, type, body)  
        | Def(name, parameters, type, body) => 
          def n          = <[ $(name.AsName : dyn) ]>.name;
          
          unless (names.Add(name))
          {
            Message.Error(name.Location, $"The rule '$(rd.Name)' already contains a definition for '$name'.");
            continue;
          }
          
          unless (rd is RuleDefinition.ExtentionPoint || rd is RuleDefinition.Simple || field is ExtraField.DefPrivate)
          {
            Message.Error(name.Location, "A public extra field must be defined in a extention point rule or a simple rule only.");
            continue;
          }
          
          def attrs = <[ N2.Runtime.ExtraFieldAttribute ]>;

          if (rd is RuleDefinition.Simple)
          {
            baseAstTb.Define(<[ decl: [$attrs] public abstract $(n : name)(..$parameters) : $type; ]>);
            astTb.Define(<[     decl: [$attrs] public override $(n : name)(..$parameters) : $type $body ]>);
          }
          else if (body == null)
            baseAstTb.Define(<[ decl: [$attrs] public abstract $(n : name)(..$parameters) : $type; ]>);
          else
            baseAstTb.Define(<[ decl: [$attrs] public virtual  $(n : name)(..$parameters) : $type $body ]>);

        | OnError(name, body) | Override(name, body) =>
          match (rd)
          {
            | RuleDefinition.ExtentionPostfix(baseRuleName, _, _, _) | RuleDefinition.ExtentionPrefix(baseRuleName, _, _) =>
              def extPoint = TypedGrammar.GetRule(baseRuleName);
              // TODO: Добавить Grammar.Contains и сделать проверку наличия правила.
              assert2(extPoint is RuleDefinition.ExtentionPoint || extPoint is RuleDefinition.ExternalRule);
              def baseFieldOpt = GetExtraFieldDefinition(extPoint, name);
              when (baseFieldOpt.IsNone)
              {
                Message.Error(name.Location, $"No '$name' extra field to override.");
                continue;
              }
              def baseField = baseFieldOpt.Value;
              
              def n          = <[ $(name.AsName : dyn) ]>.name;
              def parameters = baseField.Params;
              def type       = baseField.Type;
              
              when (field is ExtraField.OnError)
                unless (definedErrorHendlers.Add(name))
                  Message.Error(name.Location, "Redefinition of error hendler.");
                
              def tb = if (field is ExtraField.OnError) errorTb else astTb;
              tb.Define(<[ decl: public override $(n : name)(..$parameters) : $type $body ]>);
              
            | _ => 
              if (field is ExtraField.OnError)
                Message.Error(name.Location, "A error hendler for a extra field can be defined only in extending rules.");
              else
                Message.Error(name.Location, "A extra field can be overridden only in extending rules.");
              continue;
          }
      }
      
      match (rd)
      {
        | RuleDefinition.ExtentionPoint
        | RuleDefinition.Simple =>
          foreach (field in rd.ExtraFields)
          {
            | Abstract (name, parameters, type)
            | Def(name, parameters, type, _) when !definedErrorHendlers.Contains(name) =>
              def n         = <[ $(name.AsName : dyn) ]>.name;
              def ignores   = parameters.Map(p => <[ _ = $(p.ReferencingExpr); ]>);
              
              when (errorTb != null)
              {
                def msg = $"Parse error handling for '$name' extra field of '$(rd.Name)' rule is not implemented.";
                def errorBody = <[ 
                  { ..$ignores } 
                  throw System.NotImplementedException($msg); ]>;
                errorTb.Define(<[ decl: public override $(n : name)(..$parameters) : $type $errorBody ]>);
              }
              
              when (spliceTb != null)
              {
                def spliceBody = <[ 
                  { ..$ignores } 
                  assert2(false, "This method should not be invoked."); assert(false); ]>;
                spliceTb.Define(<[ decl: public override $(n : name)(..$parameters) : $type $spliceBody ]>);
              }
                
            | _ => ()
          }
          
        | _ => ()
      }
    }
  }
}
