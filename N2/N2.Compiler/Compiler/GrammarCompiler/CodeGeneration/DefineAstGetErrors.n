using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    private DefineAstGetErrors(astTb : TypeBuilder, members : list[string * RuleType]) : void
    {
      def makeGetErrors(expr : PExpr, type) : PExpr // TODO: Оптимизировать списоки токенов.
      {
        match (type : RuleType)
        {
          | _ when type.IsVoidDeep() => <[ () ]>
          | _ when RuleTypeToNType(type).TryUnify(_ntokenType)
          | Chars        => <[ () ]>
          | PType        => <[ $expr.GetErrors(errors); ]>
          | NType        => <[ $expr.GetErrors(errors); ]>
          | List(type)   =>
            <[
              foreach (_item in $expr)
                $(makeGetErrors(<[ $("_item" : dyn) ]>, type));
            ]>

          | Option(type) =>
            <[
              match ($expr)
              {
                | Some(_item) => $(makeGetErrors(<[ $("_item" : dyn) ]>, type));
                | _ => ()
              }
            ]>

          | Tuple(types) when types.Count(ty => !(ty is RuleType.Void)) == 1 => <[ $expr.GetErrors(errors); ]>
          | Tuple(types) =>
            def types = types.Filter(ty => !(ty is RuleType.Void));
            def fields = types.Length;
            def names = $[0..fields - 1].Map(n => <[ $($"_item$n" : dyn) ]>);
            <[
              {
                def (..$names) = $expr;
                { ..$(names.Zip(types).Map(makeGetErrors)) };
              }
            ]>
          | Void => assert(false);
        }
      }
      _ = astTb.DefineWithSource(<[decl:
        public override GetErrors(errors : System.Collections.Generic.List[ErrorInfo]) : void
        {
          base.GetErrors(errors); 
          { ..$(members.Map((name, type) => makeGetErrors(<[ this.$(name : dyn) ]>, type))) }
        }
      ]>);
    }
  }
}
