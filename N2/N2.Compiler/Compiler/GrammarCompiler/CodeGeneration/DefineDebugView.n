using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using N2.Model;
using N2.Compiler;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public DefineDebugView(rd : RuleDefinition, descriptorTB : TypeBuilder) : void
    {
      def ruleCompiler = _ruleCompilers[rd];
      def makeFieldViews()
      {
        def makeHeaderSetter(field)
        {
          def ofs = field.OffsetInStruct;
          <[ debugAst[index + $ofs] = N2.Debug.DebugViewHeader(parser, index + $ofs) ]>
        }
        def makeSizeSetter(field)
        {
          def ofs = field.OffsetInStruct;
          <[ debugAst[index + $ofs] = N2.Debug.DebugViewSize(parser, index + $ofs) ]>
        }
        def makeAstSetter(field)
        {
          def make(ofs, rd)
          {
            <[ debugAst[index + $ofs] = N2.Debug.DebugViewAstRef(parser, index + $ofs, $(GetStaticDescriptorRef(rd))) ]>
          }
          match (field.RuleField)
          {
            | RuleField.ExtentionPoint as ruleField => make(field.OffsetInStruct, ruleField.ruleDefinition)
            | RuleField.ExternalAst    as ruleField => make(field.OffsetInStruct, ruleField.ruleDefinition)
            | RuleField.Void           as ruleField => make(field.OffsetInStruct, ruleField.ruleDefinition)
            | _ => <[ () ]>
          }
        }
        def astStruct = ruleCompiler.RootField.astStruct;
        def headerSetters = astStruct.HeaderFields.Map(makeHeaderSetter);
        def sizeSetters = astStruct.SizeFields.Map(makeSizeSetter);
        def astSetters = astStruct.AstFields.Map(makeAstSetter);
        <[ { ..$headerSetters } { ..$sizeSetters } { ..$astSetters } ]>;
      }
      def setters = match (rd)
      {
        | ExtentionPrefix | ExtentionPostfix =>
          def terminatorOffset = ruleCompiler.RootField.astStruct.TerminatorOffset;
          <[
            debugAst[index + $terminatorOffset] = N2.Debug.DebugViewTerminator(parser, index + $terminatorOffset);
            $(makeFieldViews());
          ]>

        | Simple => makeFieldViews()

        | _ => <[ {} ]>
      }
      _ = descriptorTB.DefineWithSource(<[decl:
        public override FillDebugAst(parser : N2.Debug.DebugParser, index : int, debugAst : array[object]) : void
        {
          $setters;
          debugAst[index] = N2.Debug.DebugViewAstDef(parser, index, $(GetStaticDescriptorRef(rd)));
        }
      ]>);
    }
  }
}
