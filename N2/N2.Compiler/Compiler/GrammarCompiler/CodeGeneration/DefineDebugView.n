using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using N2.Model;
using N2.Compiler;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public DefineDebugView(rd : RuleDefinition, descriptorTB : TypeBuilder) : void
    {
      def ruleCompiler = _ruleCompilers[rd];
      def makeFieldViews(astStruct)
      {
        def makeHeaderSetter(field) { <[ debugAst[index + $(field.Offset)] = N2.Debug.DebugViewHeader(parser, index + $(field.Offset)) ]> }
        def makeSizeSetter(field)
        {
          def ofs = astStruct.SizesOffset + field.SizeOffset;
          <[ debugAst[index + $ofs] = N2.Debug.DebugViewSize(parser, index + $ofs) ]>
        }
        def makeAstSetter(field)
        {
          def ofs = astStruct.AstOffset + field.AstOffset;
          def makeAstRef(rd)
          {
            <[ debugAst[index + $ofs] = N2.Debug.DebugViewAstRef(parser, index + $ofs, $(GetStaticDescriptorRef(rd))) ]>
          }
          match (field.Field)
          {
            | RuleField.ExtentionPoint as ruleField => makeAstRef(ruleField.ruleDefinition)
            | RuleField.ExternalAst    as ruleField => makeAstRef(ruleField.ruleDefinition)
            | RuleField.Void           as ruleField => makeAstRef(ruleField.ruleDefinition)
            | RuleField.Option         as ruleField =>
              <[
                debugAst[index + $ofs] = N2.Debug.DebugViewInternalRef(parser, index + $ofs, "Option", $(ruleField.astStruct.AstSize));
              ]>

            | RuleField.List           as ruleField =>
              def owner = ruleField.NextRef.Owner;
              def loop = if (!object.ReferenceEquals(owner, astStruct))
              {
                <[
                  def loop(index)
                  {
                    when (parser.parser.ast[index] > 0)
                    {
                      def index = parser.parser.ast[index];
                      $(makeFieldViews(owner));
                      loop(index + $(owner.AstOffset + ruleField.NextRef.AstOffset))
                    }
                  }
                  loop(index + $ofs)
                ]>
              }
              else
                <[ {} ]>;
              <[
                debugAst[index + $ofs] = N2.Debug.DebugViewInternalRef(parser, index + $ofs, "List", $(owner.AstSize));
                $loop
              ]>

            | RuleField.List2          as ruleField =>
              def ruleOwner      = ruleField.NextRuleRef.Owner;
              def separatorOwner = ruleField.NextSeparatorRef.Owner;
              def loop = if (!(object.ReferenceEquals(ruleOwner, astStruct) || object.ReferenceEquals(separatorOwner, astStruct)))
              {
                <[
                  def loopRule(index)
                  {
                    when (parser.parser.ast[index] > 0)
                    {
                      def index = parser.parser.ast[index];
                      $(makeFieldViews(ruleOwner));
                      loopSeparator(index + $(ruleOwner.AstOffset + ruleField.NextRuleRef.AstOffset))
                    }
                  }
                  and loopSeparator(index)
                  {
                    when (parser.parser.ast[index] > 0)
                    {
                      def index = parser.parser.ast[index];
                      $(makeFieldViews(separatorOwner));
                      loopRule(index + $(separatorOwner.AstOffset + ruleField.NextSeparatorRef.AstOffset))
                    }
                  }
                  loopRule(index + $ofs)
                ]>
              }
              else
                <[ {} ]>;
              <[
                debugAst[index + $ofs] = N2.Debug.DebugViewInternalRef(parser, index + $ofs, "List2", $(ruleOwner.AstSize));
                $loop
              ]>
            | _ => <[ _ = $(field?.Field?.GetType()?.Name ?? "null?") ]>
          }
        }
        def astStruct = astStruct;
        def headerSetters = astStruct.HeaderFields.Map(makeHeaderSetter);
        def sizeSetters   = astStruct.SizeFields.Map(makeSizeSetter);
        def astSetters    = astStruct.AstFields.Map(makeAstSetter);
        <[ { ..$headerSetters } { ..$astSetters } { ..$sizeSetters } ]>;
      }
      def setters = match (rd)
      {
        | ExtentionPrefix | ExtentionPostfix =>
          def terminatorOffset = ruleCompiler.RootField.astStruct.TerminatorOffset;
          <[
            debugAst[index + $terminatorOffset] = N2.Debug.DebugViewTerminator(parser, index + $terminatorOffset);
            $(makeFieldViews(ruleCompiler.RootField.astStruct));
          ]>

        | Simple => makeFieldViews(ruleCompiler.RootField.astStruct)
        | ExtentionPoint => makeFieldViews(ExtensibleAstStruct(ruleCompiler, rd))

        | _ => <[ {} ]>
      }
      _ = descriptorTB.DefineWithSource(<[decl:
        public override FillDebugAst(parser : N2.Debug.DebugParser, index : int, debugAst : array[object]) : void
        {
          $setters;
          debugAst[index] = N2.Debug.DebugViewAstDef(parser, index, $(GetStaticDescriptorRef(rd)));
        }
      ]>);
    }
  }
}
