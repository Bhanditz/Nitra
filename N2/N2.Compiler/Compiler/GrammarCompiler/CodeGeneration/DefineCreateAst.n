using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using N2.Internal;
using N2.Model;
using N2.Compiler;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public DefineCreateAst(rd : RuleDefinition, descriptorTB : TypeBuilder) : void
    {
      def rootAstMaker(arguments : list[PExpr]) : PExpr
      {
        def arguments = <[ N2.Location(source, pos, curPos) ]> :: <[ [] ]> :: arguments;
        <[ $( PExpr.FromQualifiedIdentifier(Manager, DefineAstType(rd).FullName)).Ast(..$arguments) ]>
      }
      def internalAstMaker(_ : list[PExpr]) : PExpr
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
      def makeReader(structField : AstStruct.StructField, astPointer : AstPointer) : PExpr
      {
        match(structField.Field)
        {
          | RuleField.TokenString
          | RuleField.TokenCall =>
            <[ N2.NToken(curPos, curPos + curLength) ]>

          | RuleField.ExternalAst(ruleDefinition = rd) =>
            <[
              $(GetDescriptorClassRef(rd))
                .StaticCreateAst(source, parserHost, ast, ast[$(astPointer.AstOffset(structField))], curPos)
            ]>

          | RuleField.ExtentionPoint(ruleDefinition = rd) =>
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              parserHost.GetRuleDescriptorById(ast[astIndex])
                .CreateAst(source, parserHost, ast, astIndex, curPos)
                :> $(GetRuleNType(rd) : typed)
            ]>

          | RuleField.List(astStruct = itemStruct, NextRef = nextRef) =>
            def itemPointer   = AstPointer(itemStruct, "astIndex");
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              if (astIndex > 0)
              {
                def astBuffer = System.Collections.Generic.List(16);
                def loop(astIndex)
                {
                  astBuffer.Add($(makeAst(itemStruct, itemPointer, internalAstMaker)));
                  def astIndex = ast[$(itemPointer.AstOffset(nextRef))];
                  when (astIndex > 0)
                    loop(astIndex);
                }
                loop(astIndex);
                Nemerle.Collections.NList.ToList(astBuffer)
              }
              else []
            ]>

          | RuleField.List2(astRuleStruct = itemStruct, astSeparatorStruct = separatorStruct, NextRuleRef = nextItemRef, NextSeparatorRef = nextSeparatorRef) =>
            def itemPointer = AstPointer(itemStruct, "astIndex");
            def separatorPointer = AstPointer(separatorStruct, "separatorIndex");
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              if (astIndex > 0)
              {
                def astBuffer = System.Collections.Generic.List(16);
                def separatorBuffer = System.Collections.Generic.List(16);
                def loop(astIndex)
                {
                  astBuffer.Add($(makeAst(itemStruct, itemPointer, internalAstMaker)));
                  def separatorIndex = ast[$(itemPointer.AstOffset(nextItemRef))];
                  when (separatorIndex > 0)
                  {
                    def nextAstIndex = ast[$(separatorPointer.AstOffset(nextSeparatorRef))];
                    when (nextAstIndex > 0)
                    {
                      separatorBuffer.Add($(makeAst(separatorStruct, separatorPointer, internalAstMaker)));
                      loop(nextAstIndex);
                    }
                  }
                }
                loop(astIndex);
                (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer))
              }
              else ([], [])
            ]>

          | RuleField.Option(astStruct = valueAstStruct) =>
            <[
              def astIndex = ast[$(astPointer.AstOffset(structField))];
              if (astIndex > 0)
                Some($(makeAst(valueAstStruct, AstPointer(valueAstStruct, "astIndex"), internalAstMaker)))
              else
                None()
            ]>

          | _ => assert(false)
        }
      }
      and makeAst(astStruct : AstStruct, astPointer : AstPointer, maker : list[PExpr] -> PExpr) : PExpr
      {
        def statements = SCG.List();
        def arguments = SCG.List();
        def visitStructField(structField : AstStruct.StructField, isPrefixRef : bool) : void
        {
          def getLengthExpr()
          {
            if(isPrefixRef)
              <[
                curLength =
                {
                  def astIndex = ast[$(astPointer.AstOffset(structField))];
                  parserHost.GetRuleDescriptorById(ast[astIndex]).GetAstLength(parserHost, ast, astIndex)
                }
              ]>
            else
              <[ curLength = ast[$(astPointer.SizeOffset(structField))] ]>
          }
          match (structField.Field)
          {
            | RuleField.Ast
            | RuleField.Predicate => ()
            | RuleField.Void =>
              statements.Add(getLengthExpr());
              statements.Add(<[ curPos += curLength ]>);

            | RuleField.List   with incrementPos = false
            | RuleField.List2  with incrementPos = false
            | RuleField.Option with incrementPos = false
            | _                with incrementPos = true =>
              def varName = Util.tmpname("ast");
              statements.Add(getLengthExpr());
              statements.Add(<[ def $(varName : usesite) = $(makeReader(structField, astPointer)) ]>);
              arguments.Add(<[ $(varName : usesite) ]>);
              when (incrementPos)
                statements.Add(<[ curPos += curLength ]>);
          }
        }
        when (astStruct is PostfixAstStruct as astStruct)
          visitStructField(astStruct.PrefixRef, true);
        foreach (sizeField in astStruct.SizeFields)
          visitStructField(sizeField, false);
        statements.Add(maker(arguments.ToNList()));
        <[ { ..$(statements.ToNList()) } ]>
      }
      match (rd)
      {
        | Simple           when rd.IsAst =>
          def ruleCompiler = _ruleCompilers[rd];
          def astStruct = ruleCompiler.RootField.astStruct;
          def astPointer = AstPointer(astStruct, "index");
          _ = descriptorTB.DefineWithSource(<[decl:
            public static StaticCreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : $(GetRuleNType(rd) : typed)
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              mutable curPos = pos;
              mutable curLength;
              ignore(source, parserHost, ast, index, curPos, curLength);
              $(makeAst(astStruct, astPointer, rootAstMaker))
            }
          ]>);
          _ = descriptorTB.DefineWithSource(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              StaticCreateAst(source, parserHost, ast, index, pos)
            }
          ]>);

        | ExtentionPrefix  when rd.IsAst
        | ExtentionPostfix when rd.IsAst =>
          def ruleCompiler = _ruleCompilers[rd];
          def astStruct = ruleCompiler.RootField.astStruct;
          def astPointer = AstPointer(astStruct, "index");
          _ = descriptorTB.DefineWithSource(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              mutable curPos = pos;
              mutable curLength;
              ignore(source, parserHost, ast, index, curPos, curLength);
              $(makeAst(astStruct, astPointer, rootAstMaker))
            }
          ]>);

        | ExtentionPoint when rd.IsAst =>
          def ruleCompiler = _ruleCompilers[rd];
          def astStruct = ExtensibleAstStruct(ruleCompiler, rd);
          def astPointer = AstPointer(astStruct, "index");
          _ = descriptorTB.DefineWithSource(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              assert(ast[$(astPointer.HeaderOffset(astStruct.StateRef))] == -1);
              def astIndex = ast[$(astPointer.AstOffset(astStruct.AstRef))];
              parserHost.GetRuleDescriptorById(ast[astIndex]).CreateAst(source, parserHost, ast, astIndex, pos)
            }
          ]>);

        | _ =>
          _ = descriptorTB.DefineWithSource(<[decl:
            public override CreateAst(source : N2.SourceSnapshot, parserHost : N2.ParserHost, ast : array[int], index : int, pos : int) : N2.Ast
            {
              ignore(source, parserHost, ast, index, pos);
              throw System.NotImplementedException();
            }
          ]>);
      }
    }
  }
}
