using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;

namespace N2
{
  internal partial class GrammarCompiler
  {
    private DefineSaveState() : void
    {
      def makeCode()
      {
        def extentionPoints = TypedGrammar.Rules.MapFiltered(_ is RuleDefinition.ExtentionPoint, _ :> RuleDefinition.ExtentionPoint);
        def names = extentionPoints
          .Map(extentionPoint =>
            {
              def names = DefineExtensionPointMemoizeNames(extentionPoint);
              def returnType = GetRuleNType(extentionPoint);
              [(names.PrefixRules, <[ array[ExtensionPrefixBase[$(returnType : typed)]] ]>), (names.PostfixRules, <[ array[ExtensionPostfixBase[$(returnType : typed)]] ]>)];
            })
          .Flatten();

        foreach ((name, type) in names)
          _ = GrammarStateTB.DefineWithSource(<[decl: private $(name : dyn) : $type; ]>);
        
        (names.Map((name, _) => <[ this.$(name : dyn) = Grammar.$(name : dyn) ]>),
        names.Map((name, _) => <[ Grammar.$(name : dyn) = this.$(name : dyn) ]>))
      }
      
      def (saveRules, loadRules) = if (Manager.IsIntelliSenseMode) ([], []) else makeCode();

      _ = GrammarStateTB.DefineWithSource(
        <[decl:
          public this(grammar : $(GrammarImplTB.GetMemType() : typed))
          {
            Grammar = grammar;
            { ..$saveRules }
          }
        ]>);

      _ = GrammarStateTB.DefineWithSource(
        <[decl:
          public LoadThisState() : void
          {
            ..$loadRules
          }
        ]>);

      DefineImplementation(
        <[decl:
          public SaveState() : N2.Internal.IGrammarState
          {
            GrammarStateImpl(this)//TODO: $(GrammarStateTB.GetMemType() : typed)(this)
          }
        ]>);
    }
  }
}
