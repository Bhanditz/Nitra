using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using N2.Model;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

using N2.Internal;

namespace N2
{
  internal partial class GrammarCompiler
  {
    public GrammarTB               : TypeBuilder;
    public GrammarImplTB           : TypeBuilder;
    public GrammarDescriptorImplTB : TypeBuilder;

    public Manager : ManagerClass;
    public Env : GlobalEnv;

    private _isDebug               : bool;
    private _emitDebugSources      : bool = true;//TODO:Fixme
    private _extraFieldAttributeTypeInfo : TypeInfo;

    public AllRules : bool { get; private set }
    public SyntaxModuleName   : NameRef { get }
    public ParsedGrammar      : Grammar { get; private set }
    public WhitespacedGrammar : Grammar { get; private set }
    public TypedGrammar       : Grammar { get; private set }

    private _astType : FixedType;
    private _ntokenType : FixedType;

    private mutable _tokenFieldNames : Map[string, NameRef];

    public this(manager : ManagerClass, env : GlobalEnv, tb : TypeBuilder, syntaxModuleName : NameRef, parsedGrammar : Grammar)
    {
      when (!(tb.Attributes %&& NemerleModifiers.Abstract))
        Message.FatalError(tb.NameLocation, "Class must be abstract.");

      SyntaxModuleName        = syntaxModuleName;
      GrammarTB               = tb;
      GrammarImplTB           = GrammarTB.DefineNestedType(MakeGrammarImpl());
      GrammarDescriptorImplTB = GrammarImplTB.DefineNestedType(MakeGrammarDescriptorImpl());

      Manager                      = manager;
      Env                          = env;
      _isDebug                     = manager.Options.IsConstantDefined("DEBUG");
      ParsedGrammar                = parsedGrammar;
      _astType                     = FixedType.Class(manager.LookupTypeInfo("N2.Ast", 0), []);
      _ntokenType                  = FixedType.Class(manager.LookupTypeInfo("N2.NToken", 0), []);
      _extraFieldAttributeTypeInfo = manager.Lookup("N2.Runtime.ExtraFieldAttribute", 0);

      Manager.ExecBeforeAddMembers(_ =>
      {
        DoTyping();
        DefineSpanClasses();
        DefineKeywordRegexes();
        DefineAst();
      });

      Grammars.AddGrammarCompiler(Manager, this);
    }

    public IsDebug   : bool { get { _isDebug } }
    public IsRelease : bool { get { !_isDebug } }

    public Optimization : bool { get { !_isDebug } }
  }
}
