using N2.Model;
using N2.Typing;

using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = GrammarParser2;
using N = Nemerle.Compiler;
using SCG = System.Collections.Generic;

namespace N2
{
  /// <summary>
  /// Description of Util.
  /// </summary>
  public module Util
  {
    public Once[T](this source : IEnumerable[Ast]) : option[T]
      where T: Ast
    {
      def source2 = source.OfType.[T]().NToList();
      
      match (source2)
      {
        [x]           => Some(x)
        | null | []   => None()
        | x :: y :: _ => 
          N.Message.Error(y.Location.ToNemerleLocation(), 
            "Acceptably only one entry.");
          Some(x)
      }
    }

    //TODO: fix the bug in the compiler
    //public Once[T](this source : list[N2.Ast]) : ValueOption[T]
    //  where T: N2.Ast
    //{
    //  def source2 = source.OfType.[T]();
    // 
    //  match (source2)
    //  {
    //    [x]           => VSome(x)
    //    | null | []   => VNone()
    //    | x :: y :: _ => 
    //      Nemerle.Compiler.Message.Error((y : N2.Ast).Location.ToNemerleLocation(), 
    //      "Acceptably only one entry."); VSome(x)
    //  }
    //}
    
    public Flatten[T](this src : Seq[option[T]]) : list[T]
    {
      def dst = List();
      foreach (Some(item) in src)
        dst.Add(item);
      dst.NToList();
    }

    public Flatten[T](this src : list[option[T]]) : list[T]
    {
      def dst = List(src.Length);
      foreach (Some(item) in src)
        dst.Add(item);
      dst.NToList();
    }
    
    public GraphWalk[Key, Value]( start   : IEnumerable[Key]
                                , calc    : Key * (Key -> Value) -> Value
                                , onCycle : Key -> Value)
                                : Map[Key, Value]
    {
      mutable result = Map();
      def visited = Hashtable();
      def getValue(key)
      {
        if (result.Contains(key))
          result.Get(key);
        else
        {
          def value = if (visited.ContainsKey(key))
            onCycle(key);
          else
          {
            visited.Add(key, 0);
            def value = calc(key, getValue);
            visited.Remove(key);
            value;
          }
          result = result.Replace(key, value);
          value;
        }
      }
      foreach (key in start)
        _ = getValue(key);
      result;
    }

    public CreateIdGenerator(seed : int) : void -> int
    {
      mutable counter = seed;
      fun()
      {
        def result = counter;
        counter += 1;
        result
      }
    }
  
    public ToNemerleLocation(this loc : N2.Location) : N.Location
    {
      def (startLine, startCol) = loc.StartLineColumn;
      def (endLine, endCol) = loc.EndLineColumn;
      N.Location(loc.Source.FileIndex, startLine, startCol, endLine, endCol)
    }

    public GetNestedSubtypes(this ti : N.LibraryReference.ExternalTypeInfo) : list[N.LibraryReference.ExternalTypeInfo]//TODO: Move to Nemerle.Compiler
    {
      def nestedTypes = ti.GetNestedTypes();
      nestedTypes.Where(nested => nested.DeclaringType?.Equals(ti)).OfType.[N.LibraryReference.ExternalTypeInfo]().NToList();
    }

    public ParseRuleClassName(name : string) : option[RuleDefSymbol * string]
    {
      //match (name.Substring(0, 14))
      //{
      //  | "_#extensible#_" with type = ruleSymbolType.Extensible
      //  | "_#extention#__" with type = ruleSymbolType.Extention
      //  | "_#simple#_____" with type = ruleSymbolType.
      //  | "_#regular#____" with type = ruleSymbolType.Simple
      //    =>
      //    if (name.EndsWith("_"))
      //      Some((type, name.Substring(14, name.Length - 15)))
      //    else
      //      None()
      //  | _ => None()
      //}
      assert(false);
    }

    public IsVoidDeep(this ruleType : RuleType2) : bool
    {
      | Void => true
      | Option(t) | List(t) => IsVoidDeep(t)
      | Tuple(types) => types.ForAll(IsVoidDeep)
      | Chars | Ref => false
    }

    public DefineConditional(this tb : N.TypeBuilder, classMember : ClassMember) : void
    {
//#if PARSER_DEBUG
      _ = tb.DefineWithSource(classMember)
//#else
//      tb.Define(classMember)
//#endif
    }
    
    public GetListUserData[T](this manager : N.ManagerClass) : SCG.List[T]
    {
      def key = typeof(SCG.List[T]);
      mutable syntaxModules = manager.UserData[key] :> SCG.List[T];
      when (syntaxModules == null)
      {
        syntaxModules = SCG.List();
        manager.UserData[key] = syntaxModules;
      }
      syntaxModules
    }

    public GetExtraFieldSignature(this symbol : ExtraFieldRefSymbol) : ExtraFieldSignature
    {
      | symbol is ExternalExtraFieldRefSymbol => symbol.Signature
      | symbol is ParsedExtraFieldRefSymbol[G.ExtraFieldDeclaration1.Ast] => symbol.Value.Signature
      | _ => assert(false)
    }
  }
}