using Nitra.Internal;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  [Record]
  public abstract class PrettyPrintWriter
  {
    public Options : PrettyPrintOptions { get; }
    [RecordIgnore]
    private mutable _previousTokenPos : int;

    protected abstract FormatToken(source : SourceSnapshot, token : NToken) : void;
    protected abstract FormatString(source : SourceSnapshot, token : NToken, text : string) : void;// TODO: сделать protected
    protected abstract Garbage(source : SourceSnapshot, token : NToken) : void;
    public abstract MissingNode(ruleDescriptor : RuleDescriptor) : void;
    public abstract AmbiguousNode(ast : IAmbiguousAst) : void;
    public abstract NewLine() : void;
    public abstract NewLineAndIndent() : void;
    public abstract Whitespace() : void;
    public abstract Indent() : void;
    public abstract Unindent() : void;
    
    public Token(source : SourceSnapshot, token : NToken) : void
    {
      TryPrintGarbage(source, token);
      FormatToken(source, token);
    }
    
    public String(source : SourceSnapshot, token : NToken, text : string) : void
    {
      TryPrintGarbage(source, token);
      FormatString(source, token, text);
    }
    
    protected TryPrintGarbage(source : SourceSnapshot, token : NToken) : void
    {
      when (_previousTokenPos >= token.StartPos)
        return;
      
      when (source is ParseResult as parseResult)
      {
        def pos = token.StartPos;
        def cmp(e)
        {
          if (e.Skip.StartPos < _previousTokenPos)
            -1
          else
            if (e.Skip.EndPos >= pos)
              1
            else
              0
        }
        def errorIndex = parseResult.ErrorData.BinarySearch(cmp);
        when (errorIndex >= 0)
        {
          def error = parseResult.ErrorData[errorIndex];
          def skip = error.Skip;
          unless (skip.IsEmpty)
          {
            Garbage(source, skip);
            Whitespace();
          }
        }
      }
      
      assert2(_previousTokenPos < token.StartPos);
      _previousTokenPos = token.StartPos;
    }
  }
}
