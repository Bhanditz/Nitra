using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace N2
{
  public abstract class GrammarDescriptor : IComparable[GrammarDescriptor]
  {
    private static mutable _idCounter : int = 0;
    private _runtimeID : int { get; }

    protected this ()
    {
      _runtimeID = Threading.Interlocked.Increment(ref _idCounter);
    }

    public CompareTo(other : N2.GrammarDescriptor) : int
    {
      _runtimeID.CompareTo(other._runtimeID);
    }

    public abstract Name         : string                   { get; }
    public abstract FullName     : string                   { get; }
    public abstract Namespace    : string                   { get; }
    public abstract Dependencies : array[GrammarDescriptor] { get; }
    public abstract Rules        : array[RuleDescriptor]    { get; }

    public static Default : GrammarDescriptor { get; default DefaultGrammarDescriptor(); }

    private sealed class DefaultGrammarDescriptor : GrammarDescriptor
    {
      public override Name         : string                   { get "DefaultGrammar" }
      public override FullName     : string                   { get "DefaultGrammar" }
      public override Namespace    : string                   { get "" }
      public override Dependencies : array[GrammarDescriptor] { get array[] }
      public override Rules        : array[RuleDescriptor]    { get array[] }
      public override ParseAllGrammarTokens(pos : int, str : string, results : HashSet[int]) : void { IgnoreParams(); }
    }
    
    public abstract ParseAllGrammarTokens(pos : int, str : string, results : HashSet[int]) : void;

    public static GetDescriptors(assembly : Assembly) : array[GrammarDescriptor]
    {
      def descriptors = List();
      def assemblyAttributes = CustomAttributeData.GetCustomAttributes(assembly);
      foreach (attr when attr.Constructor.DeclaringType.Equals(typeof(GrammarsAttribute)) in assemblyAttributes)
      {
        def grammarTypes = attr.ConstructorArguments[0].Value :> Seq[CustomAttributeTypedArgument];
        foreach (grammarTypeArgument in grammarTypes)
        {
          def grammarType = grammarTypeArgument.Value :> Type;
          def descriptorProperty = grammarType.GetProperty("StaticDescriptor", BindingFlags.Public | BindingFlags.Static);
          assert(descriptorProperty != null);
          def descriptor = descriptorProperty.GetValue(null, null) :> GrammarDescriptor;
          descriptors.Add(descriptor);
        }
      }
      descriptors.ToArray()
    }
  }
}
