using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using N2.Internal;
using N2.Runtime;

using System;
using SCG = System.Collections.Generic;

namespace N2
{
  public partial class ParserHost
  {
    public SyncRoot : object { get; default object(); }

    private DefaultCompositeGrammar : CompositeGrammar { get; }

    public this()
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
      _compositeGrammars.Add(DefaultCompositeGrammar.Grammars, DefaultCompositeGrammar);
    }

    public GetRuleDescriptorById(_id : int) : RuleDescriptor
    {
      null;
    }

    public TryGetRuleDescriptorById(_id : int) : option[RuleDescriptor]
    {
      None();
    }

    private _walkers : Hashtable[WalkerTypeDescriptor, WalkerHost] = Hashtable();

    public GetWalkerHost(descriptor : WalkerTypeDescriptor) : WalkerHost
    {
      lock (SyncRoot)
      {
        if (_walkers.Contains(descriptor))
          _walkers[descriptor]
        else
        {
          def host = descriptor.NewHost(this);
          foreach (compositeGrammar in _compositeGrammars.Values)
            host.AddCompositeGrammar(compositeGrammar);
          _walkers[descriptor] = host;
          host;
        }
      }
    }
  }
}
