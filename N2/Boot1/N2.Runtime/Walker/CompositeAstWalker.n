using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using N2.Internal;

namespace N2.Runtime
{
  public class CompositeAstWalker
  {
    public Grammar                  : CompositeGrammar;
    public WalkerHost               : WalkerHost;

    private SimpleWalkers           : Hashtable[SimpleRuleDescriptor, WalkerBase];
    private ExtensibleWalkersData   : Hashtable[ExtensibleRuleDescriptor, ExtensibleRuleWalkerData];

    public NewWalker(ruleParser : RuleParser) : WalkerBase
    {
      def walkerDescriptor = WalkerHost.FindGrammarWalkerDescriptor(ruleParser.Descriptor.Grammar);
      walkerDescriptor.NewWalker(ruleParser)
    }

    public NewExtensibleRuleAstWalkerData(parserData : ExtensibleRuleParserData) : ExtensibleRuleWalkerData
    {
      def walkerDescriptor = WalkerHost.FindGrammarWalkerDescriptor(parserData.Descriptor.Grammar);
      walkerDescriptor.NewExtensibleRuleWalkerData(parserData, this)
    }

    public this(host : WalkerHost, grammar : CompositeGrammar)
    {
      WalkerHost            = host;
      Grammar               = grammar;
      SimpleWalkers         = grammar.SimpleRuleParsers.Map((descriptor, parseResult) => (descriptor, NewWalker(parseResult)));
      ExtensibleWalkersData = grammar.ExtensibleRules.Map((descriptor, parserData) => (descriptor, NewExtensibleRuleAstWalkerData(parserData)));

      foreach (walker when walker != null in SimpleWalkers.Values)
        walker.Init(this);
      foreach (walker in ExtensibleWalkersData.Values)
        walker.Init();
    }

    public GetWalker(ruleDescriptor : SimpleRuleDescriptor) : WalkerBase
    {
      SimpleWalkers[ruleDescriptor]
    }

    public GetWalker(ruleDescriptor : ExtensibleRuleDescriptor, bindingPower : int) : ExtensibleRuleWalkerBase
    {
      def walkers = ExtensibleWalkersData[ruleDescriptor].GetWalkers();
      assert(bindingPower >= 0 && bindingPower < walkers.Length);
      assert(walkers[bindingPower] != null);
      walkers[bindingPower]
    }
  }
}
