using SCG = System.Collections.Generic;

namespace N2.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public override TryParse(recoveryStack : list[RecoveryStackFrame].Cons, startState : int, mutable curTextPos : int, parsedStates : SCG.List[ParsedStateInfo], parser : N2.Internal.Parser) : int
    {
      _ = recoveryStack;
      def text = parser.Text;
      mutable startPos = curTextPos;
      if (startState == PrefixState)
      {
        mutable bestPos;
        curTextPos = ParsePrefix(curTextPos, text, parser);
        if (curTextPos > 0)
        {
          parsedStates.Add(ParsedStateInfo(PrefixState, curTextPos - startPos));
          startPos = curTextPos;
          do
          {
            bestPos = curTextPos;
            curTextPos = ParsePostfix(curTextPos, text, parser);
          }
          while (curTextPos > bestPos);
          when (curTextPos > startPos)
            parsedStates.Add(ParsedStateInfo(PostfixState, curTextPos - startPos));
          bestPos;
        }
        else
          -1;
      }
      else if (startState == PostfixState || startState == -2) // -2 is a continue parse
      {
        mutable bestPos;
        do
        {
          bestPos = curTextPos;
          curTextPos = ParsePostfix(curTextPos, text, parser);
        }
        while (curTextPos > bestPos);
        when (curTextPos > startPos)
          parsedStates.Add(ParsedStateInfo(PostfixState, curTextPos - startPos));
        bestPos
      }
      else
        assert(false);
    }
  }
}
