namespace N2.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public BindingPower       : int;
    public PrefixId           : int;
    public PostfixId          : int;

    public FirstPostfixRule   : int;
    public FirstPostfixRuleId : int;
    public PrefixRules        : array[ExtentionRuleParser];
    public PostfixRules       : array[ExtentionRuleParser];
    public PrefixOffset       : int;
    public PostfixOffset      : int;

    public override StartRuleId : int { get { PrefixId } }

    public this(parserData : ExtensibleRuleParserData, bindingPower : int)
    {
      base(parserData.Grammar, parserData.Descriptor);
      BindingPower     = bindingPower;
      PrefixId         = parserData.PrefixId;
      PostfixId        = parserData.PostfixId;
      PrefixRules      = parserData.PrefixParsers;
      PostfixRules     = parserData.PostfixParsers;
      FirstPostfixRule = 0;
      def postfixRules = parserData.PostfixDescriptors;
      while (FirstPostfixRule < postfixRules.Length && bindingPower >= postfixRules[FirstPostfixRule].BindingPower)
        ++FirstPostfixRule;
      if (PostfixRules.Length > 0)
      {
        if (FirstPostfixRule == PostfixRules.Length)
          FirstPostfixRuleId = int.MaxValue;
        else
          FirstPostfixRuleId = PostfixRules[FirstPostfixRule].RuleId;
      }
      else
        FirstPostfixRuleId = int.MaxValue;
      if (PrefixRules.Length > 0)  PrefixOffset   = PrefixRules[0].RuleId;  else PrefixOffset   = 0;
      if (PostfixRules.Length > 0) PostfixOffset  = PostfixRules[0].RuleId; else PostfixOffset  = 0;
    }
  }
}
