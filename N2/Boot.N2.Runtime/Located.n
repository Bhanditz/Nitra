using System;
using System.Runtime;
using System.Runtime.ConstrainedExecution;
using System.Text.RegularExpressions;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Text;

using SCG = System.Collections.Generic;

namespace N2
{
  public class Located
  {
    public Location : Location { get; }

    public this(location : Location)
    {
      this.Location = location;
    }

    public GetText() : string { Location.GetText() }

    public GetText(token : NToken) : string
    {
      Location.Source.Text.Substring(token.StartPos, token.EndPos - token.StartPos)
    }

    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(start : int, end : int) : bool { this.Location.IntersectsWith(start, end) }
    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : NToken)         : bool { this.Location.IntersectsWith(other) }
    [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Intersection(start : int, end : int)   : ValueOption[Location]
    {
      this.Location.Intersection(start, end)
    }
  }
}