using N2.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.Typing
{
  public class Environment[TProject]
    where TProject: Project
  {
    public Root        : HierarchyNode;
    public Project     : TProject;
    public OpenNodes   : list[HierarchyNode];
    public CurrentNode : HierarchyNode;
    public Aliases     : list[string * list[string]];
    public Defines     : Map[string, bool];
    
    _aliasesMap        : list[list[string * list[string]]];
    
    public this(root : HierarchyNode, project : TProject)
    {
      this(root, project, [], root, [], Map(), [[]])
    }

    private this(
      root        : HierarchyNode,
      project     : TProject,
      openNodes   : list[HierarchyNode],
      currentNode : HierarchyNode,
      aliases     : list[string * list[string]],
      defines     : Map[string, bool],
      aliasesMap  : list[list[string * list[string]]])
    {
      Root        = root;
      Project     = project;
      OpenNodes   = openNodes;
      CurrentNode = currentNode;
      Aliases     = aliases;
      Defines     = defines;
      _aliasesMap = aliasesMap;
    }

    public EnterIntoNode(path : list [string]) : Environment[TProject]
    {
      def aliasesMap = path.Map(_ => []) + _aliasesMap; // TODO: ускорить
      Environment(Root, Project, OpenNodes, CurrentNode.AddNode(path), Aliases, Defines, aliasesMap)
    }

    public EnterIntoNode(name : string) : Environment[TProject]
    {
      def aliasesMap = [] :: _aliasesMap;
      Environment(Root, Project, OpenNodes, CurrentNode.AddNode(name), Aliases, Defines, aliasesMap)
    }

    public AddAlias(alias : string, path : list[string], _loc : Location) : Environment[TProject]
    {
      def newHead = (alias, path) :: _aliasesMap.Head;
      Environment(Root, Project, OpenNodes, CurrentNode, (alias, path) :: Aliases, Defines, newHead :: _aliasesMap.Tail)
    }
    
    public AddOpen(path : list[string], loc : Location) : Environment[TProject]
    {
      match (path)
      {
        | head :: tail =>
          mutable possible_expansions = [Root.AddNode(path)];
          foreach ((alias, fullPath) when alias == head in Aliases)
            possible_expansions ::= Root.AddNode(fullPath).AddNode(tail);

          AddOpen(possible_expansions, loc)

        | _ => assert(false, "empty or null namespace cannot be opened")
      }
    }
    
    public AddOpen(nodes : list[HierarchyNode], loc : Location) : Environment[TProject]
    {
      mutable allOpened = nodes;
      foreach (node in nodes)
      {
        // in case we are inside some namespace, we must open every namespace path
        // composed of current namespace's parts suffixed with opened one
        def openNested(curr : HierarchyNode)
        {
          unless (curr.Parent == null)
          {
            allOpened = curr.AddNode(node.FullNameParts) :: allOpened;
            openNested (curr.Parent)
          }
        }
        
        openNested(CurrentNode);
      }

      // we will warn if some of those namespace are already open
      def new_opened = AddOpenNodes(OpenNodes, allOpened, loc, true);

      Environment(Root, Project, new_opened, CurrentNode, Aliases, Defines, _aliasesMap)
    }

    /// this is the auxiliary function for making set of opened namespaces
    /// unique and warn if namespaces are opened multiple times by user
    private AddOpenNodes(old : list[HierarchyNode], added : list[HierarchyNode], loc : Location, should_warn : bool) : list[HierarchyNode]
    {
      def nodes = added.FoldLeft(old, 
        (x, acc) =>
          if (NList.ContainsRef(old, x))
          {
            when (should_warn)
              Project.Warning(loc, $ @"namespace `$(x.FullName)' is already open", 105);
            acc
          }
          else
            x :: acc
      );
      nodes
    }

    public virtual Bind[TSymbol](name : string, loc : Location) : option[TSymbol]
      where TSymbol: Symbol
    {
      def reprtNotFound(reportError)
      {
        when (reportError)
        {
          assert2(false);
          Project.Error(loc, $"The '$name' could not be found", -1);
        }
        None()
      }
      mutable symbol;
      def tryGetSymbol(symbol : Symbol, reportError : bool)
      {
        match (symbol)
        {
          | s is AmbiguousSymbol =>
            match (s.AmbiguousList.OfTypeRevert.[TSymbol]())
            {
              | []  => reprtNotFound(reportError)
              | [s] => Some(s)
              | ambiguous => 
                using (roor = Project.RootError(loc, $"The '$name' is ambiguous.", -1))
                  foreach (s in ambiguous)
                    roor.Error(s.Location, "   other defenition.");
            
                None() // we need separate method for this spetial case
            }
        
          | s is TSymbol => Some(s)
          | _ => reprtNotFound(reportError)
        }
      }

      // We must try CurrentNode and all it parent nodes. They take precedence over the OpenNodes.
      foreach (node in CurrentNode.Path())
        when (node.TryGetSymbol(name, out symbol))
          when (tryGetSymbol(symbol, reportError=false) is Some(symbol2))
            return Some(symbol2);
            
      foreach (node in OpenNodes)
        when (node.TryGetSymbol(name, out symbol))
          break;

      tryGetSymbol(symbol, reportError=true)
    }

    public virtual Bind[TSymbol](path : list[string], loc : Location) : option[TSymbol]
      where TSymbol: Symbol
    {
      //assert2(path.Length < 2);
      //def symbols = List();
      def reprtNotFound(reportError)
      {
        when (reportError)
        {
          assert2(false);
          Project.Error(loc, $"The '$path' could not be found", -1);
        }
        None()
      }
      mutable symbol;
      def tryGetSymbol(symbol : Symbol, reportError : bool)
      {
        match (symbol)
        {
          | s is AmbiguousSymbol =>
            match (s.AmbiguousList.OfTypeRevert.[TSymbol]())
            {
              | []  => reprtNotFound(reportError)
              | [s] => Some(s)
              | ambiguous => 
                using (roor = Project.RootError(loc, $"The '$path' is ambiguous.", -1))
                  foreach (s in ambiguous)
                    roor.Error(s.Location, "   other defenition.");
            
                None() // we need separate method for this spetial case
            }
        
          | s is TSymbol => Some(s)
          | _ => reprtNotFound(reportError)
        }
      }

      // We must try CurrentNode and all it parent nodes. They take precedence over the OpenNodes.
      foreach ((node, aliases) in CurrentNode.Path().ZipLazy(_aliasesMap))
      {
        def hasAliases()
        {
          match (path)
          {
            | h :: _ => aliases.Exists((a, _) => a == h)
            | _ => false
          }
        }
        if (node.TryGetSymbol(path, out symbol))
          when (tryGetSymbol(symbol, reportError=false) is Some(symbol2))
            if (hasAliases())
            {
              Project.Error(loc, $"Namespace '$(node.FullName)' contains a definition conflicting with alias '$(path.Head)'", -1);
              return None();
            }
            else
              return Some(symbol2);
        else match (path)
        {
          | h :: tail => 
            match (aliases.Find((a, _) => a == h))
            {
              | Some((_, path2)) =>
                def aliasedNode = Root.AddNode(path2);
                when (aliasedNode.TryGetSymbol(tail, out symbol))
                  when (tryGetSymbol(symbol, reportError=false) is Some(symbol2))
                    return Some(symbol2);

              | _ => ()
            }
          | _ => ()
        }
      }

      foreach (node in OpenNodes)
        when (node.TryGetSymbol(path, out symbol))
          break;

      tryGetSymbol(symbol, reportError=true)
    }
  }
}
