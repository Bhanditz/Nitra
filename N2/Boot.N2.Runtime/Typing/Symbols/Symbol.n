using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace N2.Typing
{
  public abstract class Symbol : Located, IEquatable[Symbol]
  {
    public Id : int { get; }
    private static mutable _next : int = 0;
    
    public this(loc : Location, name : string)
    {
      base(loc);
      Name = name;
      Id = Interlocked.Increment(ref _next);
    }

    public this(loc : Located, name : string)
    {
      base(loc.Location);
      Name = name;
      Id = Interlocked.Increment(ref _next);
    }

    public this(loc : Located)
    {
      this(loc.Location, loc.GetText());
    }
    
    public this(loc : Location)
    {
      this(loc, loc.GetText());
    }
    
    public abstract Description : string { get; }

    public FullName : string { get { Node.FullName } }

    public Name : string        { get; }
    public Node : HierarchyNode { get; internal set; }
    
    public override ToString() : string { $<#$Name ($Description) Parent: '$(Node?.Parent?.FullName ?? "not attaced to tree")'#> }
    
    public static @==(x : Symbol, y : Symbol) : bool { x : object == y }
    public static @!=(x : Symbol, y : Symbol) : bool { x : object != y }
    
    [OverrideObjectEquals]
    public Equals(other : Symbol) : bool
      implements IEquatable[Symbol].Equals
    {
      other : object == this
    }
    
    public override GetHashCode() : int { Id }
  }
}
