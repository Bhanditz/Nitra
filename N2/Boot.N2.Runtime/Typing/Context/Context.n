using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using N2.Runtime;

namespace N2.Typing
{
  [Record]
  [DebuggerDisplay("{DebugViewInline}")]
  public abstract class Context
    //where TProject: Project
  {
    public Parent  : Context { get; }
    public Parents : Seq[Context]
    {
      get
      {
        def lst = List();
        def loop(context : Context) : void
        {
          | null => ()
          | _    => lst.Add(context); loop(context.Parent);
        }
        
        loop(this);
        lst.Reverse();
        lst
      }
    }

    public abstract Bind[T](name : list[Located]) : option[T];// where T: Symbol;
    public virtual  Bind[T](name : Located)       : option[T]// where T: Symbol
    {
      Bind.[T]([name])
    }

    public DebugView : string
    {
      get { $<#..$(Parents; "\r\n"; p => $"$p        $(p.GetType().Name)")#> }
    }

    public DebugViewInline : string
    {
      get { $<#..$(Parents; "  ->  ")#> }
    }
  }
}
