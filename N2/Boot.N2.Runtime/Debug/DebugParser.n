using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using SCG = System.Collections.Generic;

using N2.Internal;

namespace N2.Debug
{
  [Record]
  public class DebugViewUnknown
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    public override ToString() : string { string.Format("{0, -6} {1, 5}", "?", debugParser.parser.ast[index]) }
  }

  [Record]
  public class DebugViewSize
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    public override ToString() : string { string.Format("{0, -6} {1, 5}", "Size", debugParser.parser.ast[index]) }
  }

  [Record]
  public class DebugViewAstRef
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public rd : RuleDescriptor;
    public override ToString() : string
    {
      string.Format("{0, -6} {1, 5} {2} {3}", "Ref", debugParser.parser.ast[index], rd.Grammar.FullName, rd.GetType().Name)
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public Fields : array[object] { get { debugParser.GetAstAt(index) } }
  }

  [Record]
  public class DebugViewInternalRef
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public name : string;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public size : int;
    public override ToString() : string { string.Format("{0, -6} {1, 5} {2}", "IRef", debugParser.parser.ast[index], name) }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public Fields : array[object] { get { debugParser.GetAstAt(index, size) } }
  }

  [Record]
  public class DebugViewAstDef
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public rd : RuleDescriptor;
    public override ToString() : string { string.Format
      ( "{0, -6} {1, 5} {2} {3} {4}..{5}"
      , "Ast"
      , debugParser.parser.ast[index]
      , rd.Grammar.FullName
      , rd.GetType().Name
      , index
      , index + rd.AstSize - 1
    ) }
  }

  [Record]
  public class DebugViewTerminator
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    public override ToString() : string { string.Format("{0, -6} {1, 5}", "T", debugParser.parser.ast[index]) }
  }

  [Record]
  public class DebugViewHeader
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    public override ToString() : string { string.Format("{0, -6} {1, 5}", "H", debugParser.parser.ast[index]) }
  }

  [Record]
  public class DebugViewError
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public debugParser : DebugParser;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] public index : int;
    public override ToString() : string { string.Format("{0, -6} {1, 5}", "Error", debugParser.parser.ast[index]) }
  }

  public class DebugParser
  {
    public parser : Parser;
    public this(parser : Parser) { this.parser = parser }

    private mutable _ast : array[object] = array[];
    public GetAstAt(index : int) : array[object]
    {
      def astRef = parser.ast[index];
      if (astRef > 0)
      {
        if (parser.parserHost.TryGetRuleDescriptorById(parser.ast[astRef]) is Some(rd))
        {
          def fields = array(rd.AstSize);
          for (mutable i = 0; i < fields.Length; ++i)
            fields[i] = Ast[astRef + i];
          fields
        }
        else
          array[]
      }
      else
        array[]
    }

    public GetAstAt(index : int, size : int) : array[object]
    {
      def astRef = parser.ast[index];
      if (astRef > 0)
      {
        def fields = array(size);
        for (mutable i = 0; i < fields.Length; ++i)
          fields[i] = Ast[astRef + i];
        fields
      }
      else
        array[]
    }

    public Ast : array[object]
    {
      get
      {
#if DEBUG || PARSER_DEBUG
        Array.Resize(ref _ast, parser.ast.Length);
        foreach (i when i[2] != null in parser.astOffsets)
        {
          def i = i[0];
          if (parser.parserHost.TryGetRuleDescriptorById(parser.ast[i]) is Some(rd))
            rd.FillDebugAst(this, i, _ast);
          else
            _ast[i] = DebugViewError(this, i);
        }
        for (mutable i = 0; i < parser.allocated; ++i)
          when (_ast[i] == null)
            _ast[i] = DebugViewUnknown(this, i);
#endif
        _ast;
      }
    }
  }
}
