using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2.Internal;

namespace N2
{
  [Record]
  public sealed class ParseResult
  {
    private ParserState    : Parser;
    public  RuleDescriptor : RuleDescriptor { get }
    public  Source         : SourceSnapshot { get }
    public  ParserHost     : ParserHost     { get { ParserState.parserHost } }
    public  RawAst         : array[int]     { get { ParserState.ast } }
    public  RawMemoize     : array[int]     { get { ParserState.memoize } }
    public  RawResult      : int            { get { ParserState.ast[Parser.ResultOffset] } }
    public  RawAstIndex    : int            { get { ParserState.ast[Parser.AstOffset] } }
    public  IsSuccess      : bool           { get { RawResult >= 0 } }

    public CreateAst[TAst]() : TAst
      where TAst : Ast
    {
      RuleDescriptor.CreateAst(Source, ParserHost, RawAst, RawAstIndex, 0) :> TAst
    }

    public GetSpans(startPos : int, endPos : int, spans : List[SpanInfo]) : void
    {
      def loc = NToken(0, RawResult);
      when (loc.IntersectsWith(startPos, endPos))
        RuleDescriptor.GetSpans(ParserHost, RawAst, RawAstIndex, loc.StartPos, loc.Length, startPos, endPos, spans);
    }

    public CollectErrors() : ErrorMessage
    {
      def findMemoizeIndex(i)
      {
        if (i >= 0)
          if (RawMemoize[i] > 0)
            VSome(i)
          else
            findMemoizeIndex(i - 1);
        else
          VNone()
      }
      def collectRules(astIndex)
      {
        // TODO: rewrite using AstOfs
        if (astIndex > 0)
          ParserHost.GetRuleDescriptorById(RawAst[astIndex]).Name :: collectRules(RawAst[astIndex + 1])
        else
          []
      }
      match (findMemoizeIndex(RawMemoize.Length - 1))
      {
        | VSome(index) => ErrorMessage(index, collectRules(RawMemoize[index]))
        | VNone        => ErrorMessage(0, [])
      }
    }
  }
}
