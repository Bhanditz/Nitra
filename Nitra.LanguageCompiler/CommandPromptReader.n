using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;

using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Nitra.LanguageCompiler
{
  class CommandPromptReader
  {
    public LangSpecFile       : string                                { get; }
    public AssemblyReferences : list[string]                          { get; }
    public ModuleDescriptors  : Dictionary[string, GrammarDescriptor] { get; }
    public OutputPath         : string                                { get; }
    public Success            : bool                                  { get; }
    
    public this(args : array[string])
    {
      when (args.Length < 1 || !Path.GetExtension(args[0]).Equals(".nlang", StringComparison.InvariantCulture))
      {
        WriteLine("Usage: Nitra.LanguageCompiler.exe NitraLanguageSpecFile.nlang (NitraParserAssebly.dll)*");
        return;
      }
    
      def langSpecFile = Path.GetFullPath(args[0]);
    
      when (!File.Exists(langSpecFile))
      {
        WriteLine($"The '$langSpecFile' file does not exists.");
        return;
      }
      
      LangSpecFile = langSpecFile;
    
      def asms = List();
    
      for (mutable i = 1; i < args.Length; i++)
      {
        def arg = args[i];
        
        when (arg.StartsWith("/out:", StringComparison.InvariantCultureIgnoreCase))
        {
          OutputPath = arg.Substring(5);
          continue;
          
        }
        
        def asmRef = Path.GetFullPath(arg);
        
        when (!File.Exists(asmRef))
        {
          WriteLine($"The '$asmRef' file does not exists.");
          return;
        }
      
        def asm = Assembly.LoadFrom(asmRef);
        asms.Add(asm);
      }
      
      when (OutputPath == null)
        OutputPath = Environment.CurrentDirectory;
        
      OutputPath = Path.GetFullPath(OutputPath);
    
      def descriptors = Dictionary();
      foreach (asm in  asms)
      {
        def asmDescriptors = Nitra.GrammarDescriptor.GetDescriptors(asm);
        foreach (asmDescriptor in asmDescriptors)
          when (!asmDescriptor.IsSplicable)
            descriptors.Add(asmDescriptor.FullName, asmDescriptor);
      }
      
      ModuleDescriptors = descriptors;
      
      Success = true;
    }
  }
}
