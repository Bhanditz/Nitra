using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Utility.Getopt;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;

using Nitra.ProjectSystem;
using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Nitra.LanguageCompiler
{
  class CommandPromptReader
  {
    public LangSpecFile       : string                                { get; private set; }
    public AssemblyReferences : list[string]                          { get; }
    public Binaries           : list[string]                          { get; }
    public ModuleDescriptors  : Dictionary[string, GrammarDescriptor] { get; }
    public OutputPath         : string                                { get; private set; }
    public NewGuids           : bool                                  { get; private set; }
    public Snk                : string                                { get; private set; }
    public DefaultNamespace   : string                                { get; private set; }
    public Success            : bool                                  { get; }
    public CompilerMessages   : CompilerMessages                      { get; }
    
    public this()
    {
      CompilerMessages = ConsoleCompilerMessages("LC");
      def assemblyReferences = List();
      mutable binaries = [];
      def options = [
        CliOption.String(name = "-lang",
                    aliases = [],
                    help = "Language specification",
                    handler = fun(langSpecFile) { LangSpecFile = langSpecFile }),
        CliOption.String(name = "-out",
                    aliases = [],
                    help = "Output path",
                    handler = path => OutputPath = path),
        CliOption.Boolean(name = "-guids",
                    aliases = ["-newguids", "-renewguids"],
                    help = "Generate new guid values.",
                    handler = newGuids => NewGuids = newGuids),
        CliOption.String(name = "-keyfile",
                    aliases = ["-snk"],
                    help = "Specifies a strong name key file",
                    handler = path => Snk = path),
        CliOption.String(name = "-namespace",
                    aliases = ["-ns"],
                    help = "Default namespace",
                    handler = defaultNamespace => DefaultNamespace = defaultNamespace),
        CliOption.String(name = "-bin",
                    aliases = [],
                    help = "Additional binaries.",
                    handler = bin => binaries ::= bin),
        CliOption.NonOption(name = "",
                    help = "Nitra assembly references.",
                    handler = assemblyReferences.Add),
        ];
      
      Getopt.Parse(options);

      def usage() : void
      {
        def help = Getopt.Usage(options);
        WriteLine("Usage: Nitra.LanguageCompiler.exe flags [NitraParserAssebly.dll]");
        WriteLine("flags:");
        WriteLine(help);
      }
        
      when (LangSpecFile == null)
      {
        WriteLine("'lang' option is required");
        usage();
        return;
      }
    
      when (assemblyReferences.Count == 0)
      {
        WriteLine("Assembly references is required");
        usage();
        return;
      }
      
      AssemblyReferences = assemblyReferences.NToList();
      Binaries = binaries;
    
      def langSpecFile = Path.GetFullPath(LangSpecFile);
    
      when (!File.Exists(langSpecFile))
      {
        WriteLine($"The '$langSpecFile' file does not exists.");
        usage();
        return;
      }
      
      LangSpecFile = langSpecFile;
    
      def asms = List();
    
      foreach (assemblyReference in assemblyReferences)
      {
        def asmRef = Path.GetFullPath(assemblyReference);
        
        when (!File.Exists(asmRef))
        {
          WriteLine($"The '$asmRef' file does not exists.");
          usage();
          return;
        }
      
        def asm = Assembly.LoadFrom(asmRef);
        asms.Add(asm);
      }
      
      when (OutputPath == null)
        OutputPath = Environment.CurrentDirectory;
        
      OutputPath = Path.GetFullPath(OutputPath);
    
      def descriptors = Dictionary();
      foreach (asm in  asms)
      {
        def asmDescriptors = Nitra.GrammarDescriptor.GetDescriptors(asm);
        foreach (asmDescriptor in asmDescriptors)
          when (!asmDescriptor.IsSplicable)
            descriptors.Add(asmDescriptor.FullName, asmDescriptor);
      }
      
      ModuleDescriptors = descriptors;
      
      when (DefaultNamespace == null)
      {
        WriteLine("The 'namespace' parametr is required.");
        usage();
        return;
      }
      
      Success = true;
    }
  }
}
