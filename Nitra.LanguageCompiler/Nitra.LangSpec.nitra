using Nitra.LanguageCompiler.Utils;

namespace Nitra
{
  syntax module LangSpec
  {
    using Identifiers;
    using Outline;
    using PrettyPrint;
    using StandardSpanClasses;
    using CStyleComments;
    using Whitespaces;

    alias Name = Identifier;

    [StartRule]
    syntax Language = "language" Name "{" Properties=LanguageBody* "}";

    syntax LanguageBody
    {
      | SpanClassDefinition = "span" sm "class" sm Name sm "=" sm DefaultForegroundColor=Color ";";
      | Extension           = "extention" sm "=" sm FileExtension ";";
      | StartRule           = "syntax" sm "module" Module=QualifiedIdentifier sm "start" sm "rule" sm Rule=QualifiedIdentifier ";";
      | SyntaxModule        = "syntax" sm "module" Module=QualifiedIdentifier ";";
    }

    token Color = "#" R=Hex G=Hex B=Hex
    {
      Value() : System.Drawing.Color = System.Drawing.Color.FromArgb(ParseHex(GetText(R)), ParseHex(GetText(G)), ParseHex(GetText(B)));
    }
    regex Hex = ['0'..'9', 'A'..'F', 'a'..'f']{2};

    regex FileExtension = "." IdentifierPartCharacters+;

    [Identifier]
    token Identifier = !Keyword IdentifierBody;

    [ExplicitSpaces]
    syntax QualifiedIdentifier = Parts=(Identifier; s "." s)+;

    regex KeywordToken = "language" | "span" | "class" | "extention" | "start" | "syntax" | "rule";

    [Keyword]
    token Keyword = Name=KeywordToken !IdentifierPartCharacters;

    extend token IgnoreToken
    {
      | [SpanClass(Comment)] SingleLineComment;
      | [SpanClass(Comment)] MultiLineComment;
    }
  }
}
