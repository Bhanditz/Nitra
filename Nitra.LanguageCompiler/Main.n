using System.Text;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;

using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Nitra.LanguageCompiler
{
  module Program
  {
    Main(args : array[string]) : void
    {
      def config       = CommandPromptReader(args);
      
      unless (config.Success)
        return;
        
      def langSpecFile = config.LangSpecFile;
      def spec         = File.ReadAllText(langSpecFile);
    
      def source      = SourceSnapshot(spec);
      def lang = Parse(source, langSpecFile);
      when (lang == null)
        return;

      def (success, stratRuleDescriptor) = Check(source, lang, config);
      
      unless (success)
        return;
        
      foreach (spanClasse in lang.SpanClasses)
        WriteLine("span class " + spanClasse.Name + " = " + spanClasse.DefaultForegroundColor);
     
      foreach (m in lang.StartRules)
          WriteLine("module: " + m.Module + " rule: " + m.Rule);
      
      foreach (m in lang.SyntaxModules)
        WriteLine("module: " + m.Module);
        
      foreach (spanClasse in lang.SpanClasses)
      {
        def color = spanClasse.DefaultForegroundColor.Value.ToString();
        def name = spanClasse.Name.ToString();
        ExpandTemplate(@"Templates\ClassificationDefinition.cs", 
          [("XXNamespaceXX",    "Company.Plagin"),
           ("XXDisplay nameXX", name),
           ("Xxx",              name),
           ("Colors.Red",       color),
           ("Red",              color),
           ],
          config);
      }
        
      WriteLine("Output Path: " + config.OutputPath);
      
      _ = ReadLine();
    }
    
    Parse(source : SourceSnapshot, langSpecFile : string) : Language
    {
      def parserHost  = ParserHost();
      def parseResult = LangSpec.Language(source, parserHost);
      unless (parseResult.IsSuccess)
      {
        foreach(error in parseResult.GetErrors())
        {
          def (line, col) = error.Location.StartLineColumn;
          Debug.WriteLine($<#$langSpecFile($line:$col): error: $(error.Message)#>);
        }
        return null;
      }
    
      def parseTree = LangSpecParseTree.Language.CreateParseTree(parseResult);
      def ast       = DeclarationRoot.Create(null, parseTree);
      ast.EvalProperties();
      ast.Content
    }
    
    Check(source : SourceSnapshot, lang : Language, config : CommandPromptReader) : bool * RuleDescriptor
    {
      mutable success = true;
      def error(msg : string) : void { success = false; WriteLine(msg); }
      def langSpecFile = config.LangSpecFile;
      def descriptors  = config.ModuleDescriptors;
      def modules = HashSet();
      mutable stratRuleDescriptor;

      def processModule(mod : QualifiedIdentifier, ruleOpt : QualifiedIdentifier) : void
      {
        def ruleNameOpt = ruleOpt?.ToString();
        def moduleFullName = mod.ToString();
        mutable descriptor;
        if (descriptors.TryGetValue(moduleFullName, out descriptor))
        {
          unless (modules.Add(moduleFullName))
            error($<#$langSpecFile($(Location(source, mod.Span).StartLineColumn)): error: Syntax module '$moduleFullName' defined twice.#>);
        
          when (ruleNameOpt != null)
            if (descriptor.Rules.Find(x => x.Name == ruleNameOpt) is Some(rule))
              stratRuleDescriptor = rule;
            else
              error($<#$langSpecFile($(Location(source, ruleOpt.Span).StartLineColumn)): error: Rule '$ruleNameOpt' not found in '$moduleFullName' syntax module.#>);
        }
        else
          error($<#$langSpecFile($(Location(source, mod.Span).StartLineColumn)): error: Syntax module '$moduleFullName' not found.#>);
      }
    
      match (lang.StartRules)
      {
        | x1 :: x2 :: _ => 
          def loc1 = Location(source, x1.Span);
          def loc2 = Location(source, x2.Span);
          error($<#$langSpecFile($(loc1.StartLineColumn)): error: Start rule defined twice.#>);
          error($<#$langSpecFile($(loc2.StartLineColumn)): warning: Previous defined.#>);
        
        | [] => 
          def loc = Location(source, lang.Span);
          error($<#$langSpecFile($(loc.StartLineColumn)): error: No start rule defined.#>);
        
        | _ =>
          foreach (startRule in lang.StartRules)
            processModule(startRule.Module, startRule.Rule);
      }

      foreach (m in lang.SyntaxModules)
        processModule(m.Module, null);
        
      (success, stratRuleDescriptor)
    }
 
    ExpandTemplate(templatePath : string, vars : Seq[string * string], config : CommandPromptReader) : void
    {
      def relativePath    = templatePath.Substring(@"Templates\".Length);
      def outputPath      = Path.ChangeExtension(Path.GetFullPath(Path.Combine(config.OutputPath, relativePath)), ".Generated" + Path.GetExtension(relativePath));
      def relativeDir     = Path.GetDirectoryName(relativePath);
      def outputDir       = Path.Combine(config.OutputPath, relativeDir);
      def templateText    = File.ReadAllText(templatePath, Encoding.UTF8);
      def templateBuilder = StringBuilder(templateText, templateText.Length + templateText.Length / 10);
      
      foreach ((name, value) in vars)
        _ = templateBuilder.Replace(name, value);
      
      def result = templateBuilder.ToString();

      unless (Directory.Exists(outputDir))
        _ = Directory.CreateDirectory(outputDir);
        
      File.WriteAllText(outputPath, result, Encoding.UTF8);
      
      when (result.Contains("Xxx") || result.Contains("XX"))
        WriteLine($<#$templatePath: error: The template contains unreplaced placeholders.#>);
    }
  }
}

namespace Nitra
{
  public abstract partial class QualifiedIdentifier : AstBase[IAst]
  {
    public sealed partial class Concrete : QualifiedIdentifier
    {
      public override ToString() : string
      {
        $<#..$(this.Parts; ".")#>
      }
    }
  }
}