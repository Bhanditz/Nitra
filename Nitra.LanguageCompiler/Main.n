using CSharp.TopDeclarationsParseTree;
using CSharp.StatementsParseTree;
using CSharp.ExpressionsParseTree;

using Microsoft.VisualBasic.FileIO;

using Nitra.Quote;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;

using System;
using System.Console;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

[assembly: ImportRules(Grammar = "CSharp.SplicableTopDeclarations")]
[assembly: ImportRules(Grammar = "CSharp.SplicableExpressions")]

namespace Nitra.LanguageCompiler
{
  module Program
  {
    public VsPackageTemplatePath = @"Templates\XXLanguageXXVsPackage";
    
    Main() : void
    {
      Start();
      _ = ReadLine();
    }
    
    Start() : void
    {
      def config = CommandPromptReader();
      
      unless (config.Success)
        return;
        
      def langSpecFile = config.LangSpecFile;
      def spec         = File.ReadAllText(langSpecFile);
    
      def source      = SourceSnapshot(spec);
      def lang = Parse(source, langSpecFile);
      when (lang == null)
        return;

      def (success, _stratRuleDescriptor) = Check(source, lang, config);
      
      unless (success)
        return;
        
      def vars = GetVars(lang, config);
      
      foreach ((var, value) in vars)
        WriteLine($"$var = $value");
        
      CopyBinaries(lang, config);
      CopyGrammars(lang, config);
        
      GenerateFileAndContentTypeDefinitions(source, lang, config);
        
      GenerateSpanClasses(lang, config);
      
      when (config.GenerateProject)
        GenerateProject(lang, config, vars);

      WriteLine("Output Path: " + config.OutputPath);
    }
    
    CopyBinaries(lang : Language, config : CommandPromptReader) : void
    {
      ExternalDependences(lang, config, config.Binaries);
    }
    
    CopyGrammars(lang : Language, config : CommandPromptReader) : void
    {
      ExternalDependences(lang, config, config.AssemblyReferences);
    }
    
    ExternalDependences(lang : Language, config : CommandPromptReader, paths : list[string]) : void
    {
      def binPath = Path.Combine(config.OutputPath, lang.ProjectName, "ExternalDependences");
      foreach (path in paths)
      {
        if (Directory.Exists(path))
          FileSystem.CopyDirectory(path, binPath, UIOption.OnlyErrorDialogs);
        else if (File.Exists(path))
        {
          def fileName = Path.GetFileName(path);
          def outPath = Path.Combine(binPath, fileName);
          File.Copy(path, outPath, overwrite=true);
        }
        else 
          Error("File or directory '" + path + "' does not exists.");
      }
    }
    
    GenerateFileAndContentTypeDefinitions(source : SourceSnapshot, lang : Language, config : CommandPromptReader) : void
    {
      def prjName      = lang.ProjectName;
      def langSpecFile = config.LangSpecFile;
      def vars         = DefaultVars(lang, config);
        
      mutable isFileExtensionDefined;
      mutable fileExtensions = [];
      
      foreach (fileExtension in lang.FileExtensions)
      {
        unless (fileExtension.HasValue)
        {
          def (line, col) = Location(source, fileExtension.Span).StartLineColumn;
          Error($<#$langSpecFile($line,$col): error: bad file extension.#>);
          continue;
        }

        isFileExtensionDefined = true;
        def ext = fileExtension.Value;
        def extName = ExtensionToName(ext);
        ExpandTemplate(@"Templates\FileAndContentTypeDefinitions\FileExtensionToContentTypeDefinition.cs",  $@"$prjName\FileAndContentTypeDefinitions\$(extName)FileExtensionToContentTypeDefinition.Generated.cs", 
          ("XXFileExtensionNameXX", extName) ::
          ("XXFileExtensionXX",     ext) ::
          vars,
          config);
          
        fileExtensions ::= ext;
      }
      
      def fileExtensionsReplacement = (<#"FileExtensions"#>, $<#..$(fileExtensions; ", "; e => "\"" + e + "\"")#>);

      ExpandTemplate(@"Templates\FileAndContentTypeDefinitions\NitraContentTypeDefinition.cs",  $@"$prjName\FileAndContentTypeDefinitions\NitraContentTypeDefinition.Generated.cs", 
        fileExtensionsReplacement :: vars,
        config);
      
      unless (isFileExtensionDefined)
      {
        def (line, col) = Location(source, lang.Name.Span).StartLineColumn;
        Error($<#$langSpecFile($line,$col): error: no file extension defined.#>);
      }
    }
    
    public DefaultVars(lang : Language, config : CommandPromptReader) : list[string * string]
    {
      def startRule = lang.SyntaxModules.First(m => m.RuleOpt.HasValue);
      
      [
        ("XXNamespaceXX",         config.DefaultNamespace),
        ("XXLanguageXX",          lang.Name.ToString()),
        ("XXCompanyXX",           lang.Companies.Head.Value.Trim()),
        ("XXParserAssembliesXX",  $<#..$(config.AssemblyReferences; ", "; a => <#@"#> + a + <#"#>)#>),
        ("XXStartSyntaxModuleXX", <#@"#> + startRule.Module + <#"#>),
        ("XXStartRuleXX",         <#@"#> + startRule.RuleOpt.Value + <#"#>),
      ]
    }
    
    public GetVars(lang : Language, config : CommandPromptReader) : list[string * string]
    {
      def vars              = DefaultVars(lang, config);
      def guidsFileName     = "Guids.cs";
      def templateGuidsPath = Path.Combine(VsPackageTemplatePath, guidsFileName);
      def name              = lang.Name.ToString();
      def prjName           = name + "VsPackage";
      def guidsPath         = Path.Combine(config.OutputPath, prjName, guidsFileName);
      def templateGuids     = ReadGuids(templateGuidsPath);
      def guids             = if (config.NewGuids || !File.Exists(guidsPath)) Hashtable() else ReadGuids(guidsPath);
      
      mutable replaces = vars;
      
      foreach ((templateConstName, templateGuid) in templateGuids.KeyValuePairs)
      {
        def constName = ExpandTemplateText(templateConstName, vars);
        mutable guid;
        if (guids.TryGetValue(constName, out guid))
          unless (string.Equals(templateGuid, guid, StringComparison.InvariantCulture))
            replaces ::= (templateGuid, guid);
        else
          replaces ::= (templateGuid, Guid.NewGuid().ToString("D").ToUpperInvariant());
      }
      
      replaces
    }

    internal sealed class CSharpCollectConstVisitor : ParseTreeVisitor
    {
      public Result : Hashtable[string, string] = Hashtable();
      //private mutable _inStringGuidConst : bool;
      //private mutable _name : string;
      
      public override Visit(ast : ParseTree) : ParseTree
      {
        quote match (ast)
        {
          | <# TypeMemberDeclaration: $Attributes(_) $Modifiers(_)
            const string $Name(name) = $ConstantExpression(str is Expression.RegularStringLiteral); #> =>
            def text = str.RegularStringLiteral.RegularStringLiteralParts.GetText();
            Result[name.ToString()] = text;
            ast.Apply(this)
          //| c is TypeMemberDeclaration.Constant when c.AnyType.GetText().Trim() == "string" => 
          //  _inStringGuidConst = true;
          //  try c.Apply(this) finally _inStringGuidConst = false;
          //    
          //| c is ConstantDeclarator when _inStringGuidConst => 
          //  def name = c.Name.GetText().Trim();
          //  _inStringGuidConst = name.StartsWith("Guid", StringComparison.InvariantCultureIgnoreCase);
          //
          //  when (_inStringGuidConst)
          //    _name = name;
          //  
          //  try c.Apply(this) 
          //  finally { _inStringGuidConst = false; _name = null; }
          | _ => ast.Apply(this)
        }
      }      
    }
      
    public ReadGuids(sourcePath : string) : Hashtable[string, string]
    {
      def parserHost   = ParserHost();
      def text         = File.ReadAllText(sourcePath);
      def source       = SourceSnapshot(text, 0, sourcePath);
      def parseResult  = CSharp.Main.CompilationUnit(source, parserHost);
      def parseTree    = CSharp.MainParseTree.CompilationUnit.Create(parseResult);
      def visitor      = CSharpCollectConstVisitor();
      
      _ = parseTree.Apply(visitor);
      
      visitor.Result
    }
    
    GenerateProject(lang : Language, config : CommandPromptReader, vars : Seq[string * string]) : void
    {
      def name = lang.Name.ToString();
      def prjName = name + "VsPackage";
      ExpandTemplates(VsPackageTemplatePath,  Path.Combine(config.OutputPath, prjName), vars, config);
          
      def snkPath = Path.Combine(config.OutputPath, prjName, "Key.snk");
      unless (File.Exists(snkPath))
        CreateSnk(snkPath);
    }
    
    GenerateSpanClasses(lang : Language, config : CommandPromptReader) : void
    {
      def prjName = lang.ProjectName;

      foreach (spanClasse in lang.SpanClasses)
      {
        def color = spanClasse.DefaultForegroundColor.Value;
        def name = spanClasse.Name.ToString();
        ExpandTemplate(@"Templates\Highlighting\ClassificationDefinition.cs",  $@"$prjName\Highlighting\$(name)ClassificationDefinition.Generated.cs", 
          [("XXNamespaceXX",     config.DefaultNamespace),
           ("XXDisplay nameXX",  name),
           ("XXSpanClassNaneXX", name),
           ("Colors.Red",        ColorToString(color, "Colors.")),
           ("Red",               ColorToString(color)),
           ],
          config);
      }
    }
    
    Parse(source : SourceSnapshot, langSpecFile : string) : Language
    {
      def parserHost  = ParserHost();
      def parseResult = LangSpec.Language(source, parserHost);
      unless (parseResult.IsSuccess)
      {
        foreach(error in parseResult.GetErrors())
        {
          def (line, col) = error.Location.StartLineColumn;
          Error($<#$langSpecFile($line,$col): error: $(error.Message)#>);
        }
        return null;
      }
    
      def parseTree = LangSpecParseTree.Language.CreateParseTree(parseResult);
      def ast       = DeclarationRoot.Create(null, parseTree);
      ast.EvalProperties();
      ast.Content
    }
    
    Check(source : SourceSnapshot, lang : Language, config : CommandPromptReader) : bool * RuleDescriptor
    {
      mutable success = true;
      def error(msg : string) : void { success = false; Error(msg); }
      def langSpecFile = config.LangSpecFile;
      def descriptors  = config.ModuleDescriptors;
      def modules = HashSet();
      def stratRules = List();;
      mutable stratRuleDescriptor;

      def processModule(mod : QualifiedIdentifier, ruleOpt : QualifiedIdentifier.IAstOption) : void
      {
        def moduleFullName = mod.ToString();
        mutable descriptor;
        if (descriptors.TryGetValue(moduleFullName, out descriptor))
        {
          unless (modules.Add(moduleFullName))
            error($<#$langSpecFile($(Location(source, mod.Span).StartLineColumn)): error: Syntax module '$moduleFullName' defined twice.#>);
        
          when (ruleOpt.HasValue)
          {
            def ruleNameOpt = ruleOpt.Value.ToString();
            if (descriptor.Rules.Find(x => x.Name == ruleNameOpt) is Some(rule))
            {
              stratRules.Add(ruleOpt.Value);
              stratRuleDescriptor = rule;
            }
            else
              error($<#$langSpecFile($(Location(source, ruleOpt.Span).StartLineColumn)): error: Rule '$ruleNameOpt' not found in '$moduleFullName' syntax module.#>);
          }
        }
        else
          error($<#$langSpecFile($(Location(source, mod.Span).StartLineColumn)): error: Syntax module '$moduleFullName' not found.#>);
      }
      
      foreach (m in lang.SyntaxModules)
        processModule(m.Module, m.RuleOpt);
      
      unless (CheckDefinedOnce(langSpecFile, source, lang, stratRules, x => x.Span, "start rule"))
        success = false;
      unless (CheckDefinedOnce(langSpecFile, source, lang, lang.Companies, x => x.Span, "compaty"))
        success = false;
        
      (success, stratRuleDescriptor)
    }
    
    CheckDefinedOnce[T](langSpecFile : string, source : SourceSnapshot, lang : Language, seq : Seq[T], getSpan : T -> NSpan, name : string) : bool
    {
      def stratRules = seq.ToArray();
      def error(msg : string) : void { Error(msg); }
      if (stratRules.Length == 0)
      {
        error($<#$langSpecFile($(Location(source, lang.Span).StartLineColumn)): error: No $name defined.#>);
        false
      }
      else if (stratRules.Length > 1)
      {
        def loc1 = Location(source, getSpan(stratRules[1]));
        def loc2 = Location(source, getSpan(stratRules[0]));
        error($<#$langSpecFile($(loc1.StartLineColumn)): error: The $name defined twice.#>);
        error($<#$langSpecFile($(loc2.StartLineColumn)): warning: Previous defined.#>);
        false
      }
      else
        true
    }
 
    ExpandTemplates(templateRootPath : string, outputPath : string, vars : Seq[string * string], config : CommandPromptReader) : void
    {
      unless (Directory.Exists(outputPath))
      {
        _ = Directory.CreateDirectory(outputPath);
        assert(true);
      }
        
      foreach (file in Directory.EnumerateFiles(templateRootPath))
      {
        def fileName = Path.GetFileName(file);
        def outFile = Path.Combine(outputPath, ExpandTemplateText(fileName, vars));
        ExpandTemplate(file, outFile, vars, config);
      }

      foreach (dir in Directory.EnumerateDirectories(templateRootPath))
      {
        def dirName = Path.GetFileName(dir);
        def outDir = Path.Combine(outputPath, ExpandTemplateText(dirName, vars));
        ExpandTemplates(Path.Combine(templateRootPath, dirName), outDir, vars, config);
      }
    }
    
    ExpandTemplateText(templateText : string, vars : Seq[string * string]) : string
    {
      def templateBuilder = StringBuilder(templateText, templateText.Length + templateText.Length / 10);
      
      foreach ((name, value) in vars)
        _ = templateBuilder.Replace(name, value);
      
      def result = templateBuilder.ToString();
      result
    }
    
    ExpandTemplate(templatePath : string, outputPath : string, vars : Seq[string * string], config : CommandPromptReader) : void
    {
      def outputPath2     = Path.GetFullPath(Path.Combine(config.OutputPath, outputPath));
      def outputDir       = Path.GetDirectoryName(outputPath2);

      unless (Directory.Exists(outputDir))
        _ = Directory.CreateDirectory(outputDir);
      
      unless (IsUtf8File(templatePath))
      {
        File.Copy(templatePath, outputPath2, overwrite=true);
        return;
      }
      
      def templateText    = File.ReadAllText(templatePath, Encoding.UTF8);
      def result          = ExpandTemplateText(templateText, vars);

        
      File.WriteAllText(outputPath2, result, Encoding.UTF8);
      
      when (result.Contains("XX"))
        Error($<#$templatePath: error: The template contains unreplaced placeholders.#>);
    }
  }
}

namespace Nitra
{
  public abstract partial class Language : AstBase[IAst]
  {
    public ProjectName : string { get { Name + "VsPackage"} }
  }

  public abstract partial class QualifiedIdentifier : AstBase[IAst]
  {
    public sealed partial class Concrete : QualifiedIdentifier
    {
      public override ToString() : string
      {
        $<#..$(this.Parts; ".")#>
      }
    }
  }
}