using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;

using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Linq;

module Program
{
  Main(args : array[string]) : void
  {
    when (args.Length < 1 || !Path.GetExtension(args[0]).Equals(".nlang", StringComparison.InvariantCulture))
    {
      WriteLine("Usage: Nitra.LanguageCompiler.exe NitraLanguageSpecFile.nlang (NitraParserAssebly.dll)*");
      return;
    }
    
    def langSpecFile = Path.GetFullPath(args[0]);
    
    when (!File.Exists(langSpecFile))
    {
      WriteLine($"The '$langSpecFile' file does not exists.");
      return;
    }
    
    def spec = File.ReadAllText(langSpecFile);
    
    def source      = SourceSnapshot(spec);
    def parserHost  = ParserHost();
    def parseResult = LangSpec.Language(source, parserHost);
    unless (parseResult.IsSuccess)
    {
      foreach(error in parseResult.GetErrors())
      {
        def (line, col) = error.Location.StartLineColumn;
        Debug.WriteLine($<#$langSpecFile($line:$col): error: $(error.Message)#>);
      }
      return;
    }
    
    def parseTree = LangSpecParseTree.Language.CreateParseTree(parseResult);
    def ast       = DeclarationRoot.Create(null, parseTree);
    ast.EvalProperties();
    def lang = ast.Content;
    WriteLine("Lang: " + lang.Name);
    match (lang.StartRules)
    {
      | x1 :: x2 :: _ => 
        def loc1 = Location(source, x1.Span);
        def loc2 = Location(source, x2.Span);
        WriteLine($<#$langSpecFile($(loc1.StartLineColumn)): error: Start rule defined twice.#>);
        WriteLine($<#$langSpecFile($(loc2.StartLineColumn)): warning: Previous defined.#>);
        
      | [] => 
        def loc = Location(source, lang.Span);
        WriteLine($<#$langSpecFile($(loc.StartLineColumn)): error: No start rule defined.#>);
        
      | _ =>
        foreach (startRule in lang.StartRules)
          WriteLine("module: " + startRule.Module + " rule: " + startRule.Rule);
    }
    foreach (m in lang.SyntaxModules)
      WriteLine(": " + m.Module);
    foreach (spanClasse in lang.SpanClasses)
      WriteLine("span classe " + spanClasse.Name + " = " + spanClasse.DefaultForegroundColor);
      
    _ = ReadLine();
  }
  
  //CheckStartRule()
}

namespace Nitra
{
  public abstract partial class QualifiedIdentifier : AstBase[IAst]
  {
    public sealed partial class Concrete : QualifiedIdentifier
    {
      public override ToString() : string
      {
        $<#..$(this.Parts; ".")#>
      }
    }
  }
}