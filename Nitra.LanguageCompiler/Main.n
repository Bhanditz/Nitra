using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.LanguageCompiler.Utils;

using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Linq;

module Program
{
  Main(args : array[string]) : void
  {
    when (args.Length < 1 || !Path.GetExtension(args[0]).Equals(".nlang", StringComparison.InvariantCulture))
    {
      WriteLine("Usage: Nitra.LanguageCompiler.exe NitraLanguageSpecFile.nlang (NitraParserAssebly.dll)*");
      return;
    }
    
    def langSpecFile = Path.GetFullPath(args[0]);
    
    when (!File.Exists(langSpecFile))
    {
      WriteLine($"The '$langSpecFile' file does not exists.");
      return;
    }
    
    def spec = File.ReadAllText(langSpecFile);
    
    def source = SourceSnapshot(spec);
    def parserHost = ParserHost();
    def parseResult = LangSpec.Language(source, parserHost);
    unless (parseResult.IsSuccess)
    {
      foreach(error in parseResult.GetErrors())
      {
        def (line, col) = error.Location.StartLineColumn;
        Debug.WriteLine($<#$langSpecFile($line:$col): error: $(error.Message)#>);
      }
      return;
    }
    
    def parseTree = LangSpecParseTree.Language.CreateParseTree(parseResult);
    def ast       =  DeclarationRoot.Create(null, parseTree);
    _ = ast;
    WriteLine("Hi!");
    _ = ReadLine();
  }
  
  //CheckStartRule()
}