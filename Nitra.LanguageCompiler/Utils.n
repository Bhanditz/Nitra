using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.Linq;
using System.Security.Cryptography;
using System.Windows.Media;
using System.Reflection;

namespace Nitra.LanguageCompiler
{
  module Utils
  {
    public ExtensionToName(ext : string) : string
    {
      assert3(ext != null && ext.Length > 1);
      
      def ext2 = if (ext[0] == '.') ext.Substring(1) else ext;
      ToCamel(ext2.ToLowerInvariant())
    }
    
    public ToCamel(str : string) : string
    {
      assert3(str != null && str.Length > 0);

      match (str.Length)
      {
        | 1 => str.ToUpperInvariant()
        | _ => char.ToUpperInvariant(str[0]) + str.Substring(1)
      }
    }
    
    public ParseHex(str : string) : byte
    {
      mutable result;
      
      foreach (ch :> int in str)
      {
        result <<= 4;
        if (ch >= '0' && ch <= '9')
          result |= ch - '0';
        else if (ch >= 'a' && ch <= 'f')
          result |= 0xA + ch - 'a';
        else if (ch >= 'A' && ch <= 'F')
          result |= 0xA + ch - 'A';
        else
          assert3(false);
      }
      
      result :> byte
    }

    public NameToColor : Dictionary[string, Color];
    public ColorToName : Dictionary[Color, string];

    this()
    {
      NameToColor  = Dictionary();
      ColorToName  = Dictionary();

      foreach (property when property.PropertyType == typeof(Color) in typeof(Colors).GetProperties(BindingFlags.Public %| BindingFlags.Static))
      {
        def color = property.GetValue(null, null) :> Color;
        NameToColor[property.Name] = color;
        ColorToName[color]         = property.Name;
      }
    }

    public ColorToString(color : Color, namePrefix : string = null) : string
    {
      mutable name;

      when (ColorToName.TryGetValue(color, out name))
      {
        if (namePrefix == null)
          return name;
        else
          return namePrefix + name;
      }

      color.ToString()
    }
    
    public IsUtf8File(path : string) : bool
    {
      using (file = IO.File.OpenRead(path))
      {
        file.ReadByte() == 0xEF
        && file.ReadByte() == 0xBB
        && file.ReadByte() == 0xBF
      }
    }
    
    public CreateSnk(path : string) : void
    {
      def parms = CspParameters();
      parms.KeyNumber = 2;

      def provider = RSACryptoServiceProvider(parms);
      def ary = provider.ExportCspBlob(!provider.PublicOnly);
      IO.File.WriteAllBytes(path, ary);
      //def snk = StrongNameKeyPair(ary);
      //def publicKey = snk.PublicKey;
    }
    
    public Error(msg : string) : void
    {
      WriteLine(msg);
      Debug.WriteLine(msg);
    }
  } // module
} // namespace
