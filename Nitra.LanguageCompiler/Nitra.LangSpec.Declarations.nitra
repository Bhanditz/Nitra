using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Color = System.Drawing.Color;

namespace Nitra
{
  declaration QualifiedIdentifier
  {
    Parts : Reference*;
  }

  declaration Language
  {
    out FileExtensions : list<ParsedValue<string>>              = Properties.FileExtensionsOut;
    out SpanClasses    : list<LanguageBody.SpanClassDefinition> = Properties.SpanClassesOut;
    out StartRules     : list<LanguageBody.StartRule>           = Properties.StartRulesOut;
    out SyntaxModules  : list<LanguageBody.SyntaxModule>        = Properties.SyntaxModulesOut;

    Properties.FileExtensionsIn = [];
    Properties.SpanClassesIn    = [];
    Properties.StartRulesIn     = [];
    Properties.SyntaxModulesIn  = [];

    Name       : Reference;
    Properties : LanguageBody*;
  }

  declarations LanguageBody
  {
    inout FileExtensions : list<ParsedValue<string>>;
    inout SpanClasses    : list<LanguageBody.SpanClassDefinition>;
    inout StartRules     : list<LanguageBody.StartRule>;
    inout SyntaxModules  : list<LanguageBody.SyntaxModule>;

    | SpanClassDefinition
      {
        SpanClassesOut = this :: SpanClassesIn;

        Name   : Reference;
        DefaultForegroundColor : ParsedValue<Color>;
      }

    | StartRule
      {
        StartRulesOut = this :: StartRulesIn;

        Module : QualifiedIdentifier;
        Rule   : QualifiedIdentifier;
      }

    | SyntaxModule
      {
        SyntaxModulesOut = this :: SyntaxModulesIn;

        Module : QualifiedIdentifier;
      }
    | Extension
      {
        FileExtensionsOut = FileExtension :: FileExtensionsIn;

        FileExtension : ParsedValue<string>;
      }
  }

  map syntax LangSpec.QualifiedIdentifier -> QualifiedIdentifier
  {
    Parts.Item1 -> Parts;
  }

  map syntax LangSpec.Language -> Language
  {
    Name       -> Name;
    Properties -> Properties;
  }

  map syntax LangSpec.LanguageBody -> LanguageBody
  {
    | SpanClassDefinition { Name -> Name; DefaultForegroundColor = ParsedValue(DefaultForegroundColor.Location.Span, DefaultForegroundColor.Value()); }
    | Extension           { FileExtension = ParsedValue(FileExtension, GetText(FileExtension)); }
    | StartRule           { Module -> Module; Rule -> Rule; }
    | SyntaxModule        { Module -> Module;  }
  }
}
