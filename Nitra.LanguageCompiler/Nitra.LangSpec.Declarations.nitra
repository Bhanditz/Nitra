using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Color = System.Windows.Media.Color;

namespace Nitra
{
  declaration QualifiedIdentifier
  {
    Parts : Reference*;
  }

  declaration Language
  {
    Name       : Reference;
    Properties : LanguageProperty*;

    decompose Properties
    {
      Company                 : LanguageProperty.Company;
      FileExtensions          : LanguageProperty.FileExtension+;
      SpanClasses             : LanguageProperty.SpanClassDefinition*;
      StartSyntaxModule       : LanguageProperty.StartSyntaxModule;
      AdditionalSyntaxModules : LanguageProperty.SyntaxModule*;
    }
  }

  declarations LanguageProperty
  {
    | SpanClassDefinition
      {
        Name                   : Reference;
        DefaultForegroundColor : Color;
      }

    | SyntaxModule
      {
        Module  : QualifiedIdentifier;
      }

    | StartSyntaxModule
      {
        Module    : QualifiedIdentifier;
        StartRule : QualifiedIdentifier;
      }

    | FileExtension
      {
        Ext : string;
      }

    | Company
      {
        Name  : string;
      }
  }

  map syntax LangSpec.QualifiedIdentifier -> QualifiedIdentifier
  {
    Parts.Item1 -> Parts;
  }

  map syntax LangSpec.Language -> Language
  {
    Name       -> Name;
    Properties -> Properties;
  }

  map syntax LangSpec.LanguageProperty -> LanguageProperty
  {
    | Company             { Name = ParsedValue(Name, GetText(Name)); }
    | SpanClassDefinition { Name -> Name; DefaultForegroundColor = ParsedValue(DefaultForegroundColor.Location.Span, DefaultForegroundColor.Value(AstContext.CompilerMessages)); }
    | FileExtension       { Ext = ParsedValue(Ext, GetText(Ext)); }
    | SyntaxModule(_, _, moduleName, None, _)                    -> SyntaxModule      { moduleName -> Module; }
    | SyntaxModule(_, _, moduleName, Some((_, _, startRule)), _) -> StartSyntaxModule { moduleName -> Module; startRule -> StartRule; }
  }
}
