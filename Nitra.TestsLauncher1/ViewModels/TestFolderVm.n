using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;
using System.IO;
using Nitra.Declarations;
using Nitra.ProjectSystem;

namespace Nitra.ViewModels
{
  public class TestFolderVm : FullPathVm, ITest, ITestTreeContainerNode
  {
    public TestPath: string { get; private set }
    public TestSuite: TestSuiteVm { get; private set }
    public Name: string { get { Path.GetFileNameWithoutExtension(TestPath) }}
    public Tests: ObservableCollection[TestVm] { get; private set }
    public Children: Seq[ITest] { get { Tests }}
    public override Hint: string { get { "TestFolder" }}
    public Statistics: StatisticsTask.Container { get; private set }
    public ParsingStatistics: StatisticsTask.Container { get; private set }
    public ParseTreeStatistics: StatisticsTask.Container { get; private set }
    public AstStatistics: StatisticsTask.Container { get; private set }
    public DependPropsStatistics: StatisticsTask.Container { get; private set }
    public Project: FsProject[IAst] { get; private set }
    
    public override ToString(): string { Name }
    public CalcDependProps(_testVm: TestVm): void {}
    public Remove(): void {}
    public Update(_code: string, _gold: string): void {}

    public this(testPath: string, testSuite: TestSuiteVm)
    {
      base(testSuite, testPath);
      def solution = FsSolution.[IAst]();
      this.Project = FsProject.[IAst](solution, testPath, testSuite.Libs.Select(
        lib =>
        {
          def file = lib :> FileLibReference;
          if (file == null || Path.IsPathRooted(file.Path)) lib
          else FileLibReference(Path.Combine(@"..", file.Path))
        }));

      Statistics = StatisticsTask.Container("Total");
      ParsingStatistics = Statistics.ReplaceContainerSubtask("Parsing");
      ParseTreeStatistics = Statistics.ReplaceContainerSubtask("ParseTree");
      AstStatistics = Statistics.ReplaceContainerSubtask("Ast", "AST Creation");
      DependPropsStatistics = Statistics.ReplaceContainerSubtask("DependProps", "Dependent properties");

      TestPath = testPath;
      TestSuite = testSuite;
      when (TestSuite.TestState == TestState.Ignored)
        TestState = TestState.Ignored;

      def testSuitePath = base.FullPath;
      def tests = ObservableCollection.[TestVm]();

      def paths = Directory.GetFiles(testSuitePath, "*.test");
      foreach (path in paths.OrderBy(f => f))
        tests.Add(TestVm(path, this));

      Tests = tests;
    }
  }
}