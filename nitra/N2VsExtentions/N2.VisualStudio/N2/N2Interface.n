using N2;
using System.Reflection;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace N2.VisualStudio
{
  class N2Interface
  {
    //static standardAssemblies = HashSet(["Nemerle.dll", "Nemerdsle.Compiler.dll", "N2.dll", "N2.Compiler.dll"]);
    
    mutable _modules : list[string];
    //_grammarDescriptors : Hashtable[string, GrammarDescriptor] = Hashtable();
    _ruleDescriptor : RuleDescriptor;
    
    public this(language : Language)
    {
      _modules = language.Modules;
      
      def grammarsAttr = typeof(GrammarsAttribute);
      def startGrammar = language.Grammar;
      def startRule    = language.StartRule;
      
      foreach (file in _modules)
      {
        def asm   = Assembly.LoadFrom(file);
        def attrs = asm.GetCustomAttributesData();
      
        // Для каждого GrammarsAttribute...
        foreach (attr when attr.Constructor.DeclaringType.Equals(grammarsAttr) in attrs)
        {
          // ... получаем список GrammarsAttribute-ов...
          def attrInstances = asm.GetCustomAttributes(grammarsAttr, false) :> array[GrammarsAttribute];
          
          // в GrammarsAttribute описаны грамматики (расширения парсеров). Перебираем их...
          foreach (attrInstance in attrInstances)
          foreach (type in attrInstance.Grammars)
          {
            // Парсер описвается GrammarDescriptor-ом. Он доступен через статическое поле "StaticDescriptor".
            // Получаем StaticDescriptor-ы и добавляем их в хэш-таблицу.
            def prop = type.GetProperty("StaticDescriptor");
            def grammarDescriptor = prop.GetValue(null, null) :> GrammarDescriptor;
            // TODO: FIXME: Могут существовать StaticDescriptor-ы с одинаковым полным именем.
            // В мапе нужно хранить их список, а не конекретные экзепляры.
            
            //_grammarDescriptors.Add(grammarDescriptor.FullName, grammarDescriptor);
            
            when (grammarDescriptor.FullName == startGrammar)
            {
              foreach (rule when rule.Name == startRule in grammarDescriptor.Rules)
              {
                _ruleDescriptor = rule;
                return;
              }
            }
          }
        }
      }
    }
    
    public Parse(sourceSnapshot : SourceSnapshot) : Ast
    {
      _ruleDescriptor.Parse(sourceSnapshot)
    }
  }
}
