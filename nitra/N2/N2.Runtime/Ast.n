using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using N2.Internal;

namespace N2
{
  public class Ast : Located
  {
    public Errors : list[ErrorInfo] { get; }

    public this(location : Location, errors : list[ErrorInfo])
    {
      base(location);
      Errors = errors;
    }

    public virtual GetErrors(errors : List[ErrorInfo]) : void
    {
      errors.AddRange(Errors)
    }

    public virtual GetSpans(spans : List[SpanInfo]) : void
    {
      GetSpans(spans, 0, int.MaxValue)
    }

    public virtual GetSpans(spans : List[SpanInfo], startPos : int, endPos : int) : void
    {
      _ = spans;
      _ = startPos;
      _ = endPos;
    }

    public virtual GetDescendantSpans(spans : List[SpanInfo]) : void
    {
      _ = spans;
    }

    public GetDescendantSpansLazy(startPos : int) : IEnumerable[SpanInfo]
    {
      def spans = List();
      GetSpans(spans, startPos, int.MaxValue);
      mutable i = 0;
      while (i < spans.Count && spans[i].Location.StartPos < startPos)
        ++i;
      while (i < spans.Count)
      {
        yield spans[i];
        ++i;
      }
    }

    public virtual GetDump() : AstDump
    {
      AstDump.Ast(GetType().FullName, []) // stub
    }

    public override ToString() : string
    {
      GetDump().ToString()
    }
  }
}
