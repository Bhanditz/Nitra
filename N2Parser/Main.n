using Nemerle.Collections;
using Nemerle.Parser;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Console;
using System.Linq;

using SCG = System.Collections.Generic;

[ParserGrammar(Options = EmitDebugSources,
  parsergrammar
  {
    using N2Parser;

    [Ast()]
    Modifier : Ast;

    [Ast(ModifierList)]
    Modifiers : Ast = Modifier*;

    [Ast(KeyWord)] New       is Modifier = "new"S;
    [Ast(KeyWord)] Public    is Modifier = "public"S;
    [Ast(KeyWord)] Protected is Modifier = "protected"S;
    [Ast(KeyWord)] Internal  is Modifier = "internal"S;
    [Ast(KeyWord)] Private   is Modifier = "private"S;
    [Ast(KeyWord)] Partial   is Modifier = "partial"S;
    [Ast(KeyWord)] Virtual   is Modifier = "virtual"S;
    [Ast(KeyWord)] Volatile  is Modifier = "volatile"S;
    [Ast(KeyWord)] Static    is Modifier = "static"S;
    [Ast(KeyWord)] Readonly  is Modifier = "readonly"S;
    [Ast(KeyWord)] Sealed    is Modifier = "sealed"S;
    [Ast(KeyWord)] Override  is Modifier = "override"S;
    [Ast(KeyWord)] Abstract  is Modifier = "abstract"S;
    [Ast(KeyWord)] Extern    is Modifier = "extern"S;
    [Ast(KeyWord)] Unsafe    is Modifier = "unsafe"S;
  }
)]
public abstract class ModifierParser
{}

[ParserGrammar(Options = EmitDebugSources,
  parsergrammar
  {
    using N2Parser;

    [Ast(Open, Expressions, Close)]
    AttributeArgs : Ast = "("s (Expression, ","s)* ")"s;

    [Ast(Name, Args)]
    Attribute : Ast = Identifier AttributeArgs?;

    [Ast(Open, Attributes, Comma, Close)]
    AttributeSection          : Ast = "["s (Attribute, ","s)+ (","s)? "]"s;

    [Ast(Sections)]
    Attributes                : Ast = AttributeSection*;
  }
)]
public abstract class AttributeParser
{}

[ParserGrammar(Options = EmitDebugSources,
  parsergrammar
  {
    using ModifierParser;
    using AttributeParser;
    any = ['\u0000'..'\uFFFF'];

    [StartRule, Ast(Body)]
    CompilationUnit           : Ast = s NamespaceBody !any;

    [Ast(Members)]
    NamespaceBody             : Ast = NamespaceMember*;

    [Ast()]
    NamespaceMember           : Ast;

    [Ast(UsingLit, NsOrTypeName, Semicolon)]
    UsingImportDeclaration    is NamespaceMember = "using"S QualifiedIdentifier ";"s;

    [Ast(UsingLit, Alias, EqLit, NsOrTypeName, Semicolon)]
    UsingAliasDeclaration     is NamespaceMember = "using"S Identifier "="s QualifiedIdentifier ";"s;

    [Ast(NsLit, NsOrTypeName, OpenLit, Body, CloseLit)]
    NamespaceDeclaration      is NamespaceMember = "namespace"S QualifiedIdentifier "{"s Namespace { NamespaceBody } "}"s;
    //GlobalAttributDeclaration is NamespaceMember;
    //ClassDeclaration          is NamespaceMember;

    IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
    IdentifierNext  = IdentifierFirst | ['0'..'9'];
    IdentifierBody  = IdentifierFirst IdentifierNext*;
    Identifier : NToken = IdentifierBody s;

    [Ast(Identifiers)]
    QualifiedIdentifier : Ast = (Identifier, "."s)+;

    //[Ast(Attributes, Modifiers, Class, Name, OpenLit, CloseLit)]
    //Class is NamespaceMember = Attributes Modifiers "class"S Identifier "{"s "}"s;

    [Ast()]
    Expression : Ast;

    #region Line terminators

    newLineCharacter   = '\n'
                       | '\r'
                       | '\u2028'    /*  line separator       */
                       | '\u2029';   /*  paragraph separator  */
    newLine   = "\r\n" | newLineCharacter;

    #endregion

    #region White space

    whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */

    #endregion

    #region Spacer

    space = whitespace | newLine;

    s : void = space*;                      /* optional spacer          */
    S : void = !IdentifierNext s; /* identifier break spacer  */
    #endregion
  }
)]
public partial abstract class N2Parser
{
  static _grammarDescriptors : Hashtable[string, GrammarDescriptor] = Hashtable();
  
  static this()
  {
    def path               = Path.GetDirectoryName(Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);
    def files              = Directory.GetFiles(path, "*.dll");
    def grammarsAttr       = typeof(GrammarsAttribute);
    def standardAssemblies = HashSet(["Nemerle.dll", "Nemerle.Compiler.dll", "Nemerle.Parser.dll", "Nemerle.Parser.Macro.dll"]);
    
    foreach (file when !standardAssemblies.Contains(file) in files)
    {
      def asm   = Assembly.LoadFrom(file);
      def attrs = asm.GetCustomAttributesData();
      
      foreach (attr when attr.Constructor.DeclaringType.Equals(grammarsAttr) in attrs)
      {
        def attrInstances = asm.GetCustomAttributes(grammarsAttr, false) :> array[GrammarsAttribute];
          
        foreach (attrInstance in attrInstances)
        foreach (type in attrInstance.Grammars)
        {
          def prop = type.GetProperty("StaticDescriptor");
          def value = prop.GetValue(null, null) :> GrammarDescriptor;
          _grammarDescriptors.Add(value.FullName, value);
        }
      }
    }
  }
  
  UsingImportDeclarationHandler(usingImport : UsingImportDeclaration) : void
  {
    | UsingImportDeclaration.Ast(_, QualifiedIdentifier.Ast as nsOrTypeName, _) =>
      mutable grammarDescriptor;
      when (_grammarDescriptors.TryGetValue(nsOrTypeName.Path, out grammarDescriptor))
        Parser.AddGrammar(grammarDescriptor);
    | _ => ()
  }

  NamespaceScopeBegin() : void
  {
    Parser.PushState();
  }

  NamespaceScopeEnd(_ : bool) : void
  {
    Parser.PopState();
  }

  public partial class QualifiedIdentifier : Nemerle.Parser.Ast
  {
    public partial class Ast : QualifiedIdentifier
    {
      public Path : string { get { $<#..$(Identifiers[0]; "."; GetText)#> } }
    }
  }
}


module Program
{
  Main() : void
  {
    def test(code : string) : void
    {
      def parser = N2Parser.GrammarImpl();
      match (parser.ParseCompilationUnit(code))
      {
        | None      =>
          WriteLine($"Fail:\n\"$code\"");
          def (pos, tokens) = parser.Parser.GetErrors();
          def (line, pos) = parser.ParsingSource.PositionToLineColumn(pos);
          foreach (token in tokens)
          {
            def type = if (token.IsLiteral) "literal" else "   rule";
            WriteLine($"  $line:$pos expected $type : \"$(token.Name)\" in rule $(token.Rule.Grammar.Name).$(token.Rule.Name)");
          }

        | Some(ast) =>
          //WriteLine($"Ok:   \"$code\" AST: $(printAst(ast))");
          _ = ast;
          WriteLine($"OK:\n\"$code\"");
      }
      WriteLine();
    }
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1
  type X - A.B;
}
    #>);
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1;
  type X - A.B;
}
    #>);
    
    test(<#
namespace Ns1
{
  namespace Ns2
  {
    using N2ParserExtensions.N2ParserExtension1;
    type X = A.B;
  }
using Y;
    #>);
    _ = ReadKey();
  }
}