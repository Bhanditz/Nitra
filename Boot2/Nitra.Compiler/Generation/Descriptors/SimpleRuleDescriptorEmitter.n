using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class SimpleRuleDescriptorEmitter : RuleDescriptorEmitter[SimpleRuleSymbol]
  {
    protected override BaseType  : PExpr  { get <[ Nitra.SimpleRuleDescriptor ]> }
    protected override ClassName : string { get "_N_SimpleRuleDescriptor_#" }

    public override DefineDescriptor() : void
    {
      base.DefineDescriptor();
      DefineNewParserMethod(<[ Nitra.Internal.SimpleRuleParser ]>, []);
      DefineIsStartRuleProperty();

      def createParseTreeExpr = MakeRuleSelectorForParseTree(ruleSymbol => <[ $(Owner.Environment.GetParseTreeType(ruleSymbol) : typed).CreateParseTree(startPos, endPos, parseResult, grammar) ]>);
      DescriptorTb.DefineConditional(<[ decl:
        public override CreateParseTree(startPos : int, endPos : int, parseResult : Nitra.ParseResult, grammar : Nitra.CompositeGrammar) : Nitra.ParseTree
        {
          IgnoreParams();
          $createParseTreeExpr
        }
      ]>);
    }
  }
}
