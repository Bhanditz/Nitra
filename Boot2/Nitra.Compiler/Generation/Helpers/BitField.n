using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  public sealed class BitField
  {
    public FieldName        : string { get; }
    public Mask             : int    { get; }
    public IsFromFirstField : bool   { get; }

    public Read() : PExpr
    {
      <[ unchecked(this.$(FieldName : usesite) %&& $(Mask : int)) ]>
    }

    public Set() : PExpr
    {
      <[ unchecked(this.$(FieldName : usesite) = this.$(FieldName : usesite) %| $(Mask : int)) ]>
    }

    public Clear() : PExpr
    {
      <[ unchecked(this.$(FieldName : usesite) = this.$(FieldName : usesite) %& $(~Mask : int)) ]>
    }

    public static CheckAll(bits : Seq[BitField]) : PExpr
    {
      mutable acc : PExpr;
      foreach (g in bits.GroupBy(bit => bit.FieldName))
      {
        mutable mask;
        foreach (bit in g)
          mask |= bit.Mask;

        PExprUtils.CombineAnd(ref acc, <[ unchecked(this.$(g.Key : usesite) & $(mask : int) == $(mask : int)) ]>);
      }
      acc ?? <[ false ]>
    }
  }
}
