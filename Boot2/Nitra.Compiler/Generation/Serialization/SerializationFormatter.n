using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization
{
  public abstract class SerializationFormatter
  {
    public abstract WriteParameters : list[SerializationParameter] { get; }
    public abstract ReadParameters  : list[SerializationParameter] { get; }

    public abstract EmitFatalError(message : PExpr) : PExpr;

    public abstract WriteTag(tag : TypeTag) : PExpr;
    public abstract ReadTag() : PExpr;

    public abstract WritePrimitive(tag : TypeTag, obj : PExpr) : PExpr;
    public abstract ReadPrimitive(tag : TypeTag) : PExpr;

    public WriteString(text : string) : PExpr
    {
      WriteString(<[ $(text : string) ]>)
    }

    public WriteString(text : PExpr) : PExpr
    {
      WritePrimitive(TypeTag.String, text)
    }

    public WriteInt32(value : PExpr) : PExpr
    {
      WritePrimitive(TypeTag.Int32, value)
    }

    public ReadString() : PExpr
    {
      ReadPrimitive(TypeTag.String)
    }

    public ReadInt32() : PExpr
    {
      ReadPrimitive(TypeTag.Int32)
    }

    public WriteEnd() : PExpr
    {
      WriteTag(TypeTag.Empty);
    }

    public TestTypeTag(memberName : PExpr, typeTag : PExpr, expectedTag : TypeTag) : PExpr
    {
      match (typeTag)
      {
        | <[ $(value : byte) ]>
        | <[ $(value : byte) :> $_ ]> =>
          assert2(value == expectedTag :> byte, $"Statically passed type tag '$value' does not match expected value '$expectedTag'.");
          <[ () ]>

        | _ =>
          <[
            when ($typeTag :> byte != $(expectedTag :> byte))
              $(EmitFatalError(<[ "Type mismatch for member '" + $memberName + "'." ]>));
          ]>
      }
    }

    public WriteRecordMembers[TMember](body : SCG.List[PExpr], members : Seq[TMember], obj : void -> PExpr, makeStatement : PExpr * TMember -> PExpr) : void
      where TMember : RecordMemberInfo
    {
      foreach (member in members)
      {
        def expr = <[
          $(WriteTag(member.Builder.Tag));
          $(WriteString(member.NormalizedName));
          $(member.Builder.Write(<[ $(obj()).$(member.OriginalName : usesite) ]>));
        ]>;
        body.Add(makeStatement(expr, member));
      }
      body.Add(WriteEnd());
    }

    public ReadRecordMembers[TMember](body : SCG.List[PExpr], members : Seq[TMember], makeAssign : PExpr * TMember -> PExpr) : void
      where TMember : RecordMemberInfo
    {
      def fieldNameCases = SCG.List();
      foreach (member in members)
      {
        def expr = makeAssign(member.Builder.Read(<[ fieldName ]>, <[ typeTag ]>), member);
        fieldNameCases.Add(<[ case: | $(member.NormalizedName : string) => $expr ]>);
      }
      def unknownFieldCase = EmitFatalError(<[ "Unknown member '" + fieldName + "'." ]>);
      if (fieldNameCases.Count > 0)
      {
        fieldNameCases.Add(<[ case: | _ => $unknownFieldCase ]>);

        body.Add(<[
          def loop()
          {
            def typeTag = $(ReadTag());
            when (typeTag != Nitra.Serialization.TypeTag.Empty)
            {
              def fieldName = $(ReadString());
              match (fieldName)
              {
                ..$fieldNameCases
              }
              loop()
            }
          }
        ]>);
        body.Add(<[ loop() ]>);
      }
      else
      {
        body.Add(<[
          def typeTag = $(ReadTag());
          when (typeTag != Nitra.Serialization.TypeTag.Empty)
          {
            def fieldName = $(ReadString());
            $unknownFieldCase;
          }
        ]>);
      }
    }
  }
}
