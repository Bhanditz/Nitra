using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Compiler
{
  internal sealed class NemerleCompilerMessages : ICompilerMessages
  {
    public ErrorCount : int { get; private set; }

    public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
    {
      match (messageType)
      {
        | FatalError =>
          ErrorCount++;
          Message.FatalError(loc.NLocation(), msg)

        | Error =>
          ErrorCount++;
          Message.Error(loc.NLocation(), msg)

        | Warning =>
          if (num > 0)
            Message.Warning(num, loc.NLocation(), msg)
          else
            Message.Warning(loc.NLocation(), msg)

        | Hint => Message.Hint(loc.NLocation(), msg)
      }
    }

    public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
    {
      ReportMessage(messageType, loc, msg, num);
      FakeRootCompilerMessages(this)
    }

    public Remove(_predicate : Func[Guid, Location, bool]) : void
    {
    }

    public SetFutureMessagesKind(_kind : Guid) : void
    {
    }
  }
}
