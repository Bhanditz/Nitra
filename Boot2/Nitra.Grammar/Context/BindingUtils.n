using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  internal module BindingUtils
  {
    public MakeBindingResult[T](name : Location, newCandidates : list[T]) : BindingResult[T]
      where T: Symbol
    {
      match (newCandidates)
      {
        | []  => UnboundBindingResult(name)
        | [_] => BindingResult(name, newCandidates, CompilerMessage.EmptyCompilerMessages)
        | _   => AmbiguousBindingResult(name, newCandidates)
      }
    }

    public UnboundBindingResult[T](name : Location) : BindingResult[T]
    {
      using (msgs = CompilerMessageList())
      {
        msgs.Error(name, $"Unbound name '$(name.GetText())'");
        BindingResult(name, [], msgs.GetMessages())
      }
    }

    public AmbiguousBindingResult[T](name : Location, result : list[T]) : BindingResult[T]
      where T: Symbol
    {
      using (msgs = CompilerMessageList())
      {
        using (rootMsg = msgs.RootError(name, $"'$(name.GetText())' is an ambiguous reference (see related messages)"))
          foreach (s in result)
            foreach (loc in s.Locations)
              rootMsg.Hint(loc, "Previous definition.");
        BindingResult(name, result.OfType(), msgs.GetMessages())
      }
    }
  }
}
