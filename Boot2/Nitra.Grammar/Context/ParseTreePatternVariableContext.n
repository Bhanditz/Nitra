using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  [Record]
  public class ParseTreePatternVariableContext : SimpleNameContext[ParseTreePatternVariableSymbol]
  {
    [RecordIgnore] mutable variables        : Map[string, ParseTreePatternVariableSymbol];
    [RecordIgnore]         currentVariables : Hashtable[string, ParseTreePatternVariableSymbol] = Hashtable();

    public override SymbolMap : Map[string, ParseTreePatternVariableSymbol]
    {
      get
      {
        when (variables == null)
        {
          variables =
            match (this.TryGetParent.[ParseTreePatternVariableContext]())
            {
              | null   => Map(currentVariables.KeyValuePairs)
              | parent => parent.SymbolMap.ReplaceRange(currentVariables.KeyValuePairs)
            };
        }
        variables
      }
    }

    public AddVariable(newVariable : ParseTreePatternVariableSymbol) : void
    {
      assert(variables == null, "Context is frozen");

      mutable existingVariable;
      if (currentVariables.TryGetValue(newVariable.Name, out existingVariable))
      {
        using (relatedMessages = Project.RootError(newVariable.FirstLocation, $"Redefinition of pattern variable '$(newVariable.Name)'"))
          relatedMessages.Hint(existingVariable.FirstLocation, "Previous definition")
      }
      else
        currentVariables.Add(newVariable.Name, newVariable)
    }
  }
}
