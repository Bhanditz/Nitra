using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class TablePropertySymbol : PropertySymbol
  {
    [RecordIgnore]
    private mutable type : NType;

    public override Description : string  { get "table property" }
    public override Type        : NType
    {
      get
      {
        when (type == null)
        {
          type = Utils.MakeNTypeQualified(FirstLocation.FromEnd(), ["Nitra", "Declarations", "TableScope"]);
        }
        type
      }
    }
  }

  public sealed class ParsedTablePropertySymbol : TablePropertySymbol
  {
    private _node : G.SymbolMember.TableProperty;

    public this(node : G.SymbolMember.TableProperty, propertyContainer : PropertyContainerSymbol)
    {
      base(node.Name, node.Name.Value());
      _node             = node;
      PropertyContainer = propertyContainer;
      OverrideProperty  = SymbolRef.None(_node.Name.Location, false);
    }

    public override PropertyContainer : PropertyContainerSymbol   { get; }
    public override OverrideProperty  : SymbolRef[PropertySymbol] { get; }
  }
}
