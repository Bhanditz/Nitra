using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public abstract class MappableRuleTypeScope : RuleTypeScope
  {
    protected abstract GetElementType() : RuleTypeSymbol;
    protected abstract TryCreateMapSyntaxSymbol(prototype : MapSyntaxSymbol, context : DependentPropertyEvalContext) : MapSyntaxSymbol;

    protected static CreateMapSyntaxDeclaration(prototype : MapSyntaxSymbol) : ExternalDeclaration[MapSyntaxSymbol]
    {
      match (prototype.FirstDeclarationOrDefault)
      {
        | null with (file = SourceSnapshot.Default.File, span = NSpan())
        | d    with (file = d.File,                      span = d.Span) => ExternalDeclaration.[MapSyntaxSymbol](file, span, prototype.Name);
      }
    }

    protected static CreateMapSyntaxSymbol(decl : ExternalDeclaration[MapSyntaxSymbol], prototype : MapSyntaxSymbol, thisType : RuleTypeSymbol, returnType : AstTypeSymbol, context : DependentPropertyEvalContext) : MapSyntaxSymbol
    {
      def symbol            = decl.DefineSymbol();
      symbol.Parameters     = prototype.Parameters;
      symbol.ReturnType     = returnType;
      symbol.ParameterTypes = prototype.ParameterTypes;
      symbol.ThisType       = thisType;
      symbol.Type           = AstUtils.CreateFunctionType(decl, thisType, symbol.ParameterTypes, returnType, context);
      symbol.EvalProperties(context);
      symbol
    }

    protected override CreateMembers() : list[DeclarationSymbol]
    {
      match (GetElementType())
      {
        | SyntaxRuleSymbol(IsScopeEvaluated = true, Scope = scope) =>
          mutable symbols = LightList();
          scope.FindMany.[MapSyntaxSymbol](s => s.IsNameValid && s.IsReturnTypeEvaluated && s.IsParametersEvaluated, ref symbols);

          mutable result = [];
          mutable e      = symbols.GetEnumerator();
          when (e.MoveNext())
          {
            def context = DependentPropertyEvalContext();
            do
            {
              def symbol = TryCreateMapSyntaxSymbol(e.Current, context);
              when (symbol : object != null)
                result ::= symbol
            }
            while (e.MoveNext())
          }
          result

        | _ => []
      }
    }
  }
}
