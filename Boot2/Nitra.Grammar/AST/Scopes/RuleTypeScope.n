using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public abstract class RuleTypeScope : Scope
  {
    private mutable _members  : list[DeclarationSymbol];

    protected abstract CreateMembers() : list[DeclarationSymbol];
    
    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      when (_members : object == null)
        _members = CreateMembers();

      foreach (m is TSymbol in _members)
        when (m.IsNameValid && StringComparer.Ordinal.Equals(m.Name, reference.Text)) // TODO: add NameId to DeclarationSymbol
          results.Add(m);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      IgnoreParams();
      Enumerable.Empty()
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      when (_members : object == null)
        _members = CreateMembers();

      foreach (m is TSymbol in _members)
        when (predicate(m))
          results.Add(m);
    }

    public override ToString() : string
    {
      "rule"
    }
  }
}
