using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

[assembly: DefineSerialization(System.Drawing.Color,                    Write = Nitra.Internal.SerializationHelper.WriteColor, Read = Nitra.Internal.SerializationHelper.ReadColor)]
[assembly: DefineSerialization(Nemerle.Collections.Map[string, string], Write = Nitra.Internal.SerializationHelper.WriteMap,   Read = Nitra.Internal.SerializationHelper.ReadMap)]

namespace Nitra.Internal
{
  internal module SerializationHelper
  {
    public WriteColor(color : System.Drawing.Color, writer : IO.BinaryWriter, _metadataWriter : MetadataWriter) : void
    {
      writer.Write(color.ToArgb() : int);
    }

    public ReadColor(_memberName : string, _tag : Nitra.Serialization.TypeTag, reader : IO.BinaryReader, _metadataReader : MetadataReader) : System.Drawing.Color
    {
      System.Drawing.Color.FromArgb(reader.ReadInt32())
    }

    public WriteMap(map : Map[string, string], writer : IO.BinaryWriter, _metadataWriter : MetadataWriter) : void
    {
      writer.Write(map.Count : int);
      foreach ((key, value) in map)
      {
        writer.Write(key);
        writer.Write(value);
      }
    }

    public ReadMap(_memberName : string, _tag : Nitra.Serialization.TypeTag, reader : IO.BinaryReader, _metadataReader : MetadataReader) : Map[string, string]
    {
      def count  = reader.ReadInt32();
      def buffer = array(count);
      for (mutable i = 0; i < count; ++i)
      {
        def key   = reader.ReadString();
        def value = reader.ReadString();
        buffer[i] = (key, value);
      }
      Map(buffer)
    }
  }
}
