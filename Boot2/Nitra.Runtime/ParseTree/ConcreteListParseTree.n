using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Diagnostics;
using SCG = System.Collections.Generic;

namespace Nitra
{
  [DebuggerDisplay("Count = {Count}")]
  public sealed class ConcreteListParseTree[T] : ListParseTree[T]
    where T : IParseTree
  {
    private static applyItems : bool = CanApplyVisitor.[T]();

    public this(location : Location, items : array[T])
    {
      this.Location = location;
      this.items    = items;
    }

    public this(location : Location, items : SCG.List[T])
    {
      this(location, items.ToArray())
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    private         items             : array[T];
    public override Location          : Nitra.Location     { get }
    public override Count             : int                { get items.Length }
    public override Item[index : int] : T                  { get items[index] }

    public override Apply(visitor : ParseTreeVisitor) : ParseTree
    {
      visitor.Enter(this);
      mutable result = this;
      mutable isDirty;
      when (applyItems)
      {
        mutable newItems;
        for (mutable i = 0; i < items.Length; ++i)
        {
          def newItem = visitor.Visit(items[i] :> ParseTree) :> T;
          unless (ReferenceEquals(newItem, items[i]))
          {
            isDirty = true;
            when (newItems == null)
            {
              newItems = array(items.Length);
              Array.Copy(items, newItems, items.Length);
            }
            newItems[i] = newItem;
          }
        }
        when (isDirty)
          result = ConcreteListParseTree(this.Location, newItems);
      }
      visitor.Leave(this, result);
      result
    }

    public override UpdateItems(newItems : SCG.List[T]) : ListParseTree[T]
    {
      if (newItems.Count != items.Length)
        ConcreteListParseTree(this.Location, newItems)
      else
      {
        for (mutable i = 0; i < items.Length; ++i)
          unless (ReferenceEquals(newItems[i], items[i]))
            return ConcreteListParseTree(this.Location, newItems);
        this
      }
    }

    protected override GetUnderlyingArray() : array[T]
    {
      items
    }

    public override Contains(item : T) : bool
    {
      Array.IndexOf(items, item) >= 0
    }

    public override CopyTo(@array : array[T], arrayIndex : int) : void
    {
      Array.Copy(items, 0, @array, arrayIndex, items.Length)
    }

    public override IndexOf(item : T) : int
    {
      Array.IndexOf(items, item)
    }

    public override GetSlice(index : int, count : int) : ListParseTree[T]
    {
      when (index < 0 || index >= items.Length)
        throw ArgumentOutOfRangeException("index");

      when (count < 0 || index + count > items.Length)
        throw ArgumentOutOfRangeException("count");

      def thisLoc = this.Location;
      if (count == items.Length)
        this
      else if (count > 0)
      {
        def sliceItems = array(count);
        Array.Copy(items, index, sliceItems, 0, count);
        def startSpan = items[index].Span;
        def endSpan   = items[index + count - 1].Span;
        ConcreteListParseTree(Location(thisLoc.Source, startSpan, endSpan), sliceItems)
      }
      else
        EmptyListParseTree(Location(thisLoc.Source, items[index].Span.StartPos))
    }
  }
}
