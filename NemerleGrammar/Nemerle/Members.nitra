using Nitra;
using Nitra.Utils;
using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;
using Nitra.Typing.TypingUtils;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Compiler.Parsetree;

using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Nemerle
{
  syntax module Members
  {
    using Outline;
    using PrettyPrint;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using CStyleComments;

    using Nemerle.Literals;
    using Nemerle.NamerleIdentifiers;
    using Nemerle.TokenNames;
    using Nemerle.Types;
    
    syntax FunctionHeader = Identifier TypeParameters? "(" FormalParameters ")" ReturnTypeOpt=(":" AnyType)? TypeParameterConstraintsClauses?;

    ////////////////////////////////////////////////////////////////////////////////////
    // FormalParameters

    regex ParameterModifier = "ref" | "out" | "this" | "params";
    syntax DefaultArgument  = sm "=" Expression;
    syntax FormalParameter  = Attributes (ParameterModifier sm)? Name sm TypeOpt=(":" sm AnyType)? DefaultArgument?;
    syntax FormalParameters = (FormalParameter; "," sm; ?)*;

    //
    ////////////////////////////////////////////////////////////////////////////////////
  }
}
