namespace Namerle
{
  syntax module NamerleIdentifiers
  {
    using Outline;
    using PrettyPrint;
    using StandardSpanClasses;
    using Identifiers;
    using Whitespaces;

    using Namerle.TokenNames;
    using Namerle.Literals;
    using Namerle.Types;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

  // Contextual keywords:
  // "add" | "alias" | "ascending" | "assembly" | "by" | "descending" | "dynamic" | "equals" | "field" | "from" | "get" | "global"!!! | "group" |
  // "into" | "join" | "let" | "method" | "module" | "on" | "orderby" | "param" | "partial" | "property" | "remove" | "select" | "set" | "type" |
  // "typevar"!!! | "value" | "var" | "where" | "yield"

    regex KeywordToken
                  =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                    | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                    | "event"    | "mutable"    | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                    | "if"       | "when"       | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                    | "new"      | "null"       | "object"    | "where"     | "out"       | "override" | "params" | "private"     | "protected" | "public"
                    | "match"    | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                    | "struct"   | "macro"      | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                    | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while"
                    ;

    alias Name                = Identifier;
    alias QualifiedName       = QualifiedIdentifier;
    alias Char                = Any;

    [Keyword]
    token Keyword = Name=KeywordToken !IdentifierPartCharacters;

    /////////////////////////////////////////////////////////
    // Identifiers

    [Identifier]
    token Identifier = !Keyword At="@"? IdentifierBody;

    [ExplicitSpaces]
    syntax QualifiedIdentifier  = QualifiedAlias? (QualifiedIdentifierPart; s "." s)+; // TODO: In C# spec. it's "namespace-or-type-name". Rename it!

    [ExplicitSpaces]
    syntax QualifiedIdentifierContinuation = (QualifiedIdentifierPart; s "." s)+;

    [ExplicitSpaces]
    syntax NamespaceName        = (Identifier; s "." s)+;

    [ExplicitSpaces]
    syntax QualifiedIdentifierPartTypeArguments
    {
      | QualifiedIdentifierPartTypeArgumentList     = s "<" s TypeArguments  ">" s;
      | QualifiedIdentifierPartOpenTypeArguments    = s "<" s RankSeparator* ">" s;
      | QualifiedIdentifierPartTypeArgumentListOld  = s "[" s TypeArguments  "]" s;
      | QualifiedIdentifierPartOpenTypeArgumentsOld = s "[" s RankSeparator* "]" s;
    }

    [ExplicitSpaces]
    syntax QualifiedIdentifierPart = Identifier QualifiedIdentifierPartTypeArguments?;
    syntax QualifiedAlias = Alias = Identifier "::";


    // same as 'QualifiedIdentifierPart' but avoids capturing type arguments of method name
    syntax TypeMemberIdentifierPart  = Identifier (QualifiedIdentifierPartTypeArguments !"(")?;
    syntax TypeMemberIdentifier      = QualifiedAlias? (TypeMemberIdentifierPart; ".")+; // TODO: Maybe a bug. It's should end with Identifier

    regex IdentifierStartCharacter  = LetterCharacter | "_" | UnicodeEscapeSequence;
    regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter | UnicodeEscapeSequence;
    regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

    // Identifiers
    /////////////////////////////////////////////////////////
  }
}
