using N2;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Console;
using System.Collections.Generic;
using System.Linq;

namespace Sample.Json
{
  module Program
  {
    Main() : void
    {
      def source = SourceSnapshot(text);
      def parserHost = ParserHost();
      def parseResult = parserHost.DoParsing(source, JsonParser.GrammarImpl.StartRuleDescriptor);
      if (parseResult.IsSuccess)
      {
        def ast = parseResult.CreateAst.[JsonParser.Start.Ast]();
        //WriteLine($<#Result: ..$(ast.Value(); ", ")#>);
        WriteLine($"Pretty print: $ast");
        //WriteLine("AST dump:");
        //WriteLine(ast.GetDump().ToString());
        WriteLine();
      }
      else
      {
        def (pos, rules) = parseResult.CollectErrors();
        def (line, column) = source.PositionToLineColumn(pos);
        WriteLine($<#Parse error at ($line, $column), rules: ..$(rules; ", ")#>);
      }
      
      _ = ReadLine();
    }
    
    text =
      <#
{
		"glossary": {
				"title": "example glossary",
		"GlossDiv": {
						"title": "S",
			"GlossList": {
								"GlossEntry": {
										"ID": "SGML",
					"SortAs": "SGML",
					"GlossTerm": "Standard Generalized Markup Language",
					"Acronym": "SGML",
					"Abbrev": "ISO 8879:1986",
					"GlossDef": {
												"para": "A meta-markup language, used to create markup languages such as DocBook.",
						"GlossSeeAlso": ["GML", "XML"]
										},
					"GlossSee": "markup"
								}
						}
				}
		}
}  #>;
  }
}
