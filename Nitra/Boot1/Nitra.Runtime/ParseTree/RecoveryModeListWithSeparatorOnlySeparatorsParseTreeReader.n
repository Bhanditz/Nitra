using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal sealed class RecoveryModeListWithSeparatorOnlySeparatorsParseTreeReader[TSeparatorLoader, TSeparator] : RecoveryModeListParseTreeReader[TSeparatorLoader, TSeparator]
    where TSeparatorLoader : IParseTree
    where TSeparator       : TSeparatorLoader
  {
    public new static Instance : this;

    static this() { Instance = RecoveryModeListWithSeparatorOnlySeparatorsParseTreeReader() }

    protected override ReadListItem(isItem : bool, parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, listBuffer : SCG.List[TSeparator], context : RecoveryModeParseTreeReaderContext[TSeparatorLoader, TSeparator]) : void
    {
      if (isItem)
        ()
      else
        RecoveryModeSequenceParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeSequenceParseTreeReaderContext(context.ItemLoader, context.ItemSequenceId))
          |> context.ItemConverter.Cast
          |> listBuffer.Add;
    }
  }
}
