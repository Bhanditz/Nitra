using Nemerle;
using Nemerle.Collections;

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;

namespace Nitra
{
  public partial class Language : object
  {
    public GetSpanClasses() : array[SpanClass]
    {
      def buffer = List();
      unchecked for (mutable language = this; language : object != null; language = language.Parent)
        buffer.AddRange(language.GetDeclaredSpanClasses());
      buffer.ToArray();
    }

    public GetStyles() : array[Style]
    {
      def buffer = List();
      unchecked for (mutable language = this; language : object != null; language = language.Parent)
        buffer.AddRange(language.GetDeclaredStyles());
      buffer.ToArray();
    }

    private volatile mutable _compositeGrammar : CompositeGrammar = null;

    public CompositeGrammar : CompositeGrammar
    {
      get
      {
        if (_compositeGrammar : object != null)
          _compositeGrammar
        else
        {
          mutable result =
            if (Parent : object == null)
              ParserHost.Instance.DefaultCompositeGrammar
            else
              Parent.CompositeGrammar;

          unchecked foreach (desc in GetDeclaredGrammars())
            result = result.Add(desc);

          Interlocked.CompareExchange(ref _compositeGrammar, result, null)
        }
      }
    }

    public static GetLanguages(assembly : Assembly) : array[Language]
    {
      def languages = List();
      def assemblyAttributes = CustomAttributeData.GetCustomAttributes(assembly);
      foreach (attr when attr.Constructor.DeclaringType.Equals(typeof(LanguagesAttribute)) in assemblyAttributes)
      {
        def languageTypes = attr.ConstructorArguments[0].Value :> Seq[CustomAttributeTypedArgument];
        foreach (languageTypeArgument in languageTypes)
        {
          def languageType = languageTypeArgument.Value :> Type;
          def instanceProperty = languageType.GetProperty("Instance", BindingFlags.Public | BindingFlags.Static);
          assert(instanceProperty != null);
          def language = instanceProperty.GetValue(null, null) :> Language;
          languages.Add(language);
        }
      }
      languages.ToArray()
    }
  }
}
