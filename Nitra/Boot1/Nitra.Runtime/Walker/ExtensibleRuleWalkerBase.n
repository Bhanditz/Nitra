using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using Nitra.Internal;

namespace Nitra.Runtime
{
  public abstract class ExtensibleRuleWalkerBase
  {
    public PrefixId             : int;
    public PostfixId            : int;
    public FirstPostfixRule     : int;
    public FirstPostfixRuleId   : int;
    public PrefixWalkersOffset  : int;
    public PostfixWalkersOffset : int;
    public Parse                : ExtensibleRuleParser;

    public this(parseResult : ExtensibleRuleParser)
    {
      Parse                 = parseResult;
      PrefixId              = parseResult.PrefixId;
      PostfixId             = parseResult.PostfixId;

      FirstPostfixRule      = parseResult.FirstPostfixRule;
      FirstPostfixRuleId    = parseResult.FirstPostfixRuleId;

      PrefixWalkersOffset   = if (parseResult.PrefixRules.Length > 0)  parseResult.PrefixRules[0].RuleId  else 0; //FIXME empty array
      PostfixWalkersOffset  = if (parseResult.PostfixRules.Length > 0) parseResult.PostfixRules[0].RuleId else 0; //FIXME empty array
    }

    public RuleFullName : string
    {
      get { this.Parse.Descriptor.Grammar.Name + "." + this.Parse.Descriptor.Name }
    }
  }
}
