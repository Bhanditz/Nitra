using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public module DeclarationUtils
  {
    public GetDeclarationAmbiguities[TAst, TDeclaration](parent : Declaration, ambiguities : array[TAst]) : array[TDeclaration]
      where TAst         : IDeclarableAst
      where TDeclaration : Declaration
    {
      def result = array(ambiguities.Length);
      foreach (ast in ambiguities with index)
        result[index] = ast.GetDeclaration(parent) :> TDeclaration;
      result
    }

    public MakeList[TAst, TDeclaration](parent : Declaration, items : ListAst[TAst]) : DeclarationList[TDeclaration]
      where TAst         : Ast, IDeclarableAst
      where TDeclaration : Declaration
    {
      def result = DeclarationList(parent, items.Location.Span);
      def declarations = array(items.Length);
      foreach (ast in items with index)
        declarations[index] = ast.GetDeclaration(result) :> TDeclaration;
      result.Initialize(declarations);
      result
    }

    public MakeOption[TAst, TDeclaration](parent : Declaration, item : OptionAst[TAst]) : DeclarationOption[TDeclaration]
      where TAst         : Ast, IDeclarableAst
      where TDeclaration : Declaration
    {
      if (item.HasValue)
      {
        def result = DeclarationOption.Some(parent, item.Location.Span);
        result.Initialize(item.Value.GetDeclaration(result) :> TDeclaration);
        result
      }
      else
        DeclarationOption.None(parent, item.Location.Span)
    }
  }
}
