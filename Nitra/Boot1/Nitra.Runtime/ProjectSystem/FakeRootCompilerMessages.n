using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public sealed class FakeRootCompilerMessages : IRootCompilerMessages
  {
    private _compilerMessages : ICompilerMessages;

    public this(compilerMessages : ICompilerMessages)
    {
      assert(compilerMessages != null);
      _compilerMessages = compilerMessages;
    }

    public Warning      (loc : Location, msg : string, num : int = -1) : void                  { _compilerMessages.Warning(loc, msg, num) }
    public Hint         (loc : Location, msg : string, num : int = -1) : void                  { _compilerMessages.Hint   (loc, msg, num) }
    public Error        (loc : Location, msg : string, num : int = -1) : void                  { _compilerMessages.Error  (loc, msg, num) }
    public FatalError[T](loc : Location, msg : string, num : int = -1) : T                     { _compilerMessages.FatalError(loc, msg, num) }
    public RootWarning  (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { _compilerMessages.RootWarning(loc, msg, num) }
    public RootHint     (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { _compilerMessages.RootHint   (loc, msg, num) }
    public RootError    (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { _compilerMessages.RootError  (loc, msg, num) }
    public Dispose() : void { }
  }
}
