using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Nitra.ProjectSystem
{
  public class FsFile[TAst] : ConcreteFile[TAst]
    where TAst: IAst
  {
    public FilePath  : string          { get; }
    public FsProject : FsProject[TAst] { get; internal set; }

    public this([NotNull] filePath : string, ruleDescriptor : StartRuleDescriptor, fsProject : FsProject[TAst] = null, compositeGrammar : CompositeGrammar = null)
    {
      base(ruleDescriptor, compositeGrammar);
      assert3(IO.File.Exists(filePath));
      FilePath = filePath;
      when (fsProject != null)
        fsProject.FsFiles.Add(this)
    }

    public override Length   : int     { get { IO.FileInfo(FilePath).Length :> int } }
    public override FullName : string  { get { this.FilePath } }
    public override Project  : Project { get { this.FsProject } }

    public override GetSource() : SourceSnapshot { SourceSnapshot(IO.File.ReadAllText(FilePath, Encoding.UTF8), this)  }
  }
}
