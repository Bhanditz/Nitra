using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public Visualize(astPatcher : AstPatcher) : void
    {
      def dir = Path.Combine(Path.GetTempPath(), "Seq");
      when (Directory.Exists(dir))
      {
        Directory.Delete(dir, recursive=true);
        _ = Directory.CreateDirectory(dir);
      }

      def visited = SCG.HashSet();
      def files = SCG.List();

      foreach (recordSet when recordSet != null in this.Records)
          foreach (record in recordSet.Keys)
            record.Sequence.ToDot(visited, files, astPatcher, -1);

      when (files.Count > 0)
      {
        X.ConvertToDot(files);
      }

      when (this.Records[0] != null && this.Records[0].Count > 0)
      {
        def seq = Sequences[(0, ParseResult.RuleParser.ParsingSequence)];
        def filePath = seq.GetFilePath("Seq", seq.StartPos, this.ParseResult.Text.Length) + ".svg";
      _ = Process.Start(filePath);
      }
    }
  }
}
