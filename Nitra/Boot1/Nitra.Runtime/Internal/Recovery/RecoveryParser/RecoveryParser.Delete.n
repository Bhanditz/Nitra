using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public Deleted : Hashtable[int, SCG.HashSet[int]] = Hashtable();

    public Delete(begin : int, end : int) : void
    {
      mutable ends;
      unless (Deleted.TryGetValue(begin, out ends))
      {
        ends = SCG.HashSet();
        Deleted[begin] = ends;
      }
      when (ends.Add(end))
      {
        def records = Records[begin];
        when (records != null)
          foreach ((record, tokenChanges) in records.KeyValuePairs)
            when (!record.IsComplete && record.ParsingState.CanConsumeErrorTokens)
              SubruleParsed(begin, end, record, tokenChanges, TokenChanges(inserted = 0, deleted = 1));
      }
    }

    private DeleteTokenOrGarbage(maxPos : int, forceDelete : bool) : void
    {
      def text = ParseResult.Text;
      when (maxPos >= text.Length)
        return;

      def getTokens(pos)
      {
        def grammar = ParseResult.RuleParser.Grammar;
        def res = grammar.ParseAllNonVoidGrammarTokens(pos, ParseResult);
        _ = res.RemoveWhere(x => x <= pos);
        res
      }

      def tokens = getTokens(maxPos);

      if (tokens.Count == 0)
      {
        mutable i = maxPos + 1;
        for (; i < text.Length; i++) // крутимся пока не будет распознан токен или достигнут конец строки
        {
          def tokens = getTokens(i);
          when (tokens.Count > 0)
            break;
        }

        Delete(maxPos, i);
      }
      else
      {
        def canDelete(pos, nextPos)
        {
          // TODO: Надо неализовать эту функцию на базе метаинформации из грамматик.
          match (text.Substring(pos, nextPos - pos))
          {
            | "," | ";" => false
            | _         => true;
          }
        }
        foreach (nextPos in tokens)
          when (forceDelete || canDelete(maxPos, nextPos))
            Delete(maxPos, nextPos);
      }
    }
  }
}
