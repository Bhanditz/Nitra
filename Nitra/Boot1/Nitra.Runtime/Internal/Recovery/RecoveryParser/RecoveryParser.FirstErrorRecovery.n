using Nemerle.Collections;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public FirstErrorRecovery() : void
    {
      def textPos = 0;
      Records[textPos] = Hashtable();
      def rootParsingSequence =
        match (ParseResult.RuleParser)
        {
          | SimpleRuleParser     as ruleParser => ruleParser.ParsingSequence
          | ExtensibleRuleParser as ruleParser => ruleParser.ParsingSequence
          | _                                  => assert3(false)
        };
      _ = StartParseSequence(textPos, rootParsingSequence, TokenChanges.None);
      Parse();
      while (BestSolution.IsFail)
      {
        ParseToFailPos();
        def curMaxPos = MaxPos;
        _ = ErrorPositions.Add(curMaxPos);
        InsertSubrules(curMaxPos);
        Delete(curMaxPos, ParseResult.Text.Length);
        Parse();
      }
      SaveRecoveredRawTreePart();
    }
  }
}
