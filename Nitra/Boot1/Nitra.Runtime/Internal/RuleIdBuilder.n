using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Internal
{
  public sealed class RuleIdBuilder
  {
    private mutable _isBuilding      : bool;
    private         _existingParsers : array[IParserInfo];
    private         _newParsers      : List[IParserInfo];

    public this(existingParsers : array[IParserInfo])
    {
      _isBuilding      = true;
      _existingParsers = existingParsers;
      _newParsers      = List();
    }

    public NewRuleId(parser : IParserInfo) : int
    {
      assert(_isBuilding);

      def id = _existingParsers.Length + _newParsers.Count;
      _newParsers.Add(parser);
      id
    }

    public GetParsers() : array[IParserInfo]
    {
      _isBuilding = false;

      def result = array(_existingParsers.Length + _newParsers.Count);
      _existingParsers.CopyTo(result, 0);
      _newParsers.CopyTo(result, _existingParsers.Length);
      Threading.Thread.MemoryBarrier(); // make WolfHound happy
      result
    }
  }
}
