using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Collections;
using Nitra.Runtime;

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace Nitra.Internal
{
  public sealed class DefaultExtensibleRuleParseTreeFactory[T] : IExtensibleRuleParseTreeFactory[T]
  {
    public static Instance : this = DefaultExtensibleRuleParseTreeFactory();

    private this() { }

    public CreateAmbiguous(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, startPos : int, endPos : int, ambiguitys : array[T], parsers : array[ExtensionRuleParser], ambiguityType : ParseTreeAmbiguityType) : T
    {
      ignore(parseResult, ruleDescriptor, startPos, endPos, parsers);
      AmbiguousConstructor(ambiguitys, ambiguityType)
    }

    public CreateMissing(parseResult : ParseResult, ruleDescriptor : RuleDescriptor, pos : int) : T
    {
      _ = ruleDescriptor;
      MissingConstructor(parseResult, pos)
    }

    public CreatePrefix(pos : ref int, rawTreePtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : T
    {
      def parseTreeCtor = PrefixConstructor1[ruleParser.Descriptor];
      parseTreeCtor(ref pos, rawTreePtr, parseResult)
    }

    public CreatePrefix(startPos : int, endPos : int, recoveredSubrulesIndex : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : T
    {
      def parseTreeCtor = PrefixConstructor2[ruleParser.Descriptor];
      parseTreeCtor(startPos, endPos, recoveredSubrulesIndex, parseResult)
    }

    public CreatePostfix(prefix : T, prefixStartPos : int, pos : ref int, rawTreePtr : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : T
    {
      def parseTreeCtor = PostfixConstructor1[ruleParser.Descriptor];
      parseTreeCtor(prefix, prefixStartPos, ref pos, rawTreePtr, parseResult)
    }

    public CreatePostfix(prefix : T, prefixStartPos : int, startPos : int, endPos : int, recoveredSubrulesIndex : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult) : T
    {
      def parseTreeCtor = PostfixConstructor2[ruleParser.Descriptor];
      parseTreeCtor(prefix, prefixStartPos, startPos, endPos, recoveredSubrulesIndex, parseResult)
    }

    private static AmbiguousConstructor : Func[array[T], ParseTreeAmbiguityType, T] =
    {
      def ambiguousParseTreeType = typeof(T).GetNestedType("AmbiguousNode");
      assert2(ambiguousParseTreeType != null);

      def signature = array[typeof(array[T]), typeof(ParseTreeAmbiguityType)];
      ConstructorFactory.MakeConstructorDelegate(ambiguousParseTreeType, signature, typeof(T))
    };

    private static MissingConstructor : Func[ISourceSnapshotProvider, int, T] =
    {
      def missingParseTreeType = typeof(T).GetNestedType("MissingNode");
      assert2(missingParseTreeType != null);

      def signature = array[typeof(ISourceSnapshotProvider), typeof(int)];
      ConstructorFactory.MakeConstructorDelegate(missingParseTreeType, signature, typeof(T))
    };

    private delegate PrefixParseTreeCtor1(pos : ref int, rawTreePtr : int, parseResult : ParseResult) : T;

    private static PrefixConstructor1 : SynchronizedCache[RuleDescriptor, PrefixParseTreeCtor1] = SynchronizedCache((ruleDescriptor) =>
    {
      def signature = array[typeof(int).MakeByRefType(), typeof(int), typeof(ParseResult)];
      ConstructorFactory.MakeConstructorDelegate(ReflectionHelper.GetParseTreeType(ruleDescriptor), signature, typeof(T));
    });

    private delegate PrefixParseTreeCtor2(startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : ParseResult) : T;

    private static PrefixConstructor2 : SynchronizedCache[RuleDescriptor, PrefixParseTreeCtor2] = SynchronizedCache((ruleDescriptor) =>
    {
      def signature = array[typeof(int), typeof(int), typeof(int), typeof(ParseResult)];
      ConstructorFactory.MakeConstructorDelegate(ReflectionHelper.GetParseTreeType(ruleDescriptor), signature, typeof(T));
    });

    private delegate PostfixParseTreeCtor1(prefix : T, prefixStartPos : int, pos : ref int, rawTreePtr : int, parseResult : ParseResult) : T;

    private static PostfixConstructor1 : SynchronizedCache[RuleDescriptor, PostfixParseTreeCtor1] = SynchronizedCache((ruleDescriptor) =>
    {
      def signature = array[typeof(T), typeof(int), typeof(int).MakeByRefType(), typeof(int), typeof(ParseResult)];
      ConstructorFactory.MakeConstructorDelegate(ReflectionHelper.GetParseTreeType(ruleDescriptor), signature, typeof(T))
    });

    private delegate PostfixParseTreeCtor2(prefix : T, prefixStartPos : int, startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : ParseResult) : T;

    private static PostfixConstructor2 : SynchronizedCache[RuleDescriptor, PostfixParseTreeCtor2] = SynchronizedCache((ruleDescriptor) =>
    {
      def signature = array[typeof(T), typeof(int), typeof(int), typeof(int), typeof(int), typeof(ParseResult)];
      ConstructorFactory.MakeConstructorDelegate(ReflectionHelper.GetParseTreeType(ruleDescriptor), signature, typeof(T))
    });
  }

  internal module ConstructorFactory
  {
    public MakeConstructorDelegate[TDelegate](type : Type, signature : array[Type], returnType : Type) : TDelegate
    {
      def ctor = type.GetConstructor(signature);
      assert2(ctor != null);

      def dm = DynamicMethod("", returnType, signature, true);
      def il = dm.GetILGenerator();
      for (mutable index = 0; index < signature.Length; ++index)
        il.Emit(OpCodes.Ldarg, index);
      il.Emit(OpCodes.Newobj, ctor);
      il.Emit(OpCodes.Ret);
      dm.CreateDelegate(typeof(TDelegate)) :> TDelegate
    }
  }
}
