using Nitra.Internal;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  public interface IPrettyPrintSource
  {
    Text : string { get; }
    GetGarbage(prevPos : int, pos : int) : NSpan
  }

  [Record]
  public abstract class PrettyPrintWriter
  {
    public Options : PrettyPrintOptions { get; }
    [RecordIgnore]
    protected mutable _previousTokenPos : int;

    protected abstract FormatToken(source : IPrettyPrintSource, token : NSpan, canBeEmpty : bool, ruleName : string, spanClass : SpanClass) : void;
    protected abstract FormatString(source : IPrettyPrintSource, token : NSpan, text : string, spanClass : SpanClass) : void;// TODO: сделать protected
    protected abstract Garbage(source : IPrettyPrintSource, token : NSpan) : void;
    public abstract MissingNode(ruleDescriptor : RuleDescriptor) : void;
    public abstract AmbiguousNode(ast : IAmbiguousParseTree, spanClass : SpanClass) : void;
    public abstract AmbiguousNode[T](ast : IAmbiguousParseTree, ruleType : string, source : IPrettyPrintSource, spanClass : SpanClass, printer : Action[PrettyPrintWriter, IPrettyPrintSource, T, SpanClass]) : void where T : ParseTree;
    public abstract NewLine() : void;
    public abstract NewLineAndIndent() : void;
    public abstract Whitespace() : void;
    public abstract Indent() : void;
    public abstract Unindent() : void;

    public Token(source : IPrettyPrintSource, token : NSpan, canBeEmpty : bool, ruleName : string, spanClass : SpanClass) : void
    {
      TryPrintGarbage(source, token);
      FormatToken(source, token, canBeEmpty, ruleName, spanClass);
    }

    public String(source : IPrettyPrintSource, token : NSpan, text : string, spanClass : SpanClass) : void
    {
      TryPrintGarbage(source, token);
      FormatString(source, token, text, spanClass);
    }

    protected TryPrintGarbage(source : IPrettyPrintSource, token : NSpan) : void
    {
      when (_previousTokenPos >= token.StartPos)
        return;

      def tryPrintGarbage(previousTokenPos : int, token, source)
      {
        def skip = source.GetGarbage(previousTokenPos, token.StartPos);
        unless (skip.IsEmpty)
        {
          Garbage(source, skip);

          when (skip.EndPos < token.StartPos)
          {
            Whitespace();
            tryPrintGarbage(skip.EndPos, token, source);
          }
        }
      }

      tryPrintGarbage(_previousTokenPos, token, source);

      _previousTokenPos = token.StartPos;
    }
  }
}
