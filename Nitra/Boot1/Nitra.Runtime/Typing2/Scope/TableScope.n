using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public class TableScope : Scope
  {
    public this(owner : string)
    {
      _owner = owner;
      _nameTable = Hashtable();
    }

    private _owner : string;
    private _nameTable : Hashtable[int, list[DeclarationSymbol]]; //TODO: replace with LightList[DeclarationSymbol]?

    public Symbols : Hashtable[int, list[DeclarationSymbol]].ValueCollection { get { _nameTable.Values } }

    public Define[TSymbol](declaration : Declaration, context : DependentPropertyEvalContext) : TSymbol
      where TSymbol : DeclarationSymbol
    {
      def     name             = declaration.Name;
      def     candidateSymbols = LightList();
      mutable ambiguousSymbols : HashSet[DeclarationSymbol];

      mutable lookupResult;
      when (_nameTable.TryGetValue(name.Id, out lookupResult))
      {
        ambiguousSymbols = HashSet(lookupResult);
        foreach (symbol is TSymbol when symbol.CanMerge(declaration) in lookupResult)
          candidateSymbols.Add(symbol);
      }

      def concreteSymbol =
        match (candidateSymbols.Count)
        {
          | 0 => declaration.CreateSymbol() :> TSymbol;
          | 1 => candidateSymbols[0] // merge
          | _ => assert(false)
        };

      if (ambiguousSymbols : object == null)
        _nameTable.Add(name.Id, [concreteSymbol]);
      else when (ambiguousSymbols.Add(concreteSymbol))
      {
        // фильтруем без учета конкретного типа
        def realAmbiguousSymbols = ambiguousSymbols.FilterToArray(s => !concreteSymbol.Equals(s) && s.IsSameIdentity(declaration));
        when (realAmbiguousSymbols.Length > 0)
        {
          def cm = AstContext.CompilerMessages;
          using (nested = cm.RootError(name, $"Redefinition of '$name'"))
            foreach (ambiguous in realAmbiguousSymbols)
              foreach (d in ambiguous.Declarations)
                nested.Hint(d.Name, "previous definition.");
        }
        _nameTable[name.Id] = ambiguousSymbols.NToList();
      }

      concreteSymbol.AddDeclaration(declaration);
      when (candidateSymbols.Count == 0)
        concreteSymbol.EvalProperties(context); // initialize symbol default values

      assert(!name.IsSymbolEvaluated);
      name.Symbol = concreteSymbol;

      concreteSymbol
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      mutable lookupResult;
      when (_nameTable.TryGetValue(reference.Id, out lookupResult))
      {
        foreach (result is TSymbol in lookupResult)
          results.Add(result);
      }
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      if (string.IsNullOrEmpty(prefix))
        _nameTable.Values.SelectMany(s => s)
      else
        _nameTable.Where(pair => StringIndex.GetText(pair.Key).StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase)).SelectMany(pair => pair.Value)
    }

    public override ToString() : string
    {
      $<#$_owner[..$(_nameTable.Keys; ", "; StringIndex.GetText)]#>
    }
  }
}
