using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  [Record]
  public sealed class FilteringScope : Scope
  {
    public Scope     : Scope                         { get; }
    public Predicate : Func[DeclarationSymbol, bool] { get; }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      mutable notFilteredResults = LightList();
      Scope.BindMany(reference, ref notFilteredResults);

      // 'foreach' causes invalid IL
      def e = notFilteredResults.GetEnumerator();
      while (e.MoveNext())
        when (Predicate.Invoke(e.Current))
          results.Add(e.Current);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      Scope.MakeCompletionList(prefix).Where(Predicate)
    }

    public override ToString() : string
    {
      "Filter"
    }
  }
}
