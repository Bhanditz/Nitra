using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Lifting
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  macro LiftRule(id : string, assemblyName : string, grammarName : string, ruleName : string)
  {
    LiftImpl.LiftRule(id, assemblyName, grammarName, ruleName)
  }

  macro Lift(id : string, body : PExpr) : PExpr
    syntax("lift", "(", id, ")", body)
  {
    def typer = Macros.ImplicitCTX();
    LiftImpl.Lift(id, body, typer)
  }

  module LiftImpl
  {
    public LiftRule(id : string, assemblyName : string, grammarName : string, ruleName : string) : void
    {
      def assemblies = ManagerClass.Instance.ReferencedAssemblies.Map(_.Assembly);
      match (assemblies.Find(a => a.GetName().Name == assemblyName))
      {
        | Some(a) =>
          foreach (g when g.FullName == grammarName in GrammarDescriptor.GetDescriptors(a))
            foreach (r is StartRuleDescriptor when r.Name == ruleName in g.Rules)
            {
              if (Parsers.ContainsKey(id))
                Message.FatalError($"Lift rule '$id' already registered")
              else
              {
                def parserHost = ParserHost(() => assemblies);
                Parsers.Add(id, parserHost.DoParsing(_, r))
              }
            }
            otherwise Message.FatalError($"Rule '$ruleName' not found in grammar '$grammarName' from assembly '$a'");
          otherwise Message.FatalError($"Grammar '$grammarName' not found in assembly '$a'");

        | None => Message.FatalError($"Assembly '$assemblyName' is not refrenced");
      }
    }

    public Lift(id : string, body : PExpr, typer : Typer) : PExpr
    {
      mutable parseCallback;
      if (Parsers.TryGetValue(id, out parseCallback))
      {
        match (body)
        {
          | Literal(Literal.String(RawString = rawString)) when rawString.StartsWith("<#") =>
            def originalSource = SourceSnapshot(rawString, body.Location.FileIndex, Location.GetFileName(body.Location.FileIndex));
            def sourceToParse  = originalSource.WithTextSubstring(2, originalSource.Text.Length - 4); // cut string braces <# #>
            def offset         = body.Location.Begin;
            def parseResult    = parseCallback(sourceToParse);
            unless (parseResult.IsSuccess)
            {
              foreach (e in parseResult.GetErrors())
              {
                def begin = PExprSplicableAstBuilder.TranslateLineColumn(offset, e.Location.StartLineColumn);
                def end   = PExprSplicableAstBuilder.TranslateLineColumn(offset, e.Location.EndLineColumn);
                Message.Error(Nemerle.Compiler.Location(e.Location.Source.FileIndex, begin, end), e.Message);
              }
            }

            <[
              def context = Nitra.Runtime.ChemicalAstContext();
              $(parseResult.CreateSplicableAst.[PExpr](PExprSplicableAstBuilder(typer.Manager, typer.Env, offset)))
            ]>

          | _ => Message.FatalError(body.Location, "Recursive string literal <#...#> expected");
        }
      }
      else
        Message.FatalError($"Lift rule '$id' is not registered")
    }

    private Parsers : Dictionary[string, SourceSnapshot -> Nitra.ParseResult]
    {
      mutable key : object = object();
      get
      {
        if (ManagerClass.Instance.UserData.Contains(key))
          ManagerClass.Instance.UserData[key] :> Dictionary[_, _]
        else
        {
          def table = Dictionary();
          ManagerClass.Instance.UserData.Add(key, table);
          table
        }
      }
    }
  }
}
