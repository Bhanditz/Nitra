using Nitra;
using Nitra.Utils;
using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;
using Nitra.Typing.TypingUtils;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

syntax module NitraSyntax
{
  using Outline;
  using PrettyPrint;
  using TokenNames;
  using StandardSpanClasses;
  using Whitespaces;
  using Identifiers;
  using CStyleComments;

  literal Prefix              = "\\u";
  literal DodDot              = "..";
  literal Op                  = ".";
  literal Pipe                = "|";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  keyword regex IdentifierStartCharacter (IdentifierPartCharacters | '-')* rule S;

  alias Name            = Identifier;
  alias QualifiedName   = QualifiedIdentifier;
  alias NamespaceOrType = QualifiedIdentifier;
  alias Char            = Any;
  alias GrammarName     = QualifiedIdentifier;
  alias BaseName        = QualifiedIdentifier;

  regex PredefinedType = "void" | "int" | "string";

  regex Keyword = "as" | "syntax" | "declaration" | "declarations" | "extend" | "symbol" | "module"
                | "marker" | "token" | "field" | "span" | "alias" | "regex" | "literal"
                | "in" | "out" | "rule" | "precedence" | "using" | "namespace" | PredefinedType;

  extend token IgnoreToken
  {
    | [SpanClass(Comment)] SingleLineComment;
    | [SpanClass(Comment)] MultiLineComment;
  }

  regex HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  regex ReservedStringChar        = "\"" | "\\";
  regex ReservedCharChar          = "\'" | "\\";

  [SpanClass(String)]
  token StringLiteral                    = "\""  StringPart* "\""
  {
    Value() : string = FoldThrough(StringParts, StringBuilder(), _.Value(_)).ToString();
  }

  token StringPart
  {
    Value(sb : StringBuilder) : StringBuilder;

    | UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit
      {
        override Value = sb.Append(HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos));
      }
    | EscapeSequence        = "\\"  Char
      {
        override Value = sb.Append(UnescapeChar(FirstChar(Char)));
      }
    | Simple                = Chars=(!ReservedStringChar !NewLine Any)+
      {
        override Value = sb.Append(this.GetText());
      }
  }

  [SpanClass(Char)]
  token CharLiteral                      = "\'"  CharPart "\'" { Value() : char = CharPart.Value(); }

  token CharPart
  {
    Value() : char;

    | Simple                = !ReservedCharChar Char
      {
        override Value = FirstChar(this.Char);
      }
    | UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit
      {
        override Value = HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos);
      }
    | EscapeSequence        = "\\" Char
      {
        override Value = UnescapeChar(FirstChar(this.Char));
      }
  }

  regex Digits = ['0'..'9']+;

  [SpanClass(Number)]
  token Number = Digits { Value() : int = DecToInt(this, Digits.StartPos, Digits.EndPos); }

  token Identifier                       = !(Keyword !IdentifierPartCharacters) IdentifierBody
  {
    Value() : string = GetText(IdentifierBody);
    Identifier() : Nitra.Model.Identifier = Nitra.Model.Identifier(this, IdentifierBody);
  }

  [ExplicitSpaces]
  syntax QualifiedIdentifier              = Names=(Identifier; s "." s)+
  {
    Identifiers() : list[Nitra.Located] = Names.Item1.MapToList(_.Identifier());
    Parts() : list[string] = Names.Item1.MapToList(_.Value());
    CalcLocation() : Nitra.Location
    {
      this.Location // At present QualifiedIdentifier have no 's' at the end of rule. This allows the use rule location.
    }
    CalcLocations() : list[Nitra.Location] = Names.Item1.MapToList(_.Location);
  }

  ///////////////////////////////////////////////////////////////////////////
  //

  [StartRule, ExplicitSpaces]
  syntax Start                = s NamespaceBody !Any
  {
    CollectGlobalSymbols(rootNs : NamespaceSymbol) : void = NamespaceBody.CollectGlobalSymbols(rootNs);
    [Cached] MakeContext(parent : Context) : Context = NamespaceBody.MakeContext(parent);
    CollectSyntaxMappings() : void = NamespaceBody.CollectSyntaxMappings();
    Typing() : void = NamespaceBody.Typing();
  }

  syntax Usings = outline_hiden outline_begin Using* outline_end_before
  {
    MakeContext(parent : Context) : Context = FoldThrough(Usings, parent, _.MakeContext(_));
  }

  syntax NamespaceBody = Usings NamespaceMember*
  {
    CollectGlobalSymbols(rootNs : NamespaceSymbol) : void = foreach (topDecl in NamespaceMembers) topDecl.CollectGlobalSymbols(rootNs);
    [Cached] MakeContext(parent : Context) : Context
    {
      def context1 = Usings.MakeContext(parent);
      def context2 = PassThrough(NamespaceMembers, context1, _.MakeContext(_));
      context2
    }
    CollectSyntaxMappings() : void = foreach (topDecl in NamespaceMembers) topDecl.CollectSyntaxMappings();
    Typing() : void = foreach (topDecl in NamespaceMembers) topDecl.Typing();
  }

  syntax Using
  {
    [Cached] MakeContext(parent : Context) : Context;

    | UsingOpen  = "using" sm NamespaceOrType ";" nl
      {
        override MakeContext = OpenNamespaceOrTypeContext(parent, NamespaceOrType);
      }
    | UsingAlias = "using" Name sm "=" sm NamespaceOrType ";" nl
      {
        override MakeContext = NamespaceOrTypeAliasContext(parent, Name, NamespaceOrType);
      }
  }

  syntax NitraTypeArguments = "<" (NitraType; "," sm; ?)+ ">"
  {
    Typing(context : Context) : list[NType]
    {
      def buffer = List();
      foreach (t in this.NitraTypes.Item1)
        buffer.Add(t.Typing(context)[0]);
      buffer.ToNList()
    }
  }

  syntax NitraTypeName = Identifier NitraTypeArguments?
  {
    Typing(context : Context) : TypeNamePart
    {
      def name     = this.Identifier.GetText();
      def typeArgs = if (this.NitraTypeArgumentsOpt.HasValue) this.NitraTypeArgumentsOpt.Value.Typing(context) else [];
      TypeNamePart(this.Location, name, typeArgs, context.GetNemerleEnvironment())
    }
  }

  syntax NitraType
  {
    Typing(context : Context) : NType * bool;

    | PredefinedType
      {
        override Typing
        {
          _ = context;
          def value = match (GetText(this.PredefinedType))
          {
            | "void"   => NPredefinedType.Void
            | "int"    => NPredefinedType.Int
            | "string" => NPredefinedType.String
            | _        => assert3(false)
          };
          (NType.Predefined(this.Location, value), false);
        }
      }
    | QualifiedType  = (NitraTypeName; ".")+
      {
        override Typing
        {
          def parts = List();
          foreach (t in this.NitraTypeNames.Item1)
            parts.Add(t.Typing(context));
          (NType.Qualified(this.Location, parts.ToNList()), false);
        }
      }
    | Braces         = "(" NitraType ")"
      {
        override Typing = (this.NitraType.Typing(context)[0], false);
      }
    | Tuple          = NitraType "*" NitraType     precedence 40  right-associative
      {
        override Typing
        {
          def first = this.NitraType1.Typing(context)[0];
          match (this.NitraType2.Typing(context))
          {
            | (NType.Tuple(members), true) => (NType.Tuple(this.Location, first :: members), true)
            | (second, _)                  => (NType.Tuple(this.Location, [first, second]), true)
          }
        }
      }
    | Func           = NitraType "->" NitraType    precedence 30  right-associative
      {
        override Typing = (NType.Func(this.Location, this.NitraType1.Typing(context)[0], this.NitraType2.Typing(context)[0]), false);
      }
    | OptionList     = NitraType "*" precedence 50
      {
        override Typing = (NType.OptionList(this.Location, this.NitraType.Typing(context)[0]), false);
      }
    | List           = NitraType "+" precedence 50
      {
        override Typing = (NType.List(this.Location, this.NitraType.Typing(context)[0]), false);
      }
    | Option         = NitraType "?" precedence 50
      {
        override Typing = (NType.Option(this.Location, this.NitraType.Typing(context)[0]), false);
      }
  }

  syntax DeclarationInheritance = ":" sm BaseDeclarations=(QualifiedIdentifier; "," sm)+
  {
    Typing(context : Context) : list[DeclarationSymbol]
    {
      def result = List();
      foreach (identifier in BaseDeclarations.Item1)
      {
        match (context.Bind.[DeclarationSymbol](identifier))
        {
          | SymbolRef.Some(AbstractDeclarationSymbol as declarationSymbol) => result.Add(declarationSymbol)
          | SymbolRef.Some as symbolRef => context.Project.Error(symbolRef.Location, "Only abstract declarations can be specified in base declarations list.", -1);
          | _ => ()
        }
      }
      result.ToNList();
    }
  }

  syntax DeclarationBody = outline_begin_before nl "{" inl Members=DeclarationMember* d "}" outline_end_before nl
  {
    CollectGlobalSymbols(site : IMemberSite) : void
    {
      foreach (member in Members)
        member.CollectGlobalSymbols(site);
    }
    [Cached] MakeContext(parent : Context) : Context = PassThrough(Members, parent, _.MakeContext(_));
    Typing() : void
    {
      foreach (member in Members)
        member.Typing();
    }
  }
  
  syntax DeclarationMember
  {
    CollectGlobalSymbols(site : IMemberSite) : void;
    [Cached] MakeContext(parent : Context) : Context = parent;
    Typing() : void;

    | SimpleProperty = NameModifier="name"? Name sm ":" sm NitraType ";" nl
      {
        private MakeSymbol(compilationMessages : ICompilerMessages) : DeclarationPropertySymbol
        {
          match (Name.Value())
          {
            | "Parent" =>
              when (NameModifier.HasValue)
                compilationMessages.Error(NameModifier.Location, "'name' modifier is not allowed for 'Parent' property.", -1);
              ParsedParentDeclarationPropertySymbol(this)

            | _ when NameModifier.HasValue => ParsedNameDeclarationPropertySymbol(this)
            | _                            => ParsedSimpleDeclarationPropertySymbol(this)
          }
        }
        override CollectGlobalSymbols
        {
          def symbol = MakeSymbol(site.Node.Project);
          _ = site.Node.AddAndReport.[DeclarationPropertySymbol](symbol, Name.Location);
        }
        [Cached] private MakeType() : NType = this.NitraType.Typing(this.Context)[0];
        override Typing
        {
          _ = MakeType();
        }
      }
    | InProperty = "in" Name sm ":" sm NitraType ";" nl
      {
        [Cached] private MakeSite(site : IMemberSite) : IMemberSite = site;
        [Cached] private MakeSymbol() : ParsedInDeclarationPropertySymbol = ParsedInDeclarationPropertySymbol(this);
        override CollectGlobalSymbols
        {
          TypingUtils.CheckSpecialPropertyNames(Name, site.Node.Project);
          _ = MakeSite(site);
          _ = site.Node.AddAndReport.[DeclarationPropertySymbol](MakeSymbol(), Name.Location);
        }
        [Cached] private MakeType() : NType = this.NitraType.Typing(this.Context)[0];
        override Typing
        {
          _ = MakeType();
        }
      }
    | OutProperty = "out" Name sm ":" sm NitraType DependentPropertyValue
      {
        [Cached] private MakeSite(site : IMemberSite) : IMemberSite = site;
        [Cached] private MakeSymbol() : ParsedOutDeclarationPropertySymbol = ParsedOutDeclarationPropertySymbol(this);
        override CollectGlobalSymbols
        {
          TypingUtils.CheckSpecialPropertyNames(Name, site.Node.Project);
          _ = MakeSite(site);
          _ = site.Node.AddAndReport.[DeclarationPropertySymbol](MakeSymbol(), Name.Location);
        }
        [Cached] private MakeType() : NType = this.NitraType.Typing(this.Context)[0];
        override Typing
        {
          _ = MakeType();
          when (this.DependentPropertyValue.HasValue())
          {
            def assignment = DependentPropertyAssignment(this.Location, [LocatedName(Name.Location, Symbol.Name)], NemerleParser.Parse(this.DependentPropertyValue, this.Context));
            TypingUtils.RegisterDependentPropertyAssignment(this.Site, assignment, this.Context.Project)
          }
        }
      }
    | InOutProperty = "inout" Name sm ":" sm NitraType DependentPropertyValue
      {
        [Cached] private MakeSite(site : IMemberSite) : IMemberSite = site;
        [Cached] private MakeInSymbol() : ParsedAutoInDeclarationPropertySymbol = ParsedAutoInDeclarationPropertySymbol(this);
        [Cached] private MakeOutSymbol() : ParsedAutoOutDeclarationPropertySymbol = ParsedAutoOutDeclarationPropertySymbol(this);
        override CollectGlobalSymbols
        {
          TypingUtils.CheckSpecialPropertyNames(Name, site.Node.Project);
          _ = MakeSite(site);
          _ = site.Node.AddAndReport.[DeclarationPropertySymbol](MakeInSymbol(), Name.Location);
          _ = site.Node.AddAndReport.[DeclarationPropertySymbol](MakeOutSymbol(), Name.Location);
        }
        [Cached] private MakeType() : NType = this.NitraType.Typing(this.Context)[0];
        override Typing
        {
          _ = MakeType();
          when (this.DependentPropertyValue.HasValue())
          {
            def assignment = DependentPropertyAssignment(this.Location, [LocatedName(Name.Location, OutSymbol.Name)], NemerleParser.Parse(this.DependentPropertyValue, this.Context));
            TypingUtils.RegisterDependentPropertyAssignment(this.Site, assignment, this.Context.Project)
          }
        }
      }
    | PropertyAssignment = QualifiedIdentifier sm "=" sm Expression ";"
      {
        [Cached] private MakeSite(site : IMemberSite) : IMemberSite = site;
        override CollectGlobalSymbols { _ = MakeSite(site) }
        override Typing
        {
          def assignment = DependentPropertyAssignment(this.Location, this.QualifiedIdentifier.CalcLocations().Map(LocatedName(_)), NemerleParser.Parse(this.Expression, this.Context));
          TypingUtils.RegisterDependentPropertyAssignment(this.Site, assignment, this.Context.Project)
        }
      }
  }

  syntax DependentPropertyValue
  {
    ValueLocation() : Nitra.Location;
    HasValue() : bool;

    | Expression = sm "=" sm Expression ";" nl
      {
        override ValueLocation = Expression.Location;
        override HasValue = true;
      }
    | Empty = ";" nl
      {
        override ValueLocation = Location(this.Location.Source, this.Location.StartPos, this.Location.StartPos);
        override HasValue = false;
      }
  }

  syntax SymbolMember
  {
    CollectGlobalSymbols(site : IMemberSite) : void;
    [Cached] MakeContext(parent : Context) : Context;
    Typing() : void;

    | SimpleField = "not" "implemented"
      {
        override CollectGlobalSymbols { _ = site }
        override MakeContext          = parent;
        override Typing               = ();
      }
  }

  syntax DeclarationExtension = "|" sm Name Body=DeclarationBody?
  {
    [Cached] MakeDeclarationSymbol() : ParsedExtensionDeclarationSymbol = ParsedExtensionDeclarationSymbol(this);
    CollectGlobalSymbols(site : IMemberSite) : void
    {
      def symbol = MakeDeclarationSymbol();
      _ = site.Node.AddAndReport.[DeclarationSymbol](symbol, Name.Location);
      when (Body.HasValue)
        Body.Value.CollectGlobalSymbols(symbol);
    }
    [Cached] MakeContext(parent : Context) : Context
    {
      def  context1 = DeclarationContext(parent, this.DeclarationSymbol);
      when (Body.HasValue)
        _ = Body.Value.MakeContext(context1);
      parent
    }
    Typing(baseDeclarationRef : SymbolRef[ExtensibleDeclarationSymbol]) : void
    {
      _ = MakeBaseDeclarationRef(baseDeclarationRef);
      when (Body.HasValue)
        Body.Value.Typing();
    }
    [Cached] MakeBaseDeclarationRef(baseDeclarationRef : SymbolRef[ExtensibleDeclarationSymbol]) : SymbolRef[ExtensibleDeclarationSymbol] = baseDeclarationRef;
  }

  syntax NamespaceMember
  {
    CollectGlobalSymbols(ns : NamespaceSymbol) : void;
    [Cached] MakeContext(parent : Context) : Context;
    CollectSyntaxMappings() : void {}
    Typing() : void;

    | Symbol      = "symbol"      sm Name outline_begin_before nl "{" inl Members=SymbolMember*      d "}" outline_end_before nl
      {
        override CollectGlobalSymbols
        {
          def symbol = ParsedSymbolSymbol(this);
          _ = ns.Node.AddAndReport(symbol, Name.Location);
          foreach (decl in Members)
            decl.CollectGlobalSymbols(symbol);
        }
        override MakeContext
        {
          def  context1 = SymbolContext(parent, Name);
          def _context2 = PassThrough(Members, context1, _.MakeContext(_));
          parent
        }
        override Typing = foreach (member in Members) member.Typing();
      }

    | AbstractDeclaration = "abstract" "declaration" sm Name DeclarationInheritance? Body=DeclarationBody
      {
        [Cached] private MakeDeclarationSymbol() : ParsedAbstractDeclarationSymbol = ParsedAbstractDeclarationSymbol(this);
        [Cached] private MakeBaseDeclarations() : list[DeclarationSymbol]
        {
          if (DeclarationInheritanceOpt.HasValue)
            DeclarationInheritanceOpt.Value.Typing(this.Context)
          else
            []
        }
        override CollectGlobalSymbols
        {
          def symbol = MakeDeclarationSymbol();
          _ = ns.Node.AddAndReport.[DeclarationSymbol](symbol, Name.Location);
          Body.CollectGlobalSymbols(symbol);
        }
        override MakeContext
        {
          def  context1 = DeclarationContext(parent, this.DeclarationSymbol);
          def _context2 = Body.MakeContext(context1);
          parent
        }
        override Typing
        {
          _ = MakeBaseDeclarations();
          Body.Typing();
        }
      }

    | SimpleDeclaration = "declaration" sm Name DeclarationInheritance? Body=DeclarationBody
      {
        [Cached] private MakeDeclarationSymbol() : ParsedSimpleDeclarationSymbol = ParsedSimpleDeclarationSymbol(this);
        [Cached] private MakeBaseDeclarations() : list[DeclarationSymbol]
        {
          if (DeclarationInheritanceOpt.HasValue)
            DeclarationInheritanceOpt.Value.Typing(this.Context)
          else
            []
        }
        override CollectGlobalSymbols
        {
          def symbol = MakeDeclarationSymbol();
          _ = ns.Node.AddAndReport.[DeclarationSymbol](symbol, Name.Location);
          Body.CollectGlobalSymbols(symbol);
        }
        override MakeContext
        {
          def  context1 = DeclarationContext(parent, this.DeclarationSymbol);
          def _context2 = Body.MakeContext(context1);
          parent
        }
        override Typing
        {
          _ = MakeBaseDeclarations();
          Body.Typing();
        }
      }

    | ExtensibleDeclaration = "declarations" sm Name DeclarationInheritance? Body
      {
        syntax Body = outline_begin_before nl "{" inl Members=DeclarationMember* Extensions=DeclarationExtension* d "}" outline_end_before nl
        {
          CollectGlobalSymbols(site : IMemberSite) : void
          {
            foreach (member in Members)
              member.CollectGlobalSymbols(site);
            foreach (extension in Extensions)
              extension.CollectGlobalSymbols(site);
          }
          [Cached] MakeContext(parent : Context) : Context
          {
            def context1 = PassThrough(Members, parent, _.MakeContext(_));
            def context2 = PassThrough(Extensions, context1, _.MakeContext(_));
            context2
          }
          Typing(baseDeclarationRef : SymbolRef[ExtensibleDeclarationSymbol]) : void
          {
            foreach (member in Members)
              member.Typing();
            foreach (extension in Extensions)
              extension.Typing(baseDeclarationRef);
          }
        }

        [Cached] private MakeDeclarationSymbol() : ParsedExtensibleDeclarationSymbol = ParsedExtensibleDeclarationSymbol(this);
        [Cached] private MakeBaseDeclarations() : list[DeclarationSymbol]
        {
          if (DeclarationInheritanceOpt.HasValue)
            DeclarationInheritanceOpt.Value.Typing(this.Context)
          else
            []
        }
        override CollectGlobalSymbols
        {
          def symbol = MakeDeclarationSymbol();
          _ = ns.Node.AddAndReport.[DeclarationSymbol](symbol, Name.Location);
          Body.CollectGlobalSymbols(symbol);
        }
        override MakeContext
        {
          def  context1 = DeclarationContext(parent, this.DeclarationSymbol);
          def _context2 = Body.MakeContext(context1);
          parent
        }
        override Typing
        {
          _ = MakeBaseDeclarations();
          Body.Typing(SymbolRef.Some(Name.Location, false, DeclarationSymbol));
        }
      }

    | ExtendDeclaration = "extend" "declarations" sm (Name sm "=" sm)? BaseName=QualifiedName Body
      {
        syntax Body = outline_begin_before nl "{" inl Extensions=DeclarationExtension* d "}" outline_end_before nl
        {
          CollectGlobalSymbols(site : IMemberSite) : void
          {
            foreach (extension in Extensions)
              extension.CollectGlobalSymbols(site);
          }
          [Cached] MakeContext(parent : Context) : Context = PassThrough(Extensions, parent, _.MakeContext(_));
          Typing(baseDeclarationRef : SymbolRef[ExtensibleDeclarationSymbol]) : void
          {
            foreach (extension in Extensions)
              extension.Typing(baseDeclarationRef);
          }
        }

        override CollectGlobalSymbols
        {
          def symbol = ParsedExtendDeclarationSymbol(this);
          _ = ns.Node.AddAndReport.[ExtendDeclarationSymbol](symbol, Location);
          Body.CollectGlobalSymbols(symbol);
        }
        override MakeContext = Body.MakeContext(parent);
        override Typing
        {
          def baseDeclarationRef = MakeBaseDeclarationRef();
          Body.Typing(baseDeclarationRef);
        }
        [Cached] private MakeBaseDeclarationRef() : SymbolRef[ExtensibleDeclarationSymbol] = SymbolRef[ExtensibleDeclarationSymbol].Create(BaseName, Context.Bind(BaseName));
      }

    | MapSyntax = "map" "syntax" sm RuleName=QualifiedName sm "->" sm DeclarationName=QualifiedName MapSyntaxBody
      {
        override CollectGlobalSymbols { _ = ns; }
        override MakeContext
        {
          def context = MapDeclarationContext(parent);
          _ = MapSyntaxBody.MakeContext(context);
          context
        }
        override CollectSyntaxMappings
        {
          def declarationSymbol = SymbolRef.Create(DeclarationName, this.Context.Bind.[DeclarationSymbol](DeclarationName));
          def ruleSymbolRef     = SymbolRef.Create(RuleName, this.Context.Bind.[SyntaxRuleSymbol](RuleName));
          when (ruleSymbolRef.IsSome && declarationSymbol.IsSome)
          {
            def ruleSymbol = ruleSymbolRef.GetValue(this.Context.Project);
            def body       = MapSyntaxBody.GetSyntaxMappingBody(declarationSymbol, ruleSymbol);
            ruleSymbol.SetSyntaxMappingBody(body);
          }
        }
        override Typing { }
      }

    | Namespace   = "namespace"   sm QualifiedName outline_begin_before nl "{" inl NamespaceBody      d "}" outline_end_before nl
      {
        [Cached] private MakeCurrentSymbol(ns : NamespaceSymbol) : NamespaceSymbol = MakeNamespaceSymbol(ns, QualifiedName.CalcLocations());
        override CollectGlobalSymbols = NamespaceBody.CollectGlobalSymbols(MakeCurrentSymbol(ns));
        override MakeContext
        {
          def nsContext = EnteredNamespaceContext(parent, CurrentSymbol);
          _ = NamespaceBody.MakeContext(nsContext);
          parent
        }
        override CollectSyntaxMappings = NamespaceBody.CollectSyntaxMappings();
        override Typing = NamespaceBody.Typing();
      }

    | SyntaxModule = SyntaxModuleAttributes "syntax" sm "module"sm Name outline_begin_before nl "{" inl Usings SyntaxModuleMember* d "}" outline_end_before nl
      {
        override CollectGlobalSymbols
        {
          def symbol = ParsedSyntaxModuleSymbol(this);
          _ = ns.Node.AddAndReport(symbol, Name.Location);
          foreach (decl in SyntaxModuleMembers)
            decl.CollectGlobalSymbols(symbol);
        }
        [Cached] private MakeInitialContext(contextToSave : SyntaxModuleContext) : SyntaxModuleContext = contextToSave;
        [Cached] private MakeFinalContext(contextToSave : Context) : Context = contextToSave;
        override MakeContext
        {
          def context1 = MakeInitialContext(SyntaxModuleContext(parent, Name));
          def context2 = Usings.MakeContext(context1);
          def context3 = SyntaxModuleBodyContext(context2);
          def finalContext = MakeFinalContext(FoldThrough(SyntaxModuleMembers, context3, _.MakeContext(_)));
          Utils.RegisterGlobalSpanClassSymbols(context1.SyntaxModuleSymbol, finalContext);
          parent
        }
        [Cached] private MakeTokenLiteralNames() : Map[string, Nitra.Model.Identifier] = FoldThrough(SyntaxModuleMembers, Map(), _.GetTokenLiteralNames(_));
        override CollectSyntaxMappings
        {
          foreach (decl in SyntaxModuleMembers)
            decl.CollectSyntaxMappings();
        }
        override Typing
        {
          _ = MakeTokenLiteralNames();
          foreach (decl in SyntaxModuleMembers)
            decl.Typing();
        }
      }
  }

  syntax SyntaxModuleAttribute
  {
    Options(inOptions : SyntaxModuleOptions) : SyntaxModuleOptions = inOptions;
    [Cached] MakeContext(_parent : Context) : Context = _parent;

    | Splicable = AttributeName="Splicable"
      {
        override Options = inOptions.SetNeedSplicable(this, true);
      }
    | ExplicitSpaces = AttributeName="ExplicitSpaces"
      {
        override Options = inOptions.SetExplicitSpaces(this, true);
      }
    | ImplicitSpaces = AttributeName="ImplicitSpaces"
      {
        override Options = inOptions.SetExplicitSpaces(this, false);
      }
  }

  syntax SyntaxModuleAttributeList = "[" (SyntaxModuleAttribute; ","sm)+ "]" sm
  {
    Options(inOptions : SyntaxModuleOptions) : SyntaxModuleOptions = FoldThrough(SyntaxModuleAttributes.Item1, inOptions, _.Options(_));
    MakeContext(parent : Context) : Context = FoldThrough(SyntaxModuleAttributes.Item1, parent, _.MakeContext(_));
  }

  syntax SyntaxModuleAttributes    = SyntaxModuleAttributeList*
  {
    [Cached] Options(inOptions : SyntaxModuleOptions) : SyntaxModuleOptions = FoldThrough(SyntaxModuleAttributeLists, inOptions, _.Options(_));
    [Cached] MakeContext(parent : Context) : Context = FoldThrough(SyntaxModuleAttributeLists, parent, _.MakeContext(_));
  }

  syntax RuleAttribute
  {
    Options(inOptions : RuleDefinitionOptions) : RuleDefinitionOptions = inOptions;
    [Cached] MakeContext(_parent : Context) : Context = _parent;

    | Start                  = AttributeName="StartRule"
      {
        override Options = inOptions.SetStart(this, true);
      }
    | "Arity" "(" Number ")" { override Options = inOptions.SetArity(this, Number.Value()); }
    | "Prefix"               { override Options = inOptions.SetOperatorInfo(this, OperatorInfo.Prefix); }
    | "Postfix"              { override Options = inOptions.SetOperatorInfo(this, OperatorInfo.Postfix); }
    | "Infix"                { override Options = inOptions.SetOperatorInfo(this, OperatorInfo.Infix); }
    | SpanClass              = AttributeName="SpanClass" "(" Class=Identifier ")"
      {
        override Options = Context.Bind.[SpanClassSymbol](Class).Map(inOptions.SetSpanClass(Class, _)) ?? inOptions;
      }
    | ExplicitSpaces         = AttributeName="ExplicitSpaces"
      {
        override Options = inOptions.SetExplicitSpaces(this, true);
      }
    | ImplicitSpaces         = AttributeName="ImplicitSpaces"
      {
        override Options = inOptions.SetExplicitSpaces(this, false);
      }
    | SuppressTrailingSpaces = AttributeName="SuppressTrailingSpaces"
      {
        override Options = inOptions.SetSuppressTrailingSpaces(this, true);
      }
    | AllowTrailingSpaces    = AttributeName="AllowTrailingSpaces"
      {
        override Options = inOptions.SetSuppressTrailingSpaces(this, false);
      }
    | NoParseTree            = AttributeName="NoParseTree"
      {
        override Options = inOptions.SetNoParseTree(this, true);
      }
    | KeyToken               = AttributeName="Key"
      {
        override Options = inOptions.SetKeyToken(this, true);
      }
    | Keyword               = AttributeName="Keyword"
      {
        override Options = inOptions.SetKeyword(this, true);
      }
    | Identifier            = AttributeName="Identifier"
      {
        override Options = inOptions.SetIdentifier(this, true);
      }
  }

  syntax RuleAttributeList = "[" (RuleAttribute; ","sm)+ "]" sm
  {
    Options(inOptions : RuleDefinitionOptions) : RuleDefinitionOptions = FoldThrough(RuleAttributes.Item1, inOptions, _.Options(_));
    MakeContext(parent : Context) : Context = FoldThrough(RuleAttributes.Item1, parent, _.MakeContext(_));
  }

  syntax RuleAttributes    = RuleAttributeList*
  {
    [Cached] Options(inOptions : RuleDefinitionOptions) : RuleDefinitionOptions = FoldThrough(RuleAttributeLists, inOptions, _.Options(_));
    [Cached] MakeContext(parent : Context) : Context = FoldThrough(RuleAttributeLists, parent, _.MakeContext(_));
  }

  [StartRule]
  syntax SyntaxModuleMember
  {
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void = _ = owner;
    [Cached] MakeContext(parent : Context) : Context = parent;
    CollectSyntaxMappings() : void {}
    Typing() : void {}

    GetTokenLiteralNames(result : Map[string, Nitra.Model.Identifier]) : Map[string, Nitra.Model.Identifier] = result;

    | RegexRule
      {
        override CollectGlobalSymbols = RegexRule.CollectGlobalSymbols(owner);
        override MakeContext          = RegexRule.MakeContext(parent);
        override CollectSyntaxMappings = RegexRule.CollectSyntaxMappings();
        override Typing               = RegexRule.Typing();
      }
    | TokenRule
      {
        override CollectGlobalSymbols = TokenRule.CollectGlobalSymbols(owner);
        override MakeContext          = TokenRule.MakeContext(parent);
        override CollectSyntaxMappings = TokenRule.CollectSyntaxMappings();
        override Typing               = TokenRule.Typing();
      }
    | SimpleRule
      {
        override CollectGlobalSymbols = SimpleRule.CollectGlobalSymbols(owner);
        override MakeContext          = SimpleRule.MakeContext(parent);
        override CollectSyntaxMappings = SimpleRule.CollectSyntaxMappings();
        override Typing               = SimpleRule.Typing();
      }
    | VoidRule
      {
        override CollectGlobalSymbols = VoidRule.CollectGlobalSymbols(owner);
        override MakeContext          = VoidRule.MakeContext(parent);
        override CollectSyntaxMappings = VoidRule.CollectSyntaxMappings();
        override Typing               = VoidRule.Typing();
      }
    | ExtensibleTokenRule
      {
        override CollectGlobalSymbols = ExtensibleTokenRule.CollectGlobalSymbols(owner);
        override MakeContext          = ExtensibleTokenRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleTokenRule.CollectSyntaxMappings();
        override Typing               = ExtensibleTokenRule.Typing();
      }
    | ExtensibleRule
      {
        override CollectGlobalSymbols = ExtensibleRule.CollectGlobalSymbols(owner);
        override MakeContext          = ExtensibleRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleRule.CollectSyntaxMappings();
        override Typing               = ExtensibleRule.Typing();
      }
    | Marker              = "marker"              sm Name                                                   ";"nl
      {
        override CollectGlobalSymbols = _ = owner.Node.AddAndReport(ParsedMarkerSymbol(Name, owner), Location);
      }
    | ExtendSyntax        = "extend"  sm "syntax" sm (Name sm "=" sm)? BaseName outline_begin_before nl "{" inl ExtensionRule* d "}" outline_end_before nl
      {
        [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedExtendSyntaxSymbol = ParsedExtendSyntaxSymbol(this, owner);
        override CollectGlobalSymbols
        {
          def symbol = MakeSymbol(owner);
          _ = owner.Node.AddAndReport.[ExtendSyntaxSymbol](symbol, Location);
          foreach (rule in ExtensionRules)
            rule.CollectGlobalSymbols(symbol);
        }
        override MakeContext
        {
          def context = RuleDeclarationSiteContext(parent, Symbol);
          _ = FoldThrough(ExtensionRules, context, _.MakeContext(_));
          parent
        }
        override CollectSyntaxMappings
        {
          foreach (m in ExtensionRules)
            m.CollectSyntaxMappings();
        }
        override Typing
        {
          def baseRule = this.Symbol.Extend;
          when (baseRule is Some(symbol) when symbol.Options.IsTokenRule)
            Context.Project.Error(BaseName.Location, "Can't extend token with syntax rule.", -1);
          foreach (m in ExtensionRules)
            m.Typing(baseRule);
        }
      }
    | ExtendToken         = "extend"  sm "token"  sm (Name sm "=" sm)? BaseName outline_begin_before nl "{" inl ExtensionRule* d "}" outline_end_before nl
      {
        [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedExtendTokenSymbol = ParsedExtendTokenSymbol(this, owner);
        override CollectGlobalSymbols
        {
          def symbol = MakeSymbol(owner);
          _ = owner.Node.AddAndReport.[ExtendSyntaxSymbol](symbol, Location);
          foreach (rule in ExtensionRules)
            rule.CollectGlobalSymbols(symbol);
        }
        override MakeContext
        {
          def context = RuleDeclarationSiteContext(parent, Symbol);
          _ = FoldThrough(ExtensionRules, context, _.MakeContext(_));
          parent
        }
        override CollectSyntaxMappings
        {
          foreach (m in ExtensionRules)
            m.CollectSyntaxMappings();
        }
        override Typing
        {
          def baseRule = this.Symbol.Extend;
          when (baseRule is Some(symbol) when !symbol.Options.IsTokenRule)
            Context.Project.Error(BaseName.Location, "Can't extend syntax rule with token.", -1);
          foreach (m in ExtensionRules)
            m.Typing(baseRule);
        }
      }
    | RuleAlias
      {
        override MakeContext = RuleAlias.MakeContext(parent);
      }
    | TokenLiteral        = "literal"             sm Name  sm "="  sm (StringLiteral; ","sm)+               ";"nl
      {
        override GetTokenLiteralNames
        {
          def name = Name.Identifier();
          FoldThrough(StringLiterals.Item1, result, (strLit, result) => result.Replace(strLit.Value(), name))
        }
        override MakeContext = TokenLiteralContext(parent, Name, StringLiterals.Item1);
      }
    | SpanClass           = "span"    sm "class"  sm Name MatchTokens=("=" RegexExpression)?                ";"nl
      {
        [Cached] private MakeSymbol(context : Context) : SpanClassSymbol
        {
          def symbol = ParsedSpanClassSymbol(this, context);
          context.Project.AddSymbolDef(symbol, Name.Location);
          symbol
        }
        [Cached] private RegularRule() : option[RegularRule] = MatchTokens.Map(t =>
        {
          def rr = t.Item2.Typing();
          rr.ValidateRegularRule(Context.Project);
          rr
        });
        override MakeContext
        {
          def context = SpanClassContext(parent, MakeSymbol(parent));
          _ = MatchTokens.Map(t => t.Item2.MakeContext(context));
          context
        }
        override Typing
        {
          _ = RegularRule();
        }
      }
    | BracePair           = "braces"  sm Open=RegexExpression "," sm Close=RegexExpression                  ";"nl
      {
        override MakeContext
        {
          def context = BracePairContext(parent, Open, Close);
          _ = Open.MakeContext(context);
          _ = Close.MakeContext(context);
          context
        }
        override Typing
        {
          def compilationMessages = Context.Project;
          Open.Typing().ValidateRegularRule(compilationMessages);
          Close.Typing().ValidateRegularRule(compilationMessages);
        }
      }
    | KeywordRegex        = "keyword" sm "regex"  sm MatchTokens=RegexExpression sm "rule" sm QualifiedName ";"nl
      {
        override MakeContext
        {
          def context = KeywordRegexContext(parent, MatchTokens, QualifiedName);
          _ = MatchTokens.MakeContext(context);
          context
        }
      }
  }

  syntax RuleAlias = "alias" sm Name sm "=" sm RuleExpression ";"nl
  {
    [Cached] private MakeSymbol(project : Project) : RuleAliasSymbol
    {
      def symbol = ParsedRuleAliasSymbol(this);
      project.AddSymbolDef(symbol, Name.Location);
      symbol
    }
    MakeContext(parent : Context) : Context
    {
      RuleAliasContext(parent, MakeSymbol(parent.Project));
    }
  }

  syntax MapDeclarationExpression
  {
    | Block
    | Empty      = ";"
    | Expression = Expression ";"
  }

  syntax MapDeclarationMember
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    GetDeclarationMappingField(declarationSymbol : DeclarationSymbol, _ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingField;

    | Automatic = RuleFieldPath=QualifiedName sm "->" sm FieldName=Name ";"
      {
        override GetDeclarationMappingField
        {
          def declarationPropertyRef = TypingUtils.BindDeclarationProperty(declarationSymbol, this.FieldName, Context.Project);
          def ruleFieldPathLocation  = this.RuleFieldPath.Location;
          def ruleFieldPath          = this.RuleFieldPath.CalcLocations();
          SyntaxMappingField.Automatic(this.Location, declarationPropertyRef, ruleFieldPathLocation, ruleFieldPath)
        }
      }
    | Inline = FieldName=Name sm "=" sm Code=MapDeclarationExpression
      {
        override GetDeclarationMappingField
        {
          def fieldRef = TypingUtils.BindDeclarationProperty(declarationSymbol, this.FieldName, Context.Project);
          def code     = NemerleParser.Parse(this.Code, this.Context);
          SyntaxMappingField.Inline(this.Location, fieldRef, code)
        }
      }
    | Extension = "|" sm RuleName=Name DeclarationName=("->" sm Name)? Body=MapSyntaxBody?
      {
        override MakeContext = if (Body.HasValue) Body.Value.MakeContext(parent) else parent;
        override GetDeclarationMappingField
        {
          def compilationMessages = Context.Project;
          if (declarationSymbol is ExtensibleDeclarationSymbol)
          {
            def ruleName              = this.RuleName;
            def declarationName       = if (this.DeclarationName.HasValue) this.DeclarationName.Value.Item2 else ruleName;
            def currentDeclarationRef = Utils.BindByHierarchy.[DeclarationSymbol](declarationSymbol, declarationName, compilationMessages);
            def currentRuleRef        = Utils.BindByHierarchy.[SyntaxRuleSymbol](_ruleSymbol, ruleName, compilationMessages);

            when (currentDeclarationRef.IsSome)
            when (currentRuleRef is SymbolRef.Some(currentRule))
            {
              def syntaxMappingBody =
                if (this.Body.HasValue)
                  this.Body.Value.GetSyntaxMappingBody(currentDeclarationRef, currentRule)
                else
                {
                  TypingUtils.CheckRequiredDeclarationProperties(declarationSymbol, Dictionary(), this.Location, compilationMessages);
                  SyntaxMappingBody.PerField(this.DeclarationName.Location, currentDeclarationRef, []);
                }
              currentRule.SetSyntaxMappingBody(syntaxMappingBody)
            }
          }
          else
          {
            def name = declarationSymbol.Name;
            compilationMessages.Error(this.DeclarationName.Location, $"Declaration '$name' is not extensible.", -1);
          }
          null
        }
      }
  }

  syntax MapSyntaxBody
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    GetSyntaxMappingBody(declarationSymbolRef : SymbolRef[DeclarationSymbol], _ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingBody;

    | Empty = ";"
      {
        override GetSyntaxMappingBody
        {
          def compilationMessages = this.Context.Project;
          def declarationSymbol   = declarationSymbolRef.GetValue(compilationMessages);
          unless (_ruleSymbol is ExtensibleRuleSymbol)
            TypingUtils.CheckRequiredDeclarationProperties(declarationSymbol, Dictionary(), this.Location, compilationMessages);
          SyntaxMappingBody.PerField(this.Location, declarationSymbolRef, []);
        }
      }
    | CallMember = "call" QualifiedName ";"
      {
        override GetSyntaxMappingBody = SyntaxMappingBody.CallMember(this.Location, declarationSymbolRef, this.QualifiedName.Location, this.QualifiedName.CalcLocations());
      }
    | Inline = sm "=" sm Expr=MapDeclarationExpression
      {
        override GetSyntaxMappingBody = SyntaxMappingBody.Inline(this.Location, declarationSymbolRef, NemerleParser.Parse(this.Expr, this.Context));
      }
    | PerMember = outline_begin_before nl OpenBrace="{" inl Members=MapDeclarationMember* d CloseBrace="}" outline_end_before nl
      {
        override MakeContext = PassThrough(Members, parent, _.MakeContext(_));
        override GetSyntaxMappingBody
        {
          def compilationMessages = this.Context.Project;
          def declarationSymbol   = declarationSymbolRef.GetValue(compilationMessages);

          def initializedProperties = Dictionary();
          def buffer = List();
          foreach (member in Members)
          {
            def mappingField = member.GetDeclarationMappingField(declarationSymbol, _ruleSymbol);
            when (mappingField != null)
            when (mappingField.DeclarationProperty is SymbolRef.Some(declarationProperty))
            {
              def propertyName = declarationProperty.Name;
              if (!(declarationProperty is SimpleDeclarationPropertySymbol || declarationProperty is NameDeclarationPropertySymbol))
                compilationMessages.Error(mappingField.DeclarationProperty.Location, $"Field '$propertyName' is not assignable.", -1);
              else if (initializedProperties.ContainsKey(declarationProperty))
              {
                using (messages = compilationMessages.RootError(mappingField.DeclarationProperty.Location, $"Duplicatate assignment of field '$propertyName'.", -1))
                  messages.Hint(initializedProperties[declarationProperty], "First assigned here.", -1);
              }
              else
                initializedProperties.Add(declarationProperty, mappingField.DeclarationProperty.Location);

              buffer.Add(mappingField);
            }
          }
          TypingUtils.CheckRequiredDeclarationProperties(declarationSymbol, initializedProperties, Location(this.Location.Source, this.CloseBrace), compilationMessages);
          SyntaxMappingBody.PerField(this.Location, declarationSymbolRef, buffer.ToNList())
        }
      }
  }

  syntax TokenRule = RuleAttributes "token" sm Name sm "=" sm RuleExpression SimpleRuleBody
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedTokenRuleSymbol = ParsedTokenRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      SimpleRuleBody.CollectGlobalSymbols(symbol);
    }
    MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, this.Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = SimpleRuleBody.MakeContext(context);
      parent
    }
    [Cached] private MakeTypedRule()   : Rule.Sequence = TypeRuleExpression(this.Symbol.Options, SimpleRuleBody.Context, RuleExpression.Typing(None(), 0, None(), SimpleRuleBody.Context, this.Symbol.Options));
    CollectSyntaxMappings() : void = SimpleRuleBody.CollectSyntaxMappings(this.Symbol);
    Typing() : void
    {
      _ = MakeTypedRule();
      SimpleRuleBody.Typing(this.Symbol);
    }
  }

  syntax RegexRule = RuleAttributes "regex" sm Name sm "=" sm RegexExpression RegexRuleBody
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedRegularRuleSymbol = ParsedRegularRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      RegexRuleBody.CollectGlobalSymbols(symbol);
    }
    MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = RegexExpression.MakeContext(context);
      _ = RegexRuleBody.MakeContext(context);
      parent
    }
    [Cached] private Regex() : RegularRule      = RegexExpression.Typing();
    CollectSyntaxMappings() : void = RegexRuleBody.CollectSyntaxMappings();
    Typing() : void
    {
      _ = Regex();
      RegexRuleBody.Typing();
    }
  }

  syntax RegexRuleBody
  {
    CollectGlobalSymbols(ruleSymbol : RegularRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    GetLastLocation() : Nitra.Location;
    CollectSyntaxMappings() : void { }
    Typing() : void { }

    | Empty = ";"nl
      {
        override GetLastLocation = MakeLastLocation(this, Semicolon);
      }
    | Block = outline_begin_before nl "{" inl RegexRuleBodyMember* d "}" outline_end_before nl
      {
        override CollectGlobalSymbols = foreach (member in RegexRuleBodyMembers) member.CollectGlobalSymbols(ruleSymbol);
        override MakeContext = FoldThrough(RegexRuleBodyMembers, parent, _.MakeContext(_));
        override GetLastLocation = MakeLastLocation(this, OpenBrace);
        override CollectSyntaxMappings = foreach (x in RegexRuleBodyMembers) x.CollectSyntaxMappings();
        override Typing = foreach (x in RegexRuleBodyMembers) x.Typing();
      }
  }

  syntax RegexRuleBodyMember
  {
    CollectGlobalSymbols(ruleSymbol : RegularRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    CollectSyntaxMappings() : void { }
    Typing() : void { }

    | RuleAlias
      {
        override MakeContext = RuleAlias.MakeContext(parent);
      }
    | RegexRule
      {
        override CollectGlobalSymbols = RegexRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RegexRule.MakeContext(parent);
        override CollectSyntaxMappings = RegexRule.CollectSyntaxMappings();
        override Typing               = RegexRule.Typing();
      }
    | TokenRule
      {
        override CollectGlobalSymbols = TokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = TokenRule.MakeContext(parent);
        override CollectSyntaxMappings = TokenRule.CollectSyntaxMappings();
        override Typing               = TokenRule.Typing();
      }
  }

  syntax SimpleRule = RuleAttributes "syntax" sm Name sm "=" sm RuleExpression SimpleRuleBody
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedSimpleRuleSymbol = ParsedSimpleRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      SimpleRuleBody.CollectGlobalSymbols(symbol);
    }
    MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = SimpleRuleBody.MakeContext(context);
      parent
    }
    [Cached] private MakeTypedRule()   : Rule.Sequence = TypeRuleExpression(this.Symbol.Options, SimpleRuleBody.Context, RuleExpression.Typing(None(), 0, None(), SimpleRuleBody.Context, this.Symbol.Options));
    CollectSyntaxMappings() : void = SimpleRuleBody.CollectSyntaxMappings(this.Symbol);
    Typing() : void
    {
      _ = MakeTypedRule();
      SimpleRuleBody.Typing(Symbol);
    }
  }

  syntax VoidRule = RuleAttributes "void" sm Name sm "=" sm RuleExpression SimpleRuleBody
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedVoidRuleSymbol = ParsedVoidRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      SimpleRuleBody.CollectGlobalSymbols(symbol);
    }
    MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = SimpleRuleBody.MakeContext(context);
      parent
    }
    [Cached] private MakeTypedRule()   : Rule.Sequence = TypeRuleExpression(this.Symbol.Options, SimpleRuleBody.Context, RuleExpression.Typing(None(), 0, None(), SimpleRuleBody.Context, this.Symbol.Options));
    CollectSyntaxMappings() : void = SimpleRuleBody.CollectSyntaxMappings(this.Symbol);
    Typing() : void
    {
      _ = MakeTypedRule();
      SimpleRuleBody.Typing(Symbol);
    }
  }

  syntax SimpleRuleBody
  {
    CollectGlobalSymbols(ruleSymbol : SimpleRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    GetLastLocation() : Nitra.Location;
    CollectSyntaxMappings(ruleSymbol : SimpleRuleSymbol) : void { _ = ruleSymbol }
    Typing(ruleSymbol : SimpleRuleSymbol) : void { _ = ruleSymbol }

    | Empty = ";"nl
      {
        override GetLastLocation = MakeLastLocation(this, Semicolon);
      }
    | Block = outline_begin_before nl "{" inl SimpleRuleBodyMember* d "}" outline_end_before nl
      {
        override CollectGlobalSymbols = foreach (member in SimpleRuleBodyMembers) member.CollectGlobalSymbols(ruleSymbol);
        override MakeContext = FoldThrough(SimpleRuleBodyMembers, parent, _.MakeContext(_));
        override GetLastLocation = MakeLastLocation(this, OpenBrace);
        override CollectSyntaxMappings = foreach (x in SimpleRuleBodyMembers) x.CollectSyntaxMappings(ruleSymbol);
        override Typing = foreach (x in SimpleRuleBodyMembers) x.Typing(ruleSymbol);
      }
  }

  syntax SimpleRuleBodyMember
  {
    CollectGlobalSymbols(ruleSymbol : SimpleRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    CollectSyntaxMappings(_ruleSymbol : SimpleRuleSymbol) : void {}
    Typing(_ruleSymbol : SimpleRuleSymbol) : void { }

    | RuleAlias
      {
        override MakeContext = RuleAlias.MakeContext(parent);
      }
    | RegexRule
      {
        override CollectGlobalSymbols = RegexRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RegexRule.MakeContext(parent);
        override CollectSyntaxMappings = RegexRule.CollectSyntaxMappings();
        override Typing               = RegexRule.Typing();
      }
    | TokenRule
      {
        override CollectGlobalSymbols = TokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = TokenRule.MakeContext(parent);
        override CollectSyntaxMappings = TokenRule.CollectSyntaxMappings();
        override Typing               = TokenRule.Typing();
      }
    | VoidRule
      {
        override CollectGlobalSymbols = VoidRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = VoidRule.MakeContext(parent);
        override CollectSyntaxMappings = VoidRule.CollectSyntaxMappings();
        override Typing               = VoidRule.Typing();
      }
    | SimpleRule
      {
        override CollectGlobalSymbols = SimpleRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = SimpleRule.MakeContext(parent);
        override CollectSyntaxMappings = SimpleRule.CollectSyntaxMappings();
        override Typing               = SimpleRule.Typing();
      }
    | ExtensibleTokenRule
      {
        override CollectGlobalSymbols = ExtensibleTokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensibleTokenRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleTokenRule.CollectSyntaxMappings();
        override Typing               = ExtensibleTokenRule.Typing();
      }
    | ExtensibleRule
      {
        override CollectGlobalSymbols = ExtensibleRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensibleRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleRule.CollectSyntaxMappings();
        override Typing               = ExtensibleRule.Typing();
      }
    | RuleMethod
      {
        override CollectGlobalSymbols = RuleMethod.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethod.MakeContext(parent);
        override Typing               = RuleMethod.Typing();
      }
    | RuleMethodOverride
      {
        override CollectGlobalSymbols = RuleMethodOverride.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethodOverride.MakeContext(parent);
        override Typing               = RuleMethodOverride.Typing();
      }
    | RuleMethodMissing
      {
        override CollectGlobalSymbols = RuleMethodMissing.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethodMissing.MakeContext(parent);
        override Typing               = RuleMethodMissing.Typing();
      }
    | MapSyntax = "map" "to" sm DeclarationName=QualifiedName MapSyntaxBody
      {
        override MakeContext
        {
          def context = MapDeclarationContext(parent);
          _ = MapSyntaxBody.MakeContext(context);
          context
        }
        override CollectSyntaxMappings
        {
          def declarationSymbol = SymbolRef.Create(DeclarationName, this.Context.Bind.[DeclarationSymbol](DeclarationName));
          when (declarationSymbol.IsSome)
          {
            def body = MapSyntaxBody.GetSyntaxMappingBody(declarationSymbol, _ruleSymbol);
            _ruleSymbol.SetSyntaxMappingBody(body);
          }
        }
      }
  }

  syntax ExtensibleRule = RuleAttributes "syntax"  sm Name ExtensibleRuleBody
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedExtensibleRuleSymbol = ParsedExtensibleRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      ExtensibleRuleBody.CollectGlobalSymbols(symbol);
    }
    MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = ExtensibleRuleBody.MakeContext(context);
      parent
    }
    CollectSyntaxMappings() : void = ExtensibleRuleBody.CollectSyntaxMappings(this.Symbol);
    Typing() : void
    {
      _ = ExtensibleRuleBody.Typing(ExtensibleRuleRef.Some(Name.Location, false, Symbol));
    }
  }

  syntax ExtensibleTokenRule = RuleAttributes "token"  sm Name ExtensibleRuleBody
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedExtensibleTokenRuleSymbol = ParsedExtensibleTokenRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      ExtensibleRuleBody.CollectGlobalSymbols(symbol);
    }
    MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = ExtensibleRuleBody.MakeContext(context);
      parent
    }
    CollectSyntaxMappings() : void = ExtensibleRuleBody.CollectSyntaxMappings(this.Symbol);
    Typing() : void
    {
      _ = ExtensibleRuleBody.Typing(ExtensibleRuleRef.Some(Name.Location, false, this.Symbol));
    }
  }

  syntax ExtensibleRuleBody
  {
    CollectGlobalSymbols(ruleSymbol : ExtensibleRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    GetLastLocation() : Nitra.Location;
    CollectSyntaxMappings(_ruleSymbol : ExtensibleRuleSymbol) : void { }
    Typing(_baseRule : ExtensibleRuleRef) : void { }

    | Empty = ";"nl
      {
        override GetLastLocation = MakeLastLocation(this, Semicolon);
      }
    | Block = outline_begin_before nl "{" inl ExtensibleRuleBodyMember* d "}" outline_end_before nl
      {
        override CollectGlobalSymbols = foreach (member in ExtensibleRuleBodyMembers) member.CollectGlobalSymbols(ruleSymbol);
        override MakeContext = FoldThrough(ExtensibleRuleBodyMembers, parent, _.MakeContext(_));
        override GetLastLocation = MakeLastLocation(this, OpenBrace);
        override CollectSyntaxMappings = foreach (x in ExtensibleRuleBodyMembers) x.CollectSyntaxMappings(_ruleSymbol);
        override Typing = foreach (x in ExtensibleRuleBodyMembers) x.Typing(_baseRule);
      }
  }

  syntax ExtensibleRuleBodyMember
  {
    CollectGlobalSymbols(ruleSymbol : ExtensibleRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    CollectSyntaxMappings(_ruleSymbol : ExtensibleRuleSymbol) : void { }
    Typing(_baseRule : ExtensibleRuleRef) : void { }

    | RuleAlias
      {
        override MakeContext = RuleAlias.MakeContext(parent);
      }
    | RegexRule
      {
        override CollectGlobalSymbols = RegexRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RegexRule.MakeContext(parent);
        override CollectSyntaxMappings = RegexRule.CollectSyntaxMappings();
        override Typing               = RegexRule.Typing();
      }
    | TokenRule
      {
        override CollectGlobalSymbols = TokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = TokenRule.MakeContext(parent);
        override CollectSyntaxMappings = TokenRule.CollectSyntaxMappings();
        override Typing               = TokenRule.Typing();
      }
    | VoidRule
      {
        override CollectGlobalSymbols = VoidRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = VoidRule.MakeContext(parent);
        override CollectSyntaxMappings = VoidRule.CollectSyntaxMappings();
        override Typing               = VoidRule.Typing();
      }
    | SimpleRule
      {
        override CollectGlobalSymbols = SimpleRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = SimpleRule.MakeContext(parent);
        override CollectSyntaxMappings = SimpleRule.CollectSyntaxMappings();
        override Typing               = SimpleRule.Typing();
      }
    | ExtensibleTokenRule
      {
        override CollectGlobalSymbols = ExtensibleTokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensibleTokenRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleTokenRule.CollectSyntaxMappings();
        override Typing               = ExtensibleTokenRule.Typing();
      }
    | ExtensibleRule
      {
        override CollectGlobalSymbols = ExtensibleRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensibleRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleRule.CollectSyntaxMappings();
        override Typing               = ExtensibleRule.Typing();
      }
    | ExtensionRule
      {
        override CollectGlobalSymbols = ExtensionRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensionRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensionRule.CollectSyntaxMappings();
        override Typing               = ExtensionRule.Typing(_baseRule);
      }
    | RuleMethod
      {
        override CollectGlobalSymbols = RuleMethod.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethod.MakeContext(parent);
        override Typing               = RuleMethod.Typing();
      }
    | RuleMethodOverride
      {
        override CollectGlobalSymbols = RuleMethodOverride.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethodOverride.MakeContext(parent);
        override Typing               = RuleMethodOverride.Typing();
      }
    | RuleMethodMissing
      {
        override CollectGlobalSymbols = RuleMethodMissing.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethodMissing.MakeContext(parent);
        override Typing               = RuleMethodMissing.Typing();
      }
    | MapSyntax = "map" "to" sm DeclarationName=QualifiedName BodySpan=";"
      {
        override CollectSyntaxMappings
        {
          def declarationSymbol = SymbolRef.Create(DeclarationName, this.Context.Bind.[DeclarationSymbol](DeclarationName));
          when (declarationSymbol.IsSome)
          {
            def body = SyntaxMappingBody.PerField(Location(this.Location.Source, this.BodySpan), declarationSymbol, []);
            _ruleSymbol.SetSyntaxMappingBody(body);
          }
        }
      }
  }

  syntax ExtensionRule = "|" sm RuleAttributes (Name "=")? RuleExpression Precedence? ExtensionRuleBody?
  {
    [Cached] private MakeSymbol(owner : IRuleDeclarationSite) : ParsedExtensionRuleSymbol = ParsedExtensionRuleSymbol(this, owner);
    CollectGlobalSymbols(owner : IRuleDeclarationSite) : void
    {
      def symbol = MakeSymbol(owner);
      _ = owner.Node.AddAndReport.[RuleDefSymbol](symbol, Location);
      when (ExtensionRuleBodyOpt.HasValue)
        ExtensionRuleBodyOpt.Value.CollectGlobalSymbols(symbol);
    }
    [Cached] MakeContext(parent : Context) : Context
    {
      def context = RuleDeclarationSiteContext(parent, Symbol);
      _ = RuleAttributes.MakeContext(context);
      _ = MakeRuleTypingContext(context);
      parent
    }
    [Cached] private MakeRuleTypingContext(parent : Context) : Context
    {
      if (ExtensionRuleBodyOpt.HasValue)
        ExtensionRuleBodyOpt.Value.MakeContext(parent)
      else
        parent
    }
    [Cached] private MakeBaseRuleRef(baseRule : ExtensibleRuleRef)  : ExtensibleRuleRef     = baseRule;
    [Cached] private MakeTypedRule()                                : Rule.Sequence         = TypeRuleExpression(this.Symbol.Options, RuleTypingContext, RuleExpression.Typing(BaseRuleRef, PrecedenceOpt.Map(_.Value()) ?? 0, None(), RuleTypingContext, this.Symbol.Options));
    CollectSyntaxMappings() : void
    {
      when (ExtensionRuleBodyOpt.HasValue)
        ExtensionRuleBodyOpt.Value.CollectSyntaxMappings(this.Symbol);
    }
    Typing(baseRule : ExtensibleRuleRef) : void
    {
      _ = MakeBaseRuleRef(baseRule);
      _ = MakeTypedRule();
      when (this.Symbol.Options.OperatorInfo == OperatorInfo.None && baseRule.IsSome)
        TryInferOperatorType(this.Symbol);
      when (ExtensionRuleBodyOpt.HasValue)
        ExtensionRuleBodyOpt.Value.Typing(BaseRuleRef, this.Symbol);
    }
  }

  syntax ExtensionRuleBody
  {
    CollectGlobalSymbols(ruleSymbol : ExtensionRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    GetLastLocation() : Nitra.Location;
    CollectSyntaxMappings(_ruleSymbol : ExtensionRuleSymbol) : void { }
    Typing(_baseRule : ExtensibleRuleRef, _ruleSymbol : ExtensionRuleSymbol) : void { }

    | Empty = ";"nl
      {
        override GetLastLocation = MakeLastLocation(this, Semicolon);
      }
    | Block = outline_hiden outline_begin_before inl "{" inl ExtensionRuleBodyMember* d "}" outline_end_before nl  d
      {
        override CollectGlobalSymbols = foreach (member in ExtensionRuleBodyMembers) member.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = FoldThrough(ExtensionRuleBodyMembers, parent, _.MakeContext(_));
        override GetLastLocation      = MakeLastLocation(this, OpenBrace);
        override CollectSyntaxMappings = foreach (x in ExtensionRuleBodyMembers) x.CollectSyntaxMappings(_ruleSymbol);
        override Typing               = foreach (x in ExtensionRuleBodyMembers) x.Typing(_baseRule, _ruleSymbol);
      }
  }

  syntax ExtensionRuleBodyMember
  {
    CollectGlobalSymbols(ruleSymbol : ExtensionRuleSymbol) : void = _ = ruleSymbol;
    [Cached] MakeContext(parent : Context) : Context = parent;
    CollectSyntaxMappings(_ruleSymbol : ExtensionRuleSymbol) : void { }
    Typing(_baseRule : ExtensibleRuleRef, _ruleSymbol : ExtensionRuleSymbol) : void { }

    | RuleAlias
      {
        override MakeContext = RuleAlias.MakeContext(parent);
      }
    | RegexRule
      {
        override CollectGlobalSymbols = RegexRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RegexRule.MakeContext(parent);
        override CollectSyntaxMappings = RegexRule.CollectSyntaxMappings();
        override Typing               = RegexRule.Typing();
      }
    | TokenRule
      {
        override CollectGlobalSymbols = TokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = TokenRule.MakeContext(parent);
        override CollectSyntaxMappings = TokenRule.CollectSyntaxMappings();
        override Typing               = TokenRule.Typing();
      }
    | VoidRule
      {
        override CollectGlobalSymbols = VoidRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = VoidRule.MakeContext(parent);
        override CollectSyntaxMappings = VoidRule.CollectSyntaxMappings();
        override Typing               = VoidRule.Typing();
      }
    | SimpleRule
      {
        override CollectGlobalSymbols = SimpleRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = SimpleRule.MakeContext(parent);
        override CollectSyntaxMappings = SimpleRule.CollectSyntaxMappings();
        override Typing               = SimpleRule.Typing();
      }
    | ExtensibleTokenRule
      {
        override CollectGlobalSymbols = ExtensibleTokenRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensibleTokenRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleTokenRule.CollectSyntaxMappings();
        override Typing               = ExtensibleTokenRule.Typing();
      }
    | ExtensibleRule
      {
        override CollectGlobalSymbols = ExtensibleRule.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = ExtensibleRule.MakeContext(parent);
        override CollectSyntaxMappings = ExtensibleRule.CollectSyntaxMappings();
        override Typing               = ExtensibleRule.Typing();
      }
    | RuleMethod
      {
        override CollectGlobalSymbols = RuleMethod.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethod.MakeContext(parent);
        override Typing               = RuleMethod.Typing();
      }
    | RuleMethodOverride
      {
        override CollectGlobalSymbols = RuleMethodOverride.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethodOverride.MakeContext(parent);
        override Typing               = RuleMethodOverride.Typing();
      }
    | RuleMethodMissing
      {
        override CollectGlobalSymbols = RuleMethodMissing.CollectGlobalSymbols(ruleSymbol);
        override MakeContext          = RuleMethodMissing.MakeContext(parent);
        override Typing               = RuleMethodMissing.Typing();
      }
    | MapSyntax = "map" "to" sm DeclarationName=QualifiedName MapSyntaxBody
      {
        override MakeContext
        {
          def context = MapDeclarationContext(parent);
          _ = MapSyntaxBody.MakeContext(context);
          context
        }
        override CollectSyntaxMappings
        {
          def declarationSymbol = SymbolRef.Create(DeclarationName, this.Context.Bind.[DeclarationSymbol](DeclarationName));
          when (declarationSymbol.IsSome)
          {
            def body = MapSyntaxBody.GetSyntaxMappingBody(declarationSymbol, _ruleSymbol);
            _ruleSymbol.SetSyntaxMappingBody(body);
          }
        }
      }
  }

  syntax RuleMethodsParam = Name sm ":" sm Type;
  token RuleMethodPrivate = "private" sm;

  syntax RuleMethodAttribute
  {
    IsCached() : bool;

    | Cached = AttributeName="Cached"
      {
        override IsCached = true;
      }
  }
  syntax RuleMethodAttributeList = "[" (RuleMethodAttribute; ",")+ "]" nl
  {
    IsCached() : bool
    {
      foreach(x when x.IsCached() in RuleMethodAttributes.Item1)
        return true;
      false
    }
  }
  syntax RuleMethodAttributes = RuleMethodAttributeList*
  {
    IsCached() : bool
    {
      foreach(x when x.IsCached() in RuleMethodAttributeLists)
        return true;
      false
    }
  }

  syntax RuleMethod = RuleMethodAttributes RuleMethodPrivate? Name sm "(" (RuleMethodsParam; "," sm)* ")" sm ":" sm Type RuleMethodBody
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    [Cached] private MakeSymbol(ruleSymbol : SyntaxRuleSymbol, compilationMessages : ICompilerMessages) : RuleMethod.DefinitionSymbol
    {
      if (RuleMethodPrivateOpt.HasValue)
      {
        when (RuleMethodBody.IsEmpty())
          compilationMessages.Error(this.Location, "A private rule method must have a body.", -1);
        unless (ruleSymbol is SimpleRuleSymbol || ruleSymbol is ExtensionRuleSymbol)
          compilationMessages.Error(this.Location, "A private rule method can be declared only in simple rules and extension rules.", -1);
        RuleMethod.ParsedDefPrivateSymbol(this)
      }
      else if (RuleMethodBody.IsEmpty())
      {
        unless (ruleSymbol is ExtensibleRuleSymbol)
          compilationMessages.Error(this.Location, "An abstract rule method must be defined in an extension point rule only.", -1);
        RuleMethod.ParsedAbstractSymbol(this)
      }
      else
      {
        unless (ruleSymbol is SimpleRuleSymbol || ruleSymbol is ExtensibleRuleSymbol)
          compilationMessages.Error(this.Location, "A public rule method must be defined in an extension point rule or a simple rule only.", -1);
        RuleMethod.ParsedDefSymbol(this)
      }
    }
    CollectGlobalSymbols(ruleSymbol : SyntaxRuleSymbol) : void
    {
      def compilationMessages = ruleSymbol.Node.Project;
      _ = ruleSymbol.Node.AddAndReport(MakeSymbol(ruleSymbol, compilationMessages), this.Location);
    }
    [Cached] private MakeSignature() : RuleMethod.RuleMethodSignature = RuleMethod.RuleMethodSignature(this.Location, NemerleParser.Parse(this.RuleMethodsParams.Item1, Context), NemerleParser.Parse(this.Type, Context));
    [Cached] private MakeBody()      : RuleMethod.RuleMethodBody      = RuleMethod.RuleMethodBody(this.RuleMethodBody.BodyLocation(), NemerleParser.Parse(this.RuleMethodBody, Context));
    [Cached] private MakeIsCached()  : bool                           = RuleMethodAttributes.IsCached();
    Typing() : void
    {
      _ = MakeSignature();
      _ = MakeBody();
      _ = MakeIsCached();
    }
  }

  syntax RuleMethodOverride = RuleMethodAttributes "override"     sm  Name RuleMethodBody
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    [Cached] private MakeSymbol(compilationMessages : ICompilerMessages) : RuleMethod.DefinitionSymbol
    {
      when (RuleMethodBody.IsEmpty())
        compilationMessages.Error(this.Location, "An overriding rule method must have a body.", -1);
      RuleMethod.ParsedOverrideSymbol(this);
    }
    CollectGlobalSymbols(ruleSymbol : SyntaxRuleSymbol) : void
    {
      _ = ruleSymbol.Node.AddAndReport(MakeSymbol(ruleSymbol.Node.Project), this.Location);
    }
    [Cached] private MakeBaseRuleMethod(compilationMessages : ICompilerMessages) : SymbolRef[RuleMethod.RuleMethodSymbol]
    {
      match (this.Symbol.DeclaringRule)
      {
        | ExtensionRuleSymbol(BaseRule = SymbolRef.Some(baseRuleSymbol)) =>
          match (baseRuleSymbol.Node.BindMany.[RuleMethod.DefinitionSymbol](Name.Location))
          {
            | [RuleMethod.DefSymbol      as baseRuleMethodSymbol]
            | [RuleMethod.AbstractSymbol as baseRuleMethodSymbol] =>
              SymbolRef.Some(Name.Location, false, baseRuleMethodSymbol)

            | [_] =>
              def name = Name.Value();
              compilationMessages.Error(this.Location, $"Cannot override '$name' rule method.", -1); //TODO: rewrite error message!
              SymbolRef.None(Name.Location, false)

            | _ =>
              def name = Name.Value();
              compilationMessages.Error(this.Location, $"No '$name' rule method to override.", -1);
              SymbolRef.None(Name.Location, false)
          }

        | _ =>
          compilationMessages.Error(this.Location, "An rule method can be overridden only in extending rules.", -1);
          SymbolRef.None(Name.Location, false)
      }
    }
    [Cached] private MakeBody() : RuleMethod.RuleMethodBody = RuleMethod.RuleMethodBody(this.RuleMethodBody.BodyLocation(), NemerleParser.Parse(this.RuleMethodBody, Context));
    Typing() : void
    {
      def compilationMessages = Context.Project;
      _ = MakeBaseRuleMethod(compilationMessages);
      _ = MakeBody();
    }
  }

  syntax RuleMethodMissing = RuleMethodAttributes "missing"        sm  Name RuleMethodBody
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    [Cached] private MakeSymbol(compilationMessages : ICompilerMessages) : RuleMethod.RuleMethodMissingValueSymbol
    {
      when (RuleMethodBody.IsEmpty())
        compilationMessages.Error(this.Location, "A 'missing' handler must have a body.", -1);
      RuleMethod.ParsedRuleMethodMissingValueSymbol(this);
    }
    CollectGlobalSymbols(ruleSymbol : SyntaxRuleSymbol) : void
    {
      def compilationMessages = ruleSymbol.Node.Project;
      _ = ruleSymbol.Node.AddAndReport(MakeSymbol(compilationMessages), this.Location);
    }
    [Cached] private MakeHandlingRuleMethod(compilationMessages : ICompilerMessages) : SymbolRef[RuleMethod.RuleMethodSymbol]
    {
      match (this.Symbol.DeclaringRule)
      {
        | ExtensibleRuleSymbol as targetRuleSymbol
        | SimpleRuleSymbol     as targetRuleSymbol =>
          match (targetRuleSymbol.Node.BindMany.[RuleMethod.DefinitionSymbol](Name.Location))
          {
            | [ruleMethodSymbol] => SymbolRef.Some(Name.Location, false, ruleMethodSymbol)
            | _ =>
              def name = Name.Value();
              compilationMessages.Error(this.Location, $"No '$name' rule method to handle 'missing'.", -1);
              SymbolRef.None(Name.Location, false)
          }

        | _ =>
          compilationMessages.Error(this.Location, "A 'missing' handler for a rule method can be defined in simple and extensible rules.", -1);
          SymbolRef.None(Name.Location, false)
      }
    }
    [Cached] private MakeBody() : RuleMethod.RuleMethodBody = RuleMethod.RuleMethodBody(this.RuleMethodBody.BodyLocation(), NemerleParser.Parse(this.RuleMethodBody, Context));
    Typing() : void
    {
      _ = MakeHandlingRuleMethod(Context.Project);
      _ = MakeBody();
    }
  }

  syntax Precedence = "precedence" sm Number RightAssociative=("right-associative")?
  {
    Value() : int = if (RightAssociative.HasValue) -Number.Value() else Number.Value();
  }

  syntax RuleMethodBody
  {
    BodyLocation() : Nitra.Location;
    IsEmpty() : bool;

    | Block
      {
        override BodyLocation = Block.Location;
        override IsEmpty = false;
      }
    | Expression = sm "=" sm Expression ";" nl
      {
        override BodyLocation = Expression.Location;
        override IsEmpty = false;
      }
    | Empty = ";" nl
      {
        override BodyLocation = Location(this.Location.Source, this.Location.StartPos, this.Location.StartPos);
        override IsEmpty = true;
      }
  }

  syntax TypeParams = "[" (Type; ","sm)+ "]";
  syntax SimpleName = Identifier TypeParams?;

  syntax Type
  {
    | PredefinedType
    | SimpleName
    | Qualified = Type "." SimpleName precedence 20;
    | Pointer   = Type "*" Type       precedence 10;
  }

  syntax Block = outline_hiden outline_begin_before nl "{" inl (Expression; ";" nl)* ";"* nl d "}" outline_end_before nl;
  syntax Parentheses = "(" Expression? ")";

  syntax Content
  {
    | Block;
    | IgnoreToken+;
    | CharLiteral;
    | StringLiteral;
    | Parentheses;
    | "fold" sm Identifier "(" Expression ";" (Expression; ";"sm)+ ")";
  }

  syntax ExpressionContent
  {
    | Content1 = Content;
    | Content2 = (!";" !")" !"}" !Content Any)+;
  }

  syntax Expression = ExpressionContent+;

  syntax Range
  {
    RangeSet(inCharSet : RangeSet, _compilationMessages : ICompilerMessages) : RangeSet;

    | SingleChar = CharLiteral
      {
        override RangeSet = inCharSet.AddSingleCharRange(CharLiteral.Value());
      }
    | CharRange       = CharLiteral ".." CharLiteral
      {
        override RangeSet = inCharSet.AddRange(CharLiteral1.Value(), CharLiteral2.Value());
      }
    | UnicodeRange    = Name
      {
        override RangeSet
        {
          def nameText = Name.Value();
          if (UnicodeCategoryTable.StrToUnicodeCategory(nameText) is Some(cat))
            inCharSet.AddRange(cat)
          else
          {
            _compilationMessages.Error(this, $"Invalid unicode category '$nameText'.", -1);
            inCharSet
          }
        }
      }
  }

  syntax RepeatQuantifier
  {
    Bounds() : RepeatBounds;

    | ZeroOrMany = "*"                                { override Bounds = (0,               None());                }
    | OneOrMany  = "+"                                { override Bounds = (1,               None());                }
    | UpperBound = "{" sm        "," sm Number sm "}" { override Bounds = (0,               Some(Number.Value()));  }
    | LowerBound = "{" sm Number ","           sm "}" { override Bounds = (Number.Value(),  None());                }
    | FullBounds = "{" sm Number "," sm Number sm "}" { override Bounds = (Number1.Value(), Some(Number2.Value())); }
    | Exact      = "{" sm Number               sm "}" { override Bounds { def x = Number.Value(); (x, Some(x)); }   }
  }

  alias Separator  = RegexExpression;

  syntax RegexExpression
  {
    [Cached] MakeContext(parent : Context) : Context = parent;
    [Cached] Typing() : RegularRule;

    | Choice                  = LeftRule=RegexExpression ^ 10 sm RightRules=("|" RegexExpression ^ 10)+
      {
        override MakeContext
        {
          def context1 = LeftRule.MakeContext(parent);
          def context2 = FoldThrough(RightRules, context1, (t, c) => t.Item2.MakeContext(c));
          context2
        }
        override Typing = RegularRule.Choice(Location, LeftRule.Typing() :: RightRules.Map(r => r.Item2.Typing()));
      }
    | Sequence                = LeftRule=RegexExpression ^ 20 sm RightRules=(RegexExpression ^ 20)+
      {
        override MakeContext
        {
          def context1 = LeftRule.MakeContext(parent);
          def context2 = FoldThrough(RightRules, context1, _.MakeContext(_));
          context2
        }
        override Typing = RegularRule.Sequence(Location, LeftRule.Typing() :: RightRules.Map(_.Typing()));
      }
    | Optional                = RegexExpression "?" precedence 30
      {
        override MakeContext = RegexExpression.MakeContext(parent);
        override Typing = RegularRule.Repeat(Location, 0, Some(1), this.RegexExpression.Typing());
      }
    | Repeat              = RegexExpression RepeatQuantifier precedence 30
      {
        override MakeContext = RegexExpression.MakeContext(parent);
        override Typing
        {
          def (lower, upper) = RepeatQuantifier.Bounds();
          RegularRule.Repeat(Location, lower, upper, this.RegexExpression.Typing());
        }
      }
    | Invert                  = "~" RegexExpression precedence 25
      {
        override MakeContext = RegexExpression.MakeContext(parent);
        override Typing = RegularRule.Invert(Location, this.RegexExpression.Typing());
      }
    | Subtract                = Rule1 = RegexExpression "-" Rule2 = RegexExpression precedence 22
      {
        override MakeContext = Rule2.MakeContext(Rule1.MakeContext(parent));
        override Typing = RegularRule.Subtract(Location, this.Rule1.Typing(), this.Rule2.Typing());
      }
    | Char                    = CharLiteral
      {
        override Typing = RegularRule.Chars(Location, [RangeSet().AddSingleCharRange(CharLiteral.Value())]);
      }
    | String                  = StringLiteral
      {
        override Typing = RegularRule.Chars(Location, RangeSet.MakeString(StringLiteral.Value()));
      }
    | Call                    = QualifiedName
      {
        override Typing
        {
          def ruleRef = SymbolRef.Create(QualifiedName, Context.Bind(QualifiedName));
          RegularRule.Call(Location, ruleRef)
        }
      }
    | Rounds                  = "(" RegexExpression ")"
      {
        override MakeContext = RegexExpression.MakeContext(parent);
        override Typing = RegexExpression.Typing();
      }
    | Range                   = "[" (Range; ","sm)+ "]"
      {
        override Typing
        {
          def compilationMessages = Context.Project;
          RegularRule.Chars(Location, [FoldThrough(Ranges.Item1, RangeSet(), _.RangeSet(_, compilationMessages))]);
        }
      }
    | InvertedRange           = "[" "^" (Range; ","sm)+ "]"
      {
        override Typing
        {
          def compilationMessages = Context.Project;
          RegularRule.Chars(Location, InvertRange(FoldThrough(Ranges.Item1, RangeSet(), _.RangeSet(_, compilationMessages))));
        }
      }
    | RepeatWithSeparator = "(" RegexExpression ";"sm Separator ")" RepeatQuantifier
      {
        override MakeContext  = parent |> RegexExpression.MakeContext |> Separator.MakeContext;
        override Typing
        {
          def (lower, upper) = RepeatQuantifier.Bounds();
          RegularRule.RepeatWithSeparator(Location, lower, upper, RegexExpression.Typing(), Separator.Typing());
        }
      }
  }

  alias Separator   = RuleExpression;

  syntax RuleExpression
  {
    /// precedence < 0 if it is right-associative
    Typing(_baseRule : option[ExtensibleRuleSymbol], _precedence : int, _fieldName : option[string], context : Context, _options : RuleDefinitionOptions) : Nitra.Model.Rule;
    InferName() : string = "";

    | Sequence                        = LeftRule=RuleExpression ^ 10 RightRules=(sm RuleExpression ^ 10)+
      {
        override Typing = TypeSequence(_baseRule, _precedence, _fieldName, context, _options, LeftRule, RightRules, this);
        override InferName = LeftRule.InferName();
      }
    | Not                             = "!" RuleExpression ^ 20
      {
        override Typing
        {
          def rule = this.RuleExpression.Typing(None(), 0, None(), context, _options);
          Rule.Not(this.Location, RuleType.Void(), "", rule);
        }
      }
    | And                             = "&" RuleExpression ^ 20
      {
        override Typing = Rule.And(this.Location, RuleType.Void(), "", RuleExpression.Typing(None(), 0, None(), context, _options));
      }
    | Optional                        = RuleExpression "?" precedence 30
      {
        override Typing
        {
          def rule  = RuleExpression.Typing(None(), 0, None(), context, _options);
          def type  = EvaluateOptionRuleType(rule);
          Rule.Repeat(this.Location, type, _fieldName ?? (rule.FieldName + "Opt"), 0, Some(1), rule);
        }
        override InferName = RuleExpression.InferName() + "Opt";
      }
    | Repeat                      = RuleExpression RepeatQuantifier precedence 30
      {
        override Typing
        {
          def rule           = RuleExpression.Typing(None(), 0, None(), context, _options);
          def type           = EvaluateListRuleType(rule);
          def (lower, upper) = RepeatQuantifier.Bounds();
          Rule.Repeat(this.Location, type, MakePlural(_fieldName, rule, context), lower, upper, rule);
        }
        override InferName = MakePlural(RuleExpression.InferName());
      }
    | FieldName1                      = RuleExpression ^ 12 sm "as" sm Name
      {
        override Typing = RuleExpression.Typing(_baseRule, _precedence, Some(Name.Value()), context, _options);
        override InferName = Name.GetText();
      }
    | FieldName2                      = Name sm "=" sm RuleExpression ^ 11
      {
        override Typing = RuleExpression.Typing(_baseRule, _precedence, Some(Name.Value()), context, _options);
        override InferName = Name.GetText();
      }
    | Char                            = CharLiteral
      {
        override Typing = StringRuleTyping(CharLiteral.Location, CharLiteral.Value().ToString(), _fieldName, context);
        override InferName = CharLiteral.Value().ToString();
      }
    | String                          = StringLiteral
      {
        override Typing = StringRuleTyping(StringLiteral.Location, StringLiteral.Value().ToString(), _fieldName, context);
        override InferName = StringLiteral.Value().ToString();
      }
    | Rounds                          = "(" RuleExpression ")"
      {
        override Typing = RuleExpression.Typing(_baseRule, _precedence, _fieldName, context, _options);
        override InferName = RuleExpression.InferName();
      }
    | Call                            = QualifiedName BindingPower=(sm "^" sm Number)?
      {
        override Typing = TypeCall(_baseRule, _precedence, _fieldName, context, _options, QualifiedName, BindingPower);
        override InferName = QualifiedName.Parts().LastOrDefault("");
      }
    | RepeatWithSeparator         = "(" RuleExpression ";"sm Separator HangingOpt=(";"sm "?")? ")" RepeatQuantifier
      {
        override Typing
        {
          def rule           = RuleExpression.Typing(None(), 0, None(), context, _options);
          def sepRule        = Separator.Typing(None(), 0, None(), context, _options);
          def type           = EvaluateListWithSeparatorRuleType(rule, sepRule);
          def (lower, upper) = RepeatQuantifier.Bounds();
          def isHanging      = HangingOpt.HasValue;
          Rule.RepeatWithSeparator(this.Location, type, MakePlural(_fieldName, rule, sepRule, context), lower, upper, rule, sepRule, isHanging);
        }
        override InferName = MakePlural(RuleExpression.InferName());
      }
  } // extend syntax RuleExpression
} // syntax module
