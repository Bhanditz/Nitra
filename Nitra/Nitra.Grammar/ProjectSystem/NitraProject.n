using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class NitraProject : Project
  {
    protected this(compilerMessages : ICompilerMessages)
    {
      base(compilerMessages)
    }

    public abstract GetNemerleType(symbol : Symbol) : FixedType;
    public abstract MakeFakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location;
    public abstract MakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location;
    public abstract CreateNemerleFile(source : ISource) : NemerleFile;

    public BindWellKnownSymbol[T](path : list[string]) : option[T]
      where T : Symbol
    {
      match (this.RootNamespace.Node.BindMany.[T](path))
      {
        | [one] => Some(one)
        | []  =>
          this.Error(Location.Default, $<#Unbound name '..$(path; ".")'.#>);
          None()

        | many =>
          using (root = this.RootWarning(Location.Default, $<#Ambiguous '..$(path; ".")' symbol.#>))
            foreach (s in many)
              root.Hint(s.FirstLocation, "Previous definition.");
          None()
      }
    }
  }
}
