using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public abstract class RuleTypeScope : Scope
  {
    private         _itemType : RuleTypeSymbol;
    private mutable _members  : list[DeclarationSymbol];

    public this(itemType : RuleTypeSymbol)
    {
      _itemType = itemType;
    }

    protected abstract TryCreateMapSyntaxSymbol(itemMapSyntax : MapSyntaxSymbol, context : DependentPropertyEvalContext) : MapSyntaxSymbol;

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      when (_members : object == null)
        _members = CreateMembers();

      foreach (m is TSymbol in _members)
        when (m.IsNameValid && StringComparer.Ordinal.Equals(m.Name, reference.Text)) // TODO: add NameId to DeclarationSymbol
          results.Add(m);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      IgnoreParams();
      Enumerable.Empty()
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      when (_members : object == null)
        _members = CreateMembers();

      foreach (m is TSymbol in _members)
        when (predicate(m))
          results.Add(m);
    }

    public override ToString() : string
    {
      "rule"
    }

    private CreateMembers() : list[DeclarationSymbol]
    {
      match (_itemType)
      {
        | SyntaxRuleSymbol(IsScopeEvaluated = true, Scope = scope) =>
          mutable symbols = LightList();
          scope.FindMany.[MapSyntaxSymbol](s => s.IsNameValid && s.IsReturnTypeEvaluated && s.IsParametersEvaluated, ref symbols);

          mutable result = [];
          mutable e      = symbols.GetEnumerator();
          when (e.MoveNext())
          {
            def context = DependentPropertyEvalContext();
            do
            {
              def symbol = TryCreateMapSyntaxSymbol(e.Current, context);
              when (symbol : object != null)
                result ::= symbol
            }
            while (e.MoveNext())
          }
          result

        | _ => []
      }
    }
  }
}
