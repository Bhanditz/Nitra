using DotNet;

using Nitra.Declarations;
using Nitra.Ast.AstMembers;

namespace Nitra.Ast
{
  abstract ast MapSyntaxExpression : BindableAst
  {
  stage 1:
    in  AstScope     : Scope;

  stage 2:
    in  ExpectedType : TypeSymbol;
    out Type         : TypeSymbol;

    unless (Type.IsSubtypeOf(ExpectedType))
      Error($"Expression type '$(self.Type)' is not subtype of expected type '$(self.ExpectedType)'.");

    | Identifier
      {
      stage 1:
        out VariableRef : Ref[TypedDeclarationSymbol] = Reference.Ref.Resolve();

        Reference.Scope = Scope;
        Type            = VariableRef.Symbol.Type;

        Reference : Reference;
      }

    | Ast
      {
      stage 1:
        out AstTypeRef : Ref[AstTypeSymbol] = Ast.Ref.Resolve();

        Ast.Scope        = AstScope;
        Members.Scope    = Scope;
        Members.AstType  = AstTypeRef.Symbol;
        Members.AstScope = AstScope;
        Type             = AstTypeRef.Symbol;

        Ast     : QualifiedReference;
        Members : MapSyntaxExpressionAstMember*;
      }

    | List
      {
        Type               = AstUtils.TypeListExpression(this, ExpectedType, Items.Type, context);
        Items.AstScope     = AstScope;
        Items.Scope        = Scope;
        Items.ExpectedType = AstUtils.GetListAstElemType(ExpectedType);

        Items : MapSyntaxExpression*;
      }

    | OptionSome
      {
        Type               = AstUtils.TypeOptionSomeExpression(this, ExpectedType, Value.Type, context);
        Value.AstScope     = AstScope;
        Value.Scope        = Scope;
        Value.ExpectedType = AstUtils.GetOptionAstValueType(ExpectedType);

        Value : MapSyntaxExpression;
      }

    | OptionNone
      {
        Type = AstUtils.TypeOptionNoneExpression(this, ExpectedType, context);
      }

    | Match
      {
        Type                    = ExpectedType;
        Expression.ExpectedType = WellKnownSymbols.AnyType;
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Cases.AstScope          = AstScope;
        Cases.Scope             = Scope;
        Cases.ExpectedType      = ExpectedType;
        Cases.PatternType       = Expression.Type;

        when (ExpectedType : object == WellKnownSymbols.AnyType)
          Error("Type inference is not supported, please specify type with ':' operator.");

        unless (Expression.Type is RuleTypeSymbol)
          Expression.Error($"Expression type '$(this.Expression.Type)' is not a parse tree type.");

        Expression : MapSyntaxExpression;
        Cases      : MapSyntaxMatchCase*;
      }

    | Fold
      {
        Type = WellKnownSymbols.VoidRuleType;

        ItemName         : Name;
        ItemExpression   : MapSyntaxExpression;

        AccumulatorName1 : Name;
        InitExpression   : MapSyntaxExpression;

        AccumulatorName2 : Reference;
        EachExpression   : MapSyntaxExpression;
      }

    | TypeHint
      {
      stage 1:
        out ExpectedTypeRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();

        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Expression.ExpectedType = ExpectedTypeRef.Symbol;
        TypeName.Scope          = AstScope;
        Type                    = ExpectedTypeRef.Symbol;

        Expression : MapSyntaxExpression;
        TypeName   : QualifiedReference;
      }

    | Call
      {
      stage 2:
        out MapSyntaxRef : Ref[MapSyntaxSymbol] = GetAst.Ref.ResolveMany(AstUtils.ResolveGetAstOverloads(Arguments.Type));

        Type                    = MapSyntaxRef.Symbol.ReturnType;
        GetAst.Scope            = Expression.Type.Scope;
        Expression.ExpectedType = WellKnownSymbols.AnyType;
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Arguments.ExpectedType  = WellKnownSymbols.AnyType;
        Arguments.AstScope      = AstScope;
        Arguments.Scope         = Scope;

        GetAst     : Reference;
        Expression : MapSyntaxExpression;
        Arguments  : MapSyntaxExpression*;
      }

    | MemberAccess
      {
      stage 1:
        out VariableRef : Ref[TypedDeclarationSymbol] = Reference.Ref.Resolve();

        Expression.ExpectedType = WellKnownSymbols.AnyType;
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Reference.Scope         = Expression.Type.Scope;
        Type                    = VariableRef.Symbol.Type;

        Expression : MapSyntaxExpression;
        Reference  : Reference;
      }
  }

  declaration MapSyntaxExpressionVariable : MapSyntaxExpression, TypedDeclaration
  {
    symbol
    {
      Kind = "variable";
    }

  stage 1:
    out TypeRef : Ref[TypeSymbol] = VariableType.Ref.Resolve();

    ContainingTable     = TableScope("variables", null);
    Symbol.Type         = TypeRef.Symbol;
    VariableType.Scope  = Scope;
    Expression.AstScope = AstScope;
    Expression.Scope    = Scope;
    Body.AstScope       = AstScope;
    Body.Scope          = Scope.HideWith(ContainingTable);
    Type                = Body.Type;

    VariableType : QualifiedReference;
    Expression   : MapSyntaxExpression;
    Body         : MapSyntaxExpression;
  }

  abstract ast MapSyntaxExpressionAstMember : BindableAst
  {
  stage 1:
    in  AstScope    : Scope;
    in  AstType     : AstTypeSymbol;
    out PropertyRef : Ref[StructuralPropertySymbol] = AstProperty.Ref.Resolve();

    AstProperty.Scope  = AstType.Scope;

    AstProperty : Reference;

    | Inline
      {
        Code : string;
      }

    | Expression
      {
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Expression.ExpectedType = PropertyRef.Symbol.Type;

        Expression  : MapSyntaxExpression;
      }
  }
}
