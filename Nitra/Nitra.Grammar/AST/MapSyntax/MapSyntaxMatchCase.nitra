using DotNet;

using Nitra.Runtime.Binding;

namespace Nitra.Ast
{
  abstract ast MapSyntaxMatchCase : BindableAst
  {
    out VariableTable : TableScope = TableScope("pattern variables", null);

  stage 1:
    in AstScope     : Scope;
    in PatternType  : TypeSymbol;
    in ExpectedType : TypeSymbol;

    Pattern.Scope           = Scope;
    Pattern.ContainingTable = VariableTable;
    Pattern.ExpectedType    = PatternType;

    Pattern : ParseTreePattern;

    | Inline
      {
        Code : string;
      }
    | Expression
      {
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope.HideWith(VariableTable);
        Expression.ExpectedType = ExpectedType;

        Expression : MapSyntaxExpression;
      }
  }
}
