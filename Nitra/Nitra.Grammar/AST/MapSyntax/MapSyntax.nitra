using DotNet;

using Nitra.Runtime.Binding;
using System.Collections.Generic;

namespace Nitra.Ast
{
  abstract declaration MapSyntax : BindableAst
  {
    symbol
    {
      Kind = "map syntax";
      in Parameters : IList[MapSyntaxParameterSymbol];
    }

  stage 1:
    out AstTypeRef : Ref[AstTypeSymbol];

    Body.Owner   = Symbol;
    Body.AstType = AstTypeRef.Symbol;

    Body : MapSyntaxBody;
  }

  abstract declaration MapSyntaxWithParameters : MapSyntax
  {
    out ParameterScope : TableScope = TableScope("parameters", null);

  stage 1:
    out RuleRef : Ref[RuleSymbol];

    Symbol.Parameters          = Parameters.Symbol;
    AstName.Scope              = Scope;
    AstTypeRef                 = this.AstName.Ref.Resolve();
    Body.AstScope              = Scope.HideWith(AstTypeRef.Scope);
    Body.Scope                 = Scope.HideWith(ParameterScope).HideWith(RuleRef.Scope);
    Body.This.Symbol.Type      = RuleRef.Symbol;
    Parameters.ContainingTable = ParameterScope;
    Parameters.Scope           = Scope;

    Parameters : MapSyntaxParameter*;
    AstName    : QualifiedReference;
  }

  declaration TopMapSyntax : MapSyntaxWithParameters, NamespaceMember
  {
    RuleName.Scope  = Scope;
    RuleRef         = RuleName.Ref.Resolve();
    ContainingTable = RuleRef.Symbol.MemberTable; // NB: overrides ContainingTable assign in NamespaceMember

    RuleName : QualifiedReference;
  }

  declaration InlineMapSyntax : MapSyntaxWithParameters, RuleBodyMember
  {
    RuleRef = Ref.Some(File, Span.FromStart(), Parent);
  }

  declaration ExtensionMapSyntax : MapSyntax
  {
    in Prototype : MapSyntaxSymbol;
  stage 1:
    in  AstScope       : Scope;
    in  DefaultAstType : AstTypeSymbol;
    out RuleRef        : Ref[ExtensionRuleSymbol] = this.RuleName.Ref.Resolve();

    RuleName.Scope        = Scope;
    Symbol.Parameters     = Prototype.Parameters;
    ContainingTable       = RuleRef.Symbol.MemberTable;
    AstTypeRef            = AstUtils.BindAstExtension(this.RuleName, DefaultAstType.Scope, DefaultAstType);
    Body.AstScope         = AstScope.HideWith(AstTypeRef.Scope);
    Body.Scope            = Scope.HideWith(RuleRef.Scope);
    Body.This.Symbol.Type = RuleRef.Symbol;

    RuleName : Reference;
  }
}
