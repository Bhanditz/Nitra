using Nitra.AstUtils;
using Nitra.Runtime.Binding;

using R = Nitra.Ast.RuleExpressions;

namespace Nitra.Ast
{
  abstract declaration Rule : SyntaxElementContainer
  {
    symbol
    {
      out MemberTable : TableScope = TableScope(this.ToString());
    }
  }

  declaration TopRegexRule : RegexRule, SyntaxModuleMemberDeclaration
  {
    symbol
    {
      Kind      = "regex";
      SpanClass = NitraLangLanguage.NamespaceSpanClass;
      FullName  = SymbolUtils.MakeFullName(this);
    }
  }

  abstract declaration RegexRule : Rule
  {
  }

  declaration TopSimpleRule : SimpleRule, SyntaxModuleMemberDeclaration
  {
    symbol
    {
      Kind      = "syntax";
      SpanClass = NitraLangLanguage.RuleSpanClass;
      FullName  = SymbolUtils.MakeFullName(this);
    }
  }

  abstract declaration SimpleRule : Rule
  {
    Expression.Literals = LiteralsIn;
    Expression.Scope = Scope;

    Expression : R.Expression;
  }

  declaration TopExtensibleRule : ExtensibleRule, SyntaxModuleMemberDeclaration
  {
    symbol
    {
      Kind      = "syntax";
      SpanClass = NitraLangLanguage.RuleSpanClass;
      FullName  = SymbolUtils.MakeFullName(this);
    }
  }

  abstract declaration ExtensibleRule : Rule
  {
  }

  declaration TopMarker : Marker, SyntaxModuleMemberDeclaration
  {
    symbol
    {
      Kind      = "marker";
      SpanClass = NitraLangLanguage.MarkerSpanClass;
      FullName  = SymbolUtils.MakeFullName(this);
    }
  }

  abstract declaration Marker : Rule
  {
  }
}
