using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime.Binding;

using System;
using System.Collections.Generic;
using System.Linq;

namespace DotNet
{
  module Utils
  {
    public GetTypeParametersCount(declaration : Declaration) : int
    {
      (declaration :> GenericEntity).TypeParameterAliases?.Count
    }

    public GetTypeParameter(alias : TypeParameterAlias, typeParameterSymbols : IList[TypeParameterSymbol], IndexIn : int) : TypeParameterSymbol
    {
      def typeParameterSymbol = typeParameterSymbols[IndexIn];
      typeParameterSymbol.AddAliasSymbol(alias);
      typeParameterSymbol
    }

    public NoTypeParameters : array[TypeParameterSymbol] = array(0);

    public CreateTypeParameters(count : int) : array[TypeParameterSymbol]
    {
      if (count == 0)
        NoTypeParameters
      else
      {
        def result = array(count);
        for (mutable i = 0; i < result.Length; ++i)
          result[i] = TypeParameterSymbol();
        result
      }
    }

    public IsPartial(declarations : Seq[GenericContainerType]) : bool
    {
      declarations.FirstOrDefault()?.IsPartial.ValueOrDefault
    }
  }
}
