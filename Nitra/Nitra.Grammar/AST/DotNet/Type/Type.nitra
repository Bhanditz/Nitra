using Nitra;
using Nitra.Ast;
using Nitra.Runtime.Binding;

using Nemerle.Collections;

using SCG = System.Collections.Generic;

namespace DotNet
{
  // enum, delegate, class, struct or interface
  abstract declaration Type : BindableAst
  {
    symbol
    {
      in Flags : ModifierSet;
    }

    Symbol.Flags        |= Modifiers.Flags;
    Modifiers.Flags      = ModifierSet(context);
    Attributes.NameScope = Scope;

    unless (Modifiers.Flags.IsEmpty || Modifiers.Flags.Equals(Symbol.Flags))
      Error("Partial declarations of type have conflicting accessibility modifiers.");

    Attributes : Attribute*;
    Modifiers  : Modifier*;
  }

  abstract declaration ConstractedType : Type
  {
    symbol
    {
      in TypeInfo : GenericTypeSymbol;
      in Args     : SCG.IList[TypeSymbol];
    }
  }
  
  declaration TopConstractedType : ConstractedType
  {
    symbol
    {
      Scope = SubstScope(TypeInfo, Args)
    }
  }

  declaration NestedConstractedType : ConstractedType
  {
    symbol
    {
      in Parent : ConstractedTypeSymbol;
      
      Scope = NestedSubstScope(TypeInfo, Args, Parent);
    }
  }

  declaration BuiltInTypeAlias : BindableAst
  {
    symbol
    {
      Kind      = "type alias";
      SpanClass = Language.KeywordSpanClass;

      in Type : TypeSymbol;
    }
  }
}
