using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using System;
using System.Collections.Generic;
using System.Linq;

using NRB = Nitra.Runtime.Binding;

namespace DotNet
{
  public partial class CompilationUnit : AstBase, IProjectSupport, NamespaceBody
  {
    public RefreshReferences(project : Project) : void
    {
      def context       = NitraDependentPropertyEvalContext();
      def rootNamespace = NamespaceSymbol();

      rootNamespace.MemberTable = TableScope("<root namespace>", rootNamespace);
      rootNamespace.Parent      = null;
      rootNamespace.FullName    = "";
      
      def rootScope = CreateNemerleSymbols(rootNamespace, context);
      project.Data = (context, rootNamespace, rootScope);
    }
    
    public RefreshSources(project : Project) : void
    {
      IgnoreParams();
    }
    
    public RefreshProject(project : Project) : void
    {
      def files         = project.Files.ToArray();
      def (context, rootNamespace, rootScope) = project.Data :> (NitraDependentPropertyEvalContext * NamespaceSymbol * Scope);
      
      def removeParsedSymbols(tableScope : TableScope)
      {
        tableScope.Undefine(_.IsParsed);
        foreach (symbols in tableScope.Symbols)
        foreach (symbol is NamespaceSymbol in symbols)
          removeParsedSymbols(symbol.MemberTable);
      }
      
      removeParsedSymbols(rootNamespace.MemberTable);
      
      foreach (file in files)
        when (file.Ast is CompilationUnit as cu)
          cu.RootNamespace = rootNamespace;
      AstUtils.EvalProperties(context, files, "SymbolHierarchy", 0, rootNamespace);

      foreach (file in files)
        when (file.Ast is CompilationUnit as cu)
          cu.Scope = rootScope;
      AstUtils.EvalProperties(context, files, "Scopes", 1, rootNamespace);

      AstUtils.EvalProperties(context, files, "Type bodies binding", 2, rootNamespace);
    } 

    class Compiler : ManagerClass
    {
      public this ()
      {
        base (CompilationOptions());
        def localPath = IO.Path.GetFullPath(Uri(typeof(ManagerClass).Assembly.CodeBase).LocalPath);
        def macroLibPath = localPath;
        def compilerDir = IO.Path.GetDirectoryName(localPath);
        this.Options.DoNotLoadMacros = true;
        this.Options.MacrosToLoad ::= macroLibPath;
        this.Options.LibraryPaths ::= compilerDir;
        def nitraRuntimePath = IO.Path.GetFullPath(Uri(typeof(Nitra.NSpan).Assembly.CodeBase).LocalPath);
        this.Options.ReferencedLibraries ::= nitraRuntimePath;
        InitCompiler ();
        LoadExternalLibraries ();
      }
    }
    
    private static CreateNemerleSymbols(rootNamespace : NamespaceSymbol, context : DependentPropertyEvalContext) : Scope
    {
      when (ManagerClass.Instance == null)
      {
        ManagerClass.Instance = Compiler();
      }
        
      def manager         = ManagerClass.Instance;
      def nemerleNsRoot   = manager.NameTree.NamespaceTree;
      def file            = SourceSnapshot.Default.File;
      def span            = NSpan(0);
      def nodeToSymbolMap = Hashtable.[TypeInfo, TypeSymbol]();
      def aliases         = List();

      def createTxTypeParameters(count : int) : array[TypeParameterSymbol]
      {
        if (count == 0)
          AstUtils.NoTypeParameters
        else
        {
          def result = array(count);
          for (mutable i = 0; i < result.Length; ++i)
          {
            def name  = NRB.Name(file, span, if (count <= 1) "T" else "T" + i);
            def tps   = TypeParameterStubDeclaration(name).DefineSymbol();
            tps.EvalProperties(context);
            result[i] = tps;
          }
          result
        }
      }
      def createTypeParameters(tycon : TypeInfo) : array[TypeParameterSymbol]
      {
        def count = tycon.TyparmsCount;
        if (count == 0)
          AstUtils.NoTypeParameters
        else
        {
          def result = array(count);
          mutable typarms = tycon.Typarms;
          for (mutable i = 0; i < result.Length; ++i)
          {
            def tp    = typarms.Head;
            def name  = NRB.Name(file, span, tp.Name);
            def tps   = TypeParameterDeclaration(name, tp).DefineSymbol();
            tps.EvalProperties(context);
            result[i] = tps;
            typarms   = typarms.Tail;
          }
          result
        }
      }
      def makeTypeParameters(symbol : GenericTypeSymbol, tycon : TypeInfo) : void
      {
        unless (symbol.IsTypeParametersCountEvaluated)
          symbol.TypeParametersCount = tycon.TyparmsCount;
        unless (symbol.IsTypeParametersEvaluated)
          symbol.TypeParameters = createTypeParameters(tycon);
      }
      def loadNsMemebers(node : NamespaceTree.Node, parent : DotNet.NamespaceSymbol) : void
      {
        def addTopType(node : NamespaceTree.Node, tycon : TypeInfo) : void
        {
          def name = NRB.Name(file, span, node.PartName);
          def kind = tycon.GetTydecl();
          match (kind)
          {
            | Interface
            | Class =>
              def symbol : TopGenericTypeSymbol =
                       if (tycon.IsDelegate)  ExternalTypeDeclaration.[TopDelegateSymbol](name, tycon).DefineSymbol(parent.MemberTable) 
                  else if (tycon.IsInterface) ExternalTypeDeclaration.[TopInterfaceSymbol](name, tycon).DefineSymbol(parent.MemberTable)
                  else if (tycon.IsValueType) ExternalTypeDeclaration.[TopStructSymbol](name, tycon).DefineSymbol(parent.MemberTable)
                  else                        ExternalTypeDeclaration.[TopClassSymbol](name, tycon).DefineSymbol(parent.MemberTable);
              makeTypeParameters(symbol, tycon);
              unless (symbol.IsParentEvaluated)
                symbol.Parent = parent;
              nodeToSymbolMap[tycon] = symbol;
              symbol.EvalProperties(context);
                
            | Alias         =>
              def symbol = ExternalTypeDeclaration.[TypeAliasSymbol](name, tycon).DefineSymbol(parent.MemberTable);
              makeTypeParameters(symbol, tycon);
              unless (symbol.IsParentEvaluated)
                symbol.Parent = parent;
              aliases.Add(symbol);

              nodeToSymbolMap[tycon] = symbol;
              symbol.EvalProperties(context);
          
            | Variant       => ()
            | VariantOption => ()
            | Enum          =>
              def symbol = ExternalTypeDeclaration.[TopEnumSymbol](name, tycon).DefineSymbol(parent.MemberTable);
              nodeToSymbolMap[tycon] = symbol;
              unless (symbol.IsParentEvaluated)
                symbol.Parent = parent;
              symbol.EvalProperties(context);
          }
        }
        node.EnsureCached();
   
        match (node.Value)
        {
          | No                               => ()
          | MacroCall                        => ()
          | null                             => ()
          | NamespaceReference               => 
            def name   = NRB.Name(file, span, node.PartName);
            def symbol = ExternalNamespaceDeclaration(name, node).DefineSymbol(parent.MemberTable);
            unless (symbol.IsParentEvaluated)
              symbol.Parent = parent;
            symbol.EvalProperties(context);
            foreach (subNode in node.Children.Values.ToArray())
              loadNsMemebers(subNode, symbol);
            
          | Cached(tycon) =>  addTopType(node, tycon);
          | CachedAmbiguous(elems)       => foreach (e in elems) addTopType(node, e);
          | NotLoaded(_externalType)     => assert2(false)
          | NotLoadedList(_externalType) => assert2(false)
        }
      }
      
      rootNamespace.EvalProperties(context);
      
      foreach (node in nemerleNsRoot.Children.Values.ToArray())
        loadNsMemebers(node, rootNamespace);
      
      def nodeToSymbolMap = nodeToSymbolMap;

      foreach (alias in aliases)
      {
        def decl     = alias.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
        def a        = decl.NemerleTypeInfo.GetTydecl() :> Typedtree.TypeDeclaration.Alias;
        def typeInfo = a.ty.TypeInfo;
        alias.Replacement =
          if (typeInfo != null)
            Ref.Some(file, span, nodeToSymbolMap[typeInfo])
          else
            Ref.Unresolved(file, span, a.ty.ToString(), ResolutionSource.Unknown());
      }

      def setParents(ns : NamespaceSymbol) : void
      {
        foreach (symbols in ns.MemberTable.Symbols)
        {
          foreach (symbol in symbols)
          {
            | x is NamespaceSymbol => setParents(x)
            | x is GenericContainerTypeSymbol =>
              def baseTypeSet = BaseTypeReferenceSet(context);
              x.BaseTypeSet = baseTypeSet;
              def decl = x.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
              def ti = decl.NemerleTypeInfo;
              def superTypes = ti.GetDirectSuperTypes();
              foreach (superType in superTypes)
              {
                //def baseType = FixedTypeToTypeRef(file, span, superType);
                //when (baseType != null)
                //  baseTypeSet.AddParent(baseType);
              }

            | _ => () //assert2(false);
          }
        }
      }
      
      setParents(rootNamespace);
      
      def bindTuple(scope : Scope, typeParameterCoiunt : int) : Ref[GenericContainerTypeSymbol]
      {
        def alg(symbol : GenericContainerTypeSymbol) : ValueOption[GenericContainerTypeSymbol]
        {
          if (symbol.TypeParametersCount == typeParameterCoiunt)
            ValueOption.Some(symbol)
          else
            ValueOption.None()
        }

        scope.TryBind(Reference(file, span, "Tuple")).Resolve.[GenericContainerTypeSymbol](alg)
      }
      def bind(scope : Scope, name : string) : Ref[NamespaceSymbol]
      {
        scope.TryBind(Reference(file, span, name)).Resolve.[NamespaceSymbol]()
      }
      
      def makeTuples() : void
      {
        def nemerleNs = bind(rootNamespace.MemberTable, "Nemerle");
        unless (nemerleNs.IsSymbolEvaluated)
          return;

        def builtinsNs = bind(nemerleNs.Symbol.MemberTable, "Builtins");
        unless (builtinsNs.IsSymbolEvaluated)
          return;

        def parent = rootNamespace;
        for (mutable i = 2; i <= 20; i++)
        {
          def realSymbolRef = bindTuple(builtinsNs.Symbol.MemberTable, i);
          def realSymbol    = realSymbolRef.Symbol;
          def realDecl      = realSymbol.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
          def name          = NRB.Name(file, span, "#Tuple");
          def symbol        = ExternalTypeDeclaration.[TypeAliasSymbol](name, realDecl.NemerleTypeInfo).DefineSymbol(parent.MemberTable);
          symbol.TypeParametersCount = i;
          symbol.TypeParameters      = AstUtils.CreateTypeParameters(i);
          symbol.Parent              = parent;
          symbol.EvalProperties(context);
        }
      }
      
      
      makeTuples();
      
      def res1 = bind(rootNamespace.MemberTable, "Nemerle");
      
      when (res1.IsSymbolEvaluated)
      {
        def res2 = bind(res1.Symbol.MemberTable, "Core");
        when (res2.IsSymbolEvaluated)
          return res2.Symbol.MemberTable.HideWith(rootNamespace.MemberTable);
      }

      rootNamespace.MemberTable
    }
  
    static FixedTypeToTypeRef(ti : TypeInfo, typeMap : Hashtable[TypeInfo, TypeSymbol], file : File, span : NSpan, t : TypeVar, context : DependentPropertyEvalContext, pos : int = -1) : TypeSymbol
    {
      match (t)
      {
        | FixedType.Class(ti, []) => 
          def sym = typeMap[ti];
          sym
          
        //| FixedType.Class(ti, args) =>
        //  def constructedType = AstUtils.CreateConstructedTypeSymbol(file, span);
        //  def sym = typeMap[ti] :> GenericTypeSymbol;
        //  constructedType.TypeInfo = sym;
        //  def resultArgs = array(args.Length);
        //  constructedType

        | FixedType.StaticTypeVarRef(staticTypeVar) => 
          null

        | _ => null
      }
    }
  }

  [Record]
  class IntrinsicDeclaration[TSymbol] : ExternalDeclaration[TSymbol]
    where TSymbol : DeclarationSymbol
  {
  }

  [Record]
  class TypeParameterDeclaration : ExternalDeclaration[TypeParameterSymbol]
  {
    public NemerleTypeParam : StaticTypeVar;
    public override CreateSymbol() : DeclarationSymbol { TypeParameterSymbol() }
  }

  [Record]
  class TypeParameterStubDeclaration : ExternalDeclaration[TypeParameterSymbol]
  {
    public override CreateSymbol() : DeclarationSymbol { TypeParameterSymbol() }
  }

  interface IExternalTypeDeclaration
  {
    NemerleTypeInfo : TypeInfo { get; }
  }

  [Record]
  class ExternalTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public NemerleTypeInfo : TypeInfo { get; private set; }
  }

  [Record]
  class ExternalNamespaceDeclaration : ExternalDeclaration[NamespaceSymbol]
  {
    public NemerleNode : NamespaceTree.Node { get; private set; }
    public override CreateSymbol() : DeclarationSymbol { NamespaceSymbol() }
  }
}
