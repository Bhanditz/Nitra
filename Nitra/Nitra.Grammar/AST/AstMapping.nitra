using Nitra.Runtime.Binding;
using Nemerle.Collections;

namespace Nitra.Ast
{
  using R = Nitra.Ast.RuleExpressions;
  using RX = Nitra.Ast.RegexExpressions;

  map syntax NitraSyntax.Start -> CompilationUnit
  {
    NamespaceMembers -> Members;
  }

  map syntax NitraSyntax.NamespaceMember -> NamespaceMember
  {
    | Namespace -> ExplicitNamespace
      {
        NamespaceName.Name          -> Name;
        NamespaceName.Path(ImplicitNamespaceTag{}) -> Path;
        //ExternAliasDirectives       -> ExternAlias;
        //UsingDirectives             -> UsingDirectives;
        NamespaceBody.NamespaceMembers -> Members;
      }

    | Ast -> Nitra.Ast.Ast          // Header Name AstInheritanceOpt Body
      {
        Name -> Name;
        match(AstInheritanceOpt) { Some(value) -> value | None() -> [] } -> TypeAst;
      }

    | MapSyntax  // RuleName ParametersOpt AstName MapSyntaxBody
      {
      }

    | SyntaxModule  // SyntaxModuleAttributes Name LanguageOpt SyntaxModuleMembers 
      {
        Name -> Name;
        Usings.Usings -> Usings;
        SyntaxModuleMembers -> Members;
      }

    | Language -> Nitra.Ast.Language   // Name ParentOpt Members
      {
        Name -> Name;
        Members -> Members;
      }

    //| Type -> TypeDeclaration
    //| ExternAliasDirective -> ExternAliasDirective
    //  {
    //    Name -> Name;
    //  }

    | UsingAlias -> UsingAliasDirective
      {
        Name          -> Name;
        NamespaceOrType -> NamespaceOrTypeName;
      }

    | UsingOpen -> UsingOpenDirective
      {
        NamespaceOrType -> NamespaceOrTypeName;
      }
  }

  map syntax NitraSyntax.AstInheritance -> QualifiedReference*
  {
    BaseAsts.Item1
  }

  map syntax NitraSyntax.Using -> SyntaxModuleUsingDirective
  {
    | UsingAlias -> SyntaxModuleUsingAliasDirective
      {
        Name -> Name;
        NamespaceOrType -> NamespaceOrTypeName;
      }

    | UsingOpen -> SyntaxModuleUsingOpenDirective
      {
        NamespaceOrType -> NamespaceOrTypeName;
      }
  }

  ast ImplicitNamespaceTag { }

  map syntax NitraSyntax.Name(_tag : ImplicitNamespaceTag) -> ImplicitNamespace
  {
    this -> Name;
  }

  map syntax NitraSyntax.QualifiedReference -> QualifiedReference
  {
    | ((first :: other, _)) -> fold (item in other; acc = Simple { first() -> Name; }; acc = Qualified { item() -> Name; Qualifier = acc;  })
    | (([],             _)) = AstUtils.CreateMissingQualifiedReference(Names.File, Names.Span);
  }

  map syntax NitraSyntax.StyleProperty -> StyleProperty
  {
    | ForegroundColor { Color = ParsedValue(Color.Span, Color.Value(Nitra.Declarations.AstContext.CompilerMessages)); }
  }

  map syntax NitraSyntax.LanguageMember -> LanguageMember
  {
    | Style -> Style // "style" sm Name sm StyleBody
      {
        Name -> Name;
      }

    | SpanClass -> StyleReference(Name) // "span" sm "class" sm Name sm MatchTokensOpt=("regex" sm RegexExpression sm)? StyleReference

    // "syntax" sm "module" sm Module=QualifiedReference RuleOpt=(sm "start" sm "rule" sm QualifiedReference)? ";"
    | SyntaxModule(_, _, m, Some((_, _, r)), _) -> StartSyntaxModuleReference
      {
        m -> Module;
        r -> Rule;
      }

    // "syntax" sm "module" sm Module=QualifiedReference RuleOpt=(sm "start" sm "rule" sm QualifiedReference)? ";"
    | SyntaxModule(_, _, m, None, _) -> AdditionSyntaxModuleReference
      {
        m -> Module;
      }

    | FileExtension { Extension = ParsedValue(Ext, GetText(Ext)); }
    | Company     { Name = ParsedValue(Name, GetText(Name)); }
    | Description { Text = ParsedValue(Text, GetText(Text)); }
    | Authors     { Text = ParsedValue(Text, GetText(Text)); }
    | Copyright   { Text = ParsedValue(Text, GetText(Text)); }
    | LicenseUrl  { Text = ParsedValue(Text, GetText(Text)); }
    | RequireLicenseAcceptance { }
  }

  map syntax NitraSyntax.LanguageMember.SpanClass.StyleReference(name : Name) -> SpanClass
  {
    | Reference -> StyledSpanClass { name -> Name; QualifiedReference -> StyleReference; } //= "=" sm QualifiedReference ";"
    | StyleBody -> InlineSpanClass { name -> Name; StyleBody.Properties -> Properties; } 
  }

  map syntax NitraSyntax.SyntaxModuleMember -> Nitra.Ast.SyntaxModuleMember
  {
    | RegexRule       -> this.RegexRule
    | SimpleRule      -> this.SimpleRule
    | ExtensibleRule  -> this.ExtensibleRule
    | Marker          -> Marker { Name -> Name; }
    | RuleAlias       -> this.RuleAlias
    | ExtendRule -> TopExtendRule  {}
    | TokenLiteral     //    = "literal"             sm Name  sm "="  sm (StringLiteral; ","sm)+               ";"nl
      {
        Name = ParsedValue(Name.Span, Name.GetText());
        StringLiterals.Item1 -> Literals;
      }

    | KeywordRegex    {} //    = "keyword" sm "regex"  sm MatchTokens=RegexExpression sm "rule" sm QualifiedReference ";"nl
  }

  map syntax NitraLiterals.StringLiteral -> StringLiteral
  {
    Value = ParsedValue(this.Span, this.Value());
  }

  map syntax NitraLiterals.CharLiteral -> CharLiteral
  {
    Value = ParsedValue(this.Span, this.Value());
  }

  ast NestedTag {}

  map syntax NitraSyntax.RuleAlias -> TopRuleAlias
  {
  }

  map syntax NitraSyntax.RuleAlias(_ : NestedTag) -> NestedRuleAlias
  {
  }

  map syntax NitraSyntax.RegexRule -> TopRegexRule
  {
    Name -> Name;
    RegexExpression -> Expression;
  }

  map syntax NitraSyntax.RegexRule(_ : NestedTag) -> NestedRegexRule
  {
    Name -> Name;
    RegexExpression -> Expression;
  }

  map syntax NitraSyntax.SimpleRule -> TopSimpleRule
  {
    Name -> Name;
    Expression -> Expression;
  }

  map syntax NitraSyntax.SimpleRule(_ : NestedTag) -> NestedSimpleRule
  {
    Name -> Name;
    Expression -> Expression;
  }

  map syntax NitraSyntax.ExtensibleRule -> TopExtensibleRule
  {
    Name -> Name;
    RuleBody -> Members;
  }

  map syntax NitraSyntax.ExtensibleRule(_ : NestedTag) -> NestedExtensibleRule
  {
    Name -> Name;
    RuleBody -> Members;
  }

  map syntax NitraSyntax.RuleBody -> RuleBodyMember*
  {
    | Empty -> []
    | Block -> RuleBodyMembers
  }

  map syntax NitraSyntax.RuleBodyMember -> RuleBodyMember
  {
    | RuleAlias      -> this.RuleAlias(NestedTag {})
    | RegexRule      -> this.RegexRule(NestedTag {})
    | SimpleRule     -> this.SimpleRule(NestedTag {})
    | ExtensibleRule -> this.ExtensibleRule(NestedTag {})
    | ExtensionRule(_, _, Some((name, _)), ruleExpression, rightAssociativeOpt, ruleBodyOpt) -> ExtensionRuleWithExplicitName
      {
        name -> Name;
        ruleExpression -> Expression;
      }

    | ExtensionRule(_, _, None, ruleExpression, rightAssociativeOpt, ruleBodyOpt) -> ExtensionRuleWithInferredName
      {
        Name = Name(File, NSpan(Span.StartPos), "");
        ruleExpression -> Expression;
      }
      
    | Precedence         -> Precedence { PrecedenceName -> Name; }  // "precedence" sm PrecedenceName Order=(sm "order" sm (Reference; sm "<" sm){2,})? ":"
    | MapSyntax          -> InlineMapSyntax {  }                    // "map" ParametersOpt=MapSyntaxParameters? sm AstName=NitraType MapSyntaxBody
    | RuleMethod         -> RuleMethod          { Name -> Name; }            // RuleMethodAttributes RuleMethodPrivate? Name sm "(" (RuleMethodParam; "," sm)* ")" sm ":" sm Type=NitraType RuleMethodBody
    | RuleMethodOverride -> RuleMethodOverride  { Name -> Name; } // RuleMethodAttributes "override"     sm  Name RuleMethodBody
    | RuleMethodMissing  -> RuleMethodMissing   { Name -> Name; } // RuleMethodAttributes "missing"        sm  Name RuleMethodBody
  }

  map syntax NitraSyntax.PrecedenceName -> Name
  {
    | Zero = Name(File, Span, "0");
    | Identifier -> Name
  }

  map syntax NitraSyntax.RuleExpression -> R.Expression
  {
    | Sequence(leftRule, rightRules) -> R.Sequence // LeftRule=RuleExpression ^ Sequence RightRules=(sm RuleExpression ^ Sequence)+
      {
        leftRule   -> Expression;
        rightRules -> Expressions;
      }

    | FieldName2 -> R.FieldName // Name sm "=" sm RuleExpression ^ FieldName2
      {
        Name = ParsedValue(Name.Span, Name.GetText());
        RuleExpression -> Expression;
      }

    | FieldName1 -> R.FieldName // RuleExpression ^ FieldName1 sm "as" sm Name
      {
        Name = ParsedValue(Name.Span, Name.GetText());
        RuleExpression -> Expression;
      }

    | Not -> R.Not                // "!" RuleExpression ^ Predicate
      {
        RuleExpression -> Expression;
      }

    | And -> R.And                 // "&" RuleExpression ^ Predicate
      {
        RuleExpression -> Expression;
      }

    | Optional -> R.Optional            // RuleExpression "?"
      {
        RuleExpression -> Expression;
      }

    | Repeat -> R.Repeat              // RuleExpression RepeatQuantifier
      {
        RuleExpression -> Expression;
      }

    | RepeatWithSeparator -> R.RepeatWithSeparator // "(" RuleExpression ";"sm Separator HangingOpt=(";"sm "?")? ")" RepeatQuantifier
      {
        RuleExpression -> Expression;
        Separator      -> Separator;
      }

    | Char   -> R.String { Str = ParsedValue(CharLiteral.Span, CharLiteral.Value().ToString()); }  // CharLiteral
    | String -> R.String { Str = ParsedValue(StringLiteral.Span, StringLiteral.Value()); }  // StringLiteral
    | Rounds -> RuleExpression             // "(" RuleExpression ")"
    | Call   -> R.Call  // QualifiedReference BindingPower=(sm "^" sm "+"? PrecedenceReference2)?
      {
        QualifiedReference -> RuleReference;
      }
  }

  map syntax NitraSyntax.RegexExpression -> RX.Expression
  {
    | Choice(leftRule, rightRules) -> RX.Sequence
      {
        leftRule   -> Expression;
        rightRules -> Expressions;
      }

    | Sequence(leftRule, rightRules) -> RX.Sequence
      {
        leftRule   -> Expression;
        rightRules -> Expressions;
      }

    | Optional -> RX.Optional            // RuleExpression "?"
      {
        RegexExpression -> Expression;
      }

    | Repeat -> RX.Repeat
      {
        RegexExpression -> Expression;
      }

    | Invert -> RX.Invert
      {
        RegexExpression -> Expression;
      }

    | Range -> RX.Range
      {
      }

    | InvertedRange -> RX.InvertedRange
      {
      }

    | Subtract -> RX.Subtract
      {
        Rule1 -> Expression1;
        Rule2 -> Expression2;
      }

    | RepeatWithSeparator -> RX.RepeatWithSeparator
      {
        RegexExpression -> Expression;
        Separator       -> Separator;
      }

    | Char   -> RX.Char   { CharLiteral   -> Literal; }
    | String -> RX.String { StringLiteral -> Literal; }
    | Rounds -> RegexExpression
    | Call   -> RX.Call
      {
        QualifiedReference -> RuleReference;
      }
  }

/*

  map syntax Types.TypeParameter -> TypeParameterAlias
  {
    Name -> Name;
    Variance = 
      if (VarianceAnnotationOpt.HasValue)
        ParsedValue(VarianceAnnotationOpt.Value.Annotation, if (VarianceAnnotationOpt.Value.Annotation.Length == 2) Variance.Covariant else Variance.Contravariant)
      else ParsedValue(VarianceAnnotationOpt.Span, Variance.None);
    Attributes -> Attributes;
  }

  map syntax Types.TypeParameters -> TypeParameterAlias*
  {
    TypeParameters.Item1
  }

  map syntax Types.TypeParameterConstraint -> TypeParameterConstraint
  {
    | Ctor   {}
    | Class  {}
    | Struct {}
    | Base { AnyType -> Type; }
  }

  map syntax Types.TypeParameterConstraints -> TypeParameterConstraint*
  {
    TypeParameterConstraints.Item1
  }

  map syntax Types.TypeParameterConstraintsClause -> TypeParameterConstraintsClause
  {
    Reference                -> ParameterName;
    TypeParameterConstraints -> Constraints;
  }

  map syntax Types.TypeParameterConstraintsClauses -> TypeParameterConstraintsClause*
  {
    TypeParameterConstraintsClauses
  }

  map syntax TopDeclarations.TypeDeclaration -> NamespaceMember
  {
    | Class -> TopClass
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
        match(TypeBaseOpt)       { Some(value) -> value | None() -> [] } -> TypeBase;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Struct -> TopStruct
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
        match(TypeBaseOpt)       { Some(value) -> value | None() -> [] } -> TypeBase;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Interface -> TopInterface
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
        match(TypeBaseOpt)       { Some(value) -> value | None() -> [] } -> TypeBase;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Enum -> TopEnum
      {
        Name        -> Name;
        EnumBaseOpt -> EnumBase;
        EnumBody.EnumMemberDeclarations -> Members;
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Delegate -> TopDelegate
      {
        Name             -> Name;
        AnyType          -> ReturnType;
        FormalParameters.Item1 -> Parameters;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
  }

  map syntax TopDeclarations.TypeDeclaration(_tag : NestedTypeTag) -> TypeMember
  {
    | Class -> NestedClass
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
        match(TypeBaseOpt)       { Some(value) -> value | None() -> [] } -> TypeBase;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Struct -> NestedStruct
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
        match(TypeBaseOpt)       { Some(value) -> value | None() -> [] } -> TypeBase;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Interface -> NestedInterface
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
        match(TypeBaseOpt)       { Some(value) -> value | None() -> [] } -> TypeBase;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Enum -> NestedEnum
      {
        Name        -> Name;
        EnumBaseOpt -> EnumBase;
        EnumBody.EnumMemberDeclarations -> Members;
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
    | Delegate -> NestedDelegate
      {
        Name             -> Name;
        AnyType          -> ReturnType;
        FormalParameters.Item1 -> Parameters;
        match(TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        TypeParameterConstraintsClauses -> TypeParameterConstraints;
        Attributes -> Attributes;
        Modifiers  -> Modifiers;
      }
  }

  map syntax TopDeclarations.TypeBase -> QualifiedReference*
  {
    AnyTypes.Item1
  }

  map syntax TopDeclarations.TypeMemberDeclaration -> TypeMember*
  {
    | NestedType      -> [TypeDeclaration(NestedTypeTag {})]
    | Constructor     -> [Member.Constructor
      {
        Name                      -> Name;
        FormalParameters.Item1    -> Parameters;
        Attributes                -> Attributes;
        Modifiers                 -> Modifiers;
        ConstructorInitializerOpt -> Initializer;
      }]
    | Destructor      -> [Member.Destructor
      {
        Name             -> Name;
        FormalParameters.Item1 -> Parameters;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | Method          -> [Member.Method
      {
        MethodHeader.Name             -> Name;
        MethodHeader.InterfaceTypeOpt -> InterfaceType;
        match(MethodHeader.TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        MethodHeader.TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        MethodHeader.AnyType          -> ReturnType;
        MethodHeader.FormalParameters.Item1 -> Parameters;
        Attributes                    -> Attributes;
        Modifiers                     -> Modifiers;
      }]
    | Property        -> [Member.Property
      {
        Name             -> Name;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | Event           -> [Member.Event
      {
        Name             -> Name;
        InterfaceTypeOpt -> InterfaceType;
        EventHeader { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; } -> Header;
        EventAccessorDeclarations -> Accessors;
      }]
    | Indexer         -> [Member.Indexer
      {
        Name = Name(this.File, this.KwThis, "#Item");
        FormalParameters.Item1 -> Parameters;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | SimpleEvent     -> VariableDeclarators       .Item1(EventHeader           { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | Field           -> VariableDeclarators       .Item1(FieldHeader           { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | Constant        -> ConstantDeclarators       .Item1(ConstantHeader        { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | FixedSizeBuffer -> FixedSizeBufferDeclarators.Item1(FixedSizeBufferHeader { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | OperatorUnary   -> [Member.OperatorUnary
      {
        Name = Name(this.File, this.OverloadableUnaryOperator, this.GetText(OverloadableUnaryOperator));
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Attributes      -> Attributes;
        Modifiers       -> Modifiers;
      }]
    | OperatorBinary  -> [Member.OperatorBinary
      {
        Name = Name(this.File, this.OverloadableBinaryOperator, this.GetText(OverloadableBinaryOperator));
        FormalParameter1 -> Parameter1;
        FormalParameter2 -> Parameter2;
        AnyType          -> ReturnType;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | ImplicitOperator   -> [Member.OperatorCnv
      {
        Name = Name(this.File, this.KwImplicit, "#Implicit");
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Kind = ParsedValue(this.KwImplicit, OperatorKind.Implicit);
        Attributes      -> Attributes;
        Modifiers       -> Modifiers;
      }]
    | ExplicitOperator   -> [Member.OperatorCnv
      {
        Name = Name(this.File, this.KwExplicit, "#Explicit");
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Kind = ParsedValue(this.KwExplicit, OperatorKind.Explicit);
        Attributes      -> Attributes;
        Modifiers       -> Modifiers;
      }]
  }

  map syntax Statements.VariableDeclarator(header : FieldHeader) -> Member.Field
  {
    Name   -> Name;
    header -> Header;
  }

  map syntax Statements.VariableDeclarator(header : EventHeader) -> Member.Event
  {
    Name   -> Name;
    header -> Header;
    None() -> InterfaceType;
    []     -> Accessors;
  }

  map syntax TopDeclarations.EnumBase -> QualifiedReference
  {
    AnyType
  }

  map syntax TopDeclarations.EnumMemberDeclaration -> EnumMember
  {
    Name       -> Name;
    Attributes -> Attributes;
  }

  map syntax TopDeclarations.EnumMemberDeclarations -> EnumMember*
  {
    EnumMemberDeclarations.Item1
  }

  map syntax TopDeclarations.NamespaceMemberDeclaration -> NamespaceMember
  {
    | Namespace ->
      ExplicitNamespace
      {
        NamespaceName.Name          -> Name;
        NamespaceName.Path(ImplicitNamespaceTag{}) -> Path;
        //ExternAliasDirectives       -> ExternAlias;
        //UsingDirectives             -> UsingDirectives;
        NamespaceMemberDeclarations -> Members;
      }

    | Type -> TypeDeclaration
    | ExternAliasDirective -> ExternAliasDirective
      {
        Name -> Name;
      }
    | Alias -> UsingAliasDirective
      {
        Name          -> Name;
        QualifiedName -> NamespaceOrTypeName;
      }

    | Open -> UsingOpenDirective
      {
        QualifiedName -> NamespaceOrTypeName;
      }

    | GlobalAttributeSection -> GlobalAttributes
      {
        GlobalAttributeSection -> Attributes;
      }
  }

  ast UsingSyntax : NamespaceMember
  {
  }

  map syntax Extensible.NamespaceMemberDeclaration.UsingSyntax -> NamespaceMember
  {
    UsingSyntax
    {
    }
  }

  ast ImplicitNamespaceTag { }

  map syntax CsIdentifiers.Name(_tag : ImplicitNamespaceTag) -> ImplicitNamespace
  {
    this -> Name;
  }

  map syntax TopDeclarations.ConstructorInitializer -> ConstructorInitializer
  {
    | This {}
    | Base {}
  }

  map syntax TopDeclarations.FormalParameter -> FormalParameter
  {
    Name       -> Name;
    AnyType    -> Type;
    Attributes -> Attributes;
    Modifier =
      if (this.ParameterModifierOpt.HasValue)
      {
        def result =
          match (this.GetText(this.ParameterModifierOpt.Value))
          {
            | "ref"    => ParameterModifier.Ref
            | "out"    => ParameterModifier.Out
            | "this"   => ParameterModifier.This
            | "params" => ParameterModifier.Params
            | _        => assert2(false, "Unknown parameter modifier value"); ParameterModifier.None
          };
        ParsedValue(this.ParameterModifierOpt.Value, result)
      }
      else
        ParsedValue(this.ParameterModifierOpt.Span, ParameterModifier.None);
  }

  map syntax Statements.ConstantDeclarator(header : ConstantHeader) -> Member.Constant
  {
    Name -> Name;
    header -> Header;
  }

  map syntax TopDeclarations.FixedSizeBufferDeclarator(header : FixedSizeBufferHeader) -> Member.FixedSizeBuffer
  {
    Name   -> Name;
    header -> Header;
  }

  map syntax TopDeclarations.GetAccessorDeclaration -> PropertyAccessor.Get
  {
    Name = Name(this.File, this.KwGet, "#Get");
    Attributes -> Attributes;
    Modifiers  -> Modifiers;
  }

  map syntax TopDeclarations.SetAccessorDeclaration -> PropertyAccessor.Set
  {
    Name = Name(this.File, this.KwSet, "#Set");
    Attributes -> Attributes;
    Modifiers  -> Modifiers;
  }

  map syntax TopDeclarations.AccessorDeclarations -> PropertyAccessor*
  {
    | GetSet(g, Some(s)) -> [g, s]
    | GetSet(g, None)    -> [g]
    | SetGet(s, Some(g)) -> [s, g]
    | SetGet(s, None)    -> [s]
    | None               -> []
  }

  map syntax TopDeclarations.AddAccessorDeclaration -> EventAccessor.Add
  {
    Name = Name(this.File, this.KwAdd, "#Add");
    Attributes -> Attributes;
  }

  map syntax TopDeclarations.RemoveAccessorDeclaration -> EventAccessor.Remove
  {
    Name = Name(this.File, this.KwRemove, "#Remove");
    Attributes -> Attributes;
  }

  map syntax TopDeclarations.EventAccessorDeclarations -> EventAccessor*
  {
    | AddRemove(a, r) -> [a, r]
    | RemoveAdd(r, a) -> [r, a]
  }

  map syntax TopDeclarations.Modifiers -> Modifier*
  {
    Modifiers
  }

  map syntax TopDeclarations.Modifier -> Modifier
  {
    | New       {}
    | Public    {}
    | Protected {}
    | Internal  {}
    | Private   {}
    | Virtual   {}
    | Volatile  {}
    | Static    {}
    | Readonly  {}
    | Sealed    {}
    | Override  {}
    | Abstract  {}
    | Extern    {}
    | Unsafe    {}
    | AsyncMod -> Async {}
  }

  map syntax CsIdentifiers.QualifiedIdentifier -> QualifiedReference
  {
    | (None,    (first :: other, _)) -> fold (item in other; acc = first();    acc = item(acc))
    | (Some(a), (first :: other, _)) -> fold (item in other; acc = first(a()); acc = item(acc))
    | (_,       ([],             _)) = Utils.CreateMissingQualifiedReference(QualifiedIdentifierParts.File, QualifiedIdentifierParts.Span);
  }

  map syntax CsIdentifiers.QualifiedIdentifierPartTypeArguments -> QualifiedReference*
  {
    | TypeArgumentList -> AnyTypes.Item1
    | OpenTypeArguments =
      {
        def args = array(RankSeparators.Count + 1);
        args[0] = Utils.CreateOpenTypeArgument(this.File, NSpan(OpenBrace.EndPos));
        foreach (rs in RankSeparators with index)
          args[index + 1] = Utils.CreateOpenTypeArgument(this.File, NSpan(rs.EndPos));
        QualifiedReference.AstList(this, args)
      }
  }

  map syntax CsIdentifiers.QualifiedIdentifierPart -> QualifiedReference
  {
    let qid : QualifiedReference = Simple { Reference -> Name; } in
    match (QualifiedIdentifierPartTypeArgumentsOpt)
    {
      | None -> qid
      | Some(typeArgs) -> Generic { qid -> QualifiedName; typeArgs -> Arguments; }
    }
  }

  map syntax CsIdentifiers.QualifiedIdentifierPart(aliasAst : Nitra.Runtime.Binding.Reference) -> QualifiedReference
  {
    let qid : QualifiedReference = Aliased { Reference -> Name; aliasAst -> Alias; } in
    match (QualifiedIdentifierPartTypeArgumentsOpt)
    {
      | None -> qid
      | Some(typeArgs) -> Generic { qid -> QualifiedName; typeArgs -> Arguments; }
    }
  }

  map syntax CsIdentifiers.QualifiedIdentifierPart(qualifier : QualifiedReference) -> QualifiedReference
  {
    let qid : QualifiedReference = Qualified { Reference -> Name; qualifier -> Qualifier; } in
    match (QualifiedIdentifierPartTypeArgumentsOpt)
    {
      | None -> qid
      | Some(typeArgs) -> Generic { qid -> QualifiedName; typeArgs -> Arguments; }
    }
  }

  map syntax CsIdentifiers.InterfaceType -> QualifiedReference
  {
    | (None,    (first, _) :: other) -> fold (item in other; acc = first();    acc = item(acc))
    | (Some(a), (first, _) :: other) -> fold (item in other; acc = first(a()); acc = item(acc))
    | (_,       []                 ) = Utils.CreateMissingQualifiedReference(InterfaceTypeParts.File, InterfaceTypeParts.Span);
  }

  map syntax CsIdentifiers.InterfaceTypePart -> QualifiedReference
  {
    let qid : QualifiedReference = Simple { Reference -> Name; } in
    match (QualifiedIdentifierPartTypeArgumentsOpt)
    {
      | None -> qid
      | Some(typeArgs) -> Generic { qid -> QualifiedName; typeArgs -> Arguments; }
    }
  }

  map syntax CsIdentifiers.InterfaceTypePart(aliasAst : Nitra.Runtime.Binding.Reference) -> QualifiedReference
  {
    let qid : QualifiedReference = Aliased { Reference -> Name; aliasAst -> Alias; } in
    match (QualifiedIdentifierPartTypeArgumentsOpt)
    {
      | None -> qid
      | Some(typeArgs) -> Generic { qid -> QualifiedName; typeArgs -> Arguments; }
    }
  }

  map syntax CsIdentifiers.InterfaceTypePart(qualifier : QualifiedReference) -> QualifiedReference
  {
    let qid : QualifiedReference = Qualified { Reference -> Name; qualifier -> Qualifier; } in
    match (QualifiedIdentifierPartTypeArgumentsOpt)
    {
      | None -> qid
      | Some(typeArgs) -> Generic { qid -> QualifiedName; typeArgs -> Arguments; }
    }
  }

  map syntax Types.TypeName -> QualifiedReference
  {
    | QualifiedName  -> QualifiedIdentifier
    | PredefinedType -> Simple { Name = Reference(this.File, this.Span, GetText(PredefinedType)); }
  }

  map syntax Types.AnyNonArrayType -> QualifiedReference
  {
    | (typeName, None) -> typeName
    | (typeName, Some) -> Generic
      {
        Qualified
        {
          Simple { Name = Reference(this.File, this.Span, "System"); } -> Qualifier;
          Name = Reference(this.File, this.Span, "Nullable");
        } -> QualifiedName;
        [ typeName ] -> Arguments;
      }
  }

  map syntax Types.TypeSpecifier(qualifiedName : QualifiedReference) -> QualifiedReference
  {
    | PointerSpecifier -> Generic
      {
        Simple { Name = Reference(this.File, this.Span, "#Pointer"); } -> QualifiedName;
        [qualifiedName] -> Arguments;
      }
    | RankSpecifier -> Generic
      {
        Simple { Name = Reference(this.File, this.Span, "#Array" + (RankSpecifier.RankSeparators.Count + 1).ToString()); } -> QualifiedName;
        [qualifiedName] -> Arguments;
      }
  }

  map syntax Types.AnyType -> QualifiedReference
  {
    fold (ts in TypeSpecifiers; acc = AnyNonArrayType; acc = ts(acc))
  }

  // Reference is a predefined declaration
  map syntax CsIdentifiers.QualifiedAlias -> Reference { Alias }

  map syntax Attributes.Attribute(targetOpt : AttributeTarget?) -> Attribute
  {
    targetOpt     -> Target;
    QualifiedName -> Name;
  }

  map syntax Attributes.AttributeList(targetOpt : AttributeTarget?) -> Attribute*
  {
    Attributes.Item1(targetOpt)
  }

  map syntax Attributes.AttributeSection -> Attribute*
  {
    AttributeList(AttributeTargetSpecifierOpt)
  }

  map syntax Attributes.GlobalAttributeSection -> Attribute*
  {
    AttributeList(Some(GlobalAttributeTargetSpecifier))
  }

  map syntax Attributes.AttributeTargetSpecifier -> AttributeTarget =
  {
    match (this.GetText(this.AttributeTarget))
    {
      | "field"    => AttributeTarget.Field(this.File, this.AttributeTarget)
      | "event"    => AttributeTarget.Event(this.File, this.AttributeTarget)
      | "method"   => AttributeTarget.Method(this.File, this.AttributeTarget)
      | "param"    => AttributeTarget.Param(this.File, this.AttributeTarget)
      | "property" => AttributeTarget.Property(this.File, this.AttributeTarget)
      | "return"   => AttributeTarget.Return(this.File, this.AttributeTarget)
      | "type"     => AttributeTarget.Type(this.File, this.AttributeTarget)
      | "typevar"  => AttributeTarget.Typevar(this.File, this.AttributeTarget)
      | _          => AttributeTarget.AmbiguousOrMissing(this.File, this.AttributeTarget)
    }
  }

  map syntax Attributes.GlobalAttributeTargetSpecifier -> AttributeTarget =
  {
    match (this.GetText(this.GlobalAttributeTarget))
    {
      | "assembly" => AttributeTarget.Assembly(this.File, this.GlobalAttributeTarget)
      | "module"   => AttributeTarget.Module(this.File, this.GlobalAttributeTarget)
      | _          => AttributeTarget.AmbiguousOrMissing(this.File, this.GlobalAttributeTarget)
    }
  }
  */
}
