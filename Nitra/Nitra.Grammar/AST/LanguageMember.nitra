using Nitra.AstUtils;
using Nitra.Runtime.Binding;

using System.Drawing;

namespace Nitra.Ast
{
  abstract ast LanguageMember : ScopedAst, BindableAst
  {
  }

  declaration Style : LanguageMember
  {
    symbol
    {
      in ForegroundColor : Color;
    }
  }

  declaration SpanClass : LanguageMember
  {
  }

  /*
  abstract declaration SpanClass : LanguageMember
  {
    sealed symbol
    {
      in ForegroundColor : Color;
    }
  }

  declaration InlineSpanClass : SpanClass
  {
    Properties : StyleProperty*;

    decompose Properties
    {
      ForegroundColor : StyleProperty.ForegroundColor;
    }

    Symbol.ForegroundColor = ForegroundColor.Color.ValueOrDefault;
  }

  declaration StyledSpanClass : SpanClass
  {
    out Ref : Ref[StyleSymbol] = StyleReference.Ref.TryResolve();

    Symbol.ForegroundColor = Ref.Symbol.ForegroundColor;

    StyleReference : Reference;
  }
  */

  abstract ast SyntaxModuleReference : LanguageMember
  {
    Module.Scope = Scope;

    Module : QualifiedReference;
  }

  ast AdditionSyntaxModuleReference : SyntaxModuleReference { }
  ast StartSyntaxModuleReference    : SyntaxModuleReference
  {
    Rule.Scope = Module.Ref.Symbol.Scope;

    Rule : QualifiedReference;
  }

  ast FileExtension : LanguageMember
  {
    Extension : string;
  }

  ast Company     : LanguageMember { Name : string; }
  ast Description : LanguageMember { Text : string; }
  ast Authors     : LanguageMember { Text : string; }
  ast Copyright   : LanguageMember { Text : string; }
  ast LicenseUrl  : LanguageMember { Text : string; }
  ast RequireLicenseAcceptance : LanguageMember { }

  abstract ast StyleProperty
  {
    | ForegroundColor { Color : Color; }
  }
}
