using Nitra.AstUtils;
using Nitra.Runtime.Binding;

using System.Drawing;

namespace Nitra.Ast
{
  abstract ast LanguageMember : ScopedAst
  {
  }

  declaration Style : LanguageMember
  {
    symbol
    {
      in ForegroundColor : Color;
    }
  }

  declaration SpanClass : LanguageMember
  {
  }

  /*
  abstract declaration SpanClass : LanguageMember
  {
    sealed symbol
    {
      in ForegroundColor : Color;
    }
  }

  declaration InlineSpanClass : SpanClass
  {
    Properties : StyleProperty*;

    decompose Properties
    {
      ForegroundColor : StyleProperty.ForegroundColor;
    }

    Symbol.ForegroundColor = ForegroundColor.Color.ValueOrDefault;
  }

  declaration StyledSpanClass : SpanClass
  {
    out Ref : Ref[StyleSymbol] = StyleReference.Ref.TryResolve();

    Symbol.ForegroundColor = Ref.Symbol.ForegroundColor;

    StyleReference : Reference;
  }
  */

  ast SyntaxModuleReference : LanguageMember
  {
    Module : QualifiedReference;
  }

  ast FileExtension : LanguageMember
  {
    Extension : string;
  }

  ast Company : LanguageMember
  {
  }

  ast Description : LanguageMember
  {
  }

  ast Authors : LanguageMember
  {
  }

  ast Copyright : LanguageMember
  {
  }

  ast LicenseUrl : LanguageMember
  {
  }

  ast RequireLicenseAcceptance : LanguageMember
  {
  }

  abstract ast StyleProperty
  {
    | ForegroundColor { Color : Color; }
  }

}
