using Nemerle.Collections;
using Nitra.AstUtils;
using Nitra.Runtime.Binding;

using System.Collections.Generic;

namespace Nitra.Ast
{
  abstract ast RuleBodyMember : SyntaxElementContainer
  {
    in    Parent   : RuleSymbol;

    ContainingTable = Parent.MemberTable;
  }

  abstract declaration RuleBodyMemberDeclaration : RuleBodyMember
  {
    symbol
    {
      in Parent : RuleSymbol;
      FullName = this.Parent.FullName + "." + this.Name;
    }

    Symbol.Parent   = Parent;
  }
  
  abstract declaration ExtensionRule : SyntaxRule, RuleBodyMemberDeclaration
  {
    sealed symbol
    {
    }
  }

  declaration ExtensionRuleWithExplicitName : ExtensionRule
  {
  }

  declaration ExtensionRuleWithInferredName : ExtensionRule
  {
    Symbol = Parent.MemberTable.Define(this, context, Name(File, Expression.FieldName.Span, Expression.FieldName.ValueOrDefault ?? ""));
  }

  declaration Precedence : RuleBodyMemberDeclaration
  {
  }

  ast InlineMapSyntax : MapSyntax, RuleBodyMember
  {
    out RuleRef : Ref[SyntaxRuleSymbol] = Ref.Some(File, Span, Parent).Resolve();
    
    RuleSymbol = RuleRef.Symbol;
  }

  declaration RuleMethod : RuleBodyMemberDeclaration
  {
  }

  declaration RuleMethodOverride : RuleBodyMemberDeclaration
  {
  }

  declaration RuleMethodMissing : RuleBodyMemberDeclaration
  {
  }
}
