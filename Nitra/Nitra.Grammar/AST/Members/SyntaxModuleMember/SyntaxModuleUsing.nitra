using DotNet;
using DotNet.SymbolUtils;

using Nitra;
using Nitra.Runtime.Binding;

using Nemerle.Collections;

namespace Nitra.Ast
{
  abstract ast SyntaxModuleUsingDirective : ScopedAst
  {
  stage 1:
    inout Literals          : Map[string, string];
    in    UsingAliasesScope : TableScope;
    in    CurrentScope      : Scope;
    inout Opening           : list[Scope];
  }

  declaration SyntaxModuleUsingAliasDirective : SyntaxModuleUsingDirective
  {
    symbol
    {
      Kind      = "alias";
      SpanClass = DotNetLangLanguage.AliasSpanClass;

      in ReplacementSymbol : ISymbol2;
      in Type              : TypeReference;
    }

    ContainingTable           = UsingAliasesScope;
    NamespaceOrTypeName.Scope = CurrentScope;
    Symbol.ReplacementSymbol  = NamespaceOrTypeName.Ref.Symbol;
    Symbol.Type               = NamespaceOrTypeName.Type;

    NamespaceOrTypeName : QualifiedReference;
  }

  ast SyntaxModuleUsingOpenDirective : SyntaxModuleUsingDirective
  {
    LiteralsOut               = TryGetLiterals(NamespaceOrTypeName.Ref, LiteralsIn);
    ContainingTable           = null;
    NamespaceOrTypeName.Scope = CurrentScope;
    OpeningOut                = PrependScopeIfResolved(NamespaceOrTypeName.Ref, OpeningIn);

    unless (NamespaceOrTypeName.Ref.Symbol is NamespaceSymbol || NamespaceOrTypeName.Ref.Symbol is SyntaxModuleSymbol)
      Error("Using directive can open only namespace or syntax module.");

    NamespaceOrTypeName : QualifiedReference;
  }
}
