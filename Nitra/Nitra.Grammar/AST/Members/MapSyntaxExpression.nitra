using DotNet;

using Nitra.Runtime.Binding;

namespace Nitra.Ast
{
  abstract ast MapSyntaxExpression : BindableAst
  {
  stage 1:
    in AstScope : Scope;
    out Type    : TypeSymbol;

    | This
      {
        Type = AstUtils.GetRuleVoidType(context);
      }

    | Identifier
      {
      stage 1:
        out VariableRef : Ref[TypedDeclarationSymbol] = Reference.Ref.Resolve();

        Reference.Scope = Scope;
        Type            = VariableRef.Symbol.Type;

        Reference : Reference;
      }

    | Ast
      {
      stage 1:
        out AstTypeRef : Ref[AstTypeSymbol] = Ast.Ref.Resolve();

        Ast.Scope        = AstScope;
        Members.Scope    = Scope;
        Members.AstType  = AstTypeRef.Symbol;
        Members.AstScope = AstScope;
        Type             = AstTypeRef.Symbol;

        Ast     : QualifiedReference;
        Members : MapSyntaxExpressionAstMember*;
      }

    | List
      {
        Type = AstUtils.GetRuleVoidType(context);
        Items.AstScope = AstScope;
        Items.Scope    = Scope;

        Items : MapSyntaxExpression*;
      }

    | OptionSome
      {
        Type = AstUtils.GetRuleVoidType(context);
        Value.AstScope = AstScope;
        Value.Scope    = Scope;

        Value : MapSyntaxExpression;
      }

    | OptionNone
      {
        Type = AstUtils.GetRuleVoidType(context);
      }

    | Match
      {
        Type = AstUtils.GetRuleVoidType(context);
        Expression.AstScope = AstScope;
        Expression.Scope    = Scope;
        Cases.AstScope      = AstScope;
        Cases.Scope         = Scope;
        Cases.ExpectedType  = Expression.Type;

        Expression : MapSyntaxExpression;
        Cases      : MapSyntaxMatchCase*;
      }

    | Fold
      {
        Type = AstUtils.GetRuleVoidType(context);

        ItemName         : Name;
        ItemExpression   : MapSyntaxExpression;

        AccumulatorName1 : Name;
        InitExpression   : MapSyntaxExpression;

        AccumulatorName2 : Reference;
        EachExpression   : MapSyntaxExpression;
      }

    | DefineVariable
      {
        Type = Body.Type;

        VariableName : Name;
        VariableType : QualifiedReference;
        Expression   : MapSyntaxExpression;
        Body         : MapSyntaxExpression;
      }

    | TypeHint
      {
      stage 1:
        out AstTypeRef : Ref[AstTypeSymbol] = Ast.Ref.Resolve();

        Expression.AstScope = AstScope;
        Expression.Scope    = Scope;
        Ast.Scope           = AstScope;
        Type                = AstTypeRef.Symbol;

        Expression : MapSyntaxExpression;
        Ast        : QualifiedReference;
      }

    | Call
      {
        Type = AstUtils.GetRuleVoidType(context);
        Expression.AstScope = AstScope;
        Expression.Scope    = Scope;
        Arguments.AstScope  = AstScope;
        Arguments.Scope     = Scope;

        Expression : MapSyntaxExpression;
        Arguments  : MapSyntaxExpression*;
      }

    | MemberAccess
      {
      stage 1:
        out VariableRef : Ref[TypedDeclarationSymbol] = Reference.Ref.Resolve();

        Expression.AstScope = AstScope;
        Expression.Scope    = Scope;
        Reference.Scope     = Expression.Type.Scope;
        Type                = VariableRef.Symbol.Type;

        Expression : MapSyntaxExpression;
        Reference  : Reference;
      }
  }
}
