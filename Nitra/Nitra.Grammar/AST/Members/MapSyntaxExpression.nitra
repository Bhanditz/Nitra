using DotNet;

using Nitra.Runtime.Binding;

namespace Nitra.Ast
{
  abstract ast MapSyntaxExpression : BindableAst
  {
    | This
      {
      }

    | Identifier
      {
        Reference.Scope = Scope;

        Reference : Reference;
      }

    | Ast
      {
        Ast.Scope = Scope;
      stage 1:
        out AstTypeRef : Ref[AstTypeSymbol] = Ast.Ref.Resolve();

        Members.Scope = Scope;
        Members.AstType = AstTypeRef.Symbol;

        Ast     : QualifiedReference;
        Members : MapSyntaxExpressionAstMember*;
      }

    | List
      {
        Items.Scope = Scope;

        Items : MapSyntaxExpression*;
      }

    | OptionSome
      {
        Value.Scope = Scope;

        Value : MapSyntaxExpression;
      }

    | OptionNone
      {
      }

    | Match
      {
        Expression.Scope = Scope;
        Cases.Scope      = Scope;

        Expression : MapSyntaxExpression;
        Cases      : MapSyntaxMatchCase*;
      }

    | Fold
      {
        ItemName         : Name;
        ItemExpression   : MapSyntaxExpression;

        AccumulatorName1 : Name;
        InitExpression   : MapSyntaxExpression;

        AccumulatorName2 : Reference;
        EachExpression   : MapSyntaxExpression;
      }

    | DefineVariable
      {
        VariableName : Name;
        VariableType : QualifiedReference;
        Expression   : MapSyntaxExpression;
        Body         : MapSyntaxExpression;
      }

    | TypeHint
      {
        Expression.Scope = Scope;
        Ast.Scope = Scope;

        Expression : MapSyntaxExpression;
        Ast        : QualifiedReference;
      }

    | Call
      {
        Expression.Scope = Scope;
        Arguments.Scope = Scope;

        Expression : MapSyntaxExpression;
        Arguments  : MapSyntaxExpression*;
      }

    | MemberAccess
      {
        Expression.Scope = Scope;
        // Reference.Scope = Expression.Type.Scope;

        Expression : MapSyntaxExpression;
        Reference  : Reference;
      }
  }
}
