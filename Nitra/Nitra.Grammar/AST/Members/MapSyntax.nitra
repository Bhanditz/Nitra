using DotNet;

using Nitra.Runtime.Binding;

namespace Nitra.Ast
{
  abstract ast MapSyntax : BindableAst
  {
    AstName.Scope = Scope;

  stage 1:
    out Rule    : RuleSymbol;
    out AstType : AstTypeSymbol;
    out AstRef  : Ref[AstTypeSymbol] = this.AstName.Ref.Resolve();

    AstType       = AstRef.Symbol;
    Body.Scope    = Scope;
    Body.Rule     = Rule;
    Body.AstType  = AstType;

    Parameters : MapSyntaxParameter*;
    AstName    : QualifiedReference;
    Body       : MapSyntaxBody;
  }

  declaration MapSyntaxParameter
  {
    AstName : QualifiedReference;
  }

  ast TopMapSyntax : MapSyntax, NamespaceMember
  {
    RuleName.Scope = Scope;

  stage 1:
    out RuleRef : Ref[SyntaxRuleSymbol] = this.RuleName.Ref.Resolve();

    Rule = RuleRef.Symbol;

    RuleName : QualifiedReference;
  }

  ast InlineMapSyntax : MapSyntax, RuleBodyMember
  {
    Rule = Parent;
  }

  abstract ast MapSyntaxBody : BindableAst
  {
  stage 1:
    in Rule    : RuleSymbol;
    in AstType : AstTypeSymbol;

    | Empty
      {
      }

    | Inline
      {
        Code : string;
      }

    | PerMember
      {
        Members.Scope   = Scope;
        Members.Rule    = Rule;
        Members.AstType = AstType;

        Members : MapSyntaxBodyMember*;
      }
  }

  abstract ast MapSyntaxBodyMember : BindableAst
  {
  stage 1:
    in Rule    : RuleSymbol;
    in AstType : AstTypeSymbol;
  }

  abstract ast MapSyntaxExpressionAstMember : BindableAst
  {
  }

  abstract ast MapSyntaxMatchCaseBody
  {
    | PerField
      {
        Members : MapSyntaxExpressionAstMember*;
      }
    | Inline
      {
        Code : string;
      }
  }

  ast ParseTreeFieldExpressionMapping : MapSyntaxBodyMember, MapSyntaxExpressionAstMember
  {
    AstProperty.Scope = Scope;

    AstProperty : Reference;
    Expression  : MapSyntaxExpression;
  }

  ast ParseTreeFieldCodeMapping : MapSyntaxBodyMember, MapSyntaxExpressionAstMember
  {
    AstProperty.Scope = Scope;

    AstProperty : Reference;
    Code        : string;
  }

  ast MapSyntaxMatchCase : MapSyntaxBodyMember
  {
    Pattern : ParseTreePattern;
    Body    : MapSyntaxMatchCaseBody;
  }

  abstract ast ParseTreePattern
  {
    | Identifier
      {
        Reference : Reference;
      }

    | Ctor
      {
        Reference : Reference;
        Arguments : ParseTreePattern*;
      }

    | Tuple
      {
        Members : ParseTreePattern*;
      }

    | List1
      {
        Head : ParseTreePattern;
        Tail : ParseTreePattern;
      }

    | List2
      {
        Items : ParseTreePattern*;
      }
  }
}
