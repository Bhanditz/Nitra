using DotNet;

using Nitra.Runtime.Binding;

namespace Nitra.Ast
{
  abstract ast MapSyntaxMatchCase : BindableAst
  {
    out VariableScope : TableScope = TableScope("pattern variables", null);
    Pattern.VariableScope = VariableScope;

    Pattern : ParseTreePattern;
  }

  abstract ast TopMapSyntaxMatchCase : MapSyntaxMatchCase, MapSyntaxBodyMember
  {
    AstReference.AstTypeIn = AstType;

    AstReference : ParseTreePatternAstReference;

    | Inline
      {
        Code : string;
      }

    | PerMember
      {
        Members.Scope   = Scope.HideWith(VariableScope);
        Members.AstType = AstReference.AstTypeOut;

        Members : MapSyntaxExpressionAstMember*;
      }

    | Expression
      {
        Expression.Scope = Scope.HideWith(VariableScope);
        Expression : MapSyntaxExpression;
      }
  }

  ast ParseTreePatternAstReferenceTag {}

  abstract ast ParseTreePatternAstReference
  {
    inout AstType : AstTypeSymbol;

    | None
    | Some
      {
        out AstTypeRef : Ref[AstTypeSymbol] = AstName.Ref.Resolve();

        AstName.Scope = AstTypeIn.Scope;
        AstTypeOut    = AstTypeRef.Symbol;

        AstName : Reference;
      }
  }

  ast ExpressionMapSyntaxMatchCase : MapSyntaxMatchCase
  {
    Expression.Scope = Scope.HideWith(VariableScope);
    Expression : MapSyntaxExpression;
  }
}
