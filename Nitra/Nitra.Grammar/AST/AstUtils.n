using DotNet;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Ast;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  module AstUtils
  {
    public UpdateLiterals(inMap : Map[string, string], literals : StringLiteral.IAstList, name : string) : Map[string, string]
    {
      when (string.IsNullOrEmpty(name))
        return inMap;

      def xs = literals.Select(x => x.Value.ValueOrDefault).Where(x => !string.IsNullOrEmpty(x)).Select(x => (x, name));
      inMap.ReplaceRange(xs)
    }

    public MakePlural(parsedValue : ParsedValue[string]) : ParsedValue[string]
    {
      if (parsedValue.HasValue)
        ParsedValue(parsedValue.Span, JetBrains.Util.NounUtil.GetPlural(parsedValue.Value))
      else
        parsedValue
    }

    public NMakeLiteralName(parsedValue : ParsedValue[string], literals : Map[string, string]) : ParsedValue[string]
    {
      unless (parsedValue.HasValue)
        return parsedValue;
        
      def value = parsedValue.ValueOrDefault;
      
      if (literals.Find(value) is Some(name))
        ParsedValue(parsedValue.Span, name)
      else if (Utils.IsIdentifier(value))
        ParsedValue(parsedValue.Span, Utils.ToPascalCase(value, "Kw"))
      else
        ParsedValue(parsedValue.Span, "Literal")
    }

    public TryGetLiterals(reference : Ref[ISymbol2], literals : Map[string, string]) : Map[string, string]
    {
      when (reference.IsSymbolEvaluated)
      when (reference.Symbol is SyntaxModuleSymbol as m)
        return literals.ReplaceRange(m.Literals);
        
      literals
    }

    public PrependScopeIfResolved(reference : Ref[ISymbol2], scopes : list[Scope]) : list[Scope]
    {
      if (reference.IsSymbolEvaluated)
        reference.Symbol.Scope :: scopes
      else
        scopes
    }
  } // module
} // namespace
