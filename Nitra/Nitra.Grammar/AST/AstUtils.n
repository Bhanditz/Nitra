using DotNet;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Ast;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  module AstUtils
  {
    public Append(this lst : QualifiedReference.IAstList, item : QualifiedReference) : QualifiedReference.IAstList
    {
      def newItems = array(lst.Count + 1);
      lst.CopyTo(newItems, 0);
      newItems[lst.Count] = item;
      QualifiedReference.AstList(lst.File, lst.Span, newItems)
    }

    public MakeMembersScope(currentScope : Scope, opening : list[Scope], aliases : TableScope) : Scope
    {
      def makeCurrentScope(scope : Scope) : Scope
      {
        def withAliases =
          if (aliases.Symbols.Count == 0)
            scope
          else
            scope.UnionWith(aliases);

        def withUsings =
          match (opening)
          {
            | []    => withAliases
            | [one] => one.HideWith(withAliases)
            | _     => Scope.Union(opening).HideWith(withAliases)
          };

        withUsings
      }

      if (currentScope is HidingScope as h)
        h.Hidden.HideWith(makeCurrentScope(h.Scope))
      else
        makeCurrentScope(currentScope)
    }

    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def parent = ns.Parent;
        def scope  = ns.Scope;

        if (parent : object == parentNs)
          parentScope.HideWith(scope)
        else
          buildEnterNsScope(parent).HideWith(scope)
      }
      
      buildEnterNsScope(enteredNs)
    }
    
    [Memoize]
    public TypeOverloadResolution(argumentsCount : int) : ResolutionAlgorithm[ISymbol2, ISymbol2]
    {
      def resolve(candidate : ISymbol2) : ValueOption[ISymbol2]
      {
        | symbol is BuiltInTypeAliasSymbol    when symbol.IsTypeEvaluated                       => resolve(symbol.Type)
        | symbol is GenericTypeSymbol         when argumentsCount == symbol.TypeParametersCount => VSome(symbol)
        | symbol is UsingAliasDirectiveSymbol           when argumentsCount == 0                          => VSome(symbol)
        | symbol is NamespaceSymbol                     when argumentsCount == 0                          => VSome(symbol)
        | symbol is SyntaxModuleSymbol                  when argumentsCount == 0                          => VSome(symbol)
        | symbol is NamespaceMemberDeclarationSymbol    when argumentsCount == 0                          => VSome(symbol)
        | symbol is SyntaxModuleMemberDeclarationSymbol when argumentsCount == 0                          => VSome(symbol)
        | _ => VNone()
      }
      resolve
    }

    public CreateMissingQualifiedReference(file : File, span : NSpan) : QualifiedReference
    {
      QualifiedReference.Simple(
        File = file,
        Span = span,
        Name = Reference.AmbiguousOrMissing(file, span))
    }
    
    public CreateBuiltinName(file : File, span : NSpan, name : string) : QualifiedReference
    {
      QualifiedReference.Simple(file, NSpan(span.StartPos), Reference(file, NSpan(span.StartPos), name))
    }

    public CreateTupleQualifiedReference(file : File, span : NSpan, items : QualifiedReference.IAstList) : QualifiedReference
    {
      QualifiedReference.Generic(file, span,
        CreateBuiltinName(file, NSpan(span.StartPos), "#Tuple"),
        items)
    }

    public CreateFuncQualifiedReference(file : File, span : NSpan, qualifiedReference1 : QualifiedReference, qualifiedReference2 : QualifiedReference) : QualifiedReference
    {
      def arguments = 
        match (qualifiedReference1)
        {
          | QualifiedReference.Generic(QualifiedName = QualifiedReference.Simple(Name = Reference(Text = "#Tuple")), Arguments = tupleArguments) => tupleArguments.Append(qualifiedReference2)
          | _ => QualifiedReference.AstList(qualifiedReference1.File, qualifiedReference1.Span, qualifiedReference1, qualifiedReference2)
        };

      QualifiedReference.Generic(file, span,
        CreateBuiltinName(file, NSpan(span.StartPos), "#Func"),
        arguments)
    }

    public UpdateLiterals(inMap : Map[string, string], literals : StringLiteral.IAstList, name : string) : Map[string, string]
    {
      when (string.IsNullOrEmpty(name))
        return inMap;

      def xs = literals.Select(x => x.Value.ValueOrDefault).Where(x => !string.IsNullOrEmpty(x)).Select(x => (x, name));
      inMap.ReplaceRange(xs)
    }

    public MakePlural(parsedValue : ParsedValue[string]) : ParsedValue[string]
    {
      if (parsedValue.HasValue)
        ParsedValue(parsedValue.Span, JetBrains.Util.NounUtil.GetPlural(parsedValue.Value))
      else
        parsedValue
    }
    
    public IdToString(parsedValue : ParsedValue[int]) : ParsedValue[string]
    {
      if (parsedValue.HasValue)
        ParsedValue(parsedValue.Span, StringIndex.GetText(parsedValue.ValueOrDefault))
      else
        ParsedValue(parsedValue.Span.StartPos)
    }

    public NMakeLiteralName(parsedValue : ParsedValue[string], literals : Map[string, string]) : ParsedValue[string]
    {
      unless (parsedValue.HasValue)
        return parsedValue;
        
      def value = parsedValue.ValueOrDefault;
      
      if (literals.Find(value) is Some(name))
        ParsedValue(parsedValue.Span, name)
      else if (Utils.IsIdentifier(value))
        ParsedValue(parsedValue.Span, Utils.ToPascalCase(value, "Kw"))
      else
        ParsedValue(parsedValue.Span, "Literal")
    }
  } // module
} // namespace
