using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Ast;
using Nitra.Runtime.Binding;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  module AstUtils
  {
    public MakeMembersScope(currentScope : Scope, opening : list[Scope], aliases : TableScope) : Scope
    {
      def makeCurrentScope(scope : Scope) : Scope
      {
        def withAliases =
          if (aliases.Symbols.Count == 0)
            scope
          else
            scope.UnionWith(aliases);

        def withUsings =
          match (opening)
          {
            | []    => withAliases
            | [one] => one.HideWith(withAliases)
            | _     => Scope.Union(opening).HideWith(withAliases)
          };

        withUsings
      }

      if (currentScope is HidingScope as h)
        h.Hidden.HideWith(makeCurrentScope(h.Scope))
      else
        makeCurrentScope(currentScope)
    }

    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def parent = ns.Parent;
        def scope  = ns.Scope;

        if (parent : object == parentNs)
          parentScope.HideWith(scope)
        else
          buildEnterNsScope(parent).HideWith(scope)
      }
      
      buildEnterNsScope(enteredNs)
    }
  } // module
} // namespace
