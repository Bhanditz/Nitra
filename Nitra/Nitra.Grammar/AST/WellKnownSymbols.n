using Nitra.Declarations;

namespace Nitra.Ast
{
  public module WellKnownSymbols
  {
    public AnyType        : AnyTypeSymbol          = StaticScope.CreateSymbol("Any");
    public OptionAstType  : WellKnownTypeSymbol    = StaticScope.CreateSymbol("OptionAst");
    public ListAstType    : WellKnownTypeSymbol    = StaticScope.CreateSymbol("ListAst");
    public VoidRuleType   : RuleVoidTypeImplSymbol = StaticScope.CreateSymbol("VoidRule");
    public TupleRuleType  : WellKnownTypeSymbol    = StaticScope.CreateSymbol("TupleRule");
    public OptionRuleType : WellKnownTypeSymbol    = StaticScope.CreateSymbol("OptionRule");
    public ListRuleType   : WellKnownTypeSymbol    = StaticScope.CreateSymbol("ListRule");
    public FunctionType   : WellKnownTypeSymbol    = StaticScope.CreateSymbol("Function");

    public GetSymbolsToEvaluate() : list[DeclarationSymbol]
    {
      mutable result = [];
      TryAddSymbol(ref result, AnyType);
      TryAddSymbol(ref result, OptionAstType);
      TryAddSymbol(ref result, ListAstType);
      TryAddSymbol(ref result, VoidRuleType);
      TryAddSymbol(ref result, TupleRuleType);
      TryAddSymbol(ref result, OptionRuleType);
      TryAddSymbol(ref result, ListRuleType);
      TryAddSymbol(ref result, FunctionType);
      result
    }

    private TryAddSymbol(buffer : ref list[DeclarationSymbol], symbol : DeclarationSymbol) : void
    {
      unless (symbol.IsAllPropertiesEvaluated)
        buffer ::= symbol;
    }
  }
}
