using Nitra.Declarations;

namespace Nitra.Ast
{
  public module WellKnownSymbols
  {
    public AnyType        : WellKnownTypeSymbol    = CreateSymbol("Any");
    public OptionAstType  : WellKnownTypeSymbol    = CreateSymbol("OptionAst");
    public ListAstType    : WellKnownTypeSymbol    = CreateSymbol("ListAst");
    public VoidRuleType   : RuleVoidTypeImplSymbol = CreateSymbol("VoidRule");
    public TupleRuleType  : WellKnownTypeSymbol    = CreateSymbol("TupleRule");
    public OptionRuleType : WellKnownTypeSymbol    = CreateSymbol("OptionRule");
    public ListRuleType   : WellKnownTypeSymbol    = CreateSymbol("ListRule");

    public GetSymbolsToEvaluate() : list[DeclarationSymbol]
    {
      mutable result = [];
      TryAddSymbol(ref result, AnyType);
      TryAddSymbol(ref result, OptionAstType);
      TryAddSymbol(ref result, ListAstType);
      TryAddSymbol(ref result, VoidRuleType);
      TryAddSymbol(ref result, TupleRuleType);
      TryAddSymbol(ref result, OptionRuleType);
      TryAddSymbol(ref result, ListRuleType);
      result
    }

    private TryAddSymbol(buffer : ref list[DeclarationSymbol], symbol : DeclarationSymbol) : void
    {
      unless (symbol.IsAllPropertiesEvaluated)
        buffer ::= symbol;
    }

    private CreateSymbol[TSymbol](nameStr : string) : TSymbol
      where TSymbol : DeclarationSymbol
    {
      def name = Name(SourceSnapshot.Default.File, NSpan(), nameStr);
      def decl = ExternalDeclaration.[TSymbol](name);
      decl.DefineSymbol()
    }
  }
}
