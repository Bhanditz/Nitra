using Nitra.AstUtils;
using Nitra.Runtime.Binding;
using Nitra.Utils;

using System.Drawing;

using R = Nitra.Ast.RuleExpressions;

namespace Nitra.Ast.RuleExpressions
{
  abstract ast Expression : BindableAst
  {
  stage 1:
    out FieldName : string;
  }

  ast Sequence : R.Expression  // LeftRule=RuleExpression ^ Sequence RightRules=(sm RuleExpression ^ Sequence)+
  {
    Expression.Scope  = Scope;
    Expressions.Scope = Scope;
    FieldName = Expression.FieldName;

    Expression : R.Expression;
    Expressions : R.Expression*;
  }

  abstract ast Unary : R.Expression
  {
    Expression.Scope = Scope;
    FieldName = Expression.FieldName;
    Expression : R.Expression;
  }

  ast FieldName : Unary // "!" RuleExpression ^ Predicate
  {
    FieldName = Name.Value;
    Name : string;
  }

  ast Not : Unary { } // "!" RuleExpression ^ Predicate
  ast And : Unary { } // "&" RuleExpression ^ Predicate
  ast Optional : Unary { } // RuleExpression "?"

  ast Repeat : R.Expression // RuleExpression RepeatQuantifier
  {
    Expression.Scope = Scope;
    FieldName = MakePlural(Expression.FieldName);

    Expression : R.Expression;
  }

  ast RepeatWithSeparator : R.Expression // "(" RuleExpression ";"sm Separator HangingOpt=(";"sm "?")? ")" RepeatQuantifier
  {
    Expression.Scope = Scope;
    Separator.Scope = Scope;
    FieldName = MakePlural(Expression.FieldName);

    Expression : R.Expression;
    Separator : R.Expression;
  }

  ast String : R.Expression // CharLiteral
  {
    FieldName = MakeLiteralName(Str.ValueOrDefault, Scope);
    Str : string;
  }

  ast Call : R.Expression   // QualifiedReference BindingPower=(sm "^" sm "+"? PrecedenceReference2)?
  {
    RuleReference.Scope = Scope;
    FieldName = RuleReference.Ref.Symbol.Name;

    RuleReference : QualifiedReference;
  }
}
