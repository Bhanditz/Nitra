using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public sealed class TupleRuleTypeScope : RuleTypeScope
  {
    private _type : RuleTupleTypeSymbol;

    public this(type : RuleTupleTypeSymbol)
    {
      _type = type;
    }

    protected override CreateMembers() : list[DeclarationSymbol]
    {
      unless (_type.IsElemTypesEvaluated)
        return [];

      def context = DependentPropertyEvalContext();
      mutable result = [];
      mutable index  = 0;
      foreach (t in _type.ElemTypes)
      {
        ++index;
        match (t.FirstDeclarationOrDefault)
        {
          | null with (file = SourceSnapshot.Default.File, span = NSpan())
          | d    with (file = d.File,                      span = d.Span) =>
            def symbol = ExternalDeclaration.[RuleFieldSymbol](file, span, "Item" + index).DefineSymbol();
            symbol.Type = t;
            symbol.EvalProperties(context);
            result ::= symbol;
        }
      }
      result
    }

    public override Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(_type, writer);
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      def type = metadataReader.ReadObject(reader);
      TupleRuleTypeScope(type)
    }
  }
}
