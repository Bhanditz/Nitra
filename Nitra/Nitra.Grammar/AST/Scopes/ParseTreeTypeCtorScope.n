using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public sealed class ParseTreeTypeCtorScope : Scope
  {
    public static Instance : ParseTreeTypeCtorScope = ParseTreeTypeCtorScope();

    private this()
    {
    }

    // TODO: add type subst
    public override AllSymbols : Seq[DeclarationSymbol] { get { [] } } 

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      match (TryCreateTypeCtor(reference))
      {
        | s is TSymbol => results.Add(s)
        | _ => ()
      }
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      IgnoreParams();
      Enumerable.Empty()
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      IgnoreParams();
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], _edges : List[string]) : void
    {
      def id            = nodeToIdMap.GetObjectId(this);

      nodes.Add($<#Obj_$id [label="FilteringScope $id"]#>);
    }

    private TryCreateTypeCtor(reference : Reference) : DeclarationSymbol
    {
      match (reference.Text)
      {
        | "Some" =>
          def context = DependentPropertyEvalContext();
          def typeVar = AstUtils.CreateRuleTypeVar(context);
          AstUtils.CreateFunctionType(reference, array[typeVar], AstUtils.InitOption(context, typeVar), context)

        | "None" =>
          def context = DependentPropertyEvalContext();
          def typeVar = AstUtils.CreateRuleTypeVar(context);
          AstUtils.CreateFunctionType(reference, array[], AstUtils.InitOption(context, typeVar), context)

        | "Cons" =>
          def context = DependentPropertyEvalContext();
          def typeVar = AstUtils.CreateRuleTypeVar(context);
          def lst     = AstUtils.InitList(context, typeVar);
          AstUtils.CreateFunctionType(reference, array[typeVar, lst], lst, context)

        | "Nil"  =>
          def context = DependentPropertyEvalContext();
          def typeVar = AstUtils.CreateRuleTypeVar(context);
          AstUtils.CreateFunctionType(reference, array[], AstUtils.InitList(context, typeVar), context)

        | _      => null
      }
    }

    public override ToString() : string
    {
      "pattern scope"
    }

    public override Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      IgnoreParams();
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      IgnoreParams();
      Instance
    }
  }
}
