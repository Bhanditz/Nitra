using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public abstract class RuleTypeScope : Scope
  {
    private mutable _members  : list[DeclarationSymbol];

    protected abstract CreateMembers() : list[DeclarationSymbol];

    Init() : void
    {
      when (_members : object == null)
        _members = CreateMembers();
    }
    
    // TODO: add type subst
    public override AllSymbols : Seq[DeclarationSymbol]
    {
      get
      {
        Init();
        _members
      }
    } 
    
    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      Init();

      foreach (m is TSymbol in _members)
        when (m.IsNameValid && StringComparer.Ordinal.Equals(m.Name, reference.Text)) // TODO: add NameId to DeclarationSymbol
          results.Add(m);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      Init();

      if (string.IsNullOrEmpty(prefix))
        _members
      else
        _members.Where(m => m.Name.StartsWith(prefix))
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      Init();

      foreach (m is TSymbol in _members)
        when (predicate(m))
          results.Add(m);
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
    {
      Init();
      
      def id            = nodeToIdMap.GetObjectId(this);

      nodes.Add($<#Obj_$id [label="RuleTypeScope"]#>);
      foreach (symbol in _members)
      {
        def symbolId = nodeToIdMap.GetObjectId(symbol);
        def symbolName = symbol.InitialName;
        nodes.Add($<#Sym_$symbolId [label="$symbolName", shape=box, style=filled, color=lightskyblue]#>);
        edges.Add($<#Obj_$id -> Sym_$symbolId#>);
      }
    }

    public override ToString() : string
    {
      "rule"
    }
  }
}
