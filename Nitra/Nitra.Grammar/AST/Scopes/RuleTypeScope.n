using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public abstract class RuleTypeScope : Scope
  {
    private mutable _members  : list[DeclarationSymbol];

    protected abstract CreateMembers() : list[DeclarationSymbol];

    Init() : void
    {
      when (_members : object == null)
        _members = CreateMembers();
    }
    
    // TODO: add type subst
    public override AllSymbols : Seq[DeclarationSymbol]
    {
      get
      {
        Init();
        _members
      }
    } 

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      def id = reference.Id;
      
      when (id <= StringIndex.InvalidId)
        return BindResult.Nil();

      Init();

      def results = LightList();
      
      foreach (m is TSymbol when m.NameId == id in _members)
        results.Add(m);
          
      results.ToBindResult()
    }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      def results = LightList();
      
      foreach (m is TSymbol when isMatch(m) in _members)
        results.Add(m);
          
      results.ToBindResult()
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
    {
      Init();
      
      def id            = nodeToIdMap.GetObjectId(this);

      nodes.Add($<#Obj_$id [label="RuleTypeScope"]#>);
      foreach (symbol in _members)
      {
        def symbolId = nodeToIdMap.GetObjectId(symbol);
        def symbolName = symbol.InitialName;
        nodes.Add($<#Sym_$symbolId [label="$symbolName", shape=box, style=filled, color=lightskyblue]#>);
        edges.Add($<#Obj_$id -> Sym_$symbolId#>);
      }
    }

    public override ToString() : string
    {
      "rule"
    }
  }
}
