using Nitra.Runtime.Binding;
using Nitra.AstUtils;

using Nemerle.Collections;

namespace Nitra.Ast
{
  declaration SyntaxModule : NamespaceMemberDeclaration
  {
    symbol
    {
      Kind      = "syntax module";
      SpanClass = NitraLangLanguage.TypeSpanClass; // NitraLangLanguage.SyntaxModuleSpanClass;
      Scope     = MemberTable;

      in Literals : Map[string, string];
      out MemberTable : TableScope = TableScope(ToString());
    }

    Usings.LiteralsIn        = Map();
    Usings.CurrentScope      = Scope;
    Usings.OpeningIn         = [];
    Usings.UsingAliasesScope = TableScope("aliases");

    Members.LiteralsIn = Usings.LiteralsOut;
    Members.Parent = Symbol;
    //Members.Scope = Scope.HideWith(Symbol.MemberTable);
    Members.Scope = MakeMembersScope(Scope, Usings.OpeningOut, Usings.UsingAliasesScope)
                    .HideWith(Symbol.MemberTable);  // TODO: need check
    Symbol.Literals = Members.LiteralsOut;

    Usings  : SyntaxModuleUsingDirective*;
    Members : SyntaxModuleMember*;
  }
}
