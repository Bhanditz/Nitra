using DotNet;

using Nemerle.Collections;

using Nitra.AstUtils;
using Nitra.Runtime.Binding;
using Nitra.Utils;

using System.Drawing;

using R = Nitra.Ast.RuleExpressions;

namespace Nitra.Ast.RuleExpressions
{
  abstract ast Expression : BindableAst
  {
    in Literals : Map[string, string];
    out FieldName : ParsedValue[string * bool];
  stage 1:
    out Type : RuleTypeSymbol;
  }

  ast Sequence : R.Expression  // LeftRule=RuleExpression ^ Sequence RightRules=(sm RuleExpression ^ Sequence)+
  {
    Expression.Literals  = Literals;
    Expressions.Literals = Literals;
    Expression.Scope  = Scope;
    Expressions.Scope = Scope;
    FieldName = Expression.FieldName;
    Type      = InitTuple(context, Expression.Type, Expressions.Type);

    Expression : R.Expression;
    Expressions : R.Expression*;
  }

  abstract ast Unary : R.Expression
  {
    Expression.Literals = Literals;
    Expression.Scope    = Scope;
    FieldName           = Expression.FieldName;
    Type                = Expression.Type;
    Expression : R.Expression;
  }

  ast FieldName : Unary // "!" RuleExpression ^ Predicate
  {
    FieldName = ParsedValue(Name.Span, (Name.Value, true));
    Name : string;
  }

  ast Not : Unary { Type = context.GetRuleVoidType(); } // "!" RuleExpression ^ Predicate
  ast And : Unary { Type = context.GetRuleVoidType(); } // "&" RuleExpression ^ Predicate
  ast Optional : Unary { Type = InitOption(context, Expression.Type); } // RuleExpression "?"

  ast Repeat : R.Expression // RuleExpression RepeatQuantifier
  {
    Expression.Literals = Literals;
    Expression.Scope    = Scope;
    FieldName           = MakePlural(Expression.FieldName);
    Type                = InitList(context, Expression.Type);

    Expression : R.Expression;
  }

  ast RepeatWithSeparator : R.Expression // "(" RuleExpression ";"sm Separator HangingOpt=(";"sm "?")? ")" RepeatQuantifier
  {
    Expression.Literals = Literals;
    Expression.Scope = Scope;
    Separator.Scope = Scope;
    FieldName = MakePlural(Expression.FieldName);
    Type  = InitTuple(context, InitList(context, Expression.Type), InitList(context, Separator.Type));

    Expression : R.Expression;
    Separator : R.Expression;
  }

  ast String : R.Expression // CharLiteral
  {
    FieldName = NMakeLiteralName(Str, Literals);
    Type      = context.Init(RuleLiteralTypeSymbol());

    Str : string;
  }

  ast Call : R.Expression   // QualifiedReference BindingPower=(sm "^" sm "+"? PrecedenceReference2)?
  {
  stage 1:
    out TypeRef : Ref[RuleTypeSymbol];

    RuleReference.Scope = Scope;
    FieldName           = AstUtils.MakeCallFieldName(RuleReference.FieldNameId);
    TypeRef             = RuleReference.Ref.Resolve();
    Type                = TypeRef.Symbol;

    RuleReference : NitraQualifiedReference;
  }
}
