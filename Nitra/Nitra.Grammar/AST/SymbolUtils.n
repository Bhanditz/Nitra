using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime.Binding;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  module SymbolUtils
  {
    public TryGetLiterals(reference : Ref[ISymbol2], literals : Map[string, string]) : Map[string, string]
    {
      when (reference.IsSymbolEvaluated)
      when (reference.Symbol is SyntaxModuleSymbol as m)
        return literals.ReplaceRange(m.Literals);
        
      literals
    }
    
    public PrependScopeIfResolved(reference : Ref[ISymbol2], scopes : list[Scope]) : list[Scope]
    {
      if (reference.IsSymbolEvaluated)
        reference.Symbol.Scope :: scopes
      else
        scopes
    }

    public IsSameIdentity(typeParametersCount : int, candidate : Declaration) : bool
    {
      match (candidate)
      {
        //| CSharp.GenericType as t => t.TypeParameterAliases.Count == typeParametersCount
        //| CSharp.Type     
        | Namespace => typeParametersCount == 0
        | _         => false
      }
    }

    public MakeNamespaceFullName(parentFullName : string, name : string) : string
    {
      if (string.IsNullOrEmpty(parentFullName))
        name
      else
        parentFullName + "." + name
    }
  }
}
