using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime.Binding;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  module SymbolUtils
  {
    public PrependScopeIfResolved(reference : Ref[ISymbol2], scopes : list[Scope]) : list[Scope]
    {
      if (reference.IsSymbolEvaluated)
        reference.Symbol.Scope :: scopes
      else
        scopes
    }

    public IsSameIdentity(typeParametersCount : int, candidate : Declaration) : bool
    {
      match (candidate)
      {
        //| CSharp.GenericType as t => t.TypeParameterAliases.Count == typeParametersCount
        //| CSharp.Type     
        | Namespace => typeParametersCount == 0
        | _         => false
      }
    }

    public MakeFullName(node : ISymbol2) : string
    {
      def loop(node : ISymbol2, sb : Text.StringBuilder) : bool
      {
        match (node)
        {
          | NamespaceMemberDeclarationSymbol as y when y.Parent == null => return false; // root
        //| TypeMemberSymbol                 as x with (parent = x.Parent : ISymbol2)
        //| EnumMemberSymbol                 as e with (parent = e.Parent : ISymbol2)
          | NamespaceMemberDeclarationSymbol as y with (parent = y.Parent : ISymbol2) =>
            when (loop(parent, sb))
              _ = sb.Append('.');

          | _ => ()
        }

        _ = sb.Append(node.Name);
        true
      }
        
      def sb = Text.StringBuilder();
      _ = loop(node, sb);
      sb.ToString()
    }
  }
}
