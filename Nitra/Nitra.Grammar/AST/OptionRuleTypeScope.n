using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public sealed class OptionRuleTypeScope : RuleTypeScope
  {
    public this(itemType : RuleTypeSymbol)
    {
      base(itemType);
    }

    protected override TryCreateMapSyntaxSymbol(itemMapSyntax : MapSyntaxSymbol, context : DependentPropertyEvalContext) : MapSyntaxSymbol
    {
      match (itemMapSyntax.ReturnType)
      {
        | AstSymbol as t =>
          def decl            = ExternalDeclaration.[MapSyntaxSymbol](SourceSnapshot.Default.File, NSpan(), itemMapSyntax.Name);
          def optionMapSyntax = decl.DefineSymbol();
          optionMapSyntax.Parameters = itemMapSyntax.Parameters;
          optionMapSyntax.ReturnType = AstUtils.CreateOptionAstType(decl, t, context);
          optionMapSyntax.EvalProperties(context);
          optionMapSyntax

        | _ => null
      }
    }

    public override Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(_itemType, writer);
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      def itemType = metadataReader.ReadObject(reader);
      OptionRuleTypeScope(itemType)
    }
  }
}
