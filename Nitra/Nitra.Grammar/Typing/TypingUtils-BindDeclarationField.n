using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindDeclarationField(declarationSymbol : DeclarationSymbol, fieldName : G.Identifier) : SymbolRef[NitraFieldSymbol]
    {
      def bind(symbol, name, candidates, visited) : list[NitraFieldSymbol]
      {
        if (visited.Add(symbol))
        {
          mutable result = candidates + symbol.Node.BindMany.[NitraFieldSymbol](name);
          foreach (baseSymbol in symbol.BaseDeclarations)
            result = bind(baseSymbol, name, result, visited);
          result
        }
        else
          candidates
      }
      def candidates    = bind(declarationSymbol, fieldName.Location, [], HashSet());
      def bindingResult = BindingUtils.MakeBindingResult(fieldName.Location, candidates);
      Utils.MakeSymbolRefWithMessages(bindingResult);
    }
  }
}
