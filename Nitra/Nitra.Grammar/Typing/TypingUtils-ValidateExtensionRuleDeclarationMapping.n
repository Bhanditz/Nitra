using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal ValidateExtensionRuleDeclarationMapping(ruleSymbol : ParsedExtensionRuleSymbol, compilationMessages : ICompilerMessages) : void
    {
      when (ruleSymbol.BaseRule is SymbolRef.Some(baseRuleSymbol))
      {
        if (baseRuleSymbol.Declaration is SymbolRef.Some(baseDeclarationSymbol))
        {
          def baseDeclarationSymbolName = baseDeclarationSymbol.FullName;
          if (ruleSymbol.Declaration is SymbolRef.Some(declarationSymbol))
          {
            match (declarationSymbol)
            {
              | ExtensibleDeclarationSymbol => ()
              | SimpleDeclarationSymbol as ruleDeclarationSymbol
              | ExtensionDeclarationSymbol(BaseDeclaration = SymbolRef.Some(ruleDeclarationSymbol)) =>
                when (baseDeclarationSymbol != ruleDeclarationSymbol)
                  compilationMessages.Error(ruleSymbol.Declaration.Location, $"Declaration must be of type '$baseDeclarationSymbolName'.", -1);

              | _ =>
                def declarationSymbolName = declarationSymbol.FullName;
                compilationMessages.Error(ruleSymbol.Declaration.Location, $"Invalid declaration '$declarationSymbolName'.", -1);
            }
          }
          else
            compilationMessages.Error(ruleSymbol.FirstLocation, $"Declaration mapping of type '$baseDeclarationSymbolName' is required.", -1);
        }
        else
          when (ruleSymbol.Declaration.IsSome)
          {
            def baseRuleSymbolName = baseRuleSymbol.FullName;
            compilationMessages.Error(ruleSymbol.Declaration.Location, $"Base rule '$baseRuleSymbolName' does not have declaration mapping.", -1);
          }
      }
    }
  }
}
