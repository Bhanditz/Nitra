using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindAstPropertyProjectionSource(declaringAst : AstSymbol, name : G.Identifier, context : Context) : SimplePropertySymbol * AstSymbol
    {
      match (TypingUtils.BindAstProperty(declaringAst, name, context))
      {
        | SymbolRef.Some(SimplePropertySymbol(Type = OptionList(Qualified as name)) as astProperty)
        | SymbolRef.Some(SimplePropertySymbol(Type =       List(Qualified as name)) as astProperty) =>
          if (context.Bind.[AstSymbol](name) is SymbolRef.Some(baseType))
            (astProperty, baseType)
          else
            (astProperty, null)

        | SymbolRef.Some(SimplePropertySymbol(Type = t) as astProperty) as loc =>
          context.Error(loc, $"Property '$(astProperty.Name)' has invalid type '$t'. Only list of declarations can be decomposed.");
          (astProperty, null)

        | SymbolRef.Some(_) as loc =>
          context.Error(loc, "Only simple declaration property is allowed in 'decompose' block.");
          (null, null)

        | SymbolRef.None => (null, null)
      }
    }
  }
}
