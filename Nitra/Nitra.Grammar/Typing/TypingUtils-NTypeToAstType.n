using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal NTypeToAstType(t : NType, context : Context) : AstType
    {
      match (t)
      {
        | Qualified as name =>
          if (context.Bind.[AstSymbol](name) is SymbolRef.Some(astSymbol))
            AstType.Ast(t.Location, astSymbol)
          else
            AstType.Void(t.Location)

        | OptionList(Qualified as name) =>
          if (context.Bind.[AstSymbol](name) is SymbolRef.Some(astSymbol))
            AstType.OptionList(t.Location, astSymbol)
          else
            AstType.Void(t.Location)

        | List(Qualified as name) =>
          if (context.Bind.[AstSymbol](name) is SymbolRef.Some(astSymbol))
            AstType.List(t.Location, astSymbol)
          else
            AstType.Void(t.Location)

        | Option(Qualified as name) =>
          if (context.Bind.[AstSymbol](name) is SymbolRef.Some(astSymbol))
            AstType.Option(t.Location, astSymbol)
          else
            AstType.Void(t.Location)

        | _ =>
          context.Error(t, $"Type '$t' is not valid ast type");
          AstType.Void(t.Location)
      }
    }
  }
}
