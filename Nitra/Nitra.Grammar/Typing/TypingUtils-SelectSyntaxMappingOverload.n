using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal SelectSyntaxMappingOverload(contextRuleSymbol : SyntaxRuleSymbol, syntaxMappings : list[SyntaxMappingSymbol], arguments : SCG.IList[G.MapSyntaxExpression], returnType : AstType) : ValueOption[SyntaxMappingSymbol]
    {
      def checkArgumentTypes(index, parms)
      {
        if (parms is current :: other)
          arguments[index].ReturnsType(contextRuleSymbol, current.Type) && checkArgumentTypes(index + 1, other)
        else
          true
      }

      def candidates = LightList();
      foreach (syntaxMapping in syntaxMappings)
      {
        when (syntaxMapping.ReturnType.IsSubtypeOf(returnType))
        when (syntaxMapping.Parameters.Length == arguments.Count)
        when (checkArgumentTypes(0, syntaxMapping.Parameters))
          candidates.Add(syntaxMapping)
      }

      match (candidates.Count)
      {
        | 0 => VNone()
        | 1 => VSome(candidates.FirstItem)
        | _ => VNone()
      }
    }
  }
}
