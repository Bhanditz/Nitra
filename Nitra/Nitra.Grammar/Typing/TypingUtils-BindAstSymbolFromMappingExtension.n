using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;


namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindAstSymbolFromMappingExtension(loc : Location, baseAst : AstSymbol, qid : list[Location], context : Context) : SymbolRef[AstSymbol]
    {
      BindAstSymbolFromMappingExtension(loc, baseAst, qid, context, context)
    }

    internal BindAstSymbolFromMappingExtension(qid : G.QualifiedIdentifier, baseAst : AstSymbol, context : Context, compilerMessages : ICompilerMessages) : SymbolRef[AstSymbol]
    {
      BindAstSymbolFromMappingExtension(qid.Location, baseAst, qid.CalcLocations(), context, compilerMessages)
    }

    internal BindAstSymbolFromMappingExtension(loc : Location, baseAst : AstSymbol, qid : list[Location], context : Context, compilerMessages : ICompilerMessages) : SymbolRef[AstSymbol]
    {
      def candidates    = baseAst.Node.BindMany(qid);
      def bindingResult = 
        if (candidates is [])
          context.BindMany(qid)
        else
          BindingUtils.MakeBindingResult(loc, candidates);
      Utils.MakeSymbolRefWithMessages(bindingResult, compilerMessages)
    }
  }
}
