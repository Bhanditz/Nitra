using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindRuleField(ruleSymbol : SyntaxRuleSymbol, qid : G.QualifiedIdentifier, variables : SCG.Dictionary[string, ParseTreePattern.Var], compilationMessages : ICompilerMessages) : option[ParseTreePath]
    {
      def eq(a : string, b : string)
      {
        String.Equals(a, b, StringComparison.InvariantCulture)
      }

      def bind(qualifier : ParseTreePath, name : LocatedName, tail : list[LocatedName]) : option[ParseTreePath]
      {
        def failure() : option[ParseTreePath]
        {
          compilationMessages.Error(name.Location, $"Unbound name '$(name.Id)'");
          None()
        }

        def success(ruleType : RuleType) : option[ParseTreePath]
        {
          def path = ParseTreePath.Member(qualifier.Location + name.Location, qualifier, name, ruleType);
          bindTail(path, tail)
        }

        match (qualifier.Type)
        {
          | Ref(symbol) =>
            def loop(rules : list[Rule])
            {
              | [] => failure()
              | rule :: _ when eq(name.Id, rule.FieldName) => success(rule.Type)
              | _ :: otherRules => loop(otherRules)
            }
            loop(symbol.NonVoidSubRules)

          | Tuple(members) =>
            def loop(members, index)
            {
              match (members)
              {
                | [] => failure()
                | member :: _ when eq(name.Id, "Item" + index.ToString()) => success(member)
                | _ :: otherMembers => loop(otherMembers, index + 1)
              }
            }
            loop(members, 1)

          | _ => failure()
        }
      }
      and bindTail(path : ParseTreePath, tail : list[LocatedName]) : option[ParseTreePath]
      {
        match (tail)
        {
          | [] => Some(path)
          | nextName :: nextTail => bind(path, nextName, nextTail)
        }
      }

      match (qid.Identifiers())
      {
        | [] =>
          compilationMessages.Error(qid.Location, "No rule field name speciefied");
          None()

        | name :: tail =>
          mutable variable;
          if (variables.TryGetValue(name.Id, out variable))
          {
            def path = ParseTreePath.Variable(name.Location, name, variable.Type);
            bindTail(path, tail);
          }
          else
          {
            def thisLoc = qid.Location.FromStart();
            def path    = ParseTreePath.This(thisLoc, ruleSymbol);
            bind(path, name, tail)
          }
      }
    }
  }
}
