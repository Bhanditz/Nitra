using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal CheckRequiredAstProperties(astSymbol : AstSymbol, mappingFields : Seq[SyntaxMappingField], errorLoc : Location, compilerMessages : ICompilerMessages) : void
    {
      def initializedProperties = Dictionary();
      foreach (mappingField in mappingFields)
      {
        def astProperty  = mappingField.Property;
        def propertyName = astProperty.Name;
        if (!astProperty.IsAssignableFromInitialization)
          compilerMessages.Error(mappingField, $"Field '$propertyName' is not assignable.");
        else if (initializedProperties.ContainsKey(astProperty))
        {
          using (messages = compilerMessages.RootError(mappingField, $"Duplicated assignment of field '$propertyName'."))
            messages.Hint(initializedProperties[astProperty], "First assigned here.");
        }
        else
          initializedProperties.Add(astProperty, mappingField);
      }

      foreach (requiredField when requiredField.IsAssignableFromInitialization in astSymbol.AllProperties)
      {
        def fieldName = requiredField.Name;
        unless (initializedProperties.ContainsKey(requiredField))
          compilerMessages.Error(errorLoc, $"Assignment of field '$fieldName' is required.");
      }
    }
  }
}
