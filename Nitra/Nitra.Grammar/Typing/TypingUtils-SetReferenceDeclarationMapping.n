using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public SetReferenceDeclarationMapping(project : NitraProject) : void
    {
      when (project.RootNamespace.Node.BindMany.[DeclarationSymbol](["Nitra", "Runtime", "Binding", "Reference"]) is [referenceSymbol])
      {
        mutable idPropertyRef;

        foreach (symbol when symbol.AssemblyId == AssemblyIds.CurrentAssembly && symbol.Options.IsIdentifier in project.RootNamespace.Node.GetDescendants.[SyntaxRuleSymbol]())
        {
          match (symbol)
          {
            | SimpleRuleSymbol
            | ExtensionRuleSymbol =>
              def exisingBody = symbol.GetDeclarationMappingBody();
              when (exisingBody == null)
              {
                when (idPropertyRef : object == null)
                {
                  def idPropertyCandidates = referenceSymbol.Node.BindMany.[DeclarationPropertySymbol]("Id");
                  def bindingResult        = BindingUtils.MakeBindingResult(symbol.FirstLocation, idPropertyCandidates);
                  idPropertyRef            = Utils.MakeSymbolRefWithMessages(bindingResult, project);
                }

                def bodyLocation         = symbol.FirstLocation;
                def declarationSymbolRef = SymbolRef.Some(symbol.FirstLocation, true, referenceSymbol);
                def idPropertyMapping    = DeclarationMappingField.Inline(symbol.FirstLocation, idPropertyRef, Util.locate(symbol.FirstLocation.NLocation(), <[ Nitra.Runtime.Binding.StringIndex.GetId(this.GetText()) ]>));
                def newBody              = DeclarationMappingBody.PerField(bodyLocation, declarationSymbolRef, [idPropertyMapping]);
                symbol.SetDeclarationMappingBody(newBody)
              }

            | _ => ()
          }
        }
      }
    }
  }
}
