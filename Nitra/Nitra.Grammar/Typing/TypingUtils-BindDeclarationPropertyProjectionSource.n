using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindDeclarationPropertyProjectionSource(declaringDeclaration : DeclarationSymbol, name : G.Identifier, context : Context) : SimpleDeclarationPropertySymbol * DeclarationSymbol
    {
      match (TypingUtils.BindDeclarationProperty(declaringDeclaration, name, context))
      {
        | SymbolRef.Some(SimpleDeclarationPropertySymbol(Type = OptionList(Qualified as name)) as declarationProperty)
        | SymbolRef.Some(SimpleDeclarationPropertySymbol(Type =       List(Qualified as name)) as declarationProperty) =>
          if (context.Bind.[DeclarationSymbol](name) is SymbolRef.Some(baseType))
            (declarationProperty, baseType)
          else
            (declarationProperty, null)

        | SymbolRef.Some(SimpleDeclarationPropertySymbol(Type = t) as declarationProperty) as loc =>
          context.Error(loc, $"Property '$(declarationProperty.Name)' has invalid type '$t'. Only list of declarations can be decomposed.");
          (declarationProperty, null)

        | SymbolRef.Some(_) as loc =>
          context.Error(loc, "Only simple declaration property is allowed in 'decompose' block.");
          (null, null)

        | SymbolRef.None => (null, null)
      }
    }
  }
}
