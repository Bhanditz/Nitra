using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal MakeSyntaxMappingType(context : Context, sourceRuleType : RuleType, targetAstType : AstType, errorLoc : Location) : ValueOption[SyntaxMappingType]
    {
      def filterNonKeywords(members : list[RuleType], index : int) : list[int * RuleType]
      {
        match (members)
        {
          | [] => []
          | RuleType.Chars(Keyword = Some) :: rest => filterNonKeywords(rest, index + 1)
          | x :: rest => (index, x) :: filterNonKeywords(rest, index + 1)
        }
      }

      def incompartibleTypesError(sourceAstSymbol : AstSymbol, targetAstSymbol : AstSymbol) : ValueOption[SyntaxMappingType]
      {
        context.Error(errorLoc, $"Declaration '$(sourceAstSymbol.FullName)' is not subtype of declaration '$(targetAstSymbol.FullName)'");
        VNone()
      }

      def genericError() : ValueOption[SyntaxMappingType]
      {
        context.Error(errorLoc, $"Cannot map '$(sourceRuleType)' to '$(targetAstType)'");
        VNone()
      }

      def makeTupleAccess(ruleType : RuleType) : RuleType * list[int]
      {
        if (ruleType is Tuple(members))
          if (filterNonKeywords(members, 1) is [(index, nonKeyword)])
          {
            def (result, access) = makeTupleAccess(nonKeyword);
            (result, index :: access)
          }
          else (ruleType, [])
        else (ruleType, [])
      }

      def (ruleType, tupleAccess) = makeTupleAccess(sourceRuleType);
      match (ruleType, targetAstType)
      {
        | (List(itemType),       List(targetAstSymbol))
        | (List(itemType), OptionList(targetAstSymbol))=>
          match (makeTupleAccess(itemType))
          {
            | (Ref(SyntaxRuleSymbol(Ast = AstType.Ast(sourceAstSymbol))), itemTupleAccess) =>
              if (sourceAstSymbol.IsSubtypeOf(targetAstSymbol))
                VSome(SyntaxMappingType.CreateList(ruleType, tupleAccess, targetAstSymbol, itemTupleAccess))
              else
                incompartibleTypesError(sourceAstSymbol, targetAstSymbol)

            | _ => genericError()
          }

        | (Option(valueType), Option(targetAstSymbol)) => 
          match (makeTupleAccess(valueType))
          {
            | (Ref(SyntaxRuleSymbol(Ast = AstType.Ast(sourceAstSymbol))), valueTupleAccess) =>
              if (sourceAstSymbol.IsSubtypeOf(targetAstSymbol))
                VSome(SyntaxMappingType.CreateOption(ruleType, tupleAccess, targetAstSymbol, valueTupleAccess))
              else
                incompartibleTypesError(sourceAstSymbol, targetAstSymbol)

            | _ => genericError()
          }

        | (Ref(SyntaxRuleSymbol(Ast = sourceAstType)), _) =>
          if (sourceAstType.IsSubtypeOf(targetAstType))
            VSome(SyntaxMappingType.CallGetAst(ruleType, tupleAccess, sourceAstType))
          else
            genericError()

        | _ => genericError()
      }
    }
  }
}
