using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public ValidateExtensionRuleAstMapping(project : NitraProject) : void
    {
      def checkConversion(astType : AstType, conversion : SyntaxMappingType) : bool
      {
        | (_, Tuple(_, item)) => checkConversion(astType, item)
        | (Ast(baseSymbol),        Ref(concreteSymbol))
        | (Option(baseSymbol),     Option(Ref(concreteSymbol), _))
        | (List(baseSymbol),       List(Ref(concreteSymbol), _))
        | (OptionList(baseSymbol), List(Ref(concreteSymbol), _)) => concreteSymbol.IsSubtypeOf(baseSymbol)
        | _ => false
      }

      def checkExpression(astType : AstType, expr : SyntaxMappingExpr) : void
      {
        | (_, Code) => ()
        | (_, Conversion(_, conversion)) when checkConversion(astType, conversion) => ()
        | (_, Match(_, cases)) => foreach (case in cases) checkExpression(astType, case.Expr)
        | (Ast(baseSymbol),        AstCtor(concreteSymbol, _) as expr)
        | (Option(baseSymbol),     OptionCtor(concreteSymbol, _) as expr)
        | (List(baseSymbol),       ListCtor(concreteSymbol, _) as expr)
        | (OptionList(baseSymbol), ListCtor(concreteSymbol, _) as expr) =>
          unless (concreteSymbol.IsSubtypeOf(baseSymbol))
            project.Error(expr, $"Declaration '$(concreteSymbol.FullName)' is not subtype of declaration '$(baseSymbol.FullName)'.");

        | (baseAst, expr) => project.Error(expr, $"Declaration mapping of type '$baseAst' is required.");
      }

      foreach (ruleSymbol in project.RootNamespace.Node.GetDescendants.[ParsedExtensionRuleSymbol]())
      {
        when (ruleSymbol.BaseRule is SymbolRef.Some(baseRuleSymbol))
        {
          match (baseRuleSymbol.Ast, ruleSymbol.GetSyntaxMappingExpr())
          {
            | (Void,    null) => ()
            | (Void,    expr) => project.Error(expr, $"Base rule '$(baseRuleSymbol.FullName)' does not have declaration mapping.")
            | (baseAst, null) => project.Error(ruleSymbol.FirstLocation, $"Declaration mapping of type '$baseAst' is required.")
            | (baseAst, expr) => checkExpression(baseAst, expr)
          }
        }
      }
    }
  }
}
