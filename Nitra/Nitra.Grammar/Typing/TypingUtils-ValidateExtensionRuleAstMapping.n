using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal ValidateExtensionRuleAstMapping(ruleSymbol : ParsedExtensionRuleSymbol, compilerMessages : ICompilerMessages) : void
    {
      when (ruleSymbol.BaseRule is SymbolRef.Some(baseRuleSymbol))
      {
        match (baseRuleSymbol.Ast, ruleSymbol.Ast)
        {
          | (Void,    Void)    => ()
          | (Void,    ruleAst) => compilerMessages.Error(ruleAst, $"Base rule '$(baseRuleSymbol.FullName)' does not have declaration mapping.");
          | (baseAst, Void)    => compilerMessages.Error(ruleSymbol.FirstLocation, $"Declaration mapping of type '$baseAst' is required.");
          | (baseAst, ruleAst) =>
            unless (ruleAst.IsSubtypeOf(baseAst))
              compilerMessages.Error(ruleAst, $"Declaration '$ruleAst' is not subtype of declaration '$baseAst'.");
        }
      }
    }
  }
}
