using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public ValidateExtensionRuleAstMapping(project : NitraProject) : void
    {
      foreach (ruleSymbol in project.RootNamespace.Node.GetDescendants.[ParsedExtensionRuleSymbol]())
      {
        when (ruleSymbol.BaseRule is SymbolRef.Some(baseRuleSymbol))
        {
          match (baseRuleSymbol.Ast, ruleSymbol.ExtensionAst)
          {
            | (Void,    Void)   => ()
            | (Void,    extAst) => project.Error(extAst, $"Base rule '$(baseRuleSymbol.FullName)' does not have declaration mapping.")
            | (baseAst, Void)   => project.Error(ruleSymbol.FirstLocation, $"Declaration mapping of type '$baseAst' is required.")
            | (baseAst, extAst) =>
              unless (extAst.IsSubtypeOf(baseAst))
                project.Error(extAst, $"AST '$extAst' is not subtype of AST '$baseAst'.")
          }
        }
      }
    }
  }
}
