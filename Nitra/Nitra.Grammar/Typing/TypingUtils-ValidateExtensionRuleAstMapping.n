using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal ValidateExtensionRuleAstMapping(ruleSymbol : ParsedExtensionRuleSymbol, compilationMessages : ICompilerMessages) : void
    {
      when (ruleSymbol.BaseRule is SymbolRef.Some(baseRuleSymbol))
      {
        if (baseRuleSymbol.Ast is SymbolRef.Some(baseAstSymbol))
        {
          def baseAstSymbolName = baseAstSymbol.FullName;
          if (ruleSymbol.Ast is SymbolRef.Some(astSymbol))
          {
            match (astSymbol)
            {
              | ExtensibleAstSymbol => ()
              | SimpleAstSymbol as ruleAstSymbol
              | ExtensionAstSymbol(BaseAst = SymbolRef.Some(ruleAstSymbol)) =>
                when (baseAstSymbol != ruleAstSymbol)
                  compilationMessages.Error(ruleSymbol.Ast, $"Declaration must be of type '$baseAstSymbolName'.");

              | _ =>
                def astSymbolName = astSymbol.FullName;
                compilationMessages.Error(ruleSymbol.Ast, $"Invalid declaration '$astSymbolName'.");
            }
          }
          else
            compilationMessages.Error(ruleSymbol.FirstLocation, $"Declaration mapping of type '$baseAstSymbolName' is required.");
        }
        else
          when (ruleSymbol.Ast.IsSome)
          {
            def baseRuleSymbolName = baseRuleSymbol.FullName;
            compilationMessages.Error(ruleSymbol.Ast, $"Base rule '$baseRuleSymbolName' does not have declaration mapping.");
          }
      }
    }
  }
}
