using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal ValidateExtensionRuleAstMapping(ruleSymbol : ParsedExtensionRuleSymbol, compilerMessages : ICompilerMessages) : void
    {
      when (ruleSymbol.BaseRule is SymbolRef.Some(baseRuleSymbol))
      {
        if (baseRuleSymbol.Ast is SymbolRef.Some(baseAstSymbol))
        {
          when (ruleSymbol.Ast is SymbolRef.Some(astSymbol) when !astSymbol.IsSubtypeOf(baseAstSymbol))
            compilerMessages.Error(ruleSymbol.Ast, $"Declaration '$(astSymbol.FullName)' is not subtype of declaration '$(baseAstSymbol.FullName)'.");
        }
        else when (ruleSymbol.Ast.IsSome)
          compilerMessages.Error(ruleSymbol.Ast, $"Base rule '$(baseRuleSymbol.FullName)' does not have declaration mapping.");
      }
    }
  }
}
