using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal CheckRequiredDeclarationProperties(declarationSymbol : DeclarationSymbol, initializedProperties : Dictionary[DeclarationPropertySymbol, Location], errorLoc : Location, compilationMessages : ICompilerMessages) : void
    {
      foreach (requiredField when requiredField.IsAssignableFromInitialization in declarationSymbol.AllProperties)
      {
        def fieldName = requiredField.Name;
        unless (initializedProperties.ContainsKey(requiredField))
          compilationMessages.Error(errorLoc, $"Assignment of field '$fieldName' is required.", -1);
      }
    }
  }
}
