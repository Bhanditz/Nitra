using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal CheckRequiredDeclarationProperties(declarationSymbol : DeclarationSymbol, mappingFields : Seq[SyntaxMappingField], errorLoc : Location, compilationMessages : ICompilerMessages) : void
    {
      def initializedProperties = Dictionary();
      foreach (mappingField in mappingFields)
      {
        when (mappingField.DeclarationProperty is SymbolRef.Some(declarationProperty))
        {
          def propertyName = declarationProperty.Name;
          if (!declarationProperty.IsAssignableFromInitialization)
            compilationMessages.Error(mappingField.DeclarationProperty, $"Field '$propertyName' is not assignable.");
          else if (initializedProperties.ContainsKey(declarationProperty))
          {
            using (messages = compilationMessages.RootError(mappingField.DeclarationProperty, $"Duplicated assignment of field '$propertyName'."))
              messages.Hint(initializedProperties[declarationProperty], "First assigned here.");
          }
          else
            initializedProperties.Add(declarationProperty, mappingField.DeclarationProperty.Location);
        }
      }

      foreach (requiredField when requiredField.IsAssignableFromInitialization in declarationSymbol.AllProperties)
      {
        def fieldName = requiredField.Name;
        unless (initializedProperties.ContainsKey(requiredField))
          compilationMessages.Error(errorLoc, $"Assignment of field '$fieldName' is required.");
      }
    }
  }
}
