using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Model
{
  [Record]
  public variant RuleStructureField
  {
                   public         SrcRule            : Nitra.Model.Rule;
                   public         HeadPredicates     : array[RuleStructure.Predicate];
    [RecordIgnore] public mutable Owner              : RuleStructure;
    [RecordIgnore] public mutable State              : int;
    [RecordIgnore] public mutable EndState           : int;
    [RecordIgnore] public mutable Level              : int;
    [RecordIgnore] public mutable Size               : int;
    [RecordIgnore] public mutable Offset             : int;
    [RecordIgnore] public mutable NextSibling        : RuleStructureField;
    [RecordIgnore] public mutable PrevSibling        : RuleStructureField;
    [RecordIgnore] public mutable AllocateAst        : bool;
    [RecordIgnore] public mutable IsPredicate        : bool;
    [RecordIgnore] public mutable CanParseEmptyString         : bool;

    | Empty
    | TokenString       { String : string; }
    | RegularCall       { Symbol : RegularRuleSymbol; }
    | ExtensibleCall    { Symbol : ExtensibleRuleSymbol; BindingPower : int; }
    | SimpleCall        { Symbol : SimpleRuleSymbol; }
    | Option            { Rule   : RuleStructure.Option; }
    | List              {
                          Rule   : RuleStructure.List; MinCount : int; MaxCount : option[int];
                          public UseCounter : bool { get MinCount > 0 || MaxCount is Some(_) }
                          public IsSkipAnyPattern : bool { get { this.SrcRule.Type is RuleType.Chars } }
                        }
    | ListWithSeparator { Rule   : RuleStructure.ListWithSeparatorRule; Separator : RuleStructure.ListWithSeparatorSeparator; MinCount : int; MaxCount : option[int]; HangingSeparator : bool; public UseCounter : bool { get MinCount > 0 || MaxCount is Some(_) } }
    | Marker            { Symbol : MarkerSymbol; }

    public IsLoopSeparatorStart : bool
    {
      [Memoize]
      get
      {
        match (Owner)
        {
          | ListWithSeparatorSeparator as owner =>
            owner.NonMarkerFields.SkipWhile(f => f.CanParseEmptyString && f : object != this).FirstOrDefault() : object == this

          | _ => false
        }
      }
    }

    public IsLoopSeparator : bool { get { Owner is RuleStructure.ListWithSeparatorSeparator } }
    public IsLoopBody      : bool { get { Owner is RuleStructure.ListWithSeparatorRule } }

    public IsStart : bool
    {
      get { Owner.NonMarkerFields[0] : object == this }
    }

    public NextField : option[RuleStructureField]//TODO: Remove?
    {
      get
      {
        def nextField(field)
        {
          assert(field != null);

          if (field.NextSibling != null)
            Some(field.NextSibling)
          else if (field.Owner is RuleStructure.Ast)
            None()
          else
            nextField(field.Owner.Owner)
        }
        nextField(this)
      }
    }

    public override ToString() : string
    {
      match (this)
      {
        | Empty                                           => $"$State:<empty>"
        | TokenString                                     => $"$State:$SrcRule"
        | RegularCall                                     => $"$State:$SrcRule"
        | ExtensibleCall                                  => $"$State:$SrcRule"
        | SimpleCall                                      => $"$State:$SrcRule"
        | Option           (rule)                         => $"$State:($rule)?"
        | List             (rule, 0, _)                   => $"$State:($rule)*"
        | List             (rule, 1, _)                   => $"$State:($rule)+"
        | List             (_rule, _minCount, _)          => assert(false)
        | ListWithSeparator(rule, separator, 0, _, false) => $"$State:($rule; $separator)*"
        | ListWithSeparator(rule, separator, 1, _, false) => $"$State:($rule; $separator)+"
        | ListWithSeparator(rule, separator, 0, _, true)  => $"$State:($rule; $separator; ?)*"
        | ListWithSeparator(rule, separator, 1, _, true)  => $"$State:($rule; $separator; ?)+"
        | ListWithSeparator                               => assert(false)
        | Marker                                          => ""
      }
    }
  }
}
