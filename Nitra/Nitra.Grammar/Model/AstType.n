using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nitra.Model
{
  [Record, StructuralEquality]
  public variant AstType : Located
  {
    | Ast        { Symbol : AstSymbol }
    | Option     { Symbol : AstSymbol }
    | List       { Symbol : AstSymbol }
    | OptionList { Symbol : AstSymbol }
    | Void

    [EqualsIgnore]
    public override Location : Location { get; }

    public IsSubtypeOf(other : AstType) : bool
    {
      match (this, other)
      {
        | (Ast(s1),        Ast(s2))        => s1.IsSubtypeOf(s2)
        | (Option(s1),     Option(s2))     => s1.Equals(s2)
        | (List(s1),       List(s2))       => s1.Equals(s2)
        | (OptionList(s1), OptionList(s2)) => s1.Equals(s2)
        | (Void,           Void)           => true
        | _                                => false
      }
    }

    public override ToString() : string
    {
      match (this)
      {
        | Ast(s)        => s.FullName
        | Option(s)     => s.FullName + "?"
        | List(s)       => s.FullName + "+"
        | OptionList(s) => s.FullName + "*"
        | Void          => "void"
      }
    }
  }
}
