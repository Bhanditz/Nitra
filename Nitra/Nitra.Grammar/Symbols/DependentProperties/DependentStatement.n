using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nitra.Typing
{
  [Record]
  public variant DependentStatement : Located
  {
    public override Location : Location         { get; }
    public          Path     : list[Identifier] { get; }

    | Assign
      {
        Expression : PExpr;
      }
    | Call
      {
        MethodName : Identifier;
        Arguments  : list[PExpr];
        NemerleEnv : GlobalEnv;
      }
    | Add
      {
        Expression : PExpr;
      }

    public override ToString() : string
    {
      match (this)
      {
        | Assign(expr)         => $<#..$(Path; "."; x => x.GetText()) = $expr#>
        | Call(name, exprs, _) => $<#..$(Path; "."; x => x.GetText()).$name(..$(exprs; ", "))#>
        | Add(expr)            => $<#..$(Path; "."; x => x.GetText()) |= $expr#>
      }
    }
  }
}
