using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public variant PropertyDependencyNodeData : Located
  {
    public override Location    : Location                { get; }
    public          DeclaredIn  : PropertyContainerSymbol { get; }
    public          Path        : DependencyPath          { get; }
    public          Index       : int                     { get; }
    public          DependendOn : list[int]               { get; }
    public          IsDependent : bool                    { get { Path is DeclaredProperty(_, DependentPropertySymbol) } }

    | Assign
    | Use
  }

  [StructuralEquality]
  public variant DependencyPath
  {
    | This
    | DeclaredProperty { Path : DependencyPath; Symbol : PropertySymbol; }
    | CustomProperty   { Path : DependencyPath; Name   : string; }

    public override ToString() : string
    {
      ToString(StringBuilder()).ToString()
    }

    public ToString(buffer : StringBuilder) : StringBuilder
    {
      match (this)
      {
        | This => buffer
        | DeclaredProperty(This, symbol) with name = symbol.Name
        | CustomProperty(This, name) => buffer.Append(name)
        | DeclaredProperty(path, symbol) with name = symbol.Name
        | CustomProperty(path, name) => path.ToString(buffer).Append('.').Append(name)
      }
    }
  }
}
