using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  internal partial module SyntaxMappingTyper
  {
    public Trial : SyntaxMappingTyper[bool] = TrialSyntaxMappingTyper();

    private sealed class TrialSyntaxMappingTyper : SyntaxMappingTyper[bool], IRootCompilerMessages
    {
      public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
      {
        IgnoreParams();
      }

      public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
      {
        IgnoreParams();
        this
      }

      public Remove(_predicate : Func[Guid, Location, bool]) : void
      {
      }

      public SetFutureMessagesKind(_kind : Guid) : void
      {
      }

      public Dispose() : void
      {
      }

      protected override GetCompilerMessages(_node : G.MapSyntaxExpression) : ICompilerMessages
      {
        this
      }

      protected override TypeNode(node : G.MapSyntaxExpression, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : bool
      {
        node.ReturnsType(ruleSymbol, astType)
      }

      protected override CreateError(_node : G.MapSyntaxExpression) : bool
      {
        false
      }

      protected override CreateTypeHint(_expr : G.MapSyntaxExpression, _ruleSymbol : SyntaxRuleSymbol, _astType : AstType) : bool
      {
        true
      }

      protected override CreateConvertList(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : bool
      {
        IgnoreParams();
        true
      }

      protected override CreateConcatLists(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : bool
      {
        IgnoreParams();
        true
      }

      protected override CreateConcatOptions(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : bool
      {
        IgnoreParams();
        true
      }

      protected override CreateConvertOption(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], valuePath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : bool
      {
        IgnoreParams();
        true
      }

      protected override CreateCall(node : G.MapSyntaxExpression, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], ruleSymbol : SyntaxRuleSymbol) : bool
      {
        IgnoreParams();
        true
      }

      protected override CreateAstCtor(node : G.MapSyntaxExpression, astSymbol : AstSymbol, members : ListParseTree[G.MapSyntaxExpressionAstMember], closeBrace : NSpan, ruleSymbol : SyntaxRuleSymbol, compilerMessages : ICompilerMessages) : bool
      {
        IgnoreParams();
        true
      }

      protected override CreateListCtor(_node : G.MapSyntaxExpression, _astSymbol : AstSymbol, items : array[bool]) : bool
      {
        mutable acc = true;
        foreach (item in items)
          acc &= item;
        acc
      }

      protected override CreateOptionCtor(_node : G.MapSyntaxExpression, _astSymbol : AstSymbol, value : ValueOption[bool]) : bool
      {
        if (value.HasValue)
          value.Value
        else
          true
      }
    }
  }
}
