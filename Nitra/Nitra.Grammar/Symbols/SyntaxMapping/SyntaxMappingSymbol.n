using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class SyntaxMappingSymbol : SingleDefSymbol
  {
    public static SymbolName = "GetAst";

    public override Description   : string                       { get { "map syntax" } }
    public abstract DeclaringRule : SyntaxRuleSymbol             { get; }
    public abstract Parameters    : list[SyntaxMappingParameter] { get; }
    public abstract ReturnType    : AstType                      { get; }
    public virtual  Expression    : SyntaxMappingExpr            { get { null } }
    public          HasValidSignature : bool
    {
      get { !(ReturnType.IsVoid || Parameters.Exists(p => p.Type.IsVoid)) }
    }
  }

  public sealed class ChemicalSyntaxMappingSymbol : SyntaxMappingSymbol
  {
    public this(declaringRule : SyntaxRuleSymbol, parameters : list[SyntaxMappingParameter], returnType : AstType, expr : SyntaxMappingExpr)
    {
      base(expr.Location, SymbolName);
      this.DeclaringRule = declaringRule;
      this.Parameters    = parameters;
      this.ReturnType    = returnType;
      this.Expression    = expr;
    }

    public override DeclaringRule : SyntaxRuleSymbol             { get; }
    public override Parameters    : list[SyntaxMappingParameter] { get; }
    public override ReturnType    : AstType                      { get; }
    public override Expression    : SyntaxMappingExpr            { get; }
  }

  public sealed class ParsedSyntaxMappingSymbol : SyntaxMappingSymbol
  {
    public this(node : G.NamespaceMember.MapSyntax, declaringRule : SyntaxRuleSymbol)
    {
      base(node.Location, SymbolName);
      this._node         = node;
      this.DeclaringRule = declaringRule;
    }

    private _node : G.NamespaceMember.MapSyntax;

    public override DeclaringRule : SyntaxRuleSymbol             { get; }
    public override Parameters    : list[SyntaxMappingParameter] { get { _node.Parameters } }
    public override ReturnType    : AstType                      { get { _node.ReturnType } }
    public override Expression    : SyntaxMappingExpr            { get { _node.Expr } }
  }

  public sealed class ParsedInplaceSyntaxMappingSymbol : SyntaxMappingSymbol
  {
    public this(node : G.RuleBodyMember.MapSyntax, declaringRule : SyntaxRuleSymbol)
    {
      base(node.Location, SymbolName);
      this._node         = node;
      this.DeclaringRule = declaringRule;
    }

    private _node : G.RuleBodyMember.MapSyntax;

    public override DeclaringRule : SyntaxRuleSymbol             { get; }
    public override Parameters    : list[SyntaxMappingParameter] { get { _node.Parameters } }
    public override ReturnType    : AstType                      { get { _node.ReturnType } }
    public override Expression    : SyntaxMappingExpr            { get { _node.Expr } }
  }
}
