using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  internal abstract class SyntaxMappingTyper[TExpr]
  {
    protected abstract GetCompilerMessages(node : G.MapSyntaxExpression) : ICompilerMessages;
    protected abstract TypeNode           (node : G.MapSyntaxExpression, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr;
    protected abstract CreateError        (node : G.MapSyntaxExpression) : TExpr;
    protected abstract CreateTypeHint     (expr : G.MapSyntaxExpression, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr;
    protected abstract CreateCall         (node : G.MapSyntaxExpression,                        path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression],                           ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConvertList  (node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConcatLists  (node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConcatOptions(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConvertOption(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], valuePath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateAstCtor      (node : G.MapSyntaxExpression, astSymbol : AstSymbol, members : ListParseTree[G.MapSyntaxExpressionAstMember], closeBrace : NSpan, ruleSymbol : SyntaxRuleSymbol, compilerMessages : ICompilerMessages) : TExpr;
    protected abstract CreateListCtor     (node : G.MapSyntaxExpression, astSymbol : AstSymbol, items : array[TExpr]) : TExpr;
    protected abstract CreateOptionCtor   (node : G.MapSyntaxExpression, astSymbol : AstSymbol, value : ValueOption[TExpr]) : TExpr;

    private static EmptyArguments : SCG.IList[G.MapSyntaxExpression] = array(0);

    public TypeTypeHint(node : G.MapSyntaxExpression.TypeHint, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def hint             = TypingUtils.NTypeToAstTypeWithMessage(node.NitraType, node.Context, compilerMessages);
      if (hint.IsVoid)
        CreateError(node)
      else if (hint.IsSubtypeOf(astType))
        CreateTypeHint(node.Expr, ruleSymbol, hint)
      else
        CreateError(node, compilerMessages, $"Expected AST type '$astType' got '$hint'.")
    }

    public TypeConversion(node : G.MapSyntaxExpression.Conversion, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def pathOpt = BindRuleField(ruleSymbol, node.QualifiedName, node.Context, compilerMessages);
      if (pathOpt is VSome(originalPath))
      {
        def path      = FilterTuples(originalPath);
        def arguments = if (node.ArgumentsOpt.HasValue) node.ArgumentsOpt.Value.ArgumentExprs.Item1 else EmptyArguments;
        match (path.Type)
        {
          | Ref(targetRuleSymbol) =>
            def result = SelectSyntaxMappingOverload(node, ruleSymbol, targetRuleSymbol, arguments, astType);
            if (result.Candidates is [syntaxMapping])
              CreateCall(node, path, syntaxMapping, arguments, ruleSymbol)
            else
              CreateError(node, result.Messages, compilerMessages)

          | List(item) =>
            def itemPath = FilterTuples(ParseTreePath.Variable(path.Location.FromEnd(), Nitra.Model.Identifier(path.Location.FromEnd(), "node"), item));
            if (itemPath.Type is Ref(targetRuleSymbol))
              match(astType)
              {
                | List(astSymbol) | OptionList(astSymbol) =>
                  def result1 = SelectSyntaxMappingOverload(node, ruleSymbol, targetRuleSymbol, arguments, AstType.Ast(astType.Location, astSymbol));
                  match (result1.Candidates)
                  {
                    | [syntaxMapping] => CreateConvertList(node, astSymbol, path, syntaxMapping, arguments, itemPath, ruleSymbol)
                    | _ :: _          => CreateError(node, result1.Messages, compilerMessages)
                    | [] =>
                      def result2 = SelectSyntaxMappingOverload(node, ruleSymbol, targetRuleSymbol, arguments, astType);
                      match (result2.Candidates)
                      {
                        | [syntaxMapping] => CreateConcatLists(node, astSymbol, path, syntaxMapping, arguments, itemPath, ruleSymbol)
                        | _ :: _          => CreateError(node, result2.Messages, compilerMessages)
                        | [] =>
                          def result3 = SelectSyntaxMappingOverload(node, ruleSymbol, targetRuleSymbol, arguments, AstType.Option(astType.Location, astSymbol));
                          match (result3.Candidates)
                          {
                            | [syntaxMapping] => CreateConcatOptions(node, astSymbol, path, syntaxMapping, arguments, itemPath, ruleSymbol)
                            | _ :: _          => CreateError(node, result3.Messages, compilerMessages)
                            | []              => CreateError(node, result1.Messages, compilerMessages)
                          }
                      }
                  }

                | _ => CreateError(node, compilerMessages, $"Expected AST type '$astType' got list.")
              }
            else
              CreateError(node, compilerMessages, $"Cannot map rule '$(originalPath.Type)' to AST of type '$astType': rule '$item' does not refer syntax rule symbol.")

          | Option(value) =>
            def valuePath = FilterTuples(ParseTreePath.Variable(path.Location.FromEnd(), Nitra.Model.Identifier(path.Location.FromEnd(), "node"), value));
            if (valuePath.Type is Ref(targetRuleSymbol))
              match(astType)
              {
                | Option(astSymbol) =>
                  def result = SelectSyntaxMappingOverload(node, ruleSymbol, targetRuleSymbol, arguments, AstType.Ast(astType.Location, astSymbol));
                  if (result.Candidates is [syntaxMapping])
                    CreateConvertOption(node, astSymbol, path, syntaxMapping, arguments, valuePath, ruleSymbol)
                  else
                    CreateError(node, result.Messages, compilerMessages)

                | _ => CreateError(node, compilerMessages, $"Expected AST type '$astType' got option.")
              }
            else
              CreateError(node, compilerMessages, $"Cannot map rule '$(originalPath.Type)' to AST of type '$astType': rule '$value' does not refer syntax rule symbol.")

          | _ => CreateError(node, compilerMessages, $"Cannot map rule '$(originalPath.Type)' to AST of type '$astType'.")
        }
      }
      else
        CreateError(node)
    }

    public TypeAst(node : G.MapSyntaxExpression.Ast, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      if (astType is AstType.Ast(targetSymbol))
      {
        def astSymbolRef = TypingUtils.BindAstSymbolFromMappingExtension(node.QualifiedName, targetSymbol, node.Context, compilerMessages);
        if (astSymbolRef is SymbolRef.Some(astSymbol))
        {
          if (astSymbol.IsSubtypeOf(targetSymbol))
            CreateAstCtor(node, astSymbol, node.Members, node.CloseBrace, ruleSymbol, compilerMessages)
          else
          {
            def sourceName = astSymbol.FullName;
            def targetName = targetSymbol.FullName;
            CreateError(node, astSymbolRef, compilerMessages, $"Declaration '$sourceName' is not subtype of declaration '$targetName'")
          }
        }
        else
          CreateError(node)
      }
      else
        CreateError(node, compilerMessages, $"Expected AST type '$astType'.")
    }

    public TypeList(node : G.MapSyntaxExpression.List, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      match (astType)
      {
        | AstType.List(astSymbol) | AstType.OptionList(astSymbol) =>
          def itemType  = AstType.Ast(astType.Location, astSymbol);
          def itemExprs = node.ItemExprs.Item1;
          def items     = array(itemExprs.Count);
          foreach (itemExpr in itemExprs with index)
            items[index] = TypeNode(itemExpr, ruleSymbol, itemType);
          CreateListCtor(node, astSymbol, items)

        | _ => CreateError(node, compilerMessages, $"Expected AST type '$astType' got list.")
      }
    }

    public TypeOptionSome(node : G.MapSyntaxExpression.OptionSome, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      if (astType is AstType.Option(astSymbol))
      {
        def valueType = AstType.Ast(astType.Location, astSymbol);
        def value     = TypeNode(node.ValueExpr, ruleSymbol, valueType);
        CreateOptionCtor(node, astSymbol, VSome(value))
      }
      else
        CreateError(node, compilerMessages, $"Expected AST type '$astType' got option.Some.")
    }

    public TypeOptionNone(node : G.MapSyntaxExpression.OptionNone, _ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      if (astType is AstType.Option(astSymbol))
        CreateOptionCtor(node, astSymbol, VNone())
      else
        CreateError(node, compilerMessages, $"Expected AST type '$astType' got option.None.")
    }

    private CreateError(node : G.MapSyntaxExpression, messages : list[CompilerMessage], compilerMessages : ICompilerMessages) : TExpr
    {
      assert(messages is _ :: _);

      messages.TranslateTo(compilerMessages);
      CreateError(node)
    }

    private CreateError(node : G.MapSyntaxExpression, compilerMessages : ICompilerMessages, message : string) : TExpr
    {
      CreateError(node, node, compilerMessages, message)
    }

    private CreateError(node : G.MapSyntaxExpression, errorLoc : Located, compilerMessages : ICompilerMessages, message : string) : TExpr
    {
      compilerMessages.Error(errorLoc, message);
      CreateError(node)
    }

    private static BindRuleField(ruleSymbol : SyntaxRuleSymbol, qid : G.QualifiedIdentifier, context : Context, compilerMessages : ICompilerMessages) : ValueOption[ParseTreePath]
    {
      def eq(a : string, b : string)
      {
        String.Equals(a, b, StringComparison.InvariantCulture)
      }

      def bind(qualifier : ParseTreePath, name : Identifier, tail : list[Identifier]) : ValueOption[ParseTreePath]
      {
        def failure() : ValueOption[ParseTreePath]
        {
          compilerMessages.Error(name.Location, $"Unbound name '$(name.Value)'");
          VNone()
        }

        def success(ruleType : RuleType) : ValueOption[ParseTreePath]
        {
          def path = ParseTreePath.Member(qualifier.Location + name.Location, qualifier, name, ruleType);
          bindTail(path, tail)
        }

        match (qualifier.Type)
        {
          | Ref(symbol) =>
            def loop(rules : list[Rule])
            {
              | [] => failure()
              | rule :: _ when eq(name.Value, rule.FieldName) => success(rule.Type)
              | _ :: otherRules => loop(otherRules)
            }
            loop(symbol.NonVoidSubRules)

          | Tuple(members) =>
            def loop(members, index)
            {
              match (members)
              {
                | [] => failure()
                | member :: _ when eq(name.Value, "Item" + index.ToString()) => success(member)
                | _ :: otherMembers => loop(otherMembers, index + 1)
              }
            }
            loop(members, 1)

          | _ => failure()
        }
      }
      and bindTail(path : ParseTreePath, tail : list[Identifier]) : ValueOption[ParseTreePath]
      {
        match (tail)
        {
          | [] => VSome(path)
          | nextName :: nextTail => bind(path, nextName, nextTail)
        }
      }

      match (qid.Identifiers())
      {
        | [] =>
          compilerMessages.Error(qid, "No rule field name speciefied");
          VNone()

        | name :: tail =>
          if (context.BindMany.[ParseTreePatternVariableSymbol](name.Location).Candidates is [variable])
          {
            def path = ParseTreePath.Variable(name.Location, name, variable.Type);
            bindTail(path, tail);
          }
          else
          {
            def thisLoc = qid.Location.FromStart();
            def path    = ParseTreePath.This(thisLoc, ruleSymbol);
            bind(path, name, tail)
          }
      }
    }

    private static FilterTuples(path : ParseTreePath) : ParseTreePath
    {
      def filterNonKeywords(members : list[RuleType], index : int) : list[int * RuleType]
      {
        match (members)
        {
          | [] => []
          | RuleType.Chars(Keyword = Some) :: rest => filterNonKeywords(rest, index + 1)
          | x :: rest => (index, x) :: filterNonKeywords(rest, index + 1)
        }
      }

      if (path.Type is Tuple(members))
        if (filterNonKeywords(members, 1) is [(index, nonKeyword)])
          FilterTuples(ParseTreePath.Member(path.Location, path, Identifier(path.Location.FromEnd(), "Item" + index), nonKeyword))
        else path
      else path
    }

    private static SelectSyntaxMappingOverload(loc : Located, contextRuleSymbol : SyntaxRuleSymbol, targetRuleSymbol : SyntaxRuleSymbol, arguments : SCG.IList[G.MapSyntaxExpression], returnType : AstType) : BindingResult[SyntaxMappingSymbol]
    {
      def checkArgumentTypes(index, parms)
      {
        if (parms is current :: other)
          arguments[index].ReturnsType(contextRuleSymbol, current.Type) && checkArgumentTypes(index + 1, other)
        else
          true
      }

      def buffer = LightList();
      foreach (syntaxMapping in targetRuleSymbol.SyntaxMappings)
      {
        when (syntaxMapping.ReturnType.IsSubtypeOf(returnType))
        when (syntaxMapping.Parameters.Length == arguments.Count)
        when (checkArgumentTypes(0, syntaxMapping.Parameters))
          buffer.Add(syntaxMapping)
      }

      def result   = buffer.ToNList();
      def messages =
        match (result)
        {
          | [_] => []
          | [] =>
            using (msgs = CompilerMessageList())
            {
              if (targetRuleSymbol.SyntaxMappings.IsEmpty)
                msgs.Error(loc, $"Rule '$(targetRuleSymbol.FullName)' has no AST mapping");
              else
                msgs.Error(loc, $"Rule '$(targetRuleSymbol.FullName)' has no compatible AST mapping.");
              msgs.GetMessages()
            }

          | _ =>
            using (msgs = CompilerMessageList())
            {
              using (root = msgs.RootError(loc, $"Ambiguous '$(targetRuleSymbol.FullName)' AST mapping."))
                foreach (syntaxMapping in result)
                  root.Hint(syntaxMapping.FirstLocation, "AST mapping ambiguity.");
              msgs.GetMessages()
            }
        };

      BindingResult(loc, result, messages);
    }
  }
}
