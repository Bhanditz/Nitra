using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  internal abstract class SyntaxMappingTyper[TExpr]
  {
    protected abstract GetCompilerMessages(node : G.MapSyntaxExpression) : ICompilerMessages;
    protected abstract TypeNode(node : G.MapSyntaxExpression, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr;
    protected abstract CreateError(loc : Location) : TExpr;
    protected abstract CreateCall(loc : Location, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConvertList(loc : Location, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConcatLists(loc : Location, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConcatOptions(loc : Location, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateConvertOption(loc : Location, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], valuePath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : TExpr;
    protected abstract CreateAstCtor(loc : Location, astSymbol : AstSymbol, members : ListParseTree[G.MapSyntaxExpressionAstMember], closeBrace : NSpan, ruleSymbol : SyntaxRuleSymbol, compilerMessages : ICompilerMessages) : TExpr;
    protected abstract CreateListCtor(loc : Location, astSymbol : AstSymbol, items : array[TExpr]) : TExpr;
    protected abstract CreateOptionCtor(loc : Location, astSymbol : AstSymbol, value : ValueOption[TExpr]) : TExpr;

    public TypeConversion(node : G.MapSyntaxExpression.Conversion, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def loc = node.Location;
      def genericError()
      {
        compilerMessages.Error(loc, $"Cannot map rule to AST of type '$astType'.");
        CreateError(loc)
      }
      def pathOpt = TypingUtils.BindRuleField(ruleSymbol, node.QualifiedName, node.Context, compilerMessages);
      if (pathOpt is VSome(originalPath))
      {
        def path = Utils.FilterTuples(originalPath);
        def arguments = if (node.ArgumentsOpt.HasValue) node.ArgumentsOpt.Value.ArgumentExprs.Item1 else array[];
        match (path.Type)
        {
          | Ref(SyntaxRuleSymbol(SyntaxMappings = syntaxMappings)) =>
            if (TypingUtils.SelectSyntaxMappingOverload(ruleSymbol, syntaxMappings, arguments, astType) is VSome(syntaxMapping))
              CreateCall(loc, path, syntaxMapping, arguments, ruleSymbol)
            else
              genericError()

          | List(item) =>
            def itemPath = Utils.FilterTuples(ParseTreePath.Variable(path.Location.FromEnd(), Nitra.Model.Identifier(path.Location.FromEnd(), "node"), item));
            if (itemPath.Type is Ref(SyntaxRuleSymbol(SyntaxMappings = syntaxMappings)))
              match(astType)
              {
                | List(astSymbol) | OptionList(astSymbol) =>
                  if (TypingUtils.SelectSyntaxMappingOverload(ruleSymbol, syntaxMappings, arguments, AstType.Ast(astType.Location, astSymbol)) is VSome(syntaxMapping))
                    CreateConvertList(loc, astSymbol, path, syntaxMapping, arguments, itemPath, ruleSymbol)
                  else if (TypingUtils.SelectSyntaxMappingOverload(ruleSymbol, syntaxMappings, arguments, astType) is VSome(syntaxMapping))
                    CreateConcatLists(loc, astSymbol, path, syntaxMapping, arguments, itemPath, ruleSymbol)
                  else if (TypingUtils.SelectSyntaxMappingOverload(ruleSymbol, syntaxMappings, arguments, AstType.Option(astType.Location, astSymbol)) is VSome(syntaxMapping))
                    CreateConcatOptions(loc, astSymbol, path, syntaxMapping, arguments, itemPath, ruleSymbol)
                  else
                    genericError()

                | _ => genericError()
              }
            else
              genericError()

          | Option(value) =>
            def valuePath = Utils.FilterTuples(ParseTreePath.Variable(path.Location.FromEnd(), Nitra.Model.Identifier(path.Location.FromEnd(), "node"), value));
            if (valuePath.Type is Ref(SyntaxRuleSymbol(SyntaxMappings = syntaxMappings)))
              match(astType)
              {
                | Option(astSymbol) =>
                  if (TypingUtils.SelectSyntaxMappingOverload(ruleSymbol, syntaxMappings, arguments, AstType.Ast(astType.Location, astSymbol)) is VSome(syntaxMapping))
                    CreateConvertOption(loc, astSymbol, path, syntaxMapping, arguments, valuePath, ruleSymbol)
                  else
                    genericError()

                | _ => genericError()
              }
            else
              genericError()

          | _ => genericError()
        }
      }
      else
        genericError()
    }

    public TypeAst(node : G.MapSyntaxExpression.Ast, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def loc = node.Location;
      if (astType is AstType.Ast(targetSymbol))
      {
        def astSymbolRef = TypingUtils.BindAstSymbolFromMappingExtension(node.QualifiedName, targetSymbol, node.Context, compilerMessages);
        if (astSymbolRef is SymbolRef.Some(astSymbol))
        {
          if (astSymbol.IsSubtypeOf(targetSymbol))
            CreateAstCtor(loc, astSymbol, node.Members, node.CloseBrace, ruleSymbol, compilerMessages)
          else
          {
            def sourceName = astSymbol.FullName;
            def targetName = targetSymbol.FullName;
            compilerMessages.Error(astSymbolRef, $"Declaration '$sourceName' is not subtype of declaration '$targetName'");
            CreateError(loc)
          }
        }
        else
          CreateError(loc)
      }
      else
      {
        compilerMessages.Error(loc, $"Expected ast type '$astType'");
        CreateError(loc)
      }
    }

    public TypeList(node : G.MapSyntaxExpression.List, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def loc = node.Location;
      match (astType)
      {
        | AstType.List(astSymbol) | AstType.OptionList(astSymbol) =>
          def itemType  = AstType.Ast(astType.Location, astSymbol);
          def itemExprs = node.ItemExprs.Item1;
          def items     = array(itemExprs.Count);
          foreach (itemExpr in itemExprs with index)
            items[index] = TypeNode(itemExpr, ruleSymbol, itemType);
          CreateListCtor(loc, astSymbol, items)

        | _ =>
          compilerMessages.Error(loc, $"Expected ast type '$astType' got list");
          CreateError(loc)
      }
    }

    public TypeOptionSome(node : G.MapSyntaxExpression.OptionSome, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def loc = node.Location;
      if (astType is AstType.Option(astSymbol))
      {
        def valueType = AstType.Ast(astType.Location, astSymbol);
        def value     = TypeNode(node.ValueExpr, ruleSymbol, valueType);
        CreateOptionCtor(loc, astSymbol, VSome(value))
      }
      else
      {
        compilerMessages.Error(loc, $"Expected ast type '$astType' got option.Some");
        CreateError(loc)
      }
    }

    public TypeOptionNone(node : G.MapSyntaxExpression.OptionNone, _ruleSymbol : SyntaxRuleSymbol, astType : AstType) : TExpr
    {
      def compilerMessages = GetCompilerMessages(node);
      def loc = node.Location;
      if (astType is AstType.Option(astSymbol))
        CreateOptionCtor(loc, astSymbol, VNone())
      else
      {
        compilerMessages.Error(node, $"Expected ast type '$astType' got option.None");
        CreateError(loc)
      }
    }
  }
}
