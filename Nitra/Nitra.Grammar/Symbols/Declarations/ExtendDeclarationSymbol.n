using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtendDeclarationSymbol : SingleDefSymbol, INamespaceMember, IMemberSite
  {
    public abstract Extend      : SymbolRef[ExtensibleDeclarationSymbol] { get; }
    public override Description : string                                 { get { "extend declaration" } }
    public          Options     : Seq[ExtensionDeclarationSymbol]        { get { this.Node.GetDescendants.[ExtensionDeclarationSymbol]() } }
  }

  public sealed class ParsedExtendDeclarationSymbol : ExtendDeclarationSymbol
  {
    private _ast : G.NamespaceMember.ExtendDeclaration;

    public this(ast : G.NamespaceMember.ExtendDeclaration)
    {
      base(ast.BaseName.CalcLocations().Last);
      _ast = ast;
    }

    public override Extend : SymbolRef[ExtensibleDeclarationSymbol] { get { _ast.BaseDeclarationRef } }
  }
}
