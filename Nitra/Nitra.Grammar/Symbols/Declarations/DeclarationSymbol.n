using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public abstract class DeclarationSymbol : SingleDefSymbol
  {
    public abstract BaseDeclarations : list[DeclarationSymbol]     { get; }
    [ExternalProperty]
    public abstract ParentType       : NType                       { get; }
    public abstract Fields           : Seq[DeclarationFieldSymbol] { get; }

    public AllBaseDeclarations : Seq[DeclarationSymbol]
    {
      [Memoize]
      get
      {
        if (BaseDeclarations.IsEmpty)
          []
        else
        {
          def result = HashSet(BaseDeclarations);
          foreach (s in BaseDeclarations)
            result.UnionWith(s.AllBaseDeclarations);
          result.ToArray()
        }
      }
    }

    public AllFields : Seq[DeclarationFieldSymbol]
    {
      [Memoize]
      get
      {
        if (BaseDeclarations.IsEmpty)
          Fields
        else
        {
          def result = HashSet(InheritedFields);
          result.UnionWith(Fields);
          result.ToArray()
        }
      }
    }

    public InheritedFields : Seq[DeclarationFieldSymbol]
    {
      [Memoize]
      get
      {
        match (BaseDeclarations)
        {
          | []             => []
          | first :: other =>
            def result = HashSet(first.AllFields);
            foreach (s in other)
              result.UnionWith(s.AllFields);
            result.ToArray()
        }
      }
    }
  }
}
