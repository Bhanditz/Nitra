using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  [Record]
  public abstract class DeclarationSymbol : SingleDefSymbol
  {
    public abstract BaseDeclarations : list[AbstractDeclarationSymbol] { get; }
    [ExternalProperty]
    public abstract ParentType       : NType                           { get; }
    public abstract Fields           : Seq[DeclarationFieldSymbol]     { get; }

    public AllFields : Seq[DeclarationFieldSymbol]
    {
      [Memoize]
      get
      {
        if (BaseDeclarations.IsEmpty)
          Fields
        else
        {
          def result = HashSet(Fields);
          foreach (baseDeclaration in BaseDeclarations)
            foreach (field in baseDeclaration.AllFields)
              _ = result.Add(field);
          result.NToArray();
        }
      }
    }
  }
}
