using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  [Record]
  public variant SyntaxMappingBody : Located
  {
    | CallMember { Path   : ParseTreePath }
    | Inline     { Code   : PExpr }
    | PerField   { Fields : list[SyntaxMappingField] }
    | Match      { Cases  : list[SyntaxMappingCase] }
    | Error

    public override Location    : Location                     { get; }
    public          Declaration : SymbolRef[DeclarationSymbol] { get; }
  }

  [Record]
  public sealed class SyntaxMappingCase : Located
  {
    public override Location    : Location                     { get; }
    public          Declaration : SymbolRef[DeclarationSymbol] { get; }
    public          Patterns    : list[ParseTreePattern]       { get; }
    public          Fields      : list[SyntaxMappingField]     { get; }
  }

  [Record]
  public variant ParseTreePattern : Located
  {
    | Wildcard
    | Var      { Name  : LocatedName; Type : RuleType }
    | Ctor     { Value : ParseTreeCtor }

    public override Location : Location { get; }
  }

  [Record]
  public abstract class ParseTreeCtor : Located
  {
    public override Location : Location { get; }
  }

  [Record]
  public sealed class TupleCtor : ParseTreeCtor
  {
    public Members : list[ParseTreeCtor];
  }

  [Record]
  public variant OptionCtor : ParseTreeCtor
  {
    | None
    | Some { Value : ParseTreePattern }
  }

  [Record]
  public variant ListCtor : ParseTreeCtor
  {
    | Nil
    | Cons { Value : ParseTreePattern; Tail : ParseTreePattern }
  }
}
