using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensionDeclarationSymbol : DeclarationSymbol, IMemberSite
  {
    public override Description     : string                                 { get "declaration extension" }
    public abstract BaseDeclaration : SymbolRef[ExtensibleDeclarationSymbol] { get; }
    public override Fields          : Seq[DeclarationFieldSymbol]            { get { this.Node.GetDescendants.[DeclarationFieldSymbol]() } }
  }

  public sealed class ParsedExtensionDeclarationSymbol : ExtensionDeclarationSymbol
  {
    private _ast : G.DeclarationOption;

    public this(ast : G.DeclarationOption)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public override BaseDeclaration : SymbolRef[ExtensibleDeclarationSymbol] { get { _ast.BaseDeclarationRef } }
  }
}
