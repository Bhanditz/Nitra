using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensionDeclarationSymbol : DeclarationSymbol, IMemberSite
  {
    public override Description      : string                                 { get "declaration extension" }
    public abstract BaseDeclaration  : SymbolRef[ExtensibleDeclarationSymbol] { get; }
    public override BaseDeclarations : list[DeclarationSymbol]                { get { if (BaseDeclaration is SymbolRef.Some(s)) [s] else [] } }
    public override Fields           : Seq[DeclarationFieldSymbol]            { get { this.Node.GetDescendants.[DeclarationFieldSymbol]() } }

    public override ParentType : NType
    {
      get
      {
        if (BaseDeclaration is SymbolRef.Some(declarationSymbol))
          declarationSymbol.ParentType
        else
          Utils.GetDefaultDeclarationParentType(this.FirstLocation)
      }
    }
  }

  public sealed class ParsedExtensionDeclarationSymbol : ExtensionDeclarationSymbol
  {
    private _node : G.DeclarationOption;

    public this(node : G.DeclarationOption)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override BaseDeclaration : SymbolRef[ExtensibleDeclarationSymbol] { get { _node.BaseDeclarationRef } }
  }
}
