using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensibleDeclarationSymbol : DeclarationSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string                          { get "extensible declaration" }
    public override Fields      : Seq[DeclarationFieldSymbol]     { get { [] } }
    public          Options     : Seq[ExtensionDeclarationSymbol] { get { this.Node.GetDescendants.[ExtensionDeclarationSymbol]() } }
  }

  public sealed class ParsedExtensibleDeclarationSymbol : ExtensibleDeclarationSymbol
  {
    private _ast : G.NamespaceMember.ExtensibleDeclaration;

    public this(ast : G.NamespaceMember.ExtensibleDeclaration)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }
  }
}
