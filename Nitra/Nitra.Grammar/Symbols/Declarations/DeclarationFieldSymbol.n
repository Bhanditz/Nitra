using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Typing.RuleMethod;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class DeclarationFieldSymbol : SingleDefSymbol
  {
    [ExternalProperty]
    public abstract Type         : NType          { get; }
    public abstract HasBody      : bool           { get; }
    public virtual  Body         : RuleMethodBody { get { throw NotSupportedException() } } // implementation for external symbol
    public override Description  : string         { get "declaration field" }

    public DeclaringDeclaration : DeclarationSymbol
    {
      get
      {
        assert(Node != null);
        match (Node.Parent.GetSymbol.[DeclarationSymbol]())
        {
          | declarationSymbol :: _ => declarationSymbol
          | []                        => assert(false)
        }
      }
    }
    public abstract ImplementedField : SymbolRef[DeclarationFieldSymbol] { get; }
  }

  public sealed class ParsedDeclarationFieldSymbol : DeclarationFieldSymbol
  {
    private _node : G.DeclarationMember.SimpleField;

    public this(node : G.DeclarationMember.SimpleField)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override Type             : NType                             { get { _node.Type } }
    public override HasBody          : bool                              { get { !_node.RuleMethodBody.IsEmpty() } }
    public override Body             : RuleMethodBody                    { get { _node.Body } }
    public override ImplementedField : SymbolRef[DeclarationFieldSymbol] { get { _node.ImplementedField } }
  }
}
