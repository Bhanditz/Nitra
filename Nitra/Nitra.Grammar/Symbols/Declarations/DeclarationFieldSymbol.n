using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Typing.RuleMethod;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol(ExternalDeclarationFieldSymbol), ChemicalSymbol]
  public abstract class DeclarationFieldSymbol : NitraFieldSymbol
  {
    public DeclaringDeclaration : DeclarationSymbol
    {
      get
      {
        assert(Node != null);
        match (Node.Parent.GetSymbol.[DeclarationSymbol]())
        {
          | declarationSymbol :: _ => declarationSymbol
          | []                        => assert(false)
        }
      }
    }

    Serialize(_ : BinaryWriter, _ : IMetadataWriter) : void implements IExportableSymbol.Serialize
    {
      // all data is written to .NET metadata
    }
  }

  public sealed class ParsedDeclarationFieldSymbol : DeclarationFieldSymbol
  {
    private _ast : G.NitraField;

    public this(ast : G.NitraField)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public override Type         : NType          { get { _ast.Type } }
    public override HasBody      : bool           { get { !_ast.RuleMethodBody.IsEmpty() } }
    public override Body         : RuleMethodBody { get { _ast.Body } }
  }

  public sealed class ExternalDeclarationFieldSymbol : DeclarationFieldSymbol
  {
    Deserialize(_ : BinaryReader, metadataReader : IMetadataReader) : void implements IImportableSymbol.Deserialize
    {
      (Type, HasBody) = DeclarationFieldReflectionUtils.ReflectProperties(metadataReader.Project :> NitraProject, this)
    }
  }
}
