using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class InDeclarationPropertySymbol : DependentDeclarationPropertySymbol
  {
    public override Direction   : DependentPropertyDirection { get DependentPropertyDirection.In }
    public override Description : string                     { get "input declaration property" }
  }

  public sealed class ParsedInDeclarationPropertySymbol : InDeclarationPropertySymbol
  {
    private _node : G.DeclarationMember.InProperty;

    public this(node : G.DeclarationMember.InProperty)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override LinkedProperty : SymbolRef[DependentDeclarationPropertySymbol] { [Memoize] get { SymbolRef.None(_node.Name.Location, false) } }
    public override Type           : NType                                         {           get { _node.Type } }
  }

  public sealed class ParsedAutoInDeclarationPropertySymbol : InDeclarationPropertySymbol
  {
    private _node : G.DeclarationMember.InOutProperty;

    public this(node : G.DeclarationMember.InOutProperty)
    {
      base(node.Name, node.Name.Value() + "In");
      _node = node;
    }

    public override LinkedProperty : SymbolRef[DependentDeclarationPropertySymbol] { [Memoize] get { SymbolRef.Some(_node.Name.Location, false, _node.OutSymbol) } }
    public override Type           : NType                                         {           get { _node.Type } }
  }
}
