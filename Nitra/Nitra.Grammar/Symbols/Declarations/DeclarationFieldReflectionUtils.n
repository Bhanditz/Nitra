using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  internal module DeclarationFieldReflectionUtils
  {
    public ReflectProperties(project : NitraProject, symbol : DeclarationFieldSymbol) : NType * bool
    {
      def makeFakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location
      {
        def source = SourceSnapshot("", "", location.FileIndex, location.File, array(0), 0);
        def tok = NSpan(0, 0);
        Nitra.Location(source, tok)
      }

      def reflectNType(typeVar : TypeVar, isFunc : bool) : NType
      {
        def loc = makeFakeNitraLocation(typeVar.Location);
        match (typeVar)
        {
          | FixedType.Tuple(members)   when isFunc => NType.Tuple(loc, members.Map(reflectNType(_, true))) // for function signatures
          | FixedType.Void                         => NType.Predefined(loc, NPredefinedType.Void)
          | FixedType.Fun(from, to)                => NType.Func(loc, reflectNType(from, true), reflectNType(to, true))
          | FixedType.Class(ti, [])    when ti.FullName == "System.Int32"                           => NType.Predefined(loc, NPredefinedType.Int)
          | FixedType.Class(ti, [])    when ti.FullName == "System.String"                          => NType.Predefined(loc, NPredefinedType.String)
          | FixedType.Class(ti, [arg]) when ti.FullName == "Nitra.Declarations.DeclarationOption"   => NType.Option(loc, reflectNType(arg, false))
          | FixedType.Class(ti, [arg]) when ti.FullName == "Nitra.Declarations.DeclarationList"     => NType.List(loc, reflectNType(arg, false))
          | FixedType.Class(ti, args)  when ti.FullName == "Nitra.Declarations.DeclarationSequence" => NType.Tuple(loc, args.Map(reflectNType(_, false)))
          | _                         => assert3(false, "Failed to reflect NType from TypeVar")
        }
      }

      match (project.GetNemerleType(symbol.DeclaringDeclaration))
      {
        | FixedType.Class(ti, []) =>
          mutable ntype;
          mutable hasBody;
          foreach (property is IProperty in ti.LookupMember(symbol.Name, false))
          {
            ntype = reflectNType(property.GetMemType(), false);

            foreach(attr in property.GetModifiers().GetCustomAttributes())
            {
              | <[ Nitra.Runtime.DeclarationFieldAttribute($(hasBodyValue : bool)) ]> =>
                hasBody = hasBodyValue;
                break;

              | _ => ()
            }

            break;
          }
          (ntype, hasBody)

        | _ => assert3(false)
      }
    }
  }
}
