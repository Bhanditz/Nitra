using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class OutDeclarationPropertySymbol : DependentDeclarationPropertySymbol
  {
    public override Direction   : DependentPropertyDirection { get DependentPropertyDirection.Out }
    public override Description : string                     { get "output declaration property" }
  }

  public sealed class ParsedOutDeclarationPropertySymbol : OutDeclarationPropertySymbol
  {
    private _node : G.DeclarationMember.OutProperty;

    public this(node : G.DeclarationMember.OutProperty)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override Type : NType { get { _node.Type } }
  }

  public sealed class ParsedAutoOutDeclarationPropertySymbol : OutDeclarationPropertySymbol
  {
    private _node : G.DeclarationMember.InOutProperty;

    public this(node : G.DeclarationMember.InOutProperty)
    {
      base(node.Name, node.Name.Value() + "Out");
      _node = node;
    }

    public override Type : NType { get { _node.Type } }
  }
}
