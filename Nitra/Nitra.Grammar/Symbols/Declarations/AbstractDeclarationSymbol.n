using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class AbstractDeclarationSymbol : DeclarationSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string { get "abstract declaration" }
    public override ParentType  : NType  { get { Utils.GetDefaultDeclarationParentType(FirstLocation) } }
  }

  public sealed class ParsedAbstractDeclarationSymbol : AbstractDeclarationSymbol
  {
    private _node : G.NamespaceMember.AbstractDeclaration;

    public this(node : G.NamespaceMember.AbstractDeclaration)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override BaseDeclarations : list[DeclarationSymbol] { get { _node.BaseDeclarations } }
  }
}
