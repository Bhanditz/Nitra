using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using Nitra.Serialization;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing.RuleMethod
{
  [Record, ExportableSymbol(ExternalDefSymbol)]
  public abstract class DefSymbol : DefinitionSymbol, ISignature, IBody, ICached
  {
    public abstract Signature : RuleMethodSignature { get; }
    public virtual  Body      : RuleMethodBody      { get { throw NotSupportedException() } } // implementation for external symbol
    public abstract IsCached  : bool                { get; }

    Serialize(_ : BinaryWriter, _ : IMetadataWriter) : void implements IExportableSymbol.Serialize
    {
      // all data is written to .NET metadata
    }
  }

  public sealed class ParsedDefSymbol : DefSymbol
  {
    _node : G.RuleMethod;

    public this(node : G.RuleMethod)
    {
      base(node.Name);
      _node = node;
    }

    public override Signature : RuleMethodSignature { get { _node.Signature } }
    public override Body      : RuleMethodBody      { get { _node.Body } }
    public override IsCached  : bool                { get { _node.IsCached } }
  }

  public sealed class ExternalDefSymbol : DefSymbol
  {
    Deserialize(_ : BinaryReader, metadataReader : IMetadataReader) : void implements IImportableSymbol.Deserialize
    {
      (Signature, IsCached) = RuleMethodReflectionUtils.ReflectProperties(metadataReader.Project :> NitraProject, this);
    }
  }
}
