using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using Nitra.Serialization;
using Nitra.Model;

using System;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing.RuleMethod
{
  [Record, ExportableSymbol]
  public abstract class AbstractSymbol : DefinitionSymbol, ISignature, ICached
  {
    [ExternalProperty]
    public abstract Signature : RuleMethodSignature  { get; }
    public abstract IsCached  : bool                 { get; }
    public abstract AstType   : AstType              { get; }
  }

  public sealed class ParsedAbstractSymbol : AbstractSymbol
  {
    _node : G.RuleMethod;

    public this(node : G.RuleMethod)
    {
      base(node.Name);
      _node = node;
    }

    public override Signature : RuleMethodSignature  { get { _node.Signature } }
    public override IsCached  : bool                 { get { _node.IsCached } }
    public override AstType   : AstType              { get { _node.AstType } }
  }
}
