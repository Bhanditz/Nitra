using Nitra.ProjectSystem;
using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;
using System;

namespace Nitra.Typing
{
  [Record]
  public abstract class SyntaxRuleSymbol : RuleDefSymbol
  {
    public abstract Rule             : Rule.Sequence                {           get; }
    public abstract Declaration      : SymbolRef[DeclarationSymbol] {           get; }
    public          NonVoidSubRules  : list[Rule]                   { [Memoize] get { Rule.Rules.Filter(rule => !(rule.Type is RuleType.Void)) } }
    public          SubRules         : list[Rule]                   {           get { Rule.Rules } }
    public          Sequence         : SequenceCompileInfo.Root     { [Memoize] get { SequenceCompileInfo.MakeSequenceCompileInfo(this) } }
    public override IsToken          : bool                         {           get { Options.IsTokenRule } }

    internal virtual SetDeclaration(declarationSymbolRef : SymbolRef[DeclarationSymbol]) : void
    {
      assert(Node != null);
      Node.Project.Error(declarationSymbolRef.Location, "Declaration mapping is not allowed here", 0)
    }

    protected TrySetSyntaxMappingBody(syntaxMappingBody : ref SyntaxMappingBody, newValue : SyntaxMappingBody) : void
    {
      assert(Node != null);
      if (syntaxMappingBody != null)
      {
        using (messages = Node.Project.RootError(syntaxMappingBody.Location, "Only single declaration mapping is allowed", -1))
          messages.Hint(syntaxMappingBody.Location, "Fist declaration mapping", -1);
      }
      else
        syntaxMappingBody = newValue
    }

    internal virtual SetSyntaxMappingBody(syntaxMappingBody : SyntaxMappingBody) : void
    {
      assert(Node != null);
      Node.Project.Error(syntaxMappingBody.Location, "Declaration mapping is not allowed here", 0)
    }

    public virtual GetSyntaxMappingBody() : SyntaxMappingBody
    {
      null
    }
  }
}
