using Nitra.Runtime;
using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensibleRuleSymbol : SyntaxRuleSymbol, IRuleDeclarationSite
  {
    public sealed override Type          : RuleType                        { [Memoize] get { RuleType.Ref(this) } }
    public sealed override Rule          : Rule.Sequence                   { get { assert3(false) } }
    public        abstract SplicableType : SplicableRuleType               { get; }
    public        override Description   : string                          { get "extensible rule" }
    public        abstract SpliceSource  : SymbolRef[ExtensibleRuleSymbol] { get; }

    public variant SplicableRuleType
    {
      | None
      | Splice       { Type       : RuleType }
      | OptionSplice { OptionType : RuleType }
      | LoopSplice   { LoopType   : RuleType }
    }
  }

  [Record, ChemicalSymbol]
  public abstract class BaseExtensibleRuleSymbol : ExtensibleRuleSymbol
  {
    public override IdInGrammar         : int  { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }

  public sealed class ParsedExtensibleRuleSymbol : BaseExtensibleRuleSymbol
  {
    public this(node : G.ExtensibleRule, declarationSite : IRuleDeclarationSite)
    {
      base(node.Name);
      _node = node;
      DeclarationSite = declarationSite;
    }

    private _node                    : G.ExtensibleRule;

    public override DeclarationSite : IRuleDeclarationSite            { get; }
    public override Options         : RuleDefinitionOptions           { [Memoize] get { _node.RuleAttributes.Options(DeclarationSite.GetDefaultRuleDefinitionOptions()) } }
    public override SplicableType   : SplicableRuleType               {           get { SplicableRuleType.None() } }
    public override LastLocation    : option[Location]                {           get { Some(_node.ExtensibleRuleBody.GetLastLocation()) } }
    public override SpliceSource    : SymbolRef[ExtensibleRuleSymbol] {           get; default SymbolRef.None(Location.Default, true) }
    public override Declaration     : SymbolRef[DeclarationSymbol]
    {
      get
      {
        if (_syntaxMappingBody != null)
         _syntaxMappingBody.Declaration
       else
         SymbolRef.None(Location.Default, true)
      }
    }

    private mutable _syntaxMappingBody : SyntaxMappingBody = null;

    internal override SetSyntaxMappingBody(syntaxMappingBody : SyntaxMappingBody) : void
    {
      TrySetSyntaxMappingBody(ref _syntaxMappingBody, syntaxMappingBody)
    }

    public override GetSyntaxMappingBody() : SyntaxMappingBody
    {
      _syntaxMappingBody
    }
  }

  public sealed class ParsedExtensibleTokenRuleSymbol : BaseExtensibleRuleSymbol
  {
    public this(node : G.ExtensibleTokenRule, declarationSite : IRuleDeclarationSite)
    {
      base(node.Name);
      _node = node;
      DeclarationSite = declarationSite;
    }

    private _node                        : G.ExtensibleTokenRule;

    public override DeclarationSite     : IRuleDeclarationSite            {           get; }
    public override Options             : RuleDefinitionOptions           { [Memoize] get { _node.RuleAttributes.Options(RuleDefinitionOptions.CreateTokenRule()) } }
    public override SplicableType       : SplicableRuleType               {           get SplicableRuleType.None() }
    public override LastLocation        : option[Location]                {           get { Some(_node.ExtensibleRuleBody.GetLastLocation()) } }
    public override SpliceSource        : SymbolRef[ExtensibleRuleSymbol] {           get; default SymbolRef.None(Location.Default, true) }
    public override Declaration         : SymbolRef[DeclarationSymbol]    {           get; default SymbolRef.None(Location.Default, true) }
  }
}
