using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;
using System;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class RegularRuleSymbol : RuleDefSymbol, IRuleDeclarationSite
  {
    public sealed override Type                : RuleType    { get { RuleType.Chars(None()) } }
    public sealed override IsToken             : bool        { get { true } }
    public        abstract Rule                : RegularRule { get; }
    public        abstract CanParseEmptyString : bool        { get; }
    public        abstract FirstCharLowerBound : char        { get; }
    public        abstract FirstCharUpperBound : char        { get; }
    public                 Fsm                 : FSM         { [Memoize] get { FSMTransform.MakeDeterministic(this.Rule.ConvertRegularRuleToFsm()) } }
    public        override Description         : string      { get { "regular rule" } }
  }

  public sealed class ParsedRegularRuleSymbol : RegularRuleSymbol
  {
    public this(ast : G.RegexRule, declarationSite : IRuleDeclarationSite)
    {
      base(ast.Name);
      _ast = ast;
      DeclarationSite = declarationSite;
    }

    private _ast                        : G.RegexRule;

    public override DeclarationSite     : IRuleDeclarationSite  { get; }
    public override Options             : RuleDefinitionOptions { [Memoize] get { _ast.RuleAttributes.Options(DeclarationSite.GetDefaultRuleDefinitionOptions()) } }
    public override Rule                : RegularRule           {           get { _ast.Regex() } }
    public override LastLocation        : option[Location]      { [Memoize] get { Some(_ast.RegexRuleBody.GetLastLocation()) } }
    public override IdInGrammar         : int                   { [Memoize] get { DeclaringModule.GetNewRuleId() } }
    public override CanParseEmptyString : bool                  { [Memoize] get { Fsm.OkStates.Contains(Fsm.StartState) } }
    public override FirstCharLowerBound : char                  {           get { FirstCharBounds[0] } }
    public override FirstCharUpperBound : char                  {           get { FirstCharBounds[1] } }
    private FirstCharBounds : CharBounds
    {
      [Memoize] get
      {
        mutable totalRange = RangeSet();
        foreach (Symbol(Chars = range, From = from) when from == Fsm.StartState in Fsm.Transitions)
          totalRange = totalRange.Sum(range);
        match (totalRange.GetBounds())
        {
          | None => (char.MinValue, char.MaxValue)
          | Some(bounds) => bounds
        }
      }
    }
  }
}
