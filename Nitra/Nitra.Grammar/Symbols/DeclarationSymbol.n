using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class DeclarationSymbol : SingleDefSymbol, IRuleDeclarationSite, INamespaceMember
  {
    public override Description     : string                        { get "syntax module" }
    public          DeclarationSite : IRuleDeclarationSite          { get { null } }
    public          IsSplicable     : bool                          { get { SpliceSource.IsSome } }
    public abstract SpliceSource    : SymbolRef[DeclarationSymbol]  { get; }
  }

  public sealed class ParsedDeclarationSymbol : DeclarationSymbol
  {
    private _ast : G.NamespaceMember.Declaration;

    public this(ast : G.NamespaceMember.Declaration)
    {
      base(ast.Name, ast.Name.Value());
      _ast = ast;
    }

    public override SpliceSource : SymbolRef[DeclarationSymbol] { get; default SymbolRef.None(Location.Default, true) }
  }
}
