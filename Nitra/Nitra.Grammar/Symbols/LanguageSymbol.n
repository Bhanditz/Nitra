using Nitra.Model;
using Nitra.Runtime.GraphUtils;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class LanguageSymbol : SingleDefSymbol, INamespaceMember, IGraphNode[LanguageSymbol]
  {
    public override Description              : string                    { get "language" }
    public abstract Parent                   : SymbolRef[LanguageSymbol] { get; }
    public abstract FileExtension            : string                    { get; }
    public abstract Company                  : string                    { get; }
    public abstract LanguageDescription      : string                    { get; }
    public abstract Authors                  : string                    { get; }
    public abstract Copyright                : string                    { get; }
    public abstract LicenseUrl               : string                    { get; }
    public abstract RequireLicenseAcceptance : bool                      { get; }

    Connections : Seq[LanguageSymbol] implements IGraphNode[LanguageSymbol].Connections
    {
      get { if (Parent is SymbolRef.Some(parent)) [parent] else [] }
    }
  }

  public sealed class ParsedLanguageSymbol : LanguageSymbol
  {
    private _node       : G.NamespaceMember.Language;
    private _properties : PropertyBag;

    public this(node : G.NamespaceMember.Language)
    {
      base(node.Name, node.Name.Value());
      _node       = node;
      _properties = PropertyBag(this);
    }

    public override Parent                   : SymbolRef[LanguageSymbol] { get { _node.Parent } }
    public override FileExtension            : string                    { get { _properties.GetProperty("FileExtension",            string.Empty) } }
    public override Company                  : string                    { get { _properties.GetProperty("Company",                  string.Empty) } }
    public override LanguageDescription      : string                    { get { _properties.GetProperty("LanguageDescription",      string.Empty) } }
    public override Authors                  : string                    { get { _properties.GetProperty("Authors",                  string.Empty) } }
    public override Copyright                : string                    { get { _properties.GetProperty("Copyright",                string.Empty) } }
    public override LicenseUrl               : string                    { get { _properties.GetProperty("LicenseUrl",               string.Empty) } }
    public override RequireLicenseAcceptance : bool                      { get { _properties.GetProperty("RequireLicenseAcceptance", false) } }

    internal SetFileExtension           (loc : Location, value : string) : void { _properties.SetProperty("FileExtension",            loc, value) }
    internal SetCompany                 (loc : Location, value : string) : void { _properties.SetProperty("Company",                  loc, value) }
    internal SetLanguageDescription     (loc : Location, value : string) : void { _properties.SetProperty("LanguageDescription",      loc, value) }
    internal SetAuthors                 (loc : Location, value : string) : void { _properties.SetProperty("Authors",                  loc, value) }
    internal SetCopyright               (loc : Location, value : string) : void { _properties.SetProperty("Copyright",                loc, value) }
    internal SetLicenseUrl              (loc : Location, value : string) : void { _properties.SetProperty("LicenseUrl",               loc, value) }
    internal SetRequireLicenseAcceptance(loc : Location, value : bool)   : void { _properties.SetProperty("RequireLicenseAcceptance", loc, value) }
  }
}
