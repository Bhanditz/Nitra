using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Typing.RuleMethod;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record]
  public abstract class AstPropertySymbol : SingleDefSymbol
  {
    [ExternalProperty]
    public abstract Type         : NType          { get; }
    public abstract IsDependent  : bool           { get; }
    public abstract IsSpecial    : bool           { get; }
    public virtual  IsAssignableFromInitialization : bool { get { false } }

    public DeclaringAst : AstSymbol
    {
      get
      {
        assert(Node != null);
        match (Node.Parent.GetSymbol.[AstSymbol]())
        {
          | astSymbol :: _ => astSymbol
          | []                        => assert(false)
        }
      }
    }
  }
}
