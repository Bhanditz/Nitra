using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class AbstractAstSymbol : AstSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string { get { if (IsDeclaration) "abstract declaration" else "abstract ast" } }
  }

  public sealed class ParsedAbstractAstSymbol : AbstractAstSymbol
  {
    private _node : G.NamespaceMember.SimpleAst;

    public this(node : G.NamespaceMember.SimpleAst)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override IsDeclaration            : bool                             { get { false } }
    public override BaseAsts                 : list[AstSymbol]                  { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentAstPropertySymbol] { get { [] } }
  }

  public sealed class ParsedAbstractDeclarationSymbol : AbstractAstSymbol
  {
    private _node : G.NamespaceMember.SimpleAst;

    public this(node : G.NamespaceMember.SimpleAst)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override IsDeclaration            : bool                             { get { true } }
    public override BaseAsts                 : list[AstSymbol]                  { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentAstPropertySymbol] { get { [] } }
  }
}
