using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public interface IPrecedenceSymbolOwner : IExportableSymbol
  {
  }

  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class PrecedenceSymbol : MultipleDefSymbol
  {
    public abstract Owner          : IPrecedenceSymbolOwner { get; }
    public override Description    : string                 { get { "precedence" } }

    protected static GetNameLocation(node : G.RuleBodyMember.Precedence) : Location
    {
      def span = match (node.PrecedenceName)
      {
        | zero is G.PrecedenceName.Zero => zero.Zero
        | name is G.PrecedenceName.Name => name.Name.IdentifierBody
        | _                             => assert3(false)
      }
      Location(node.Location.Source, span);
    }

    public static GetPrecedenceSymbol(owner : IPrecedenceSymbolOwner, node : G.RuleBodyMember.Precedence) : PrecedenceSymbol
    {
      def location = GetNameLocation(node);
      def symbol = match (owner.Node.BindMany.[PrecedenceSymbol](location))
      {
        | [symbol] => symbol;
        | []       =>
          def symbol = ParsedPrecedenceSymbol(node, owner);
          _ = owner.Node.Add(symbol, location);
          symbol
        | _ :: _ => assert3(false);
      }
      symbol.AddDefinition(location);
      symbol
    }
  }

  public sealed class ParsedPrecedenceSymbol : PrecedenceSymbol
  {
    private _node : G.RuleBodyMember.Precedence;

    public override Owner : IPrecedenceSymbolOwner { get; }

    public this(node : G.RuleBodyMember.Precedence, owner : IPrecedenceSymbolOwner)
    {
      base(GetNameLocation(node));
      AssemblyId   = AssemblyIds.CurrentAssembly;
      Owner = owner;
      _node = node;
    }
  }
}
