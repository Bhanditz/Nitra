using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  public interface IPrecedenceSymbolOwner : IExportableSymbol
  {
  }

  [Record, ExportableSymbol]
  public abstract class PrecedenceSymbol : MultipleDefSymbol
  {
    public abstract Owner          : IPrecedenceSymbolOwner { get; }
    public override Description    : string                 { get { "precedence" } }

    public static GetPrecedenceSymbol(owner : IPrecedenceSymbolOwner, identifier : Identifier) : PrecedenceSymbol
    {
      def symbol =
        match (owner.Node.BindMany.[PrecedenceSymbol](identifier.Value))
        {
          | [symbol] => symbol;
          | []       =>
            def symbol = ChemicalPrecedenceSymbol(identifier, owner);
            _ = owner.Node.Add(symbol, identifier.Location);
            symbol
          | _ :: _ => assert3(false);
        };
      symbol.AddDefinition(identifier.Location);
      symbol
    }
  }

  public sealed class ChemicalPrecedenceSymbol : PrecedenceSymbol
  {
    public override Owner : IPrecedenceSymbolOwner { get; }

    public this(identifier : Identifier, owner : IPrecedenceSymbolOwner)
    {
      base(identifier.Value);
      AssemblyId   = AssemblyIds.CurrentAssembly;
      Owner = owner;
    }
  }
}
