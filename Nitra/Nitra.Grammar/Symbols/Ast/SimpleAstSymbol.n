using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SimpleAstSymbol : AstSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string { get { if (IsDeclaration) "declaration" else "ast" } }
  }

  public sealed class ParsedSimpleAstSymbol : SimpleAstSymbol, IDependentPropertyAssignmentContainer
  {
    private         _node                     : G.NamespaceMember.SimpleAst;
    private         _assignments              : SCG.List[DependentPropertyAssignment];
    private mutable _initializedOutProperties : list[DependentAstPropertySymbol];

    public this(node : G.NamespaceMember.SimpleAst)
    {
      base(node.Name, node.Name.Value());
      _node                     = node;
      _assignments              = SCG.List();
      _initializedOutProperties = [];
    }

    public override IsDeclaration            : bool                             { get { false } }
    public override BaseAsts                 : list[AstSymbol]                  { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentAstPropertySymbol] { get { _initializedOutProperties } }

    public AddAssignment(assignment : DependentPropertyAssignment) : void { AddAssignmentImpl(assignment, _assignments, ref _initializedOutProperties); }
    public GetAssignments() : Seq[DependentPropertyAssignment] { _assignments }
  }

  public sealed class ParsedSimpleDeclarationSymbol : SimpleAstSymbol, IDependentPropertyAssignmentContainer
  {
    private         _node                     : G.NamespaceMember.SimpleAst;
    private         _assignments              : SCG.List[DependentPropertyAssignment];
    private mutable _initializedOutProperties : list[DependentAstPropertySymbol];

    public this(node : G.NamespaceMember.SimpleAst)
    {
      base(node.Name, node.Name.Value());
      _node                     = node;
      _assignments              = SCG.List();
      _initializedOutProperties = [];
    }

    public override IsDeclaration            : bool                             { get { true } }
    public override BaseAsts                 : list[AstSymbol]                  { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentAstPropertySymbol] { get { _initializedOutProperties } }

    public AddAssignment(assignment : DependentPropertyAssignment) : void { AddAssignmentImpl(assignment, _assignments, ref _initializedOutProperties); }
    public GetAssignments() : Seq[DependentPropertyAssignment] { _assignments }
  }
}
