using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensibleAstSymbol : AstSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string                          { get "extensible declaration" }
    public          Options     : Seq[ExtensionAstSymbol] { get { this.Node.GetDescendants.[ExtensionAstSymbol]() } }
  }

  public sealed class ParsedExtensibleAstSymbol : ExtensibleAstSymbol, IDependentPropertyAssignmentContainer
  {
    private         _node                     : G.NamespaceMember.ExtensibleAst;
    private         _assignments              : SCG.List[DependentPropertyAssignment];
    private mutable _initializedOutProperties : list[DependentAstPropertySymbol];

    public this(node : G.NamespaceMember.ExtensibleAst)
    {
      base(node.Name, node.Name.Value());
      _node                     = node;
      _assignments              = SCG.List();
      _initializedOutProperties = [];
    }

    public override BaseAsts                 : list[AstSymbol]                  { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentAstPropertySymbol] { get { _initializedOutProperties } }

    public AddAssignment(assignment : DependentPropertyAssignment) : void { AddAssignmentImpl(assignment, _assignments, ref _initializedOutProperties); }
    public GetAssignments() : Seq[DependentPropertyAssignment] { _assignments }
  }
}
