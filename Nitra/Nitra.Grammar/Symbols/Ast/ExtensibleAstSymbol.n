using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensibleAstSymbol : AstSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string                  { get { if (IsDeclaration) "extensible declaration" else "extensible ast" } }
    public override Cardinality : AstCardinality          { get { AstCardinality.Single } }
    public          Extensions  : Seq[ExtensionAstSymbol] { get { this.Node.GetDescendants.[ExtensionAstSymbol]() } }
  }

  public sealed class ParsedExtensibleAstSymbol : ExtensibleAstSymbol, IDependentPropertyAssignmentContainer
  {
    private         _node                     : G.NamespaceMember.ExtensibleAst;
    private         _assignments              : SCG.List[DependentPropertyAssignment];
    private mutable _initializedOutProperties : list[DependentAstPropertySymbol];

    public this(node : G.NamespaceMember.ExtensibleAst, isDeclaration : bool)
    {
      base(node.Name, node.Name.Value());
      _node                     = node;
      _assignments              = SCG.List();
      _initializedOutProperties = [];
      IsDeclaration             = isDeclaration;
    }

    private mutable _symbol : SymbolRef[SymbolSymbol];

    public override Symbol                   : SymbolRef[SymbolSymbol]          { get { assert(_symbol : object != null); _symbol } }
    public override IsDeclaration            : bool                             { get; }
    public override BaseAsts                 : list[AstSymbol]                  { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentAstPropertySymbol] { get { _initializedOutProperties } }

    public AddAssignment(assignment : DependentPropertyAssignment) : void { AddAssignmentImpl(assignment, _assignments, ref _initializedOutProperties); }
    public GetAssignments() : Seq[DependentPropertyAssignment] { _assignments }

    protected override CreateSymbolSymbol(allBaseAsts : SCG.HashSet[AstSymbol]) : SymbolRef[SymbolSymbol]
    {
      assert(_symbol : object == null);

      _ = allBaseAsts;
      _symbol =
        if (IsDeclaration)
        {
          def symbolSymbol = ParsedSymbolSymbol.Extensible(this);
          _ = Node.Parent.AddAndReport.[SymbolSymbol](symbolSymbol, FirstLocation);
          SymbolRef.Some(FirstLocation, true, symbolSymbol)
        }
        else
          SymbolRef.None(FirstLocation, true);

      _symbol
    }
  }
}
