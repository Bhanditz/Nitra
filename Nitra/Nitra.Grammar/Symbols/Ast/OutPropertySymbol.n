using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class OutPropertySymbol : DependentPropertySymbol
  {
    public override Direction   : DependentPropertyDirection { get DependentPropertyDirection.Out }
    public override Description : string                     { get "output property" }
  }

  public sealed class ParsedOutPropertySymbol : OutPropertySymbol
  {
    private _node : G.AstMember.OutProperty;

    public this(node : G.AstMember.OutProperty)
    {
      base(node.Name, node.Name.Value());
      _node            = node;
      OverrideProperty = SymbolRef.None(_node.Name.Location, false);
      LinkedProperty   = SymbolRef.None(_node.Name.Location, false);
    }

    public override OverrideProperty : SymbolRef[PropertySymbol]          { get; }
    public override LinkedProperty   : SymbolRef[DependentPropertySymbol] { get; }
    public override Type             : NType                                 { get { _node.Type } }
    public override Stage            : int                                   { get { _node.Stage() } }
  }

  public sealed class ParsedAutoOutPropertySymbol : OutPropertySymbol
  {
    private _node : G.AstMember.InOutProperty;

    public this(node : G.AstMember.InOutProperty)
    {
      base(node.Name, node.Name.Value() + "Out");
      _node            = node;
      OverrideProperty = SymbolRef.None(_node.Name.Location, false);
    }

    public override OverrideProperty : SymbolRef[PropertySymbol]          {           get; }
    public override LinkedProperty   : SymbolRef[DependentPropertySymbol] { [Memoize] get { SymbolRef.Some(_node.Name.Location, false, _node.InSymbol) } }
    public override Type             : NType                                 {           get { _node.Type } }
    public override Stage            : int                                   {           get { _node.Stage() } }
  }
}
