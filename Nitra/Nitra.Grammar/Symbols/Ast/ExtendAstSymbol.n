using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtendAstSymbol : SingleDefSymbol, INamespaceMember, IMemberSite
  {
    public abstract Extend        : SymbolRef[ExtensibleAstSymbol] { get; }
    public abstract IsDeclaration : bool                           { get; }
    public override Description   : string                         { get { if (IsDeclaration) "extend declaration" else "extend ast" } }
    public          Options       : Seq[ExtensionAstSymbol]        { get { this.Node.GetDescendants.[ExtensionAstSymbol]() } }
  }

  public sealed class ParsedExtendAstSymbol : ExtendAstSymbol
  {
    private _node : G.NamespaceMember.ExtendAst;

    public this(node : G.NamespaceMember.ExtendAst, isDeclaration : bool)
    {
      def nameLoc =
        if (node.NameOpt.HasValue)
          node.NameOpt.Value.Item1.Location
        else
          node.BaseName.CalcLocations().Last;
      base(nameLoc);
      _node = node;
      IsDeclaration = isDeclaration;
    }

    public override Extend        : SymbolRef[ExtensibleAstSymbol] { get { _node.BaseAstRef } }
    public override IsDeclaration : bool                           { get; }
  }
}
