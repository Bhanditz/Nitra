using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public abstract class AstSymbol : SingleDefSymbol
  {
    public abstract BaseAsts                 : list[AstSymbol]                  { get; }
    public abstract InitializedOutProperties : list[DependentAstPropertySymbol] { get; }
    public abstract IsDeclaration            : bool                             { get; }
    public abstract Cardinality              : AstCardinality                   { get; }

    public Properties : Seq[AstPropertySymbol]
    {
      get { this.Node.GetChildren.[AstPropertySymbol]() }
    }

    public ParentProperty : SymbolRef[ParentAstPropertySymbol]
    {
      [Memoize]
      get
      {
        def propertySymbol = AllProperties.OfType.[ParentAstPropertySymbol]().FirstOrDefault();
        if (propertySymbol != null)
          SymbolRef.Some(propertySymbol.FirstLocation, true, propertySymbol)
        else
          SymbolRef.None(FirstLocation, true)
      }
    }

    public AllBaseAsts : Seq[AstSymbol]
    {
      [Memoize]
      get
      {
        if (BaseAsts.IsEmpty)
          []
        else
        {
          def result = HashSet(BaseAsts);
          foreach (s in BaseAsts)
            result.UnionWith(s.AllBaseAsts);
          result.ToArray()
        }
      }
    }

    public AllProperties : Seq[AstPropertySymbol]
    {
      [Memoize]
      get
      {
        if (BaseAsts.IsEmpty)
          Properties
        else
        {
          def result = List(InheritedProperties);
          result.AddRange(Properties);
          result.ToArray()
        }
      }
    }

    public InheritedProperties : Seq[AstPropertySymbol]
    {
      [Memoize]
      get
      {
        match (BaseAsts)
        {
          | []             => []
          | first :: other =>
            def result = HashSet(first.AllProperties);
            foreach (s in other)
              result.UnionWith(s.AllProperties);
            result.ToArray()
        }
      }
    }

    public IsSubtypeOf(other : AstSymbol) : bool
    {
      this == other || this.AllBaseAsts.Contains(other)
    }

    [RecordIgnore]
    private mutable _propertyTable : Dictionary[string, AstPropertySymbol];

    public LookupProperty(name : string) : ValueOption[AstPropertySymbol]
    {
      when (_propertyTable == null)
      {
        _propertyTable = Dictionary();
        foreach (p in AllProperties)
          _propertyTable[p.Name] = p;
      }

      mutable symbol;
      if (_propertyTable.TryGetValue(name, out symbol))
        VSome(symbol)
      else
        VNone()
    }

    protected AddAssignmentImpl(assignment : DependentPropertyAssignment, assignments : List[DependentPropertyAssignment], initializedOutProperties : ref list[DependentAstPropertySymbol]) : void
    {
      assignments.Add(assignment);
      when (assignment.Path is [LocatedName(Id = propertyName)])
      {
        when (LookupProperty(propertyName) is VSome(DependentAstPropertySymbol(Direction = Out) as propertySymbol))
        {
          initializedOutProperties ::= propertySymbol;
        }
      }
    }
  }
}
