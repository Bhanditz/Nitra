using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SimplePropertySymbol : PropertySymbol
  {
    public        override Description                    : string { get "simple property" }
    public sealed override IsAssignableFromInitialization : bool   { get { true } }
  }

  public sealed class ParsedSimplePropertySymbol : SimplePropertySymbol
  {
    private _node : G.AstMember.SimpleProperty;

    public this(node : G.AstMember.SimpleProperty)
    {
      base(node.Name, node.Name.Value());
      _node            = node;
      OverrideProperty = SymbolRef.None(_node.Name.Location, false);
    }

    public override OverrideProperty : SymbolRef[PropertySymbol] { get; }
    public override Type             : NType                        { get { _node.Type } }
    public override AstType          : AstType                      { get { _node.AstType } }
  }
}
