using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

using G = NitraSyntaxParseTree;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class SymbolSymbol : SingleDefSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string             { get { "symbol" } }
    public abstract Declaration : AstSymbol          { get; }
    public abstract BaseSymbols : list[SymbolSymbol] { get; }
    //public abstract InitializedOutProperties : list[DependentAstPropertySymbol] { get; }
  }

  public variant ParsedSymbolSymbol : SymbolSymbol
  {
    | Abstract
    | Simple
    | Extensible
    | Extension

    public this(astSymbol : AstSymbol)
    {
      base (astSymbol.FirstLocation, astSymbol.Name + "Symbol");
      Declaration = astSymbol;
      BaseSymbols = [];
      foreach (ast in astSymbol.BaseAsts)
        when (ast.Symbol is SymbolRef.Some(baseSymbol))
          BaseSymbols ::= baseSymbol;
    }

    public override Declaration : AstSymbol          { get; }
    public override BaseSymbols : list[SymbolSymbol] { get; }
  }
}
