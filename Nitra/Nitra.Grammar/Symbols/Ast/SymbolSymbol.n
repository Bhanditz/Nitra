using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

using G = NitraSyntaxParseTree;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class SymbolSymbol : PropertyHostSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string             { get { "symbol" } }
    public abstract Declaration : AstSymbol          { get; }
    public abstract IsSealed    : bool               { get; }
    public abstract BaseSymbols : list[SymbolSymbol] { get; }
    //public abstract InitializedOutProperties : list[DependentPropertySymbol] { get; }

    public override LookupProperty(name : string) : ValueOption[PropertySymbol]
    {
      _ = name;
      throw NotImplementedException();
    }
  }

  public variant ParsedSymbolSymbol : SymbolSymbol
  {
    public this(astSymbol : AstSymbol, baseSymbols : list[SymbolSymbol])
    {
      base (astSymbol.FirstLocation, astSymbol.Name + "Symbol");
      Declaration = astSymbol;
      BaseSymbols = baseSymbols;
    }

    public override Declaration : AstSymbol          { get; }
    public override BaseSymbols : list[SymbolSymbol] { get; }

    | Abstract
      {
        public override IsSealed : bool { get { false } }
      }
    | Simple
      {
        public override IsSealed : bool { get { true } }
      }
    | Extensible
      {
        public override IsSealed : bool { get { false } }
      }
    | Extension
      {
        public override IsSealed : bool { get { true } }
      }
  }
}
