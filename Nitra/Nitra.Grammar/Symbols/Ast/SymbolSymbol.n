using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

using G = NitraSyntaxParseTree;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SymbolSymbol : SingleDefSymbol, INamespaceMember, IMemberSite
  {
    public override Description : string    { get { "symbol" } }
    public abstract Declaration : AstSymbol { get; }
    //public abstract InitializedOutProperties : list[DependentAstPropertySymbol] { get; }
  }

  public sealed class ParsedSymbolSymbol : SymbolSymbol//, IDependentPropertyAssignmentContainer
  {
    private         _node       : G.AstBody.Nested.Symbol;
    public override Declaration : AstSymbol { get; }

    public this(node : G.AstBody.Nested.Symbol, declaration : AstSymbol)
    {
      base(Location(node.Location.Source, node.KwSymbol), declaration.Name + "Symbol");
      _node                     = node;
      Declaration               = declaration;
    }
  }
}
