using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Drawing;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class StyleSymbol : SingleDefSymbol
  {
    public override Description     : string { get "style" }
    public abstract ForegroundColor : int    { get }
  }

  public sealed class ParsedStyleSymbol : StyleSymbol
  {
    private _properties : PropertyBag;

    public this(node : G.LanguageMember.Style)
    {
      this(node.Name.Location, node.Name.Value());
    }

    public this(loc : Location, name : string)
    {
      base(loc, name);
      _properties = PropertyBag(this);
    }

    public override ForegroundColor : int { get { _properties.GetProperty("ForegroundColor", Color.Empty.ToArgb()) } }

    internal SetForegroundColor(loc : Location, value : Color) : void
    {
      _properties.SetProperty("ForegroundColor", loc, value.ToArgb())
    }
  }
}
