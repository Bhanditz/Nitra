using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SyntaxModuleSymbol : SingleDefSymbol, IRuleDeclarationSite, INamespaceMember
  {
    public abstract Options             : SyntaxModuleOptions           { get; }
    public abstract TokenLiterals       : list[TokenLiteralSymbol]      { get; }
    public abstract ExternalImports     : list[SyntaxModuleSymbol]      { get; }
    public override Description         : string                        { get "syntax module" }
    public          DeclarationSite     : IRuleDeclarationSite          { get null }
    public          IsSplicable         : bool                          { get { SpliceSource.IsSome } }
    public abstract SpliceSource        : SymbolRef[SyntaxModuleSymbol] { get; }
    public abstract PrecedenceRelations : PrecedenceRelations           { get; }

    [RecordIgnore] private mutable _ruleIdCounter : int;

    internal GetNewRuleId() : int
    {
      def newId = _ruleIdCounter;
      ++_ruleIdCounter;
      newId
    }

    public GetAllRuleSymbols() : IEnumerable[RuleDefSymbol]
    {
      Node.GetDescendants.[RuleDefSymbol]()
    }

    public GetDefaultRuleDefinitionOptions() : RuleDefinitionOptions
    {
      def defaults = RuleDefinitionOptions.Empty;
      if (defaults.IsExplicitSpaces != Options.IsExplicitSpaces)
        defaults.SetExplicitSpaces(null, Options.IsExplicitSpaces)
      else
        defaults
    }
  }

  public sealed class ParsedSyntaxModuleSymbol : SyntaxModuleSymbol
  {
    private _node : G.NamespaceMember.SyntaxModule;

    public this(node : G.NamespaceMember.SyntaxModule)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override Options       : SyntaxModuleOptions           { [Memoize] get { _node.SyntaxModuleAttributes.Options(SyntaxModuleOptions.Empty) } }
    public override SpliceSource  : SymbolRef[SyntaxModuleSymbol] {           get; default SymbolRef.None(Location.Default, true) }
    public override TokenLiterals : list[TokenLiteralSymbol]
    {
      [Memoize] get
      {
        def loop(context : TokenLiteralContext, acc)
        {
          if (null == context)
            acc
          else
            loop(context.TryGetParent(), context.TokenLiteral :: acc)
        }
        loop(_node.FinalContext.TryGetContext(), [])
      }
    }

    public override ExternalImports : list[SyntaxModuleSymbol]
    {
      [Memoize] get
      {
        def loop(context : OpenNamespaceOrTypeContext, acc)
        {
          if (null == context)
            acc
          else
            loop(context.TryGetParent(), if (context.OpenSymbol is Some(SyntaxModuleSymbol as symbol)) symbol :: acc else acc)
        }
        loop(_node.FinalContext.TryGetContext(), [])
      }
    }

    public override PrecedenceRelations : PrecedenceRelations
    {
      [Memoize] get
      {
        def relations = List();
        foreach (member in _node.SyntaxModuleMembers)
        {
          def curRelations = member.GetPrecedenceRelations();
          when (curRelations != null)
            relations.AddRange(curRelations);
        }
        relations.NToList();
      }
    }
  }
}
