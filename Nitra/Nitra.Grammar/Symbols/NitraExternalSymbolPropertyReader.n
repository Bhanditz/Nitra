using Nitra.ProjectSystem;
using Nitra.Typing.RuleMethod;
using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public sealed class NitraExternalSymbolPropertyReader : DefaultExternalSymbolPropertyReader
  {
    public override ReadPropertyValue(metadataReader : IMetadataReader, symbol : Symbol, propertyName : string, type : Type) : object
    {
      match (symbol, propertyName)
      {
        | (DeclarationSymbol      as s, "ParentType") => Declaration_ParentType(metadataReader.Project :> NitraProject, s)
        | (DeclarationFieldSymbol as s, "Type")       => DeclarationField_Type(metadataReader.Project :> NitraProject, s)
        | (RuleMethodSymbol       as s, "Signature")  => RuleMethod_Signature(metadataReader.Project :> NitraProject, s)
        | _ => base.ReadPropertyValue(metadataReader, symbol, propertyName, type)
      }
    }

    private Declaration_ParentType(project : NitraProject, symbol : DeclarationSymbol) : NType
    {
      def nemerleType = project.GetNemerleType(symbol);

      mutable ntype;
      foreach (property is IProperty in nemerleType.TypeInfo.LookupMember("Parent", false))
      {
        ntype = ReflectNType(project, nemerleType.TypeOfMember(property), false);
        break;
      }
      assert(ntype != null);
      ntype
    }

    private DeclarationField_Type(project : NitraProject, symbol : DeclarationFieldSymbol) : NType
    {
      def nemerleType = project.GetNemerleType(symbol);

      mutable ntype;
      foreach (property is IProperty in nemerleType.TypeInfo.LookupMember(symbol.Name, false))
      {
        ntype = ReflectNType(project, nemerleType.TypeOfMember(property), false);
        break;
      }
      assert(ntype != null);
      ntype
    }

    private ReflectNType(project : NitraProject, typeVar : TypeVar, isFunc : bool) : NType
    {
      def loc = project.MakeFakeNitraLocation(typeVar.Location);
      match (typeVar)
      {
        | FixedType.Tuple(members)   when isFunc => NType.Tuple(loc, members.Map(ReflectNType(project, _, true))) // for function signatures
        | FixedType.Void                         => NType.Predefined(loc, NPredefinedType.Void)
        | FixedType.Fun(from, to)                => NType.Func(loc, ReflectNType(project, from, true), ReflectNType(project, to, true))
        | FixedType.Class(ti, [])    when ti.FullName == "System.Int32"                           => NType.Predefined(loc, NPredefinedType.Int)
        | FixedType.Class(ti, [])    when ti.FullName == "System.String"                          => NType.Predefined(loc, NPredefinedType.String)
        | FixedType.Class(ti, [])    when ti.FullName == "Nitra.Declarations.IDeclaration"        => NType.Predefined(loc, NPredefinedType.Declaration)
        | FixedType.Class(ti, [arg]) when ti.FullName == "Nitra.Declarations.DeclarationOption"   => NType.Option(loc, ReflectNType(project, arg, false))
        | FixedType.Class(ti, [arg]) when ti.FullName == "Nitra.Declarations.DeclarationList"     => NType.List(loc, ReflectNType(project, arg, false))
        | FixedType.Class(ti, args)  when ti.FullName == "Nitra.Declarations.DeclarationSequence" => NType.Tuple(loc, args.Map(ReflectNType(project, _, false)))
        | FixedType.Class(ti, args) =>
          def env       = ti.Manager.CoreEnv;
          def nameParts = ti.FullName.Split(array['.']);
          assert(nameParts.Length > 0);
          mutable typeNameParts = [TypeNamePart(loc, nameParts[nameParts.Length - 1], args.Map(ReflectNType(project, _, false)), env)];
          for (mutable i = nameParts.Length - 2; i >= 0; --i)
            typeNameParts ::= TypeNamePart(loc, nameParts[i], [], env);
          NType.Qualified(loc, typeNameParts)

        | _ => assert3(false, "Failed to reflect NType from TypeVar")
      }
    }

    private RuleMethod_Signature(project : NitraProject, symbol : RuleMethodSymbol) : RuleMethodSignature
    {
      def nemerleType = project.GetNemerleType(symbol.DeclaringRule);

      mutable signature;
      foreach (method is IMethod in nemerleType.TypeInfo.LookupMember(symbol.Name, false))
      {
        def loc        = project.MakeFakeNitraLocation(method.NameLocation);
        def parameters = method.Header.ParametersDeclarations;
        def type       = <[ $(method.ReturnType : typed) ]>;
        signature      = RuleMethodSignature(loc, parameters, type);
        break;
      }
      assert(signature != null);
      signature
    }
  }
}
