using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxAst;

namespace Nitra.Typing
{
  public class KeywordRegexContext : Context
  {
    public KeywordRegexes : list[G.RegexExpression * RuleSymbol] { get; }

    public this(parent : Context, matchTokens : G.RegexExpression, ruleName : G.QualifiedIdentifier)
    {
      base(parent);
      def rule = parent.Bind(ruleName);
      def parent     = TryGetParent.[KeywordRegexContext]();
      when (rule is Some(ruleSymbol))
        KeywordRegexes = (matchTokens, ruleSymbol) :: (parent?.KeywordRegexes ?? []);
    }

    public Matchers : list[RegularRuleMatcher * RuleSymbol] { [Memoize] get { KeywordRegexes.Map((re, rule) => (re.Typing().MakeMatcher(), rule)) } }

    public FindRule(keyword : string) : option[RuleSymbol]
    {
      foreach ((matcher, rule) in Matchers)
        when (matcher(keyword))
          return Some(rule);

      None()
    }

    public IsMatch(keyword : string) : bool
    {
      foreach ((matcher, _) in Matchers)
        when (matcher(keyword))
          return true;

      false
    }
  }
}
