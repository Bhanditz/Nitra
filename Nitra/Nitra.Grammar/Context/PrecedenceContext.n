using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record]
  public class PrecedenceRelation
  {
    public Symbol : IPrecedenceSymbolOwner;
    public Low : string;
    public Hi  : string;
  }

  public type PrecedenceRelations = list[PrecedenceRelation];

  public abstract class PrecedenceContext : Context
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public abstract GetPrecedence() : option[SymbolRef[PrecedenceSymbol]];

    public static Make(parent : Context, owner : IPrecedenceSymbolOwner, symbol : PrecedenceSymbol, node : G.RuleBodyMember.Precedence) : Context
    {
      match (node.PrecedenceName)
      {
        | Zero =>
          when (node.OrderOpt.HasValue)
            symbol.Node.Project.Error(node.OrderOpt, "Order not allowed for zero precedence.");
          PrecedenceZeroContext(parent);
        | Name =>
          //TODO добавить проверку порядка контекстов
          if (symbol != null)
          {
            def context = PrecedenceNamedContext(parent, symbol);
            when (node.OrderOpt.HasValue)
            {
              def bind(location : Location)
              {
                match (owner.Node.BindMany.[PrecedenceSymbol](location))
                {
                  | [symbol]    => symbol
                  | []          => symbol.Node.Project.Error(location, "Undeclared precedence."); null
                  | symbol :: _ => symbol.Node.Project.Error(location, "Ambiguous precedence."); symbol
                }
              }
              match (node.OrderOpt.Value.Item2)
              {
                | order is G.RuleBodyMember.Precedence.Nested.Order.Full =>
                  def symbolLow = bind(order.Name1.Location);
                  def symbolMid = bind(order.Name2.Location);
                  def symbolHi  = bind(order.Name3.Location);
                  when (symbolLow != null && symbolMid != null && symbolHi != null)
                    if (symbolMid == symbol)
                    {
                      context.AddRelation(PrecedenceRelation(owner, symbolLow.Name.ToString(), symbolMid.Name.ToString()));
                      context.AddRelation(PrecedenceRelation(owner, symbolMid.Name.ToString(), symbolHi.Name.ToString()));
                    }
                    else
                      symbol.Node.Project.Error(order.Name2.Location, "Middle precedence must be same as current precedence.");

                | order is G.RuleBodyMember.Precedence.Nested.Order.Partial =>
                  def symbol1 = bind(order.Name1.Location);
                  def symbol2 = bind(order.Name2.Location);
                  when (symbol1 != null && symbol2 != null)
                    if (symbol1 == symbol || symbol2 == symbol)
                      context.AddRelation(PrecedenceRelation(owner, symbol1.Name.ToString(), symbol2.Name.ToString()));
                    else
                      symbol.Node.Project.Error(order.Location, "On of precedencies must be same as current precedence.");

                | _ => assert2(false);
              }
            }
            context
          }
          else
            parent;
        | _    => assert3(false);
      }
    }

    public static MakePrecedenceRelations(context : Context) : PrecedenceRelations
    {
      def contexts = List();
      def collectContexts(_)
      {
        | context is PrecedenceStartContext => contexts.Add(context); 
        | context is PrecedenceContext      => contexts.Add(context); collectContexts(context.Parent);
        | context                           =>                        collectContexts(context.Parent);
      }
      collectContexts(context);
      contexts.Reverse();
      def relations = List();
      mutable prevName = null;
      mutable symbol   = null;
      foreach (context in contexts)
      {
        | context is PrecedenceStartContext => symbol = context.Owner;
        | _       is PrecedenceZeroContext  => prevName = null;
        | context is PrecedenceNamedContext =>
          def name = context.Symbol.Name;
          when (prevName != null)
            relations.Add(PrecedenceRelation(symbol, prevName, name));
          prevName = name;
          relations.AddRange(context.Relations);
        | _ => assert3(false);
      }
      relations.NToList();
    }
  }

  public sealed class PrecedenceStartContext : PrecedenceContext
  {
    public Owner : IPrecedenceSymbolOwner;
    public this(parent : Context, owner : IPrecedenceSymbolOwner)
    {
      base(parent);
      Owner = owner;
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceZeroContext : PrecedenceContext
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceNoneContext : PrecedenceContext
  {
    public this()
    {
      base(null);
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceNamedContext : PrecedenceContext
  {
    public Symbol : PrecedenceSymbol;
    public Relations : List[PrecedenceRelation] = List();
    public this(parent : Context, symbol : PrecedenceSymbol)
    {
      base(parent);
      Symbol = symbol;
    }

    public AddRelation(relation : PrecedenceRelation) : void
    {
      Relations.Add(relation);
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      Some(SymbolRef.Some(Location.Default, true, Symbol));//TODO proper location
    }
  }

  [Record]
  public class PrecedenceInfo
  {
    public Context : PrecedenceContext { get; }
    public IsRightAssociative : bool { get; }
    public IsStrong : bool { get; }
    public static None : PrecedenceInfo { get; default PrecedenceInfo(PrecedenceNoneContext(), false, false) }
  }
}
