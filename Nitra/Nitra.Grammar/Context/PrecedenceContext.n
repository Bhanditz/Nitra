using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public type PrecedenceRelations = List[string * string];

  public abstract class PrecedenceContext : Context
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public abstract GetPrecedence() : option[SymbolRef[PrecedenceSymbol]];

    public static Make(parent : Context, owner : IRuleDeclarationSite, symbol : PrecedenceSymbol, node : G.RuleBodyMember.Precedence) : Context
    {
      match (node.PrecedenceName)
      {
        | Zero => PrecedenceZeroContext(parent, owner);
        | Name => if (symbol != null) PrecedenceNamedContext(parent, symbol) else parent;
        | _    => assert3(false);
      }
    }

    public static MakePrecedenceRelations(context : Context) : PrecedenceRelations
    {
      def contexts = List();
      def collectContexts(_)
      {
        | _       is PrecedenceStartContext => ();
        | context is PrecedenceContext      => contexts.Add(context); collectContexts(context.Parent);
        | context                           =>                        collectContexts(context.Parent);
      }
      collectContexts(context);
      contexts.Reverse();
      def relations = List();
      mutable prevName = null;
      foreach (context in contexts)
      {
        | _       is PrecedenceZeroContext  => prevName = null;
        | context is PrecedenceNamedContext =>
          def name = context.Symbol.Name;
          when (prevName != null)
            relations.Add(prevName, name);
          prevName = name;
        | _ => ()//TODO: report error
      }
      relations;
    }
  }

  public sealed class PrecedenceStartContext : PrecedenceContext
  {
    private _owner : IRuleDeclarationSite;
    public this(parent : Context, owner : IRuleDeclarationSite)
    {
      base(parent);
      _owner = owner;
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceZeroContext : PrecedenceContext
  {
    private _owner : IRuleDeclarationSite;
    public this(parent : Context, owner : IRuleDeclarationSite)
    {
      base(parent);
      _owner = owner;
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceNoneContext : PrecedenceContext
  {
    public this()
    {
      base(null);
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceNamedContext : PrecedenceContext
  {
    public Symbol : PrecedenceSymbol;
    public this(parent : Context, symbol : PrecedenceSymbol)
    {
      base(parent);
      Symbol = symbol;
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      Some(SymbolRef.Some(Location.Default, true, Symbol));//TODO proper location
    }
  }

  [Record]
  public class PrecedenceInfo
  {
    public Context : PrecedenceContext { get; }
    public IsRightAssociative : bool { get; }
    public IsStrong : bool { get; }
    public static None : PrecedenceInfo { get; default PrecedenceInfo(PrecedenceNoneContext(), false, false) }
  }
}
