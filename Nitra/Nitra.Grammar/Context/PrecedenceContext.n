using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record]
  public class PrecedenceRelation
  {
    public Symbol : IPrecedenceSymbolOwner;
    public Low : string;
    public Hi  : string;
  }

  public type PrecedenceRelations = list[PrecedenceRelation];

  public abstract class PrecedenceContext : Context
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public abstract GetPrecedence() : option[SymbolRef[PrecedenceSymbol]];
    public virtual Typing() : void {}

    public static Make(parent : Context, owner : IPrecedenceSymbolOwner, symbol : PrecedenceSymbol, node : G.RuleBodyMember.Precedence) : Context
    {
      match (node.PrecedenceName)
      {
        | Zero =>
          when (node.Order.HasValue)
            symbol.Node.Project.Error(node.Order, "Order not allowed for zero precedence.");
          PrecedenceZeroContext(parent);
        | Name =>
          //TODO добавить проверку порядка контекстов
          if (symbol != null)
            PrecedenceNamedContext(parent, owner, symbol, node);
          else
            parent;
        | _    => assert3(false);
      }
    }

    public static MakePrecedenceRelations(context : Context) : PrecedenceRelations
    {
      def contexts = List();
      def collectContexts(_)
      {
        | context is PrecedenceStartContext => contexts.Add(context); 
        | context is PrecedenceContext      => contexts.Add(context); collectContexts(context.Parent);
        | context                           =>                        collectContexts(context.Parent);
      }
      collectContexts(context);
      contexts.Reverse();
      def relations = List();
      mutable prevName = null;
      mutable symbol   = null;
      foreach (context in contexts)
      {
        | context is PrecedenceStartContext => symbol = context.Owner;
        | _       is PrecedenceZeroContext  => prevName = null;
        | context is PrecedenceNamedContext =>
          def name = context.Symbol.Name;
          when (prevName != null)
            relations.Add(PrecedenceRelation(symbol, prevName, name));
          prevName = name;
          relations.AddRange(context.Relations);
        | _ => assert3(false);
      }
      relations.NToList();
    }
  }

  public sealed class PrecedenceStartContext : PrecedenceContext
  {
    public Owner : IPrecedenceSymbolOwner;
    public this(parent : Context, owner : IPrecedenceSymbolOwner)
    {
      base(parent);
      Owner = owner;
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceZeroContext : PrecedenceContext
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceNoneContext : PrecedenceContext
  {
    public this()
    {
      base(null);
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      None();
    }
  }

  public sealed class PrecedenceNamedContext : PrecedenceContext
  {
    public  Symbol : PrecedenceSymbol;
    private Owner : IPrecedenceSymbolOwner;
    private Node : G.RuleBodyMember.Precedence;
    public  Relations : List[PrecedenceRelation] = List();

    public this(parent : Context, owner : IPrecedenceSymbolOwner, symbol : PrecedenceSymbol, node : G.RuleBodyMember.Precedence)
    {
      base(parent);
      Symbol = symbol;
      Owner  = owner;
      Node   = node;
    }

    public AddRelation(relation : PrecedenceRelation) : void
    {
      Relations.Add(relation);
    }

    public override Typing() : void
    {
      when (Node.Order.HasValue)
      {
        def bind(identifier : G.Identifier)
        {
          def location = identifier.Location;
          def symbols = Owner.Node.BindMany.[PrecedenceSymbol](location);
          def symbols = match (symbols)
          {
            | []      => 
              if (Owner is ExtendSyntaxSymbol as owner)
                if (owner.Extend.HasValue)
                  owner.Extend.GetValue(Symbol.Node.Project).Node.BindMany.[PrecedenceSymbol](location);
                else
                  [];
              else
                [];
            | symbols => symbols
          }
          match (symbols)
          {
            | [symbol]    => symbol
            | []          => Symbol.Node.Project.Error(location, "Undeclared precedence."); null
            | symbol :: _ => symbol.Node.Project.Error(location, "Ambiguous precedence."); symbol
          }
        }
        def symbols = Node.Order.Value.Item2.Item1.Map(bind);
        unless (symbols.Count(s => s : object == Symbol) == 1)
          Symbol.Node.Project.Error(Node.Order.Location, "On of precedencies must be same as current precedence.");
        mutable prevSymbol = null;
        foreach (symbol in symbols)
        {
          when (prevSymbol != null && symbol != null)
            AddRelation(PrecedenceRelation(Owner, prevSymbol.Name.ToString(), symbol.Name.ToString()));
          prevSymbol = symbol;
        }
      }
    }

    public override GetPrecedence() : option[SymbolRef[PrecedenceSymbol]]
    {
      Some(SymbolRef.Some(Location.Default, true, Symbol));//TODO proper location
    }
  }

  [Record]
  public class PrecedenceInfo
  {
    public Context : PrecedenceContext { get; }
    public IsRightAssociative : bool { get; }
    public IsStrong : bool { get; }
    public static None : PrecedenceInfo { get; default PrecedenceInfo(PrecedenceNoneContext(), false, false) }
  }
}
