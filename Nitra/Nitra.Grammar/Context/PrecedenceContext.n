using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public abstract class PrecedenceContext : Context
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public static Make(parent : Context, owner : IRuleDeclarationSite, symbol : PrecedenceSymbol, node : G.RuleBodyMember.Precedence) : Context
    {
      match (node.PrecedenceName)
      {
        | Zero => PrecedenceZeroContext(parent, owner);
        | Name => if (symbol != null) PrecedenceNamedContext(parent, symbol) else parent;
        | _    => assert3(false);
      }
    }
  }

  public sealed class PrecedenceZeroContext : PrecedenceContext
  {
    private _owner : IRuleDeclarationSite;
    public this(parent : Context, owner : IRuleDeclarationSite)
    {
      base(parent);
      _owner = owner;
    }
  }

  public sealed class PrecedenceNamedContext : PrecedenceContext
  {
    private Symbol : PrecedenceSymbol;
    public this(parent : Context, symbol : PrecedenceSymbol)
    {
      base(parent);
      Symbol = symbol;
    }
  }

  [Record]
  public class PrecedenceInfo
  {
    public Context : PrecedenceContext { get; }
    public IsRightAssociative : bool { get; }
    public IsStrong : bool { get; }
  }
}
