using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;
using L = NitraLiteralsParseTree;

namespace Nitra.Typing
{
  public class TokenLiteralContext : Context, ITokenNamesMapContext
  {
    public TokenLiteral    : TokenLiteralSymbol { get; }
    public TokenNamesMap : Map[string, TokenLiteralSymbol]
    {
      [Memoize] get
      {
        TokenLiteral.StringLiterals.FoldLeft(GetParent.[ITokenNamesMapContext]().TokenNamesMap, (lit, map) => map.Replace(lit, TokenLiteral))
      }
    }

    public this(parent : Context, name : G.Identifier, stringLiterals : ListParseTree[L.StringLiteral])
    {
      base(parent);
      TokenLiteral     = ParsedTokenLiteralSymbol(name, stringLiterals);
      Project.AddSymbolDef(TokenLiteral, name.Location);
    }

    public override ToString() : string
    {
      $<#literal $(TokenLiteral.Name) = ..$(TokenLiteral.StringLiterals; ", ")#>
    }
  }

  public interface ITokenNamesMapContext : IContext
  {
    TokenNamesMap : Map[string, TokenLiteralSymbol] { get; }
  }
}
