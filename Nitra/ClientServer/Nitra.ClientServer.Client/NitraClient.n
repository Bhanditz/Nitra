using System.Reflection;
using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;

namespace Nitra.ClientServer.Client
{
  using Nitra.ClientServer.Messages.ServerMessage;
  
  public sealed class NitraClient : IDisposable
  {
    public StringManager : StringManager = StringManager();
    public PipeName    : string = Guid.NewGuid().ToString();
    
    mutable _isDisposed : bool;
    
    _serverProc : Process;
    _pipeServer : NamedPipeServerStream;
    _writer     : BinaryWriter;
    
    public this()
    {
      def executingAssemblyPath = Assembly.GetExecutingAssembly().Location;
      def assembliesPath        = Path.GetDirectoryName(executingAssemblyPath);
      def serverPath            = Path.Combine(assembliesPath, "Nitra.ClientServer.Server.exe");
      def serverProc            = Process.Start(serverPath, PipeName);
      assert(serverProc != null);
      _serverProc = serverProc;
      _pipeServer = NamedPipeServerStream(PipeName, PipeDirection.InOut);
      _pipeServer.WaitForConnection();
      _writer = BinaryWriter(_pipeServer);
      Send(Messages.ServerMessage.CheckVersion(Message.AssemblyVersionGuid));
    }
    
    SendLoadProject       (path : string, projectDir : string)  : void { Send(LoadProject(StringManager[path], path, projectDir)) }
    SendUnloadProject     (path : string)                       : void { Send(UnloadProject(StringManager[path])) }
    SendRanameProject     (oldPath : string, newPath : string)  : void { Send(RanameProject(StringManager[oldPath], StringManager[newPath], newPath)) }
    SendLoadReference     (path : string, kind : ReferenceKind) : void { Send(LoadReference(path, kind)) }
    SendUnloadReference   (path : string, kind : ReferenceKind) : void { Send(UnloadReference(path, kind)) }
    SendLoadFile          (path : string)                       : void { Send(LoadFile(path, StringManager[path])) }
    SendUnloadFile        (path : string)                       : void { Send(UnloadFile(StringManager[path])) }
    SendRanameFile        (oldPath : string, newPath : string)  : void { Send(RanameFile(StringManager[oldPath], StringManager[newPath], newPath)) }
    SendLoadInMemoryFile  (name : string, content : string)     : void { Send(LoadInMemoryFile(StringManager[name], name, content)) }
    SendUnloadInMemoryFile(path : string)                       : void { Send(UnloadInMemoryFile(StringManager[path])) }
    
    public Send([NotNull] msg : ServerMessage) : void
    {
      msg.Serialize(_writer);
      _writer.Flush();
    }
    
    public Dispose() : void
    {
      when (_isDisposed)
        return;
        
      Send(Messages.ServerMessage.Shutdown());
      
      unless (_serverProc.WaitForExit(5000))
        _serverProc.Kill();
      
      _pipeServer.Dispose();
      _isDisposed = true;
      GC.SuppressFinalize(this);
    }
    
    protected override Finalize() : void
    {
      Dispose();
    }
  }
}
