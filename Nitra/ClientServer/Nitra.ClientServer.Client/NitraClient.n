using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;

namespace Nitra.ClientServer.Client
{
  using Nitra.ClientServer.Messages.ServerMessage;
  
  public sealed class NitraClient : IDisposable
  {
    public StringManager : StringManager;
    public PipeName      : string = Guid.NewGuid().ToString();
    
    mutable _isDisposed : bool;
    
    _serverProc : Process;
    _pipeServer : NamedPipeServerStream;
    _writer     : BinaryWriter;
    
    public this(stringManager : StringManager)
    {
      StringManager = stringManager;
      def executingAssemblyPath = Assembly.GetExecutingAssembly().Location;
      def assembliesPath        = Path.GetDirectoryName(executingAssemblyPath);
      def serverPath            = Path.Combine(assembliesPath, "Nitra.ClientServer.Server.exe");
      def serverProc            = Process.Start(serverPath, PipeName);
      assert(serverProc != null);
      _serverProc = serverProc;
      _pipeServer = NamedPipeServerStream(PipeName, PipeDirection.InOut);
      _pipeServer.WaitForConnection();
      _writer = BinaryWriter(_pipeServer);
      Send(Messages.ServerMessage.CheckVersion(Message.AssemblyVersionGuid));
    }
    
    public Send([NotNull] msg : ServerMessage) : void
    {
      when (!_pipeServer.IsConnected)
      {
        assert2(true);
      }
      msg.Serialize(_writer);
    }
    
    public Flush() : void
    {
      _writer.Flush();
    }
    
    public Dispose() : void
    {
      when (_isDisposed)
        return;
        
      Send(Messages.ServerMessage.Shutdown());
      
      _pipeServer.Dispose();
      _isDisposed = true;
      GC.SuppressFinalize(this);
    }
    
    protected override Finalize() : void
    {
      Dispose();
    }
  }
}
