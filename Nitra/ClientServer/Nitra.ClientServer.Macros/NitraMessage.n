using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Macros;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ClientServer.Macros
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(tb : TypeBuilder)
  {
    tb.UserData["Nitra.ClientServer.Macros.NitraMessage"] = true;
  }
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(tb: TypeBuilder)
  {
    tb.AddMacroAttribute(<[ Nemerle.Core.Record ]>);
    NitraMessageImpl(Macros.ImplicitCTX(), tb).TransformBeforeTypedMembers(tb);
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro NitraMessage(tb: TypeBuilder)
  {
    NitraMessageImpl(Macros.ImplicitCTX(), tb).Transform(tb);
  }

  variant SupportedType
  {
    | Struct
    | AbstractClass
    | BaseClass
    | DerivedClass
  }

  class NitraMessageImpl 
  {
    _typer             : Typer;
    _immutableArray_tc : TypeInfo;
    _binaryWriterType  : FixedType.Class;
    _binaryReaderType  : FixedType.Class;

    public this([NotNull] typer : Typer, [NotNull] tb : TypeBuilder)
    {
      _typer = typer;
      DefineMacroContext(typer);
      def immutableArray = <[ ttype: System.Collections.Immutable.ImmutableArray[_] ]>;

      unless (CheckBind(immutableArray))
        Message.FatalError(tb.Location, "Current project must contain reference to System.Collections.Immutable.dll or implement System.Collections.Immutable.ImmutableArray<>.");

      _immutableArray_tc = immutableArray.TypeInfo;

      _binaryWriterType = <[ ttype: System.IO.BinaryWriter ]>;
      _binaryReaderType = <[ ttype: System.IO.BinaryReader ]>;
    }

    public GetSerializeMethod(type : FixedType) : option[MethodBuilder]
    {
      def members = type.TypeInfo?.LookupMember("Serialize");
      
      match (members)
      {
        | [method is MethodBuilder] when 
          method.Header.Parameters.Length == 1 
          && method.Header.Parameters.Head.Type.Equals(_binaryWriterType)
          && method.ReturnType is FixedType.Void
          && !method.IsStatic
          && method.IsPublic => Some(method)
        | _ => None()
      }
    }

    public IsImmutableArray(type : FixedType) : bool
    {
      type.TypeInfo?.Equals(_immutableArray_tc)
    }

    public IsArray(type : FixedType) : bool
    {
      type is FixedType.Array(_, 1)
    }

    public IsNemerleList(type : FixedType) : bool
    {
      type.TypeInfo?.Equals(_typer.InternalType.Nemerle_list_tc)
    }

    public CheckBind(type : FixedType) : bool
    {
      !(type is FixedType.Void || _typer.Manager.InternalType.Object.Equals(type))
    }

    [Record]
    class RecordField
    {
      public Name: string;
      public Type: FixedType;
      public Declared: bool
    }
    
    public Transform(tb: TypeBuilder): void
    {
      _typer.Manager.MacroColors.InGlobalColor(
      fun()
      {
        TransformImpl(tb);
      });
    }

    TransformImpl(tb: TypeBuilder): void
    {
      match (GetSupportedType(tb))
      {
        | Some(ty) =>
          def type = tb.GetMemType();
          def fields = GetRecordFields(tb);
          def serializeExprs = fields.Filter(_.Declared).Map(Serialize);
          
          match (tb.LookupMember("Serialize"))
          {
            | [serialize is MethodBuilder] =>
              match (ty) 
              {
                | SupportedType.Struct       => serialize.Body = <[ writer.Write(this.MsgId); ..$(serializeExprs) ]>;
                | SupportedType.DerivedClass => serialize.Body = <[ base.Serialize(writer); ..$(serializeExprs) ]>;
                | SupportedType.AbstractClass
                | SupportedType.BaseClass => 
                  serialize.Body =
                    if (tb.IsSealed || tb.IsValueType)
                      <[ writer.Write(this.MsgId); ..$(serializeExprs) ]>
                    else 
                      <[ writer.Write(this.MsgId); ..$(serializeExprs) ]>;
              }
          
            | _ => ()
          }

          match (tb.LookupMember("Deserialize"))
          {
            | [deserialize is MethodBuilder] =>
              match (ty)
              {
                | SupportedType.Struct
                | SupportedType.BaseClass
                | SupportedType.DerivedClass when !tb.IsAbstract =>
                  deserialize.Body = <[ IgnoreParams(); $(type : typed)(..$(fields.Map(Deserialize))) ]>;

                | _ => ()
              }            
              
            | _ => ()
          }
          
          foreach (v in tb.GetVariantOptions())
            Transform(v);
          
        | _ => ()
      }
    }
    
    GetRecordFields(tb: TypeBuilder): list[RecordField] 
    {
      Macros.DefineCTX(_typer);
      def mappedMemberAttr = <[ ttype: Nemerle.Internal.MappedMemberAttribute; ]>.TypeInfo;
      def recordCtor = tb.GetConstructors().Find(m => m.IsCustomAttributeDefined("Nemerle.Internal.RecordCtorAttribute"));
      def declaredFieldNames = tb.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public).Filter(x => !x.IsStatic).Map(x => x.Name);
      
      match (recordCtor)
      {
        | Some(ctor) => 
          ctor.GetParameters().Map(param => 
          {
            match (param.AttributesAndModifiers.FindAttributeWithArgs(mappedMemberAttr, tb.GlobalEnv)) 
            {
              | Some((_, [<[$(name: string)]>])) =>
                  RecordField(name, param.Type.FixedValue, declaredFieldNames.Contains(name))
              | _ => assert(false)
            }
          })
        | None => Message.FatalError(tb.Location, "Record constructor was not found")
      }
    }

    Serialize(field : RecordField): PExpr
    {
      def expr = SerializeValue(field.Type, <[ this.$(field.Name : usesite) ]>);
      if (expr == null)
      {
        assert2(false);
        Message.Error("The NitraMessage macro supports types which define Serialize(System.IO.BinaryWriter) method or primitive types. " +
                      $"Try to add NitraMessage macro attribute to $(field.Type) type.");
        <[ () ]>
      }
      else
        expr
    }

    SerializeValue(type : FixedType, valueExpr : PExpr): PExpr
    {
      if (type.IsEnum)
      {
        def underlyingType = FixedType.Class(type.TypeInfo.UnderlyingType, []);
        SerializeValue(underlyingType, <[ $valueExpr :> $(underlyingType : typed) ]>)
      }
      else if (GetSerializeMethod(type).IsSome)
        <[ 
            Nitra.ClientServer.Messages.Deserializer.Trace("Serialize object Type=" + type);
            $valueExpr.Serialize(writer);
        ]>
      else if (type.IsPrimitive)
        <[ writer.Write($valueExpr); ]>
      else if (type.Equals(_typer.InternalType.String))
        <[ writer.Write($valueExpr ?? ""); ]>
      else if (IsNemerleList(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;

        <[
          def lst = $valueExpr;
          if (lst == null)
          {
            writer.Write(0 : UInt32)
          }
          else
          {
            def len = lst.Length;
            writer.Write(len);
            def loop(lst : list[_]) : void
            {
              | head :: tail => 
              loop(tail); // reverse order (can cause StackOverflowException)
              $(SerializeValue(elemType, <[ head ]>));

              | null | [] => ()
            }
            loop(lst)
          }
        ]>
      }
      else if (IsImmutableArray(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;

        <[
          def immutableArray = $valueExpr;
          // The default value of ImmutableArray<T> has the underlying array initialized with a null reference.
          // Trying to call `Lenght` or `IsEmpty` on such arrays will raise an exception, so we must check `IsDefault`
          // property first.
          if (immutableArray.IsDefault)
          {
            writer.Write(0 : UInt32); 
          }
          else
          {
            writer.Write(immutableArray.Length);
          
            for (mutable i = 0; i < immutableArray.Length; i++)
            {
              def elem = immutableArray[i];
              $(SerializeValue(elemType, <[ elem ]>));
            }
          }
        ]>
      }
      else if (IsArray(type))
      {
        def elemType = (type :> FixedType.Array).t :> FixedType;

        <[
          def aArray = $valueExpr;
          if (aArray != null)
          {
            Nitra.ClientServer.Messages.Deserializer.Trace("Serialize array len=" + aArray.Length);
            writer.Write(aArray.Length);
          
            foreach (elem in aArray)
              $(SerializeValue(elemType, <[ elem ]>));
          }
          else
          {
            Nitra.ClientServer.Messages.Deserializer.Trace("Serialize array null");
            writer.Write(-1);
          }
        ]>
      }
      else
      {
        null
      }
    }

    Deserialize(field : RecordField): PExpr
    {
      DeserializeValue(field.Type)
    }

    DeserializeValue(type : FixedType) : PExpr
    {
      if (type.IsEnum)
      {
        def underlyingType = FixedType.Class(type.TypeInfo.UnderlyingType, []);
        def result = DeserializePrimitiveValue(underlyingType);
        <[ $result :> $(type : typed) ]>
      }
      else if (type.IsPrimitive || type.Equals(_typer.InternalType.String))
        DeserializePrimitiveValue(type)
      else if (IsNemerleList(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;
        <[
          def len = reader.ReadUInt32();
          assert(len >= 0);
          def loop(i : uint, result)
          {
            if (i > 0)
            {
              def value = $(DeserializeValue(elemType));
              loop(i - 1, value :: result);
            }
            else result
          }

          loop(len, [])
        ]>
      }
      else if (IsImmutableArray(type))
      {
        def elemType = (type :> FixedType.Class).args.Head :> FixedType;

        <[
          def len = reader.ReadUInt32();
          assert(len >= 0);
          if (len == 0)
            System.Collections.Immutable.ImmutableArray.Create.[$(elemType : typed)]()
          else
          {
            def builder = System.Collections.Immutable.ImmutableArray.CreateBuilder.[$(elemType : typed)]();
            def loop(i : uint) : void
            {
              when (i > 0)
              {
                def value = $(DeserializeValue(elemType));
                builder.Add(value);
                loop(i - 1);
              }
            }

            loop(len);
            builder.ToImmutable()
          }
        ]>
      }                       
      else if (IsArray(type))
      {
        def elemType = (type :> FixedType.Array).t :> FixedType;

        <[
          def len = reader.ReadInt32();
          Nitra.ClientServer.Messages.Deserializer.Trace("Deserializer array len=" + len);
          if (len >= 0)
          {
            def aArray : array[$(elemType : typed)] = array(len);
            for (mutable i = 0; i < aArray.Length; i++)
              aArray[i] = $(DeserializeValue(elemType));
            
            aArray
          }
          else
          {
            null
          }
        ]>
      }                       
      else if (type.IsValueType)
      {
        def id = MessageRegistry.Register(_typer.Manager, type);
        <[ 
          Nitra.ClientServer.Messages.Deserializer.Trace("Deserializer ValueType Type=" + type);
          def id = reader.ReadInt16();
          assert2(id == $id);
          $(type : typed).Deserialize(reader);
        ]>
      }
      else 
        <[
          Nitra.ClientServer.Messages.Deserializer.Trace("Deserializer object Type=" + type);
          Nitra.ClientServer.Messages.Deserializer.Deserialize.[$(type : typed)](reader);
        ]>
    }

    DeserializePrimitiveValue(type : FixedType) : PExpr
    {
      def ti = type.TypeInfo;
      assert(ti != null);
      def internalType = _typer.InternalType;

      def getReadMethodNameExpr(ti : TypeInfo)
      {
        if (internalType.Int16_tc.Equals(ti))        <[ ReadInt16 ]>
        else if (internalType.Int32_tc.Equals(ti))   <[ ReadInt32 ]>
        else if (internalType.Int64_tc.Equals(ti))   <[ ReadInt64 ]>
        else if (internalType.Char_tc.Equals(ti))    <[ ReadChar ]>
        else if (internalType.SByte_tc.Equals(ti))   <[ ReadSByte ]>

        else if (internalType.UInt16_tc.Equals(ti))  <[ ReadUInt16 ]>
        else if (internalType.UInt32_tc.Equals(ti))  <[ ReadUInt32 ]>
        else if (internalType.UInt64_tc.Equals(ti))  <[ ReadUInt64 ]>
        else if (internalType.Byte_tc.Equals(ti))    <[ ReadByte ]>

        else if (internalType.Single_tc.Equals(ti))  <[ ReadSingle ]>
        else if (internalType.Double_tc.Equals(ti))  <[ ReadDouble ]>
        else if (internalType.Decimal_tc.Equals(ti)) <[ ReadDecimal ]>

        else if (internalType.Boolean_tc.Equals(ti)) <[ ReadBoolean ]>

        else if (internalType.String_tc.Equals(ti))  <[ ReadString ]>
        else
          assert(false);
      }

      def readExpr = getReadMethodNameExpr(ti);

      <[ reader.$readExpr() ]>
    }

    public GetSupportedType(tb: TypeBuilder): option[SupportedType]
    {
      def hasNitraMessageAttribute(t : FixedType) : bool
      {
        | FixedType.Class(tb is TypeBuilder, _) => 
          match (tb.UserData["Nitra.ClientServer.Macros.NitraMessage"])
          {
            | x is bool => x
            | _ => false
          }
          
        | _ => false
      }
      match (tb)
      {
        | _ when tb.IsDelegate with n = "delegates"
        | _ when tb.IsInterface with n = "interfaces"
        | _ when tb.IsModule with n = "modules" => 
            Message.Error(tb.Location, $"$n are not supported.");
            None()

        | _ when tb.IsValueType                                      => Some(SupportedType.Struct())
        | _ when tb.GetSuperTypes().Exists(hasNitraMessageAttribute) => Some(SupportedType.DerivedClass())
        | _ when tb.IsAbstract                                       => Some(SupportedType.AbstractClass())
        | _                                                          => Some(SupportedType.BaseClass())
      }
    }
    
    public TransformBeforeTypedMembers([NotNull] tb : TypeBuilder) : void
    {
      _typer.Manager.MacroColors.InGlobalColor(
        fun()
        {
          TransformBeforeTypedMembersImpl(tb);
        });
    }

    TransformBeforeTypedMembersImpl(tb : TypeBuilder) : void
    {
      match (GetSupportedType(tb))
      {
        | Some(ty) =>
          def type = tb.GetMemType();
          def getId() { MessageRegistry.Register(_typer.Manager, type) }
          def define(x) { _ = tb.DefineWithSource(x) }
          
          match (ty)
          {
            | SupportedType.Struct        => define(<[decl: public MsgId: short { get { $(getId()) }} ]>)
            | SupportedType.AbstractClass => define(<[decl: public abstract MsgId: short { get; } ]>)
            | SupportedType.BaseClass => 
              if (tb.IsSealed || tb.IsValueType)
                define(<[decl: public MsgId: short { get { $(getId()) }} ]>);
              else
                define(<[decl: public virtual MsgId: short { get { $(getId()) }} ]>);

            | SupportedType.DerivedClass =>
              unless (tb.IsAbstract)
                define(<[decl: public override MsgId: short { get { $(getId()) }} ]>)
          }
          
          match (ty)
          {
            | SupportedType.Struct => 
              define(
              <[decl: 
                public Serialize(writer : System.IO.BinaryWriter) : void 
                {
                }
              ]>)
            | SupportedType.DerivedClass =>
                define(<[decl: 
                  public override Serialize(writer : System.IO.BinaryWriter) : void 
                  {
                  }
                ]>);
            | SupportedType.AbstractClass
            | SupportedType.BaseClass =>
              if (tb.IsSealed || tb.IsValueType)
                define(<[decl: 
                  public Serialize(writer : System.IO.BinaryWriter) : void 
                  {
                  }
              ]>);
              else 
                define(<[decl: 
                  public virtual Serialize(writer : System.IO.BinaryWriter) : void 
                  {
                  }
              ]>);
          }

          foreach (v in tb.GetVariantOptions())
            TransformBeforeTypedMembersImpl(v);
          
          match (ty)
          {
            | SupportedType.Struct
            | SupportedType.BaseClass
            | SupportedType.DerivedClass =>
              when (!tb.IsAbstract)
                define(
                  <[decl: 
                    public static new Deserialize(reader : System.IO.BinaryReader) : $(type : typed)
                    {
                    }
                  ]>);

            | _ => ()
          }
          Deserializer.GenerateModule(_typer.Manager);
        | _ => ()
      }
    }
  }
}
