using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using System;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server
{
  class ParseWorker : IDisposable
  {
    _thread             : Thread;
    _cts                : CancellationTokenSource = CancellationTokenSource();
    _incomeQueue        : BlockingCollection[ParserMessage];
    _mainQueue          : BlockingCollection[RouterMessage];
    _responseWriter     : BinaryWriter;
    _spanClassesManager : SpanClassesManager;
    
    
    public this(incomeQueue : BlockingCollection[ParserMessage], mainQueue : BlockingCollection[RouterMessage], responseWriter : BinaryWriter, spanClassesManager : SpanClassesManager)
    {
      _mainQueue          = mainQueue;
      _incomeQueue        = incomeQueue;
      _responseWriter     = responseWriter;
      _spanClassesManager = spanClassesManager;
      _thread             = Thread(ParseWorkerMain);
      _thread.Start();
    }

    SendResponse(msg : ServerMessage) : void
    {
      lock (_responseWriter)
        msg.Serialize(_responseWriter);
    }

    ParseWorkerMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Parse Worker";
      thread.CurrentCulture = CultureInfo.InvariantCulture;
      try
      {
        foreach(m in _incomeQueue.GetConsumingEnumerable(_cts.Token)) 
        {
          try
            ProcessMessage(m)
          catch
          {
            | e is OperationCanceledException => ServerUtils.LogCanceled(e);
            | e => ServerUtils.LogException(e);
          }
        }
      }
      catch
      {
        | _ is OperationCanceledException => ()
        | e => ServerUtils.LogException(e);
      }
    }      
    
    ProcessMessage(msg : ParserMessage) : void
    {
      | ParseFile(fileId, parseSession, source) =>
        ServerUtils.Log("ParseFile " + fileId);
        def timer = Stopwatch.StartNew();
        // TODO: add statistics
        //def stat = Statistics;
        //stat?.Parse?.Restart();
        //
        //_parseMessages.Clear();
        //_astMessages.Clear();
        //_typingMessages.Clear();
      
        when (parseSession.CancellationToken.IsCancellationRequested)
          return;

        def parseResult = parseSession.Parse(source);
        _mainQueue.Add(RouterAnswerMessage.FileParsed(fileId, parseResult));

        //stat?.Parse?.Stop();
        ServerUtils.LogMsgHandled("ParseFile " + fileId, timer, 200);
      
      | CreateAst(fileId, parseResult) =>
        ServerUtils.Log("CreateAst " + fileId);
        def timer = Stopwatch.StartNew();
        when (parseResult.ParseSession.CancellationToken.IsCancellationRequested)
          return;
          
        def parseTree = parseResult.CreateParseTree();
        def astMessages = CompilerMessageList();
        def ast = AstContext.GetAstUntyped(parseTree, astMessages);
        _mainQueue.Add(RouterAnswerMessage.AstCreated(fileId, parseResult.ParseSession.CancellationToken, ast, parseTree));
        ServerUtils.LogMsgHandled("CreateAst " + fileId, timer, 100);
        
      | SemanticAnalysisStart(projectId, cancellationToken, projectSupport, files, data) =>
        ServerUtils.Log($"SemanticAnalysisStart: ..$(files.Select(_.Title))");
        def timer = Stopwatch.StartNew();
        def compilerMessages = CompilerMessageList();
        projectSupport.RefreshProject(cancellationToken, compilerMessages, files, data);
        _mainQueue.Add(RouterAnswerMessage.SemanticAnalysisFinished(projectId, cancellationToken, compilerMessages));
        ServerUtils.LogMsgHandled("SemanticAnalysisStart", timer, 100);
        
      | CreateOutlining(fileId, parseResult) =>
        ServerUtils.Log("CreateOutlining " + fileId);
        def timer     = Stopwatch.StartNew();
        def outlining = List();
        parseResult.GetOutlining(outlining);
        def infos             = ImmutableArray.CreateBuilder(outlining.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = parseResult.SourceSnapshot.Version;
        
        foreach (info in outlining with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;
          
          def span = Messages.NSpan(info.Span.StartPos, info.Span.EndPos);
          infos.Add(Messages.OutliningInfo(span, info.IsDefaultCollapsed, info.IsImplementation));
        }
     
        when (cancellationToken.IsCancellationRequested)
          return;
        
        SendResponse(ServerMessage.OutliningCreated(fileId, version, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateOutlining", timer, 50);

      | CreateKeywordsHighlighting(fileId, parseResult) =>
        ServerUtils.Log("CreateKeywordsHighlighting " + fileId);
        def timer     = Stopwatch.StartNew();
        def start     = 0;
        def end       = parseResult.SourceSnapshot.Text.Length;
        def spanInfos = HashSet();
        parseResult.GetSpans(start, end, spanInfos);

        def infos             = ImmutableArray.CreateBuilder(spanInfos.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = parseResult.SourceSnapshot.Version;
        
        foreach (info in spanInfos with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;
          
          def span = info.Span;
          def id = _spanClassesManager[info.SpanClass];
          infos.Add(SpanInfo(NSpan(span.StartPos, span.EndPos), id));
        }
     
        when (cancellationToken.IsCancellationRequested)
          return;
        
        SendResponse(ServerMessage.KeywordsHighlightingCreated(fileId, version, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateKeywordsHighlighting", timer, 50);
        
      | CreateSymbolsHighlighting(fileId, version, ast) =>
        ServerUtils.Log("CreateSymbolsHighlighting " + fileId);
        def timer   = Stopwatch.StartNew();
        def visitor = CollectSymbolsAstVisitor(_spanClassesManager);
        ast.Accept(visitor);
        SendResponse(ServerMessage.SymbolsHighlightingCreated(fileId, version, visitor.GetSpanInfos()));
        ServerUtils.LogMsgHandled("CreateSymbolsHighlighting", timer, 50);
    }
    
    public Dispose() : void
    {
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join()
    }
  }
}
