using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server
{
  class ParseWorker : IDisposable
  {
    _thread      : Thread;
    _cts         : CancellationTokenSource = CancellationTokenSource();
    _incomeQueue : BlockingCollection[ParserMessage];
    
    public this(incomeQueue : BlockingCollection[ParserMessage])
    {
      _incomeQueue = incomeQueue;
      _thread = Thread(ParseWorkerMain);
      _thread.Start()
    }

    ParseWorkerMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "ParseWorkerMain";
      thread.CurrentCulture = CultureInfo.InvariantCulture;
      
      try
      {
        foreach(m in _incomeQueue.GetConsumingEnumerable(_cts.Token)) 
          unless (m.CancellationToken.IsCancellationRequested)
            ProcessMessage(m)
      }
      catch
      {
        | OperationCanceledException => ()
        | e => Log("Error: " + e)
      }
    }      
    
    ProcessMessage(msg: ParserMessage): void
    {
      | ParseFile() => ()
    }
    
    public Dispose() : void
    {
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join()
    }
    
    Log(msg: string) : void
    {
      Console.WriteLine(msg)
    }
  }
}
