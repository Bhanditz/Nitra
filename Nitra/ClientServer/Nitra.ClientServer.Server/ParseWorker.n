using System.Threading;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ClientServer.Server
{
  class ParseWorker : IDisposable
  {
    _thread: Thread;
    _cts: CancellationTokenSource = CancellationTokenSource();
    
    public this(incomeQueue: BlockingCollection[ParserMessage])
    {
      _thread = Thread(() =>
      {
        try
        {
          foreach(m in incomeQueue.GetConsumingEnumerable(_cts.Token)) 
            unless (m.CancellationToken.IsCancellationRequested)
              ProcessMessage(m)
        }
        catch
        {
          | OperationCanceledException => ()
          | e => Log("Error: " + e)
        }
      });
            
      _thread.Start()
    }
    
    ProcessMessage(msg: ParserMessage): void
    {
      | ParseFile() => ()
    }
    
    public Dispose() : void
    {
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join()
    }
    
    Log(msg: string) : void
    {
      Console.WriteLine(msg)
    }
  }
}
