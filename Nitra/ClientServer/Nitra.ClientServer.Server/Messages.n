using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server
{
  [Record]
  public class Message
  {
  }
  
  [Record]
  public variant ParserMessage : Message
  {
    | ParseFile                  { fileId : int; parseSession : ParseSession; source : SourceSnapshot } // CancellationToken in ParseSession
    | CreateAst                  { fileId : int; parseResult  : IParseResult }
    | CreateOutlining            { fileId : int; parseResult  : IParseResult; }
    | CreateKeywordsHighlighting { fileId : int; parseResult  : IParseResult; }
    | CreateSymbolsHighlighting  { fileId : int; fileVersion : int; ast : IAst; }
    | SemanticAnalysisStart
      {
        projectId         : int;
        cancellationToken : CancellationToken;
        projectSupport    : IProjectSupport;
        files             : ImmutableArray[FileEvalPropertiesData];
        data              : object;
      }
  }
  
  [Record]
  public variant RouterAnswerMessage : RouterMessage
  {
    public override MsgId : short { get { -1s } }
    
    | FileParsed               { fileId : int; parseResult : IParseResult; } // CancellationToken in ParseResult.ParseSession
    | AstCreated               { fileId : int; cancellationToken : CancellationToken;  ast : IAst; parseTree : ParseTree; }
    | SemanticAnalysisFinished { projectId : int; cancellationToken : CancellationToken; }
  }
}