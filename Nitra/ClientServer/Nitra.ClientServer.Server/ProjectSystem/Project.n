using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using NSP = Nitra.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  public class Project : NSP.Project, IDisposable
  {
           _files     : Hashtable[int, File]   = Hashtable();
           _libMap    : Hashtable[string, int] = Hashtable();
           _libs      : List[NSP.LibReference] = List();
    public Parent     : Solution;
    public Id         : int;
    public Path       : string       { get; }
    public Name       : string       { get; private set; }
    public IsDisposed : bool         { get; private set; }
           
    public this(parent : Solution, fullPath : string, id : int)
    {
      Path   = fullPath;
      Id     = id;
      Parent = parent;
      Name   = Path.GetFileName(Name);
      Libs   = _libs;
    }
    
    //public override Libs : Seq[string] { get { _libs } }
    
    public IsOpened : bool { get; private set }
    
    public Open() : void { IsOpened = true }
    
    public Log(msg : string) : void { Parent.Logger.WriteLine(msg) }
    
    public Item[fileId : int] : File { get { GetFile(fileId) } }
    
    public GetFile(id : int) : File
    {
      _files[id]
    }
    
    public AddFile(file : File): void
    {
      _files.Add(file.Id, file);
      Parent._N_OnFileAdded(file);
    }

    public RemoveFile(file : File): void { RemoveFile(file.Id) }
    
    public RemoveFile(id : int): void
    {
      _files.Remove(id);
      Parent._N_OnFileRemoved(id);
    }
    
    public AddLib(fullPath : string, kind : ReferenceKind) : void
    {
      mutable index;
      if (_libMap.TryGetValue(fullPath, out index))
        Log("Reference '" + fullPath + "' allredy added: " + _libs[index]);
      else
      {
        _libMap[fullPath] = _libs.Count;
        match (kind)
        {
          | ReferenceKind.Library   => _libs.Add(NSP.FileLibReference(fullPath));
          | ReferenceKind.Project   => _libs.Add(NSP.ProjectReference(fullPath));
          | ReferenceKind.Extension => throw NotImplementedException()
        }
      }
    }
    
    public RemoveLib(fullPath : string, kind : ReferenceKind) : void
    {
    }
    
    // overrides
    
    public override Files : Seq[NSP.File] 
    { 
      get { _files.Values }
    }
    
    public Dispose() : void
    {
      when (IsDisposed)
        return;
        
      foreach (v in _files.Values)
        v.Dispose();
      _files.Clear();
      
      IsDisposed = true;
    }
  }
}