using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

using NSP = Nitra.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  public class File : NSP.ConcreteFile, IDisposable
  {
    // TODO: override ParseResult, Ast, GetParseTree and so on and implement parsing/typing in work threads
    public  Parent    : Project;
    public  Id        : int { get; }
    mutable _fileInfo : FileInfo;
    mutable _text     : string;
    mutable _snapshot : SourceSnapshot;
    mutable _name     : string;

    public mutable ParseCancellationToken : option[CancellationToken] = None();
    
    public this(id : int, fullPath : string, parent : Project)
    {
      Id        = id;
      _fileInfo = FileInfo(fullPath);
      Parent    = parent;
      _name     = IO.Path.GetFileNameWithoutExtension(FullName);
      
      parent.AddFile(this);
    }

    /// Used for in memory text editing (with no file available)
    public this(id : int, name : string, parent : Project, text : string)
    {
      Id        = id;
      Parent    = parent;
      _snapshot = SourceSnapshot(text, this);
      _text     = text;
      _name     = name;
      
      parent.AddFile(this);
    }
    
    public Log(msg : string) : void { Parent.Parent.Logger.WriteLine(msg) }
    
    public override Name : string { get { _name } }
    
    public override FullName : string 
    { 
      get { _fileInfo.FullName } 
    }
    
    public override GetSource() : SourceSnapshot
    { 
      when (_snapshot == null)
      {
        assert2(_fileInfo != null);
        assert(_fileInfo != null);
        def text  = File.ReadAllText(_fileInfo.FullName, Encoding.UTF8); // TODO: add detect BOM and load UTF-8 if no BOM avalable
        _snapshot = SourceSnapshot(text, this);
        _text     = text;
      }
      
      _snapshot
    }
    
    public override Length : int
    {
      get
      {
        if (_text == null)
        {
          assert2(_fileInfo != null);
          assert(_fileInfo != null);
          _fileInfo.Length :> int
        }
        else
          _text.Length
      }
    }
    
    public override Project : NSP.Project { get { Parent } }
    
    public Dispose() : void
    {
      _fileInfo = null;
      _text     = null;
      _snapshot = null;      
    }
 
    public override ToString() : string { Name + "(" + Parent.Name + " project)" }
 }
}