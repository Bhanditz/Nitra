using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Threading;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

namespace Nitra.ClientServer.Server
{
  class Router
  {
    _mainQueue: BlockingCollection[RouterMessage] = BlockingCollection();
    _mainThread: Thread;
    _parseQueue: BlockingCollection[ParserMessage] = BlockingCollection();
    _parseWorkers: list[ParseWorker];

    public this()
    {
      def mainThread()
      {
        foreach(msg in _mainQueue.GetConsumingEnumerable())
        {
          | serverMsg is ServerMessage =>
            match (serverMsg)
            {
              | ServerMessage.CheckVersion(assemblyVersionGuid) =>
                if (Message.AssemblyVersionGuid == assemblyVersionGuid)
                  Log("Server started.");
                else
                {
                  def asm = typeof(Message);
                  Error($"Incorrect version of messaging assembly: '$(asm.Assembly.Location)'.");
                  Environment.Exit(42);
                }
              | LoadSolution(path) => ()
              | UnloadSolution => ()         
              | LoadProject(id, path, projectDi) => ()
              | UnloadProject(id) => ()
              | RanameProject(oldId, newId, newPath) => ()
              | LoadReference     (path, kind) => ()
              | UnloadReference   (path, kind) => ()
              | LoadFile          (path, id) => ()
              | UnloadFile        (id) => ()
              | RanameFile        (oldId, newId, newPath) => ()
              | LoadInMemoryFile  (id, name, content) => ()
              | UnloadInMemoryFile(id) => ()
              | ChangeFileInsert  (id, pos, text) => ()
              | ChangeFileDelete  (id, span) => ()
              | ChangeFileReplace (id, span, text) => ()
              | ChangeFileBatch   (id, changes) => ()
              | _ => assert2(false)
            }
            
          | _ => assert2(false)
        }
      }
      _mainThread = Thread(mainThread);
      _mainThread.Start();
      _parseWorkers = $[1..Environment.ProcessorCount].Map(_ => ParseWorker(_parseQueue))
    }
    
    public AddMessage(msg : RouterMessage): void
    {
      _mainQueue.Add(msg)
    }
    
    Error(msg : string) : void
    {
      Console.ForegroundColor = ConsoleColor.Red;
      Console.WriteLine(msg);
      Console.ResetColor();
    }
    Log(msg : string) : void { Console.WriteLine(msg) }
  }
}
