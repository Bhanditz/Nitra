using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using System;
using System.Threading;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

using IO = System.IO;

namespace Nitra.ClientServer.Server
{
  internal partial class Router
  {
            _mainQueue          : BlockingCollection[RouterMessage] = BlockingCollection();
            _parseQueue         : BlockingCollection[ParserMessage] = BlockingCollection();
            _mainThread         : Thread;
            _parseWorkers       : list[ParseWorker];
            _cts                : CancellationTokenSource = CancellationTokenSource();
            _responseWriter     : IO.BinaryWriter;
    public  SpanClassesManager  : SpanClassesManager = SpanClassesManager();
    mutable _stopped            : bool;
    mutable _solution           : Solution;

    public this(responseWriter : IO.BinaryWriter)
    {
      _responseWriter = responseWriter;
      _mainThread     = Thread(RouterThreadMain);
      _mainThread.Start();
      def cores       = ServerUtils.GetCoreCount(); // Environment.ProcessorCount
      Log("Cores: " + cores);
      _parseWorkers = $[1..cores].Map(_ => ParseWorker(_parseQueue, _mainQueue, responseWriter, SpanClassesManager));
    }
    
    public SendResponse(msg : ServerMessage) : void
    {
      lock (_responseWriter)
        msg.Serialize(_responseWriter);
    }

    RouterThreadMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Router";
      thread.CurrentCulture = CultureInfo.InvariantCulture;

      try RouteMessages()
      catch
      {
        | e is OperationCanceledException => ServerUtils.LogCanceled(e)
        | e                               => ServerUtils.LogException(e)
      }
    }
    
    RouteMessages() : void
    {
      foreach(msg in _mainQueue.GetConsumingEnumerable(_cts.Token))
      {
        | serverMsg is ClientMessage.Shutdown => OnClientMessage(serverMsg); return;
        | serverMsg is ClientMessage          => OnClientMessage(serverMsg);
        | serverMsg is RouterAnswerMessage    => OnRouterAnswerMessage(serverMsg);
        | _ => assert2(false)
      }
    }
    
    public Wait() : void
    {
      unless (_stopped)
      {
        _mainThread.Join();
        _cts.Dispose();
        foreach(worker in _parseWorkers)
          worker.Dispose();
        _parseQueue.Dispose();
        _stopped = true;
      }
    }
    
    public AddMessage(msg : RouterMessage): void
    {
      unless (_stopped)
        _mainQueue.Add(msg)
    }
    
    Error(msg : string) : void
    {
      Console.ForegroundColor = ConsoleColor.Red;
      Console.WriteLine(msg);
      Console.ResetColor();
    }
    
    Log(msg : string) : void { Console.WriteLine(msg) }
  }
}
