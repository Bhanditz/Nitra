using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using System;
using System.Threading;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

namespace Nitra.ClientServer.Server
{
  class Router
  {
    _mainQueue: BlockingCollection[RouterMessage] = BlockingCollection();
    _parseQueue: BlockingCollection[ParserMessage] = BlockingCollection();
    _mainThread: Thread;
    _parseWorkers: list[ParseWorker];
    _cts = CancellationTokenSource();
    mutable _stopped: bool;
    mutable _solution : Solution;

    public this()
    {
      _mainThread = Thread(RouterThreadMain);
      _mainThread.Start();
      _parseWorkers = $[1..Environment.ProcessorCount].Map(_ => ParseWorker(_parseQueue));
    }

    RouterThreadMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "ServerPipeReader";
      thread.CurrentCulture = CultureInfo.InvariantCulture;

      try Router()
      catch
      {
        | OperationCanceledException => ()
        | e => Error("Error: " + e)
      }
    }
    
    Router() : void
    {
      foreach(msg in _mainQueue.GetConsumingEnumerable(_cts.Token))
      {
        | serverMsg is ServerMessage =>
          Log("Got \"" + serverMsg.GetType().Name + "\"");
          match (serverMsg)
          {
            | ServerMessage.CheckVersion(assemblyVersionGuid) =>
              if (Message.AssemblyVersionGuid == assemblyVersionGuid)
                Log("Client version checked.");
              else
              {
                def asm = typeof(Message);
                Error($"Incorrect version of messaging assembly: '$(asm.Assembly.Location)'.");
                Environment.Exit(42);
              }
            | LoadSolution(path) => assert2(_solution == null); _solution = Solution(path); Log("Solution opened: " + path);
            | UnloadSolution     => assert2(_solution != null); _solution = null; Log("Solution closed");
            | LoadProject(id, path, projectDi) => ()
            | UnloadProject(id) => ()
            | RanameProject(oldId, newId, newPath) => ()
            | LoadReference     (path, kind) => ()
            | UnloadReference   (path, kind) => ()
            | LoadFile          (path, id) => ()
            | UnloadFile        (id) => ()
            | RanameFile        (oldId, newId, newPath) => ()
            | LoadInMemoryFile  (id, name, content) => ()
            | UnloadInMemoryFile(id) => ()
            | ChangeFileInsert  (id, pos, text) => ()
            | ChangeFileDelete  (id, span) => ()
            | ChangeFileReplace (id, span, text) => ()
            | ChangeFileBatch   (id, changes) => ()
            | Shutdown => _cts.Cancel()
            | _ => assert2(false)
          }
        | _ => assert2(false)
      }
    }
    
    public Wait() : void
    {
      unless (_stopped)
      {
        _mainThread.Join();
        _cts.Dispose();
        foreach(worker in _parseWorkers)
          worker.Dispose();
        _parseQueue.Dispose();
        _stopped = true;
      }
    }
    
    public AddMessage(msg : RouterMessage): void
    {
      unless (_stopped)
        _mainQueue.Add(msg)
    }
    
    Error(msg : string) : void
    {
      Console.ForegroundColor = ConsoleColor.Red;
      Console.WriteLine(msg);
      Console.ResetColor();
    }
    
    Log(msg : string) : void { Console.WriteLine(msg) }
  }
}
