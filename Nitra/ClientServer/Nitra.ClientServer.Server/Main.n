using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server;

using System;
using System.Console;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Threading;

module Program
{
  Main(args : array[string]) : void
  {
     assert2(false, "Srart debugger");
    
    when (args.Length != 1)
    {
      assert2(false, "Invalid number of parameters!");
      ServerUtils.Log("Invalid number of parameters, expected: <request pipe name> <response pipe name>");
      Environment.Exit(42);
    }
    
    def requestPipeName = args[0];
      
    using (mainPipe = NamedPipeServerStream(requestPipeName, PipeDirection.InOut))
    {
      def router = Router(null/*sendResponse*/);
        
      // Connect to the pipe or wait until the pipe is available.
      Write("Attempting to connect to pipe...");
      mainPipe.WaitForConnection();
    
      ServerUtils.Log("Connected to pipe.");
      ServerUtils.Log("There are currently $(mainPipe.NumberOfServerInstances) pipe server instances open.");
      //def writer = BinaryWriter(mainPipe);
      def MainPipeReaderThreadMain()
      {
        def thread = Thread.CurrentThread;
        thread.Name = "Server Pipe Reader";
        thread.CurrentCulture = CultureInfo.InvariantCulture;
          
        using (reader = BinaryReader(mainPipe))
        {
          for(;;)
          {
            try
            {
              router.AddMessage(Deserializer.Deserialize(reader));
            }
            catch
            {
              | _ is EndOfStreamException when !mainPipe.IsConnected => ServerUtils.Log("Session has been terminated."); return;
              | e                                                    => ServerUtils.LogException(e);
            }
          }
        }
      }
      def readerThread = Thread(MainPipeReaderThreadMain);
      readerThread.IsBackground = true;
      readerThread.Start();
      ServerUtils.Log("Server started.");
      router.Wait();
      ServerUtils.Log("Server stopped.")
    }
  }
}