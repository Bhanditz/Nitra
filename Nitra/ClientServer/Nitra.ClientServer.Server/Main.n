using System.Threading;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server;

using System;
using System.Console;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Collections.Generic;
using System.Linq;

module Program
{
  Main(args : array[string]) : void
  {
     assert2(false, "Srart debugger");
    
    when (args.Length != 2)
    {
      assert2(false, "Srart debugger");
      ServerUtils.Log("Invalid parameters number, expected: <request pipe name> <response pipe name>");
      Environment.Exit(42);
    }
    
    
    def requestPipeName = args[0];
    def responsePipeName = args[1];
    
    using (pipeServer = NamedPipeServerStream(responsePipeName, PipeDirection.Out))
    {
      def writer = BinaryWriter(pipeServer);
      
      def sendResponse(msg : ServerMessage) : void
      {
        when (!pipeServer.IsConnected)
          assert2(true);
        msg.Serialize(writer);
      }
      
      using (pipeClient = NamedPipeClientStream(".", requestPipeName, PipeDirection.In))
      {
        def router = Router(sendResponse);
        
        // Connect to the pipe or wait until the pipe is available.
        Write("Attempting to connect to pipe...");
        pipeClient.Connect();
    
        ServerUtils.Log("Connected to pipe.");
        ServerUtils.Log("There are currently $(pipeClient.NumberOfServerInstances) pipe server instances open.");
        //def writer = BinaryWriter(pipeClient);
        def ServerPipeReader()
        {
          def thread = Thread.CurrentThread;
          thread.Name = "Server Pipe Reader";
          thread.CurrentCulture = CultureInfo.InvariantCulture;
          
          using (reader = BinaryReader(pipeClient))
          {
            def loop()
            {
              try
              {
                router.AddMessage(Deserializer.Deserialize(reader));
                loop()
              }
              catch
              {
                | _ is EndOfStreamException when !pipeClient.IsConnected => ServerUtils.Log("Session has been terminated.");
                | e                                                      => ServerUtils.LogException(e); loop()
              }
            }
              
            loop()
          }
        }
        def readerThread = Thread(ServerPipeReader);
        readerThread.IsBackground = true;
        readerThread.Start();
        ServerUtils.Log("Server started.");
        router.Wait();
        ServerUtils.Log("Server stopped.")
      }
    }
  }
}