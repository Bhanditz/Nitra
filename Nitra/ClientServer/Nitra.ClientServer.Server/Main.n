using System.Threading;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server;

using System;
using System.Console;
using System.IO;
using System.IO.Pipes;
using System.Collections.Generic;
using System.Linq;

module Program
{
  Main(args : array[string]) : void
  {
    when (args.Length != 1)
    {
      Log("Invalid parameters number.");
      Environment.Exit(42);
    }

    using (pipeClient = NamedPipeClientStream(".", args[0], PipeDirection.InOut))
    {
      def router = Router();
      
      // Connect to the pipe or wait until the pipe is available.
      Write("Attempting to connect to pipe...");
      pipeClient.Connect();

      Log("Connected to pipe.");
      Log("There are currently {0} pipe server instances open.", pipeClient.NumberOfServerInstances);
      //def writer = BinaryWriter(pipeClient);
      def readerThread = Thread(() =>
      {
        using (reader = BinaryReader(pipeClient))
        {
          def loop()
          {
            try
            {
              router.AddMessage(Deserializer.Deserialize(reader));
              loop()
            }
            catch
            {
              | _ is EndOfStreamException when !pipeClient.IsConnected =>
                Log("Session has been terminated.")
              | e => 
                Log(string.Format("Message read error: {0}", e));
                loop()
            }
          }
            
          loop()
        }
      });
      readerThread.IsBackground = true;
      readerThread.Start();
      Log("Server started.");
      router.Wait();
      Log("Server stopped.")
    }
  }
  
  Log(msg : string, params args: array[object]) : void
  {
    WriteLine(msg, args);
  }
}