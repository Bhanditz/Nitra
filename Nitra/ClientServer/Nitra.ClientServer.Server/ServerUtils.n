using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server
{
  module ServerUtils
  {
    _sync : object = object();
    
    public Padding(str : string, len : int, ch : char = ' ') : string
    {
      def count = len - str.Length;
      if (str.Length >= len) str else (string(ch, count) + str)
    }

    public PaddingBehind(str : string, len : int, ch : char = ' ') : string
    {
      def count = len - str.Length;
      if (str.Length >= len) str else str + (string(ch, count))
    }
    
    public LogMsgHandled(msg : string, timer : Stopwatch, millisecondToTimeout : int) : void
    {
      timer.Stop();
      def elapsed         = timer.Elapsed;
      def timeoutExceeded = elapsed.Milliseconds >= millisecondToTimeout;
      def milliseconds    = Padding(elapsed.TotalMilliseconds.ToString("0.0000"), 9);
      def msg2            = PaddingBehind(msg, 25, '.');
      def color           = if (timeoutExceeded) ConsoleColor.Yellow else ConsoleColor.Green;
      def threadId        = Padding(Thread.CurrentThread.ManagedThreadId.ToString(), 3);
      def msg3            = msg2 + "took: " + milliseconds + " ms  ThreadId:" + threadId;
    
      lock (_sync)
      {
        Console.ForegroundColor = color;
        Console.WriteLine(msg3);
        Console.ResetColor();
      }
    }

    public LogCanceled(e : OperationCanceledException) : void
    {
      lock (_sync)
      {
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine(e.Message);
        Console.ResetColor();
      }
    }
    
    public LogException(e : Exception) : void
    {
      assert2(false, "Exception!");
      lock (_sync)
      {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("Exception: " + e);
        Console.ResetColor();
      }
    }

    public Log(msg : string) : void
    {
      lock (_sync)
      {
        Console.WriteLine(msg)
      }
    }
  }
}
