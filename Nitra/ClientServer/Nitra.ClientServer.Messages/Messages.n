using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.ClientServer.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Messages
{
  [NitraMessage]
  public class Message
  {
    public static AssemblyVersionGuid : string = MakeGuidString();
  }

  [NitraMessage]
  public struct NSpan
  {
    public StartPos : int;
    public EndPos   : int;
    public Length   : int { get { EndPos - StartPos }}
  }
  
  [NitraMessage]
  public variant FileChange
  {
    | Insert { pos: int; text: string }
    | Delete { span: NSpan }
    | Replace { span: NSpan; text: string }
  }

  [NitraMessage]
  public class RouterMessage : Message
  {
  }

  public enum ReferenceKind
  {
    | Library
    | Project
    | Extension
  }
  
  [NitraMessage]
  public variant ServerMessage : RouterMessage
  {
    | CheckVersion         { assemblyVersionGuid : string; }
    | SolutionStartLoading { fullPath : string; }
    | SolutionLoaded       { fullPath : string; }
    | SolutionUnloaded     { }
    | ProjectStartLoading  { id : int; fullPath : string; }
    | ProjectLoaded        { id : int; }
    | ProjectUnloaded      { id : int; }
    | ProjectRaname        { oldId : int; newId : int; newPath : string; }
    | ReferenceLoaded      { projectId : int; fullPath : string; kind : ReferenceKind; }
    | ReferenceUnloaded    { projectId : int; fullPath : string; kind : ReferenceKind; }
    | FileLoaded           { projectId : int; fullPath : string; id : int; }
    | FileUnloaded         { id : int; }
    | FileRanamed          { oldId : int; newId : int; newPath : string; }
    | FileInMemoryLoaded   { projectId : int; id : int; name : string; content : string; }
    | FileChanged          { id : int; change: FileChange }
    | FileChangedBatch     { id : int; changes : ImmutableArray[FileChange] }
    | Shutdown             { }
    
    public override ToString() : string
    {
      match (this)
      {
        | CheckVersion        (assemblyVersionGuid)          => $<#CheckVersion        ($assemblyVersionGuid)#>
        | SolutionStartLoading(fullPath)                     => $<#SolutionStartLoading($fullPath)#>
        | SolutionLoaded      (fullPath)                     => $<#SolutionLoaded      ($fullPath)#>
        | SolutionUnloaded                                   =>  <#SolutionUnloaded    ()#>
        | ProjectStartLoading (id, fullPath)                 => $<#ProjectStartLoading ($id, $fullPath)#>
        | ProjectLoaded       (id)                           => $<#ProjectLoaded       ($id)#>
        | ProjectUnloaded     (id)                           => $<#ProjectUnloaded     ($id)#>
        | ProjectRaname       (oldId, newId, newPath)        => $<#ProjectRaname       ($oldId, $newId, $newPath)#>
        | ReferenceLoaded     (projectId, fullPath, kind)    => $<#ReferenceLoaded     ($projectId, $fullPath, $kind)#>
        | ReferenceUnloaded   (projectId, fullPath, kind)    => $<#ReferenceUnloaded   ($projectId, $fullPath, $kind)#>
        | FileLoaded          (projectId, fullPath, id)      => $<#FileLoaded          ($projectId, $fullPath, $id)#>
        | FileUnloaded        (id)                           => $<#FileUnloaded        ($id)#>
        | FileRanamed         (oldId, newId, newPath)        => $<#FileRanamed         ($oldId, $newId, $newPath)#>
        | FileInMemoryLoaded  (projectId, id, name, content) => $<#FileInMemoryLoaded  ($projectId, $id, $name, $content)#>
        | FileChanged         (id, change)                   => $<#FileChanged         ($id, $change)#>
        | FileChangedBatch    (id, changes)                  => $<#FileChangedBatch    ($id, $changes)#>
        | Shutdown                                           =>  <#Shutdown            ()#>
      }
    }
  }
  
  public enum ReflectionKind
  {
    | Normal
    | Ambiguous
    | Deleted
  }

  [NitraMessage]
  public class ReflectionStruct
  {
    //public Info        : INitraReflection                     { get; }
    public Description : string { get; }
    public Kind : ReflectionKind { get; }
    public Span : NSpan { get; }
    public Children : ImmutableArray[ReflectionStruct] { get; }
  }
  
  [NitraMessage]
  public class Language
  {
    public FullName: string
  }
  
  [NitraMessage]
  public class Style
  {
    public Language        : Language;
    public Name            : string;
    public FullName        : string;
    public ForegroundColor : int
  }
  
  [NitraMessage]
  public class SpanClass
  {
    public Language : Language;
    public Name     : string;
    public FullName : string;
    public Style    : Style
  }
  
  [NitraMessage]
  public struct SpanInfo
  {
    public Span      : NSpan;
    public SpanClass : SpanClass
  }
  
  [NitraMessage]
  public class GrammarDescriptor
  {
    public FullName: string;
    public AssemblyLocation: string
  }
  
  [NitraMessage]
  public class LibReference
  {
    public Kind: ReferenceKind;
    public FullPath: string
  }
  
  [NitraMessage]
  public struct OutliningInfo
  {
    public Span               : NSpan;
    public IsDefaultCollapsed : bool;
    public IsImplementation   : bool
  }
}