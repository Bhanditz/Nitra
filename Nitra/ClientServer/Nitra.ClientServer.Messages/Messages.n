using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.ClientServer.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Messages
{
  [NitraMessage]
  public class Message
  {
    public static AssemblyVersionGuid : string = MakeGuidString();
  }

  [NitraMessage]
  public struct FileChange
  {
    public Span : NSpan;
    public Text : string;
  }

  [NitraMessage]
  public class RouterMessage : Message
  {
  }

  public enum ReferenceKind
  {
    | Library
    | Project
    | Extension
  }
  
  [NitraMessage]
  public variant ServerMessage : RouterMessage
  {
    | CheckVersion       { assemblyVersionGuid : string; }
    | LoadSolution       { path : string; }
    | UnloadSolution     
    | LoadProject        { id : int; path : string; projectDir : string; }
    | UnloadProject      { id : int; }
    | RanameProject      { oldId : int; newId : int; newPath : string; }
    | LoadReference      { path : string; kind : ReferenceKind; }
    | UnloadReference    { path : string; kind : ReferenceKind; }
    | LoadFile           { path : string; id : int; }
    | UnloadFile         { id : int; }
    | RanameFile         { oldId : int; newId : int; newPath : string; }
    | LoadInMemoryFile   { id : int; name : string; content : string; }
    | UnloadInMemoryFile { id : int; }
    | ChangeFileInsert   { id : int; pos : int; text : string; }
    | ChangeFileDelete   { id : int; span : NSpan; }
    | ChangeFileReplace  { id : int; span : NSpan;  text : string; }
    | ChangeFileBatch    { id : int; changes : ImmutableArray[FileChange]; }
  }
  
  [NitraMessage]
  public struct NSpan
  {
    public StartPos : int;
    public EndPos   : int
  }
  
  public enum ReflectionKind
  {
    | Normal
    | Ambiguous
    | Deleted
  }

  [NitraMessage]
  public class ReflectionStruct
  {
    //public Info        : INitraReflection                     { get; }
    public Description : string { get; }
    public Kind : ReflectionKind { get; }
    public Span : NSpan { get; }
    public Children : ImmutableArray[ReflectionStruct] { get; }
  }
  
  [NitraMessage]
  public class Language
  {
    public FullName: string
  }
  
  [NitraMessage]
  public class Style
  {
    public Language        : Language;
    public Name            : string;
    public FullName        : string;
    public ForegroundColor : int
  }
  
  [NitraMessage]
  public class SpanClass
  {
    public Language : Language;
    public Name     : string;
    public FullName : string;
    public Style    : Style
  }
  
  [NitraMessage]
  public struct SpanInfo
  {
    public Span      : NSpan;
    public SpanClass : SpanClass
  }
}