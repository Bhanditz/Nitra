using Nitra.Compiler;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization2
{
  public macro Serialize(obj : PExpr)
  {
    def typer = Nemerle.Macros.ImplicitCTX();
    SerializeImpl.DoSerialize(typer, obj)
  }

  public macro Deserialize(typeName : PExpr)
  {
    def typer = Nemerle.Macros.ImplicitCTX();
    SerializeImpl.DoDeserialize(typer, typeName)
  }

  internal module SerializeImpl
  {
    public DoSerialize(typer : Typer, obj : PExpr) : PExpr
    {
      def emitter = typer.Manager.GetBinarySerializationEmitter("New");
      def texpr   = typer.TypeExpr(obj);
      match (texpr.Type.Hint)
      {
        | Some(type) => emitter.MakeWriteCode(type, obj, "o")
        | None =>
          typer.DelayMacro(fun (needMessage)
          {
            match (texpr.Type.Hint)
            {
              | Some(type) => Some(emitter.MakeWriteCode(type, obj, "o"))
              | None =>
                when (needMessage)
                  Message.Error(obj.Location, "Unable to infer type of expression");
                None()
            }
          })
      }
    }

    public DoDeserialize(typer : Typer, typeName : PExpr) : PExpr
    {
      def emitter = typer.Manager.GetBinarySerializationEmitter("New");
      def type    = typer.Env.BindFixedType(typeName);

      <[
        def typeCode  = $(emitter.ReadTypeTag());
        def fieldName = $("reader" : global).ReadString();
        $(emitter.MakeReadCode(type))
      ]>
    }
  }
}
