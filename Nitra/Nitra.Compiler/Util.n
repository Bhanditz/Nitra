using Nitra.Compiler;
using Nitra.Model;
using Nitra.Typing;

using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;
using N = Nemerle.Compiler;
using SCG = System.Collections.Generic;

namespace Nitra
{
  internal module Util
  {
    public DefineConditional(this tb : N.TypeBuilder, classMember : ClassMember, conditionName : string = null) : void
    {
      if (conditionName == null || tb.Manager.Options.IsConstantDefined(conditionName))
        _ = tb.DefineWithSource(classMember)
      else
        tb.Define(classMember)
    }

    public GetListUserData[T](this manager : N.ManagerClass) : SCG.List[T]
    {
      def key = typeof(SCG.List[T]);
      mutable syntaxModules = manager.UserData[key] :> SCG.List[T];
      when (syntaxModules == null)
      {
        syntaxModules = SCG.List();
        manager.UserData[key] = syntaxModules;
      }
      syntaxModules
    }

    public MakeVariableName(this sequence : SequenceCompileInfo, prefix : string) : string
    {
      def suffix = match (sequence)
      {
        | SequenceCompileInfo.Root(Symbol = symbol) => symbol.Name
        | _                                  => sequence.SrcRule.FieldName
      };
      prefix + sequence.Level + "_" + suffix + "_" + Nemerle.Compiler.ManagerClass.Instance.GetNewId()
    }

    public MakeVariableName(this subrule : SubruleCompileInfo, prefix : string) : string
    {
      prefix + subrule.SequenceLevel + "_" + subrule.SrcRule.FieldName + "_" + Nemerle.Compiler.ManagerClass.Instance.GetNewId()
    }

    public MakeSpanClassName(spanClass : SpanClassSymbol) : string
    {
      spanClass.Name + "SpanClass"
    }

    public MakeStyleName(style : StyleSymbol) : string
    {
      style.Name + "Style"
    }

    public CreateConstant(tb : TypeBuilder, name : string, value : int) : string
    {
      assert2(tb != null);
      def decl   = <[ decl: private static $(name : global) = $(value) ]>;
      _ = tb.Define(decl);
      name
    }
  }
}
