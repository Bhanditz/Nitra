using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Typing;
using Nitra.Runtime;
using Nitra.Util;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public module SplicableSyntaxModuleConverter
  {
    public Convert(syntaxModule : ParsedSyntaxModuleSymbol) : void
    {
      def splicableSyntaxModule = SplicableSyntaxModuleSymbol(syntaxModule, syntaxModule.Name);
      _ = syntaxModule.Node.Parent.AddAndReport(["Splicable"], splicableSyntaxModule, splicableSyntaxModule.FirstLocation);

      def enumerateRules(sourceNode, targetNode, declarationSite : IRuleDeclarationSite)
      {
        foreach (symbol in sourceNode.GetChildren.[Symbol]())
        {
          match (symbol)
          {
            | ExtensibleRuleSymbol(IsToken = false) as ruleSymbol =>
              def splicableRuleSymbol = SplicableExtensibleRuleSymbol(ruleSymbol, ruleSymbol.Name, declarationSite);
              _ = targetNode.AddAndReport(splicableRuleSymbol, splicableRuleSymbol.FirstLocation);

              enumerateRules(ruleSymbol.Node, splicableRuleSymbol.Node, splicableRuleSymbol);

            | _ => ()
          }
        }
      }
      enumerateRules(syntaxModule.Node, splicableSyntaxModule.Node, splicableSyntaxModule)
    }
  }
}
