using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Typing;
using Nitra.Runtime;
using Nitra.Util;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public sealed class SplicableSyntaxModuleConverter
  {
    _rewriteOperations : SCG.Queue[RuleDefSymbol * Rule.Sequence] = SCG.Queue();
    _ruleMapTable      : SCG.Dictionary[RuleDefSymbol, RuleDefSymbol]                  = SCG.Dictionary();

    public CreateSymbols(syntaxModule : ParsedSyntaxModuleSymbol) : void
    {
      def splicableSyntaxModule = ChemicalSyntaxModuleSymbol(syntaxModule.FirstLocation, syntaxModule.Name)
        .SetExternalImports([])
        .SetTokenLiterals([]);
      _ = syntaxModule.Node.Parent.AddAndReport(["Splicable"], splicableSyntaxModule, splicableSyntaxModule.FirstLocation);

      def enumerateRules(sourceNode, targetNode, declarationSite : IRuleDeclarationSite)
      {
        foreach (symbol in sourceNode.GetChildren.[Symbol]())
        {
          match (symbol)
          {
            | ExtensibleRuleSymbol(IsToken = false) as ruleSymbol =>
              def splicableRuleSymbol = ChemicalBaseExtensibleRuleSymbol(ruleSymbol.FirstLocation, ruleSymbol.Name)
                .SetDeclarationSite(declarationSite)
                .SetOptions(RuleDefinitionOptions.Empty);

              _ = targetNode.AddAndReport(splicableRuleSymbol, splicableRuleSymbol.FirstLocation);
              _ruleMapTable.Add(ruleSymbol, splicableRuleSymbol);
              enumerateRules(ruleSymbol.Node, splicableRuleSymbol.Node, splicableRuleSymbol);

            | SimpleRuleSymbol(IsToken = false) as ruleSymbol when !(ruleSymbol.Type is RuleType.Void) =>
              def splicableRuleSymbol = ChemicalBaseSimpleRuleSymbol(ruleSymbol.FirstLocation, ruleSymbol.Name);
              _ = splicableRuleSymbol
                .SetDeclarationSite(declarationSite)
                .SetOptions(RuleDefinitionOptions.Empty)
                .SetKind(SimpleRuleKind.Normal)
                .SetType(RuleType.Ref(splicableRuleSymbol));

              _ = targetNode.AddAndReport(splicableRuleSymbol, splicableRuleSymbol.FirstLocation);
              _ruleMapTable.Add(ruleSymbol, splicableRuleSymbol);
              _rewriteOperations.Enqueue(splicableRuleSymbol, ruleSymbol.Rule);
              enumerateRules(ruleSymbol.Node, splicableRuleSymbol.Node, splicableRuleSymbol);

            | ExtensionRuleSymbol(IsToken = false) as ruleSymbol =>
              ()

            | _ => ()
          }
        }
      }
      enumerateRules(syntaxModule.Node, splicableSyntaxModule.Node, splicableSyntaxModule)
    }

    public ConvertRules() : void
    {
      while (_rewriteOperations.Count > 0)
      {
        def (ruleSymbol, seq) = _rewriteOperations.Dequeue();
        def newSeq = RewriteSequence(ruleSymbol, seq);
        match (ruleSymbol)
        {
          | ChemicalBaseSimpleRuleSymbol as s => _ = s.SetRule(newSeq);
          | _ => assert(false)
        }
      }
    }

    private RewriteSequence(ruleSymbol : RuleDefSymbol, seq : Rule.Sequence) : Rule.Sequence
    {
      def newRules = SCG.List();
      foreach (rule in seq.Rules)
      {
        if (rule.Type is RuleType.Void
            || rule.Type is RuleType.Chars
            || rule.Type is RuleType.Ref(RuleDefSymbol(IsToken = true)))
          newRules.Add(rule)
        else
        {
          def ruleSymbol = MakeSplicableRuleSymbol(ruleSymbol.DeclaringModule, rule);
          newRules.Add(Rule.Call(Location.Default, ruleSymbol.Type, rule.FieldName, SymbolRef.Some(Location.Default, true, ruleSymbol), 0))
        }
      }

      Rule.Sequence(seq.Location, Utils.EvaluateSequenceRuleType(newRules), "", newRules.ToNList())
    }

    [Memoize]
    private MakeSplicableRuleSymbol(syntaxModule : SyntaxModuleSymbol, rule : Rule) : ExtensibleRuleSymbol
    {
      def makeCall[TSymbol](ruleSymbol : TSymbol, bindingPower : int) : Rule.Call
        where TSymbol : SyntaxRuleSymbol
      {
        mutable splicableRuleSymbol;
        if (_ruleMapTable.TryGetValue(ruleSymbol, out splicableRuleSymbol))
          Rule.Call(Location.Default, splicableRuleSymbol.Type, "", SymbolRef.Some(Location.Default, true, splicableRuleSymbol), bindingPower)
        else
        {
          def syntaxModule = ruleSymbol.DeclaringModule;
          if (syntaxModule.Node.Parent.BindMany.[TSymbol]("Splicable" :: syntaxModule.Name :: ruleSymbol.ModuleRelativeName) is [r])
            Rule.Call(Location.Default, r.Type, "", SymbolRef.Some(Location.Default, true, r), bindingPower)
          else
            assert3(false, "cant find splicable rule to call")
        }
      }

      def rewrite(_ : Rule) : Rule
      {
        | RepeatWithSeparator(minCount, maxCount, item, separator, hangingSeparator) as rule => Rule.RepeatWithSeparator(rule, minCount, maxCount, rewrite(item), rewrite(separator), hangingSeparator)
        | Repeat(minCount, maxCount, item)     as rule => Rule.Repeat(rule, minCount, maxCount, rewrite(item))
        | Sequence(rules)                      as rule => Rule.Sequence(rule, rules.Map(rewrite))
        | String                               as rule => rule
        | Not(item)                            as rule => Rule.Not(rule, rewrite(item))
        | And(item)                            as rule => Rule.And(rule, rewrite(item))
        | Call(SymbolRef.Some(SimpleRuleSymbol(IsToken = false) as ruleSymbol), bp)     => makeCall(ruleSymbol, bp)
        | Call(SymbolRef.Some(ExtensibleRuleSymbol(IsToken = false) as ruleSymbol), bp) => makeCall(ruleSymbol, bp)
        | Call                                 as rule => rule
      }

      def rootSymbol = ChemicalBaseExtensibleRuleSymbol(Location.Default, Nemerle.Compiler.Util.tmpname(rule.FieldName))
        .SetDeclarationSite(syntaxModule)
        .SetOptions(RuleDefinitionOptions.Empty);
      _ = syntaxModule.Node.AddAndReport(rootSymbol, rootSymbol.FirstLocation);

      def spliceSeqRules = [
        Rule.String(Location.Default, "", "$" + rule.FieldName, null, true),
        //Rule.Call(S),
        Rule.String(Location.Default, "", "("),
        //Rule.Call(s),
        //Rule.Call(expr),
        Rule.String(Location.Default, "", ")"),
        //Rule.Call(s),
      ];
      def spliceRule = Rule.Sequence(Location.Default, Utils.EvaluateSequenceRuleType(spliceSeqRules), "", spliceSeqRules);
      def spliceRuleSymbol = ChemicalBaseExtensionRuleSymbol(Location.Default, "Splice")
        .SetDeclarationSite(rootSymbol)
        .SetBaseRule(SymbolRef.Some(Location.Default, true, rootSymbol))
        .SetOptions(RuleDefinitionOptions.Empty)
        .SetRule(spliceRule);
      _ = rootSymbol.Node.AddAndReport(spliceRuleSymbol, spliceRuleSymbol.FirstLocation);

      def rewrittenRule = rewrite(rule);
      def quoteRule =
        if (rewrittenRule is Rule.Sequence as r)
          r
        else
          Rule.Sequence(Location.Default, rewrittenRule.Type, "", [rewrittenRule]);
      def quoteRuleSymbol = ChemicalBaseExtensionRuleSymbol(Location.Default, "Quote")
        .SetDeclarationSite(rootSymbol)
        .SetBaseRule(SymbolRef.Some(Location.Default, true, rootSymbol))
        .SetOptions(RuleDefinitionOptions.Empty)
        .SetRule(quoteRule);
      _ = rootSymbol.Node.AddAndReport(quoteRuleSymbol, quoteRuleSymbol.FirstLocation);

      rootSymbol
    }
  }
}
