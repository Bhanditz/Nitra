using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed partial class TryParseMethodEmitter
  {
    [Record]
    private sealed class SequenceData : SequenceDataBase[TryParseMethodEmitter]
    {
      [RecordIgnore] public OkLabel   : PExprLabel { get; private set; }
      [RecordIgnore] public FailLabel : PExprLabel { get; private set; }

      public override Init() : void
      {
        match (Structure)
        {
          | SequenceCompileInfo.Ast =>
            OkLabel   = Emitter.Environment.MakeLabel("Ast_Ok");
            FailLabel = Emitter.Environment.MakeLabel("Ast_Fail");

          | SequenceCompileInfo.Predicate =>
            def id = ManagerClass.Instance.GetNewId();
            OkLabel   = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(id)_Ok");
            FailLabel = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(id)_Fail");

          | _ =>
            OkLabel   = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(Structure.Owner.State)_Ok");
            FailLabel = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(Structure.Owner.State)_Fail");
        }
      }
    }

    [Record]
    private sealed class SubruleData : SubruleDataBase[TryParseMethodEmitter]
    {
      [RecordIgnore] public ParseLabel         : PExprLabel { get; private set; }

      public FailParseLabel     : PExprLabel { get { Emitter._data.SequenceData[Field.Owner].FailLabel } }
      public ContinueParseLabel : PExprLabel
      {
        get
        {
          def getSibling(subrule : SubruleCompileInfo) : SubruleCompileInfo
          {
            | Marker => getSibling(subrule.NextSibling)
            | _      => subrule
          }
          def nextSibling = getSibling(Field.NextSibling);
          if (nextSibling == null)
            Emitter._data.SequenceData[Field.Owner].OkLabel
          else
            Emitter._data.SubruleData[nextSibling].ParseLabel
        }
      }

      public override Init() : void
      {
        ParseLabel    = Emitter.Environment.MakeLabel($"Parse_$LabelSuffix");
      }
    }

    _data : SequenceDataContainer[TryParseMethodEmitter, SequenceData, SubruleData];

#pragma warning disable 10003
    private OkLabel      (sequence : SequenceCompileInfo) : PExpr { _data.SequenceData[sequence].OkLabel.Label()   }
    private GotoOkLabel  (sequence : SequenceCompileInfo) : PExpr { _data.SequenceData[sequence].OkLabel.Goto()    }
    private FailLabel    (sequence : SequenceCompileInfo) : PExpr { _data.SequenceData[sequence].FailLabel.Label() }
    private GotoFailLabel(sequence : SequenceCompileInfo) : PExpr { _data.SequenceData[sequence].FailLabel.Goto()  }

    private ListStartPos          (subrule : SubruleCompileInfo) : PExpr { <[ $(CreateVariable($"listStartPos$(subrule.Level)") : global) ]>   }
    private ListEndPos            (subrule : SubruleCompileInfo) : PExpr { <[ $(CreateVariable($"listEndPos$(subrule.Level)") : global) ]>     }
    private OptionStartPos        (subrule : SubruleCompileInfo) : PExpr { <[ $(CreateVariable($"optionStartPos$(subrule.Level)") : global) ]> }
    private ParseLabel            (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ParseLabel.Label()         }
    private GotoParseLabel        (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ParseLabel.Goto()          }
    private ContinueParseLabel    (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ContinueParseLabel.Label() }
    private GotoContinueParseLabel(subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ContinueParseLabel.Goto()  }
    private FailParseLabel        (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].FailParseLabel.Label()     }
    private GotoFailParseLabel    (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].FailParseLabel.Goto()      }
#pragma warning restore
  }
}
