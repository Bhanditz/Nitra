using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileOption(code : SCG.List[PExpr], field : RuleStructureField.Option) : void
    {
      def headPredicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));

      code.Add(<[
        $(ParseLabel(field));
          _ = $(field.ToString());
          $headPredicateCode;
          $(OptionStartPos(field)) = $CurTextPos;
          $(GotoParseLabel(field.Rule.NonMarkerFields[0]));

        $(OkLabel(field.Rule));
          when ($(EndOfFieldLevel(field)))
            $(_endLabel.Goto());
          $(AddParsedStateInfo(field, <[ $CurTextPos - $(OptionStartPos(field)) ]>));
          $(GotoContinueParseLabel(field));

        $(FailLabel(field.Rule));
          if ($(EndOfFieldLevel(field)))
          {
            $CurTextPos = -1;
            $(_endLabel.Goto());
          }
          else
          {
            $(AddParsedStateInfo(field, <[ 0 ]>));
            $(GotoContinueParseLabel(field));
          }
      ]>);
    }
  }
}
