using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal abstract partial class MethodEmitter//TODO: Move & rename file
  {
    public DefineStateMapMethod[T](name : string, map : RuleStructureField -> T, toPExpr : T -> PExpr) : void
    {
      def compile() : PExpr
      {
        def cases = SCG.List();
        foreach (field in SequenceCompileInfo.AllNonMarkerFields)
          cases.Add(<[ case: | $(field.State) => $(toPExpr(map(field))) ]>);

        cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);

        <[ match (state) { ..$cases } ]>
      }
      TypeBuilder.DefineConditional(<[decl:
        public override $(name : global)(state : int) : int
        {
          $(if (Environment.IsIdeMode)
            <[ IgnoreParams(); assert(false); ]>
          else
            compile())
        }
      ]>);
    }

    public DefineStateMapMethod(name : string, predicate : RuleStructureField -> int) : void
    {
      DefineStateMapMethod(name, predicate, <[ $_ ]>)
    }

    public DefineStateMapMethod(name : string, predicate : RuleStructureField -> bool) : void
    {
      def compile() : PExpr
      {
        def cases = SCG.List();
        def (forTrue, forFalse) = SequenceCompileInfo.AllNonMarkerFields.ToNList().Partition(predicate);

        def truePatterns  = forTrue. Map(field => <[ $(field.State) ]>);
        def falsePatterns = forFalse.Map(field => <[ $(field.State) ]>);

        unless (truePatterns.IsEmpty)
          cases.Add(MatchCase(truePatterns,  <[ true ]>));
        unless (falsePatterns.IsEmpty)
          cases.Add(MatchCase(falsePatterns, <[ false ]>));

        cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);

        <[ match (state) { ..$cases } ]>
      }

      TypeBuilder.DefineConditional(<[decl:
        public override $(name : global)(state : int) : bool
        {
          $(if (Environment.IsIdeMode)
            <[ IgnoreParams(); assert(false); ]>
          else
            compile())
        }
      ]>);
    }
  }
}
