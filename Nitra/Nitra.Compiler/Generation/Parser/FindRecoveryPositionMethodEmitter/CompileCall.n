using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

using N = Nemerle.Compiler;

namespace Nitra.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public MakeSimpleRuleCall(ruleSymbol : SimpleRuleSymbol, curTextPos : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol) : global).FindRecoveryPosition($curTextPos, stack, parseResult) ]>
    }

    public MakeExtensibleRuleCall(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int, curTextPos : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol, bindingPower) : global).FindRecoveryPosition($curTextPos, stack, parseResult) ]>
    }

    public override CompileExtensibleCall(code : SCG.List[PExpr], field : RuleStructureField.ExtensibleCall) : void
    {
      CompileCallImpl(code, MakeExtensibleRuleCall(field.Symbol, field.BindingPower, CurTextPos), field)
    }

    public override CompileSimpleCall(code : SCG.List[PExpr], field : RuleStructureField.SimpleCall) : void
    {
      CompileCallImpl(code, MakeSimpleRuleCall(field.Symbol, CurTextPos), field)
    }

    public CompileCallImpl(code : SCG.List[PExpr], call : PExpr, field : RuleStructureField) : void
    {
      code.Add(CheckState(field, <[
        def stack = $(MakeRecoveryStackFrame(field, CurTextPos));
        when (stack != null)
        {
          when (parseResult.MaxFailPos == curTextPos)
            parseResult.RecoveryStacks.Add(stack);
          $call;
        }
      ]>))
    }
  }
}
