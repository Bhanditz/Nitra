using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal partial class FindRecoveryPositionMethodEmitter : MethodEmitter
  {
    public CompileSkipAny(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      assert3(subrule.Rule.Subrules.Length == 1);
      code.Add(CheckState(subrule, <[
        when (parseResult.MaxFailPos == $CurTextPos)
        {
          def stack = $(MakeRecoveryStackFrame(subrule, CurTextPos));
          when (stack != null)
            parseResult.RecoveryStacks.Add(stack);
        }
      ]>))
    }

    public override CompileList(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      when (subrule.IsSkipAnyPattern)
      {
        CompileSkipAny(code, subrule);
        return;
      }

      CompileFunction(subrule.Rule);
      def localVariableEmitter = LocalVariableEmitter();
      def stateData = ListStateData(localVariableEmitter, subrule);
      def itemPtr = AstPointer.New(subrule.Rule, ConstantEmitter, this, "itemPtr");
      def body = <[
        $(stateData.Init());
        $(stateData.ListStartPos) = $CurTextPos;
        mutable lastItemStart = -1;
        mutable itemEndPos = $CurTextPos;
        while (lastItemStart < itemEndPos)
        {
          $(stateData.Inc());
          def $(itemPtr.Var) = parseResult.TryGetAst(itemEndPos, $(subrule.Rule.AstId : global));
          if ($(itemPtr.Var) > 0 && $(itemPtr.Get(itemPtr.Sequence.HeaderState)) == Nitra.Internal.ParseResult.AstParsedState)
          {
            lastItemStart = itemEndPos;
            itemEndPos += parseResult.AstSize($(itemPtr.Var), $(subrule.Rule.SizesStart), $(subrule.Rule.SizesEnd));
          }
          else
          {
            when (lastItemStart >= 0)
            {
              $(stateData.Dec());
              $(stateData.ListEndPos) = lastItemStart;
              def stack = $(MakeRecoveryStackFrame(subrule, <[ lastItemStart ]>));
              when (stack != null)
                $(FunctionName(subrule.Rule) : global)(lastItemStart, ..$(stateData.TryGetCounter()), stack, parseResult);
              $(stateData.Inc());
            }
            $(stateData.ListEndPos) = itemEndPos;
            def stack = $(MakeRecoveryStackFrame(subrule, <[ itemEndPos ]>));
            when (stack != null)
              $(FunctionName(subrule.Rule) : global)(itemEndPos, ..$(stateData.TryGetCounter()), stack, parseResult);
            break;
          }
        }
      ]>;
      code.Add(CheckState(subrule, <[
        ..$(localVariableEmitter.Define());
        $body;
      ]>))
    }
  }
}
