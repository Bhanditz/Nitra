using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileOption(code : SCG.List[PExpr], subrule : SubruleCompileInfo.Option) : void
    {
      CompileFunction(subrule.Rule);
      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));

      code.Add(<[
      $(ParseLabel(subrule));
        _ = $(subrule.ToString());
        $headPredicateCode;
        $(AllocateParentRawTree(subrule));
        newPos = $(FunctionName(subrule.Rule) : global)($CurTextPos, text, parseResult);
        if (newPos > 0)
        {
          $(RawTreePtr(subrule.Owner).Set(subrule, <[ newPos - $CurTextPos ]>));
          $CurTextPos = newPos;
        }
        else
        {
          $(RawTreePtr(subrule.Owner).Set(subrule, <[ 0 ]>));
        }
        $(GotoContinueParseLabel(subrule));
      ]>);
    }
  }
}
