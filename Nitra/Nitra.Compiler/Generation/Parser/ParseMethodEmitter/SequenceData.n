using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter
  {
    [Record]
    private sealed class SequenceData : SequenceDataBase[ParseMethodEmitter]
    {
      [RecordIgnore] public OkLabel                        : PExprLabel     { get; private set; }
      [RecordIgnore] public FailLabel                      : PExprLabel     { get; private set; }
      [RecordIgnore] public RawTreePtr                     : RawTreePointer { get; private set; }
                     public RawTreeStart                   : PExpr          { get { <[ $(Emitter.CreateVariable($"rawTreeStart$(Sequence.Level)") : global) ]> } }
      [RecordIgnore] public IsDynamicSyntaxExtenderHandler : bool           { get; private set; default false;}
      [RecordIgnore] public DynamicSyntaxExtenderHandler   : PExpr          { get; private set; default PExpr.Error("Can't create DynamicSyntaxExtenderHandler for this sequence");}

      public override Init() : void
      {
        RawTreePtr = RawTreePointer.New(Sequence, Emitter.ConstantEmitter, Emitter, "rawTreePtr");
        match (Sequence)
        {
          | SequenceCompileInfo.Root as seq =>
            OkLabel   = Emitter.Environment.MakeLabel("Root_Ok");
            FailLabel = Emitter.Environment.MakeLabel("Root_Fail");

            when (seq.Symbol is ExtensionRuleSymbol as symbol)
            when (symbol.Options.IsDynamicSyntaxExtender)
            {
              IsDynamicSyntaxExtenderHandler = true;
              DynamicSyntaxExtenderHandler   = <[ $((symbol.Name + "Handler") : usesite) ]>
            }

          | SequenceCompileInfo.Predicate =>
            def id = ManagerClass.Instance.GetNewId();
            OkLabel   = Emitter.Environment.MakeLabel($"$(Sequence.GetType().Name)_$(id)_Predicate_Ok");
            FailLabel = Emitter.Environment.MakeLabel($"$(Sequence.GetType().Name)_$(id)_Predicate_Fail");

          | _ =>
            OkLabel   = Emitter.Environment.MakeLabel($"$(Sequence.GetType().Name)_$(Sequence.Owner.State)_Ok");
            FailLabel = Emitter.Environment.MakeLabel($"$(Sequence.GetType().Name)_$(Sequence.Owner.State)_Fail");
        }
      }
    }

    [Record]
    private sealed class SubruleData : SubruleDataBase[ParseMethodEmitter]
    {
      [RecordIgnore] public ParseLabel         : PExprLabel { get; private set; }

      public FailParseLabel     : PExprLabel { get { Emitter._data.SequenceData[Subrule.Owner].FailLabel } }
      public ContinueParseLabel : PExprLabel
      {
        get
        {
          def getSibling(subrule : SubruleCompileInfo) : SubruleCompileInfo
          {
            | Marker => getSibling(subrule.NextSibling)
            | _      => subrule
          }
          def nextSibling = getSibling(Subrule.NextSibling);
          if (nextSibling == null)
            Emitter._data.SequenceData[Subrule.Owner].OkLabel
          else
            Emitter._data.SubruleData[nextSibling].ParseLabel
        }
      }

      public override Init() : void
      {
        ParseLabel    = Emitter.Environment.MakeLabel($"Parse_$LabelSuffix");
      }
    }

    _data : SequenceDataContainer[ParseMethodEmitter, SequenceData, SubruleData];

#pragma warning disable 10003
    private OkLabel                       (sequence : SequenceCompileInfo) : PExpr          { _data.SequenceData[sequence].OkLabel.Label()   }
    private GotoOkLabel                   (sequence : SequenceCompileInfo) : PExpr          { _data.SequenceData[sequence].OkLabel.Goto()    }
    private FailLabel                     (sequence : SequenceCompileInfo) : PExpr          { _data.SequenceData[sequence].FailLabel.Label() }
    private GotoFailLabel                 (sequence : SequenceCompileInfo) : PExpr          { _data.SequenceData[sequence].FailLabel.Goto()  }
    private RawTreePtr                    (sequence : SequenceCompileInfo) : RawTreePointer { _data.SequenceData[sequence].RawTreePtr        }
    private RawTreeStart                  (sequence : SequenceCompileInfo) : PExpr          { _data.SequenceData[sequence].RawTreeStart      }
    private IsDynamicSyntaxExtenderHandler(sequence : SequenceCompileInfo) : bool           { _data.SequenceData[sequence].IsDynamicSyntaxExtenderHandler}
    private DynamicSyntaxExtenderHandler  (sequence : SequenceCompileInfo) : PExpr          { _data.SequenceData[sequence].DynamicSyntaxExtenderHandler   }
    private FunctionName                  (sequence : SequenceCompileInfo) : string         { sequence.ParseFunctionName                     }

    private ParseLabel            (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ParseLabel.Label()         }
    private GotoParseLabel        (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ParseLabel.Goto()          }
    private ContinueParseLabel    (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ContinueParseLabel.Label() }
    private GotoContinueParseLabel(subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].ContinueParseLabel.Goto()  }
    private FailParseLabel        (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].FailParseLabel.Label()     }
    private GotoFailParseLabel    (subrule : SubruleCompileInfo) : PExpr { _data.SubruleData[subrule].FailParseLabel.Goto()      }
#pragma warning restore
  }
}
