using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

using N = Nemerle.Compiler;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileEmpty(code : SCG.List[PExpr], field : RuleStructureField.Empty) : void
    {
      def (predicateCode, predicateFailLabel) = CompilePredicate(field.HeadPredicates);
      code.Add(
      <[
      $(ParseLabel(field));
        _ = $(field.ToString());
        $predicateCode;

      $(RecoveryLabel(field));
        $(AllocateParentAst(field));
        $(AstPtr(field.Owner).Set(field, <[ 0 ]>));
        $(GotoContinueParseLabel(field));

        $predicateFailLabel;
        $(RecoveryCode());
        parseState = $(field.State : int);
        $(GotoFailParseLabel(field));
      ]>)
    }
  }
}
