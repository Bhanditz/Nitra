using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter
  {
    [Record]
    private sealed class SequenceData : SequenceDataBase[ParseMethodEmitter]
    {
      [RecordIgnore] public OkLabel   : PExprLabel { get; private set; }
      [RecordIgnore] public FailLabel : PExprLabel { get; private set; }
      [RecordIgnore] public AstPtr    : AstPointer { get; private set; }
                     public AstStart  : PExpr { get { <[ $(Emitter.CreateVariable($"astStart$(Structure.Level)") : global) ]> } }

      public override Init() : void
      {
        AstPtr = AstPointer.New(Structure, Emitter.ConstantEmitter, Emitter, "astPtr");
        match (Structure)
        {
          | SequenceCompileInfo.Ast =>
            OkLabel   = Emitter.Environment.MakeLabel("Ast_Ok");
            FailLabel = Emitter.Environment.MakeLabel("Ast_Fail");

          | SequenceCompileInfo.Predicate =>
            def id = ManagerClass.Instance.GetNewId();
            OkLabel   = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(id)_Ok");
            FailLabel = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(id)_Fail");

          | _ =>
            OkLabel   = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(Structure.Owner.State)_Ok");
            FailLabel = Emitter.Environment.MakeLabel($"$(Structure.GetType().Name)_$(Structure.Owner.State)_Fail");
        }
      }
    }

    [Record]
    private sealed class SubruleData : SubruleDataBase[ParseMethodEmitter]
    {
      [RecordIgnore] public ParseLabel         : PExprLabel { get; private set; }
      [RecordIgnore] public RecoveryLabel      : PExprLabel { get; private set; }

      public FailParseLabel     : PExprLabel { get { Emitter._data.SequenceData[Field.Owner].FailLabel } }
      public ContinueParseLabel : PExprLabel
      {
        get
        {
          def getSibling(field : SubruleCompileInfo) : SubruleCompileInfo
          {
            | Marker => getSibling(field.NextSibling)
            | _      => field
          }
          def nextSibling = getSibling(Field.NextSibling);
          if (nextSibling == null)
            Emitter._data.SequenceData[Field.Owner].OkLabel
          else
            Emitter._data.SubruleData[nextSibling].ParseLabel
        }
      }

      public override Init() : void
      {
        ParseLabel    = Emitter.Environment.MakeLabel($"Parse_$LabelSuffix");
        RecoveryLabel = Emitter.Environment.MakeLabel($"Recovery_$LabelSuffix");
      }
    }

    _data : SequenceDataContainer[ParseMethodEmitter, SequenceData, SubruleData];

#pragma warning disable 10003
    private OkLabel      (ruleStructure : SequenceCompileInfo) : PExpr      { _data.SequenceData[ruleStructure].OkLabel.Label()   }
    private GotoOkLabel  (ruleStructure : SequenceCompileInfo) : PExpr      { _data.SequenceData[ruleStructure].OkLabel.Goto()    }
    private FailLabel    (ruleStructure : SequenceCompileInfo) : PExpr      { _data.SequenceData[ruleStructure].FailLabel.Label() }
    private GotoFailLabel(ruleStructure : SequenceCompileInfo) : PExpr      { _data.SequenceData[ruleStructure].FailLabel.Goto()  }
    private AstPtr       (ruleStructure : SequenceCompileInfo) : AstPointer { _data.SequenceData[ruleStructure].AstPtr            }
    private AstStart     (ruleStructure : SequenceCompileInfo) : PExpr      { _data.SequenceData[ruleStructure].AstStart          }
    private FunctionName (ruleStructure : SequenceCompileInfo) : string     { ruleStructure.ParseFunctionName                          }

    private ParseLabel            (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].ParseLabel.Label()         }
    private GotoParseLabel        (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].ParseLabel.Goto()          }
    private RecoveryLabel         (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].RecoveryLabel.Label()      }
    private GotoRecoveryLabel     (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].RecoveryLabel.Goto()       }
    private ContinueParseLabel    (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].ContinueParseLabel.Label() }
    private GotoContinueParseLabel(ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].ContinueParseLabel.Goto()  }
    private FailParseLabel        (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].FailParseLabel.Label()     }
    private GotoFailParseLabel    (ruleStructureField : SubruleCompileInfo) : PExpr { _data.SubruleData[ruleStructureField].FailParseLabel.Goto()      }
#pragma warning restore
  }
}
