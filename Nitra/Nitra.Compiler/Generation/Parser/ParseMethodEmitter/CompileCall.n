using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

using N = Nemerle.Compiler;

namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileRegularCall(code : SCG.List[PExpr], subrule : SubruleCompileInfo.RegularCall) : void
    {
      def call = <[ $(MakeRegularRuleCallFullName(subrule.Symbol))($CurTextPos, text) ]>;
      CompileCallImpl(code, call, subrule);
    }

    public override CompileExtensibleCall(code : SCG.List[PExpr], subrule : SubruleCompileInfo.ExtensibleCall) : void
    {
      def call = <[ $(Owner.MakeParserName(subrule.Symbol, subrule.BindingPower) : global).Parse($CurTextPos, text, parseResult) ]>;
      CompileCallImpl(code, call, subrule);
    }

    public override CompileSimpleCall(code : SCG.List[PExpr], subrule : SubruleCompileInfo.SimpleCall) : void
    {
      def call = <[ $(Owner.MakeParserName(subrule.Symbol) : global).Parse($CurTextPos, text, parseResult) ]>;
      CompileCallImpl(code, call, subrule)
    }

    public CompileCallImpl(code : SCG.List[PExpr], call : PExpr, subrule : SubruleCompileInfo) : void
    {
      def loc = subrule.SrcRule.Location.NLocation();
      when (!loc.IsEmpty && loc.IsSourceAvailable)
        call.Location = loc;

      def debugSetLastResult =
        if (Owner.Environment.IsDebug)
          <[ parseResult.LastParseStart = $CurTextPos; parseResult.LastParseEnd = newPos; ]>;
        else
          <[ () ]>;

      def debugExitMark(loc)
      {
        def e = <[ () ]>;
        // Make the location directly behind the rule call. This allows you to see the result of the parsing rules.
        e.Location = N.Location(loc.FileIndex, loc.EndLine, loc.EndColumn, loc.Line, loc.EndColumn + 1);
        e
      }

      def (predicateCode, predicateFailLabel) = CompilePredicate(subrule.HeadPredicates);
      code.Add(<[
      $(ParseLabel(subrule));
        _ = $(subrule.ToString());
        $predicateCode;
      $(RecoveryLabel(subrule));
        newPos = $call;
        tmpSize = newPos - $CurTextPos;
        $debugSetLastResult;
        if (newPos >= 0)
        {
          $(AllocateParentRawTree(subrule));
          $(RawTreePtr(subrule.Owner).Set(subrule, <[ tmpSize ]>));
          $CurTextPos = newPos;
          $(debugExitMark(loc));
          $(GotoContinueParseLabel(subrule));
        }
        else
        {
          $predicateFailLabel;
          $(RecoveryCode());
          parseState = $(subrule.State : int);//состояние
          $(MakeRawTreeForSingleCallExtension(subrule));
          $(debugExitMark(loc));
          $(GotoFailParseLabel(subrule));
        }
      ]>)
    }
  }
}
