using Nitra.Internal;
using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class RecoveryRuleParserEmitter
  {
    public Owner               : RuleParserEmitter  { get; }
    public SequenceCompileInfo : SequenceCompileInfo.Ast  { get; }
    public Environment         : EmitterEnvironment { get { Owner.Environment } }
    public TypeBuilder         : TypeBuilder        { get; }
    

    public this(owner : RuleParserEmitter, tb : TypeBuilder, sequence : SequenceCompileInfo.Ast)
    {
      this.Owner               = owner;
      this.TypeBuilder         = tb;
      this.SequenceCompileInfo = sequence;
    }

    public Emit() : void
    {
      DefineStateMapMethod("IsStateCanParseEmptyString", _.CanParseEmptyString);
      DefineStateMapMethod("IsVoidState",                subrule => subrule.SrcRule.Type is RuleType.Void);
      DefineStateMapMethod("IsStartState",               _.IsStart);
      DefineStateMapMethod("IsLoopSeparatorStart",       _.IsLoopSeparatorStart);
      DefineStateMapMethod("IsLoopSeparator",            _.IsLoopSeparator);
      DefineStateMapMethod("IsLoopBody",                 _.IsLoopBody);
      DefineStateMapMethod("GetStartState",               subrule : SubruleCompileInfo => subrule.Owner.NonMarkerSubrules[0].State);
      DefineStateMapMethod("GetOffsetForState",           subrule : SubruleCompileInfo => subrule.Offset);
      
      this.TypeBuilder.DefineConditional(<[decl: [Nemerle.Diagnostics.CompileStatistic("Parse:Recovery")] public override GetLoopBodyForSeparator(separatorId : int, bodyId : out int, firstState : out int) : bool { $(Compile_GetLoopBodyForSeparator(SequenceCompileInfo)) } ]>);
      this.TypeBuilder.DefineConditional(<[decl: [Nemerle.Diagnostics.CompileStatistic("Parse:Recovery")] public override GetRuleParserForState(state : int) : Nitra.Internal.Recovery.IRecoveryRuleParser * int { $(Compile_GetRuleParserForState(SequenceCompileInfo)) } ]>);
      this.TypeBuilder.DefineConditional(<[decl: [Nemerle.Diagnostics.CompileStatistic("Parse:Recovery")] public override CodeForState(state : int) : string { $(Compile_CodeForState(SequenceCompileInfo)) } ]>);
      this.TypeBuilder.DefineConditional(<[decl: [Nemerle.Diagnostics.CompileStatistic("Parse:Recovery")] public override CodeForStates(startState : int, endState : int, skipOptionalStates : bool) : array[string] { $(Compile_CodeForStates(SequenceCompileInfo)) } ]>);
      this.TypeBuilder.DefineConditional(<[decl: public override IsTokenRule    : bool   { get { $(SequenceCompileInfo.Symbol.Options.IsTokenRule) } } ]>);
      this.TypeBuilder.DefineConditional(<[decl: public override Code           : string { get { $(SequenceCompileInfo.SrcRule.ToString()) } } ]>);
      this.TypeBuilder.DefineConditional(<[decl: public override CodeWithStates : string { get { $(SequenceCompileInfo.ToString()) } } ]>);
      this.TypeBuilder.DefineConditional(<[decl: public override RuleName       : string { get { $(SequenceCompileInfo.Symbol.Name) } } ]>);
    }

    public CurTextPos : PExpr { get { <[ curTextPos ]> } }

    Compile_GetLoopBodyForSeparator(sequence : SequenceCompileInfo.Ast) : PExpr
    {
      def loops = SCG.List();

      foreach (subrule is SubruleCompileInfo.ListWithSeparator in sequence.AllNonMarkerSubrules)
      {
        loops.Add(<[  
          when (separatorId == $(subrule.Separator.AstId : global))
          {
            bodyId = $(subrule.Rule.AstId : global);
            firstState = $(subrule.Rule.NonMarkerSubrules[0].State : int);
            return true;
          } ]>);
      }

      <[ IgnoreParams(); ..$loops; false ]>
    }

    Compile_GetRuleParserForState(sequence : SequenceCompileInfo.Ast) : PExpr
    {
      def code = SCG.List();
      foreach (subrule in sequence.AllNonMarkerSubrules)
      {
        def value = match (subrule)
        {
          | Marker
          | Empty
          | TokenString
          | RegularCall                              => <[ (null, -1) ]>
          | SimpleCall    (ruleSymbol)               => <[ ($(Owner.MakeParserName(ruleSymbol) : global), $(Owner.MakeParserName(ruleSymbol) : global).RuleId) ]>
          | ExtensibleCall(ruleSymbol, bindingPower) => <[ ($(Owner.MakeParserName(ruleSymbol, bindingPower) : global), -1) ]>
          | Option                          as subrule => <[ (this, $(subrule.Rule.AstId : global)) ]>
          | List                            as subrule => <[ (this, $(subrule.Rule.AstId : global)) ]>
          | ListWithSeparator               as subrule => <[ (this, $(subrule.Rule.AstId : global)) ]>
        }
        code.Add(<[ case: | $(subrule.State) => $value ]>);
      }

      code.Add(<[ case: | _ => assert3(false) ]>);

      <[
        match (state)
        {
          ..$code
        }
      ]>
    }

    Compile_CodeForState(sequence : SequenceCompileInfo.Ast) : PExpr
    {
      def nextField(subrule : SubruleCompileInfo) : SubruleCompileInfo
      {
        if (subrule == null)
          null
        else if (subrule.NextSibling != null)
          subrule.NextSibling
        else
          nextField(subrule.Owner.Owner)
      }

      def code = SCG.List();

      for (mutable i = 0; i < sequence.StateCount; i++)
      {
        mutable str = sequence.CodeForState(i);
        def subrule = sequence.AllNonMarkerSubrules[i];
        when (subrule.IsLoopSeparatorStart)
        {
          def afterLoopField = nextField(subrule);

          when (afterLoopField != null)
            str += ", " + sequence.CodeForState(afterLoopField.State);
        }
        code.Add(<[ case: | $i => $str ]>);
      }

      code.Add(<[ case: | _ => assert3(false) ]>);

      <[
        match (state)
        {
          ..$code
        }
      ]>
    }

    Compile_CodeForStates(sequence : SequenceCompileInfo.Ast) : PExpr
    {
      def code = SCG.List();
      def subrules = sequence.AllNonMarkerSubrules;

      for (mutable i = 0; i < sequence.StateCount; i++)
      {
        def subrule = subrules[i];
        def str = subrule.SrcRule.ToString();
        if (subrule.CanParseEmptyString)
          code.Add(<[ case: | $i => unless (skipOptionalStates) result.Add($str) ]>);
        else
          code.Add(<[ case: | $i => result.Add($str) ]>);
      }

      code.Add(<[ case: | _ => assert3(false) ]>);

      <[
        assert3(endState >= -1);
        _ = skipOptionalStates;
        def result = SCG.List();
        
        for (mutable i = startState; i != endState; i = GetNextState(i))
        {
          match (i)
          {
            ..$code
          }
        }
        
        result.ToArray()
      ]>
    }

    IsEndOfSequenceLevel(subrule : SubruleCompileInfo) : PExpr
    {
      <[ startLevel > $(subrule.SequenceLevel) ]>
    }

    AddParsedStateInfo(subrule : SubruleCompileInfo, size : PExpr) : PExpr
    {
      <[
        when (startLevel == $(subrule.SequenceLevel))
          parsedStates.Add(Nitra.Internal.Recovery.ParsedStateInfo($(subrule.State), $size));
      ]>
    }

    public RecoveryCode() : PExpr
    {
      <[
        when (parseResult.MaxFailPos < curTextPos)
          parseResult.MaxFailPos = curTextPos;
      ]>
    }

    public DefineStateMapMethod(name : string, predicate : SubruleCompileInfo -> bool) : void
    {
      def compile() : PExpr
      {
        def cases = SCG.List();
        def (forTrue, forFalse) = SequenceCompileInfo.AllNonMarkerSubrules.ToNList().Partition(predicate);

        def truePatterns  = forTrue. Map(subrule => <[ $(subrule.State) ]>);
        def falsePatterns = forFalse.Map(subrule => <[ $(subrule.State) ]>);

        unless (truePatterns.IsEmpty)
          cases.Add(MatchCase(truePatterns,  <[ true ]>));
        unless (falsePatterns.IsEmpty)
          cases.Add(MatchCase(falsePatterns, <[ false ]>));

        cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);

        <[ match (state) { ..$cases } ]>
      }

      TypeBuilder.DefineConditional(<[decl:
        [Nemerle.Diagnostics.CompileStatistic("Parse:Recovery")]
        public override $(name : global)(state : int) : bool
        {
          $(if (Environment.IsIdeMode)
            <[ IgnoreParams(); assert(false); ]>
          else
            compile())
        }
      ]>);
    }

    public DefineStateMapMethod(name : string, predicate : SubruleCompileInfo -> int) : void
    {
      DefineStateMapMethod(name, predicate, <[ $_ ]>)
    }

    public DefineStateMapMethod[T](name : string, map : SubruleCompileInfo -> T, toPExpr : T -> PExpr) : void
    {
      def compile() : PExpr
      {
        def cases = SCG.List();
        foreach (subrule in SequenceCompileInfo.AllNonMarkerSubrules)
          cases.Add(<[ case: | $(subrule.State) => $(toPExpr(map(subrule))) ]>);

        cases.Add(<[ case: | x => assert(false, $"Unknown parse state '$x'.") ]>);

        <[ match (state) { ..$cases } ]>
      }
      TypeBuilder.DefineConditional(<[decl:
        [Nemerle.Diagnostics.CompileStatistic("Parse:Recovery")]
        public override $(name : global)(state : int) : int
        {
          $(if (Environment.IsIdeMode)
            <[ IgnoreParams(); assert(false); ]>
          else
            compile())
        }
      ]>);
    }
  }
}
