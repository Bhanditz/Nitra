using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class ListStateData
  {
    private _variableEmitter : IVariableEmitter;
    private _fieldLevel      : int;
    private _useCounter      : bool;

    private this(variableEmitter : IVariableEmitter, fieldLevel : int, useCounter : bool)
    {
      _variableEmitter = variableEmitter;
      _useCounter      = useCounter;
      _fieldLevel      = fieldLevel;
    }

    public this(variableEmitter : IVariableEmitter, field : SubruleCompileInfo.List)
    {
      this(variableEmitter, field.Level, field.UseCounter)
    }

    public this(variableEmitter : IVariableEmitter, field : SubruleCompileInfo.ListWithSeparator)
    {
      this(variableEmitter, field.Level, field.UseCounter)
    }

    public Init() : PExpr
    {
      if (_useCounter) <[ $(Counter)  = 0 ]> else <[ {} ]>
    }

    public Inc() : PExpr
    {
      if (_useCounter) <[ ++ $(Counter)   ]> else <[ {} ]>
    }

    public Dec() : PExpr
    {
      if (_useCounter) <[ -- $(Counter)   ]> else <[ {} ]>
    }

    public Counter         : PExpr { get { <[ $(_variableEmitter.CreateVariable($"counter$_fieldLevel")      : global) ]> } }
    public ListEndPos      : PExpr { get { <[ $(_variableEmitter.CreateVariable($"listEndPos$_fieldLevel")   : global) ]> } }
    public ListStartPos    : PExpr { get { <[ $(_variableEmitter.CreateVariable($"listStartPos$_fieldLevel") : global) ]> } }
    public BodyEndPos      : PExpr { get { <[ $(_variableEmitter.CreateVariable($"bodyEndPos$_fieldLevel")   : global) ]> } }
    public SeparatorEndPos : PExpr { get { <[ $(_variableEmitter.CreateVariable($"separatorEndPos$_fieldLevel") : global) ]> } }

    public TryGetCounter() : IEnumerable[PExpr] { when (_useCounter) yield Counter }
  }
}
