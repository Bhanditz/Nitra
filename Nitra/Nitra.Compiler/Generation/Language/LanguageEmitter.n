using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal class LanguageEmitter
  {
    public Environment   : EmitterEnvironment { get; }
    public Env           : GlobalEnv          { get; }
    public Symbol        : LanguageSymbol     { get; }

    public this(environment : EmitterEnvironment, language : LanguageSymbol)
    {
      Environment = environment;
      Env         = environment.NamespaceOfSymbol(language);
      Symbol      = language;
    }

    private mutable _tb : TypeBuilder;

    public DefineTypes() : void
    {
      assert(_tb : object == null);

      def baseLanguage =
        if (Symbol.Parent is SymbolRef.Some(parent))
          Environment.GetLanguageType(parent)
        else
          Environment.Manager.InternalType.Object;

      _tb = Env.Define(<[ decl:
        public partial class $(Symbol.Name : usesite) : $(baseLanguage : typed)
        {
          protected this() {}

          private static _instance : this = $(Symbol.Name : usesite)();
          public static Instance : this { get { _instance } }
        }
      ]>);
    }
    
    public DefineMembers() : void
    {
      assert(_tb : object != null);

      foreach (spanClass in Symbol.SpanClasses)
      {
        def backingFieldName = Util.tmpname(spanClass.Name);
        _tb.Define(<[ decl:
          private static $(backingFieldName : usesite) : Nitra.SpanClass = Nitra.SpanClass(_instance, $(spanClass.Name : string), $(spanClass.FullName : string), null);
        ]>);
        _tb.Define(<[ decl:
          public static $(spanClass.Name : usesite) : Nitra.SpanClass { get { $(backingFieldName : usesite) } }
        ]>);
      }

      def parentExpr =
        if (Symbol.Parent is SymbolRef.Some(parent))
          <[ $(Environment.GetLanguageType(parent) : typed).Instance ]>
        else
          <[ null ]>;

      _tb.Define(<[ decl: ..$(MakeMods()) Parent : Nitra.Language { get { $parentExpr } } ]>);
    }
    
    private MakeMods() : AttributesAndModifiers
    {
      if (Symbol.Parent.HasValue)
        AttributesAndModifiers(NemerleAttributes.Public %| NemerleAttributes.Override, [])
      else
        AttributesAndModifiers(NemerleAttributes.Public %| NemerleAttributes.Virtual, [])
    }
    
    public Emit() : void
    {
      assert(_tb : object != null);

      _tb.Compile();
    }
  }
}
