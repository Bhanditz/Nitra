using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Serialization
{
  public class DefaultTypeSerializationFactory : TypeSerializationFactory
  {
    public override CreateBuilder(compiler : SerializationCompiler, type : FixedType) : TypeSerializationBuilder
    {
      match (type)
      {
        | Tuple(itemTypes)   => TupleTypeSerializationBuilder(compiler, type, itemTypes)
        | Array(itemType, 1) => ArrayTypeSerializationBuilder(compiler, type, itemType)
        | Class(ti, [itemType]) when ti.Equals(compiler.Manager.InternalType.Nemerle_list_tc) => NemerleListTypeSerializationBuilder(compiler, type, itemType)
        | Class(ti, [itemType]) when ti.Equals(compiler.IListType)
        | Class(ti, [itemType]) when ti.Equals(compiler.ICollectionType) => CollectionTypeSerializationBuilder(compiler, type, itemType)
        | Class(ti, [itemType]) when ti.Equals(compiler.IEnumerableType) => SeqTypeSerializationBuilder(compiler, type, itemType)
        | Class(ti, _) =>
          def parseDeclaration(currentTypeInfo : TypeInfo) : TypeSerializationBuilder
          {
            match (currentTypeInfo?.GetTydecl())
            {
              | Alias(type)      => parseDeclaration(type.TypeInfo)
              | Enum             => EnumTypeSerializationBuilder(compiler, type, currentTypeInfo.UnderlyingType)
              | Variant(options) => VariantTypeSerializationBuilder(compiler, type, options)
              | VariantOption    => VariantOptionTypeSerializationBuilder(compiler, type)
              | _                => RecordTypeSerializationBuilder(compiler, type)
            }
          }
          if (ti.IsPrimitive || ti.Equals(compiler.Manager.InternalType.String_tc))
            PrimitiveTypeSerializationBuilder(compiler, type, ti)
          else
            parseDeclaration(ti)

        | _ => Message.FatalError(type.Location, $"Type '$type' is not suppported in serialization compiler.")
      }
    }
  }
}
