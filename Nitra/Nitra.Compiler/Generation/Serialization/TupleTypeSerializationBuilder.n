using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization
{
  [Record]
  public sealed class TupleTypeSerializationBuilder : ComplexTypeSerializationBuilder
  {
    public override Tag : TypeTag { get { TypeTag.Tuple } }

    private _itemTypes : list[TypeVar];

    [RecordIgnore] private mutable _itemSerializationBuilders : list[TypeSerializationBuilder];

    protected override CollectTypeData() : void
    {
      assert(_itemSerializationBuilders : object == null);

      _itemSerializationBuilders = _itemTypes.Map(itemType => Compiler.EnqueueType(itemType.Fix()));
    }

    protected override GenerateWriteBody(body : SCG.List[PExpr]) : void
    {
      assert(_itemSerializationBuilders : object != null);

      foreach (itemSerializationBuilder in _itemSerializationBuilders with index)
      {
        body.Add(Formatter.WriteTag(itemSerializationBuilder.Tag));
        body.Add(itemSerializationBuilder.Write(<[ obj[$(index : int)] ]>));
      }
    }

    protected override GenerateReadBody(body : SCG.List[PExpr]) : void
    {
      assert(_itemSerializationBuilders : object != null);

      def ctorArgs = SCG.List();
      body.Add(<[ mutable itemTypeTag; ]>);
      foreach (itemSerializationBuilder in _itemSerializationBuilders with index)
      {
        def varName = "___item" + index;
        body.Add(<[ itemTypeTag =  $(Formatter.ReadTag()) ]>);
        body.Add(<[ def $(varName : usesite) = $(itemSerializationBuilder.Read(<[ "Item" ]>, <[ itemTypeTag ]>))]>);
        ctorArgs.Add(<[ $(varName : usesite) ]>);
      }
      body.Add(<[ (..$ctorArgs) ]>);
    }
  }
}
