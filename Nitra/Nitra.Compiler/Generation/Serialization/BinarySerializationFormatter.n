using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Serialization
{
  public class BinarySerializationFormatter : SerializationFormatter
  {
    public this()
    {
      WriteParameters = [SerializationParameter("writer", <[ System.IO.BinaryWriter ]>)];
      ReadParameters  = [SerializationParameter("reader", <[ System.IO.BinaryReader ]>)];
    }

    public override WriteParameters : list[SerializationParameter] { get; }
    public override ReadParameters  : list[SerializationParameter] { get; }

    public override EmitFatalError(message : PExpr) : PExpr
    {
      <[ throw System.Exception($message) ]>
    }

    public override WriteTag(tag : TypeTag) : PExpr
    {
      <[ $("writer" : global).Write($(tag :> byte : byte)) ]>
    }

    public override ReadTag() : PExpr
    {
      <[ $("reader" : global).ReadByte() :> Nitra.Serialization.TypeTag ]>
    }

    public override WritePrimitive(tag : TypeTag, obj : PExpr) : PExpr
    {
      if (tag == TypeTag.Char)
        WritePrimitive(TypeTag.UInt16, <[ $obj :> ushort ]>)
      else
        <[ $("writer" : global).Write($obj : System.$(tag.ToString() : usesite)); ]>
    }

    public override ReadPrimitive(tag : TypeTag) : PExpr
    {
      if (tag == TypeTag.Char)
        <[ $(ReadPrimitive(TypeTag.UInt16)) :> char ]>
      else
        <[ $("reader" : global).$("Read" + tag.ToString() : usesite)() ]>
    }
  }
}
