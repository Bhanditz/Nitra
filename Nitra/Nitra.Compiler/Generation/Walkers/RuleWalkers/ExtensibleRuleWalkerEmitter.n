using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class ExtensibleRuleWalkerEmitter : RuleWalkerEmitter[ExtensibleRuleSymbol]
    {
      [RecordIgnore] private mutable _prefixWalkerTB  : TypeBuilder;
      [RecordIgnore] private mutable _postfixWalkerTB : TypeBuilder;
      [RecordIgnore] public          WalkerDataTb     : TypeBuilder { get; private set; }
      [RecordIgnore] public override WalkerTb         : TypeBuilder { get; private set; }

      public override RuleParserBaseType : PExpr
      {
        get { assert(false) }
      }

      public override Define(walkersModule : TypeBuilder) : void
      {
        Generator.Init(this);

        def signature = Generator.GetSignature(Rule);
        def returnTypeIsVoid = signature.ReturnType is <[ void ]>; // TODO: сделать более точную проверку на void

        _prefixWalkerTB = walkersModule.DefineNestedType({
          def prefixParameters =
            <[ parameter: pos : ref int ]>
            :: <[ parameter: astPtr : int ]>
            :: <[ parameter: parseResult : Nitra.ParseResult ]>
            :: signature.Parameters;

          <[ decl:
            public abstract class $(Rule.DecorateWalkerName("PrefixWalker") : usesite) : Nitra.Runtime.WalkerBase
            {
              public abstract Walk(..$prefixParameters) : $(signature.ReturnType);
            }
          ]>
        });

        _postfixWalkerTB = walkersModule.DefineNestedType({
          def postfixParameters =
          {
            def mandatoryParameters =
              <[ parameter: __startPos : int ]>
              :: <[ parameter: pos : ref int ]>
              :: <[ parameter: astPtr : int ]>
              :: <[ parameter: parseResult : Nitra.ParseResult ]>
              :: signature.Parameters;

            if (returnTypeIsVoid) mandatoryParameters
            else <[ parameter: prefix : $(signature.ReturnType) ]> :: mandatoryParameters;
          }

          <[ decl:
            public abstract class $(Rule.DecorateWalkerName("PostfixWalker") : usesite) : Nitra.Runtime.WalkerBase
            {
              public abstract Walk(..$postfixParameters) : $(signature.ReturnType);
            }
          ]>
        });

        WalkerDataTb = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.DecorateWalkerName("WalkerData") : usesite) : Nitra.Runtime.ExtensibleRuleWalkerData
          {
            public PrefixWalkers      : array[$(_prefixWalkerTB.GetMemType() : typed)];
            public PostfixWalkers     : array[$(_postfixWalkerTB.GetMemType() : typed)];

            public this(parserData : Nitra.Internal.ExtensibleRuleParserData, compositeAstWalker : Nitra.Runtime.CompositeAstWalker)
            {
              base(compositeAstWalker);

              PrefixWalkers = array(parserData.PrefixParsers.Length);
              foreach (ruleParser in parserData.PrefixParsers with i)
                PrefixWalkers[i] = compositeAstWalker.NewWalker(ruleParser) :> $(_prefixWalkerTB.GetMemType() : typed);

              PostfixWalkers = array(parserData.PostfixParsers.Length);
              foreach (ruleParser in parserData.PostfixParsers with i)
                PostfixWalkers[i] = compositeAstWalker.NewWalker(ruleParser) :> $(_postfixWalkerTB.GetMemType() : typed);

              Walkers = array(parserData.Parsers.Count);
              foreach (ruleParser when ruleParser != null in parserData.Parsers with bp)
                Walkers[bp] = $(Rule.DecorateWalkerName("Walker") : usesite)(this, ruleParser)
            }

            public override Init() : void
            {
              foreach (walker in PrefixWalkers)
                walker.Init(CompositeAstWalker);
              foreach (walker in PostfixWalkers)
                walker.Init(CompositeAstWalker);
            }
          }
        ]>);

        WalkerTb = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.DecorateWalkerName("Walker") : usesite) : Nitra.Runtime.ExtensibleRuleWalkerBase
          {
            public PrefixWalkers : array[$(_prefixWalkerTB.GetMemType() : typed)];
            public PostfixWalkers : array[$(_postfixWalkerTB.GetMemType() : typed)];

            public this(walkerData : $(WalkerDataTb.GetMemType() : typed), ruleParser : Nitra.Internal.ExtensibleRuleParser)
            {
              base(ruleParser);

              PrefixWalkers         = walkerData.PrefixWalkers;
              PostfixWalkers        = walkerData.PostfixWalkers;
            }
          }
        ]>);

        unless (Environment.IsIdeMode)
        {
          def onPrefixAmbiguityParameters =
          {
            def ambiguityListType =
              if(returnTypeIsVoid) <[ System.Collections.Generic.List[$(_prefixWalkerTB.GetMemType() : typed)] ]>
              else <[ System.Collections.Generic.List[$(signature.ReturnType) * $(_prefixWalkerTB.GetMemType() : typed)] ]>;

            <[ parameter: __startPos : int ]>
            :: <[ parameter: endPos : int ]>
            :: <[ parameter: parseResult : Nitra.ParseResult ]>
            :: <[ parameter: ambiguities : $ambiguityListType ]>
            :: signature.Parameters;
          };

          WalkerTb.DefineConditional(<[ decl:
            private OnPrefixAmbiguity(..$onPrefixAmbiguityParameters) : $(signature.ReturnType)
            {
              $(Generator.PrefixAmbiguity(Rule).FlattenPExpr());
            }
          ]>);
        }

        unless (Environment.IsIdeMode)
        {
          def onPostfixAmbiguityParameters =
          {
            def ambiguityListType =
              if(returnTypeIsVoid) <[ System.Collections.Generic.List[$(_postfixWalkerTB.GetMemType() : typed)] ]>
              else <[ System.Collections.Generic.List[$(signature.ReturnType) * $(_postfixWalkerTB.GetMemType() : typed)] ]>;

            <[ parameter: __startPos : int ]>
            :: <[ parameter: endPos : int ]>
            :: <[ parameter: parseResult : Nitra.ParseResult ]>
            :: <[ parameter: ambiguities : $ambiguityListType ]>
            :: signature.Parameters;
          };

          WalkerTb.DefineConditional(<[ decl:
            private OnPostfixAmbiguity(..$onPostfixAmbiguityParameters) : $(signature.ReturnType)
            {
              $(Generator.PostfixAmbiguity(Rule).FlattenPExpr());
            }
          ]>);
        }

        unless (Environment.IsIdeMode)
        {
          def onPrefixMissedParameters =
            <[ parameter: pos : int ]>
            :: <[ parameter: parseResult : Nitra.ParseResult ]>
            :: signature.Parameters;

          WalkerTb.DefineConditional(<[ decl:
            public OnPrefixMissed(..$onPrefixMissedParameters) : $(signature.ReturnType)
            {
              $(Generator.PrefixMissed(Rule).FlattenPExpr());
            }
          ]>);
        }

        def walkParameters =
          <[ parameter: pos : ref int ]>
          :: <[ parameter: parseResult : Nitra.ParseResult ]>
          :: signature.Parameters;

        def onPrefixAmbiguityArguments =
          <[ pos ]>
          :: <[ firstNewPos ]>
          :: <[ parseResult ]>
          :: <[ ambiguilitys ]>
          :: signature.Parameters.Map(PassParameter);

        def onPostfixAmbiguityArguments =
          <[ pos ]>
          :: <[ firstNewPos ]>
          :: <[ parseResult ]>
          :: <[ ambiguilitys ]>
          :: signature.Parameters.Map(PassParameter);

        def onPrefixMissedArguments =
          <[ pos ]>
          :: <[ parseResult ]>
          :: signature.Parameters.Map(PassParameter);

        def prefixWalkCallArguments =
          <[ ref newPos ]>
          :: <[ ast ]>
          :: <[ parseResult ]>
          :: signature.Parameters.Map(PassParameter);

        def postfixWalkCallArguments =
        {
          def mandatoryArguments =
            <[ prefixStartPos ]>
            :: <[ ref newPos ]>
            :: <[ ast ]>
            :: <[ parseResult ]>
            :: signature.Parameters.Map(PassParameter);

          if (returnTypeIsVoid) mandatoryArguments
          else <[ prefixValue ]> :: mandatoryArguments
        };

        def addAmbiguilityArguments(valueExpr, walkerExpr)
        {
          if (returnTypeIsVoid)
            walkerExpr
          else
            <[ ($valueExpr, $walkerExpr) ]>
        }

        def walkCode =
          if (Environment.IsIdeMode)
            <[ assert(false) ]>
          else
          <[
            mutable newPos;
            mutable ast = this.RuleParser.FindFirstPrefix(ref pos, parseResult);
            mutable prefixValue;
            def prefixStartPos = pos;
            if (ast > 0)
            {
              mutable prefixWalker = PrefixWalkers[(parseResult.ast[ast + Nitra.Internal.ExtensibleRuleParser.AstOfs.Id] & Nitra.Internal.ExtensibleRuleParser.AstMask.Id) - PrefixWalkersOffset];
              newPos = pos;
              prefixValue = prefixWalker.Walk(..$prefixWalkCallArguments);
              ast = this.RuleParser.FindNextPrefix(ast, parseResult);
              when (ast > 0)
              {
                def firstNewPos = newPos;
                def ambiguilitys = System.Collections.Generic.List();
                ambiguilitys.Add($(addAmbiguilityArguments(<[ prefixValue ]>, <[ prefixWalker ]>)));
                while (ast > 0)
                {
                  def nextPrefixWalker = PrefixWalkers[(parseResult.ast[ast + Nitra.Internal.ExtensibleRuleParser.AstOfs.Id] & Nitra.Internal.ExtensibleRuleParser.AstMask.Id) - PrefixWalkersOffset];
                  newPos = pos;
                  def _nextValue = nextPrefixWalker.Walk(..$prefixWalkCallArguments);
                  assert(newPos == firstNewPos);
                  ambiguilitys.Add($(addAmbiguilityArguments(<[ _nextValue ]>, <[ nextPrefixWalker ]>)));
                  prefixWalker = nextPrefixWalker;
                  ast = this.RuleParser.FindNextPrefix(ast, parseResult);
                }
                prefixValue = OnPrefixAmbiguity(..$onPrefixAmbiguityArguments);
              }
              pos = newPos;
            }
            else
            {
              prefixValue = OnPrefixMissed(..$onPrefixMissedArguments);
            }

            mutable postfixWalker;
            mutable postfixValue;
            while (pos < parseResult.Text.Length && { ast = this.RuleParser.FindFirstPostfix(ref pos, parseResult); ast > 0 })
            {
              postfixWalker = PostfixWalkers[(parseResult.ast[ast + Nitra.Internal.ExtensibleRuleParser.AstOfs.Id] & Nitra.Internal.ExtensibleRuleParser.AstMask.Id) - PostfixWalkersOffset];
              newPos = pos;
              postfixValue = postfixWalker.Walk(..$postfixWalkCallArguments);
              when (newPos == pos)
                break;
              ast = this.RuleParser.FindNextPostfix(ast, parseResult);
              when (ast > 0)
              {
                def firstNewPos = newPos;
                def ambiguilitys = System.Collections.Generic.List();
                ambiguilitys.Add($(addAmbiguilityArguments(<[ postfixValue ]>, <[ postfixWalker ]>)));
                while (ast > 0)
                {
                  def nextWalker = PostfixWalkers[(parseResult.ast[ast + Nitra.Internal.ExtensibleRuleParser.AstOfs.Id] & Nitra.Internal.ExtensibleRuleParser.AstMask.Id) - PostfixWalkersOffset];
                  newPos = pos;
                  def _nextValue = nextWalker.Walk(..$postfixWalkCallArguments);
                  assert(newPos == firstNewPos);
                  ambiguilitys.Add($(addAmbiguilityArguments(<[ _nextValue ]>, <[ nextWalker ]>)));
                  postfixWalker = nextWalker;
                  ast = this.RuleParser.FindNextPostfix(ast, parseResult);
                }
                postfixValue = OnPostfixAmbiguity(..$onPostfixAmbiguityArguments);
              }
              prefixValue = postfixValue;
              pos = newPos;
            }
            prefixValue;
          ]>;

        WalkerTb.DefineConditional(<[ decl:
          public Walk(..$walkParameters) : $(signature.ReturnType)
          {
            unchecked { $walkCode; }
          }
        ]>);

        WalkerDataTb.Define(<[ decl:
          public Walkers : array[$(WalkerTb.GetMemType() : typed)];
        ]>);

        WalkerDataTb.Define(<[decl:
          public override GetWalkers() : array[Nitra.Runtime.ExtensibleRuleWalkerBase]
          {
            this.Walkers :> array[Nitra.Runtime.ExtensibleRuleWalkerBase]
          }
        ]>);

        when (Rule.Options.IsStart)
          DefineEntranceMethod(walkersModule, signature);
      }

      public override Emit() : void
      {
        _prefixWalkerTB.Compile();
        _postfixWalkerTB.Compile();
        WalkerDataTb.Compile();
        WalkerTb.Compile();
      }
    }
  }
}
