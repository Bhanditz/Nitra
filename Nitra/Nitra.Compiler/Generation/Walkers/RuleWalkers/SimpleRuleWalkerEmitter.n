using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class SimpleRuleWalkerEmitter : RuleWalkerEmitter[SimpleRuleSymbol]
    {
      [RecordIgnore] public override WalkerTb : TypeBuilder { get; private set; }

      public override RuleParserBaseType : PExpr
      {
        get { <[ Nitra.Internal.SimpleRuleParser ]> }
      }

      public override Define(walkersModule : TypeBuilder) : void
      {
        Generator.Init(this);

        WalkerTb = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.DecorateWalkerName("Walker") : usesite) : Nitra.Runtime.WalkerBase
          {
            private RuleParser : $(Rule.GetParserClassRef());

            public this(ruleParser : $(RuleParserBaseType))
            {
              RuleParser = ruleParser :> $(Rule.GetParserClassRef());
            }
          }
        ]>);

        def signature = Generator.GetSignature(Rule);

        unless (Environment.IsIdeMode)
        {
          def onSimpleMissedParameters =
            <[ parameter: pos : int ]>
            :: <[ parameter: parseResult : Nitra.Internal.ParseResult ]>
            :: signature.Parameters;

          WalkerTb.DefineConditional(<[ decl:
            public OnSimpleMissed(..$onSimpleMissedParameters) : $(signature.ReturnType)
            {
              $(Generator.SimpleMissed(Rule).FlattenPExpr());
            }
          ]>);
        }

        def code =
          if (Environment.IsIdeMode)
            <[ assert(false) ]>
          else
            Generator.WalkerCodeForSimpleRule(Rule);

        def parameters =
          <[ parameter: pos : ref int ]>
          :: <[ parameter: parseResult : Nitra.Internal.ParseResult ]>
          :: signature.Parameters;

        WalkerTb.DefineConditional(<[ decl:
          public Walk(..$parameters) : $(signature.ReturnType)
          {
            unchecked
            {
              def __startPos = pos;
              $code;
            }
          }
        ]>);

        DefineInitMethod();
        when (Rule.Options.IsStart)
          DefineEntranceMethod(walkersModule, signature);
      }

      public override Emit() : void
      {
        WalkerTb.Compile();
      }
    }
  }
}
