using Nitra.Runtime;
using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  public sealed class HighlighterWalkerGenerator : WalkerGenerator
  {
    public Environment : EmitterEnvironment { get; }

    public override Name : string { get StandardWalkerTypes.Highlighter }

    public override SupportsVoidRules : bool { get true }

    public override GetSignature(_rule : RuleSymbol) : WalkerSignature
    {
      WalkerSignature(
        [
          <[ parameter: _spans    : System.Collections.Generic.List[Nitra.SpanInfo] ]>,
          <[ parameter: _startPos : int ]>,
          <[ parameter: _endPos   : int ]>
        ],
        <[ void ]>);
    }

    protected override GetRuleValue(field : RuleStructureField, parentAstPointer : AstPointerScope) : PExpr
    {
      def fieldLocCode = GetRangeOf(field, parentAstPointer);

      match (field)
      {
        | Empty      as field => Skip(field, parentAstPointer)
        | SimpleCall as field =>
          <[
            if ($fieldLocCode.IntersectsWith(_startPos, _endPos))
              $(CallSimpleRule(field, parentAstPointer, <[ _spans ]>, <[ _startPos ]>, <[ _endPos ]>))
            else
              $(Skip(field, parentAstPointer))
          ]>

        | ExtensibleCall as field =>
          <[
            if ($fieldLocCode.IntersectsWith(_startPos, _endPos))
              $(CallExtensibleRule(field, parentAstPointer, <[ _spans ]>, <[ _startPos ]>, <[ _endPos ]>))
            else
              $(Skip(field, parentAstPointer))
          ]>

        | RegularCall(symbol) =>
          if (symbol.Options.SpanClassSymbol != null)
            <[
              def loc = $fieldLocCode;
              when (loc.IntersectsWith(_startPos, _endPos))
                _spans.Add(Nitra.SpanInfo(loc, $(MakeSpanClassFieldName(symbol.Options.SpanClassSymbol))));
              $(Skip(field, parentAstPointer))
            ]>
          else
            Skip(field, parentAstPointer)

        | TokenString =>
          def rule = field.SrcRule :> Rule.String;
          if (rule.SpanClassOpt is Some(spanClass))
            <[
              when ($fieldLocCode.IntersectsWith(_startPos, _endPos))
                _spans.Add(Nitra.SpanInfo($fieldLocCode, $(MakeSpanClassFieldName(spanClass))));
              $(Skip(field, parentAstPointer))
            ]>
          else
            Skip(field, parentAstPointer)

        | Option as field =>
          GetOptionValue(
            field            = field,
            parentAstPointer = parentAstPointer,
            hasValue         = <[ _ = $(GetRuleValue(field.Rule, "valuePointer")); ]>,
            noValue          = <[ () ]>)

        | List as lst when lst.IsSkipAnyPattern => Skip(field, parentAstPointer)
        | List as lst=>
          GetListValue(field            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ () ]>,
            item             = GetRuleValue(lst.Rule, "itemPointer"),
            returnCode       = <[ () ]>,
            emptyCode        = <[ () ]>);

        | ListWithSeparator as lst=>
          GetListWithSeparatorValue(
            field            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ () ]>,
            item             = GetRuleValue(lst.Rule, "itemPointer"),
            separator        = GetRuleValue(lst.Separator, "separatorPointer"),
            returnCode       = <[ () ]>,
            emptyCode        = <[ () ]>);

        | Marker => <[ () ]>
      }
    }

    MakeSpanClassFieldName(spanClassSymbol : SpanClassSymbol) : PExpr
    {
      assert2(spanClassSymbol != null);
      def expr = PExprUtils.FromQualifiedIdentifier(spanClassSymbol.DeclaringModule.Node.FullNameParts);
      <[ $expr.$("SpanClass_" + spanClassSymbol.Name : usesite) ]>
    }

    protected override CombineValues(_ruleStructure : SequenceCompileInfo, arguments : list[PExpr]) : PExpr
    {
      <[ ignore(..$arguments) ]>
    }

    protected override GetSyntaxRuleValue(ruleSymbol : SyntaxRuleSymbol, astPointer : AstPointerScope) : PExpr
    {
      def ruleStruct = ruleSymbol.Structure;
      def statementsList = List();

      foreach (field in ruleStruct.Fields)
        statementsList.Add(GetRuleValue(field, astPointer));

      def statements = statementsList.NToList();

      if (ruleSymbol.Options.SpanClassSymbol != null)
        <[
          { ..$statements }
          def loc = Nitra.NSpan(__startPos, pos);
          when (loc.IntersectsWith(_startPos, _endPos))
            _spans.Add(Nitra.SpanInfo(loc, $(MakeSpanClassFieldName(ruleSymbol.Options.SpanClassSymbol))))
        ]>
      else
        <[ { ..$statements } ]>
    }

    public override PrefixAmbiguity(_ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      <[ ignore(parseResult, endPos, ambiguities); ]>
    }

    public override PostfixAmbiguity(_ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      <[ ignore(parseResult, endPos, ambiguities); ]>
    }

    public override PrefixMissed(_ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      <[ ignore(parseResult, pos); ]>
    }

    public override SimpleMissed(_ruleSymbol : SimpleRuleSymbol) : PExpr
    {
      <[ ignore(parseResult, pos); ]>
    }
  }
}
