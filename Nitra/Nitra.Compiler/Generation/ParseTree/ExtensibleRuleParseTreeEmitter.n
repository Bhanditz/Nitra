using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ExtensibleRuleParseTreeEmitter : RuleParseTreeEmitter
  {
    mutable _baseTb      : TypeBuilder;
    mutable _missingTb   : TypeBuilder;
    mutable _ambiguousTb : TypeBuilder;

    public this(environment : EmitterEnvironment, ruleSymbol : ExtensibleRuleSymbol)
    {
      base(environment, ruleSymbol)
    }

    public override IsTypesDefined : bool { get { _baseTb != null } }

    public override CreateConstant(_ : string, _ : int) : string
    {
      throw NotSupportedException();
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert(IsTypesDefined);
      _baseTb.DefineNestedType(td);
    }

    public override Emit() : void
    {
      assert(IsTypesDefined);
      _baseTb.Compile();
      _missingTb.Compile();
      _ambiguousTb.Compile();
    }

    public override DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(!IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        def baseTypes =
          if (this.RuleSymbol.Ast is SymbolRef.Some(astSymbol))
            [ <[ $(Environment.ParseTreeTypeVar : typed) ]>, <[ Nitra.IMappedParseTree[$(GetBaseAstType(astSymbol))] ]> ]
          else
            [ <[ $(Environment.ParseTreeTypeVar : typed) ]> ];

        _baseTb = defineType(<[decl:
          public new abstract partial class $(this.RuleSymbol.Name : usesite) : ..$baseTypes
          {
            public override RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
          }
        ]>);

        _missingTb = _baseTb.DefineNestedType(<[decl:
          public new sealed partial class MissingNode : $(_baseTb.GetMemType() : typed)
          {
            public this(sourceProvider : Nitra.Runtime.ISourceSnapshotProvider, pos : int)
            {
              this.sourceProvider = sourceProvider;
              this.pos            = pos;
            }

            private sourceProvider : Nitra.Runtime.ISourceSnapshotProvider;
            private pos            : int;

            public override IsMissing : bool           { get { true } }
            public override Location  : Nitra.Location { get { Nitra.Location(this.sourceProvider, this.pos) } }
          }
        ]>);

        _ambiguousTb = _baseTb.DefineNestedType(<[decl:
          public new sealed partial class AmbiguousNode : $(_baseTb.GetMemType() : typed), Nitra.IAmbiguousParseTree
          {
            public this(ambiguities : array[$(_baseTb.GetMemType() : typed)], ambiguityType : Nitra.ParseTreeAmbiguityType)
            {
              this.Ambiguities = ambiguities;
              this.AmbiguityType = ambiguityType;
            }

            public override IsAmbiguous    : bool                                        { get true }
            public override Location       : Nitra.Location                              { get { Ambiguities[0].Location } }
            public          Ambiguities    : array[$(_baseTb.GetMemType() : typed)]      { get; }
            public          AmbiguityType  : Nitra.ParseTreeAmbiguityType                { get; }
          }
        ]>);
      });
    }

    public override DefineMembers() : void
    {
      assert(IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        DefineCreateMethod();
        DefineExtensibleRuleGetAstMethod(_baseTb);
        DefineExtensibleRuleMethods(_baseTb);

        DefineMissingGetAstMethod(_missingTb);
        DefineMissingPrettyPrint(_missingTb);
        DefineMissingRuleMethods(_missingTb);

        DefineAmbiguousGetAstMethod(_ambiguousTb);
        DefineAmbiguousPrettyPrint(_ambiguousTb);
        DefineAmbiguousRuleMethods(_ambiguousTb);
      })
    }

    private DefineCreateMethod() : void
    {
      when (this.RuleSymbol.Options.IsStart)
      {
        _baseTb.DefineConditional(<[ decl:
          [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
          public static CreateParseTree(parseResult : Nitra.IParseResult) : $(_baseTb.GetMemType() : typed)
          {
            def parseResult = parseResult :> ParseResult;
            Nitra.Internal.ExtensibleRuleParseTreeConstructor.Create(
              parseResult.StartPos,
              parseResult.ParseEnd,
              parseResult,
              0,
              $(this.RuleSymbol.GetRuleDescriptorRef()),
              parseResult.RuleParser.Grammar,
              Nitra.Internal.DefaultExtensibleRuleParseTreeFactory.Instance);
          }
        ]>);
      }
    }
  }
}
