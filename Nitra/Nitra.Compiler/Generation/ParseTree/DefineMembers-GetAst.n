using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.ProjectSystem;
using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;
using Nitra.Compiler.PatternMatching;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class RuleParseTreeEmitter
  {
    protected DefineExtensibleRuleGetAstMethod(_baseTb : TypeBuilder) : void
    {
      assert(_baseTb != null);

      def syntaxMappingBody = this.RuleSymbol.GetSyntaxMappingBody();
      when (syntaxMappingBody != null)
      {
        def astType = GetGetAstMethodReturnType();
        _baseTb.DefineConditional(<[ decl:
          public abstract GetAst() : $astType
        ]>);
      }
    }

    private static MakeParseTreeMemberAccess(path : ParseTreePath) : PExpr
    {
      Util.locate(path.Location.NLocation(),
        match(path)
        {
          | This                       => <[ this ]>
          | Variable(name, _)          => <[ $(name.Id : usesite) ]>
          | Member(qualifier, name, _) => <[ $(MakeParseTreeMemberAccess(qualifier)).$(name.Id : usesite) ]>
        })
    }

    [Record]
    private struct BuildAstResult
    {
      public Code    : PExpr;
      public AstType : FixedType;

      public this(code : PExpr) { this(code, null) }

      public List            : PExpr { get { if (AstType != null) <[ $(AstType : typed).IAstList ]>           else <[ Nitra.Declarations.IAstList[Nitra.Declarations.IAst] ]> } }
      public ConcreteList    : PExpr { get { if (AstType != null) <[ $(AstType : typed).AstList ]>            else <[ Nitra.Declarations.AstList[Nitra.Declarations.IAst] ]> } }
      public AmbiguousList   : PExpr { get { if (AstType != null) <[ $(AstType : typed).AmbiguousAstList ]>   else <[ Nitra.Declarations.AmbiguousAstList[Nitra.Declarations.IAst] ]> } }

      public Option          : PExpr { get { if (AstType != null) <[ $(AstType : typed).IAstOption ]>         else <[ Nitra.Declarations.IAstOption[Nitra.Declarations.IAst] ]> } }
      public ConcreteOption  : PExpr { get { if (AstType != null) <[ $(AstType : typed).AstOption ]>          else <[ Nitra.Declarations.AstOption[Nitra.Declarations.IAst] ]> } }
      public AmbiguousOption : PExpr { get { if (AstType != null) <[ $(AstType : typed).AmbiguousAstOption ]> else <[ Nitra.Declarations.AmbiguousAstOption[Nitra.Declarations.IAst] ]> } }
    }

    private DefineGetAstMethod(tb : TypeBuilder, syntaxMappingBody : SyntaxMappingBody, modifiers : NemerleModifiers) : void
    {
      def astSymbol = syntaxMappingBody.Ast.GetValue(Environment.Project);

      def buildAst(mappingType : SyntaxMappingType, obj : PExpr) : BuildAstResult
      {
        match (mappingType)
        {
          | List(item, ruleType) =>
            def parseTreeType     = Environment.GetParseTreeType(ruleType);
            def itemResult        = buildAst(item, <[ node ]>);
            def getAstListName    = Util.tmpname("GetAstList");
            tb.Define(<[ decl:
              private static $(getAstListName : usesite)(lst : $(parseTreeType : typed)) : $(itemResult.List)
              {
                unchecked
                {
                  if (lst.IsAmbiguous)
                  {
                    def ambiguities  = Nitra.Internal.AstUtils.GetAstAmbiguities(lst :> Nitra.IAmbiguousParseTree, $(getAstListName : usesite));
                    $(itemResult.AmbiguousList)(ambiguities)
                  }
                  else
                  {
                    def items = array(lst.Count);
                    foreach (node in lst with index)
                      items[index] = $(itemResult.Code);
                    $(itemResult.ConcreteList)(lst.Span, items)
                  }
                }
              }
            ]>);
            BuildAstResult(<[ $(getAstListName : usesite)($obj) ]>)

          | Option(item, ruleType) =>
            def parseTreeType      = Environment.GetParseTreeType(ruleType);
            def itemResult         = buildAst(item, <[ opt.Value ]>);
            def getAstOptionName   = Util.tmpname("GetAstOption");
            tb.Define(<[ decl:
              private static $(getAstOptionName : usesite)(opt : $(parseTreeType : typed)) : $(itemResult.Option)
              {
                unchecked
                {
                  if (opt.IsAmbiguous)
                  {
                    def ambiguities  = Nitra.Internal.AstUtils.GetAstAmbiguities(opt :> Nitra.IAmbiguousParseTree, $(getAstOptionName : usesite));
                    $(itemResult.AmbiguousOption)(ambiguities)
                  }
                  else if (opt.HasValue)
                    $(itemResult.ConcreteOption)(opt.Span, $(itemResult.Code))
                  else
                    $(itemResult.ConcreteOption)(opt.Span)
                }
              }
            ]>);
            BuildAstResult(<[ $(getAstOptionName : usesite)( $obj) ]>)

          | Ref(astSymbol) => BuildAstResult(<[ $obj.GetAst() ]>, Environment.GetAstType(astSymbol))
          | Tuple(index, item)     => buildAst(item, <[ $obj.$("Item" + index.ToString() : usesite) ]>)
        }
      }

      def compileField(field : SyntaxMappingField) : PExpr
      {
        def astPropertySymbol = field.AstProperty.Symbol;
        Util.locate(field.Location.NLocation(),
          match (field)
          {
            | Inline(code) => <[ $(astPropertySymbol.Name : usesite) = $code ]>
            | Automatic(path, mappingType) =>
              def parseTreeMember = MakeParseTreeMemberAccess(path);
              <[ $(astPropertySymbol.Name : usesite) = unchecked ($(buildAst(mappingType, parseTreeMember).Code)) ]>
          });
      }

      def compileFields(astSymbol : AstSymbol, fields : list[SyntaxMappingField]) : PExpr
      {
        def astType = Environment.GetAstType(astSymbol);
        def values  = <[ Span = this.Span ]> :: fields.Map(compileField);
        <[ $(astType : typed)(..$values) ]>
      }

      def compileAccess(_ : Access) : PExpr
      {
        | Obj                            => <[ this ]>
        | Sel(ListCons,   0,     access) => <[ $(compileAccess(access)).Head ]>
        | Sel(ListCons,   1,     access) => <[ $(compileAccess(access)).Tail ]>
        | Sel(OptionSome, 0,     access) => <[ $(compileAccess(access)).Value ]>
        | Sel(Tuple,      index, access) => <[ $(compileAccess(access)).$("Item" + (index + 1) : usesite) ]>
        | Sel(ParseTree,  index, access) => <[ $(compileAccess(access)).$(RuleSymbol.NonVoidSubRules.Nth(index).FieldName : usesite) ]>
        | _ => assert(false, "Invalid access path")
      }

      def compileTest(n : string, ctor : ParseTreeCtor) : PExpr
      {
        match (ctor)
        {
          | ListCons   => <[ $(n : usesite).Count > 0 ]>
          | ListNil    => <[ $(n : usesite).Count == 0 ]>
          | OptionSome => <[ $(n : usesite).HasValue ]>
          | OptionNone => <[ ! $(n : usesite).HasValue ]>
          | Tuple
          | ParseTree  => assert(false, "Check is redundant")
        }
      }

      mutable redundantCases : SCG.HashSet[_];
      mutable canFail        : bool;
      def compileDecision(_ : Decision[SyntaxMappingCase]) : PExpr
      {
        | Failure =>
          canFail = true;
          <[ assert(false, "Match failed") ]>

        | Success(Inline(code) as case)                     =>
          _ = redundantCases.Remove(case);
          code

        | Success(PerField(astSymbolRef, fields) as case) =>
          _ = redundantCases.Remove(case);
          compileFields(astSymbolRef.GetValue(Environment.Project), fields)

        | Variable(name, access, continuation) =>
          <[
            def $(name.Id : global) = $(compileAccess(access));
            $(compileDecision(continuation))
          ]>.FlattenPExpr()

        | IfEq(access, ctor, t, f) =>
          def n = Util.tmpname("parseTree");
          <[
            def $(n : usesite) = $(compileAccess(access));
            if ($(compileTest(n, ctor)))
              $(compileDecision(t))
            else
              $(compileDecision(f))
          ]>
      }


      Util.locate(syntaxMappingBody.Location.NLocation(),
      {
        def code =
          match (syntaxMappingBody)
          {
            | PerField(fields) => compileFields(astSymbol, fields)
            | Inline(code)     => code
            | Match(cases)     =>
              redundantCases = SCG.HashSet(cases);
              def rules      = cases.Map(c => (c.Pattern, c));
              def decision   = MatchCompiler.Compile(rules);
              def code       = compileDecision(decision);
              when (canFail)
                Environment.Project.Warning(syntaxMappingBody, "Matching is not exhaustive.");
              foreach (case in redundantCases)
                Environment.Project.Warning(case, "Match case is redundant.");
              code
          };

        def astType = GetGetAstMethodReturnType();
        def mods    = AttributesAndModifiers(modifiers, []);
        tb.Define(<[ decl: ..$mods GetAst() : $astType { $code } ]>);
      });
    }

    protected DefineSimpleRuleGetAstMethod(_nodeTb : TypeBuilder) : void
    {
      assert(_nodeTb != null);

      def syntaxMappingBody = this.RuleSymbol.GetSyntaxMappingBody();
      when (syntaxMappingBody != null)
        DefineGetAstMethod(_nodeTb, syntaxMappingBody, NemerleModifiers.Public %| NemerleModifiers.Virtual)
    }

    protected DefineExtensionRuleGetAstMethod(_nodeTb : TypeBuilder) : void
    {
      assert(_nodeTb != null);

      def syntaxMappingBody = this.RuleSymbol.GetSyntaxMappingBody();
      when (syntaxMappingBody != null)
        DefineGetAstMethod(_nodeTb, syntaxMappingBody, NemerleModifiers.Public %| NemerleModifiers.Override)
    }

    protected DefineAmbiguousGetAstMethod(_ambiguousTb : TypeBuilder) : void
    {
      assert(_ambiguousTb != null);

      def syntaxMappingBody = this.RuleSymbol.GetSyntaxMappingBody();
      when (syntaxMappingBody != null)
      {
        def astType = GetGetAstMethodReturnType();
        _ambiguousTb.Define(<[ decl:
          public override GetAst() : $astType
          {
            def ambiguities = Nitra.Internal.AstUtils.GetAstAmbiguities(this.Ambiguities);
            $astType.$(AstEmitter.AmbiguousAstName : usesite)(ambiguities)
          }
        ]>);
      }
    }

    protected DefineMissingGetAstMethod(_missingTb : TypeBuilder) : void
    {
      assert(_missingTb != null);

      def syntaxMappingBody = this.RuleSymbol.GetSyntaxMappingBody();
      when (syntaxMappingBody != null)
      {
        def astType = GetGetAstMethodReturnType();
        _missingTb.Define(<[ decl:
          public override GetAst() : $astType
          {
            $astType.$(AstEmitter.AmbiguousAstName : usesite)($(Environment.NSpanTypeVar : typed)(this.pos))
          }
        ]>);
      }
    }
  }
}
