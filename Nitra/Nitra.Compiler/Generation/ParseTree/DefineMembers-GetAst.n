using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.ProjectSystem;
using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class RuleParseTreeEmitter
  {
    protected GetBaseDeclarationType(declarationSymbol : DeclarationSymbol) : PExpr
    {
      | ExtensionDeclarationSymbol(BaseDeclaration = baseDeclaration) => GetBaseDeclarationType(baseDeclaration.GetValue(Environment.Project))
      | ExtensibleDeclarationSymbol
      | SimpleDeclarationSymbol => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed) ]>
      | _ => assert(false, "Invalid declaration symbol")
    }

    protected GetConcreteDeclarationType(declarationSymbol : DeclarationSymbol) : PExpr
    {
      | ExtensibleDeclarationSymbol
      | ExtensionDeclarationSymbol  => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed) ]>
      | SimpleDeclarationSymbol     => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed).Concrete ]>
      | _ => assert(false, "Invalid declaration symbol")
    }

    protected GetAmbiguousDeclarationType(declarationSymbol : DeclarationSymbol) : PExpr
    {
      | ExtensionDeclarationSymbol(BaseDeclaration = baseDeclaration) => GetAmbiguousDeclarationType(baseDeclaration.GetValue(Environment.Project))
      | ExtensibleDeclarationSymbol
      | SimpleDeclarationSymbol     => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed).Ambiguous ]>
      | _ => assert(false, "Invalid declaration symbol")
    }

    protected DefineExtensibleRuleGetDeclarationMethod(_baseTb : TypeBuilder) : void
    {
      assert(_baseTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def declarationSymbol   = declarationMappingBody.Declaration.GetValue(Environment.Project);
        def parentType          = Environment.TypeCompiler.CompileParentType(declarationSymbol);
        def baseDeclarationType = GetBaseDeclarationType(declarationSymbol);
        _baseTb.DefineConditional(<[ decl:
          public abstract GetAst(parent : $(parentType : typed)) : $baseDeclarationType
        ]>);
      }
    }

    private LookupRuleFieldToDelegateDeclaration(loc : Location) : string
    {
      mutable fieldToDelegateDeclaration;
      foreach (r in this.RuleSymbol.Rule.Rules)
      {
        | Call(SymbolRef.Some(SyntaxRuleSymbol), _) =>
          if (fieldToDelegateDeclaration == null)
            fieldToDelegateDeclaration = r.FieldName
          else
            Environment.Project.Error(loc, $"Rule '$(this.RuleSymbol.Name)' has more that one field to delegate declaration.", -1)

        | _ => ()
      }
      when (fieldToDelegateDeclaration == null)
        Environment.Project.Error(loc, $"Rule '$(this.RuleSymbol.Name)' has no fields to delegate declaration.", -1);

      fieldToDelegateDeclaration
    }

    private MakeParseTreeGetDeclarationMethodBody(declarationMappingBody : DeclarationMappingBody) : PExpr
    {
      def compileField(field : DeclarationMappingField) : PExpr
      {
        | Inline(code) => code
        | Automatic(loc, ruleFieldName) =>
          // TODO: make strict typing!
          Util.locate(loc.ToNemerleLocation(),
            match (field.Field.GetValue(Environment.Project).Type)
            {
              | List(item)
              | OptionList(item) =>
                def symbol = Environment.TypeCompiler.TryGetDeclarationSymbol(item);
                if (symbol != null)
                  <[ Nitra.Internal.AstUtils.GetAstList(declaration, this.$(ruleFieldName : usesite)) ]>
                else
                  <[ this.$(ruleFieldName : usesite).GetAst(declaration) ]>

              | Option(item)      =>
                def symbol = Environment.TypeCompiler.TryGetDeclarationSymbol(item);
                if (symbol != null)
                  <[ Nitra.Internal.AstUtils.GetAstOption(declaration, this.$(ruleFieldName : usesite)) ]>
                else
                  <[ this.$(ruleFieldName : usesite).GetAst(declaration) ]>

              | _ => <[ this.$(ruleFieldName : usesite).GetAst(declaration) ]>
            })
      }

      def concreteDeclarationType = GetConcreteDeclarationType(declarationMappingBody.Declaration.GetValue(Environment.Project));

      Util.locate(declarationMappingBody.Location.ToNemerleLocation(),
        match (declarationMappingBody)
        {
          | Delegate =>
            // TODO: make strict typing!
            def ruleFieldName = LookupRuleFieldToDelegateDeclaration(declarationMappingBody.Location);
            if (string.IsNullOrEmpty(ruleFieldName))
              <[ null ]>
            else
              <[ this.$(ruleFieldName : usesite).GetAst(parent) ]>

          | PerField(fields) =>
            def values = fields.Map(f => <[ $(f.Field.GetValue(Environment.Project).Name : usesite) = $(compileField(f)) ]>);
            <[
              def $("declaration" : global) = $concreteDeclarationType(parent, this.Location.Span);
              declaration.Initialize(..$values);
              declaration
            ]>

          | Inline(code) => code
        });
    }

    protected DefineSimpleRuleGetDeclarationMethod(_nodeTb : TypeBuilder) : void
    {
      assert(_nodeTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def declarationSymbol   = declarationMappingBody.Declaration.GetValue(Environment.Project);
        def parentType          = Environment.TypeCompiler.CompileParentType(declarationSymbol);
        def baseDeclarationType = GetBaseDeclarationType(declarationSymbol);
        def code                = MakeParseTreeGetDeclarationMethodBody(declarationMappingBody);
        _nodeTb.Define(<[ decl:
          public virtual GetAst($("parent" : global) : $(parentType : typed)) : $baseDeclarationType
          {
            $code
          }
        ]>);
      }
    }

    protected DefineExtensionRuleGetDeclarationMethod(_nodeTb : TypeBuilder) : void
    {
      assert(_nodeTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def declarationSymbol   = declarationMappingBody.Declaration.GetValue(Environment.Project);
        def parentType          = Environment.TypeCompiler.CompileParentType(declarationSymbol);
        def baseDeclarationType = GetBaseDeclarationType(declarationSymbol);
        def code                = MakeParseTreeGetDeclarationMethodBody(declarationMappingBody);
        _nodeTb.Define(<[ decl:
          public override GetAst($("parent" : global) : $(parentType : typed)) : $baseDeclarationType
          {
            $code
          }
        ]>);
      }
    }

    protected DefineAmbiguousGetDeclarationMethod(_ambiguousTb : TypeBuilder) : void
    {
      assert(_ambiguousTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def declarationSymbol        = declarationMappingBody.Declaration.GetValue(Environment.Project);
        def parentType               = Environment.TypeCompiler.CompileParentType(declarationSymbol);
        def baseDeclarationType      = GetBaseDeclarationType(declarationSymbol);
        def ambiguousDeclarationType = GetAmbiguousDeclarationType(declarationSymbol);
        _ambiguousTb.Define(<[ decl:
          public override GetAst(parent : $(parentType : typed)) : $baseDeclarationType
          {
            def ambiguities = Nitra.Internal.AstUtils.GetAstAmbiguities(parent, this.Ambiguities);
            $ambiguousDeclarationType(ambiguities)
          }
        ]>);
      }
    }

    protected DefineMissingGetDeclarationMethod(_missingTb : TypeBuilder) : void
    {
      assert(_missingTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def declarationSymbol   = declarationMappingBody.Declaration.GetValue(Environment.Project);
        def parentType          = Environment.TypeCompiler.CompileParentType(declarationSymbol);
        def baseDeclarationType = GetBaseDeclarationType(declarationSymbol);
        _missingTb.Define(<[ decl:
          public override GetAst(parent : $(parentType : typed)) : $baseDeclarationType
          {
            _ = parent;
            null
          }
        ]>);
      }
    }
  }
}
