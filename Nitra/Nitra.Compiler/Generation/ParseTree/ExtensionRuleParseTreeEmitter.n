using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ExtensionRuleParseTreeEmitter : RuleParseTreeEmitter
  {
    mutable _nodeTb     : TypeBuilder;
    mutable _parsedTb   : TypeBuilder;
    mutable _chemicalTb : TypeBuilder;
    mutable _nestedTb   : TypeBuilder = null;

    public this(environment : EmitterEnvironment, ruleSymbol : ExtensionRuleSymbol)
    {
      base(environment, ruleSymbol)
    }

    public override IsTypesDefined : bool { get { _nodeTb != null } }

    [Memoize]
    public override CreateConstant(name : string, value : int) : string
    {
      assert(IsTypesDefined);
      Util.CreateConstant(_parsedTb, name, value)
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      DefineWrappedNestedType(ref _nestedTb, _nodeTb, td)
    }

    public override Emit() : void
    {
      assert(IsTypesDefined);

      _nodeTb.Compile();
      _parsedTb.Compile();
      _chemicalTb.Compile();
      _nestedTb?.Compile();
    }

    public override DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(!IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        _nodeTb = defineType(<[decl:
          public new abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.GetParseTreeType((this.RuleSymbol :> ExtensionRuleSymbol).BaseRule.GetValue(Environment.Project)) : typed)
          {
            public override RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
          }
        ]>);

        _parsedTb = _nodeTb.DefineNestedType(<[decl:
          internal new sealed partial class __Parsed__Node : $(_nodeTb.GetMemType() : typed), Nitra.Internal.ISequenceParseTreeLoader[Nitra.NSpan], Nitra.Internal.ISequenceParseTreeLoader[Nitra.ParseTree]
          {
          }
        ]>);

        _chemicalTb = _nodeTb.DefineNestedType(<[decl:
          private new sealed partial class __Chemical__Node : $(_nodeTb.GetMemType() : typed)
          {
          }
        ]>);
      });
    }

    public override DefineMembers() : void
    {
      assert(IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        def fields = GetFields();
        DefineParseTreeCtorAndFields(fields, _nodeTb, false);
        DefineParsedNodeCtorAndFields(fields, _parsedTb);
        DefineChemicalNodeCtorAndFields(fields, _chemicalTb, _nodeTb);
        DefineParseTreeApplyMethod(fields, _nodeTb, _chemicalTb, _parsedTb);
        DefineExtensionRuleGetAstMethod(_nodeTb);
        DefineParseTreePrettyPrint(_nodeTb);
        DefineExtensionRuleMethods(_nodeTb);
        DefineReadSequenceMethod(_parsedTb);
      })
    }
  }
}
