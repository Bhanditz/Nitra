using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  public sealed class NTypeCompiler
  {
    public this(environment : EmitterEnvironment)
    {
      Environment = environment;
    }

    public Environment : EmitterEnvironment;

    [Memoize]
    public CompileParentType(symbol : DeclarationSymbol) : FixedType
    {
      def parentType =
        match (symbol.ParentProperty)
        {
          | SymbolRef.Some(p)   => p.Type
          | SymbolRef.None as x => Utils.GetDefaultDeclarationParentType(x.Location)
        };
      def expr = Compile(parentType);
      Environment.Manager.CoreEnv.BindFixedType(expr)
    }

    [Memoize]
    public CompileSimplePropertyType(propertySymbol : SimpleDeclarationPropertySymbol) : FixedType
    {
      def expr   = Compile(propertySymbol.Type);
      def result = Environment.Manager.CoreEnv.BindFixedType(expr);
      unless (result.IsPrimitive || result.TryRequire(Environment.DeclarationPartTypeVar) || result.TryRequire(Environment.NSpanTypeVar) || result.TryRequire(Environment.ReferenceTypeVar))
        Environment.Project.Error(propertySymbol.Type.Location, $"Type '$result' is not supported in Declaration. Use primitive types, subtype of '$(Environment.DeclarationPartTypeVar)', '$(Environment.ReferenceTypeVar)' or '$(Environment.NSpanTypeVar)'.");
      result
    }

    [Memoize]
    public CompileNamePropertyType(propertySymbol : NameDeclarationPropertySymbol) : FixedType
    {
      def expr   = Compile(propertySymbol.Type);
      def result = Environment.Manager.CoreEnv.BindFixedType(expr);
      // TODO: add check
      result
    }

    [Memoize]
    public CompileDependentPropertyType(propertySymbol : DependentDeclarationPropertySymbol) : FixedType
    {
      def expr = Compile(propertySymbol.Type);
      Environment.Manager.CoreEnv.BindFixedType(expr)
    }

    private Compile(t : NType) : PExpr
    {
      Util.locate(t.Location.ToNemerleLocation(),
        match (t)
        {
          | Predefined(t)    => Environment.MakeNemerleType(t)
          | Qualified(parts) =>
            def makeName(part : TypeNamePart) : Name
            {
              Name(part.Name, part.NemerleEnv.Manager.MacroColors.Color, part.NemerleEnv)
            }

            if (parts is first :: other)
            {
              mutable acc = Util.locate(first.Location.ToNemerleLocation(),
              {
                def head = <[ $(makeName(first) : name) ]>;
                if (first.TypeArguments.IsEmpty())
                  head
                else
                  <[ $head[..$(first.TypeArguments.Map(Compile))]]>;
              });
              foreach (t in other)
              {
                Util.locate(t.Location.ToNemerleLocation(),
                {
                  acc = <[ $acc . $(makeName(t) : name) ]>;
                  unless (t.TypeArguments.IsEmpty())
                    acc = <[ $acc[..$(t.TypeArguments.Map(Compile))]]>;
                });
              }
              acc
            }
            else assert3(false)

          | Tuple(members)   => <[ Nitra.Declarations.DeclarationSequence[..$(members.Map(Compile))] ]>
          | Func(from, to)   => <[ $(Compile(from)) -> $(Compile(to)) ]>
          | OptionList(item)
          | List(item)       => <[ $(Compile(item)).ListProxy ]>
          | Option(item)     => <[ Nitra.Declarations.DeclarationOption[$(Compile(item))] ]>
        })
    }

    public TryGetDeclarationSymbol(t : NType) : DeclarationSymbol
    {
      def expr      = Compile(t);
      def fixedType = Environment.Manager.CoreEnv.BindFixedType(expr);
      if (fixedType.TypeInfo != null)
      {
        def symbolPath = NString.SplitToList(fixedType.TypeInfo.FullName, array['.']);
        match (Environment.Root.BindMany.[DeclarationSymbol](symbolPath))
        {
          | [one] => one
          | _     => null
        }
      }
      else null
    }
  }
}
