using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class SimpleRuleDescriptorEmitter : RuleDescriptorEmitter[SimpleRuleSymbol]
  {
    protected override BaseType  : PExpr  { get <[ Nitra.SimpleRuleDescriptor ]> }
    protected override ClassName : string { get "SimpleRuleDescriptor" }

    public override DefineDescriptor() : void
    {
      base.DefineDescriptor();
      DefineNewParserMethod(<[ Nitra.Internal.SimpleRuleParser ]>, []);
      DefineIsStartRuleProperty();
      DefineEntranceMethod();

      if (Owner.SyntaxModule.IsSplicable)
      {
        def createSplicableParseTreeExpr = MakeRuleSelectorForParseTree(ruleSymbol => <[ $(SplicableParseTreeWalkerEmitter.GetRuleWalkMethodRef(ruleSymbol))(ref startPos, parseResult, splicableParseTreeBuilder) ]>);
        DescriptorTb.DefineConditional(<[ decl:
          public override CreateSplicableParseTree[T](mutable startPos : int, parseResult : Nitra.ParseResult, grammar : Nitra.CompositeGrammar, splicableParseTreeBuilder : Nitra.Internal.ISplicableParseTreeBuilder[T]) : T
          {
            IgnoreParams();
            $createSplicableParseTreeExpr
          }
        ]>);
      }
      else
      {
        def createParseTreeExpr = MakeRuleSelectorForParseTree(ruleSymbol => <[ $(Owner.Environment.GetParseTreeType(ruleSymbol) : typed).Create(startPos, endPos, parseResult, grammar) ]>);
        DescriptorTb.DefineConditional(<[ decl:
          public override CreateParseTree(startPos : int, endPos : int, parseResult : Nitra.ParseResult, grammar : Nitra.CompositeGrammar) : Nitra.ParseTree
          {
            IgnoreParams();
            $createParseTreeExpr
          }
        ]>);
      }
    }
  }
}
