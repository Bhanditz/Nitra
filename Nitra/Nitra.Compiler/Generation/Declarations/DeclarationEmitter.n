using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal abstract class DeclarationEmitter
  {
    protected static AmbiguousDeclarationName = "Ambiguous";

    public Environment : EmitterEnvironment { get; }
    public NemerleEnv  : GlobalEnv          { get; }

    public abstract DefineTypes() : void;
    public abstract Emit() : void;

    public virtual DefineNestedType(_ : ClassMember.TypeDeclaration) : TypeBuilder
    {
      throw NotSupportedException();
    }

    protected MakeFieldType(fieldSymbol : NitraFieldSymbol) : PExpr
    {
      Environment.MakeNemerleType(NemerleEnv, fieldSymbol.TypeLocation, fieldSymbol.Type)
    }

    protected DefineAmbiguousDeclaration(baseTb : TypeBuilder) : TypeBuilder
    {
      baseTb.DefineNestedType(<[ decl:
        public sealed class $(AmbiguousDeclarationName : usesite) : $(baseTb.GetMemType() : typed)
        {
          public this(ambiguities : array[$(baseTb.GetMemType() : typed)])
          {
            this.Ambiguities = ambiguities;
          }

          public override IsAmbiguous : bool                                      { get { true } }
          public          Ambiguities : array[$(baseTb.GetMemType() : typed)]     { get; }
          public override Span        : $(Environment.NSpanTypeVar : typed)       { get { this.Ambiguities[0].Span   } }
          public override Parent      : $(Environment.DeclarationTypeVar : typed) { get { this.Ambiguities[0].Parent } }
        }
      ]>)
    }
  }
}
