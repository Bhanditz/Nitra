using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal abstract class DeclarationEmitter
  {
    protected static AmbiguousDeclarationName = "Ambiguous";
    protected static ConcreteDeclarationName  = "Concrete";

    public Environment : EmitterEnvironment { get; }
    public NemerleEnv  : GlobalEnv          { get; }

    public abstract DefineTypes() : void;
    public abstract Emit() : void;

    public virtual DefineNestedType(_ : ClassMember.TypeDeclaration) : TypeBuilder
    {
      throw NotSupportedException();
    }

    protected MakeFieldType(fieldSymbol : NitraFieldSymbol) : PExpr
    {
      def convert(t : NType) : PExpr
      {
        | Predefined(t)    => Environment.MakeNemerleType(t)
        | Qualified(parts) =>
          if (parts is first :: other)
          {
            
            mutable acc = <[ $(Name(first.Name, first.NemerleEnv.Manager.MacroColors.Color, first.NemerleEnv) : name) ]>;

            unless (first.TypeArguments.IsEmpty())
              acc = <[ $acc[..$(first.TypeArguments.Map(convert))]]>;
            foreach (t in other)
            {
              acc = <[ $acc . $(Name(t.Name, t.NemerleEnv.Manager.MacroColors.Color, t.NemerleEnv) : name) ]>;
              unless (t.TypeArguments.IsEmpty())
                acc = <[ $acc[..$(t.TypeArguments.Map(convert))]]>;
            }
            acc
          }
          else assert3(false)

        | Tuple(members)   => <[ Nitra.Declarations.DeclarationSequence[..$(members.Map(convert))] ]>
        | Func(from, to)   => <[ $(convert(from)) -> $(convert(to)) ]>
        | OptionList(item)
        | List(item)       => <[ Nitra.Declarations.DeclarationList[$(convert(item))] ]>
        | Option(item)     => <[ Nitra.Declarations.DeclarationOption[$(convert(item))] ]>
      }
      convert(fieldSymbol.Type)
    }

    protected DefineAmbiguousDeclaration(baseTb : TypeBuilder) : TypeBuilder
    {
      baseTb.DefineNestedType(<[ decl:
        public sealed partial class $(AmbiguousDeclarationName : usesite) : $(baseTb.GetMemType() : typed)
        {
          public this(ambiguities : array[$(baseTb.GetMemType() : typed)])
          {
            this.Ambiguities = ambiguities;
          }

          public override IsAmbiguous : bool                                      { get { true } }
          public          Ambiguities : array[$(baseTb.GetMemType() : typed)]     { get; }
          public override Span        : $(Environment.NSpanTypeVar : typed)       { get { this.Ambiguities[0].Span   } }
          public override Parent      : $(Environment.DeclarationTypeVar : typed) { get { this.Ambiguities[0].Parent } }
        }
      ]>)
    }
  }
}
