using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal abstract class DeclarationEmitter
  {
    protected static AmbiguousDeclarationName = "Ambiguous";
    protected static ConcreteDeclarationName  = "Concrete";

    public Environment : EmitterEnvironment { get; }
    public NemerleEnv  : GlobalEnv          { get; }

    public abstract DefineTypes() : void;
    public abstract DefineMembers() : void;
    public abstract Emit() : void;

    public virtual DefineNestedType(_ : ClassMember.TypeDeclaration) : TypeBuilder
    {
      throw NotSupportedException();
    }

    protected CompileNType(t : NType) : PExpr
    {
      NTypeCompiler.Compile(t, Environment)
    }

    protected MakeFieldType(fieldSymbol : DeclarationFieldSymbol) : PExpr
    {
      NTypeCompiler.Compile(fieldSymbol.Type, Environment)
    }

    protected static CollectImplementedFields(fieldSymbol : DeclarationFieldSymbol) : list[DeclarationFieldSymbol]
    {
      def loop(f, result)
      {
        if (f.ImplementedField is SymbolRef.Some(nextF))
          loop(nextF, nextF :: result)
        else
          result
      }
      loop(fieldSymbol, [])
    }

    protected InvokeEvalMethod(fieldSymbol : DeclarationFieldSymbol) : PExpr
    {
      assert(fieldSymbol.HasBody);
      <[ $(Environment.GetDeclarationType(fieldSymbol.DeclaringDeclaration) : typed).$("Eval" + fieldSymbol.Name : usesite)(this) ]>
    }

    protected static MakeFieldBody(fieldSymbol : DeclarationFieldSymbol) : PExpr
    {
      assert(fieldSymbol.HasBody);
      <[ def self = this; _ = self; $(fieldSymbol.Body.Expr) ]>
    }

    protected DefineAmbiguousDeclaration(baseTb : TypeBuilder, parentType : NType) : TypeBuilder
    {
      baseTb.DefineNestedType(<[ decl:
        public sealed partial class $(AmbiguousDeclarationName : usesite) : $(baseTb.GetMemType() : typed)
        {
          public this(ambiguities : array[$(baseTb.GetMemType() : typed)])
          {
            this.Ambiguities = ambiguities;
          }

          public override IsAmbiguous : bool                                  { get { true } }
          public          Ambiguities : array[$(baseTb.GetMemType() : typed)] { get; }
          public override Span        : $(Environment.NSpanTypeVar : typed)   { get { this.Ambiguities[0].Span   } }
          public override Parent      : $(CompileNType(parentType))           { get { this.Ambiguities[0].Parent } }
        }
      ]>)
    }
  }
}
