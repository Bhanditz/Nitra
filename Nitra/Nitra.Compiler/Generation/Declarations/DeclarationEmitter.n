using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class DeclarationEmitter
  {
    private _environment       : EmitterEnvironment;
    private _declarationSymbol : DeclarationSymbol;
    private _env               : GlobalEnv;
    private _tb                : TypeBuilder;

    public this(environment : EmitterEnvironment, declarationSymbol : DeclarationSymbol)
    {
      this._environment       = environment;
      this._declarationSymbol = declarationSymbol;
      this._env               = environment.NamespaceOfSymbol(declarationSymbol);
      this._tb                = this._env.Define(<[ decl:
        public sealed class $(declarationSymbol.Name : usesite) : Nitra.Declaration
        {
          public this (location : Nitra.Location)
          {
            this._location = location;
          }

          private _location : Nitra.Location;
          public override Location : Nitra.Location { get { this._location } }
        }
      ]>);
    }

    public Emit() : void
    {
      _tb.Compile();
    }
  }
}
