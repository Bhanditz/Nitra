using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ExtendDeclarationEmitter : DeclarationEmitter
  {
    private         _symbol : ExtendDeclarationSymbol;
    private mutable _tb     : TypeBuilder;

    public this(environment : EmitterEnvironment, symbol : ExtendDeclarationSymbol)
    {
      base(environment, environment.NamespaceOfSymbol(symbol));
      this._symbol = symbol;
    }

    public override DefineTypes() : void
    {
      assert(_tb == null);
      _tb = NemerleEnv.Define(<[ decl:
        public module $(_symbol.Name : usesite)
        {
        }
      ]>);
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert(_tb != null);
      _tb.DefineNestedType(td);
    }

    public override Emit() : void
    {
      assert(_tb != null);
      _tb.Compile();
    }
  }
}
