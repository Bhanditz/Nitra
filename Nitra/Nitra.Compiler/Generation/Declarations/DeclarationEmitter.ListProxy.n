using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class DeclarationEmitter
  {
    protected DefineListProxy(baseTb : TypeBuilder) : TypeBuilder
    {
      def itemType = baseTb.GetMemType();
      baseTb.DefineNestedType(<[ decl:
        public sealed class ListProxy : Nitra.Declarations.DeclarationList[$(itemType : typed)]
        {
          public this(parent : $(Environment.DeclarationTypeVar : typed), span : $(Environment.NSpanTypeVar : typed), items : array[$(itemType : typed)])
          {
            base(parent, span, items)
          }
        }
      ]>);
    }

    protected DefineListProxyMembers(symbol : DeclarationSymbol, tb : TypeBuilder) : void
    {
      def bitFieldManager = tb.GetBitFieldManager();
      foreach (propertySymbol is DependentDeclarationPropertySymbol in symbol.AllProperties)
      {
        def bit = bitFieldManager.Allocate();
        DefineDependentProperty(tb, propertySymbol, bit.Index, bit, NemerleModifiers.Public, defineIsEvaluatedProperty = false)
      }

      DefineIsPropertyEvaluatedMethod(tb, 0);

      tb.Define(<[ decl:
        public override EvalProperties(context : Nitra.Declarations.EvalDeclarationPropertiesContext) : void
        {
          foreach (item in _items)
            item.EvalProperties(context);
        }
      ]>);
    }
  }
}
