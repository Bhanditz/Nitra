using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SimpleDeclarationEmitter : DeclarationEmitter
  {
    private         _symbol      : SimpleDeclarationSymbol;
    private mutable _baseTb      : TypeBuilder;
    private mutable _ambiguousTb : TypeBuilder;
    private mutable _concreteTb  : TypeBuilder;

    public this(environment : EmitterEnvironment, symbol : SimpleDeclarationSymbol)
    {
      base(environment, environment.NamespaceOfSymbol(symbol));
      this._symbol = symbol;
    }

    public override DefineTypes() : void
    {
      assert(_baseTb == null);

      def baseTypes = <[ Nitra.Declarations.Declaration[$(CompileNType(_symbol.ParentType))] ]>
        :: _symbol.BaseDeclarations.Map(s => <[ $(Environment.GetDeclarationType(s) : typed) ]>);

      _baseTb = NemerleEnv.Define(<[ decl:
        public abstract partial class $(_symbol.Name : usesite) : ..$baseTypes
        {
        }
      ]>);

      assert(_concreteTb == null);
      _concreteTb = _baseTb.DefineNestedType(<[ decl:
        public sealed partial class $(ConcreteDeclarationName : usesite) : $(_baseTb.GetMemType() : typed)
        {
          public this(parent : $(CompileNType(_symbol.ParentType)), span : $(Environment.NSpanTypeVar : typed))
          {
            this.Parent = parent;
            this.Span = span;
          }

          public override Parent : $(CompileNType(_symbol.ParentType)) { get; }
          public override Span   : $(Environment.NSpanTypeVar : typed) { get; }
        }
      ]>);

      assert(_ambiguousTb == null);
      _ambiguousTb = DefineAmbiguousDeclaration(_baseTb, _symbol.ParentType);
    }

    public override DefineMembers() : void
    {
      assert(_baseTb != null);

      def initParameters = SCG.List();
      def initStatements = SCG.List();

      def dependentProps = SCG.List();
      def declaredProps = SCG.List();

      def defineSimpleProperty(propertySymbol : SimpleDeclarationPropertySymbol) : void
      {
        _baseTb.Define(<[ decl:
          public abstract $(propertySymbol.Name : usesite) : $(MakePropertyType(propertySymbol)) { get; }
        ]>);

        _ambiguousTb.Define(<[ decl:
          public override $(propertySymbol.Name : usesite) : $(MakePropertyType(propertySymbol))
          {
            get { this.Ambiguities[0].$(propertySymbol.Name : usesite) }
          }
        ]>);

        def backingFieldName = Util.tmpname(propertySymbol.Name);
        initParameters.Add(<[ parameter : $(propertySymbol.Name : usesite) : $(MakePropertyType(propertySymbol)) ]>);
        initStatements.Add(<[ this.$(backingFieldName : usesite) = $(propertySymbol.Name : usesite) ]>);
        _concreteTb.Define(<[ decl:
          private mutable $(backingFieldName : usesite) : $(MakePropertyType(propertySymbol))
        ]>);

        def prop = _concreteTb.DefineAndReturn(<[ decl:
          public override $(propertySymbol.Name : usesite) : $(MakePropertyType(propertySymbol))
          {
            get { this.$(backingFieldName : usesite) }
          }
        ]>) :> IProperty;

        declaredProps.Add(prop);
      }

      def defineDependentProperty(propertySymbol : DependentDeclarationPropertySymbol) : void
      {
        def index = dependentProps.Count;
        def bit   = _baseTb.GetBitFieldManager().Allocate();
        assert(bit.Index == index);

        dependentProps.Add(propertySymbol);

        DefineDependentProperty(_baseTb, propertySymbol, index, bit, NemerleModifiers.Public | NemerleModifiers.Virtual);
        DefineAmbiguousDependentProperty(_ambiguousTb, propertySymbol, index);
      }

      foreach (propertySymbol in _symbol.AllProperties)
      {
        | SimpleDeclarationPropertySymbol    as s => defineSimpleProperty(s)
        | DependentDeclarationPropertySymbol as s => defineDependentProperty(s)
        | _                                       => assert(false)
      }

      DefineInitializeMethod(_concreteTb, initParameters, initStatements);
      DefineHasValueMethod(_baseTb, 0);
      DefineDependentFieldsEvaluation(_baseTb, declaredProps, _symbol);
    }

    public override Emit() : void
    {
      assert(_baseTb != null);
      _baseTb.Compile();

      assert(_concreteTb != null);
      _concreteTb.Compile();

      assert(_ambiguousTb != null);
      _ambiguousTb.Compile();
    }
  }
}
