using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  partial class RuleAstEmitter
  {
    protected DefineParsedAstCtorAndFields(fields : SCG.List[FieldInfo], _parsedAstTb : TypeBuilder) : void
    {
      _parsedAstTb.DefineConditional(<[ decl: private parseResult : Nitra.ParseResult; ]>);
      _parsedAstTb.DefineConditional(<[ decl: private astPtr      : int; ]>);
      _parsedAstTb.DefineConditional(<[ decl: private startPos    : int; ]>);
      _parsedAstTb.DefineConditional(<[ decl: private endPos      : int; ]>);

      _parsedAstTb.DefineConditional(<[ decl:
        public override Location : Nitra.Location
        {
          get { Nitra.Location(this.parseResult, this.startPos, this.endPos) }
        }
      ]>);

      _parsedAstTb.DefineConditional(<[ decl:
        protected override PrettyPrintSource : Nitra.IPrettyPrintSource
        {
          get { this.parseResult }
        }
      ]>);

      def astPtr = AstPointer.Existing(this.RuleSymbol.Sequence, this, "astPtr");

      def endPosExpr = this.RuleSymbol.Sequence.NonMarkerSubrules.Fold(<[ pos ]>, (subrule, acc) => <[ $acc + $(astPtr.GetSize(subrule)) ]>);

      match (this.RuleSymbol)
      {
        | SimpleRuleSymbol
        | ExtensionRuleSymbol(ExtensionType = Prefix) =>
          _parsedAstTb.DefineConditional(<[decl:
            [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
            public this(pos : ref int, astPtr : int, parseResult : Nitra.ParseResult)
            {
              unchecked
              {
                this.parseResult = parseResult;
                this.astPtr      = astPtr;
                this.startPos    = pos;
                if (astPtr > 0)
                {
                  this.endPos = $endPosExpr;
                  pos = this.endPos;
                }
                else
                {
                  this.endPos = pos;
                }
              }
            }
          ]>);

          _parsedAstTb.DefineConditional(<[decl:
            [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
            public this(startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : Nitra.ParseResult)
            {
              unchecked
              {
                this.parseResult = parseResult;
                this.astPtr      = ~recoveredSubrulesIndex;
                this.startPos    = startPos;
                this.endPos      = endPos;
              }
            }
          ]>);

        | ExtensionRuleSymbol(ExtensionType = Postfix) as symbol =>
          _parsedAstTb.DefineConditional(<[ decl: private astStartPos : int; ]>);
          _parsedAstTb.DefineConditional(<[ decl: private prefix      : $(Environment.GetParseTreeType(symbol.BaseRule.Value) : typed); ]>);
          _parsedAstTb.DefineConditional(<[ decl:
            [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
            public this(prefix : $(Environment.GetParseTreeType(symbol.BaseRule.Value) : typed), prefixStartPos : int, pos : ref int, astPtr : int, parseResult : Nitra.ParseResult)
            {
              unchecked
              {
                this.parseResult = parseResult;
                this.astPtr      = astPtr;
                this.startPos    = prefixStartPos;
                this.astStartPos = pos;
                this.prefix      = prefix;
                if (astPtr > 0)
                {
                  this.endPos = $endPosExpr;
                  pos = this.endPos;
                }
                else
                {
                  this.endPos = pos;
                }
              }
            }
          ]>);

          _parsedAstTb.DefineConditional(<[ decl:
            [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
            public this(prefix : $(Environment.GetParseTreeType(symbol.BaseRule.Value) : typed), prefixStartPos : int, startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : Nitra.ParseResult)
            {
              unchecked
              {
                this.parseResult = parseResult;
                this.astPtr      = ~recoveredSubrulesIndex;
                this.startPos    = prefixStartPos;
                this.endPos      = endPos;
                this.astStartPos = startPos;
                this.prefix      = prefix;
              }
            }
          ]>);

        | _ => assert(false)
      }

      def getStartPos() : PExpr
      {
        match (this.RuleSymbol)
        {
          | SimpleRuleSymbol
          | ExtensionRuleSymbol(ExtensionType = Prefix)  => <[ this.startPos ]>
          | ExtensionRuleSymbol(ExtensionType = Postfix) => <[ this.astStartPos ]>
          | _ => assert(false)
        }
      }

      foreach (field in fields)
      {
        mutable needCaching     : bool;
        mutable needPos         : bool;

        def analyze(_ : FieldExpr) : void
        {
          | Prefix                       => ()
          | Tuple(items)                 => needPos = true; foreach (expr in items) analyze(expr);
          | Chars                        => needPos = true;
          | Other                        => needPos = true; needCaching = true;
        }

        analyze(field.Expr);

        def statementsStandardMode = SCG.List();
        when (needPos)
          statementsStandardMode.Add(<[ mutable pos = $(getStartPos()); ]>);

        def compileStandardMode(_ : FieldExpr) : PExpr
        {
          | Prefix(expr)
          | Chars(ExprStandardMode = expr)
          | Other(ExprStandardMode = expr) => expr
          | Tuple(items)   =>
            def tupleCode = SCG.List();
            def tupleArgs = SCG.List();
            foreach (item in items)
            {
              def name = Util.tmpname("ast");
              tupleCode.Add(<[ def $(name : usesite) = $(compileStandardMode(item)) ]>);
              tupleArgs.Add(<[ $(name : usesite) ]>);
            }
            <[
              def sequenceStartPos = pos;
              ..$tupleCode;
              Nitra.ConcreteSequenceParseTree(Nitra.Location(parseResult, sequenceStartPos, pos), ..$tupleArgs)
            ]>
        }
        statementsStandardMode.Add(compileStandardMode(field.Expr));

        def compileRecoveryMode(_ : FieldExpr) : PExpr
        {
          | Prefix(expr)
          | Chars(ExprRecoveryMode = expr)
          | Other(ExprRecoveryMode = expr) => expr
          | Tuple(items)   =>
            def tupleCode = SCG.List();
            def tupleArgs = SCG.List();
            foreach (item in items)
            {
              def name   = Util.tmpname("ast");
              def isSpan = item is FieldExpr.Chars;
              tupleCode.Add(<[ def $(name : usesite) = $(compileRecoveryMode(item)) ]>);
              tupleArgs.Add(name, isSpan);
            }
            def startPos = match(tupleArgs[0])
            {
              | (name, true)  => <[ $(name : usesite).StartPos ]>;
              | (name, false) => <[ $(name : usesite).Location.StartPos ]>;
            };
            def endPos = match (tupleArgs[tupleArgs.Count - 1])
            {
              | (name, true) => <[ $(name : usesite).EndPos ]>;
              | (name, false) => <[ $(name : usesite).Location.EndPos ]>;
            };
            <[
              ..$tupleCode;
              Nitra.ConcreteSequenceParseTree(Nitra.Location(parseResult, $startPos, $endPos), ..$(tupleArgs.MapToList((name, _) => <[ $(name : usesite) ]>)))
            ]>
        }
        def statementsRecoveryMode = compileRecoveryMode(field.Expr);

        def code = <[ if (this.astPtr > 0) { ..$statementsStandardMode } else $statementsRecoveryMode ]>;

        def codeWithCaching =
          if (needCaching)
          {
            def backingFieldName = Util.tmpname(field.Name);
            _parsedAstTb.DefineConditional(<[ decl: private mutable $(backingFieldName : usesite) : $(field.Type : typed); ]>);
            assert(!field.Type.IsValueType);
            <[
              when ($(backingFieldName : usesite) : object == null)
              {
                $(backingFieldName : usesite) = $code;
              }
              $(backingFieldName : usesite)
            ]>
          }
          else code;

        _parsedAstTb.DefineConditional(<[ decl:
          public override $(field.Name : usesite) : $(field.Type : typed)
          {
            get { unchecked ($codeWithCaching) }
          }
        ]>);
      }
    }
  }
}
