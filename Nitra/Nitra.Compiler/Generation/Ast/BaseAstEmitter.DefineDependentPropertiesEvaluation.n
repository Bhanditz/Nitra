using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Surround;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

[assembly: DefineSurround("related_messages", true, Environment.Manager.BeginRelatedMessageSequence(), Environment.Manager.EndRelatedMessageSequence())]

namespace Nitra.Compiler
{
  internal abstract partial class BaseAstEmitter
  {
    protected DefineDependentPropertiesInheritableEvaluation(tb : TypeBuilder, symbol : PropertyContainerSymbol, dependentProperties : SCG.Dictionary[DependentPropertySymbol, DependentPropertyRef]) : void
    {
      Util.locate(symbol.FirstLocation.NLocation(), tb.Manager.MacroColors.InGlobalColor(fun()
      {
        def body = SCG.List();
        foreach (assignment in (symbol :> IDependentPropertyAssignmentContainer).GetAssignments())
        {
          mutable unused;
          def expr = PrepareExprForInheritableEvaluation(symbol, assignment.Expression, false, ref unused);
          body.Add(Util.locate(assignment.Location.NLocation(), <[ $(PExprUtils.FromQualifiedMember(<[ self ]>, assignment.Path)) = $expr ]>));
        }

        def evalMethod = tb.DefineAndReturn(<[ decl:
          public static $(" fake " : usesite)($("self" : global) : this, $("context" : global) : Nitra.Declarations.DependentPropertyEvalContext) : void
          {
            ..$body
          }
        ]>) :> MethodBuilder;

        DefineDependentPropertiesEvaluationImpl(evalMethod, tb, symbol, dependentProperties, <[ self ]>);
      }));
    }

    protected DefineDependentPropertiesSealedEvaluation(tb : TypeBuilder, symbol : PropertyContainerSymbol, dependentProperties : SCG.Dictionary[DependentPropertySymbol, DependentPropertyRef]) : void
    {
      Util.locate(symbol.FirstLocation.NLocation(), tb.Manager.MacroColors.InGlobalColor(fun()
      {
        def body = SCG.List();
        foreach (assignment in (symbol :> IDependentPropertyAssignmentContainer).GetAssignments())
          body.Add(Util.locate(assignment.Location.NLocation(), <[ $(PExprUtils.FromQualifiedMember(<[ this ]>, assignment.Path)) = $(assignment.Expression) ]>));

        def evalMethod = tb.DefineAndReturn(<[ decl:
          public override EvalProperties($("context" : global) : Nitra.Declarations.DependentPropertyEvalContext) : void
          {
            ..$body
          }
        ]>) :> MethodBuilder;

        DefineDependentPropertiesEvaluationImpl(evalMethod, tb, symbol, dependentProperties, <[ this ]>);
      }));
    }

    private DefineDependentPropertiesEvaluationImpl(evalMethod : MethodBuilder, tb : TypeBuilder, symbol : PropertyContainerSymbol, dependentProperties : SCG.Dictionary[DependentPropertySymbol, DependentPropertyRef], self : PExpr) : void
    {
      def compileGraph(graphNodes : Seq[Node]) : void
      {
        def cycled = Node.Sort(graphNodes);
        if (cycled)
        {
          def cycledNodes = Node.FindCycling(graphNodes);
          foreach (cycledNode in cycledNodes)
            Message.Error(cycledNode.Location, "Is cycled.");
          otherwise assert(false, "Cycled nodes not found");
        }
        else
        {
          def props = SCG.List();
          foreach (s is StructuralPropertySymbol in symbol.AllProperties)
          {
            if (tb.LookupMember(s.Name).Find(m => m is IProperty) is Some(m))
              props.Add(s, m :> IProperty);
            else
              assert(false, $"IProperty for symbol $s not found");
          }
          def graphNodes2 = AddDependencyOnAstProperties(graphNodes, props);
          CheckStageDependencies(graphNodes2);
          //CheckOutputPropertiesAssignment(symbol, newGraphNodes);
          evalMethod.Body = GenerateCode(tb, symbol, graphNodes2, dependentProperties, self);
        }
      }

      def errorCount = Message.ErrorCount;
      def typer = Typer(evalMethod);
      typer.StopAfterPhase = 1;
      typer.RunFullTyping();
      when (errorCount != Message.ErrorCount)
        throw Recovery();

      match (evalMethod.GetHeader().Body)
      {
        | FunBody.Typed(TExpr.Block(_, TExpr.Literal(Literal.Void))) =>
          compileGraph([])

        | FunBody.Typed(TExpr.Block(_, bodyExpr)) =>
          def expr       = ValidateEvalFieldsCode(bodyExpr);
          def nodesMap   = MakeDependencyGraph(expr, dependentProperties);
          def graphNodes = nodesMap.Values.ToArray();

          assert2(graphNodes.Length < 5);

          def localMap  = MakeLocalDependencyGraph(tb, symbol, expr);
          def fullGraph = MakeFullDepencyGraph(symbol, localMap);

          when (symbol.IsAbstract)
            PropertyDependencyNode.Save(fullGraph, symbol);

          when (graphNodes.Length >= 5)
            PropertyDependencyNode.Visualize(fullGraph, tb.Name);

          compileGraph(graphNodes)

        | _ => assert2(false, $"Failed typing of dependent evaluations in method '$(evalMethod.Name)'");
      }
    }

    private static ErrorUnexpectedExpr(expr : TExpr) : void
    {
      Message.FatalError(expr.Location, $"Unexpected expression '$expr' $(expr.GetType().Name)")
    }

    private static ValidateEvalFieldsCode(expr : TExpr) : TExpr
    {
      def walker = ExprWalker();
      def checkInvalidExpre(info : ExprWalkInfo) : void
      {
        match (info.Node)
        {
          | TExpr.DefFunctionsIn as e
          | TExpr.DefValIn       as e
          | TExpr.Block          as e
          | TExpr.Error          as e
          | TExpr.SelfTailCall   as e
          | TExpr.MultipleAssign as e
          | TExpr.StaticEventRef as e
          | TExpr.EventMember    as e => ErrorUnexpectedExpr(e);
          | _ => ()
        }
      }
      walker.Walk(expr, checkInvalidExpre);

      def removeDelayed(expr : TExpr) : TExpr
      {
        | PropertyMember as e => 
          def newObj = e.obj.Walk(removeDelayed);
          if (newObj : object != e.obj)
          {
            def res = TExpr.PropertyMember(e.Type, newObj, e.prop);
            res.Location = e.Location;
            res
          }
          else
            e
            
        | Typedtree.TExpr.StaticPropertyRef as e => e
        | TExpr.Delayed as d when d.susp.IsResolved => d.susp.ResolutionResult
        | _ => null
      }

      //assert2(false);
      expr.Walk(removeDelayed)
    }

    private MakeFullDepencyGraph(symbol : PropertyContainerSymbol, map : Hashtable[DependencyPath, PropertyDependencyNode]) : array[PropertyDependencyNode]
    {
      def replacementList = SCG.List();

      foreach (parent in symbol.GetParents())
      {
        def parentGraph = PropertyDependencyNode.Load(parent);
        foreach (node in parentGraph)
        {
          mutable existingNode;
          if (map.TryGetValue(node.Path, out existingNode))
          {
            when (existingNode.DeclaredIn : object == node.DeclaredIn)
              continue;

            match (node, existingNode)
            {
              | (Use    as use,    Assign as assign)
              | (Assign as assign, Use    as use) => replacementList.Add(use, assign);
              | (Use, Use) =>
                existingNode.DependendOn.UnionWith(node.DependendOn);
                replacementList.Add(node, existingNode);

              | (Assign, Assign) =>
                if (existingNode.DeclaredIn : object == symbol)
                  replacementList.Add(node, existingNode);
                else
                {
                  def pathText = node.Path.ToString();
                  def name1    = existingNode.DeclaredIn.FullName;
                  def name2    = node.DeclaredIn.FullName;
                  surroundwith (related_messages)
                  {
                    Message.Error(symbol.FirstLocation.NLocation(), $"Multiple assignment of property '$pathText' in parents: '$name1' and '$name2'.");
                    Message.Hint(existingNode.Location, $"First assignment of '$pathText' from '$name1'.");
                    Message.Hint(node.Location,         $"Second assignment of '$pathText' from '$name2'.");
                  }
                }
            }
          }
          else
            map.Add(node.Path, node);
        }

        foreach ((oldNode, newNode) in replacementList)
        {
          foreach (pair in map)
          {
            def dependendOn = pair.Value.DependendOn;
            when (dependendOn.Remove(oldNode))
              _ = dependendOn.Add(newNode);
          }
        }
        replacementList.Clear();
      }

      def result = map.Values.ToArray();
      SortGraphAndReport(result);
      result
    }

    private AddParentGraphs(inheritorSymbol : PropertyContainerSymbol, graph : Hashtable[DependencyPath, PropertyDependencyNode], visited : SCG.HashSet[PropertyContainerSymbol]) : void
    {
      unless (visited.Add(inheritorSymbol))
        return;

      def nodes = PropertyDependencyNode.Load(inheritorSymbol);

      foreach (node in nodes)
        unless (graph.ContainsKey(node.Path))
          graph.Add(node.Path, node);

      def parentsNodes = Hashtable();

      foreach (node in nodes)
      {
        when (graph.ContainsKey(node.Path))
          continue;

        mutable existingNode;
        if (parentsNodes.TryGetValue(node.Path, out existingNode))
        {
          def pathText = node.Path.ToString();
          def name1    = existingNode.DeclaredIn.FullName;
          def name2    = node.DeclaredIn.FullName;
          surroundwith (related_messages)
          {
            Message.Error(inheritorSymbol.FirstLocation.NLocation(), $"Multiple assignment of property '$pathText' in parents: '$name1' and '$name2'.");
            Message.Hint(existingNode.Location, $"First assignment of '$pathText' from '$name1'.");
            Message.Hint(node.Location,         $"Second assignment of '$pathText' from '$name2'.");
          }
        }
        else
          parentsNodes.Add(node.Path, node);
      }
      
      foreach (parents in inheritorSymbol.GetParents())
        AddParentGraphs(parents, graph, visited);
    }

    private MakeLocalDependencyGraph(tb : TypeBuilder, symbol : PropertyContainerSymbol, expr : TExpr) : Hashtable[DependencyPath, PropertyDependencyNode]
    {
      def nodesMap = Hashtable();
      def getPathAndIndex(expr : TExpr) : DependencyPath * int
      {
        match (expr)
        {
          | TExpr.PropertyMember as e =>
            def (path, _) = getPathAndIndex(e.obj);
            match (Environment.LookupPropertySymbol(e.prop))
            {
              | VSome((propertySymbol, propertyIndex)) => (DependencyPath.DeclaredProperty(path, propertySymbol), propertyIndex)
              | VNone                                  => (DependencyPath.CustomProperty(path, e.prop.Name), -1)
            }

          | TExpr.Base
          | TExpr.This
          | TExpr.LocalRef(LocalValue(Name = "self", ValKind = LocalValue.Kind.FunParm)) => (DependencyPath.This(), -1)
          | _ =>  ErrorUnexpectedExpr(expr);  (null, -1)
        }
      }
      def nodeForPropertySymbol(propAccess : TExpr.PropertyMember) : PropertyDependencyNode
      {
        def nodesMap = nodesMap;
        def (path, index) = getPathAndIndex(propAccess);
        mutable to;
        unless (nodesMap.TryGetValue(path, out to))
        {
          to = PropertyDependencyNode.Use(symbol, path, index, propAccess.Location);
          nodesMap[path] = to;
        }
        to
      }
      def addUseDependence(expr : TExpr, node : PropertyDependencyNode) : void
      {
        match (expr)
        {
          | TExpr.PropertyMember as e =>
            def to = nodeForPropertySymbol(e);
            // Зависимость присвоения зависимого свойства от структурного не имеет смысла. Зато имеет смысл вычислить внутренности
            // структорного свойства после установки "на нем" зависимго свойства. Для этого, разворачиваем зависимости:
            if (node is PropertyDependencyNode.Assign && to is PropertyDependencyNode.Use(IsDependent=false))
              when (to.DependendOn.Add(node))
                addUseDependence(e.obj, to);
            else when (node.DependendOn.Add(to))
              addUseDependence(e.obj, to);

          | TExpr.Base
          | TExpr.This
          | TExpr.LocalRef(LocalValue(Name = "self", ValKind = LocalValue.Kind.FunParm)) => () // OK
          | _ => ErrorUnexpectedExpr(expr); // not a property in member acess
        }
      }
      def addNodesDependentOnAssignedProperty(expr : TExpr, node : PropertyDependencyNode) : void
      {
        def walker = ExprWalker();
        def walk(info : ExprWalkInfo) : void
        {
          def loop(expr)
          {
            | TExpr.PropertyMember as propAccess =>
              addUseDependence(propAccess, node);
              info.Skip();

            | TExpr.Delayed as e when e.susp.IsResolved => loop(e.susp.ResolutionResult)
            | TExpr.Delayed as e => Message.FatalError(e.Location, "Delayed typing detected: " + e)
            | _ => ()
          }

          loop(info.Node)
        }
        walker.Walk(expr, walk);
      }
      def addKey(assign : TExpr.Assign) : void
      {
        match (assign.target)
        {
          | TExpr.PropertyMember as e =>
            if (Environment.LookupPropertySymbol(e.prop).IsSome) //  is VSome((propertySymbol, propertyIndex))
            {
              def (path, index) = getPathAndIndex(e);
              mutable existingNode;
              if (nodesMap.TryGetValue(path, out existingNode))
              {
                Message.Warning(existingNode.Location, "Related message: First assingment of dependent property.");
                Message.FatalError(e.Location, "Multiple assign of dependent property.");
              }
              else if (symbol.IsAbstract)
              {
                def methodName = GetEvalMethodName(path);
                tb.Define(<[ decl: 
                  public static $(methodName : global)(self : this, context : Nitra.Declarations.DependentPropertyEvalContext) : $(assign.source.Type : typed)
                  {
                    $(assign.source : typed)
                  }
                ]>);
                nodesMap[path] = PropertyDependencyNode.Assign(symbol, path, index, e.Location, <[ $(assign.target : typed) = $(methodName : usesite)(this, context) ]>);
              }
              else
                nodesMap[path] = PropertyDependencyNode.Assign(symbol, path, index, e.Location, <[ $(assign : typed) ]>);
            }
            else
              Message.FatalError(e.Location, "You can assign only a dependent property.");

          | TExpr.Delayed => assert(false);
          | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
        }
      }
      def processAssign(assign : TExpr.Assign) : void
      {
        match (assign.target)
        {
          | TExpr.PropertyMember as e =>
            if (Environment.LookupPropertySymbol(e.prop).IsSome)
            {
              def nodesMap = nodesMap;
              def (path, _index) = getPathAndIndex(e);
              def node = nodesMap[path] :> PropertyDependencyNode.Assign;
              addNodesDependentOnAssignedProperty(assign.source, node);
              addNodesDependentOnAssignedProperty(e.obj, node);
            }
            else
              Message.FatalError(e.Location, "You can assign only a dependent property.");

          | TExpr.Delayed => assert(false);
          | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
        }
      }
      def addAssigns(expr : TExpr) : void
      {
        match (expr)
        {
          | TExpr.Delayed => assert(false);
          | TExpr.DebugInfo as e => addAssigns(e.expr)
          | TExpr.Sequence as e => addAssigns(e.e1); addAssigns(e.e2);
          | TExpr.Assign as e => addKey(e);
          | e => ErrorUnexpectedExpr(e)
        }
      }
      def calcDependents(expr : TExpr) : void
      {
        | TExpr.Delayed => assert(false);
        | TExpr.DebugInfo as e => calcDependents(e.expr)
        | TExpr.Sequence as e => calcDependents(e.e1); calcDependents(e.e2);
        | TExpr.Assign as e => processAssign(e);
        | e => ErrorUnexpectedExpr(e)
      }

      addAssigns(expr);
      calcDependents(expr);
      //assert2(nodesMap.Count < 5);
      nodesMap
    }
    
    private MakeDependencyGraph(expr : TExpr, dependentProperties : SCG.Dictionary[DependentPropertySymbol, DependentPropertyRef]) : Hashtable[list[IProperty], Node]
    {
      def makePropertyRef(obj : TExpr, propertySymbol : DependentPropertySymbol, propertyIndex : int) : DependentPropertyRef
      {
        mutable propertyRef;
        if (IsThis(obj) && dependentProperties.TryGetValue(propertySymbol, out propertyRef))
          propertyRef
        else
          DependentPropertyRef.Reflected(propertySymbol, propertyIndex)
      }

      def nodesMap = Hashtable();
      def toKey(expr : TExpr, acc : list[IProperty] = []) : list[IProperty]
      {
        match (expr)
        {
          | TExpr.PropertyMember as e => toKey(e.obj, e.prop :: acc)
          | TExpr.Base => acc
          | TExpr.This => acc
          | TExpr.LocalRef(LocalValue(Name = "self", ValKind = LocalValue.Kind.FunParm)) => acc
          | _ =>  ErrorUnexpectedExpr(expr); null
        }
      }
      def nodeForPropertySymbol(propAccess : TExpr.PropertyMember, propertyRef : DependentPropertyRef) : Node
      {
        def nodesMap = nodesMap;
        def key = toKey(propAccess);
        mutable to;
        unless (nodesMap.TryGetValue(key, out to))
        {
          to = Node.Use(propAccess, propertyRef);
          nodesMap[key] = to;
        }
        to
      }
      def addUseDependence(expr : TExpr, node : Node) : void
      {
        match (expr)
        {
          | TExpr.PropertyMember as e =>
            if (Environment.LookupPropertySymbol(e.prop) is VSome((DependentPropertySymbol as propertySymbol, propertyIndex)))
            {
              def to = nodeForPropertySymbol(e, makePropertyRef(e.obj, propertySymbol, propertyIndex));
              when (node.DependendOn.Add(to))
                addUseDependence(e.obj, to);
            }
            else
              addUseDependence(e.obj, node);

          | TExpr.Base
          | TExpr.This
          | TExpr.LocalRef(LocalValue(Name = "self", ValKind = LocalValue.Kind.FunParm)) => () // OK
          | _ => ErrorUnexpectedExpr(expr); // not a property in member acess
        }
      }
      def addNodesDependentOnAssignedProperty(expr : TExpr, node : Node) : void
      {
        def walker = ExprWalker();
        def walk(info : ExprWalkInfo) : void
        {
          def loop(expr)
          {
            | TExpr.PropertyMember as propAccess =>
              addUseDependence(propAccess, node);
              info.Skip();

            | TExpr.Delayed as e when e.susp.IsResolved => loop(e.susp.ResolutionResult)
            | TExpr.Delayed as e => Message.FatalError(e.Location, "Delayed typing detected: " + e)
            | _ => ()
          }

          loop(info.Node)
        }
        walker.Walk(expr, walk);
      }
      def addKey(assign : TExpr.Assign, debug : TExpr = null) : void
      {
        match (assign.target)
        {
          | TExpr.PropertyMember as e =>
            if (Environment.LookupPropertySymbol(e.prop) is VSome((DependentPropertySymbol as propertySymbol, propertyIndex)))
            {
              def key = toKey(e);
              mutable existingNode;
              if (nodesMap.TryGetValue(key, out existingNode))
              {
                Message.Warning(existingNode.Location, "Related message: First assingment of dependent property.");
                Message.FatalError(e.Location, "Multiple assign of dependent property.");
              }
              else
              {
                def node = Node.Assign(assign, debug, e, makePropertyRef(e.obj, propertySymbol, propertyIndex));
                nodesMap[key] = node;
              }
            }
            else
              Message.FatalError(e.Location, "You can assign only a dependent property.");

          | TExpr.Delayed => assert(false);
          | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
        }
      }
      def processAssign(assign : TExpr.Assign) : void
      {
        match (assign.target)
        {
          | TExpr.PropertyMember as e =>
            if (Environment.LookupPropertySymbol(e.prop).IsSome)
            {
              def nodesMap = nodesMap;
              def key = toKey(e);
              def node = nodesMap[key] :> Node.Assign;
              addNodesDependentOnAssignedProperty(assign.source, node);
              addNodesDependentOnAssignedProperty(e.obj, node);
            }
            else
              Message.FatalError(e.Location, "You can assign only a dependent property.");

          | TExpr.Delayed => assert(false);
          | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
        }
      }
      def addAssigns(expr : TExpr, debug : TExpr = null) : void
      {
        match (expr)
        {
          | TExpr.Delayed => assert(false);
          | TExpr.DebugInfo as e => addAssigns(e.expr, e)
          | TExpr.Sequence as e => addAssigns(e.e1); addAssigns(e.e2);
          | TExpr.Assign as e => addKey(e, debug);
          | e => ErrorUnexpectedExpr(e)
        }
      }
      def calcDependents(expr : TExpr) : void
      {
        | TExpr.Delayed => assert(false);
        | TExpr.DebugInfo as e => calcDependents(e.expr)
        | TExpr.Sequence as e => calcDependents(e.e1); calcDependents(e.e2);
        | TExpr.Assign as e => processAssign(e);
        | e => ErrorUnexpectedExpr(e)
      }

      addAssigns(expr);
      calcDependents(expr);
      //assert2(nodesMap.Count < 5);
      nodesMap
    }

    private static AddDependencyOnAstProperties(dependencyGraph : Seq[Node], declaredProperties : Seq[PropertySymbol * IProperty]) : Seq[Node]
    {
      def declaredPropNodes = SCG.List();
      foreach ((s, p) in declaredProperties)
        declaredPropNodes.Add(Node.DeclaredProp(s, p));

      def newDependencyGraph = SCG.List(dependencyGraph);
      newDependencyGraph.AddRange(declaredPropNodes);

      def getRootProp(expr : TExpr) : IProperty
      {
        | TExpr.PropertyMember(TExpr.Base, prop)
        | TExpr.PropertyMember(TExpr.This, prop)
        | TExpr.PropertyMember(TExpr.LocalRef(LocalValue(Name = "self", ValKind = LocalValue.Kind.FunParm)), prop) => prop
        | TExpr.PropertyMember(obj, _) => getRootProp(obj)
        | _ => Message.FatalError(expr.Location, "Properties must only be used.")
      }

      //Node.Visualize(nodesMap.Values, "После добавления Node.DeclaredProp()");

      def synthesizedProps = newDependencyGraph.OfType.[Node.Use]();
      foreach (synthesizedProp in synthesizedProps)
      {
        def prop = getRootProp(synthesizedProp.Expr);
        foreach (astProp in declaredPropNodes)
          when (prop : object == astProp.Prop)
            _ = synthesizedProp.DependendOn.Add(astProp);
      }

      //visualize(": После добавления зависимостей с синтизируемых свойств");

      def inheritedProps = newDependencyGraph.OfType.[Node.Assign]();
      foreach (inheritedProp in inheritedProps)
      {
        def prop = getRootProp(inheritedProp.Expr.target);
        foreach (astProp in declaredPropNodes)
          when (prop : object == astProp.Prop)
            _ = astProp.DependendOn.Add(inheritedProp);
      }

      //Node.Visualize(nodesMap.Values, "После добавления зависимостей на наследуемые свойства");

      def cycled2 = Node.Sort(newDependencyGraph);
      when (cycled2)
      {
        foreach (astProp when astProp.State == PropertyDependencyNodeState.Cycling in declaredPropNodes)
          _ = astProp.DependendOn.RemoveWhere(inheritedProp => inheritedProp.State == PropertyDependencyNodeState.Cycling)
      }
      def cycled3 = Node.Sort(newDependencyGraph);

      //visualize(": После удаления ЗАЦИКЛИВАЮЩИХСЯ зависимостей на наследуемые свойства");

      assert2(!cycled3);

      newDependencyGraph
    }

    private CheckStageDependencies(dependencyGraph : Seq[Node]) : void
    {
      foreach (a in dependencyGraph)
      {
        | Assign as a =>
          def target = a.PropertyRef.Symbol;
          when (target.Direction == DependentPropertyDirection.Out)
          {
            foreach (d in a.DependendOn)
            {
              def source = d.PropertyRef.Symbol;
              when (target.Stage < source.Stage)
              {
                Message.Error(a.Location, $"Reversing stage dependency detected: property '$(target.FullName)' from stage '$(target.Stage)' value depends on property '$(source.FullName)' from stage '$(source.Stage)'.");
                when (target.AssemblyId == AssemblyIds.CurrentAssembly)
                  Message.Hint(target.FirstLocation.NLocation(), $"Assigned property from stage '$(target.Stage)'.");
                when (source.AssemblyId == AssemblyIds.CurrentAssembly)
                  Message.Hint(source.FirstLocation.NLocation(), $"Dependend property from stage '$(source.Stage)'.");
              }
            }
          }

        | _ => ()
      }
    }

    private GenerateCode(tb : TypeBuilder, symbol : PropertyContainerSymbol, dependencyGraph : Seq[Node], dependentProperties : SCG.Dictionary[DependentPropertySymbol, DependentPropertyRef], self : PExpr) : PExpr
    {
      def orderedNodes = dependencyGraph.ToArray();
      Array.Sort(orderedNodes, (l, r) => l.Order - r.Order);

      //Node.Visualize(nodesMap.Values, typeBuilder.Name);

      // Rendering code
      def result = SCG.List();
      result.Add(<[ _ = context ]>);

      foreach (node in orderedNodes)
      {
        | Assign    as a => 
          def code =
            if (a.DependendOn.Count > 0)
            {
              def makeCondition(node : Node) : PExpr
              {
                def makeDependentCheck(node : Node, properties : SCG.List[TExpr * DependentPropertyRef], visited : SCG.HashSet[Node]) : void
                {
                  unless (visited.Add(node))
                    return;

                  foreach (p in node.DependendOn)
                  {
                    makeDependentCheck(p, properties, visited);
                    unless (p is Node.DeclaredProp)
                      properties.Add(p.Obj, p.PropertyRef);
                  }
                }

                def properties = SCG.List();
                makeDependentCheck(node, properties, SCG.HashSet());
                GenerateHasValueCheck(properties)
              }
              <[
                if ($(makeCondition(a)))
                {
                  unless ($(GenerateHasValueCheck(a.Obj, a.PropertyRef)))
                  {
                    $(a.Debug ?? a.Expr : typed);
                    context.CalculatedCountInc();
                  }
                }
                else
                  context.DeferredCountInc();
              ]>
            }
            else
            {
              <[
                unless ($(GenerateHasValueCheck(a.Obj, a.PropertyRef)))
                {
                  $(a.Expr : typed);
                  context.CalculatedCountInc();
                }
              ]>
            };

          def propertyStage = a.PropertyRef.Symbol.Stage;
          def code =
            if (propertyStage > 0)
              <[ when (context.Stage >= $propertyStage) $code ]>
            else
              code;

          result.Add(code);

        | Use         => ()
        | DeclaredProp(s, p) =>
          when ((s.PropertyContainer : object == symbol && s.OverrideProperty.IsNone) || !s.PropertyContainer.HasEvaluations)
          {
            def propertyType = tb.GetMemType().TypeOfMember(p);
            when (propertyType.TryRequire(Environment.AstTypeVar))
              result.Add(<[ $(self).$(p.Name : global).EvalProperties(context) ]>);
          }
      }

      unless (symbol.IsAbstract)
      {
        foreach (ancestor when ancestor.HasEvaluations in symbol.GetAncestors())
          result.Add(<[ $(Environment.Project.GetNemerleType(ancestor) : typed).EvalProperties(this, context) ]>);

        when (symbol is AstSymbol(IsDeclaration = true))
        when (symbol.LookupProperty("Symbol") is VSome(symbolProperty is DependentPropertySymbol))
        {
          result.Add(<[
            when ($(GenerateHasValueCheck(<[ this ]>, dependentProperties[symbolProperty])))
              this.$(symbolProperty.Name : usesite).EvalProperties(context);
          ]>);
        }
      }

      <[ { ..$result } ]>
    }

    private static SortGraphAndReport(graphNodes : Seq[PropertyDependencyNode]) : void
    {
      def cycled = PropertyDependencyNode.Sort(graphNodes);
      when (cycled)
      {
        def cycledNodes = PropertyDependencyNode.FindCycling(graphNodes);
        foreach (cycledNode in cycledNodes)
          Message.Error(cycledNode.Location, "Is cycled.");
        otherwise assert(false, "Cycled nodes not found");
      }
    }
  }
}
