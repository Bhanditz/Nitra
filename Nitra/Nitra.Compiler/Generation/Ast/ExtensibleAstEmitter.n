using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ExtensibleAstEmitter : AstEmitter
  {
    private         _symbol            : ExtensibleAstSymbol;
    private mutable _baseTb            : TypeBuilder;
    private mutable _ambiguousTb       : TypeBuilder;
    private         _collectionEmitter : CollectionEmitter;

    public this(environment : EmitterEnvironment, symbol : ExtensibleAstSymbol)
    {
      base(environment, environment.NamespaceOfSymbol(symbol));
      this._symbol = symbol;
      this._collectionEmitter = CollectionEmitter(this, symbol);
    }

    public override DefineTypes() : void
    {
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        assert(_baseTb == null);

        def parentType = Environment.TypeCompiler.CompileParentType(_symbol);
        def baseTypes = SCG.List();
        baseTypes.Add(<[ Nitra.Declarations.AstBase[$(parentType : typed)] ]>);
        foreach (baseAst in _symbol.BaseAsts)
          baseTypes.Add(<[ $(Environment.GetAstType(baseAst) : typed) ]>);
        when (_symbol.IsDeclaration)
          baseTypes.Add(<[ $(Environment.DeclarationTypeVar : typed) ]>);

        _baseTb = NemerleEnv.Define(<[ decl:
          public abstract partial class $(_symbol.Name : usesite) : ..$baseTypes
          {
            protected this() { }
          }
        ]>);

        assert(_ambiguousTb == null);
        _ambiguousTb = DefineAmbiguousAst(_baseTb, parentType);

        _collectionEmitter.DefineTypes(_baseTb);
      })
    }

    public override DefineMembers() : void
    {
      assert(_baseTb != null);

      def implementSimpleProperty(name : string, propertyType : FixedType) : void
      {
        def backingFieldName = Util.tmpname(name);

        _baseTb.Define(<[ decl:
          private mutable $(backingFieldName : usesite) : $(propertyType : typed)
        ]>);
        _baseTb.Define(<[ decl:
          public virtual $(name : usesite) : $(propertyType : typed)
          {
            get { this.$(backingFieldName : usesite) }
            protected set { this.$(backingFieldName : usesite) = value }
          }
        ]>);

        _ambiguousTb.Define(<[ decl:
          public override $(name : usesite) : $(propertyType : typed)
          {
            get { this.Ambiguities[0].$(name : usesite) }
          }
        ]>);
      }

      def dependentProps = SCG.Dictionary();

      def defineSimpleProperty(propertySymbol : SimpleAstPropertySymbol) : void
      {
        def propertyType = Environment.TypeCompiler.CompileSimplePropertyType(propertySymbol);
        implementSimpleProperty(propertySymbol.Name, propertyType)
      }

      def defineDependentProperty(propertySymbol : DependentAstPropertySymbol) : void
      {
        def index = dependentProps.Count;
        def bit   = _baseTb.GetBitFieldManager().Allocate();
        assert(bit.Index == index);

        def propertyRef = DependentAstPropertyRef.Compiling(propertySymbol, index, bit);
        dependentProps.Add(propertySymbol, propertyRef);

        DefineDependentProperty(_baseTb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Virtual);
        DefineAmbiguousDependentProperty(_ambiguousTb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Override);
      }

      def defineProjectedProperty(propertySymbol : ProjectedAstPropertySymbol) : void
      {
        def propertyType = Environment.TypeCompiler.CompileProjectedPropertyType(propertySymbol);
        implementSimpleProperty(propertySymbol.Name, propertyType)
      }

      foreach (propertySymbol in _symbol.AllProperties)
      {
        | SimpleAstPropertySymbol    as s => defineSimpleProperty(s)
        | DependentAstPropertySymbol as s => defineDependentProperty(s)
        | ProjectedAstPropertySymbol as s => defineProjectedProperty(s)
        | _                                       => ()
      }

      DefineIsPropertyEvaluatedMethod(_baseTb, NemerleModifiers.Override);
      DefineDependentPropertiesEvaluation(_baseTb, _symbol);

      _collectionEmitter.DefineMembers(dependentProps);
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert(_baseTb != null);
      _baseTb.DefineNestedType(td);
    }

    public override Emit() : void
    {
      assert(_baseTb != null);
      _baseTb.Compile();

      assert(_ambiguousTb != null);
      _ambiguousTb.Compile();

      _collectionEmitter.Emit();
    }
  }
}
