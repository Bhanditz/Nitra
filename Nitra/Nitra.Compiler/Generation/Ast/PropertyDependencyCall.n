using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal variant PropertyDependencyCall : IPropertyDependencyNode
  {
                   public DeclaredIn    : PropertyContainerSymbol         { get; }
                   public Location      : Nemerle.Compiler.Location       { get; }
                   public NitraLocation : Location                        { get { (DeclaredIn.Node.Project :> NitraProject).MakeNitraLocation(Location) } }
    [RecordIgnore] public DependendOn   : HashSet[PropertyDependencyNode] { get; default HashSet(); }
                   public Path          : DependencyPath                  { get; }
                   public IsStaged      : bool                            { get { false } }
                   public Code          : PropertyDependencyCode          { get; }

    | Normal
    | StagedInit
    | StagedUse

    public CreateMethodName() : string
    {
      "Call-" + ManagerClass.Instance.GetNewId()
    }
  }
}
