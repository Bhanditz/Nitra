using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal variant PropertyDependencyCall : IPropertyDependencyNode
  {
    public DeclaredIn    : PropertyContainerSymbol;
    public Location      : Nemerle.Compiler.Location;
    public NitraLocation : Location { get { (DeclaredIn.Node.Project :> NitraProject).MakeNitraLocation(Location) } }
    [RecordIgnore] public DependendOn   : HashSet[PropertyDependencyNode] { get; default HashSet(); }
    public Code          : PropertyDependencyCode;

    | Normal
    | StagedInit { Path : DependencyPath; }
    | StagedUse  { Path : DependencyPath; }

    public CreateMethodName() : string
    {
      "Call-" + ManagerClass.Instance.GetNewId()
    }
  }
}
