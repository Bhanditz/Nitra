using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal variant PropertyDependencyCall : IPropertyDependencyNode
  {
                   public DeclaredIn    : PropertyContainerSymbol         { get; }
                   public Location      : Nemerle.Compiler.Location       { get; }
                   public NitraLocation : Location                        { get { (DeclaredIn.Node.Project :> NitraProject).MakeNitraLocation(Location) } }
    [RecordIgnore] public DependendOn   : HashSet[PropertyDependencyNode] { get; default HashSet(); }
                   public Path          : DependencyPath                  { get; }
                   public IsCollector   : bool                            { get { false } }
                   public Code          : PropertyDependencyCode          { get; }
    
    
    public override Equals(obj : object) : bool
    {
      if (obj is PropertyDependencyCall as other)
      {
        def loc1 = this.NitraLocation;
        def loc2 = other.NitraLocation;
        when (loc1.Span != loc2.Span)
          return false;
          
        //loc1.Source.File.FullName == loc2.Source.File.FullName
        this.Location.FileIndex == other.Location.FileIndex
      }
      else false
    }
    
    public override GetHashCode() : int { (this.Location.FileIndex << 16) ^ this.NitraLocation.Span.GetHashCode() }
    
    public override ToString() : string { NitraLocation.GetText() }

    | Normal
    | Collect
    | StagedUse

    public CreateMethodName() : string
    {
      "Call-" + ManagerClass.Instance.GetNewId()
    }
  }
}
