using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal variant DependentPropertyRef
  {
    | Reflected
    | Compiling
      {
        public Bit    : BitField;
      }

    public Symbol : DependentPropertySymbol;
    public Index  : int;
  }

  internal abstract partial class BaseAstEmitter
  {
    private enum NodeState : byte
    {
      | None
      | Cycling
      | Visited
    }
    
    [Record]
    private variant Node2
    {
      public Location : Nemerle.Compiler.Location;
      
      | AssignProp    { Path : list[string]; Expr : TExpr.Assign; }
      | UseProp       { Path : list[string]; IsDependent : bool; }

      public Order : int       { get { _order } }
      public State : NodeState { get { _state } }

      [RecordIgnore] mutable _state : NodeState;
      [RecordIgnore] mutable _order : int = -1;
      [RecordIgnore] public DependendOn : SCG.HashSet[Node2] = SCG.HashSet();

#pragma warning disable 10003

      public static Visualize(nodes : Seq[Node2], typeName : string) : void
      {
        _ = Sort(nodes);
      
        def name(node : Node2) { node._order }
        def label(node : Node2) { X.DotEscape(node.ToString()) }
      
        def edges = SCG.List();
      
        foreach (node in nodes.OrderBy(n => n.Order))
          foreach (to in node.DependendOn.OrderBy(n => n.Order))
            edges.Add($<#$(name(node)) -> $(name(to))#>);
        
        def color(node : Node2)
        {
          | AssignProp   => "blue"
          | UseProp as u => if (u.IsDependent) "black" else "red"
        }
        def content = $<#
          digraph RecoveryParser
          {
            rankdir=LR;
            compound=true;
            label="The properties dependency graph for $typeName";

            ..$(nodes; "\r\n            "; n => $<#$(name(n)) [label="$(label(n))" color=$(color(n)) shape=box]#>)

            ..$(edges; "\r\n            ")
          }
        #>;

        X.ExecuteDot(content);
      }

#pragma warning restore 10003

      public static Sort(graphNodes : Seq[Node2]) : bool
      {
        foreach (node in graphNodes)
          node._state = NodeState.None;
        otherwise
          return false; // graph is empty

        mutable index = 0;
        mutable cycling = false;

        foreach (node in GetRoots(graphNodes))
          cycling |= node.Sort(ref index);
        otherwise
        {
          foreach (node in graphNodes)
            node._state = NodeState.Cycling;
          return true;
        }

        cycling
      }

      /// Return: true - cycling; false - OK
      public Sort(index : ref int) : bool
      {
        mutable cycling = false;
        this._state = NodeState.Cycling;

        foreach (to in DependendOn)
        {
          if (to._state == NodeState.None)
            when (to.Sort(ref index))
              cycling |= true;
          else when (to._state == NodeState.Cycling)
            cycling |= true;
        }

        if (cycling)
        {
          this._order = -1;
          true
        }
        else
        {
          this._state = NodeState.Visited;
          this._order = index;
          index++;
          false
        }
      }

      public static GetRoots(graphNodes : Seq[Node2]) : Seq[Node2]
      {
        def hasEdgeTo = SCG.HashSet();

        foreach (node in graphNodes)
          hasEdgeTo.UnionWith(node.DependendOn);

        foreach (node in graphNodes)
          unless (hasEdgeTo.Contains(node))
            yield node;
      }

      public static FindCycling(graphNodes : Seq[Node2]) : Seq[Node2]
      {
        foreach (node in graphNodes)
          when (node._state == NodeState.Cycling)
            yield node;
      }

      public override ToString() : string
      {
        _order + ": " +
        match (this)
        {
          | AssignProp    as x => 
            def loc = x.Expr.source.Location;
            def expr =
              if (loc.Line == loc.EndLine && File.Exists(loc.File))
              {
                def lines = File.ReadAllLines(loc.File);
                def line = lines[loc.Line - 1];
                line.Substring(loc.Column - 1, loc.EndColumn - loc.Column)
              }
              else
                x.Expr.source.ToString();
                  
            $<#..$(x.Path; ".") = $expr#>
              
          | UseProp       as x => x.Path.ToString(".")
        }
      }
    }

    private variant Node
    {
      | AssignProp    { Expr : TExpr.Assign; Debug : TExpr; Prop : TExpr.PropertyMember; new PropertyRef : DependentPropertyRef; }
      | UseProp       { Expr : TExpr.PropertyMember;                                     new PropertyRef : DependentPropertyRef; }
      | DeclaredProp  { Symbol : PropertySymbol; Prop : IProperty; }

      public Order : int       { get { _order } }
      public State : NodeState { get { _state } }
      public PropertyRef : DependentPropertyRef
      {
        get
        {
          match (this)
          {
            | AssignProp as n => n.PropertyRef
            | UseProp    as n => n.PropertyRef
            | DeclaredProp    => assert3(false)
          }
        }
      }

      mutable _state : NodeState;
      mutable _order : int = -1;

      public DependendOn : SCG.HashSet[Node] = SCG.HashSet();

      public Obj : TExpr
      {
        get
        {
          match (this)
          {
            | AssignProp    as x => x.Prop.obj
            | UseProp       as x => x.Expr.obj
            | DeclaredProp      => assert3(false);
          }
        }
      }

      public Location : Nemerle.Compiler.Location
      {
        get
        {
          match (this)
          {
            | AssignProp    as x => x.Expr.Location
            | UseProp       as x => x.Expr.Location
            | DeclaredProp as x => x.Location
          }
        }
      }

#pragma warning disable 10003

      public static Visualize(nodes : Seq[Node], typeName : string) : void
      {
        _ = Sort(nodes);
      
        def name(node : Node) { node._order }
        def label(node : Node) { X.DotEscape(node.ToString()) }
      
        def edges = SCG.List();
      
        foreach (node in nodes.OrderBy(n => n.Order))
          foreach (to in node.DependendOn.OrderBy(n => n.Order))
            edges.Add($<#$(name(node)) -> $(name(to))#>);
        
        def color(node : Node)
        {
          | AssignProp   => "blue"
          | UseProp      => "black"
          | DeclaredProp => "red"
        }
        def content = $<#
          digraph RecoveryParser
          {
            rankdir=LR;
            compound=true;
            label="The properties dependency graph for $typeName";

            ..$(nodes; "\r\n            "; n => $<#$(name(n)) [label="$(label(n))" color=$(color(n)) shape=box]#>)

            ..$(edges; "\r\n            ")
          }
        #>;

        X.ExecuteDot(content);
      }

#pragma warning restore 10003

      public static Sort(graphNodes : Seq[Node]) : bool
      {
        foreach (node in graphNodes)
          node._state = NodeState.None;
        otherwise
          return false; // graph is empty

        mutable index = 0;
        mutable cycling = false;

        foreach (node in GetRoots(graphNodes))
          cycling |= node.Sort(ref index);
        otherwise
        {
          foreach (node in graphNodes)
            node._state = NodeState.Cycling;
          return true;
        }

        cycling
      }

      /// Return: true - cycling; false - OK
      public Sort(index : ref int) : bool
      {
        mutable cycling = false;
        this._state = NodeState.Cycling;

        foreach (to in DependendOn)
        {
          if (to._state == NodeState.None)
            when (to.Sort(ref index))
              cycling |= true;
          else when (to._state == NodeState.Cycling)
            cycling |= true;
        }

        if (cycling)
        {
          this._order = -1;
          true
        }
        else
        {
          this._state = NodeState.Visited;
          this._order = index;
          index++;
          false
        }
      }

      public static GetRoots(graphNodes : Seq[Node]) : Seq[Node]
      {
        def hasEdgeTo = SCG.HashSet();

        foreach (node in graphNodes)
          hasEdgeTo.UnionWith(node.DependendOn);

        foreach (node in graphNodes)
          unless (hasEdgeTo.Contains(node))
            yield node;
      }

      public static FindCycling(graphNodes : Seq[Node]) : Seq[Node]
      {
        foreach (node in graphNodes)
          when (node._state == NodeState.Cycling)
            yield node;
      }

      public override ToString() : string
      {
        _order + ": " +
        match (this)
        {
          | AssignProp    as x => x.Expr.ToString()
          | UseProp       as x => x.Expr.ToString()
          | DeclaredProp as x => x.Prop.ToString()
        }
      }
    }
  }
}
