using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class SimpleRuleAstEmitter : RuleAstEmitter[SimpleRuleSymbol]
  {
    [RecordIgnore] private mutable _baseTb        : TypeBuilder;
    [RecordIgnore] private mutable _astTb         : TypeBuilder;
    [RecordIgnore] private mutable _parsedAstTb   : TypeBuilder;
    [RecordIgnore] private mutable _chemicalAstTb : TypeBuilder;
    [RecordIgnore] private mutable _missingTb     : TypeBuilder;
    [RecordIgnore] private mutable _ambiguousTb   : TypeBuilder;

    public override IsTypesDefined : bool { get { _baseTb != null } }

    [Memoize]
    public override CreateConstant(name : string, value : int) : string
    {
      assert(IsTypesDefined);
      Util.CreateConstant(_parsedAstTb, name, value)
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert(IsTypesDefined);
      _baseTb.DefineNestedType(td);
    }

    public override Emit() : void
    {
      assert(IsTypesDefined);

      _baseTb.Compile();
      _astTb.Compile();
      _parsedAstTb.Compile();
      _chemicalAstTb.Compile();
      _missingTb.Compile();
      _ambiguousTb.Compile();
    }

    public override DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(!IsTypesDefined);
    }

    public override DefineMembers() : void
    {
      assert(IsTypesDefined);

      DefineBaseAstCreateMethod(_baseTb, _ambiguousTb);
      DefineBaseGetDeclarationMethod(_baseTb);
      DefineBaseAstRuleMethods(_baseTb);

      def fields = GetFields();
      DefineAstCtorAndFields(fields, _astTb);
      DefineParsedAstCtorAndFields(fields, _parsedAstTb);
      DefineChemicalAstCtorAndFields(fields, _chemicalAstTb, _baseTb, _astTb);
      DefineAstApplyMethod(fields, _astTb, _chemicalAstTb, _parsedAstTb);
      DefineAstGetDeclarationMethod(_astTb);
      DefineAstPrettyPrint(_astTb);
      DefineAstRuleMethods(_astTb);
      DefineReadSequenceMethod(_parsedAstTb);

      DefineMissingGetDeclarationMethod(_missingTb);
      DefineMissingPrettyPrint(_missingTb);
      DefineMissingRuleMethods(_missingTb);

      DefineAmbiguousGetDeclarationMethod(_ambiguousTb);
      DefineAmbiguousPrettyPrint(_ambiguousTb);
      DefineAmbiguousRuleMethods(_ambiguousTb);
    }
  }
}
