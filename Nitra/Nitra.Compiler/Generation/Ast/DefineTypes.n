using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    public DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol =>
          CreateBaseAstTypeBuilder(defineType);
          CreateMissingAstTypeBuilder();
          CreateExtensibleAmbiguousAstTypeBuilder();

        | SimpleRuleSymbol =>
          CreateBaseAstTypeBuilder(defineType);
          CreateMissingAstTypeBuilder();
          CreateSimpleAstTypeBuilders();
          CreateSimpleAmbiguousAstTypeBuilder();

        | ExtensionRuleSymbol as ruleSymbol =>
          CreateExtensionAstTypeBuilders(defineType, ruleSymbol.BaseRule.Value);

        | _ => assert(false)
      }
    }

    private CreateBaseAstTypeBuilder(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(_baseTb == null);
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol
        | SimpleRuleSymbol     =>
          _baseTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
            defineType(<[decl:
            public new abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.AstTypeVar : typed)
            {
              public override RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
            }
          ]>))

        | _ => assert2(false); assert(false)
      }
    }

    private CreateSimpleAstTypeBuilders() : void
    {
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public new abstract partial class Ast : $(_baseTb.GetMemType() : typed)
        {
        }
      ]>));

      assert(_parsedAstTb == null);
      _parsedAstTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        private new sealed partial class __Parsed__Ast : $(_astTb.GetMemType() : typed), Nitra.Internal.IAstSequenceLoader[Nitra.NSpan], Nitra.Internal.IAstSequenceLoader[Nitra.Ast]
        {
        }
      ]>));

      assert(_chemicalAstTb == null);
      _chemicalAstTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        private new sealed partial class __Chemical__Ast : $(_astTb.GetMemType() : typed)
        {
        }
      ]>));
    }

    private CreateExtensionAstTypeBuilders(defineType : ClassMember.TypeDeclaration -> TypeBuilder, baseRule : ExtensibleRuleSymbol) : void
    {
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        defineType(<[decl:
        public new abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.GetAstType(baseRule) : typed)
        {
          public override RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
        }
      ]>));

      assert(_parsedAstTb == null);
      _parsedAstTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        defineType(<[decl:
        private new sealed partial class $("__Parsed__" + this.RuleSymbol.Name : usesite) : $(_astTb.GetMemType() : typed), Nitra.Internal.IAstSequenceLoader[Nitra.NSpan], Nitra.Internal.IAstSequenceLoader[Nitra.Ast]
        {
        }
      ]>));

      assert(_chemicalAstTb == null);
      _chemicalAstTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        defineType(<[decl:
        private new sealed partial class $("__Chemical__" + this.RuleSymbol.Name : usesite) : $(_astTb.GetMemType() : typed)
        {
        }
      ]>));
    }

    private CreateMissingAstTypeBuilder() : void
    {
      assert(_missingTb == null);
      _missingTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public new sealed partial class MissingAst : $(_baseTb.GetMemType() : typed)
        {
          public this(sourceProvider : Nitra.Runtime.ISourceSnapshotProvider, pos : int)
          {
            this.sourceProvider = sourceProvider;
            this.pos            = pos;
          }

          private sourceProvider : Nitra.Runtime.ISourceSnapshotProvider;
          private pos            : int;

          public override Location : Nitra.Location { get { Nitra.Location(this.sourceProvider.GetSource(), this.pos, this.pos) } }
        }
      ]>));
    }

    private CreateSimpleAmbiguousAstTypeBuilder() : void
    {
      assert(_baseTb != null);
      assert(_astTb != null);
      assert(_ambiguousTb == null);
      _ambiguousTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public new sealed partial class AmbiguousAst : $(_baseTb.GetMemType() : typed), Nitra.IAmbiguousAst
        {
          public this(ambiguities : array[$(_astTb.GetMemType() : typed)])
          {
            this.Ambiguities = ambiguities;
          }

          public override Location       : Nitra.Location                              { get { Ambiguities[0].Location } }
          public          Ambiguities    : array[$(_astTb.GetMemType() : typed)]       { get; }
          public          AmbiguityType  : AstAmbiguityType                            { get Nitra.AstAmbiguityType.Recovery }
        }
      ]>));
    }

    private CreateExtensibleAmbiguousAstTypeBuilder() : void
    {
      assert(_baseTb != null);
      assert(_ambiguousTb == null);
      _ambiguousTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public new sealed partial class AmbiguousAst : $(_baseTb.GetMemType() : typed), Nitra.IAmbiguousAst
        {
          public this(ambiguities : array[$(_baseTb.GetMemType() : typed)], ambiguityType : Nitra.AstAmbiguityType)
          {
            this.Ambiguities = ambiguities;
            this.AmbiguityType = ambiguityType;
          }

          public override Location       : Nitra.Location                              { get { Ambiguities[0].Location } }
          public          Ambiguities    : array[$(_baseTb.GetMemType() : typed)]      { get; }
          public          AmbiguityType  : Nitra.AstAmbiguityType                      { get; }
        }
      ]>));
    }
  }
}
