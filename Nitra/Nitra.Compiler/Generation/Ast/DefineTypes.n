using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    public DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol =>
          CreateBaseAstTypeBuilder(defineType);
          CreateMissingAstTypeBuilder();
          CreateAmbiguousAstTypeBuilder();
          CreateSpliceAstTypeBuilder();

        | SimpleRuleSymbol =>
          CreateBaseAstTypeBuilder(defineType);
          CreateMissingAstTypeBuilder();
          CreateSpliceAstTypeBuilder();
          CreateSimpleAstTypeBuilder();

        | ExtensionRuleSymbol as ruleSymbol =>
          match (ruleSymbol.Name)
          {
            | "F" => ()
            | "D" => ()
            | _   => ()
          }
          CreateExtensionAstTypeBuilder(defineType, ruleSymbol.BaseRule.Value);

        | _ => assert(false)
      }
    }

    private CreateBaseAstTypeBuilder(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(_baseTb == null);
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol
        | SimpleRuleSymbol     =>
          match (this.RuleSymbol.Name)
          {
            | "F" => ()
            | "D" => ()
            | _   => ()
          }
        
          _baseTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
            defineType(<[decl:
            public abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.AstTypeVar : typed)
            {
              public this(location : Nitra.Location)
              {
                base(location)
              }
            }
          ]>))

        | _ => assert2(false); assert(false)
      }
    }

    private CreateSimpleAstTypeBuilder() : void
    {
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class Ast : $(_baseTb.GetMemType() : typed)
        {
        }
      ]>));
    }

    private CreateExtensionAstTypeBuilder(defineType : ClassMember.TypeDeclaration -> TypeBuilder, baseRule : ExtensibleRuleSymbol) : void
    {
      match (this.RuleSymbol.Name)
      {
        | "F" => ()
        | "D" => ()
        | _   => ()
      }
          
      assert(_astTb == null);
      _astTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        defineType(<[decl:
        public partial new class $(this.RuleSymbol.Name : usesite) : $(Environment.GetAstType(baseRule) : typed)
        {
        }
      ]>));
    }

    private CreateMissingAstTypeBuilder() : void
    {
      assert(_missingTb == null);
      _missingTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class MissingAst : $(_baseTb.GetMemType() : typed)
        {
          public this(location : Nitra.Location)
          {
            base(location)
          }
        }
      ]>));
    }

    private CreateAmbiguousAstTypeBuilder() : void
    {
      assert(_ambiguousTb == null);
      _ambiguousTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class AmbiguousAst : $(_baseTb.GetMemType() : typed), Nitra.IAmbiguousAst
        {
          public this(location : Nitra.Location, smbiguities : array[$(_baseTb.GetMemType() : typed)])
          {
            base(location);
            Ambiguities = smbiguities;
          }

          public Ambiguities     : array[$(_baseTb.GetMemType() : typed)] { get; }
          public RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
        }
      ]>));
    }

    private CreateSpliceAstTypeBuilder() : void
    {
      assert(_spliceTb == null);
      _spliceTb = Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
        _baseTb.DefineNestedType(<[decl:
        public partial new class SpliceAst : $(_baseTb.GetMemType() : typed)
        {
          public this(location : Nitra.Location)
          {
            base(location)
          }
        }
      ]>));
    }
  }
}
