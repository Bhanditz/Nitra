using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    private DefineBaseAstCreateMethod() : void
    {
      when (this.RuleSymbol is SimpleRuleSymbol)
      {
        _baseTb.DefineConditional(<[ decl:
          [Nemerle.Diagnostics.CompileStatistic("Ast")]
          public static Create(pos : ref int, parseResult : Nitra.ParseResult) : $(_baseTb.GetMemType() : typed)
          {
            def ruleParser = parseResult.RuleParser.Grammar.GetSimpleRuleParser($(this.RuleSymbol.GetRuleDescriptorRef()));
            def astPtr = parseResult.TryGetAst(pos, ruleParser.RuleId);
            if (astPtr > 0)
              $(_baseTb.GetMemType() : typed).__Parsed__Ast(ref pos, astPtr, parseResult)
            else
              $(_baseTb.GetMemType() : typed).MissingAst(parseResult, pos)
          }
        ]>);
      }
      when (this.RuleSymbol.Options.IsStart)
      {
        match (this.RuleSymbol)
        {
          | SimpleRuleSymbol =>
            _baseTb.DefineConditional(<[ decl:
              [Nemerle.Diagnostics.CompileStatistic("Ast")]
              public static Create(parseResult : Nitra.ParseResult) : $(_baseTb.GetMemType() : typed)
              {
                mutable pos = parseResult.StartPos;
                Create(ref pos, parseResult);
              }
            ]>);

          | ExtensibleRuleSymbol =>
            _baseTb.DefineConditional(<[ decl:
              [Nemerle.Diagnostics.CompileStatistic("Ast")]
              public static Create(parseResult : Nitra.ParseResult) : $(_baseTb.GetMemType() : typed)
              {
                mutable pos = parseResult.StartPos;
                Nitra.Internal.ExtensibleRuleAstConstructor.Create(ref pos, parseResult, 0, $(this.RuleSymbol.GetRuleDescriptorRef()), Nitra.Internal.DefaultExtensibleRuleAstFactory.Instance);
              }
            ]>);

          | _ => assert2(false);
        }
      }
    }
  }
}
