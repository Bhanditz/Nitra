using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SymbolEmitter
  {
    private         _environment : EmitterEnvironment;
    private         _symbol      : SymbolSymbol;
    private mutable _tb          : TypeBuilder;

    public this(environment : EmitterEnvironment, symbol : SymbolSymbol)
    {
      _environment = environment;
      _symbol      = symbol;
    }

    public DefineTypes() : void
    {
      assert(_tb : object == null);

      def nemerleEnv = _environment.NamespaceOfSymbol(_symbol);
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        match(_symbol)
        {
          | ParsedSymbolSymbol.Abstract   =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial interface $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.ISymbol2 ]>))
              {
              }
            ]>);

          | ParsedSymbolSymbol.Simple     =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.DeclaredSymbol ]>))
              {
              }
            ]>);

          | ParsedSymbolSymbol.Extensible =>
            _tb = nemerleEnv.Define(<[ decl:
              public abstract partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.DeclaredSymbol ]>))
              {
              }
            ]>);

          | ParsedSymbolSymbol.Extension  =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(null))
              {
              }
            ]>);

          | _ => assert(false)
        }
      });
    }

    public DefineMembers() : void
    {
      assert(_tb : object != null);
    }

    public Emit() : void
    {
      assert(_tb : object != null);

      _tb.Compile();
    }

    private MakeSymbolClassBaseTypes(baseType : PExpr) : SCG.List[PExpr]
    {
      def baseTypes = SCG.List();
      when (baseType : object != null)
        baseTypes.Add(baseType);
      foreach (baseSymbol in _symbol.BaseSymbols)
        baseTypes.Add(<[ $(_environment.GetSymbolClass(baseSymbol) : typed) ]>);
      baseTypes
    }
  }
}
