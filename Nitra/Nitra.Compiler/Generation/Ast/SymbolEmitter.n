using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SymbolEmitter : BaseAstEmitter
  {
    public override Environment  : EmitterEnvironment { get; }
    public override TypeCompiler : NTypeCompiler      { get { Environment.DefaultTypeCompiler } }
    private         _symbol      : SymbolSymbol;
    private mutable _tb          : TypeBuilder;

    public this(environment : EmitterEnvironment, symbol : SymbolSymbol)
    {
      Environment = environment;
      _symbol     = symbol;
    }

    public DefineTypes() : void
    {
      assert(_tb : object == null);

      def nemerleEnv = Environment.NamespaceOfSymbol(_symbol);
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        match(_symbol)
        {
          | ParsedAbstractSymbolSymbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial interface $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.ISymbol2 ]>))
              {
              }
            ]>);

          | ParsedSimpleSymbolSymbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.DeclaredSymbol ]>))
              {
              }
            ]>);

          | ParsedExtensibleSymbolSymbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public abstract partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.DeclaredSymbol ]>))
              {
              }
            ]>);

          | ParsedExtensionSymbolSymbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(null))
              {
              }
            ]>);

          | _ => assert(false)
        }
      });
    }

    public DefineMembers() : void
    {
      assert(_tb : object != null);
    }

    public Emit() : void
    {
      assert(_tb : object != null);

      def dependentProps = SCG.Dictionary();

      match(_symbol)
      {
        | ParsedAbstractSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              def propertyRef = DependentPropertyRef.Reflected(propertySymbol, -1);
              dependentProps.Add(propertySymbol, propertyRef);

              when (propertySymbol.PropertyContainer == _symbol)
                DefineInterfaceDependentProperty(propertySymbol, _tb, propertySymbol.OverrideProperty.HasValue);

            | _ => assert(false)
          }

        | ParsedSimpleSymbolSymbol
        | ParsedExtensibleSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              def index = dependentProps.Count;
              def bit   = _tb.GetBitFieldManager().Allocate();
              assert(bit.Index == index);

              def propertyRef = DependentPropertyRef.Compiling(propertySymbol, index, bit);
              dependentProps.Add(propertySymbol, propertyRef);

              DefineDependentProperty(_tb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Virtual);

            | _ => assert(false)
          }

          DefineIsPropertyEvaluatedMethod(_tb, NemerleModifiers.Public | NemerleModifiers.Override);
          DefineResetPropertiesMethod(_tb, null);
          DefineIsAllPropertiesEvaluatedProperty(_tb, null);
          DefineDependentPropertiesEvaluation(_tb, _symbol);

        | ParsedExtensionSymbolSymbol =>
          mutable inheritedFieldsCount;

          def baseSymbol = _symbol.AllBaseSymbols.First(s => s.IsExtensible);
          def needsImplmentation(property : PropertySymbol) : bool
          {
            def propertyContainer = property.PropertyContainer;
            _symbol : object == propertyContainer || !(baseSymbol : object == propertyContainer || baseSymbol.AllBaseSymbols.Contains(propertyContainer))
          }

          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              def index = dependentProps.Count;

              if (needsImplmentation(propertySymbol))
              {
                if (propertySymbol.OverrideProperty.HasValue)
                {
                  inheritedFieldsCount += 1;

                  def propertyRef = DependentPropertyRef.Reflected(propertySymbol, index);
                  dependentProps.Add(propertySymbol, propertyRef);

                  //DefineDependentPropertyOverride(propertyRef);
                }
                else
                {
                  def bit         = _tb.GetBitFieldManager().Allocate();
                  def propertyRef = DependentPropertyRef.Compiling(propertySymbol, index, bit);
                  DefineDependentProperty(_tb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Virtual);

                  dependentProps.Add(propertySymbol, propertyRef);
                }
              }
              else
              {
                inheritedFieldsCount += 1;

                def propertyRef = DependentPropertyRef.Reflected(propertySymbol, index);
                dependentProps.Add(propertySymbol, propertyRef);
              }

            | _ => assert(false)
          }

          DefineIsPropertyEvaluatedMethod(_tb, inheritedFieldsCount);
          DefineResetPropertiesMethod(_tb, null);
          DefineIsAllPropertiesEvaluatedProperty(_tb, null);
          DefineDependentPropertiesEvaluation(_tb, _symbol, CallBaseEvalProperties);

        | _ => assert(false)
      }

      _tb.Compile();
    }

    private MakeSymbolClassBaseTypes(baseType : PExpr) : SCG.List[PExpr]
    {
      def baseTypes = SCG.List();
      when (baseType : object != null)
        baseTypes.Add(baseType);
      foreach (baseSymbol in _symbol.BaseSymbols)
        baseTypes.Add(<[ $(Environment.GetSymbolClass(baseSymbol) : typed) ]>);
      baseTypes
    }
  }
}
