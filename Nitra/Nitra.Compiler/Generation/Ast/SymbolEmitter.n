using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SymbolEmitter : BaseAstEmitter
  {
    public override Environment  : EmitterEnvironment { get; }
    public override TypeCompiler : NTypeCompiler      { get { Environment.DefaultTypeCompiler } }
    private         _symbol      : SymbolSymbol;
    private mutable _tb          : TypeBuilder;

    public this(environment : EmitterEnvironment, symbol : SymbolSymbol)
    {
      Environment = environment;
      _symbol     = symbol;
    }

    public DefineTypes() : void
    {
      assert(_tb : object == null);

      def nemerleEnv = Environment.NamespaceOfSymbol(_symbol);
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        def astType = Environment.GetAstType(_symbol.Declaration);
        match(_symbol)
        {
          | ParsedAbstractSymbolSymbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial interface $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.ISymbol2 ]>))
              {
                new Declarations : System.Collections.Generic.IEnumerable[$(astType : typed)] { get; }
              }
            ]>);

          | ParsedSimpleSymbolSymbol as symbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes(<[ Nitra.Runtime.Binding.DeclaredSymbol ]>))
              {
                public this()
                {
                  _isNameValid  = false;
                  _declarations = [];
                }

                public override Name         : string { get { Nitra.Runtime.Binding.SymbolUtils.GetSymbolName(_isNameValid, _declarations) } }
                public override IsNameValid  : bool   { get { _isNameValid } }

                private mutable _isNameValid  : bool;
                private mutable _declarations : list[$(astType : typed)];

                public override GetDeclarationsUntyped() : System.Collections.Generic.IEnumerable[Nitra.Runtime.Binding.Declaration]
                {
                  _declarations
                }

                public Declarations : System.Collections.Generic.IEnumerable[$(astType : typed)]
                {
                  get { _declarations }
                }

                protected sealed override AddDeclaration(newDeclaration : Nitra.Runtime.Binding.Declaration) : void
                {
                  Nitra.Runtime.Binding.SymbolUtils.AddDeclaration(newDeclaration :> $(astType : typed), ref _isNameValid, ref _declarations)
                }
              }
            ]>);

            when (symbol.KindExpr is Some(expr))
              _tb.Define(<[ decl: public override Kind : string { get { $expr } } ]>);

            when (symbol.SpanClassExpr is Some(expr))
              _tb.Define(<[ decl: public override SpanClass : string { get { $expr } } ]>);

            when (symbol.FullNameExpr is Some(expr))
              _tb.Define(<[ decl: public override FullName : string { get { $expr } } ]>);

          | _ => assert(false)
        }
      });
    }

    public DefineMembers() : void
    {
      assert(_tb : object != null);
    }

    public Emit() : void
    {
      assert(_tb : object != null);

      match(_symbol)
      {
        | ParsedAbstractSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              when (propertySymbol.PropertyContainer == _symbol)
                DefineInterfaceDependentProperty(propertySymbol, _tb, propertySymbol.OverrideProperty.HasValue);

            | _ => assert(false)
          }
          DefineDependentPropertiesInheritableEvaluation(_tb, _symbol);

        | ParsedSimpleSymbolSymbol =>
          def dependentPropBits   = SCG.Dictionary();

          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              def index = dependentPropBits.Count;
              def bit   = _tb.GetBitFieldManager().Allocate();
              assert(bit.Index == index);

              def propertyRef = DependentPropertyRef.Compiling(propertySymbol, index, bit);
              dependentPropBits.Add(propertySymbol, bit);

              DefineDependentProperty(_tb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Virtual);

            | _ => assert(false)
          }

          DefineDependentPropertiesSealedEvaluation(_tb, _symbol, dependentPropBits, SCG.Dictionary());
          DefinePropertiesEvalState(_tb, null);
          DefineResetPropertiesMethod(_tb, null);
          DefineIsAllPropertiesEvaluatedProperty(_tb, null);

        | _ => assert(false)
      }

      _tb.Compile();
    }

    private MakeSymbolClassBaseTypes(baseType : PExpr) : SCG.List[PExpr]
    {
      def baseTypes = SCG.List();
      baseTypes.Add(baseType);
      foreach (baseSymbol in _symbol.Parents)
        baseTypes.Add(<[ $(Environment.GetSymbolClass(baseSymbol) : typed) ]>);
      baseTypes
    }
  }
}
