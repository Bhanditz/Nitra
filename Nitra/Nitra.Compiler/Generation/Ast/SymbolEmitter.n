using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SymbolEmitter : BaseAstEmitter
  {
    public override Environment  : EmitterEnvironment { get; }
    public override TypeCompiler : NTypeCompiler      { get { Environment.DefaultTypeCompiler } }
    private         _symbol      : SymbolSymbol;
    private mutable _tb          : TypeBuilder;
    private         _serializationEmitter : BinarySerializationEmitter;

    public this(environment : EmitterEnvironment, symbol : SymbolSymbol, serializationEmitter : BinarySerializationEmitter)
    {
      Environment           = environment;
      _symbol               = symbol;
      _serializationEmitter = serializationEmitter;
    }

    public DefineTypes() : void
    {
      assert(_tb : object == null);

      def nemerleEnv = Environment.NamespaceOfSymbol(_symbol);
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        def astType = Environment.GetAstType(_symbol.Declaration);
        match(_symbol)
        {
          | ParsedAbstractSymbolSymbol =>
            _tb = nemerleEnv.Define(<[ decl:
              public partial interface $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes())
              {
                new Declarations : System.Collections.Generic.IEnumerable[$(astType : typed)] { get; }
              }
            ]>);

          | ParsedSimpleSymbolSymbol as symbol =>
            def canMergeExpr       = if (symbol.CanMergeExpr       is Some(expr)) expr else <[ _ = candidate; false ]>;
            def isSameIdentityExpr = if (symbol.IsSameIdentityExpr is Some(expr)) expr else <[ _ = candidate; true ]>;
            def afterStageExpr     = if (symbol.AfterStageExpr     is Some(expr)) expr else <[ _ = stage ]>;

            _tb = nemerleEnv.Define(<[ decl:
              public partial class $(_symbol.Name : usesite) : ..$(MakeSymbolClassBaseTypes())
              {
                public this()
                {
                  _id               = Nitra.Runtime.Binding.SymbolUtils.CreateSymbolId();
                  _isNameValid      = false;
                  _declarationStore = null;
                }

                public Id           : int    { get { _id } }
                public Name         : string { get { Nitra.Runtime.Binding.SymbolUtils.GetSymbolName.[$(astType : typed)](_isNameValid, _declarationStore) } }
                public IsNameValid  : bool   { get { _isNameValid } }

                private         _id               : int;
                private mutable _isNameValid      : bool;
                private mutable _declarationStore : object;

                public GetDeclarationsUntyped() : System.Collections.Generic.IEnumerable[Nitra.Runtime.Binding.Declaration]
                {
                  Nitra.Runtime.Binding.SymbolUtils.GetDeclarationsUntyped.[$(astType : typed)](_declarationStore)
                }

                public Declarations : System.Collections.Generic.IEnumerable[$(astType : typed)]
                {
                  get { Nitra.Runtime.Binding.SymbolUtils.GetDeclarations.[$(astType : typed)](_declarationStore) }
                }

                public AddDeclaration(newDeclaration : Nitra.Runtime.Binding.Declaration) : void
                {
                  Nitra.Runtime.Binding.SymbolUtils.AddDeclaration.[$(astType : typed)](newDeclaration, ref _isNameValid, ref _declarationStore)
                }

                public CanMerge($("candidate": global) : Nitra.Runtime.Binding.Declaration) : bool
                {
                  $canMergeExpr
                }

                public IsSameIdentity($("candidate": global) : Nitra.Runtime.Binding.Declaration) : bool
                {
                  $isSameIdentityExpr
                }

                public AfterStage($("stage": global) : int) : void
                {
                  $afterStageExpr
                }

                public ToXaml() : string
                {
                  Nitra.Runtime.Binding.SymbolUtils.ToXaml(this)
                }

                public override ToString() : string
                {
                  Nitra.Runtime.Binding.SymbolUtils.ToString(this)
                }
              }
            ]>);

          | _ => assert(false)
        }
      });
    }

    private _dependentPropBits : SCG.Dictionary[DependentPropertySymbol, BitField] = SCG.Dictionary();

    public DefineMembers() : void
    {
      assert(_tb : object != null);

      match(_symbol)
      {
        | ParsedAbstractSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              when (propertySymbol.PropertyContainer == _symbol)
                DefineInterfaceDependentProperty(propertySymbol, _tb, propertySymbol.OverrideProperty.HasValue);

            | _ => assert(false)
          }

        | ParsedSimpleSymbolSymbol =>
          foreach (s in _symbol.AllProperties)
          {
            | DependentPropertySymbol as propertySymbol =>
              def bit    = _tb.GetBitFieldManager().Allocate();
              def mask   = if (bit.IsFromFirstField) bit.Mask else 0;
              def bitKey = if (propertySymbol.OverrideProperty is SymbolRef.Some(DependentPropertySymbol as originalPropertySymbol)) originalPropertySymbol else propertySymbol;
              _dependentPropBits.Add(bitKey, bit);

              DefineDependentProperty(_tb, propertySymbol, bit, mask, NemerleModifiers.Public | NemerleModifiers.Virtual);

            | _ => assert(false)
          }

        | _ => assert(false)
      }
    }

    public Emit() : void
    {
      assert(_tb : object != null);

      match (_symbol)
      {
        | ParsedAbstractSymbolSymbol =>
          DefineDependentPropertiesInheritableEvaluation(_tb, _symbol);

        | ParsedSimpleSymbolSymbol =>
          DefineDependentPropertiesSealedEvaluation(_tb, _symbol, _dependentPropBits, SCG.Dictionary());
          DefinePropertiesEvalState(_tb, null);
          DefineResetPropertiesMethod(_tb, null);
          DefineIsAllPropertiesEvaluatedProperty(_tb, null);

          def serializationMembers = _tb.GetMembers().Filter(fun (m)
          {
            | IProperty as p =>
              match (Environment.LookupPropertySymbol(p))
              {
                | DeclaredProperty(DependentPropertySymbol as dependentProperty, _) => _dependentPropBits.ContainsKey(dependentProperty)
                | _ => false
              }

            | _ => false
          });

          def symbolType = _tb.GetMemType();

          def serializeBody = _serializationEmitter.MakeMembersSerializationCode(symbolType, serializationMembers, <[ this ]>, [ <[ metadataWriter ]> ]);
          _tb.Define(<[ decl:
            public Serialize(writer : System.IO.BinaryWriter, metadataWriter : Nitra.Serialization2.MetadataWriter) : void
            {
              unchecked
              {
                when (metadataWriter.BeginWriteSymbol(this, writer))
                {
                  $serializeBody;
                  writer.Write($(Nitra.Serialization.TypeTag.Empty :> byte));
                }
              }
            }
          ]>);

          def deserializeBody = _serializationEmitter.MakeMembersDeserializationCode(symbolType, serializationMembers, <[ symbol ]>, [ <[ metadataReader ]> ]);
          _tb.Define(<[ decl:
            public static Deserialize(reader : System.IO.BinaryReader, metadataReader : Nitra.Serialization2.MetadataReader) : $(symbolType : typed)
            {
              unchecked
              {
                mutable symbol;
                when (metadataReader.BeginReadSymbol.[$(symbolType : typed)](reader, out symbol))
                  $deserializeBody;
                symbol
              }
            }
          ]>);

        | _ => assert(false)
      }

      _tb.Compile();
    }

    protected override GetDependentEvaluationModifiers() : AttributesAndModifiers
    {
      AttributesAndModifiers(NemerleAttributes.Public, [])
    }

    private MakeSymbolClassBaseTypes() : SCG.List[PExpr]
    {
      def baseTypes = SCG.List();
      foreach (baseSymbol in _symbol.Parents)
        baseTypes.Add(<[ $(Environment.GetSymbolClass(baseSymbol) : typed) ]>);
      baseTypes
    }
  }
}
