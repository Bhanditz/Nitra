using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal partial class RuleAstEmitter : IAstEmitter
  {
    public Environment           : EmitterEnvironment   { get; }
    public RuleSymbol            : SyntaxRuleSymbol     implements IAstEmitter.Symbol { get; }
    public SymbolDeclarationSite : IRuleDeclarationSite { get { RuleSymbol.DeclarationSite } }
    
    
    public IsTypesDefined : bool
    {
      get
      {
        null != 
        match (this.RuleSymbol)
        {
          | ExtensibleRuleSymbol => _baseTb
          | SimpleRuleSymbol     => _baseTb
          | ExtensionRuleSymbol  => _astTb
          | _                    => assert(false)
        }
      }
    }
    
    public DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      match (this.RuleSymbol)
      {
        | ExtensibleRuleSymbol => 
          when (_baseTb == null)
            return null;
            
          when (_nestedTb == null)
            _nestedTb = _baseTb.DefineNestedType(<[ decl: public module Nested { } ]>);
              
          _nestedTb.DefineNestedType(td)
          
        | SimpleRuleSymbol     => _baseTb.DefineNestedType(td)
        | ExtensionRuleSymbol  => _astTb.DefineNestedType(td)
        | _                    => assert(false)
      }
    }
    
    private AstTypeBuilder        : TypeBuilder
    {
      get
      {
        match (this.RuleSymbol)
        {
          | ExtensibleRuleSymbol => _baseTb
          | SimpleRuleSymbol     => _baseTb
          | ExtensionRuleSymbol  => _astTb
          | _                    => assert(false)
        }
      }
    }

    [RecordIgnore] private mutable _nestedTb          : TypeBuilder;
    [RecordIgnore] private mutable _baseTb            : TypeBuilder;
    [RecordIgnore] private mutable _astTb             : TypeBuilder;
    [RecordIgnore] private mutable _spliceTb          : TypeBuilder;
    [RecordIgnore] private mutable _missingTb         : TypeBuilder;
    [RecordIgnore] private mutable _ambiguousTb       : TypeBuilder;
    [RecordIgnore] private mutable _astFields         : list[Rule];
    [RecordIgnore] private mutable _astFieldsWithVoid : list[Rule];

    private RuleName : string { get { $<#..$(RuleSymbol.ModuleRelativeName; ".")#> } }

    public Emit() : void
    {
      when (_astTb != null)       _astTb.Compile();
      when (_missingTb != null)   _missingTb.Compile();
      when (_ambiguousTb != null) _ambiguousTb.Compile();
      when (_spliceTb != null)    _spliceTb.Compile();
      when (_baseTb != null)      _baseTb.Compile();
    }
  }
}
