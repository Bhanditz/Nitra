using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal abstract partial class RuleAstEmitter[TSymbol] : IAstEmitter, IConstantEmitter
    where TSymbol : SyntaxRuleSymbol
  {
    public          Environment           : EmitterEnvironment                    { get; }
    public          RuleSymbol            : TSymbol implements IAstEmitter.Symbol { get; }
    public          SymbolDeclarationSite : IRuleDeclarationSite                  { get { RuleSymbol.DeclarationSite } }
    public abstract IsTypesDefined        : bool                                  { get; }

    public abstract CreateConstant(name : string, value : int) : string;
    public abstract DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder;
    public abstract DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void;
    public abstract DefineMembers() : void;
    public abstract Emit() : void;
  }
}
