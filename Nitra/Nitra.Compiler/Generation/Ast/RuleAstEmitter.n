using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal partial class RuleAstEmitter : IAstEmitter, IConstantEmitter
  {
    public Environment           : EmitterEnvironment   { get; }
    public RuleSymbol            : SyntaxRuleSymbol     implements IAstEmitter.Symbol { get; }
    public SymbolDeclarationSite : IRuleDeclarationSite { get { RuleSymbol.DeclarationSite } }

    public IsTypesDefined : bool
    {
      get
      {
        null != 
        match (this.RuleSymbol)
        {
          | ExtensibleRuleSymbol => _baseTb
          | SimpleRuleSymbol     => _baseTb
          | ExtensionRuleSymbol  => _astTb
          | _                    => assert(false)
        }
      }
    }

    [Memoize]
    public CreateConstant(name : string, value : int) : string
    {
      assert(_astTb != null);
      Util.CreateConstant(_astTb, name, value)
    }

    public DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert2(this.IsTypesDefined);
      
      def baseType =
        match (this.RuleSymbol)
        {
          | ExtensibleRuleSymbol => _baseTb
          | SimpleRuleSymbol     => _baseTb
          | ExtensionRuleSymbol  =>
            // Fix #NTR-32 by adding excess module "Nested"
            when (_nestedTb == null)
              _nestedTb = _astTb.DefineNestedType(<[ decl: public module Nested { } ]>);
              
            _nestedTb
          
          | _                    => assert(false)
        };
        
      baseType.DefineNestedType(td)
    }

    [RecordIgnore] private mutable _nestedTb          : TypeBuilder;
    [RecordIgnore] private mutable _baseTb            : TypeBuilder;
    [RecordIgnore] private mutable _astTb             : TypeBuilder;
    [RecordIgnore] private mutable _spliceTb          : TypeBuilder;
    [RecordIgnore] private mutable _missingTb         : TypeBuilder;
    [RecordIgnore] private mutable _ambiguousTb       : TypeBuilder;

    public Emit() : void
    {
      when (_nestedTb != null)    _nestedTb.Compile();
      when (_astTb != null)       _astTb.Compile();
      when (_missingTb != null)   _missingTb.Compile();
      when (_ambiguousTb != null) _ambiguousTb.Compile();
      when (_spliceTb != null)    _spliceTb.Compile();
      when (_baseTb != null)      _baseTb.Compile();
    }
  }
}
