using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    private DefineAstWriteTo(fields : SCG.List[FieldInfo]) : void
    {
      def makeWriteCode(ruleType : RuleType, obj : PExpr) : bool * PExpr
      {
        match (ruleType)
        {
          | Void             => assert(false)
          | Chars(Some(_))   => (true, <[ () ]>)
          | Chars(None)      => (false, <[ astWriter.WriteText(GetText($obj)) ]>)
          | Ref              => (false, <[ $obj.WriteTo(astWriter) ]>)
          | Option(itemType) =>
            def (isOptimized, itemExpr) = makeWriteCode(itemType, <[ x ]>);
            def code =
              if (isOptimized)
              <[
                astWriter.BeginWriteOption($obj.IsSome, true);
                astWriter.EndWrite();
              ]>
              else
              <[
                match ($obj)
                {
                  | Some(x) =>
                    astWriter.BeginWriteOption(true, false);
                    $itemExpr;

                  | None    =>
                    astWriter.BeginWriteOption(false, false);
                }
                astWriter.EndWrite();
              ]>;
            (false, code)

          | List(itemType) =>
            def (isOptimized, itemExpr) = makeWriteCode(itemType, <[ x ]>);
            def code =
              if (isOptimized)
              <[
                astWriter.BeginWriteList($obj.Length, true);
                astWriter.EndWrite();
              ]>
              else
              <[
                astWriter.BeginWriteList($obj.Length, false);
                foreach (x in $obj)
                  $itemExpr;
                astWriter.EndWrite();
              ]>;
            (false, code)

          | Tuple(memberTypes) =>
            def memberVars  = SCG.List();
            def memberExprs = SCG.List();
            foreach (memberType in memberTypes)
            {
              def memberVar = Util.tmpname("member");
              def (isOptimized, memberExpr) = makeWriteCode(memberType, <[ $(memberVar : usesite) ]>);
              if (isOptimized)
                memberVars.Add(<[ _ ]>);
              else
              {
                memberVars.Add(<[ $(memberVar : usesite) ]>);
                memberExprs.Add(memberExpr);
              }
            }
            match (memberExprs.Count)
            {
              | 0 => (true, <[ () ]>)
              | 1 => (false, <[ def (..$memberVars) = $obj; $(memberExprs[0]); ]> )
              | _ => (false, <[ def (..$memberVars) = $obj; ..$memberExprs; ]>)
            }
        }
      }

      def body = SCG.List();
      body.Add(<[ astWriter.BeginWriteAst($(this.RuleSymbol.GetRuleDescriptorRef())) ]>);
      foreach (field in fields)
      {
        def (isOptimized, expr) = makeWriteCode(field.Rule.Type, <[ this.$(field.Name : usesite) ]>);
        unless (isOptimized)
          body.Add(expr);
      }
      body.Add(<[ astWriter.EndWrite() ]>);

      _astTb.DefineConditional(<[ decl:
        public override WriteTo(astWriter : Nitra.Serialization.IAstWriter) : void
        {
          ..$body
        }
      ]>);
    }

    private DefineMissingWriteTo() : void
    {
      _missingTb.DefineConditional(<[ decl:
        public override WriteTo(astWriter : Nitra.Serialization.IAstWriter) : void
        {
          astWriter.WriteMissingAst($(this.RuleSymbol.GetRuleDescriptorRef()))
        }
      ]>);
    }

    private DefineSpliceWriteTo() : void
    {
      _spliceTb.DefineConditional(<[ decl:
        public override WriteTo(_ : Nitra.Serialization.IAstWriter) : void
        {
          throw System.NotImplementedException()
        }
      ]>);
    }

    private DefineAmbiguousWriteTo() : void
    {
      _ambiguousTb.DefineConditional(<[ decl:
        public override WriteTo(astWriter : Nitra.Serialization.IAstWriter) : void
        {
          astWriter.BeginWriteAmbiguousAst($(this.RuleSymbol.GetRuleDescriptorRef()), Ambiguities.Length);
          foreach (ast in Ambiguities)
            ast.WriteTo(astWriter);
          astWriter.EndWrite()
        }
      ]>);
    }
  }
}
