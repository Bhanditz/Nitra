using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    private GetBaseDeclarationType(declarationSymbol : DeclarationSymbol) : PExpr
    {
      | ExtensionDeclarationSymbol(BaseDeclaration = baseDeclaration) => GetBaseDeclarationType(baseDeclaration.Value)
      | ExtensibleDeclarationSymbol
      | SimpleDeclarationSymbol => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed) ]>
      | _ => assert(false, "Invalid declaration symbol")
    }

    private GetConcreteDeclarationType(declarationSymbol : DeclarationSymbol) : PExpr
    {
      | ExtensionDeclarationSymbol  => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed) ]>
      | SimpleDeclarationSymbol     => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed).Concrete ]>
      | _ => assert(false, "Invalid declaration symbol")
    }

    private GetAmbiguousDeclarationType(declarationSymbol : DeclarationSymbol) : PExpr
    {
      | ExtensionDeclarationSymbol(BaseDeclaration = baseDeclaration) => GetAmbiguousDeclarationType(baseDeclaration.Value)
      | ExtensibleDeclarationSymbol
      | SimpleDeclarationSymbol     => <[ $(Environment.GetDeclarationType(declarationSymbol) : typed).Ambiguous ]>
      | _ => assert(false, "Invalid declaration symbol")
    }

    private DefineBaseGetDeclarationMethod() : void
    {
      assert(_baseTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def baseDeclarationType     = GetBaseDeclarationType(declarationMappingBody.Declaration.Value);
        _baseTb.DefineConditional(<[ decl:
          public abstract GetDeclaration(parent : $(Environment.DeclarationTypeVar : typed)) : $baseDeclarationType
        ]>);
      }
    }

    private DefineAstGetDeclarationMethod() : void
    {
      assert(_astTb != null);

      def compileField(field : DeclarationMappingField) : PExpr
      {
        | Inline(code) => code
        | Automatic(rule) =>
          match (rule.Type)
          {
            | List   => <[ Nitra.Internal.DeclarationUtils.MakeList(parent, this.$(rule.FieldName : usesite)) ]>
            | Option => <[ Nitra.Internal.DeclarationUtils.MakeOption(parent, this.$(rule.FieldName : usesite)) ]>
            | _ => <[ this.$(rule.FieldName : usesite).GetDeclaration(parent) ]>
          }
      }

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def baseDeclarationType     = GetBaseDeclarationType(declarationMappingBody.Declaration.Value);
        def concreteDeclarationType = GetConcreteDeclarationType(declarationMappingBody.Declaration.Value);

        def code = match (declarationMappingBody)
        {
          | Delegate(fieldName) =>
            assert(!string.IsNullOrEmpty(fieldName));
            <[ this.$(fieldName : usesite).GetDeclaration(parent) ]>

          | PerField(fields) =>
            def values = fields.Map(f => <[ $(f.Field.Value.Name : usesite) = $(compileField(f)) ]>);
            <[
              def $("declaration" : global) = $concreteDeclarationType(parent, this.Location.Span);
              declaration.Initialize(..$values);
              declaration
            ]>

          | Inline(code) => code
        };

        _astTb.DefineConditional(<[ decl:
          public override GetDeclaration($("parent" : global) : $(Environment.DeclarationTypeVar : typed)) : $baseDeclarationType
          {
            $code
          }
        ]>);
      }
    }

    private DefineAmbiguousGetDeclarationMethod() : void
    {
      assert(_ambiguousTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def baseDeclarationType      = GetBaseDeclarationType(declarationMappingBody.Declaration.Value);
        def ambiguousDeclarationType = GetAmbiguousDeclarationType(declarationMappingBody.Declaration.Value);
        _ambiguousTb.DefineConditional(<[ decl:
          public override GetDeclaration(parent : $(Environment.DeclarationTypeVar : typed)) : $baseDeclarationType
          {
            def ambiguities = Nitra.Internal.DeclarationUtils.GetDeclarationAmbiguities(parent, this.Ambiguities);
            $ambiguousDeclarationType(ambiguities)
          }
        ]>);
      }
    }

    private DefineMissingGetDeclarationMethod() : void
    {
      assert(_missingTb != null);

      def declarationMappingBody = this.RuleSymbol.GetDeclarationMappingBody();
      when (declarationMappingBody != null)
      {
        def baseDeclarationType      = GetBaseDeclarationType(declarationMappingBody.Declaration.Value);
        _missingTb.DefineConditional(<[ decl:
          public override GetDeclaration(parent : $(Environment.DeclarationTypeVar : typed)) : $baseDeclarationType
          {
            _ = parent;
            null
          }
        ]>);
      }
    }
  }
}
