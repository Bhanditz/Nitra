using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    private DefineAstGetDeclarationMethod() : void
    {
      assert(_astTb != null);

      def declarationCtor = this.RuleSymbol.GetDeclarationCtor();
      when (declarationCtor != null)
      {
        def declarationType = Environment.GetDeclarationType(declarationCtor.Declaration.Value);
        def properties      = declarationCtor.Properties.Map(p => <[ $(p.Field.Value.Name : usesite) = $(p.Value) ]>);
        _astTb.DefineConditional(<[ decl:
          public override GetDeclaration(parent : $(Environment.DeclarationTypeVar : typed)) : $(Environment.DeclarationTypeVar : typed)
          {
            def declaration = $(declarationType : typed).Concrete(parent, this.Location.Span);
            declaration.Initialize(..$properties);
            declaration
          }
        ]>);
      }
    }

    private DefineAmbiguousGetDeclarationMethod() : void
    {
      assert(_ambiguousTb != null);

      def declarationCtor = this.RuleSymbol.GetDeclarationCtor();
      when (declarationCtor != null)
      {
        def declarationType = Environment.GetDeclarationType(declarationCtor.Declaration.Value);
        _ambiguousTb.DefineConditional(<[ decl:
          public override GetDeclaration(parent : $(Environment.DeclarationTypeVar : typed)) : $(Environment.DeclarationTypeVar : typed)
          {
            def ambiguities = Nitra.Internal.DeclarationUtils.GetDeclarationAmbiguities(parent, this.Ambiguities);
            $(declarationType : typed).Ambiguous(ambiguities)
          }
        ]>);
      }
    }
  }
}
