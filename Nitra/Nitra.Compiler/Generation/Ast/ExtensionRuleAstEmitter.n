using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ExtensionRuleAstEmitter : RuleParseTreeEmitter
  {
    mutable _astTb          : TypeBuilder;
    mutable _parsedAstTb    : TypeBuilder;
    mutable _chemicalAstTb  : TypeBuilder;
    mutable _nestedTb       : TypeBuilder;

    public this(environment : EmitterEnvironment, ruleSymbol : ExtensionRuleSymbol)
    {
      base(environment, ruleSymbol)
    }

    public override IsTypesDefined : bool { get { _astTb != null } }

    [Memoize]
    public override CreateConstant(name : string, value : int) : string
    {
      assert(IsTypesDefined);
      Util.CreateConstant(_parsedAstTb, name, value)
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert(IsTypesDefined);
      // Fix #NTR-32 by adding excess module "Nested"
      when (_nestedTb == null)
        _nestedTb = _astTb.DefineNestedType(<[ decl: public module Nested { } ]>);

      _nestedTb.DefineNestedType(td)
    }

    public override Emit() : void
    {
      assert(IsTypesDefined);

      _astTb.Compile();
      _parsedAstTb.Compile();
      _chemicalAstTb.Compile();
      _nestedTb?.Compile();
    }

    public override DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(!IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        _astTb = defineType(<[decl:
          public new abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.GetParseTreeType((this.RuleSymbol :> ExtensionRuleSymbol).BaseRule.Value) : typed)
          {
            public override RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
          }
        ]>);

        _parsedAstTb = defineType(<[decl:
          private new sealed partial class $("__Parsed__" + this.RuleSymbol.Name : usesite) : $(_astTb.GetMemType() : typed), Nitra.Internal.IAstSequenceLoader[Nitra.NSpan], Nitra.Internal.IAstSequenceLoader[Nitra.ParseTree]
          {
          }
        ]>);

        _chemicalAstTb = defineType(<[decl:
          private new sealed partial class $("__Chemical__" + this.RuleSymbol.Name : usesite) : $(_astTb.GetMemType() : typed)
          {
          }
        ]>);
      });
    }

    public override DefineMembers() : void
    {
      assert(IsTypesDefined);

      def fields = GetFields();
      DefineAstCtorAndFields(fields, _astTb, false);
      DefineParsedAstCtorAndFields(fields, _parsedAstTb);
      DefineChemicalAstCtorAndFields(fields, _chemicalAstTb, _astTb);
      DefineAstApplyMethod(fields, _astTb, _chemicalAstTb, _parsedAstTb);
      DefineExtensionRuleGetDeclarationMethod(_astTb);
      DefineAstPrettyPrint(_astTb);
      DefineExtensionRuleMethods(_astTb);
      DefineReadSequenceMethod(_parsedAstTb);
    }
  }
}
