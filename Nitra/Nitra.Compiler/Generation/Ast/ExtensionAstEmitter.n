using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ExtensionAstEmitter : AstEmitter
  {
    private         _parent            : AstEmitter;
    private         _symbol            : ExtensionAstSymbol;
    private mutable _tb                : TypeBuilder;
    private         _collectionEmitter : CollectionEmitter;

    public this(parent : AstEmitter, symbol : ExtensionAstSymbol)
    {
      base(parent.Environment, parent.NemerleEnv);
      this._parent            = parent;
      this._symbol            = symbol;
      this._collectionEmitter = CollectionEmitter(this, symbol);
    }

    public override DefineTypes() : void
    {
      assert(_tb == null);

      def baseTypes = SCG.List();
      baseTypes.Add(<[ $(Environment.GetAstType(_symbol.BaseAst.GetValue(Environment.Project)) : typed) ]>);
      when (_symbol.NameProperty is SymbolRef.Some(propertySymbol) when propertySymbol.DeclaringAst == _symbol)
        baseTypes.Add(<[ $(Environment.DeclarationTypeVar : typed) ]>);

      def parentType = Environment.TypeCompiler.CompileParentType(_symbol);
      _tb = _parent.DefineNestedType(<[ decl:
        public sealed partial class $(_symbol.Name : usesite) : ..$baseTypes
        {
          public override Parent : $(parentType : typed)                   { get; protected set; }
          public override Span   : $(Environment.NSpanTypeVar : typed)     { get; }
        }
      ]>);

      _collectionEmitter.DefineTypes(_tb);
    }

    public override DefineMembers() : void
    {
      assert(_tb != null);

      def initParameters = SCG.List();
      initParameters.Add(<[ parameter: Span : $(Environment.NSpanTypeVar : typed) ]>);

      def initStatements = SCG.List();
      initStatements.Add(<[ this.Span = Span ]>);

      def initStatementsTail = SCG.List();

      when (_symbol.NameProperty is SymbolRef.Some(propertySymbol))
      {
        def propertyType  = Environment.TypeCompiler.CompileNamePropertyType(propertySymbol);
        def needSetParent = propertyType.TryRequire(Environment.AstTypeVar);
        initParameters.Add(<[ parameter : $(propertySymbol.Name : usesite) : $(propertyType : typed) ]>);
        if (propertySymbol.DeclaringAst == _symbol)
        {
          def backingFieldName = Util.tmpname(propertySymbol.Name);
          initStatements.Add(<[ this.$(backingFieldName : usesite) = $(propertySymbol.Name : usesite) ]>);
          _tb.Define(<[ decl:
            private mutable $(backingFieldName : usesite) : $(propertyType : typed)
          ]>);
          _tb.Define(<[ decl:
            public $(propertySymbol.Name : usesite) : $(propertyType : typed) implements $(Environment.DeclarationTypeVar : typed).Name
            {
              get { this.$(backingFieldName : usesite) }
            }
          ]>);
          when (needSetParent)
            initStatementsTail.Add(<[ this.$(backingFieldName : usesite).SetParent(this) ]>);
        }
        else
        {
          initStatements.Add(<[ this.$(propertySymbol.Name : usesite) = $(propertySymbol.Name : usesite) ]>);
          when (needSetParent)
            initStatementsTail.Add(<[ this.$(propertySymbol.Name : usesite).SetParent(this) ]>);
        }
      }

      def dependentProps = SCG.Dictionary();

      def defineSimpleProperty(propertySymbol : SimpleAstPropertySymbol) : void
      {
        def propertyType  = Environment.TypeCompiler.CompileSimplePropertyType(propertySymbol);
        def needSetParent = propertyType.TryRequire(Environment.AstTypeVar);
        if (propertySymbol.DeclaringAst == _symbol)
        {
          def backingFieldName = Util.tmpname(propertySymbol.Name);
          initParameters.Add(<[ parameter : $(propertySymbol.Name : usesite) : $(propertyType : typed) ]>);
          initStatements.Add(<[ this.$(backingFieldName : usesite) = $(propertySymbol.Name : usesite) ]>);
          _tb.Define(<[ decl:
            private mutable $(backingFieldName : usesite) : $(propertyType : typed)
          ]>);
          _tb.Define(<[ decl:
            public $(propertySymbol.Name : usesite) : $(propertyType : typed)
            {
              get { this.$(backingFieldName : usesite) }
            }
          ]>);
          when (needSetParent)
            initStatementsTail.Add(<[ this.$(backingFieldName : usesite).SetParent(this) ]>);
        }
        else
        {
          initParameters.Add(<[ parameter : $(propertySymbol.Name : usesite) : $(propertyType : typed) ]>);
          initStatements.Add(<[ this.$(propertySymbol.Name : usesite) = $(propertySymbol.Name : usesite) ]>);
          when (needSetParent)
            initStatementsTail.Add(<[ this.$(propertySymbol.Name : usesite).SetParent(this) ]>);
        }
      }

      mutable inheritedFieldsCount;

      def defineDependentProperty(propertySymbol : DependentAstPropertySymbol) : void
      {
        def index = dependentProps.Count;

        if (propertySymbol.DeclaringAst == _symbol)
        {
          def bit         = _tb.GetBitFieldManager().Allocate();
          def propertyRef = DependentAstPropertyRef.Compiling(propertySymbol, index, bit);
          DefineDependentProperty(_tb, propertyRef, NemerleModifiers.Public);

          dependentProps.Add(propertySymbol, propertyRef);
        }
        else
        {
          inheritedFieldsCount += 1;

          def propertyRef = DependentAstPropertyRef.Reflected(propertySymbol, index);
          dependentProps.Add(propertySymbol, propertyRef);
        }
      }

      def projectedProps = SCG.List();

      def defineProjectedProperty(propertySymbol : ProjectedAstPropertySymbol) : void
      {
        def propertyType = Environment.TypeCompiler.CompileProjectedPropertyType(propertySymbol);
        when (propertySymbol.DeclaringAst == _symbol)
          _tb.Define(<[ decl: public $(propertySymbol.Name : usesite) : $(propertyType : typed) { get; private set } ]>);
        projectedProps.Add(propertySymbol)
      }

      // inherited properties comes first!
      foreach (propertySymbol in _symbol.AllProperties)
      {
        | SimpleAstPropertySymbol    as s => defineSimpleProperty(s)
        | DependentAstPropertySymbol as s => defineDependentProperty(s)
        | ProjectedAstPropertySymbol as s => defineProjectedProperty(s)
        | _                                       => ()
      }

      initStatements.AddRange(initStatementsTail);

      CompileProjection(projectedProps, initStatements);

      _tb.Define(<[ decl:
        public this(..$initParameters) { ..$initStatements }
      ]>);

      DefineIsPropertyEvaluatedMethod(_tb, inheritedFieldsCount);
      DefineDependentPropertiesEvaluation(_tb, _symbol);

      _collectionEmitter.DefineMembers(dependentProps);
    }

    public override Emit() : void
    {
      assert(_tb != null);
      _tb.Compile();
      
      _collectionEmitter.Emit();
    }
  }
}
