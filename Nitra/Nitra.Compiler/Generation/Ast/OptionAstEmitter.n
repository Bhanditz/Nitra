using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class OptionAstEmitter : CollectionAstEmitter
  {
    public override TypeCompiler : NTypeCompiler { get { Environment.AstOptionTypeCompiler } }

    public this(environment : EmitterEnvironment, symbol : AstSymbol)
    {
      base(environment, symbol)
    }

    protected override CreateBaseTb(ownerTb : TypeBuilder, itemType : FixedType) : TypeBuilder
    {
      ownerTb.DefineNestedType(<[ decl:
        new public interface IAstOption : Nitra.Declarations.IAstOption[$(itemType : typed)]
        {
        }
      ]>)
    }

    protected override CreateConcreteTb(ownerTb : TypeBuilder, itemType : FixedType, baseType : FixedType) : TypeBuilder
    {
      ownerTb.DefineNestedType(<[ decl:
        new public sealed class AstOption : Nitra.Declarations.AstOption[$(itemType : typed)], $(baseType : typed)
        {
          public this(loc : Nitra.Located)
          {
            base(loc);
          }
          public this(file : $(FileType : typed), span : $(SpanType : typed))
          {
            base(file, span);
          }
          public this(loc : Nitra.Located, value : $(itemType : typed))
          {
            base(loc, value);
          }
          public this(file : $(FileType : typed), span : $(SpanType : typed), value : $(itemType : typed))
          {
            base(file, span, value);
          }
        }
      ]>)
    }

    protected override CreateAmbiguousTb(ownerTb : TypeBuilder, itemType : FixedType, baseType : FixedType) : TypeBuilder
    {
      ownerTb.DefineNestedType(<[ decl:
        new public sealed class AmbiguousAstOption : Nitra.Declarations.AmbiguousAstOption[$(itemType : typed)], $(baseType : typed)
        {
          public this(ambiguities : array[$(baseType : typed)])
          {
            base((ambiguities : object) :> array[Nitra.Declarations.IAstOption[$(itemType : typed)]]);
          }
          public new Ambiguities : array[$(baseType : typed)] { get { base.Ambiguities :> array[$(baseType : typed)] } }
        }
      ]>)
    }

    protected override MakeEvalPropertiesBody(
      astProperties        : SCG.Dictionary[DependentAstPropertySymbol, DependentAstPropertyRef],
      collectionProperties : SCG.Dictionary[DependentAstPropertySymbol, DependentAstPropertyRef.Compiling],
      dependentProperties  : array[DependentAstPropertySymbol]) : PExpr
    {
      def setSomeInputs  = SCG.List();
      def setNoneOutputs = SCG.List();
      def readOutputs    = SCG.List();

      foreach (propertySymbol in dependentProperties)
      {
        match (propertySymbol.Direction)
        {
          | In =>
            def listInputRef = collectionProperties[propertySymbol];
            def itemInputRef = astProperties[propertySymbol];
            LinkProperties(setSomeInputs, <[ this ]>, listInputRef, <[ item ]>, itemInputRef);

          | Out =>
            def listOutputRef = collectionProperties[propertySymbol];
            if (propertySymbol.LinkedProperty is SymbolRef.Some(linkedProperty))
            {
              def listInputRef = collectionProperties[linkedProperty];
              LinkProperties(setNoneOutputs, <[ this ]>, listInputRef, <[ this ]>, listOutputRef);
            }
            else
            {
              SetPropertyValue(setNoneOutputs, listOutputRef, <[ None() ]>);
              def itemOutputRef = astProperties[propertySymbol];
              readOutputs.Add(<[
                when (! $(GenerateHasValueCheck(<[ this ]>, listOutputRef)) && $(GenerateHasValueCheck(<[ item ]>, itemOutputRef)))
                  this.$(propertySymbol.Name : usesite) = Some(item.$(propertySymbol.Name : usesite))
              ]>);
            }
        }
      }

      <[
        if (this.HasValue)
        {
          def item = this._value;
          ..$setSomeInputs;
          item.EvalProperties(context);
          ..$readOutputs;
        }
        else { ..$setNoneOutputs }
      ]>
    }
  }
}
