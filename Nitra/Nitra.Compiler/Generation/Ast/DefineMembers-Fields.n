using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class RuleAstEmitter
  {
    protected DefineAstCtorAndFields(fields : SCG.List[FieldInfo], _astTb : TypeBuilder, needDefaultBody : bool) : void
    {
      def traverse(ruleType : RuleType, obj : PExpr) : ChemicalRuleType * PExpr
      {
        match (ruleType)
        {
          | Void         => assert3(false)
          | Ref(symbol)  => (ChemicalRuleType.Ast(symbol),    obj)
          | Chars(Some)  => (ChemicalRuleType.StaticString(), <[ () ]>)
          | Chars(None)  => (ChemicalRuleType.String(),       <[ this.GetText($obj) ]>)
          | Option(type) =>
            def itemVariable = Util.tmpname("item");
            def (itemType, itemExpr) = traverse(type, <[ $(itemVariable : usesite) ]>);
            if (itemType is ChemicalRuleType.StaticString)
              (ChemicalRuleType.Bool(), <[ $obj.HasValue ]>)
            else
            {
              def expr =
              <[
                match ($obj)
                {
                  | Nitra.OptionParseTree(HasValue = true, Value = $(itemVariable : usesite)) => Some($itemExpr)
                  | _ => None()
                }
              ]>;
              (ChemicalRuleType.Option(itemType), expr)
            }

          | List(type) =>
            def itemVariable = Util.tmpname("item");
            def (itemType, itemExpr) = traverse(type, <[ $(itemVariable : usesite) ]>);
            if (itemType is ChemicalRuleType.StaticString)
              (ChemicalRuleType.Int(), <[ $obj.Length ]>)
            else
            {
              def expr =
              <[
                def items = System.Collections.Generic.List();
                foreach ($(itemVariable : usesite) in $obj)
                  items.Add($itemExpr);
                Nemerle.Collections.NList.ToList(items);
              ]>;
              (ChemicalRuleType.List(itemType), expr)
            }

          | Tuple(types) =>
            def memberTypes  = SCG.List();
            def exprs        = SCG.List();

            foreach(t in types with i)
            {
              def (memberType, memberExpr) = traverse(t, <[ $obj.$("Item" + (i + 1).ToString() : usesite) ]>);
              unless (memberType is ChemicalRuleType.StaticString)
              {
                memberTypes.Add(memberType);
                exprs.Add(memberExpr);
              }
            }

            match (memberTypes.Count)
            {
              | 0 => (ChemicalRuleType.StaticString(),               <[ () ]>)
              | 1 => (memberTypes[0],                                exprs[0])
              | _ => (ChemicalRuleType.Tuple(memberTypes.NToList()), <[ (..$exprs) ]>)
            }
        }
      }

      foreach (field in fields)
      {
        if (needDefaultBody)
          _astTb.DefineConditional(<[ decl:
            public new virtual $(field.Name : usesite) : $(field.Type : typed) { get { Nitra.Runtime.Internal.ParseTreeUtils.ThrowOnFieldAccess(this, $(field.Name : string)) } }
          ]>);
        else
          _astTb.DefineConditional(<[ decl:
            public new abstract $(field.Name : usesite) : $(field.Type : typed) { get; }
          ]>);

        match (field.Rule.Type)
        {
          | Ref | Chars(Some) => ()
          | ruleType =>
            def (propertyType, expr) = traverse(ruleType, <[ this.$(field.Name : usesite) ]>);
            unless (propertyType is ChemicalRuleType.StaticString)
              _astTb.DefineConditional(<[ decl:
                public $(field.Name + "Data" : usesite) : $(Environment.GetParseTreeType(propertyType) : typed)
                {
                  [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
                  get { unchecked ($expr) }
                }
              ]>);
        }
      }
    }
  }
}
