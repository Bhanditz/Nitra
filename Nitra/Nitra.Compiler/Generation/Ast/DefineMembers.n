using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal partial class RuleAstEmitter
  {
    public DefineMembers() : void
    {
      when (_baseTb != null)
      {
        DefineBaseAstCreateMethod();
        DefineBaseGetDeclarationMethod();
        DefineBaseAstRuleMethods();
      }
      when (_astTb != null)
      {
        def fields = GetFields();
        DefineAstCtorAndFields(fields);
        DefineParsedAstCtorAndFields(fields);
        DefineChemicalAstCtorAndFields(fields);
        DefineAstApplyMethod(fields);
        DefineAstGetDeclarationMethod();
        DefineAstPrettyPrint();
        DefineAstRuleMethods();
        DefineReadSequenceMethod();
      }
      when (_missingTb != null)
      {
        DefineMissingPrettyPrint();
        DefineMissingRuleMethods();
      }
      when (_ambiguousTb != null)
      {
        DefineAmbiguousGetDeclarationMethod();
        DefineAmbiguousPrettyPrint();
        DefineAmbiguousRuleMethods();
      }
    }
  }
}
