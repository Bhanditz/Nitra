using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class ListAstEmitter : CollectionAstEmitter
  {
    public override TypeCompiler : NTypeCompiler { get { Environment.AstListTypeCompiler } }

    public this(environment : EmitterEnvironment, symbol : AstSymbol)
    {
      base(environment, symbol)
    }

    protected override CreateBaseTb(ownerTb : TypeBuilder, itemType : FixedType) : TypeBuilder
    {
      ownerTb.DefineNestedType(<[ decl:
        new public interface IAstList : Nitra.Declarations.IAstList[$(itemType : typed)], System.Collections.Generic.IList[$(itemType : typed)]
        {
        }
      ]>);
    }

    protected override CreateConcreteTb(ownerTb : TypeBuilder, itemType : FixedType, baseType : FixedType) : TypeBuilder
    {
      ownerTb.DefineNestedType(<[ decl:
        new public sealed class AstList : Nitra.Declarations.AstList[$(itemType : typed)], $(baseType : typed)
        {
          public this(loc : Nitra.Declarations.ILocated)
          {
            base(loc, null);
          }
          public this(loc : Nitra.Declarations.ILocated, params items : array[$(itemType : typed)])
          {
            base(loc, items);
          }
          public this(file : $(FileType : typed), span : $(SpanType : typed))
          {
            base(file, span, null);
          }
          public this(file : $(FileType : typed), span : $(SpanType : typed), params items : array[$(itemType : typed)])
          {
            base(file, span, items);
          }
        }
      ]>);
    }

    protected override CreateAmbiguousTb(ownerTb : TypeBuilder, itemType : FixedType, baseType : FixedType) : TypeBuilder
    {
      ownerTb.DefineNestedType(<[ decl:
        new public sealed class AmbiguousAstList : Nitra.Declarations.AmbiguousAstList[$(itemType : typed)], $(baseType : typed)
        {
          public this(ambiguities : array[$(baseType : typed)])
          {
            base((ambiguities : object) :> array[Nitra.Declarations.IAstList[$(itemType : typed)]]);
          }
          public new Ambiguities : array[$(baseType : typed)] { get { base.Ambiguities :> array[$(baseType : typed)] } }
        }
      ]>);
    }

    protected override MakeEvalPropertiesBody(dependentProperties : SCG.Dictionary[DependentPropertySymbol, BitField]) : PExpr
    {
      def setFirstItemInputs     = SCG.List();
      def linkEachItemProperties = SCG.List();
      def setEmptyListOutputs    = SCG.List();
      def setListOutputs         = SCG.List();
      def outputProperties       = SCG.List();
      def outputFlagInit         = SCG.List();
      def outputFlagSetFirst     = SCG.List();
      def outputFlagSetEach      = SCG.List();

      foreach (propertySymbol in dependentProperties.Keys)
      {
        match (propertySymbol.Direction)
        {
          | In =>
            def listInputRef = DependencyPath.DeclaredProperty(DependencyPath.This(), propertySymbol, 0);
            def itemInputRef = DependencyPath.DeclaredProperty(DependencyPath.Variable("item"), propertySymbol, 0);
            LinkProperties(setFirstItemInputs, listInputRef, itemInputRef, dependentProperties);

            if (propertySymbol.LinkedProperty is SymbolRef.Some(linkedProperty))
            {
              def itemOutputRef = DependencyPath.DeclaredProperty(DependencyPath.Variable("prevItem"), linkedProperty, 0);
              LinkProperties(linkEachItemProperties, itemOutputRef, itemInputRef, dependentProperties);
            }
            else
              LinkProperties(linkEachItemProperties, listInputRef, itemInputRef, dependentProperties);

          | Out =>
            def listOutputRef = DependencyPath.DeclaredProperty(DependencyPath.This(), propertySymbol, 0);
            def itemOutputRef = DependencyPath.DeclaredProperty(DependencyPath.Variable("item"), propertySymbol, 0);
            if (propertySymbol.LinkedProperty is SymbolRef.Some(linkedProperty))
            {
              def listInputRef = DependencyPath.DeclaredProperty(DependencyPath.This(), linkedProperty, 0);
              LinkProperties(setEmptyListOutputs, listInputRef, listOutputRef, dependentProperties);
              LinkProperties(setListOutputs, itemOutputRef, listOutputRef, dependentProperties);
            }
            else
            {
              SetPropertyValue(setEmptyListOutputs, listOutputRef, <[ array(0) ]>, dependentProperties);
              def flag = Util.tmpname(propertySymbol.Name);
              outputProperties.Add(propertySymbol, flag);
              outputFlagInit.Add(<[ mutable $(flag : usesite) = ! $(GenerateHasValueCheck(listOutputRef, dependentProperties)) ]>);
              outputFlagSetFirst.Add(<[ $(flag : usesite) &= $(GenerateHasValueCheck(itemOutputRef, dependentProperties)) ]>);
              outputFlagSetEach.Add(<[ $(flag : usesite) &= $(GenerateHasValueCheck(itemOutputRef, dependentProperties)) ]>);
            }
        }
      }

      match (outputProperties.Count)
      {
        | 0 => ()
        | 1 =>
          def (propertySymbol, flag) = outputProperties[0];
          setListOutputs.Add(<[
            when ($(flag : usesite))
            {
              def buffer = array(length);
              for (mutable i = 0; i < length; ++i)
                buffer[i] = _items[i].$(propertySymbol.Name : usesite);
              this.$(propertySymbol.Name : usesite) = buffer;
            }
          ]>)

        | _ =>
          mutable pred = <[ $(outputProperties[0][1] : usesite) ]>;
          for (mutable i = 1; i < outputProperties.Count; ++i)
            pred = <[ $pred || $(outputProperties[i][1] : usesite) ]>;

          def createBuffers = SCG.List();
          def fillBuffers   = SCG.List();
          def setBuffers    = SCG.List();
          foreach ((propertySymbol, flag) in outputProperties)
          {
            def bufferName = Util.tmpname("buffer");
            createBuffers.Add(<[ def $(bufferName : usesite) = if ($(flag : usesite)) array(length) else null ]>);
            fillBuffers.Add(<[ when ($(flag : usesite)) $(bufferName : usesite)[i] = item.$(propertySymbol.Name : usesite) ]>);
            setBuffers.Add(<[ when ($(flag : usesite)) this.$(propertySymbol.Name : usesite) = $(bufferName : usesite) ]>);
          }
          setListOutputs.Add(<[
            when ($pred)
            {
              ..$createBuffers;
              for (mutable i = 0; i < length; ++i)
              {
                item = _items[i];
                ..$fillBuffers;
              }
              ..$setBuffers;
            }
          ]>);
      }

      <[
        def length = _items.Length;
        if (length > 0)
        {
          ..$outputFlagInit;
          mutable item = _items[0];
          ..$setFirstItemInputs;
          item.EvalProperties(context);
          ..$outputFlagSetFirst;

          for (mutable i = 1; i < length; ++i)
          {
            def prevItem = item;
            _ = prevItem;
            item = _items[i];
            ..$linkEachItemProperties;
            item.EvalProperties(context);
            ..$outputFlagSetEach;
          }

          ..$setListOutputs;
        }
        else
        {
          ..$setEmptyListOutputs
        }
      ]>
    }
  }
}
