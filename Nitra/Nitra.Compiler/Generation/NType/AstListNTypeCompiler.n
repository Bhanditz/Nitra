using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;

namespace Nitra.Compiler
{
  public sealed class AstListNTypeCompiler : NTypeCompiler
  {
    public this(compiler : NTypeCompiler)
    {
      this._compiler = compiler;
    }

    private         _compiler          : NTypeCompiler;
    private mutable _immutableArrayOpt : option[TypeInfo];

    public override Environment : EmitterEnvironment { get { _compiler.Environment } }

    public override CompileProjectedPropertyType(propertySymbol : ProjectedPropertySymbol) : FixedType
    {
      _compiler.CompileProjectedPropertyType(propertySymbol)
    }

    public override CompileStructuralPropertyType(propertySymbol : StructuralPropertySymbol) : AstPropertyType
    {
      _compiler.CompileStructuralPropertyType(propertySymbol)
    }

    [Memoize]
    public override CompileDependentPropertyType(propertySymbol : DependentPropertySymbol) : FixedType
    {
      | DependentPropertySymbol(Direction = Out, LinkedProperty = None) =>
        def itemType = _compiler.CompileDependentPropertyType(propertySymbol);
        when (_immutableArrayOpt : object == null)
          _immutableArrayOpt = Environment.Manager.NameTree.LookupExactType("System.Collections.Immutable.ImmutableArray", 1);

        match (_immutableArrayOpt)
        {
          | Some(ti) => FixedType.Class(ti, [itemType])
          | None     => Message.FatalError("Missing reference to 'System.Collections.Immutable.dll' assembly.");
        }

      | _ => _compiler.CompileDependentPropertyType(propertySymbol);
    }

    public override Compile(t : NType) : PExpr
    {
      _compiler.Compile(t)
    }
  }
}
