using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;

namespace Nitra.Compiler
{
  public sealed class AstListNTypeCompiler : NTypeCompiler
  {
    public this(compiler : NTypeCompiler)
    {
      this._compiler = compiler;
    }

    private _compiler : NTypeCompiler;

    public override Environment : EmitterEnvironment { get { _compiler.Environment } }

    public override CompileProjectedPropertyType(propertySymbol : ProjectedAstPropertySymbol) : FixedType
    {
      _compiler.CompileProjectedPropertyType(propertySymbol)
    }

    public override CompileSimplePropertyType(propertySymbol : SimpleAstPropertySymbol) : AstPropertyType
    {
      _compiler.CompileSimplePropertyType(propertySymbol)
    }

    [Memoize]
    public override CompileDependentPropertyType(propertySymbol : DependentAstPropertySymbol) : FixedType
    {
      | DependentAstPropertySymbol(Direction = Out, LinkedProperty = None) =>
        def itemType = _compiler.CompileDependentPropertyType(propertySymbol);
        Environment.Manager.CoreEnv.BindFixedType(<[ array[$(itemType : typed)] ]>)

      | _ => _compiler.CompileDependentPropertyType(propertySymbol);
    }

    public override Compile(t : NType) : PExpr
    {
      _compiler.Compile(t)
    }
  }
}
