using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class SymbolSerializationExtension : IBinarySerializationEmitterExtension, IBinarySerializationMessageEmitter
  {
    public this(environment : EmitterEnvironment)
    {
      _environment = environment;
    }

    _environment : EmitterEnvironment;

    mutable _metadataWriterParam : string;
    mutable _metadataReaderParam : string;

    public DeclarationSymbolType : FixedType
    {
      mutable _declarationSymbolType : FixedType = null;
      get
      {
        when (_declarationSymbolType : object == null)
          _declarationSymbolType = _environment.Manager.CoreEnv.BindFixedType(<[ Nitra.Runtime.Binding.DeclarationSymbol ]>);

        _declarationSymbolType
      }
    }

    public ScopeType : FixedType
    {
      mutable _scopeType : FixedType = null;
      get
      {
        when (_scopeType : object == null)
          _scopeType = _environment.Manager.CoreEnv.BindFixedType(<[ Nitra.Runtime.Binding.Scope ]>);

        _scopeType
      }
    }

    public IRefType : FixedType
    {
      mutable _irefType : FixedType = null;
      get
      {
        when (_irefType : object == null)
          _irefType = _environment.Manager.CoreEnv.BindFixedType(<[ Nitra.Runtime.Binding.IRef ]>);

        _irefType
      }
    }

    public CreateParameters(emitter : BinarySerializationEmitter) : void
    {
      _metadataWriterParam = emitter.CreateSerializationParameter("_metadataWriter", <[ Nitra.Serialization2.MetadataWriter ]>);
      _metadataReaderParam = emitter.CreateDeserializationParameter("_metadataReader", <[ Nitra.Serialization2.MetadataReader ]>);
    }

    public IsSupportedType(type : FixedType) : bool
    {
      type.TryRequire(DeclarationSymbolType) || type.TryRequire(ScopeType) || type.TryRequire(IRefType)
    }

    public MakeWriteCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(DeclarationSymbolType)) <[ $(_metadataWriterParam : usesite).WriteSymbol(obj, writer) ]>
      else if (type.TryRequire(ScopeType))        <[ $(_metadataWriterParam : usesite).WriteScope (obj, writer) ]>
      else if (type.TryRequire(IRefType))         <[ $(_metadataWriterParam : usesite).WriteRef   (obj, writer) ]>
      else assert(false)
    }

    public MakeReadCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      def tryAddCast(baseType : FixedType, targetType : FixedType, expr : PExpr) : PExpr
      {
        if (baseType : object == targetType) expr else <[ $expr :> $(targetType : typed) ]>
      }

      if (type.TryRequire(DeclarationSymbolType)) tryAddCast(DeclarationSymbolType, type, <[ $(_metadataReaderParam : usesite).ReadSymbol(reader) ]>)
      else if (type.TryRequire(ScopeType))        tryAddCast(ScopeType,             type, <[ $(_metadataReaderParam : usesite).ReadScope (reader) ]>)
      else if (type.TryRequire(IRefType))         tryAddCast(IRefType,              type, <[ $(_metadataReaderParam : usesite).ReadRef   (reader) ]>)
      else assert(false)
    }

    public EmitWarning(message : PExpr) : PExpr
    {
      <[ $(_metadataReaderParam : usesite).Project.Warning(_metadataReader.ErrorLocation, $message) ]>
    }

    public EmitFatalError(message : PExpr) : PExpr
    {
      <[ $(_metadataReaderParam : usesite).Project.FatalError(_metadataReader.ErrorLocation, $message) ]>
    }
  }
}
