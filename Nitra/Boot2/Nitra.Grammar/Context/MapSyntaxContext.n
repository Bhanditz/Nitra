using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public class MapSyntaxContext : EnteredScopeContext
  {
    public override CurrentSymbols : list[Symbol] { get{ [] } }
    private _getParametersCallback : Func[list[SyntaxMappingParameter]];
    private _getReturnType          : Func[AstType];

    public this(parent : Context, getParametersCallback : Func[list[SyntaxMappingParameter]], getReturnType : Func[AstType])
    {
      base(parent);
      _getParametersCallback = getParametersCallback;
      _getReturnType         = getReturnType;
    }

    private mutable _parameters : SCG.Dictionary[Identifier, SyntaxMappingParameter];

    public BindParameter(name : Identifier) : ValueOption[SyntaxMappingParameter]
    {
      when (_parameters : object == null)
        _parameters = _getParametersCallback().ToDictionary(_.Name);

      mutable result;
      if (_parameters.TryGetValue(name, out result)) 
        VSome(result)
      else
        VNone()
    }

    public ReturnType : AstType { get { _getReturnType() } }
  }
}
