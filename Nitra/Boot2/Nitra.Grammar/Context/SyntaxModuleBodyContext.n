using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public sealed class SyntaxModuleBodyContext : EnteredScopeContext, ITokenNamesMapContext
  {
    public this(parent : Context)
    {
      base(parent);
    }

    public override CurrentSymbols : list[Symbol] { get { [] } }

    public TokenNamesMap : Map[string, TokenLiteralSymbol]
    {
      [Memoize] get
      {
        def appendSymbol(symbol : TokenLiteralSymbol, map : Map[string, TokenLiteralSymbol])
        {
          symbol.StringLiterals.FoldLeft(map, (lit, map) => map.Replace(lit, symbol))
        }
        def walk(baseContext)
        {
          match (baseContext.TryGetParent.[OpenNamespaceOrTypeContext]())
          {
            | null => Map()
            | OpenNamespaceOrTypeContext(OpenSymbol = Some(SyntaxModuleSymbol as moduleSymbol)) as context =>
              moduleSymbol.TokenLiterals.FoldLeft(walk(context), appendSymbol)

            | context => walk(context)
          }
        }
        walk(this)
      }
    }

    public GetSpaceRule(context : Context, ruleName : string, loc : Location) : SymbolRef[RuleDefSymbol]
    {
      def result = GetSpaceRule(context, ruleName);
      when (result.IsNone && !_whitespaceHintShown)
      {
        Project.Hint(loc, $"Declare whitespace handling rule '$ruleName' or import 'Whitespaces' syntax module from Nitra.Runtime library.");
        _whitespaceHintShown = true;
      }
      result;
    }

    [Memoize]
    private GetSpaceRule(context : Context, ruleName : string) : SymbolRef[RuleDefSymbol]
    {
      def s = Location(SourceSnapshot(ruleName), 0, ruleName.Length);
      def symbol = Utils.MakeSymbolRefWithMessages(context.BindMany.[RuleDefSymbol](s), context);
      symbol
    }

    private mutable _whitespaceHintShown : bool = false;

    public override ToString() : string
    {
      "<SyntaxModuleBodyContext>"
    }
  }
}
