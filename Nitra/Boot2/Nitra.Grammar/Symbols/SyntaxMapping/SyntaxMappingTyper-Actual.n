using Nitra.ProjectSystem;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  internal partial module SyntaxMappingTyper
  {
    public Actual : SyntaxMappingTyper[SyntaxMappingExpr] = ActualSyntaxMappingTyper();

    private sealed class ActualSyntaxMappingTyper : SyntaxMappingTyper[SyntaxMappingExpr]
    {
      protected override GetCompilerMessages(node : G.MapSyntaxExpression) : ICompilerMessages
      {
        node.Context
      }

      protected override TypeNode(node : G.MapSyntaxExpression, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : SyntaxMappingExpr
      {
        node.Expression(ruleSymbol, astType)
      }

      protected override CreateError(node : G.MapSyntaxExpression) : SyntaxMappingExpr
      {
        SyntaxMappingExpr.Error(node)
      }

      protected override CreateTypeHint(expr : G.MapSyntaxExpression, ruleSymbol : SyntaxRuleSymbol, astType : AstType) : SyntaxMappingExpr
      {
        expr.Expression(ruleSymbol, astType)
      }

      protected override CreateConvertList(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingExpr
      {
        def argumentExprs = ApplyArgumentTypes(syntaxMapping.Parameters, arguments, ruleSymbol);
        SyntaxMappingExpr.ConvertList(node.Location, path, argumentExprs, astSymbol, itemPath)
      }

      protected override CreateConcatLists(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingExpr
      {
        def argumentExprs = ApplyArgumentTypes(syntaxMapping.Parameters, arguments, ruleSymbol);
        SyntaxMappingExpr.ConcatLists(node.Location, path, argumentExprs, astSymbol, itemPath)
      }

      protected override CreateConcatOptions(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], itemPath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingExpr
      {
        def argumentExprs = ApplyArgumentTypes(syntaxMapping.Parameters, arguments, ruleSymbol);
        SyntaxMappingExpr.ConcatOptions(node.Location, path, argumentExprs, astSymbol, itemPath)
      }

      protected override CreateConvertOption(node : G.MapSyntaxExpression, astSymbol : AstSymbol, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], valuePath : ParseTreePath, ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingExpr
      {
        def argumentExprs = ApplyArgumentTypes(syntaxMapping.Parameters, arguments, ruleSymbol);
        SyntaxMappingExpr.ConvertOption(node.Location, path, argumentExprs, astSymbol, valuePath)
      }

      protected override CreateCall(node : G.MapSyntaxExpression, path : ParseTreePath, syntaxMapping : SyntaxMappingSymbol, arguments : SCG.IList[G.MapSyntaxExpression], ruleSymbol : SyntaxRuleSymbol) : SyntaxMappingExpr
      {
        def argumentExprs = ApplyArgumentTypes(syntaxMapping.Parameters, arguments, ruleSymbol);
        SyntaxMappingExpr.Call(node.Location, path, argumentExprs, syntaxMapping.ReturnType)
      }

      protected override CreateAstCtor(node : G.MapSyntaxExpression, astSymbol : AstSymbol, members : ListParseTree[G.MapSyntaxExpressionAstMember], closeBrace : NSpan, ruleSymbol : SyntaxRuleSymbol, compilerMessages : ICompilerMessages) : SyntaxMappingExpr
      {
        def loc = node.Location;
        def mappingFields = SCG.List();
        foreach (member in members)
          when (member.GetSyntaxMappingField(astSymbol, ruleSymbol) is VSome(mappingField))
            mappingFields.Add(mappingField);
        TypingUtils.CheckRequiredAstProperties(astSymbol, mappingFields, Location(loc.Source, closeBrace), compilerMessages);
        SyntaxMappingExpr.AstCtor(loc, astSymbol, mappingFields.ToNList())
      }

      protected override CreateListCtor(node : G.MapSyntaxExpression, astSymbol : AstSymbol, items : array[SyntaxMappingExpr]) : SyntaxMappingExpr
      {
        SyntaxMappingExpr.ListCtor(node.Location, astSymbol, items.ToNList())
      }

      protected override CreateOptionCtor(node : G.MapSyntaxExpression, astSymbol : AstSymbol, value : ValueOption[SyntaxMappingExpr]) : SyntaxMappingExpr
      {
        SyntaxMappingExpr.OptionCtor(node.Location, astSymbol, if (value.HasValue) Some(value.Value) else None())
      }

      private static ApplyArgumentTypes(parameters : list[SyntaxMappingParameter], arguments : SCG.IList[G.MapSyntaxExpression], ruleSymbol : SyntaxRuleSymbol, index : int = 0) : list[SyntaxMappingExpr]
      {
        match (parameters)
        {
          | []         => []
          | p :: other => arguments[index].Expression(ruleSymbol, p.Type) :: ApplyArgumentTypes(other, arguments, ruleSymbol, index + 1)
        }
      }
    }
  }
}
