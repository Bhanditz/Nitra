using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record]
  public abstract class AstVariableSymbol : LocalVariableSymbol
  {
    public abstract Type        : AstType           { get; }
    public abstract Expr        : SyntaxMappingExpr { get; }
    public override Description : string            { get { $"Variable $Name : $Type" } }
  }

  public sealed class ParsedAccumulatorAstVariableSymbol : AstVariableSymbol
  {
    private _node : G.MapSyntaxExpression.Fold;

    public this(node : G.MapSyntaxExpression.Fold)
    {
      def name = node.AccumulatorName1.Identifier();
      base(name, name.Value);
      _node = node;
    }

    public override Type : AstType           { get { _node.ReturnType } }
    public override Expr : SyntaxMappingExpr { get { assert2(false, "Expression not available"); SyntaxMappingExpr.Error(FirstLocation) } }
  }

  public sealed class ParsedAstVariableSymbol : AstVariableSymbol
  {
    private _node : G.MapSyntaxExpression.DefineVariable;

    public this(node : G.MapSyntaxExpression.DefineVariable)
    {
      def name = node.Name.Identifier();
      base(name, name.Value);
      _node = node;
    }

    public override Type : AstType           { get { _node.VariableType } }
    public override Expr : SyntaxMappingExpr { get { _node.VariableExpression } }
  }
}
