using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ProjectedDeclarationPropertySymbol : DeclarationPropertySymbol
  {
    public sealed override IsDependent                    : bool                              { get { false } }
    public sealed override IsSpecial                      : bool                              { get { false } }
    public        override Description                    : string                            { get "projected declaration property" }
    public sealed override IsAssignableFromInitialization : bool                              { get { false } }
    public        abstract ProjectionType                 : DeclarationPropertyProjectionType { get; }
  }

  public sealed class ParsedProjectedDeclarationPropertySymbol : ProjectedDeclarationPropertySymbol
  {
    private _node : G.DeclarationMember.Decompose.Nested.ProjectedProperty;

    public this(node : G.DeclarationMember.Decompose.Nested.ProjectedProperty)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override Type           : NType                             { get { _node.Type } }
    public override ProjectionType : DeclarationPropertyProjectionType { get { _node.ProjectionType } }
  }
}
