using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ParentAstPropertySymbol : AstPropertySymbol
  {
    public sealed override IsDependent : bool   { get { false } }
    public sealed override IsSpecial   : bool   { get { true } }
    public        override Description : string { get "parent declaration property" }
  }

  public sealed class ParsedParentAstPropertySymbol : ParentAstPropertySymbol
  {
    private _node : G.AstMember.SimpleProperty;

    public this(node : G.AstMember.SimpleProperty)
    {
      base(node.Name, node.Name.Value());
      _node = node;
    }

    public override Type    : NType   { get { _node.Type } }
    public override AstType : AstType { get { _node.AstType } }
  }
}
