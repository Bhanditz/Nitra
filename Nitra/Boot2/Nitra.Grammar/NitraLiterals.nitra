using Nitra.Utils;
using System.Text;

syntax module NitraLiterals
{
  using Nitra.Core;

  alias Char = Any;

  regex HexDigit = ['0'..'9', 'a'..'f', 'A'..'F'];

  literal Prefix = "\\u";

  [SpanClass(String)]
  token StringLiteral = "\""  StringPart* "\""
  {
    Value() : string = FoldThrough(StringParts, StringBuilder(), _.Value(_)).ToString();
    missing Value = "";

    regex ReservedStringChar = "\"" | "\\";

    token StringPart
    {
      Value(sb : StringBuilder) : StringBuilder;
      missing Value = sb;

      | UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit { override Value = sb.Append(HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos)); }
      | EscapeSequence        = "\\"  Char                                { override Value = sb.Append(UnescapeChar(FirstChar(Char))); }
      | Simple                = Chars=(!ReservedStringChar !NewLine Any)+ { override Value = sb.Append(this.GetText()); }
    }
  }

  [SpanClass(Char)]
  token CharLiteral = "\'"  CharPart "\'"
  {
    Value() : char = CharPart.Value();
    missing Value = '\0';

    regex ReservedCharChar = "\'" | "\\";

    token CharPart
    {
      Value() : char;
      missing Value = '\0';

      | Simple                = !ReservedCharChar Char                    { override Value = FirstChar(this.Char); }
      | UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit { override Value = HexToChar(this, HexDigit1.StartPos, HexDigit4.EndPos); }
      | EscapeSequence        = "\\" Char                                 { override Value = UnescapeChar(FirstChar(this.Char)); }
    }
  }

  [SpanClass(Number)]
  token Number = Digits
  {
    Value() : int = DecToInt(this, Digits.StartPos, Digits.EndPos);
    missing Value = 0;

    regex Digits = ['0'..'9']+;
  }
}
