using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal TypeAstInheritance(astInheritance : OptionParseTree[G.AstInheritance], context : Context, isDeclaration : bool) : list[AstSymbol]
    {
      mutable result = [];
      when (astInheritance.HasValue)
        result = astInheritance.Value.Typing(context, isDeclaration);

      when (isDeclaration)
      when ((context.Project :> NitraProject).DeclarationSymbolOpt is Some(astSymbol))
        result ::= astSymbol;

      result
    }

    internal BindAstInheritanceList(baseList : ListParseTree[G.QualifiedIdentifier], context : Context, isDeclaration : bool) : list[AstSymbol]
    {
      def result = LightList();
      foreach (identifier in baseList)
      {
        match (context.Bind.[AstSymbol](identifier))
        {
          | SymbolRef.Some(AbstractAstSymbol as astSymbol) as symbolRef =>
            if (!isDeclaration && astSymbol.IsDeclaration)
              context.Error(symbolRef, "Only abstract ast can be specified in base ast list.")
            else
              result.Add(astSymbol)

          | SymbolRef.Some as symbolRef => context.Error(symbolRef, "Only abstract declarations can be specified in base declarations list.");
          | _ => ()
        }
      }
      result.ToNList()
    }
  }
}
