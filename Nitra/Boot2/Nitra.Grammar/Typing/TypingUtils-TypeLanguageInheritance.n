using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal TypeLanguageInheritance(languageInheritance : OptionParseTree[SequenceParseTree[NSpan, G.QualifiedReference]], context : Context, symbol : LanguageSymbol) : SymbolRef[LanguageSymbol]
    {
      if (languageInheritance.HasValue)
        context.Bind(languageInheritance.Value.Item2)
      else if ((context.Project :> NitraProject).LanguageSymbolOpt is Some(languageSymbol) when (symbol : object != languageSymbol))
        SymbolRef.Some(languageInheritance.Location, true, languageSymbol)
      else
        SymbolRef.None(languageInheritance.Location, true)
    }
  }
}
