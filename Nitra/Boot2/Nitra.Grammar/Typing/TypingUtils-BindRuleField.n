using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindRuleField(ruleSymbol : SyntaxRuleSymbol, path : list[LocatedName], compilationMessages : ICompilerMessages) : RuleType
    {
      def eq(a : string, b : string)
      {
        String.Equals(a, b, StringComparison.InvariantCulture)
      }

      def reportError(name : LocatedName) : RuleType
      {
        compilationMessages.Error(name.Location, $"Unbound name '$(name.Id)'");
        RuleType.Void()
      }

      def bind(ruleType : RuleType, name : LocatedName, tail : list[LocatedName]) : RuleType
      {
        match (ruleType)
        {
          | Ref(symbol) =>
            def loop(rules : list[Rule])
            {
              | [] => reportError(name)
              | rule :: _ when eq(name.Id, rule.FieldName) =>
                match (tail)
                {
                  | [] => rule.Type
                  | nextName :: nextTail => bind(rule.Type, nextName, nextTail)
                }

              | _ :: otherRules => loop(otherRules)
            }
            loop(symbol.NonVoidSubRules)

          | Tuple(members) =>
            def loop(members, index)
            {
              match (members)
              {
                | [] => reportError(name)
                | member :: _ when eq(name.Id, "Item" + index.ToString()) =>
                  match (tail)
                  {
                    | [] => member
                    | nextName :: nextTail => bind(member, nextName, nextTail)
                  }

                | _ :: otherMembers => loop(otherMembers, index + 1)
              }
            }
            loop(members, 1)

          | _ => reportError(name)
        }
      }

      match (path)
      {
        | []           => assert(false, "No rule field name speciefied")
        | name :: tail => bind(RuleType.Ref(ruleSymbol), name, tail)
      }
    }
  }
}
