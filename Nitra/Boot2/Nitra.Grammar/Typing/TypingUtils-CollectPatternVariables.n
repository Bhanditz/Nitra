using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal CollectPatternVariables(pattern : ParseTreePattern, compilationMessages : ICompilerMessages) : SCG.Dictionary[string, ParseTreePattern.Var]
    {
      def result = SCG.Dictionary(StringComparer.InvariantCulture);
      def collect(pattern : ParseTreePattern) : void
      {
        | Var(name) as newVariable =>
          unless (newVariable.IsWildcard)
          {
            mutable existingVariable;
            if (result.TryGetValue(name.Id, out existingVariable))
            {
              using (relatedMessages = compilationMessages.RootError(name.Location, $"Redefinition of pattern variable '$(name.Id)'"))
                relatedMessages.Hint(existingVariable.Location, "Previous definition")
            }
            else
              result.Add(name.Id, newVariable)
          }

        | Ctor(_, args) => args.Iter(collect)
      }
      collect(pattern);
      result
    }
  }
}
