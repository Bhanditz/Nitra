using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public SetIdentifierSyntaxMapping(project : NitraProject) : void
    {
      when (project.RootNamespace.Node.BindMany.[AstSymbol](["Nitra", "Runtime", "Binding", "Reference"]) is [referenceSymbol])
      {
        foreach (symbol when symbol.AssemblyId == AssemblyIds.CurrentAssembly && symbol.Options.IsIdentifier in project.RootNamespace.Node.GetDescendants.[SyntaxRuleSymbol]())
        {
          when (symbol is SimpleRuleSymbol(Ast = AstType.Void))
          {
            def loc = symbol.FirstLocation;
            symbol.SetAst(AstType.Ast(loc, referenceSymbol));
            symbol.SetSyntaxMappingExpr(SyntaxMappingExpr.Code(loc, Util.locate(loc.NLocation(), <[ Nitra.Runtime.Binding.Reference(this) ]>)))
          }
        }
      }
    }
  }
}
