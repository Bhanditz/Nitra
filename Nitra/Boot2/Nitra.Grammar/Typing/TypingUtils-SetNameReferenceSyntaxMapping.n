using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public SetNameReferenceSyntaxMapping(project : NitraProject, managerClass : ManagerClass) : void
    {
      foreach (symbol when symbol.AssemblyId == AssemblyIds.CurrentAssembly in project.RootNamespace.Node.GetDescendants.[SimpleRuleSymbol]())
      {
        when (symbol.Options.IsReference)
        {
          when (project.ReferenceSymbolOpt is Some(referenceSymbol))
          {
            def loc            = symbol.FirstLocation;
            def returnType     = AstType.Ast(loc, referenceSymbol);
            def expr           = SyntaxMappingExpr.Code(loc, Util.locate(loc.NLocation(), <[ $(PExpr.FromQualifiedIdentifier(managerClass, referenceSymbol.FullName))(this) ]>));
            def mappingSymbol  = ChemicalSyntaxMappingSymbol(loc, symbol, [], returnType);
            mappingSymbol.SetExpression(expr);
            symbol.AddSyntaxMapping(mappingSymbol);
          }
        }

        when (symbol.Options.IsName)
        {
          when (project.NameSymbolOpt is Some(nameSymbol))
          {
            def loc           = symbol.FirstLocation;
            def returnType    = AstType.Ast(loc, nameSymbol);
            def expr          = SyntaxMappingExpr.Code(loc, Util.locate(loc.NLocation(), <[ $(PExpr.FromQualifiedIdentifier(managerClass, nameSymbol.FullName))(this) ]>));
            def mappingSymbol = ChemicalSyntaxMappingSymbol(loc, symbol, [], returnType);
            mappingSymbol.SetExpression(expr);
            symbol.AddSyntaxMapping(mappingSymbol);
          }
        }
      }
    }
  }
}
