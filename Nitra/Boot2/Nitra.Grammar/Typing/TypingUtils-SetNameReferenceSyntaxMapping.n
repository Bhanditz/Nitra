using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public SetNameReferenceSyntaxMapping(project : NitraProject) : void
    {
      mutable referenceSymbolOpt;
      mutable nameSymbolOpt;

      foreach (symbol when symbol.AssemblyId == AssemblyIds.CurrentAssembly in project.RootNamespace.Node.GetDescendants.[SimpleRuleSymbol]())
      {
        when (symbol.Options.IsReference)
        {
          when (referenceSymbolOpt : object == null)
            referenceSymbolOpt = project.BindWellKnownSymbol(["Nitra", "Runtime", "Binding", "Reference"]);

          when (referenceSymbolOpt is Some(referenceSymbol))
          {
            def loc            = symbol.FirstLocation;
            def returnType     = AstType.Ast(loc, referenceSymbol);
            def expr           = SyntaxMappingExpr.Code(loc, Util.locate(loc.NLocation(), <[ Nitra.Runtime.Binding.Reference(this) ]>));
            def mappingSymbol  = ChemicalSyntaxMappingSymbol(symbol, [], returnType, expr);
            symbol.AddSyntaxMapping(mappingSymbol);
          }
        }

        when (symbol.Options.IsName)
        {
          when (nameSymbolOpt : object == null)
            nameSymbolOpt = project.BindWellKnownSymbol(["Nitra", "Runtime", "Binding", "Name"]);

          when (nameSymbolOpt is Some(nameSymbol))
          {
            def loc           = symbol.FirstLocation;
            def returnType    = AstType.Ast(loc, nameSymbol);
            def expr          = SyntaxMappingExpr.Code(loc, Util.locate(loc.NLocation(), <[ Nitra.Runtime.Binding.Name(this) ]>));
            def mappingSymbol = ChemicalSyntaxMappingSymbol(symbol, [], returnType, expr);
            symbol.AddSyntaxMapping(mappingSymbol);
          }
        }
      }
    }
  }
}
