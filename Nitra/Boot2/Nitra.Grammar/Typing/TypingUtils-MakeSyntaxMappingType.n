using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal MakeSyntaxMappingType(context : Context, declarationProperty : DeclarationPropertySymbol, path : ParseTreePath, errorLoc : Location) : option[SyntaxMappingType]
    {
      mutable errorReported;

      def filterNonKeywords(members : list[RuleType], index : int) : list[int * RuleType]
      {
        match (members)
        {
          | [] => []
          | RuleType.Chars(Keyword = Some) :: rest => filterNonKeywords(rest, index + 1)
          | x :: rest => (index, x) :: filterNonKeywords(rest, index + 1)
        }
      }

      def buildType(ruleType : RuleType, astType : NType) : SyntaxMappingType
      {
        match (ruleType, astType)
        {
          | (List(ruleItemType), List(astItemType))
          | (List(ruleItemType), OptionList(astItemType)) =>
            match (buildType(ruleItemType, astItemType))
            {
              | null => null
              | t    => SyntaxMappingType.List(t, ruleType)
            }

          | (Option(ruleItemType), Option(astItemType)) =>
            match (buildType(ruleItemType, astItemType))
            {
              | null => null
              | t    => SyntaxMappingType.Option(t, ruleType)
            }

          | (Ref(SyntaxRuleSymbol(Declaration = SymbolRef.Some(sourceDeclarationSymbol))), Qualified as targetName) =>
            def targetDeclarationRef = context.Bind.[DeclarationSymbol](targetName);
            if (targetDeclarationRef is SymbolRef.Some(targetDeclarationSymbol))
            {
              if (sourceDeclarationSymbol.IsSubtypeOf(targetDeclarationSymbol))
                SyntaxMappingType.Ref(targetDeclarationSymbol)
              else
              {
                context.Error(errorLoc, $"Declaration '$(sourceDeclarationSymbol.FullName)' is not subtype of declaration '$(targetDeclarationSymbol.FullName)'", -1);
                errorReported = true;
                null
              }
            }
            else
            {
              errorReported = true;
              null
            }

          | (Tuple(members), _) =>
            if (filterNonKeywords(members, 1) is [(index, nonKeyword)])
              match (buildType(nonKeyword, astType))
              {
                | null => null
                | t    => SyntaxMappingType.Tuple(index, t)
              }
            else
              null

          | _ => null
        }
      }

      def astType = declarationProperty.Type;
      match (buildType(path.Type, astType))
      {
        | null =>
          unless (errorReported)
            context.Error(errorLoc, $"Cannot map '$(path.Type)' to '$(astType)'", -1);
          None()

        | t    => Some(t)
      }
    }
  }
}
