using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal MakeAstPropertyProjectionType(thisType : NType, projectionSource : SimpleAstPropertySymbol, baseType : AstSymbol, context : Context) : option[AstPropertyProjectionType]
    {
      def bind(name : NType.Qualified, ctor : _ * _ -> AstPropertyProjectionType) : option[AstPropertyProjectionType]
      {
        if (context.Bind.[AstSymbol](name) is SymbolRef.Some(targetType))
        {
          if (targetType.IsSubtypeOf(baseType))
            Some(ctor(projectionSource, targetType))
          else
          {
            context.Error(name, $"Declaration '$(targetType.FullName)' is not subtype of declaration '$(baseType.FullName)'.");
            None()
          }
        }
        else None()
      }

      if (projectionSource : object != null && baseType : object != null)
      {
        match (thisType)
        {
          | OptionList(Qualified as name) => bind(name, AstPropertyProjectionType.OptionList)
          | List      (Qualified as name) => bind(name, AstPropertyProjectionType.List)
          | Option    (Qualified as name) => bind(name, AstPropertyProjectionType.Option)
          | Qualified as name             => bind(name, AstPropertyProjectionType.Single)
          | t =>
            context.Error(t, $"Invalid property type '$t'.");
            None()
        }
      }
      else None()
    }
  }
}
