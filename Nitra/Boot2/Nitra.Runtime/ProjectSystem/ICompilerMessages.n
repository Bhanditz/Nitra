using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  public interface ICompilerMessages
  {
    ReportMessage    (messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void;
    ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages;
  }

  public module ICompilerMessagesExtensions
  {
    public FatalError[T](this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : T                     { messages.ReportMessage    (CompilerMessageType.FatalError, loc.Location, msg, num); assert(false, msg) }
    public FatalError[T](this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : T                     { messages.ReportMessage    (CompilerMessageType.FatalError, loc,          msg, num); assert(false, msg) }

    public Error        (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Error,      loc.Location, msg, num) }
    public Error        (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Error,      loc,          msg, num) }
    public RootError    (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Error,      loc.Location, msg, num) }
    public RootError    (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Error,      loc,          msg, num) }

    public Warning      (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Warning,    loc.Location, msg, num) }
    public Warning      (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Warning,    loc,          msg, num) }
    public RootWarning  (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Warning,    loc.Location, msg, num) }
    public RootWarning  (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Warning,    loc,          msg, num) }

    public Hint         (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Hint,       loc.Location, msg, num) }
    public Hint         (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : void                  { messages.ReportMessage    (CompilerMessageType.Hint,       loc,          msg, num) }
    public RootHint     (this messages : ICompilerMessages, loc : Located,  msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Hint,       loc.Location, msg, num) }
    public RootHint     (this messages : ICompilerMessages, loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { messages.ReportRootMessage(CompilerMessageType.Hint,       loc,          msg, num) }
  }
}
