using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public class CollectSymbolErrorsVisitor : IAstVisitor
  {
    public CompilerMessages : CompilerMessageList = CompilerMessageList();

    public Visit(parseTree : IAst) : void
    {
      parseTree.Accept(this);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      when (reference.IsRefEvaluated)
      {
        match (reference.Ref)
        {
          | Some => ()
          | Ambiguous as sym =>
            unless (sym.IsSymbolEvaluated)
            using (err = CompilerMessages.RootError(reference, $<#Symbol '$reference' is ambiguous.#>))
              foreach (ambiguous in sym.Ambiguities with i)
              {
                def head = ambiguous.Declarations.FirstOrDefault();
                when (head : object != null)
                  err.Hint(head.Name, $<#Declaration $i#>);
              }

          | Unresolved => CompilerMessages.Error(reference, $"Unresolved reference '$reference'");
        }
      }
    }
    
    public Visit(_ : Name) : void implements IAstVisitor.Visit
    {
    }
  }
}
