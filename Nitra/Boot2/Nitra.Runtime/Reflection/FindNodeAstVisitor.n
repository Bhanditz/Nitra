using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Runtime.Reflection
{
  public class FindNodeAstVisitor : IAstVisitor
  {
    private _span : NSpan;
    public Stack : SCG.Stack[IAst]= SCG.Stack();

    public this(span : NSpan) { _span = span; }

    public Visit(parseTree : IAst) : void
    {
      when (parseTree.Span.IntersectsWith(_span))
      {
        Stack.Push(parseTree);
        parseTree.Accept(this);
      }
    }

    public Visit(reference : IReference) : void implements IAstVisitor.Visit
    {
      when (reference.Span.IntersectsWith(_span))
        Stack.Push(reference);
    }
    
    public Visit(name : IName) : void implements IAstVisitor.Visit
    {
      when (name.Span.IntersectsWith(_span))
        Stack.Push(name);
    }
  }
}
