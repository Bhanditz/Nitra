using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

using SCG = System.Collections.Generic;

namespace Nitra.Runtime.Binding
{
  public module SymbolUtils
  {
    public static ReportError[TSymbol](r : Ref[TSymbol]) : void
      where TSymbol : DeclarationSymbol
    {
      match (r)
      {
        | Unresolved as us => AstContext.CompilerMessages.Error(us, $<#Unbound name '$(us.Name)'.#>);
        | Ambiguous as sym =>
          def e = sym.AllDeclarations.GetEnumerator();
          if (e.MoveNext())
          {
            mutable index = 1;
            def firstName = e.Current.Name;
            using (err = AstContext.CompilerMessages.RootError(firstName, $<#Symbol '$(firstName)' is ambiguous.#>))
            {
              while (e.MoveNext())
              {
                def otherName = e.Current.Name;
                err.Hint(otherName, $<#Declaration $index#>);
                ++index;
              }
            }
          }
          else
            assert(false, "Ambiguous symbol without declarations detected!");

        | Some => ()
      }
    }

    private static mutable _symbolIdCounter : int = 0;

    public static CreateSymbolId() : int
    {
      Interlocked.Increment(ref _symbolIdCounter)
    }

    public static GetSymbolName[TDeclaration](isNameValid : bool, declarationStore : object) : string
      where TDeclaration : Declaration
    {
      match (declarationStore)
      {
        | d   is Declaration        when isNameValid => d.Name.Text
        | lst is list[TDeclaration] when isNameValid => lst.Head.Name.Text
        | _ => "<invalid name>"
      }
    }

    public static GetDeclarations[TDeclaration](declarationStore : object) : Seq[TDeclaration]
      where TDeclaration : Declaration
    {
      | lst is list[TDeclaration] => lst
      | _ => []
    }

    public static GetDeclarationsUntyped[TDeclaration](declarationStore : object) : Seq[Declaration]
      where TDeclaration : Declaration
    {
      | lst is list[TDeclaration] => lst
      | d   is Declaration        => [d]
      | _                         => []
    }

    public static AddDeclaration[TDeclaration](newDeclaration : Declaration, isNameValid : ref bool, declarationStore : ref object) : void
      where TDeclaration : Declaration
    {
      assert(newDeclaration : object != null);

      match (newDeclaration, declarationStore)
      {
        | (newDecl is TDeclaration, null) =>
          isNameValid      = true;
          declarationStore = [newDecl];

        | (newDecl is TDeclaration, declarations is list[TDeclaration]) =>
          match (declarations)
          {
            | [] => isNameValid = true;
            | f :: _ when isNameValid => isNameValid = f.Name.Id == newDecl.Name.Id
            | _ => ()
          }

          declarationStore = newDecl :: declarations;

        | (newDecl is TDeclaration, d is Declaration) =>
          when (isNameValid)
            isNameValid = d.Name.Id == newDecl.Name.Id;

          declarationStore = [newDecl];

        | (_, null) =>
          isNameValid      = true;
          declarationStore = newDeclaration;

        | _ => assert(false, $"Unable to add declaration '$newDeclaration' to '$declarationStore'");
      }
    }

    public static ToXaml(symbol : DeclarationSymbol) : string
    {
      def builder = StringBuilder(symbol.Name);
      when (symbol.IsKindEvaluated)
        _ = builder.Append(" <Span Foreground = 'blue'>").Append(symbol.Kind).Append("</Span>");
      builder.ToString();
    }

    public static ToString(symbol : DeclarationSymbol) : string
    {
      def builder = StringBuilder(symbol.Name);
      when (symbol.IsKindEvaluated)
        _ = builder.Append(" (").Append(symbol.Kind).Append(")");
      builder.ToString();
    }
  }
}
