using Nitra.Declarations;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public sealed class UnionScope : Scope
  {
    public Scopes : list[Scope] { get; }

    internal this(scopes : list[Scope])
    {
      Scopes = scopes;
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      foreach (scope in Scopes)
        scope.FindMany(predicate, ref results);
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      foreach (scope in Scopes)
        scope.BindMany(reference, ref results)
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      Scopes.SelectMany(_.MakeCompletionList(prefix))
    }

    public override ToString() : string
    {
      $<# Union(..$(Scopes))#>
    }
  }
}
