using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol = Nitra.Runtime.Binding.Symbol2;

namespace Nitra.Runtime.Binding
{
  public variant Scope
  {
    | Table
      {
        [RecordIgnore] private _nameTable : Hashtable[int, Symbol];
        
        public this() { _nameTable = Hashtable(); }
        
        public Symbols : Hashtable[int, Symbol].ValueCollection { get { _nameTable.Values } }
        
        public DefineSymbol(symbol : Symbol) : void
        {
          mutable old;
          when (_nameTable.TryGetValue(symbol.Name.Id, out old))
          {
            def cm = AstContext.CompilerMessages;
            using(nested = cm.RootError(symbol.Name, $"The current scope already contains a definition for '$(symbol.Name)'."))
              nested.Hint(old.Name, "previous definition.");

            if (old is AmbiguousSymbol as amb)
              amb.Ambiguous ::= symbol;
            else
              _nameTable[symbol.Name.Id] = AmbiguousSymbol(old.Name, [old, symbol]);

            return;
          }
    
          _nameTable.Add(symbol.Name.Id, symbol);
        }

        public DefineNestedSymbol(parentSymbol : HierarchicalSymbol, symbol : HierarchicalSymbol) : void
        {
          mutable old;
          when (_nameTable.TryGetValue(symbol.Name.Id, out old))
          {
            AstContext.CompilerMessages.Error(symbol.Name, 
              $"The $(parentSymbol.Kind) '$(parentSymbol.FullName)' already contains a definition for '$(symbol.Name)'");

            if (old is AmbiguousHierarchicalSymbol as amb)
              amb.Ambiguous ::= symbol;
            else
              _nameTable[old.Name.Id] = AmbiguousHierarchicalSymbol(old.Name, symbol.Parent, [old :> HierarchicalSymbol, symbol]);

            return;
          }
          
          this._nameTable.Add(symbol.Name.Id, symbol);
        }

        public GetOrDefineSymbol(symbol : Symbol) : Symbol
        {
          mutable old;
          when (_nameTable.TryGetValue(symbol.Name.Id, out old))
            return old;
          
          _nameTable.Add(symbol.Name.Id, symbol);
          symbol
        }
        
        public TryGetSymbol(name : IName) : Symbol
        {
          mutable old;
          when (_nameTable.TryGetValue(name.Id, out old))
            return old;
          
          null
        }

        public TryGetSymbol(name : IReference) : Symbol
        {
          mutable old;
          when (_nameTable.TryGetValue(name.Id, out old))
            return old;
          
          null
        }

        public override ToString() : string { $<#[..$(_nameTable.Keys; ", "; StringIndex.GetText)]#> }
      }

    | Union  { public Scopes : list[Scope] { get; } }
    | Hide   { public Scope  : Scope       { get; } public Hidden : Scope { get; } }
    | Filter { public Scope  : Scope       { get; } public Predicate : Symbol -> bool { get; } }
    | Nil
    
    public static IsPrefixOf(this prefix : string, text : string) : bool
    {
      text.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase)
    }

    public MakeComletionList(prefix : string) : Seq[Symbol2]
    {
      match (this)
      {
        | Table  as s => if (string.IsNullOrEmpty(prefix)) s.Symbols else s.Symbols.Where(s => prefix.IsPrefixOf(s.Name.Text))
        | Union  as s => s.Scopes.SelectMany(s => s.MakeComletionList(prefix))
        | Filter as s => s.Scope.MakeComletionList(prefix).Where(s.Predicate)
        | Nil         => Enumerable.Empty()
        | Hide   as s =>
          def hiding = s.Scope.MakeComletionList(prefix).ToDictionary(s => s.Id);
          def result = List(hiding.Values);
          
          foreach (symbol in s.Hidden.MakeComletionList(prefix))
            when (!hiding.ContainsKey(symbol.Id))
              result.Add(symbol);

          result
      }
    }
    
    public Bind(reference : IReference) : Symbol
    {
      def sym = TryBind(reference);
      Symbol.ReportError(reference, sym);
      sym
    }
    
    /// Если не может связать возвращает AmbiguousSymbol или UnresolvedSymbol.
    public TryBind(reference : IReference) : Symbol
    {
      def result = BindMany(reference);
      match (result.Count)
      {
        | 0 => UnresolvedSymbol(reference.ToName())
        | 1 => result[0]
        | _ => AmbiguousSymbol(reference.ToName(), result.NToList())
      }
    }
    
    public BindMany(reference : IReference) : List[Symbol]
    {
      def results = List(2);
      def bindManyImpl(thisScope : Scope, reference : IReference, results : List[Symbol]) : void
      {
        match (thisScope)
        {
          | Table as s =>
            def result = s.TryGetSymbol(reference);
            when (result != null)
              results.Add(result);
          
          | Union as s => 
            foreach (scope in s.Scopes)
              bindManyImpl(scope, reference, results);

          | Hide as s => 
            def binded = results.Count;
            bindManyImpl(s.Scope, reference, results);
            when (binded == results.Count)
              bindManyImpl(s.Hidden, reference, results);
        
          | Filter as s =>
            def notFilteredResults = List();
            bindManyImpl(s.Scope, reference, notFilteredResults);
            foreach (sym in notFilteredResults)
              when (s.Predicate(sym))
                results.Add(sym);
          
          | Nil => ()
        }
      }
      
      bindManyImpl(this, reference, results);
      results
    }
    
    public override ToString() : string
    {
      match (this)
      {
        | Table       => assert3(false)
        | Union  as s => $<# Union(..$(s.Scopes))#>
        | Hide   as s => $<#$(s.Scope) hide $(s.Hidden)#>
        | Filter      => "Filter"
        | Nil => ""
      }
    }
  }
}
