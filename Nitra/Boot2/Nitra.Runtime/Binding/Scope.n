using Nitra.Declarations;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public variant Scope
  {
    | Table
      {
        NameTable : Hashtable[IReference, Symbol];
        
        public Define(_symbol : Symbol, _declaration : IDeclaration) : void
        {
          //mutable old;
          //when (NameTable.TryGetValue(symbol.Name2, out old))
          //{
          //  // TODO: Report error messages.Error()
          //  //def project = declaration.File.Project;
          //  //project.Error(declaration.Name, "....");
          //  return;
          //}
          //
          //NameTable.Add(symbol.Name2, symbol);
        }
      }
    | Union  { Scopes : list[Scope] }
    | Hide   { Scope : Scope; Hidden : Scope; }
    | Filter { Scope : Scope; Predicate : Symbol -> bool; }
    | Nil
  }
}
