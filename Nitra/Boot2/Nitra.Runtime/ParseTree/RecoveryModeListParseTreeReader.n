using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal class RecoveryModeListParseTreeReader[TLoader, TItem] : RecoveryModeBaseListParseTreeReader[RecoveryModeParseTreeReaderContext[TLoader, TItem], SCG.List[TItem], ListParseTree[TItem]]
    where TLoader : IParseTree
    where TItem   : TLoader
  {
    public static Instance : this;

    static this() { Instance = RecoveryModeListParseTreeReader() }

    protected sealed override MakeAmbiguousParseTree(ambiguities : array[ListParseTree[TItem]], context : RecoveryModeParseTreeReaderContext[TLoader, TItem]) : ListParseTree[TItem]
    {
      _ = context;
      AmbiguousListParseTree(ambiguities)
    }

    protected sealed override MakeEmptyParseTree(parseResult : ParseResult, pos : int, context : RecoveryModeParseTreeReaderContext[TLoader, TItem]) : ListParseTree[TItem]
    {
      _ = context;
      EmptyListParseTree(Location(parseResult, pos, pos))
    }

    protected sealed override CreateListBuffer() : SCG.List[TItem]
    {
      SCG.List()
    }

    protected override ReadListItem(stateNumber : int, parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, listBuffer : SCG.List[TItem], context : RecoveryModeParseTreeReaderContext[TLoader, TItem]) : void
    {
      _ = stateNumber;
      RecoveryModeSequenceParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeSequenceParseTreeReaderContext(context.ItemLoader, context.ItemSequenceId))
        |> context.ItemConverter.Cast
        |> listBuffer.Add;
    }

    protected sealed override CreateListAst(parseResult : ParseResult, startPos : int, endPos : int, listBuffer : SCG.List[TItem]) : ListParseTree[TItem]
    {
      ConcreteListParseTree(Location(parseResult, startPos, endPos), listBuffer)
    }
  }
}
