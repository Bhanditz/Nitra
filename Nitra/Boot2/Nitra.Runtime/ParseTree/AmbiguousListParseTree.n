using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public sealed class AmbiguousListParseTree[T] : ListParseTree[T], IAmbiguousParseTree
    where T : IParseTree
  {
    public this(ambiguities : array[ListParseTree[T]])
    {
      Ambiguities = ambiguities;
    }

    public override IsAmbiguous       : bool              { get true }
    public          Ambiguities       : array[ListParseTree[T]] { get; }
    public          AmbiguityType     : ParseTreeAmbiguityType { get ParseTreeAmbiguityType.Recovery }
    public override Location          : Location          { get Ambiguities[0].Location }
    public override Count             : int               { get throw NotSupportedException("List is ambiguous") }
    public override Item[index : int] : T                 { get { _ = index; throw NotSupportedException("List is ambiguous") } }

    public override UpdateItems(newItems : SCG.List[T]) : ListParseTree[T]
    {
      _ = newItems;
      throw NotSupportedException("List is ambiguous")
    }

    public override GetEnumerator() : SCG.IEnumerator[T]
    {
      throw NotSupportedException("List is ambiguous")
    }
  }
}
