using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class DeclarationOption[T] : Declaration
    where T : Declaration
  {
    private this() {}

    public abstract HasValue : bool { get; }
    public abstract Value    : T    { get; }

    public sealed class Some : DeclarationOption[T]
    {
      public this(parent : Declaration, span : NSpan)
      {
        Parent = parent;
        Span   = span;
      }

      public Initialize(value : T) : void
      {
        assert(_value == null);
        _value = value;
      }

      private mutable _value : T;

      public override Parent   : Declaration { get; }
      public override Span     : NSpan       { get; }
      public override HasValue : bool        { get { assert(_value != null); true } }
      public override Value    : T           { get { assert(_value != null); _value } }
    }

    public sealed class None : DeclarationOption[T]
    {
      public this(parent : Declaration, span : NSpan)
      {
        Parent = parent;
        Span   = span;
      }

      public override Parent   : Declaration { get; }
      public override Span     : NSpan       { get; }
      public override HasValue : bool        { get { false } }
      public override Value    : T           { get { throw NotSupportedException("DeclarationOption is None") } }
    }
  }
}
