using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public module DeclarationUtils
  {
    public GetDeclarationAmbiguities[TParseTree, TParent, TDeclaration](parent : TParent, ambiguities : array[TParseTree]) : array[TDeclaration]
      where TParseTree   : IDeclarableParseTree[TParent, TDeclaration]
      where TParent      : IDeclarationPart
      where TDeclaration : IDeclarationPart
    {
      def result = array(ambiguities.Length);
      foreach (node in ambiguities with index)
        result[index] = node.GetDeclaration(parent);
      result
    }

    public GetDeclarations[TParseTree, TParent, TDeclaration](parent : TParent, items : ListParseTree[TParseTree]) : array[TDeclaration]
      where TParseTree   : IDeclarableParseTree[TParent, TDeclaration]
      where TParent      : IDeclarationPart
      where TDeclaration : IDeclarationPart
    {
      def declarations = array(items.Count);
      foreach (node in items with index)
        declarations[index] = node.GetDeclaration(parent);
      declarations
    }

    public MakeOption[TParseTree, TParent, TDeclaration](parent : TParent, item : OptionParseTree[TParseTree]) : DeclarationOption[TDeclaration]
      where TParseTree   : IDeclarableParseTree[TParent, TDeclaration]
      where TParent      : IDeclarationPart
      where TDeclaration : IDeclarationPart
    {
      if (item.HasValue)
      {
        def value = item.Value.GetDeclaration(parent);
        DeclarationOption.Some(parent, item.Location.Span, value)
      }
      else
        DeclarationOption.None(parent, item.Location.Span)
    }
  }
}
