using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public abstract class OptionAst[T] : Ast where T : IAst
  {
    public abstract HasValue : bool { get; }
    public abstract Value    : T    { get; }

    [Obsolete] public IsSome : bool { get HasValue }
    [Obsolete] public Item   : T    { get Value }

    [Record]
    public sealed class Some : OptionAst[T]
    {
      private static applyItem : bool = CanApplyVisitor.[T]();

      public override Location : Nitra.Location { get }
      public override HasValue : bool           { get true }
      public override Value    : T              { get }

      public override Apply(visitor : AstVisitor) : Ast
      {
        visitor.Enter(this);
        mutable result = this;
        mutable isDirty;
        when (applyItem)
        {
          def newItem = visitor.Visit(Value :> Ast) :> T;
          unless (ReferenceEquals(newItem, Value))
          {
            isDirty = true;
            result = OptionAst.Some(this.Location, newItem)
          }
        }
        visitor.Leave(this, result);
        result
      }
    }

    [Record]
    public sealed class None : OptionAst[T]
    {
      public override Location : Nitra.Location { get }
      public override HasValue : bool           { get false }
      public override Value    : T              { get throw NotSupportedException("Option is None") }
    }
  }
}
