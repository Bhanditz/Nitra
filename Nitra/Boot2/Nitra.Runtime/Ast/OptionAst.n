using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public abstract class OptionAst[T] : Ast where T : IAst
  {
    public abstract IsSome : bool { get; }

    public abstract ToNOption() : option[T];

    public abstract Item : T { get }

    [Record]
    public sealed class Some : OptionAst[T]
    {
      private static applyItem : bool = CanApplyVisitor.[T]();

      public override Location : Nitra.Location { get }

      public override Item : T { get }

      public override IsSome : bool { get true }

      public override ToNOption() : option[T] { Some(Item) }

      public override Apply(visitor : AstVisitor) : Ast
      {
        visitor.Enter(this);
        mutable result = this;
        mutable isDirty;
        when (applyItem)
        {
          def newItem = visitor.Visit(Item :> Ast) :> T;
          unless (ReferenceEquals(newItem, Item))
          {
            isDirty = true;
            result = OptionAst.Some(this.Location, newItem)
          }
        }
        visitor.Leave(this, result);
        result
      }
    }

    [Record]
    public sealed class None : OptionAst[T]
    {
      public override Location : Nitra.Location { get }

      public override Item : T { get throw NotSupportedException("Option is None") }

      public override IsSome : bool { get false }

      public override ToNOption() : option[T] { None() }
    }
  }
}
