using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  [Record]
  public abstract class StartRuleParser : RuleParser, IRecoveryRuleParser
  {
    public abstract Parse(pos : int, text : string, parseResult : ParseResult) : int;

    public abstract IsStateCanParseEmptyString   (state : int) : bool;
    public abstract IsVoidState                  (state : int) : bool;
    public abstract IsStartState                 (state : int) : bool;
    public abstract GetStartState                (state : int) : int;
    public abstract IsLoopSeparatorStart         (state : int) : bool;
    public abstract IsLoopSeparator              (state : int) : bool;
    public abstract IsLoopBody                   (state : int) : bool;
    public abstract CodeForState                 (state : int) : string;
    public abstract CodeForStates                (startState : int, endState : int, skipOptionalStates : bool) : array[string];
    public abstract GetNextState                 (state : int) : int;
    public abstract GetOffsetForState            (state : int) : int;
    public abstract GetMandatoryTokensForState   (state : int) : int;

    public abstract GetLoopBodyForSeparator(separatorId : int, bodyId : out int, firstState : out int) : bool;

    public abstract GetRuleParserForState(state : int) : IRecoveryRuleParser * int;

    public abstract StartState      : int    { get; }
    public abstract Code            : string { get; }
    public abstract CodeWithStates  : string { get; }
    public abstract RuleName        : string { get; }

    public abstract StartRuleId : int  { get; }//TODO: Rename
  }
}
