using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    private InsertSubrules(maxPos : int) : void
    {
      //def sequences = SCG.HashSet(Records[maxPos].Keys.Select(r => r.Sequence));

      def toProcess = SCG.Stack(Records[maxPos].KeyValuePairs);
      def processed = Hashtable();
      while (toProcess.Count > 0)
      {
        def (record, tokenChanges) = toProcess.Pop();

        mutable oldTokenChanges;
        when (processed.TryGetValue(record, out oldTokenChanges) && oldTokenChanges <= tokenChanges)
          continue;

        processed[record] = tokenChanges;
        when (record.IsComplete)
          continue;

        when (record.Sequence.IsToken && record.ParsingState.IsStart)
          continue;

        def state = record.Sequence.ParsingSequence.States[record.State];
        when (state.IsNullable)
          continue;

        def subruleTokenChanges = TokenChanges(inserted = state.MandatoryTokenCount, deleted = 0);
        SubruleParsed(maxPos, maxPos, record, tokenChanges, subruleTokenChanges);
        foreach (nextState in state.Next)
        {
          def nextRecord = ParseRecord(record.Sequence, nextState, maxPos);
          toProcess.Push(nextRecord, tokenChanges + subruleTokenChanges);
        }
      }

      //foreach (sequence in sequences)
      //{
      //  when (sequence.IsToken)
      //    continue;
      //  foreach (subrule in sequence.ParsedSubrules.Keys.ToArray())
      //  {
      //    def state = sequence.ParsingSequence.States[subrule.State];
      //    def subruleTokenChanges = TokenChanges(inserted = state.MandatoryTokenCount, deleted = 0);
      //    def pos = subrule.Begin;
      //    def record = ParseRecord(sequence, subrule.State, pos);
      //    def tokenChanges = Records[pos][record];
      //    SubruleParsed(pos, pos, record, tokenChanges, subruleTokenChanges);
      //  }
      //}
    }
  }
}
