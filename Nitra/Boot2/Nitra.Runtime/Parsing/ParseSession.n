using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;
using Nitra.Runtime.Errors;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using System.Text;
using System.Threading;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public class ParseSession
  {
    public static DeafultRecoveryTimeout : TimeSpan = TimeSpan.FromMilliseconds(200);

    public this(
      [NotNull] sourceSnapshot      : SourceSnapshot,
                startRuleDescriptor : StartRuleDescriptor,
                compositeGrammar    : CompositeGrammar  = null,
                completionPrefix    : string            = null,
                completionStartPos  : int               = -1,
                cancellationToken   : CancellationToken = default(CancellationToken),
                parseToEndOfString  : bool              = true,
                recoveryTimeout     : TimeSpan          = default(TimeSpan))
    {
      this._compositeGrammar    = compositeGrammar;
      this._sourceSnapshot      = sourceSnapshot;
      this._startRuleDescriptor = startRuleDescriptor;
      this._completionPrefix    = completionPrefix;
      this._completionStartPos  = completionStartPos;
      this._cancellationToken   = cancellationToken;
      this._parseToEndOfString  = parseToEndOfString;
      this._recoveryTimeout     = if (recoveryTimeout == default(TimeSpan)) DeafultRecoveryTimeout else recoveryTimeout;
    }

    public SourceText          : string              { get { _sourceSnapshot.Text } set { Check();                        _sourceSnapshot      = SourceSnapshot(value); } }
    public SourceSnapshot      : SourceSnapshot      { get { _sourceSnapshot      } set { Check(); assert(value != null); _sourceSnapshot      = value; } }
    public StartRuleDescriptor : StartRuleDescriptor { get { _startRuleDescriptor } set { Check();                        _startRuleDescriptor = value; } }
    public CompositeGrammar    : CompositeGrammar    { get { _compositeGrammar    } set { Check();                        _compositeGrammar    = value; } }
    public CompletionPrefix    : string              { get { _completionPrefix    } set { Check();                        _completionPrefix    = value; } }
    public CompletionStartPos  : int                 { get { _completionStartPos  } set { Check();                        _completionStartPos  = value; } }
    public CancellationToken   : CancellationToken   { get { _cancellationToken   } set { Check();                        _cancellationToken   = value; } }
    public ParseToEndOfString  : bool                { get { _parseToEndOfString  } set { Check();                        _parseToEndOfString  = value; } }
    public RecoveryTimeout     : TimeSpan            { get { _recoveryTimeout     } set { Check();                        _recoveryTimeout     = value; } }

    Check() : void { assert(!_parsingInProgress, "The property can not be changed during parsing."); }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _sourceSnapshot      : SourceSnapshot;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _startRuleDescriptor : StartRuleDescriptor;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _compositeGrammar    : CompositeGrammar;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _completionPrefix    : string;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _completionStartPos  : int;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _cancellationToken   : CancellationToken;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _parseToEndOfString  : bool;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _parsingInProgress   : bool;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)] mutable _recoveryTimeout     : TimeSpan;

    public Parse() : IParseResult
      requires this.StartRuleDescriptor != null
    {
      when (this.CompositeGrammar == null)
        this.CompositeGrammar = ParserHost.Instance.DefaultCompositeGrammar.Add(this.StartRuleDescriptor.Grammar);

      _parsingInProgress = true;
      try
      {
        def parseResult = ParseResult(this);
        parseResult.Parse();
        parseResult
      }
      finally _parsingInProgress = false;
    }
  }
}
