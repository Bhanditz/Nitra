using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;
using Nitra.Runtime.Errors;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using System.Text;
using System.Threading;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public interface IParseResult : ISourceSnapshotProvider
  {
    SourceSnapshot   : SourceSnapshot                      { get; }
    ParseEnd         : int                                 { get; }
    ParseSession     : ParseSession                        { get; }
    IsSuccess        : bool                                { get; }
    Ambiguous        : option[AmbiguousException]          { get; }
    Trivia           : array[SCG.KeyValuePair[NSpan, int]] { get; }
    ParserHost       : ParserHost                          { get; }

    GetErrors() : array[Error];
    CreateParseTree() : ParseTree;
    GetSpans(startPos : int, endPos : int, spans : SCG.HashSet[SpanInfo]) : void;
    GetOutlining(outlining : SCG.List[OutliningInfo]) : void;
    Reflect() : ReflectionStruct;
  }
}
