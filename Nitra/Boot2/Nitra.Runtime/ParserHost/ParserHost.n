using Nemerle;
using Nemerle.Imperative;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.Internal;
using Nitra.Runtime;

using System;
using System.Linq;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial sealed class ParserHost
  {
    private _syncRoot : object = object();

    public DefaultCompositeGrammar : CompositeGrammar { get; }

    public static Instance : ParserHost { get; default ParserHost() }

    private this()
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
      _compositeGrammars[DefaultCompositeGrammar.Grammars] = DefaultCompositeGrammar;
    }

    internal RuleParsers[ruleId : int] : object
    {
      get { _allRules[ruleId] }
    }

    internal ErrorId : int
    {
      get
      {
        foreach (parser in _allRules with id)
        {
          | SimpleRuleParser as parser =>
            when (parser.Descriptor.Name == "s")//TODO: Hardcode
            {
              def info = parser.Reflection(id);
              when (info.Description == "IgnoreToken")
                return id;
            }
          | _ => ()
        }
        assert(false);
      }
    }
  }
}
