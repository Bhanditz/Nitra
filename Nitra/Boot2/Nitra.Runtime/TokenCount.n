using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra.Runtime
{
  [Record]
  public struct TokenCount
  {
    public AllTokens : int;
    public KeyTokens : int;

    private class TokenCounter : AstWalkerBase[FakeVoid]
    {
      public mutable AllTokens : int = 0;
      public mutable KeyTokens : int = 0;
      private AddToken(endPos : int, isKeyToken : bool) : void
      {
        when (endPos >= 0)
        {
          ++AllTokens;
          when (isKeyToken)
            ++KeyTokens;
        }
      }

      public override OnRegularCall      (ruleInfo : SubruleInfo.RegularCall,       startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        AddToken(endPos, ruleInfo.Descriptor.IsKeyToken);
      }

      public override OnTokenString      (ruleInfo : SubruleInfo.TokenString,       startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        AddToken(endPos, ruleInfo.IsKeyToken);
      }

      public override OnSimpleCall       (ruleInfo : SubruleInfo.SimpleCall,        startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        if (ruleInfo.RuleParser.IsTokenRule)
          AddToken(endPos, ruleInfo.RuleParser.Descriptor.IsKeyToken);
        else
          base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context)
      }

      public override OnExtensibleCall   (ruleInfo : SubruleInfo.ExtensibleCall,    startPos : int, endPos : int, parseResult : ParseResult, context : FakeVoid) : void
      {
        IgnoreParams();
        if (ruleInfo.RuleParser.IsTokenRule)
          AddToken(endPos, ruleInfo.RuleParser.Descriptor.IsKeyToken);
        else
          base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context)
      }
    }

    public static CreateFromStackFrame(frame : RecoveryStackFrame) : TokenCount
    {
      def counter = TokenCounter();
      match (frame)
      {
        | Root                       => ()
        | Extensible        as frame => _ = counter.WalkExtensible(frame.StartPos, frame.RuleParser, frame.ParseResult, FakeVoid())
        | ListBody          as frame => _ = counter.Walk(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.ParseResult, FakeVoid())
        | ListSeparator     as frame => _ = counter.Walk(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.ParseResult, FakeVoid())
        | Rule              as frame => _ = counter.Walk(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.ParseResult, FakeVoid())
        | ExtensiblePrefix  as frame => _ = counter.WalkExtension(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.RuleParser, frame.ParseResult, FakeVoid())
        | ExtensiblePostfix as frame => _ = counter.WalkExtension(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.RuleParser, frame.ParseResult, FakeVoid())
      }
      TokenCount(counter.AllTokens, counter.KeyTokens);
    }
  }
}
