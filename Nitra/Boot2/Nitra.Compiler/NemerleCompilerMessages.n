using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Compiler
{
  internal sealed class NemerleCompilerMessages : ICompilerMessages
  {
    public ErrorCount : int { get; private set; }

    public Error(loc : Nitra.Location, msg : string, _num : int = -1) : void
    {
      ErrorCount++;
      Message.Error(loc.NLocation(), msg);
    }

    public Warning(loc : Nitra.Location, msg : string, num : int = -1) : void
    {
      if (num > 0)
        Message.Warning(num, loc.NLocation(), msg);
      else
        Message.Warning(loc.NLocation(), msg);
    }

    public Hint(loc : Nitra.Location, msg : string, _num : int = -1) : void
    {
      Message.Hint(loc.NLocation(), msg);
    }

    public FatalError[T](loc : Nitra.Location, msg : string, _num : int = -1) : T
    {
      ErrorCount++;
      Message.FatalError(loc.NLocation(), msg)
    }

    public RootError   (loc : Nitra.Location, msg : string, num : int = -1) : IRootCompilerMessages
    {
      Error(loc, msg, num);
      FakeRootCompilerMessages(this)
    }

    public RootWarning (loc : Nitra.Location, msg : string, num : int = -1) : IRootCompilerMessages
    {
      Warning(loc, msg, num);
      FakeRootCompilerMessages(this)
    }

    public RootHint    (loc : Nitra.Location, msg : string, num : int = -1) : IRootCompilerMessages
    {
      Hint(loc, msg, num);
      FakeRootCompilerMessages(this)
    }
  }
}
