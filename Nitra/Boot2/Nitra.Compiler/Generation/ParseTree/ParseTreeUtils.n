using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal module ParseTreeUtils
  {
    public static Skip(subrule : SubruleCompileInfo, parentRawTreePointer : RawTreePointer) : PExpr
    {
      <[ pos += $(parentRawTreePointer.GetSize(subrule)); ]>
    }

    public static GetTokenValue(subrule : SubruleCompileInfo, parentRawTreePointer : RawTreePointer, code : PExpr) : PExpr
    {
      <[
        def (skip, size) = $(parentRawTreePointer.GetSkipAndSize(subrule));
        pos += skip;
        def tokenPos = pos;
        pos += size;
        $code;
      ]>
    }

    public static GetOptionValue
      ( subrule          : SubruleCompileInfo.Option
      , parentRawTreePointer : RawTreePointer
      , hasValue         : PExpr
      , noValue          : PExpr
      ) : PExpr
    {
      <[
        if ($(parentRawTreePointer.GetSize(subrule)) > 0)
          $hasValue;
        else
          $noValue;
      ]>
    }

    public static GetListValue
      ( subrule          : SubruleCompileInfo.List
      , parentRawTreePointer : RawTreePointer
      , init             : PExpr
      , item             : PExpr
      , returnCode       : PExpr
      , emptyCode        : PExpr
      ) : PExpr
    {
      assert3(!subrule.IsSkipAnyPattern);

      def loopCode = <[
        def loop()
        {
          $item;
          if (pos < listEnd)
            loop();
          else
            assert(pos == listEnd);
        }
      ]>;
      GetListValueImpl
        (subrule           = subrule
        , parentRawTreePointer = parentRawTreePointer
        , init             = init
        , loopCode         = loopCode
        , returnCode       = returnCode
        , emptyCode        = emptyCode)
    }

    public static GetListWithSeparatorValue
      ( subrule          : SubruleCompileInfo.ListWithSeparator
      , parentRawTreePointer : RawTreePointer
      , init             : PExpr
      , item             : PExpr
      , separator        : PExpr
      , returnCode       : PExpr
      , emptyCode        : PExpr
      ) : PExpr
    {
      def continueLoop =
        if (subrule.HangingSeparator)
          <[
            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          ]>
        else
          <[ loop(); ]>;
      def loopCode = <[
        def loop()
        {
          $item;
          if (pos < listEnd)
          {
            $separator;
            $continueLoop;
          }
          else
            assert(pos == listEnd);
        }
      ]>;
      GetListValueImpl
        (subrule           = subrule
        , parentRawTreePointer = parentRawTreePointer
        , init             = init
        , loopCode         = loopCode
        , returnCode       = returnCode
        , emptyCode        = emptyCode)
    }

    private static GetListValueImpl
      (subrule           : SubruleCompileInfo
      , parentRawTreePointer : RawTreePointer
      , init             : PExpr
      , loopCode         : PExpr
      , returnCode       : PExpr
      , emptyCode        : PExpr
      ) : PExpr
    {
      def nonemptyCode = List();
      def addCode(expr)
      {
        if (expr is <[ { ..$exprs } ]>)
          foreach (e in exprs)
            addCode(e);
        else
          nonemptyCode.Add(expr);
      }
      addCode(init);
      addCode(loopCode);
      addCode(<[ loop() ]>);
      addCode(returnCode);
      <[
        def listEnd = pos + $(parentRawTreePointer.GetSize(subrule));
        if (listEnd > pos) { ..$nonemptyCode }
        else $emptyCode
      ]>
    }

    public DeclareRawTreePointer(rawTreePointer : RawTreePointer, body : PExpr) : PExpr
    {
      if (rawTreePointer.IsAccessed)
        <[
          def $(rawTreePointer.Name : global) = parseResult.GetRawTree(pos, ruleParser.$(rawTreePointer.Sequence.RuleIdFieldName : global));
          $body
        ]>.FlattenPExpr()
      else
        body
    }
  }
}
