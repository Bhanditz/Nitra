using Nitra.Typing;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class ExtendSyntaxParseTreeEmitter : IParseTreeEmitter
  {
    public ExtendSymbol          : ExtendSyntaxSymbol   implements IParseTreeEmitter.Symbol { get; }
    public SymbolDeclarationSite : IRuleDeclarationSite { get { ExtendSymbol.DeclarationSite } }

    public IsTypesDefined : bool { get { _tb != null } }

    public DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      _tb.DefineNestedType(td)
    }

    [RecordIgnore] private mutable _tb : TypeBuilder;

    public DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(_tb == null);

      Util.locate(this.ExtendSymbol.FirstLocation.NLocation(),
      {
        _tb = defineType(<[ decl: public module $(ExtendSymbol.Name : usesite) { } ]>);
      });
    }

    public DefineMembers() : void { }

    public Emit() : void
    {
      assert(_tb != null);
      _tb.Compile();
    }
  }
}
