using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal sealed partial class TryParseMethodEmitter : MethodEmitter
  {
    public override CompileOption(code : SCG.List[PExpr], subrule : SubruleCompileInfo.Option) : void
    {
      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));

      code.Add(<[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(OptionStartPos(subrule)) = $CurTextPos;
          $(GotoParseLabel(subrule.Rule.NonMarkerSubrules[0]));

        $(OkLabel(subrule.Rule));
          when ($(IsEndOfSequenceLevel(subrule)))
            $(_endLabel.Goto());
          $(AddParsedStateInfo(subrule, <[ $CurTextPos - $(OptionStartPos(subrule)) ]>));
          $(GotoContinueParseLabel(subrule));

        $(FailLabel(subrule.Rule));
          if ($(IsEndOfSequenceLevel(subrule)))
          {
            $CurTextPos = -1;
            $(_endLabel.Goto());
          }
          else
          {
            $(AddParsedStateInfo(subrule, <[ 0 ]>));
            $(GotoContinueParseLabel(subrule));
          }
      ]>);
    }
  }
}
