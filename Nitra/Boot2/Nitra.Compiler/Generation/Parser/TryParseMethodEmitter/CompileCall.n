using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

using N = Nemerle.Compiler;

namespace Nitra.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public MakeSimpleRuleCall(ruleSymbol : SimpleRuleSymbol, curTextPos : PExpr, text : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol) : global).Parse($curTextPos, $text, parseResult) ]>
    }

    public MakeExtensibleRuleCall(ruleSymbol : ExtensibleRuleSymbol, bindingPower : int, curTextPos : PExpr, text : PExpr) : PExpr
    {
      <[ $(Owner.MakeParserName(ruleSymbol, bindingPower) : global).Parse($curTextPos, $text, parseResult) ]>
    }

    public override CompileRegularCall(code : SCG.List[PExpr], field : RuleStructureField.RegularCall) : void
    {
      CompileCallImpl(code, MakeRegularRuleCall(field.Symbol, CurTextPos, <[ text ]>), field)
    }

    public override CompileExtensibleCall(code : SCG.List[PExpr], field : RuleStructureField.ExtensibleCall) : void
    {
      CompileCallImpl(code, MakeExtensibleRuleCall(field.Symbol, field.BindingPower, CurTextPos, <[ text ]>), field)
    }

    public override CompileSimpleCall(code : SCG.List[PExpr], field : RuleStructureField.SimpleCall) : void
    {
      CompileCallImpl(code, MakeSimpleRuleCall(field.Symbol, CurTextPos, <[ text ]>), field)
    }

    public CompileCallImpl(code : SCG.List[PExpr], call : PExpr, field : RuleStructureField) : void
    {
      def predicateCode = CompilePredicate(field.HeadPredicates, GotoFailParseLabel(field));
      code.Add(<[
      $(ParseLabel(field));
        _ = $(field.ToString());
        $predicateCode;
        newPos = $call;
        tmpSize = newPos - $CurTextPos;
        if (newPos >= 0)
        {
          $(AddParsedStateInfo(field, <[ tmpSize ]>));
          $CurTextPos = newPos;
          $(GotoContinueParseLabel(field));
        }
        else
        {
          $(RecoveryCode());
          $(GotoFailParseLabel(field));
        }
      ]>)
    }
  }
}
