using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

namespace Nitra.Compiler
{
  internal partial class TryParseMethodEmitter : MethodEmitter
  {
    public CompileSkipAny(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      assert3(subrule.Rule.Subrules.Length == 1);
      
      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));
      def firstChild        = subrule.Rule.NonMarkerSubrules[0];
      def fail              = PExprLabel(this.Environment.Manager, "childFail");
      def childPredicateCode = CompilePredicate(firstChild.HeadPredicates, fail.Goto());
      
      code.Add(<[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          while ($(CurTextPos) < text.Length)
          {
            $childPredicateCode;
            ++ $(CurTextPos);
          }
          $(fail.Label());
          $(GotoContinueParseLabel(subrule));
      ]>);
    }

    public override CompileList(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      when (subrule.IsSkipAnyPattern)
      {
        CompileSkipAny(code, subrule);
        return;
      }

      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));

      def firstChild = subrule.Rule.NonMarkerSubrules[0];
      code.Add(<[//TODO: Fix counters
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(ListStartPos(subrule)) = $CurTextPos;
          $(ListEndPos(subrule))   = $CurTextPos;
          $(GotoParseLabel(firstChild));

        $(OkLabel(subrule.Rule));
          when (!continueList && $(IsEndOfSequenceLevel(subrule)))
            $(_endLabel.Goto());
          when ($(ListEndPos(subrule)) == $CurTextPos)
            $(GotoContinueParseLabel(subrule));
          $(ListEndPos(subrule)) = $CurTextPos;

          $(GotoParseLabel(firstChild));

        $(FailLabel(subrule.Rule));
          if ($(IsEndOfSequenceLevel(subrule)))
          {
            //if (continueList)
            //{
            //  $CurTextPos = $(ListEndPos(subrule));
            //  $(AddParsedStateInfo(subrule, <[ $(ListEndPos(subrule)) - $(ListStartPos(subrule)) ]>));
            //}
            //else
              $CurTextPos = -1;
            $(_endLabel.Goto());
          }
          else
          {
            $CurTextPos = $(ListEndPos(subrule));
            $(AddParsedStateInfo(subrule, <[ $(ListEndPos(subrule)) - $(ListStartPos(subrule)) ]>));
            $(GotoContinueParseLabel(subrule));
          }
      ]>);
    }
  }
}
