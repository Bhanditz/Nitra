using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

using Nitra.Model;

using Nemerle.Compiler;

namespace Nitra.Compiler
{
  internal sealed partial class PatchAstMethodEmitter : MethodEmitter
  {
    public this(owner : RuleParserEmitter, tb : TypeBuilder, sequence : SequenceCompileInfo.Ast)
    {
      base(owner, sequence, tb);
    }

    public Emit() : void
    {
      TypeBuilder.DefineConditional(<[decl:
        public override PatchAst(startPos : int, mutable startState : int, errorIndex : int, frame : Nitra.Internal.RecoveryStackFrame, parseResult : Nitra.Internal.ParseResult) : bool
        {
          $(if (Owner.Environment.IsIdeMode)
            <[ ignore(startPos, startState, stack, parseResult); ]>
          else
            CompileAst(SequenceCompileInfo))
        }
      ]>);
    }

    public override CompileEmpty            (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.Empty)             : void { throw NotSupportedException() }
    public override CompileRegularCall      (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.RegularCall)       : void { throw NotSupportedException() }
    public override CompileExtensibleCall   (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.ExtensibleCall)    : void { throw NotSupportedException() }
    public override CompileSimpleCall       (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.SimpleCall)        : void { throw NotSupportedException() }
    public override CompileList             (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.List)              : void { throw NotSupportedException() }
    public override CompileListWithSeparator(_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.ListWithSeparator) : void { throw NotSupportedException() }
    public override CompileOption           (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.Option)            : void { throw NotSupportedException() }
    public override CompileTokenString      (_code : SCG.List[PExpr], _subrule : SubruleCompileInfo.TokenString)       : void { throw NotSupportedException() }
  }
}
