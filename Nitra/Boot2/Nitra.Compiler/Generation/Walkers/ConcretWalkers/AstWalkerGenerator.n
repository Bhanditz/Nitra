using Nitra.Runtime;
using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  public class AstWalkerGenerator : WalkerGenerator
  {
    public Environment : EmitterEnvironment { get; }

    public override Name : string { get StandardWalkerTypes.Ast }

    public override SupportsVoidRules : bool { get false }

    public override GetSignature(rule : RuleSymbol) : WalkerSignature
    {
      WalkerSignature([], <[ $(Environment.GetAstType(rule) : typed) ]>);
    }

    protected override GetRuleValue(subrule : SubruleCompileInfo, parentAstPointer : AstPointerScope) : PExpr
    {
      match (subrule)
      {
        | Empty      as subrule => Skip(subrule, parentAstPointer)
        | SimpleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            Skip(subrule, parentAstPointer)
          else
            CallSimpleRule(subrule, parentAstPointer)

        | ExtensibleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            Skip(subrule, parentAstPointer)
          else
            CallExtensibleRule(subrule, parentAstPointer)

        | RegularCall
        | List as lst when lst.IsSkipAnyPattern
        | TokenString => GetTokenValue(subrule, parentAstPointer, <[ Nitra.NSpan(tokenPos, pos) ]>)
        | Option as subrule =>
          GetOptionValue(
            subrule            = subrule,
            parentAstPointer = parentAstPointer,
            hasValue         = <[ Some($(GetRuleValue(subrule.Rule, "valuePointer"))) ]>,
            noValue          = <[ None() ]>)

        | List as lst =>
          GetListValue(subrule            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ def astBuffer = System.Collections.Generic.List(16); ]>,
            item             = <[ astBuffer.Add($(GetRuleValue(lst.Rule, "itemPointer"))) ]>,
            returnCode       = <[ Nemerle.Collections.NList.ToList(astBuffer) ]>,
            emptyCode        = <[ [] ]>);

        | ListWithSeparator as lst=>
          GetListWithSeparatorValue(
            subrule            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ def astBuffer = System.Collections.Generic.List(16); def separatorBuffer = System.Collections.Generic.List(16); ]>,
            item             = <[ astBuffer.Add($(GetRuleValue(lst.Rule, "itemPointer"))) ]>,
            separator        = <[ separatorBuffer.Add($(GetRuleValue(lst.Separator, "separatorPointer"))) ]>,
            returnCode       = <[ (Nemerle.Collections.NList.ToList(astBuffer), Nemerle.Collections.NList.ToList(separatorBuffer)) ]>,
            emptyCode        = <[ ([], []) ]>);

        | Marker => <[ () ]>
      }
    }

    protected override CombineValues(_sequence : SequenceCompileInfo, arguments : list[PExpr]) : PExpr
    {
      match (arguments)
      {
        | []   => assert(false)
        | [x]  => x
        | many => <[ (..$many) ]>
      }
    }

    protected override GetSyntaxRuleValue(ruleSymbol : SyntaxRuleSymbol, astPointer : AstPointerScope) : PExpr
    {
      def sequence = ruleSymbol.Sequence;
      def statements = List();
      def arguments  = List();

      arguments.Add(<[ Nitra.Location(parseResult, __startPos, pos) ]>);
      when (sequence is SequenceCompileInfo.Ast(Symbol = ExtensionRuleSymbol(ExtensionType=Postfix)))
        arguments.Add(<[ prefix ]>);

      foreach (subrule in sequence.NonMarkerSubrules)
      {
        | SubruleCompileInfo.SimpleCall(symbol)        when symbol.Type is RuleType.Void
        | SubruleCompileInfo.ExtensibleCall(symbol, _) when symbol.Type is RuleType.Void
        | SubruleCompileInfo.Empty =>
          statements.Add(GetRuleValue(subrule, astPointer));

        | _                =>
          def varName = subrule.MakeVariableName("ast");
          statements.Add(<[ def $(varName : usesite) = $(GetRuleValue(subrule, astPointer)) ]>);
          arguments.Add(<[ $(varName : usesite) ]>);
      }

      def ctor =
        if (ruleSymbol is ExtensionRuleSymbol)
          <[ $(Environment.GetAstType(ruleSymbol) : typed) ]>
        else
          <[ $(Environment.GetAstType(ruleSymbol) : typed).Ast ]>;
      statements.Add(<[ $ctor(..$(arguments.NToList())) ]>);
      <[ { ..$(statements.NToList()); } ]>
    }

    public override PrefixAmbiguity(ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      <[
        def asts = array(ambiguities.Count);
        foreach( (ast, _) in ambiguities with index)
          asts[index] = ast;
        $(Environment.GetAstType(ruleSymbol) : typed).AmbiguousAst(Nitra.Location(parseResult, __startPos, endPos), asts)
      ]>
    }

    public override PostfixAmbiguity(ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      <[
        def asts = array(ambiguities.Count);
        foreach( (ast, _) in ambiguities with index)
          asts[index] = ast;
        $(Environment.GetAstType(ruleSymbol) : typed).AmbiguousAst(Nitra.Location(parseResult, __startPos, endPos), asts)
      ]>
    }

    public override PrefixMissed(ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      <[ $(Environment.GetAstType(ruleSymbol) : typed).MissingAst(Nitra.Location(parseResult, pos, pos)) ]>
    }

    public override SimpleMissed(ruleSymbol : SimpleRuleSymbol) : PExpr
    {
      <[ $(Environment.GetAstType(ruleSymbol) : typed).MissingAst(Nitra.Location(parseResult, pos, pos)) ]>
    }
  }
}
