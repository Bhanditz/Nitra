using Nitra.Runtime;
using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  public class ReflectionWalkerGenerator : WalkerGenerator
  {
    public Environment : EmitterEnvironment { get; }

    public override Name : string { get StandardWalkerTypes.Reflection }

    public override SupportsVoidRules : bool { get true }

    public override GetSignature(_rule : RuleSymbol) : WalkerSignature
    {
      WalkerSignature([], <[ Nitra.Runtime.Reflection.ReflectionStruct ]>);
    }

    private MakeReflectionStruct(name : PExpr, location : PExpr, items : PExpr) : PExpr
    {
      <[ Nitra.Runtime.Reflection.ReflectionStruct($name, $location, System.Collections.ObjectModel.ReadOnlyCollection.[Nitra.Runtime.Reflection.ReflectionStruct]($items)) ]>
    }

    private MakeName(ruleField : SubruleCompileInfo) : string
    {
      | Empty                   => "<Empty>"
      | List               as x when x.IsSkipAnyPattern => "SkipAnyPattern: " + x.SrcRule
      | List               as x => "List: " + x.SrcRule
      | ListWithSeparator  as x => "ListWithSeparator: " + x.SrcRule
      | Option             as x => "Option: " + x.SrcRule
      | ExtensibleCall     as x => x.Symbol.Name
      | RegularCall        as x => x.Symbol.Name
      | SimpleCall         as x => x.Symbol.Name
      | TokenString        as x => x.String
      | Marker             as x => x.Symbol.Name
    }

    protected override GetRuleValue(subrule : SubruleCompileInfo, parentAstPointer : AstPointerScope) : PExpr
    {
      match (subrule)
      {
        | SimpleCall     as subrule => CallSimpleRule(subrule, parentAstPointer)
        | ExtensibleCall as subrule => CallExtensibleRule(subrule, parentAstPointer)
        | List as lst when lst.IsSkipAnyPattern
        | Empty | RegularCall | TokenString => GetTokenValue(subrule, parentAstPointer, MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(tokenPos, pos) ]>, <[ array(0) ]>))
        | Option as subrule =>
          GetOptionValue(
            subrule            = subrule,
            parentAstPointer = parentAstPointer,
            hasValue         = <[ def startOprionPos = pos;
                                  def value = $(GetRuleValue(subrule.Rule, "valuePointer"));
                                  $(MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(startOprionPos, pos) ]>, <[ array[value] ]>)); ]>,
            noValue          = MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(pos, pos) ]>, <[ array(0) ]>))

        | List as lst=>
          GetListValue(subrule            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ def listStartPos = pos; def astBuffer = System.Collections.Generic.List(16); ]>,
            item             = <[ astBuffer.Add($(GetRuleValue(lst.Rule, "itemPointer"))) ]>,
            returnCode       = MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(listStartPos, pos) ]>, <[ astBuffer ]>),
            emptyCode        = MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(pos, pos) ]>, <[ array(0) ]>));

        | ListWithSeparator as lst=>
          GetListWithSeparatorValue(
            subrule            = lst,
            parentAstPointer = parentAstPointer,
            init             = <[ def listStartPos = pos; def astBuffer = System.Collections.Generic.List(16); ]>,
            item             = <[ astBuffer.Add($(GetRuleValue(lst.Rule, "itemPointer"))) ]>,
            separator        = <[ astBuffer.Add($(GetRuleValue(lst.Separator, "separatorPointer"))) ]>,
            returnCode       = MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(listStartPos, pos) ]>, <[ astBuffer ]>),
            emptyCode        = MakeReflectionStruct(<[ $(MakeName(subrule)) ]>, <[ Nitra.NSpan(pos, pos) ]>, <[ array(0) ]>));

        | Marker => <[ () ]>
      }
    }

    protected override CombineValues(sequence : SequenceCompileInfo, arguments : list[PExpr]) : PExpr
    {
      MakeReflectionStruct(<[ $(sequence.SrcRule.ToString()) ]>, <[ Nitra.NSpan(__listStartPos, pos) ]>, <[ array[..$arguments] ]>)
    }

    protected override GetSyntaxRuleValue(ruleSymbol : SyntaxRuleSymbol, astPointer : AstPointerScope) : PExpr
    {
      def sequence = ruleSymbol.Sequence;
      def statements = List();
      def arguments  = List();

      when (sequence is SequenceCompileInfo.Ast(Symbol = ExtensionRuleSymbol(ExtensionType=Postfix)))
        arguments.Add(<[ prefix ]>);

      foreach (subrule in sequence.NonMarkerSubrules)
      {
        def varName = subrule.MakeVariableName("ast");
        statements.Add(<[ def $(varName : usesite) = $(GetRuleValue(subrule, astPointer)) ]>);
        arguments.Add(<[ $(varName : usesite) ]>);
      }

      statements.Add(MakeReflectionStruct(<[ $(ruleSymbol.Name) ]>, <[ Nitra.NSpan(__startPos, pos) ]>, <[ array[..$(arguments.NToList())] ]>));
      <[ { ..$(statements.NToList()) } ]>
    }

    public override PrefixAmbiguity(_ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      def code = MakeReflectionStruct(<[ "Ambiguity" ]>, <[ Nitra.NSpan(__startPos, endPos) ]>, <[ items ]>);
      <[
        _ = parseResult;
        def items = array(ambiguities.Count);
        foreach ((item, _) in ambiguities with index)
          items[index] = item;
        $code
      ]>
    }

    public override PostfixAmbiguity(_ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      def code = MakeReflectionStruct(<[ "Ambiguity" ]>, <[ Nitra.NSpan(__startPos, endPos) ]>, <[ items ]>);
      <[
        _ = parseResult;
        def items = array(ambiguities.Count);
        foreach ((item, _) in ambiguities with index)
          items[index] = item;
        $code
      ]>
    }

    public override PrefixMissed(ruleSymbol : ExtensibleRuleSymbol) : PExpr
    {
      def missed = "Missed: " + ruleSymbol.Name;
      def code = MakeReflectionStruct(<[ $missed ]>, <[ Nitra.NSpan(pos, pos) ]>, <[ array[] ]>);
      <[
        _ = parseResult;
        $code;
      ]>
    }

    public override SimpleMissed(ruleSymbol : SimpleRuleSymbol) : PExpr
    {
      def missed = "Missed: " + ruleSymbol.Name;
      def code = MakeReflectionStruct(<[ $missed ]>, <[ Nitra.NSpan(pos, pos) ]>, <[ array[] ]>);
      <[
        _ = parseResult;
        $code;
      ]>
    }
  }
}
