using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public sealed partial class WalkerEmitter
  {
    [Record]
    private sealed class PrefixRuleWalkerEmitter : RuleWalkerEmitter[ExtensionRuleSymbol]
    {
      [RecordIgnore] public override WalkerTb : TypeBuilder { get; private set; }

      public override RuleParserBaseType : PExpr
      {
        get { <[ Nitra.Internal.ExtensionRuleParser ]> }
      }

      public override Define(walkersModule : TypeBuilder) : void
      {
        Generator.Init(this);

        def baseRule = Rule.BaseRule.Value;

        WalkerTb = walkersModule.DefineNestedType(<[ decl:
          public sealed class $(Rule.DecorateWalkerName("Walker") : usesite) : $(WalkerEmitter.GetRuleWalkerFullName(baseRule, Generator, "PrefixWalker"))
          {
            private ruleParser : $(Rule.GetParserClassRef());

            public this(ruleParser : $(RuleParserBaseType))
            {
              this.ruleParser = ruleParser :> $(Rule.GetParserClassRef());
            }
          }
        ]>);

        def signature = Generator.GetSignature(baseRule);

        def prefixParameters =
          <[ parameter: pos : ref int ]>
          :: <[ parameter: astPtr : int ]>
          :: <[ parameter: parseResult : Nitra.ParseResult ]>
          :: signature.Parameters;

        def code =
          if (Environment.IsIdeMode)
            <[ assert(false) ]>
          else
            Generator.WalkerCodeForExtensionRule(Rule);

        WalkerTb.DefineConditional(<[ decl:
          public override Walk(..$prefixParameters) : $(signature.ReturnType)
          {
            unchecked
            {
              def __startPos = pos;
              $code;
            }
          }
        ]>);

        DefineInitMethod();
      }

      public override Emit() : void
      {
        WalkerTb.Compile();
      }
    }
  }
}
