using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal variant DependentAstPropertyRef
  {
    | Reflected
    | Compiling
      {
        public Bit    : BitField;
      }

    public Symbol : DependentAstPropertySymbol;
    public Index  : int;
  }

  internal abstract partial class AstEmitter
  {
    private enum NodeState : byte
    {
      | None
      | Cycling
      | Visited
    }

    private variant Node
    {
      | AssignProp    { Expr : TExpr.Assign; Debug : TExpr; Prop : TExpr.PropertyMember; new PropertyRef : DependentAstPropertyRef; }
      | UseProp       { Expr : TExpr.PropertyMember;                                     new PropertyRef : DependentAstPropertyRef; }
      | DeclaredProp  { Prop : IProperty; }

      public Order : int       { get { _order } }
      public State : NodeState { get { _state } }
      public PropertyRef : DependentAstPropertyRef
      {
        get
        {
          match (this)
          {
            | AssignProp as n => n.PropertyRef
            | UseProp    as n => n.PropertyRef
            | DeclaredProp    => assert3(false)
          }
        }
      }

      mutable _state : NodeState;
      mutable _order : int = -1;

      public DependendOn : SCG.List[Node] = SCG.List();

      public Obj : TExpr
      {
        get
        {
          match (this)
          {
            | AssignProp    as x => x.Prop.obj
            | UseProp       as x => x.Expr.obj
            | DeclaredProp      => assert3(false);
          }
        }
      }

      public Location : Nemerle.Compiler.Location
      {
        get
        {
          match (this)
          {
            | AssignProp    as x => x.Expr.Location
            | UseProp       as x => x.Expr.Location
            | DeclaredProp as x => x.Location
          }
        }
      }
      
      //public static Visualize(nodes : Seq[Node], typeName : string) : void
      //{
      //  _ = Sort(nodes);
        
      //  def name(node : Node) { node._order }
      //  def label(node : Node) { DotEscape(node.ToString()) }
        
      //  def edges = List();
        
      //  foreach (node in nodes)
      //    foreach (to in node.DependendOn)
      //      edges.Add($<#$(name(node)) -> $(name(to))#>);
          
      //  def color(node : Node)
      //  {
      //    | AssignProp   => "blue"
      //    | UseProp      => "black"
      //    | DeclaredProp => "red"
      //  }
      //  def content = $<#
      //    digraph RecoveryParser
      //    {
      //      rankdir=LR;
      //      compound=true;
      //      label="The properties dependency graph for $typeName";

      //      ..$(nodes; "\r\n          "; n => $<#$(name(n)) [label="$(label(n))" color=$(color(n)) shape=box]#>)

      //      ..$(edges; "\r\n          ")
      //    }
      //  #>;

      //  VisualizeDot(content);
      //}

      public static Sort(graphNodes : Seq[Node]) : bool
      {
        foreach (node in graphNodes)
          node._state = NodeState.None;
        otherwise
          return false; // graph is empty

        mutable index = 0;
        mutable cycling = false;

        foreach (node in GetRoots(graphNodes))
          cycling |= node.Sort(ref index);
        otherwise
        {
          foreach (node in graphNodes)
            node._state = NodeState.Cycling;
          return true;
        }

        cycling
      }

      /// Return: true - cycling; false - OK
      public Sort(index : ref int) : bool
      {
        mutable cycling = false;
        this._state = NodeState.Cycling;

        foreach (to in DependendOn)
        {
          if (to._state == NodeState.None)
            when (to.Sort(ref index))
              cycling |= true;
          else when (to._state == NodeState.Cycling)
            cycling |= true;
        }

        if (cycling)
        {
          this._order = -1;
          true
        }
        else
        {
          this._state = NodeState.Visited;
          this._order = index;
          index++;
          false
        }
      }

      public static GetRoots(graphNodes : Seq[Node]) : Seq[Node]
      {
        def hasEdgeTo = SCG.HashSet();

        foreach (node in graphNodes)
          hasEdgeTo.UnionWith(node.DependendOn);

        foreach (node in graphNodes)
          unless (hasEdgeTo.Contains(node))
            yield node;
      }

      public static FindCycling(graphNodes : Seq[Node]) : Seq[Node]
      {
        foreach (node in graphNodes)
          when (node._state == NodeState.Cycling)
            yield node;
      }

      public override ToString() : string
      {
        _order + ": " +
        match (this)
        {
          | AssignProp    as x => x.Expr.ToString()
          | UseProp       as x => x.Expr.ToString()
          | DeclaredProp as x => x.Prop.ToString()
        }
      }
    }
  }
}
