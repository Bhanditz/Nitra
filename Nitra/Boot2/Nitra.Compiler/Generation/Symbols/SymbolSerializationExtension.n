using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal sealed class SymbolSerializationExtension : IBinarySerializationEmitterExtension, IBinarySerializationMessageEmitter
  {
    public this(environment : EmitterEnvironment)
    {
      _environment = environment;
    }

    _environment : EmitterEnvironment;

    mutable _metadataWriterParam : string;
    mutable _metadataReaderParam : string;

    public CreateParameters(emitter : BinarySerializationEmitter) : void
    {
      _metadataWriterParam = emitter.CreateSerializationParameter("_metadataWriter", <[ Nitra.Serialization2.MetadataWriter ]>);
      _metadataReaderParam = emitter.CreateDeserializationParameter("_metadataReader", <[ Nitra.Serialization2.MetadataReader ]>);
    }

    private SerializableType : FixedType
    {
      mutable _serializableType : FixedType;
      get
      {
        when (_serializableType : object == null)
          _serializableType = _environment.Manager.CoreEnv.BindFixedType(<[ Nitra.Serialization2.ISerializable ]>);
        _serializableType
      }
    }

    public IsSupportedType(type : FixedType) : bool
    {
      type.TryRequire(SerializableType)
    }

    public MakeWriteCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(SerializableType))
        <[ $(_metadataWriterParam : usesite).WriteObject(obj, writer) ]>;
      else
        assert(false)
    }

    public MakeReadCode(type : FixedType, _emitter : BinarySerializationEmitter) : PExpr
    {
      if (type.TryRequire(SerializableType))
        <[ _ = typeCode; $(_metadataReaderParam : usesite).ReadObject.[$(type : typed)](reader) ]>;
      else
        assert(false)
    }

    public EmitWarning(message : PExpr) : PExpr
    {
      <[ $(_metadataReaderParam : usesite).Project.Warning($(_metadataReaderParam : usesite).ErrorLocation, $message) ]>
    }

    public EmitFatalError(message : PExpr) : PExpr
    {
      <[ $(_metadataReaderParam : usesite).Project.FatalError($(_metadataReaderParam : usesite).ErrorLocation, $message) ]>
    }
  }
}
