using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal module NTypeCompiler
  {
    public Compile(t : NType, environment : EmitterEnvironment) : PExpr
    {
      Util.locate(t.Location.ToNemerleLocation(),
        match (t)
        {
          | Predefined(t)    => environment.MakeNemerleType(t)
          | Qualified(parts) =>
            if (parts is first :: other)
            {
              mutable acc = Util.locate(first.Location.ToNemerleLocation(),
              {
                def head = <[ $(Name(first.Name, first.NemerleEnv.Manager.MacroColors.Color, first.NemerleEnv) : name) ]>;
                if (first.TypeArguments.IsEmpty())
                  head
                else
                  <[ $head[..$(first.TypeArguments.Map(Compile(_, environment)))]]>;
              });
              foreach (t in other)
              {
                Util.locate(t.Location.ToNemerleLocation(),
                {
                  acc = <[ $acc . $(Name(t.Name, t.NemerleEnv.Manager.MacroColors.Color, t.NemerleEnv) : name) ]>;
                  unless (t.TypeArguments.IsEmpty())
                    acc = <[ $acc[..$(t.TypeArguments.Map(Compile(_, environment)))]]>;
                });
              }
              acc
            }
            else assert3(false)

          | Tuple(members)   => <[ Nitra.Declarations.DeclarationSequence[..$(members.Map(Compile(_, environment)))] ]>
          | Func(from, to)   => <[ $(Compile(from, environment)) -> $(Compile(to, environment)) ]>
          | OptionList(item)
          | List(item)       => <[ Nitra.Declarations.DeclarationList[$(Compile(item, environment))] ]>
          | Option(item)     => <[ Nitra.Declarations.DeclarationOption[$(Compile(item, environment))] ]>
        })
    }
  }
}
