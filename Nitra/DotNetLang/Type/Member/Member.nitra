using Nitra;
using Nitra.Declarations;

namespace DotNet
{
  abstract declaration Member : TypeMember
  {
    symbol
    {
      FullName = DeclaredIn.FullName + "." + this.Name;
    }

    | Constructor : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "constructor";
          SpanClass = DotNetLang.MethodSpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
        }

        Symbol.Flags              |= Modifiers.Flags;
        Modifiers.Flags            = ModifierSet(context);
        Parameters.ContainingTable = Symbol.ParameterScope;
        Parameters.Scope           = Scope;
        Parameters.IndexIn         = 0u;

        Parameters  : FormalParameter*;
        Initializer : ConstructorInitializer?;
      }
    | Destructor : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "destructor";
          SpanClass = DotNetLang.MethodSpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
        }

        Parameters.ContainingTable = Symbol.ParameterScope;
        Parameters.Scope           = Scope;
        Parameters.IndexIn         = 0u;

        Parameters : FormalParameter*;
      }
    | Method : GenericEntity, AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "method";
          SpanClass = DotNetLang.MethodSpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
          in  ReturnType     : TypeSymbol;
        }

      stage 1:
        out ReturnTypeRef : Ref[TypeSymbol] = ReturnType.Ref.Resolve();

        InterfaceType.Scope        = Scope;
        ReturnType.Scope           = TypeParameterConstraints.Scope;
        Parameters.ContainingTable = Symbol.ParameterScope;
        Parameters.Scope           = TypeParameterConstraints.Scope;
        Parameters.IndexIn         = 0u;
        Symbol.ReturnType          = ReturnTypeRef.Symbol;

        InterfaceType            : QualifiedReference?;
        IsPartial                : bool;
        Parameters               : FormalParameter*;
        ReturnType               : QualifiedReference;
      }
    | Property : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "property";
          SpanClass = DotNetLang.PropertySpanClass;

          in Setter : option[Member.MethodSymbol];
          in Getter : option[Member.MethodSymbol];
          in Type : TypeSymbol;
        }

      stage 1:
        out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

        InterfaceType.Scope  = Scope;
        Type.Scope           = Scope;
        Symbol.Type          = TypeRef.Symbol;
        Accessors.Scope      = Scope;

        InterfaceType : QualifiedReference?;
        Type          : QualifiedReference;
        Accessors     : PropertyAccessor*;
      }
    | Event : ModifierHost
      {
        symbol
        {
          Kind      = "event";
          SpanClass = DotNetLang.PropertySpanClass;

          in Type : TypeSymbol;
        }

        Header.Scope        = Scope;
        Symbol.Flags       |= Header.Modifiers.Flags;
        InterfaceType.Scope = Scope;
        Symbol.Type         = Header.TypeRef.Symbol;
        Accessors.Scope     = Scope;

        InterfaceType : QualifiedReference?;
        Header        : EventHeader;
        Accessors     : EventAccessor*;
      }
    | Indexer : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "indexer";
          SpanClass = DotNetLang.PropertySpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
          in  Type           : TypeSymbol;
        }

      stage 1:
        out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

        InterfaceType.Scope        = Scope;
        Type.Scope                 = Scope;
        Parameters.ContainingTable = Symbol.ParameterScope;
        Parameters.Scope           = Scope;
        Parameters.IndexIn         = 0u;
        Symbol.Type                = TypeRef.Symbol;
        Accessors.Scope            = Scope;

        Parameters    : FormalParameter*;
        Type          : QualifiedReference;
        InterfaceType : QualifiedReference?;
        Accessors     : PropertyAccessor*;
      }
    | Constant : ModifierHost
      {
        symbol
        {
          Kind      = "constant";
          SpanClass = DotNetLang.ConstantSpanClass;

          in Type : TypeSymbol;
        }

        Header.Scope  = Scope;
        Symbol.Flags |= Header.Modifiers.Flags;
        Symbol.Type   = Header.TypeRef.Symbol;

        Header : ConstantHeader;
      }
    | Field : ModifierHost
      {
        symbol
        {
          Kind      = "field";
          SpanClass = DotNetLang.FieldSpanClass;

          in Type : TypeSymbol;
        }

        Header.Scope  = Scope;
        Symbol.Flags |= Header.Modifiers.Flags;
        Symbol.Type   = Header.TypeRef.Symbol;

        Header : FieldHeader;
      }
    | FixedSizeBuffer : ModifierHost
      {
        symbol
        {
          Kind      = "fixed size buffer";
          SpanClass = DotNetLang.FieldSpanClass;

          in Type : TypeSymbol;
        }

        Header.Scope  = Scope;
        Symbol.Flags |= Header.Modifiers.Flags;
        Symbol.Type   = Header.TypeRef.Symbol;

        Header : FixedSizeBufferHeader;
      }
    | OperatorUnary : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "operator";
          SpanClass = Language.OperatorSpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
          in  ReturnType     : TypeSymbol;
        }

      stage 1:
        out ReturnTypeRef : Ref[TypeSymbol] = ReturnType.Ref.Resolve();

        ReturnType.Scope          = Scope;
        Parameter.ContainingTable = Symbol.ParameterScope;
        Parameter.Scope           = Scope;
        Parameter.IndexIn         = 0u;
        Symbol.ReturnType         = ReturnTypeRef.Symbol;

        ReturnType : QualifiedReference;
        Parameter  : FormalParameter;
      }
    | OperatorBinary : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "operator";
          SpanClass = Language.OperatorSpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
          in  ReturnType     : TypeSymbol;
        }

      stage 1:
        out ReturnTypeRef : Ref[TypeSymbol] = ReturnType.Ref.Resolve();

        ReturnType.Scope           = Scope;
        Parameter1.ContainingTable = Symbol.ParameterScope;
        Parameter1.Scope           = Scope;
        Parameter1.IndexIn         = 0u;
        Parameter2.ContainingTable = Symbol.ParameterScope;
        Parameter2.Scope           = Scope;
        Parameter2.IndexIn         = 1u;
        Symbol.ReturnType          = ReturnTypeRef.Symbol;

        ReturnType : QualifiedReference;
        Parameter1 : FormalParameter;
        Parameter2 : FormalParameter;
      }
    | OperatorCnv : AttributeHost, ModifierHostAndAst
      {
        symbol
        {
          Kind      = "operator";
          SpanClass = Language.OperatorSpanClass;

          out ParameterScope : TableScope = TableScope("parameters", this);
          in  ReturnType     : TypeSymbol;
        }

      stage 1:
        out ReturnTypeRef : Ref[TypeSymbol] = ReturnType.Ref.Resolve();

        ReturnType.Scope          = Scope;
        Parameter.ContainingTable = Symbol.ParameterScope;
        Parameter.Scope           = Scope;
        Parameter.IndexIn         = 0u;
        Symbol.ReturnType         = ReturnTypeRef.Symbol;

        ReturnType : QualifiedReference;
        Parameter  : FormalParameter;
        Kind       : OperatorKind;
      }
  }

  abstract ast ConstructorInitializer
  {
    // TODO: Map arguments
    | This
    | Base
  }

  ast FieldHeader : AttributeHost, ModifierAst
  {
  stage 1:
    out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

    Type.Scope = Scope;

    Type       : QualifiedReference;
  }

  ast ConstantHeader : AttributeHost, ModifierAst
  {
  stage 1:
    out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

    Type.Scope = Scope;

    Type       : QualifiedReference;
  }

  ast EventHeader : AttributeHost, ModifierAst
  {
  stage 1:
    out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

    Type.Scope = Scope;

    Type       : QualifiedReference;
  }

  ast FixedSizeBufferHeader : AttributeHost, ModifierAst
  {
  stage 1:
    out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

    Type.Scope = Scope;

    Type       : QualifiedReference;
  }

  abstract declaration PropertyAccessor : AttributeHost, ModifierHostAndAst
  {
    // TODO: Map body
    | Get
    | Set
  }

  abstract declaration EventAccessor : AttributeHost
  {
    // TODO: Map body
    | Add
    | Remove
  }
}
