using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

using System.Collections.Immutable;
using System.Linq;

using SCG = System.Collections.Generic;

namespace DotNet
{
  declaration CustomAttribute
  {
    symbol
    {
      in Type : TypeSymbol = null;
      in Constructor : Member.ConstructorSymbol = null;
    }
  }

  ast CustomAttributeReference
  {
  stage 1:
    in NameScope : Scope;

    Name.NameScopeFactory = ScopeFactories.Attribute;
    Name.Scope            = NameScope;

    Target : CustomAttributeTarget?;
    Name   : QualifiedReference;
    // TODO: Map arguments
  }

  abstract ast CustomAttributeTarget
  {
    | Assembly
    | Module
    | Field
    | Event
    | Method
    | Param
    | Property
    | Return
    | Type
    | Typevar
  }

  ast GlobalAttributes : NamespaceMember
  {
    OpeningOut           = OpeningIn;
    Attributes.NameScope = CurrentScope;

    Attributes : CustomAttributeReference*;
  }
}
