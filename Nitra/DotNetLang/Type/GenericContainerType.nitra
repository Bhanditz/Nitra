using DotNet;

using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;

using System.Linq;
using SCG = System.Collections.Generic;

namespace DotNet
{
  // class, struct or interface
  abstract declaration GenericContainerType : GenericType, SupportsInheritanceType
  {
    symbol
    {
      SpanClass = DotNetLangLanguage.TypeSpanClass;
      Scope     = MemberTable;

      out MemberTable     : TableScope       = TableScope(this.ToString(), this);
      out IsPartial       : bool             = AstUtils.IsPartial(this.Declarations);
    }

    TypeBase.Scope   = TypeParameterConstraints.Scope;
    Members.Parent   = Symbol;
    Members.Scope    = Scope.HideWith(Symbol.BaseTypeSet.ParentScope)
                            .HideWith(TypeParameterAliasesScope)
                            .HideWith(Symbol.MemberTable);


    Members                  : TypeMember*;
    IsPartial                : bool;
  }

  abstract declaration TopGenericType    : GenericType, NamespaceMemberDeclaration
  {
    symbol
    {
      FullName  = AstUtils.MakeNamespaceFullName(Parent.FullName, this.Name, TypeParameters);
    }
  }
  abstract declaration NestedGenericType : GenericType, TypeMember
  {
    symbol
    {
      FullName  = AstUtils.MakeNamespaceFullName(Parent.FullName, this.Name, TypeParameters);
      TypeSubst = AstUtils.CreateNestedConstructedTypeSymbol(this, this.Parent.TypeSubst, context);
    }
  }

  abstract declaration Class     : GenericContainerType { symbol { Kind = "class";     } }
  abstract declaration Struct    : GenericContainerType { symbol { Kind = "struct";    } }
  abstract declaration Interface : GenericContainerType { symbol { Kind = "interface"; } }

  declaration TopClass        : Class,     TopGenericType    { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[TopClass       ](this, candidate); } }
  declaration NestedClass     : Class,     NestedGenericType { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[NestedClass    ](this, candidate); } }
  declaration TopStruct       : Struct,    TopGenericType    { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[TopStruct      ](this, candidate); } }
  declaration NestedStruct    : Struct,    NestedGenericType { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[NestedStruct   ](this, candidate); } }
  declaration TopInterface    : Interface, TopGenericType    { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[TopInterface   ](this, candidate); } }
  declaration NestedInterface : Interface, NestedGenericType { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[NestedInterface](this, candidate); } }
}
