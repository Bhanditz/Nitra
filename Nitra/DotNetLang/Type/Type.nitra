using Nitra;
using Nitra.Declarations;

using Nemerle.Collections;

using SCG = System.Collections.Generic;

namespace DotNet
{
  abstract declaration Type : BindableAst
  {
    symbol
    {
      out TypeSubst : TypeSymbol = this;
      SpanClass = DotNetLang.TypeSpanClass;
      Kind = "type";
    }
  }

  // enum, delegate, class, struct or interface
  abstract declaration DeclaredType : Type, AttributeHost, ModifierHost
  {
  }

  abstract ast AttributeHost : BindableAst
  {
    Attributes.NameScope = Scope;

    Attributes : Attribute*;
  }

  abstract declaration ModifierHost
  {
    symbol
    {
      in Flags : ModifierSet;
    }

    Symbol.Flags   |= Modifiers.Flags;
    Modifiers.Flags = ModifierSet(context);

    unless (Modifiers.Flags.IsEmpty || Modifiers.Flags.Equals(Symbol.Flags))
      Error("Partial declarations of type have conflicting accessibility modifiers.");

    Modifiers  : Modifier*;
  }
}
