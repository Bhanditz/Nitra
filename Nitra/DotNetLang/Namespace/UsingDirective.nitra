using DotNet;

using Nitra;
using Nitra.Runtime.Binding;

namespace DotNet
{
  abstract ast UsingDirective : ScopedAst, NamespaceMember
  {
  }

  declaration UsingAliasDirective : UsingDirective
  {
    symbol
    {
      Kind      = "alias";
      SpanClass = DotNetLangLanguage.AliasSpanClass;
      Scope     = ReplacementScope;

      in ReplacementSymbol : DeclarationSymbol;
      in ReplacementScope  : Scope;
    }

    ContainingTable           = UsingAliasesScope;
    NamespaceOrTypeName.Scope = CurrentScope;
    Symbol.ReplacementSymbol  = NamespaceOrTypeName.Ref.Symbol;
    Symbol.ReplacementScope   = NamespaceOrTypeName.Ref.Scope;

    NamespaceOrTypeName : QualifiedReference;
  }

  ast UsingOpenDirective : UsingDirective
  {
    ContainingTable           = null;
    NamespaceOrTypeName.Scope = CurrentScope;
    OpeningOut                = AstUtils.PrependScopeIfResolved(NamespaceOrTypeName.Ref, OpeningIn);

    //unless (NamespaceOrTypeName.Ref.Symbol is NamespaceSymbol || NamespaceOrTypeName.Ref.Symbol is SyntaxModuleSymbol)
    //  Error("Using directive can open only namespace or syntax module.");

    NamespaceOrTypeName : QualifiedReference;
  }
}
