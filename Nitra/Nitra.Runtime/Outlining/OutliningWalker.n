using Nemerle;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Outlining
{
  internal sealed class OutliningWalker : AstWalkerBase
  {
    internal variant OutlineMarker
    {
      | Begin { pos : int; isImplementation : bool }
      | End   { pos : int }
      | HiddenByDefault
    }

    private Markers : List[OutlineMarker] = List();
    private mutable _lastSpaceStartPos : int;
    private mutable _lastSpaceEndPos   : int;

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      if (IsWhitespaceRule(ruleInfo.RuleParser.Descriptor))
      {
        // отлавливаем динамическую последовательность пустых s: первое съедает все пробелы, остальные оказываются пустыми
        if (startPos < endPos || (_lastSpaceEndPos < startPos && startPos == endPos))
        {
          _lastSpaceStartPos = startPos;
          _lastSpaceEndPos   = endPos;
        }
        // встретили обломившуюся s
        else when (_lastSpaceEndPos < startPos && endPos < 0)
        {
          _lastSpaceStartPos = startPos;
          _lastSpaceEndPos   = startPos;
        }
      }
      else unless (ruleInfo.RuleParser.Descriptor.IsTokenRule)
        base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      unless (ruleInfo.RuleParser.Descriptor.IsTokenRule)
        base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, _endPos : int, _parseResult : ParseResult) : void
    {
      match (ruleInfo.Name)
      {
        | "Outline.outline_impl"         with (isImplementation = true,  isNeedSkipSpaces = false)
        | "Outline.outline_begin"        with (isImplementation = false, isNeedSkipSpaces = false)
        | "Outline.outline_begin_before" with (isImplementation = false, isNeedSkipSpaces = true) =>
          def pos = if (isNeedSkipSpaces && _lastSpaceEndPos == startPos) _lastSpaceStartPos else startPos;
          Markers.Add(OutlineMarker.Begin(pos, isImplementation));

        | "Outline.outline_end"          with isNeedSkipSpaces = false
        | "Outline.outline_end_before"   with isNeedSkipSpaces = true =>
          def pos = if (isNeedSkipSpaces && _lastSpaceEndPos == startPos) _lastSpaceStartPos else startPos;
          Markers.Add(OutlineMarker.End(pos));

        | "Outline.outline_hiden" =>
          Markers.Add(OutlineMarker.HiddenByDefault());

        | _ => ()
      }
    }

    public GetOutlining(outlinings : List[OutliningInfo]) : void
    {
      def stack = Stack();
      mutable isHiddenByDefault = false;
      foreach (marker in Markers)
      {
        | Begin(pos, isImplementation) =>
          stack.Push((pos, isHiddenByDefault, isImplementation));
          isHiddenByDefault = false;

        | End(endPos) =>
          when (stack.Count > 0)
          {
            def (startPos, isHiddenByDefault, isImplementation) = stack.Pop();
            when (startPos < endPos)
              outlinings.Add(OutliningInfo(NSpan(startPos, endPos), isHiddenByDefault, isImplementation));
          }

        | HiddenByDefault => isHiddenByDefault = true;
      }
      // assert2(stack.Count == 0)
    }

    private static IsWhitespaceRule(rd : RuleDescriptor) : bool
    {
      rd.Grammar.FullName == "Whitespaces" && (rd.Name == "s" || rd.Name == "S")
    }
  }
}
