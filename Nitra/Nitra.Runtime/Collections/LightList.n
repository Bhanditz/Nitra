using SCG = System.Collections.Generic;

namespace Nita.Runtime.Collections
{
  public struct LightList[T]
  {
    private mutable Data : SCG.List[T];
    private mutable FirstItem : T;
    private mutable HasFirstItem : bool;

    private Init() : void
    {
      when (Data == null)
      {
        Data = SCG.List();
        when (HasFirstItem)
          Data.Add(FirstItem);
      }
    }
  
    public Count : int
    {
      get
      {
        if (Data != null)
          Data.Count
        else if (HasFirstItem)
          1
        else
          0
      }
    }
  
    public Add(item : T) : void
    {
      if (HasFirstItem)
      {
        Init();
        Data.Add(item);
      }
      else
      {
        HasFirstItem = true;
        FirstItem = item;
      }
    }
  
    public AddRange(items : SCG.IEnumerable[T]) : void
    {
      Init();
      Data.AddRange(items);
    }
  
    public Items[index : int] : T
    {
      get
      {
        if (index == 0 && HasFirstItem)
          FirstItem
        else
        {
          assert(Data != null, "Index out of range");
          Data[index]
        }
      }
    }

    public ToList() : SCG.List[T]
    {
      Init();
      Data
    }

    public ToArray() : array[T]
    {
      if (Data != null)
        Data.ToArray()
      else if (HasFirstItem)
        array[FirstItem]
      else
        array(0)
    }
  }
}