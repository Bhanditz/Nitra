using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Collections
{
  public class SynchronizedCache[TKey, TValue]
  {
    // System.Collections.Hashtable по тому что:
    // Hashtable is thread safe for use by multiple reader threads and a single writing thread.
    // It is thread safe for multi-thread use when only one of the threads perform write (update) operations,
    // which allows for lock-free reads provided that the writers are serialized to the Hashtable.
    private _cache : System.Collections.Hashtable = System.Collections.Hashtable();
    private _factory : TKey -> TValue;

    public this(factory : TKey -> TValue)
    {
      _factory = factory;
    }

    public Item[key : TKey] : TValue
    {
      get
      {
        def cacheKey = key : object;
        def value = _cache[cacheKey];
        if (value == null)
        {
          lock (_cache)
          {
            if (_cache.ContainsKey(cacheKey))
            {
              _cache[cacheKey] :> TValue;
            }
            else
            {
              def value = _factory(key);
              _cache[cacheKey] = value;
              value;
            }
          }
        }
        else
        {
          value :> TValue;
        }
      }
    }
  }
}
