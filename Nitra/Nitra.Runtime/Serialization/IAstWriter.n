using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization
{
  public enum AstKind : byte
  {
    | Ast
    | MissingAst
    | AmbiguousAst
  }

  public interface IAstWriter
  {
    BeginWriteOption(hasValue : bool, isOptimized : bool) : void;
    BeginWriteList(count : int, isOptimized : bool) : void;
    BeginWriteTuple(count : int) : void;
    WriteText(text : string) : void;
    BeginWriteSimpleAst(ruleDescriptor : SimpleRuleDescriptor) : void;
    BeginWriteExtensionAst(ruleDescriptor : ExtensionRuleDescriptor) : void;
    WriteMissingAst(ruleDescriptor : RuleDescriptor) : void;
    BeginWriteAmbiguousAst(ruleDescriptor : ExtensibleRuleDescriptor, count : int) : void;
    EndWrite() : void;
  }

  public interface IAstReader
  {
    Context : ChemicalAstContext { get; }
    ReadOptionHeader() : bool;
    ReadListHeader() : int;
    ReadTupleHeader() : int;
    ReadText() : string;
    ReadAstHeader() : AstKind;
    ReadExtension[T]() : T where T : Ast;
    ReadAmbiguities[T]() : array[T] where T : Ast;
    ReadAst() : Ast;
  }
}
