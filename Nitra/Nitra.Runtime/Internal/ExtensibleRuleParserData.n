using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.Internal;

namespace Nitra.Internal
{
  public sealed class ExtensibleRuleParserData : IParserInfo
  {
    public   Grammar             : CompositeGrammar           { get; }
    public   Descriptor          : ExtensibleRuleDescriptor   { get; }
    internal PrefixDescriptors   : array[PrefixRuleDescriptor];
    internal PostfixDescriptors  : array[PostfixRuleDescriptor];
    internal PrefixParsers       : array[ExtensionRuleParser];
    internal PostfixParsers      : array[ExtensionRuleParser];
    internal PrefixId            : int;
    internal PostfixId           : int;
    internal Parsers             : List[ExtensibleRuleParser] = List();
    internal MandatoryTokenCount : int { get; set; }
    internal IsDynamicExtensible : bool { get { Descriptor.IsDynamicExtensible } }

    internal this(grammar : CompositeGrammar, rd : ExtensibleRuleDescriptor, prefixDescriptors : array[PrefixRuleDescriptor], postfixDescriptors : array[PostfixRuleDescriptor], ruleIdBuilder : RuleIdBuilder)
    {
      Grammar             = grammar;
      Descriptor          = rd;
      PrefixDescriptors   = prefixDescriptors;
      PostfixDescriptors  = postfixDescriptors;
      PrefixId            = ruleIdBuilder.NewRuleId(this);
      PostfixId           = ruleIdBuilder.NewRuleId(this);
      PrefixParsers       = PrefixDescriptors.Map(rd => rd.NewParser(Grammar, ruleIdBuilder, this));
      PostfixParsers      = PostfixDescriptors.Map(rd => rd.NewParser(Grammar, ruleIdBuilder, this));
    }

    internal GetParser(bindingPower : int) : ExtensibleRuleParser
    {//Сейчас массив получается весьма дырявым. После того как задание силы связывания будет переведено с чисел на имена дырок в массиве будет очень мало.
      while (Parsers.Count <= bindingPower)
        Parsers.Add(null);

      mutable ruleParser = Parsers[bindingPower];
      when (ruleParser == null)
      {
        ruleParser = Internal.ExtensibleRuleParser(this, bindingPower);
        Parsers[bindingPower] = ruleParser;
      }
      ruleParser
    }

    public Init(ruleIdBuilder : RuleIdBuilder) : void
    {
      foreach (ruleParser in PrefixParsers)
        ruleParser.Init(ruleIdBuilder);
      foreach (ruleParser in PostfixParsers)
        ruleParser.Init(ruleIdBuilder);
    }

    public override ToString() : string
    {
      $"$(Descriptor.Name) ($(Descriptor.Grammar.FullName))"
    }
  }
}
