using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public abstract class ExtensionRuleParser : RuleParser, IRuleParserReflection, IRecoveryRuleParser
  {
    public RuleId     : int;

    public LowerBound : char;
    public UpperBound : char;

    public MandatoryTokens : int { get; /*protected internal*/ set; }
    public abstract UpdateMandatoryTokens() : bool;
    public ParsingSequence : ParsingSequence { get; internal set; }

    public this(grammar : CompositeGrammar, descriptor : RuleDescriptor, lowerBound : char, upperBound : char)
    {
      base(grammar, descriptor);
      LowerBound = lowerBound;
      UpperBound = upperBound;
      RuleId = grammar.NewRuleId(this)
    }

    public abstract SubrulesCount : int { get; }

    public abstract Init() : void;
    public abstract Reflection(ruleId : int) : SequenceInfo;

    public abstract Parse(pos : int, text : string, resultRef : ref int, parseResult : ParseResult) : int;
    public abstract FindRecoveryPosition(mutable curTextPos : int, astPtr : int, stack : RecoveryStackFrame, parseResult : ParseResult) : void;
    public abstract TryParse(recoveryStack : RecoveryStackFrame, startState : int, curTextPos : int, continueList : bool, parsedStates : List[ParsedStateInfo], parseResult : ParseResult) : int;

    public abstract GetLoopBodyForSeparator(separatorId : int, bodyId : out int, firstState : out int) : bool;
    public abstract GetRuleParserForState(state : int) : IRecoveryRuleParser * int;

    public abstract IsStateCanParseEmptyString   (state : int) : bool;
    public abstract IsVoidState                  (state : int) : bool;
    public abstract IsStartState                 (state : int) : bool;
    public abstract GetStartState                (state : int) : int;
    public abstract IsLoopSeparatorStart         (state : int) : bool;
    public abstract IsLoopSeparator              (state : int) : bool;
    public abstract IsLoopBody                   (state : int) : bool;

    public abstract PatchAst(startPos : int, startState : int, errorIndex : int, stack : RecoveryStackFrame, parseResult : ParseResult) : bool;
    public abstract CodeForState(state : int) : string;
    public abstract CodeForStates(startState : int, endState : int, skipOptionalStates : bool) : array[string];
    public abstract GetNextState(state : int) : int;
    public abstract GetOffsetForState(state : int) : int;
    public abstract GetMandatoryTokensForState(state : int) : int;

    public abstract Code           : string { get; }
    public abstract CodeWithStates : string { get; }
    public abstract RuleName       : string { get; }
    public abstract StartState     : int { get; }
  }
}
