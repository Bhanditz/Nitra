using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Internal
{
  public interface ISplicableParseTreeBuilder[T] : IExtensibleRuleParseTreeFactory[T]
  {
    SyntaxRule     (parseResult : ParseResult, ruleDescriptor : RuleDescriptor,        startPos : int, endPos : int, member1 : SplicableParseTreeMember[T]) : T;
    SyntaxRule     (parseResult : ParseResult, ruleDescriptor : RuleDescriptor,        startPos : int, endPos : int, member1 : SplicableParseTreeMember[T], member2 : SplicableParseTreeMember[T]) : T;
    SyntaxRule     (parseResult : ParseResult, ruleDescriptor : RuleDescriptor,        startPos : int, endPos : int, member1 : SplicableParseTreeMember[T], member2 : SplicableParseTreeMember[T], member3 : SplicableParseTreeMember[T]) : T;
    SyntaxRule     (parseResult : ParseResult, ruleDescriptor : RuleDescriptor,        startPos : int, endPos : int, member1 : SplicableParseTreeMember[T], member2 : SplicableParseTreeMember[T], member3 : SplicableParseTreeMember[T], member4 : SplicableParseTreeMember[T]) : T;
    SyntaxRule     (parseResult : ParseResult, ruleDescriptor : RuleDescriptor,        startPos : int, endPos : int, params members : array[SplicableParseTreeMember[T]]) : T;
    RegularRule    (parseResult : ParseResult, ruleDescriptor : RegularRuleDescriptor, startPos : int, endPos : int) : T;
    Splice         (parseResult : ParseResult, grammarDescriptor : GrammarDescriptor,  startPos : int, endPos : int) : T;
    SkipAny        (parseResult : ParseResult, startPos : int, endPos : int) : T;
    OptionSome     (parseResult : ParseResult, startPos : int, endPos : int, item : T) : T;
    OptionNone     (parseResult : ParseResult, startPos : int, endPos : int) : T;
    OptimizedOption(parseResult : ParseResult, startPos : int, endPos : int, value : bool) : T;
    Tuple          (parseResult : ParseResult, startPos : int, endPos : int, item1 : T, item2 : T) : T;
    Tuple          (parseResult : ParseResult, startPos : int, endPos : int, item1 : T, item2 : T, item3 : T) : T;
    Tuple          (parseResult : ParseResult, startPos : int, endPos : int, item1 : T, item2 : T, item3 : T, item4 : T) : T;
    Tuple          (parseResult : ParseResult, startPos : int, endPos : int, params items : array[T]) : T;
    OptimizedList  (parseResult : ParseResult, startPos : int, endPos : int, count : int) : T;
    List           (parseResult : ParseResult, startPos : int, endPos : int, items : List[T]) : T;
  }

  [Record]
  public struct SplicableParseTreeMember[T]
  {
    public Name  : string { get; }
    public Value : T      { get; }
  }
}
