using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    private SequencesToRecover : SCG.Queue[ParsedSequence * int] = SCG.Queue();

    private BuildAst() : void
    {
      MakeRecoveredSequence(StartSequence, this.ParseResult.Text.Length);
      while (SequencesToRecover.Count > 0)
        MakeRecoveredSequence(SequencesToRecover.Dequeue());
    }

    private AddRecoveredSequence(key : int * int * ParsingSequence, subrules : array[ParsedSubrule * TokenChanges], tokenChanges : TokenChanges) : void
    {//TODO: Optimize
      when (this.ParseResult.RecoveredSequences.ContainsKey(key))
        return;

      def (_startPos, endPos, parsingSequence) = key;
      def states = parsingSequence.States;

      def allFlattenSubrules = SCG.List();
      def flattenSubrules    = SCG.List();
      def walk(index)
      {
        mutable walkCalled = false;
        def (subrule, _) = subrules[index];
        def state = states[subrule.State];
        flattenSubrules.Add(subrule);

        foreach ((nextSubrule, _) in subrules with nextIndex)
          when (subrule.End == nextSubrule.Begin && state.Next.Contains(nextSubrule.State))
          {
            walk(nextIndex);
            walkCalled = true;
          }

        unless (walkCalled)
        {
          def positions = array(flattenSubrules.Count + 1);
          foreach (subrule in flattenSubrules with i)
            positions[i] = ParseResult.SubruleStart(subrule.Begin, subrule.State);
          positions[flattenSubrules.Count] = ParseResult.SubruleStart(endPos, -1);
          allFlattenSubrules.Add(positions);
        }

        flattenSubrules.RemoveAt(flattenSubrules.Count - 1);
      }

      def recoveredSequence = if (subrules.Length == 0)
      {
        def index = ParseResult.AddRecoveredSubrule(array[ParseResult.SubruleStart(endPos, -1)], parsingSequence);
        ParseResult.RecoveredSequence.Unambiguous(subrules, tokenChanges, index);
      }
      else
      {
        walk(0);
        if (allFlattenSubrules.Count == 1)
        {
          def index = ParseResult.AddRecoveredSubrule(allFlattenSubrules[0], parsingSequence);
          ParseResult.RecoveredSequence.Unambiguous(subrules, tokenChanges, index);
        }
        else
        {
          def indexes = array(allFlattenSubrules.Count);
          foreach (subrules in allFlattenSubrules with i)
            indexes[i] = ParseResult.AddRecoveredSubrule(subrules, parsingSequence);
          ParseResult.RecoveredSequence.Ambiguous(subrules, tokenChanges, indexes);
        }
      }

      this.ParseResult.RecoveredSequences.Add(key, recoveredSequence);
    }

    private IsDeletedSubrule(seq : ParsedSequence, subrule : ParsedSubrule) : bool
    {
      seq.ParsingSequence.States[subrule.State].CanConsumeErrorTokens &&
      Deleted.Contains(subrule.Begin) &&
      Deleted[subrule.Begin].Contains(subrule.End)
    }

    public MakeRecoveredSequence(seq : ParsedSequence, end : int) : void
    {
      def makeSequence(seq : ParsedSequence, mutable end : int) : void
      {
        def key = (seq.StartPos, end, seq.ParsingSequence);
        unless (this.ParseResult.RecoveredSequences.Contains(key))
        {
          def subrules = GetSubrulesAndChanges(seq, end);
          foreach ((subrule, changes) in subrules)
          {
            def sequences = seq.GetSequencesForSubrule(subrule).ToArray();
            if (sequences.Length > 0)
            {
              assert3(sequences.Length == 1);
              assert(sequences[0].Ends[subrule.End] == changes);
              SequencesToRecover.Enqueue(sequences[0], subrule.End);
            }
            else when (IsDeletedSubrule(seq, subrule))
            {
              def sequence = match (seq.ParsingSequence.States[0])
              {
                | ParsingState.Subsequence as state => state.Sequence
                | ParsingState.List        as state => state.Sequence
                | _                                 => assert(false);
              }
              def key = (subrule.Begin, subrule.End, sequence);
              AddRecoveredSequence(key, array[], changes);
            }
          }
          AddRecoveredSequence(key, subrules, seq.Ends[end]);
        }
      }

      match (seq.ParsingSequence)
      {
        | Sequence =>
          makeSequence(seq, end);

        | Extensible =>
          def key = (seq.StartPos, end, seq.ParsingSequence);
          when (this.ParseResult.RecoveredSequences.Contains(key))
            return;
          def filteredSubrules = SCG.List();
          foreach ((subrule, changes) in GetSubrulesAndChanges(seq, end) with i)
          {
            when (i > 0 && subrule.Begin == subrule.End)
              continue;

            filteredSubrules.Add((subrule, changes));

            foreach (sequence in seq.GetSequencesForSubrule(subrule))
            {
              mutable seqChanges;
              when (sequence.Ends.TryGetValue(subrule.End, out seqChanges))
              when (seqChanges == changes)
                makeSequence(sequence, subrule.End);
            }
          }
          AddRecoveredSequence(key, filteredSubrules.ToArray(), seq.Ends[end]);
      }
    }

    private GetSubruleTokenChanges(seq : ParsedSequence, subrule : ParsedSubrule) : TokenChanges
    {
      def state = seq.ParsingSequence.States[subrule.State];
      if (IsDeletedSubrule(seq, subrule))
        TokenChanges(inserted = 0, deleted = 1);
      else match (state)
      {
        | Scan when subrule.IsEmpty => TokenChanges(state.Subrule.MandatoryTokenCount, 0);
        | Scan | Predicate          => TokenChanges(0, 0)
        | Simple            as state1 with parsingSequence = state1.RuleParser.ParsingSequence
        | Extensible        as state2 with parsingSequence = state2.RuleParser.ParsingSequence
        | List              as state3 with parsingSequence = state3.Sequence
        | ListWithSeparator as state4 with parsingSequence = state4.Sequence
        | Subsequence       as state5 with parsingSequence = state5.Sequence =>
          if (subrule.IsEmpty)
            TokenChanges(inserted = parsingSequence.MandatoryTokenCount, deleted = 0);
          else
          {
            mutable innerSeq;
            if (Sequences.TryGetValue((subrule.Begin, parsingSequence), out innerSeq))
              innerSeq.Ends[subrule.End]
            else
              TokenChanges(inserted = 0, deleted = 0);
          }

        | ExtensionPrefix  as prefix when subrule.IsEmpty => TokenChanges(prefix.RuleParser.MandatoryTokenCount, 0)
        | ExtensionPrefix  as prefix =>
          mutable minChanges = TokenChanges.Fail;
          foreach (ruleParser in prefix.RuleParser.PrefixRules)
          {
            mutable innerSeq;
            mutable changes;
            when (Sequences.TryGetValue((subrule.Begin, ruleParser.ParsingSequence), out innerSeq) && innerSeq.Ends.TryGetValue(subrule.End, out changes))
              minChanges = TokenChanges.Min(minChanges, changes);
          }
          assert(!minChanges.IsFail);
          minChanges

        | ExtensionPostfix when subrule.IsEmpty => TokenChanges(inserted = 0, deleted = 0)
        | ExtensionPostfix as postfix =>
          mutable minChanges = TokenChanges.Fail;
          foreach (ruleParser when postfix.RuleParser.FirstPostfixRuleId <= ruleParser.RuleId in postfix.RuleParser.PostfixRules)
          {
            mutable innerSeq;
            mutable changes;
            when (Sequences.TryGetValue((subrule.Begin, ruleParser.ParsingSequence), out innerSeq) && innerSeq.Ends.TryGetValue(subrule.End, out changes))
              minChanges = TokenChanges.Min(minChanges, changes);
          }
         assert(!minChanges.IsFail);
         minChanges
      }
    }

    private static SubrulesComparison : Comparison[ParsedSubrule] = (l, r) =>
    {
      res:
        {
          mutable c;
          // Группируем по хвостам.
          c = l.End.CompareTo(r.End); when (c != 0) res(c);
          // Двигаем пустылки назад.
          c = l.Begin.CompareTo(r.Begin); when (c != 0) res(c);
          // Сдвигаем большие состояния в конец.
          // При текущей форме графа это позволяет произвести рассчёт за одн проход.
          // Если граф состояний парсинга изменится для пустышек может понадоится итерировать до фиксированной точки.
          l.State.CompareTo(r.State);
        }
    };

    private GetSubrulesAndChanges(seq : ParsedSequence, mutable end : int) : array[ParsedSubrule * TokenChanges]
    {
      def subrules = SCG.List();
      mutable changes = seq.Ends[end];
      def stateEndChanges = Hashtable();
      foreach (endState in seq.ParsingSequence.EndStates)
        stateEndChanges[endState, end] = changes;

      def allSubrules = seq.ParsedSubrules.ToArray().SortInplace(SubrulesComparison);
      def states = seq.ParsingSequence.States;

      for (mutable i = allSubrules.Length - 1; i >= 0; --i)
      {
        def subrule = allSubrules[i];
        mutable endChanges;
        mutable startChanges;
        when (stateEndChanges.TryGetValue((subrule.State, subrule.End), out endChanges))
        when (Records[subrule.Begin].TryGetValue(ParseRecord(seq, subrule.State, subrule.Begin), out startChanges))
        {
          def subruleChanges = GetSubruleTokenChanges(seq, subrule);
          when (startChanges + subruleChanges == endChanges)
          {
            subrules.Add(subrule, subruleChanges);
            foreach (prevState in states[subrule.State].Prev)
              stateEndChanges[prevState, subrule.Begin] = startChanges;
          }
        }
      }

      subrules.Reverse();
      subrules.ToArray();
    }
  }
}
