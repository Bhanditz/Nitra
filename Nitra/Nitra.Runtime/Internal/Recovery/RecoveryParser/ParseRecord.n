using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public struct ParseRecord
  {
    public Sequence : ParsedSequence;
    public Index    : int;
    /// Debug only. Position from we try parse this record.
    [EqualsIgnore]
    public mutable ParsePos : int;

    public IsComplete : bool        { get { Index >= Sequence.SubruleCount } }
    public CurSubrule : SubruleInfo { get { Sequence.GetSubrule(Index) } }

    public Next() : ParseRecord
    {
      assert3(!IsComplete);
      ParseRecord(Sequence, Index + 1, -1);
    }

    public override ToString() : string
    {
      ToString(ParsePos)
    }
    
    public ToString(curPos : int) : string
    {
      def sb = Text.StringBuilder();
      def startPos = Sequence.StartPos;
        
      _ = sb.Append("(");
        
      def name = 
        match (Sequence)
        {
          | Simple                     => "Simple     "
          | Extension                  => "Extension  "
          | Option                     => "Option     "
          | List                       => "List       "
          | ListRule                   => "ListRule   "
          | ListWithSeparator          => "ListWS     "
          | ListWithSeparatorRule      => "ListWSRule "
          | ListWithSeparatorSeparator => "ListWSSep  "
          | Root                       => "Root       "
          | Extensible                 => "Extensible "
        };

      _ = sb.Append(name);
        
      when (Sequence.HasName)
      {
        _ = sb.Append(Sequence.Name);
        _ = sb.Append(" = ");
      }
      match (Sequence)
      {
        | ParsedSequence.Root            => _ = sb.Append("Root");
        | ParsedSequence.Extensible as r =>
          _ = sb.Append("Extensible: " + r.RuleParser.RuleName + " ");
          when (Index == 0)
            _ = sb.Append("● ");
          _ = sb.Append(" Prefix ");
          when (Index == 1)
            _ = sb.Append(" ● ");
          _ = sb.Append(" Postfix ");
          when (Index > 1)
            _ = sb.Append(" ♦");
          
        | _ =>
          def subruleCount = Sequence.SubruleCount;
          
          for (mutable i = 0; i < subruleCount; i++)
          {
            def r = Sequence.GetSubrule(i);
          
            when (i > 0)
              _ = sb.Append("  ");
            when (Index == i)
              _ = sb.Append("●  ");
            
            _ = sb.Append(r);
          }
        
          when (Index == subruleCount)
              _ = sb.Append(" ♦");
        
          _ = sb.Append(", StartPos=");
        
          _ = sb.Append(startPos);
          _ = sb.Append(")");
      }

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");
        
      def text = this.Sequence.RecoveryParser.ParseResult.Text;
          
      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;
            
        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));
            
        _ = sb.Append("■");
            
        def middle = if (curPos >= 0) curPos - startPos else showLen;
        
        _ = sb.Append(text.SafeRightSubstring(startPos, middle));
        
        when (curPos >= 0)
          _ = sb.Append("▸");
        
        when (middle < showLen)
        _ = sb.Append(text.SafeRightSubstring(startPos + middle, showLen - middle));
              
        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");
              
        _ = sb.Append("»");
      }
        
      sb.ToString()
    }
  }
}
