using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public struct ParseRecord
  {
    public Sequence : ParsedSequence;
    public State    : int;
    public ParsingState : ParsingState { get { Sequence.ParsingSequence.States[State] } }
    /// Debug only. Position from we try parse this record.
    [EqualsIgnore]
    public mutable ParsePos : int;

    public IsComplete : bool        { get { State == -1 } }

    public Next(next : int) : ParseRecord
    {
      assert3(!IsComplete);
      ParseRecord(Sequence, next, -1);
    }

    public override ToString() : string
    {
      ToString(ParsePos)
    }
    
    public ToString(curPos : int) : string
    {
      def sb = Text.StringBuilder();
      def startPos = Sequence.StartPos;

      _ = sb.Append("(");

      foreach (state in Sequence.ParsingSequence.States)
      {
        when (state.Id > 0)
          _ = sb.Append("  ");
        when (State == state.Id)
          _ = sb.Append("●  ");
        _ = sb.Append(state.Description);
      }
        
      when (State == -1)
          _ = sb.Append(" ♦");
        
      _ = sb.Append(", StartPos=");
        
      _ = sb.Append(startPos);
      _ = sb.Append(")");

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");
        
      def text = this.Sequence.RecoveryParser.ParseResult.Text;
          
      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;
            
        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));
            
        _ = sb.Append("■");
            
        def middle = if (curPos >= 0) curPos - startPos else showLen;
        
        _ = sb.Append(text.SafeRightSubstring(startPos, middle));
        
        when (curPos >= 0)
          _ = sb.Append("▸");
        
        when (middle < showLen)
        _ = sb.Append(text.SafeRightSubstring(startPos + middle, showLen - middle));
              
        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");
              
        _ = sb.Append("»");
      }
        
      sb.ToString()
    }
  }
}
