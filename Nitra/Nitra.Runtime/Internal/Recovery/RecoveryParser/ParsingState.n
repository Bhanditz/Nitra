using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record]
  public variant ParsingState
  {
    public Id            : int                                  { get; internal set; }
    public Next          : array[int]                           { get; internal set; }
    public Prev          : array[int]                           { get; internal set; }

    | Simple           { RuleParser : SimpleRuleParser; }
    | Extensible       { RuleParser : ExtensibleRuleParser; }
    | ExtensionPrefix  { RuleParser : ExtensibleRuleParser; }
    | ExtensionPostfix { RuleParser : ExtensibleRuleParser; }
    | Subsequence      { Sequence   : ParsingSequence; SequenceInfo : SequenceInfo; }
    | Scan             { Subrule    : SubruleInfo; }

    public Description : string
    {
      get
      {
        match (this)
        {
          | Simple           as state => state.RuleParser.Code
          | Extensible       as state => state.RuleParser.Code
          | ExtensionPrefix  as state => state.RuleParser.Code
          | ExtensionPostfix as state => state.RuleParser.Code
          | Subsequence      as state => state.SequenceInfo.Description
          | Scan             as state => state.Subrule.Code
        }
      }
    }

    public override ToString() : string
    {
      $"$Id $(Next.NToList()) $(Prev.NToList()) $Description"
    }
  }
}
