using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record]
  public variant ParsingState
  {
    public Id            : int                                  { get; internal set; }
    public Next          : array[int]                           { get; internal set; }
    public Prev          : array[int]                           { get; internal set; }
    public IsStart       : bool                                 { get; internal set; }
    //public IsEnd         : bool                                 { get; internal set; }
    public Subrule       : SubruleInfo;

    | Simple           { RuleParser    : SimpleRuleParser; }
    | Extensible       { RuleParser    : ExtensibleRuleParser; }
    | ExtensionPrefix  { RuleParser    : ExtensibleRuleParser; }
    | ExtensionPostfix { RuleParser    : ExtensibleRuleParser; }
    | Subsequence      { Sequence      : ParsingSequence; SequenceInfo : SequenceInfo; }
    | List             { Sequence      : ParsingSequence; }
    | ListWithSeparator{ Sequence      : ParsingSequence; }
    | Scan             { }
    | Predicate        { HeadPredicate : (int * string * ParseResult) -> bool; }

    public IsNullable : bool
    {
      get
      {
        match (this)
        {
          | Simple            as state => state.RuleParser.ParsingSequence.IsNullable
          | Extensible                 => false
          | ExtensionPrefix            => false
          | ExtensionPostfix           => false
          | Subsequence       as state => state.Sequence.IsNullable
          | List              as state => state.Subrule.MandatoryTokenCount == 0
          | ListWithSeparator as state => state.Subrule.MandatoryTokenCount == 0
          | Scan              as state => if (state.Subrule == null) false else state.Subrule.CanParseEmptyString
          | Predicate                  => false
        }
      }
    }

    public CalleeSequences : Seq[ParsingSequence]
    {
      get
      {
        match (this)
        {
          | Scan                       => ()
          | Predicate                  => ()
          | Simple            as state => yield state.RuleParser.ParsingSequence
          | List              as state => yield state.Sequence
          | ListWithSeparator as state => yield state.Sequence
          | Subsequence       as state => yield state.Sequence
          | Extensible        as state => yield state.RuleParser.ParsingSequence
          | ExtensionPrefix   as state =>
            foreach (parser in state.RuleParser.PrefixRules)
              yield parser.ParsingSequence;

          | ExtensionPostfix as state =>
            foreach (parser in state.RuleParser.PostfixRules)
              when (state.RuleParser.FirstPostfixRuleId <= parser.RuleId)
                yield parser.ParsingSequence;
        }
      }
    }

    public IsToken : bool
    {
      get
      {
        match (this)
        {
          | Simple           as state => state.RuleParser.IsTokenRule
          | Extensible       as state => state.RuleParser.IsTokenRule
          | ExtensionPrefix  as state => state.RuleParser.IsTokenRule
          | ExtensionPostfix as state => state.RuleParser.IsTokenRule
          | Subsequence               => false
          | List                      => false
          | ListWithSeparator         => false
          | Scan                      => true
          | Predicate                 => false
        }
      }
    }
    
    public IsPrev(state : int) : bool { Prev.Exists(_ == state) }
    public IsNext(state : int) : bool { Next.Exists(_ == state) }

    public Description : string
    {
      get
      {
        match (this)
        {
          | Simple            as state => state.RuleParser.Descriptor.Name
          | Extensible        as state => state.RuleParser.Descriptor.Name + if (state.RuleParser.BindingPower > 0) " ^ " + state.RuleParser.BindingPower else null
          | ExtensionPrefix   as state => state.RuleParser.Descriptor.Name + " Prefix"
          | ExtensionPostfix  as state => state.RuleParser.Descriptor.Name + " Postfix"
          | List                       => this.Subrule.ToString()
          | ListWithSeparator          => this.Subrule.ToString()
          | Subsequence       as state => state.SequenceInfo.Description
          | Scan              as state => state.Subrule?.Description ?? "Root"
          | Predicate                  => "Predicate"
        }
      }
    }

    public override ToString() : string
    {
      $"$Id $(Next.NToList()) $(Prev.NToList()) $Description"
    }
  }
}
