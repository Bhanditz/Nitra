using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record]
  public variant ParsingState
  {
    [RecordIgnore] public Id                    : int                          { get; internal set; }
    [RecordIgnore] public Next                  : array[int]                   { get; internal set; }
    [RecordIgnore] public Prev                  : array[int]                   { get; internal set; }
    [RecordIgnore] public IsStart               : bool                         { get; internal set; }
                   public Subrule               : SubruleInfo                  { get; } // TODO: переименовать .Subrule в SubruleInfo
                   public CanConsumeErrorTokens : bool                         { get; }

    | Simple                { RuleParser    : SimpleRuleParser; }
    | DynamicExtensible     { Sequence      : ParsingSequence; }
    | DynamicExtensibleItem { RuleParser    : ExtensibleRuleParser; }
    | Extensible            { RuleParser    : ExtensibleRuleParser; }
    | ExtensionPrefix       { RuleParser    : ExtensibleRuleParser; }
    | ExtensionPostfix      { RuleParser    : ExtensibleRuleParser; }
    | Subsequence           { Sequence      : ParsingSequence; SequenceInfo : SequenceInfo; }
    | List                  { Sequence      : ParsingSequence; }
    | ListWithSeparator     { Sequence      : ParsingSequence; }
    | Scan                  { }
    | Predicate             { HeadPredicate : SubruleInfo.PredicateDelegate; }

    public IsNullable : bool
    {
      get
      {
        match (this)
        {
          | Simple                as state => state.RuleParser.ParsingSequence.IsNullable
          | Extensible                     => false
          | ExtensionPrefix                => false
          | ExtensionPostfix               => true
          | Subsequence           as state => state.Sequence.IsNullable
          | List                  as state => state.Subrule.MandatoryTokenCount == 0
          | ListWithSeparator     as state => state.Subrule.MandatoryTokenCount == 0
          | Scan                  as state => if (state.Subrule == null) false else state.Subrule.CanParseEmptyString
          | Predicate                      => false
          | DynamicExtensible              => false
          | DynamicExtensibleItem          => false
        }
      }
    }

    public MandatoryTokenCount : int
    {
      get
      {
        match (this)
        {
          | Simple                as state => state.RuleParser.SequenceInfo.MandatoryTokenCount
          | Extensible            as state => state.RuleParser.MandatoryTokenCount
          | ExtensionPrefix       as state => state.RuleParser.MandatoryTokenCount
          | ExtensionPostfix               => 0
          | Subsequence           as state => state.SequenceInfo.MandatoryTokenCount
          | List                  as state => state.Subrule.MandatoryTokenCount
          | ListWithSeparator     as state => state.Subrule.MandatoryTokenCount
          | Scan                  as state => state.Subrule.MandatoryTokenCount
          | Predicate                      => 0
          | DynamicExtensible     as state => state.Subrule.MandatoryTokenCount
          | DynamicExtensibleItem as state => state.Subrule.MandatoryTokenCount
        }
      }
    }

    public CalleeSequences : Seq[ParsingSequence]
    {
      get
      {
        match (this)
        {
          | Scan                           => ()
          | Predicate                      => ()
          | Simple                as state => yield state.RuleParser.ParsingSequence
          | List                  as state => yield state.Sequence
          | ListWithSeparator     as state => yield state.Sequence
          | Subsequence           as state => yield state.Sequence
          | Extensible            as state => yield state.RuleParser.ParsingSequence
          | ExtensionPrefix       as state =>
            foreach (parser in state.RuleParser.PrefixRules)
              yield parser.ParsingSequence;

          | ExtensionPostfix      as state =>
            foreach (parser in state.RuleParser.PostfixRules)
              when (state.RuleParser.FirstPostfixRuleId <= parser.RuleId)
                yield parser.ParsingSequence;

          | DynamicExtensible     as state => yield state.Sequence
          | DynamicExtensibleItem as state => yield state.RuleParser.ParsingSequence
        }
      }
    }

    public Description : string
    {
      get
      {
        match (this)
        {
          | Simple            as state => state.RuleParser.Descriptor.Name
          | DynamicExtensible          => this.Subrule.ToString()
          | DynamicExtensibleItem      => "DynamicExtensibleItem"
          | Extensible        as state => state.RuleParser.Descriptor.Name + if (state.RuleParser.BindingPower > 0) " ^ " + state.RuleParser.BindingPower else null
          | ExtensionPrefix   as state => state.RuleParser.Descriptor.Name + " Prefix"
          | ExtensionPostfix  as state => state.RuleParser.Descriptor.Name + " Postfix"
          | List                       => this.Subrule.ToString()
          | ListWithSeparator          => this.Subrule.ToString()
          | Subsequence       as state => state.SequenceInfo.Description
          | Scan              as state => state.Subrule?.Description ?? "Root"
          | Predicate                  => "Predicate"
        }
      }
    }

    public override ToString() : string
    {
      $"$Id $(Next.NToList()) $(Prev.NToList()) $Description"
    }
  }
}
