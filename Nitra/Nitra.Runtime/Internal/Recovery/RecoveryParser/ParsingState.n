using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record]
  public variant ParsingState
  {
    public Id   : int        { get; internal set; }
    public Next : array[int] { get; internal set; }
    public Prev : array[int] { get; internal set; }

    | Simple           { RuleParser : SimpleRuleParser; }
    | Extensible       { RuleParser : ExtensibleRuleParser; }
    | ExtensionPrefix  { RuleParser : ExtensibleRuleParser; }
    | ExtensionPostfix { RuleParser : ExtensibleRuleParser; }
    | Subsequence      { Sequence   : ParsingSequence; }
    | Scan             { Subrule    : SubruleInfo; }

    public override ToString() : string
    {
      def desc = match (this)
      {
        | Simple           as state => $"Simple      $(state.RuleParser)"
        | Extensible       as state => $"Extensible  $(state.RuleParser)"
        | ExtensionPrefix  as state => $"Prefix      $(state.RuleParser)"
        | ExtensionPostfix as state => $"Postfix     $(state.RuleParser)"
        | Subsequence      as state => $"Subsequence $(state.Sequence)"
        | Scan             as state => $"Scan        $(state.Subrule)"
      }
      $"$Id $(Next.NToList()) $(Prev.NToList()) $desc"
    }
  }
}
