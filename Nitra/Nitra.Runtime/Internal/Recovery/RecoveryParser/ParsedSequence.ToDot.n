using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  partial class ParsedSequence
  {
    public ToDot(parsedSubrules : Seq[ParsedSubrule]) : string
    {
      def nodes = SCG.List();
      def edges = SCG.List();
      
      def parsedNodes = parsedSubrules.GroupBy(p => (p.Begin, p.State));
      
      mutable subrules = this.GetFirstSubrules(parsedSubrules);

      _ = parsedNodes;
      _ = subrules;
      
      /*
      foreach (subrule in subrules)
      {
        nodes.Add($<#$(Name(state)) [label="$(Label(state))"]#>);
        foreach (next in state.Next)
        {
          if (next < 0)
            edges.Add($<#$(Name(state)) -> End#>);
          else
            edges.Add($<#$(Name(state)) -> $(Name(States[next]))#>);
        }
      }
        
      nodes.Add(<#End [label="-1: End"]#>);

      def fullName = (this.SequenceInfo.Parser :> RuleParser).Descriptor.ToString();
      def seqName = 
        match (this.SequenceInfo)
        {
          | ListWithSeparatorSeparator => "Loop Separator (in " + fullName + ")"
          | ListWithSeparatorRule      => "Loop With Separator Body (in " + fullName + ")"
          | List                       => "Loop Body (in " + fullName + ")"
          | Option                     => "Option (in " + fullName + ")"
          | Predicate                  => "Predicate (in " + fullName + ")"
          | Ast                        => fullName
        };
      def graphLabel = seqName + " = " + this;
      def content = $<#
        digraph RecoveryParser
        {
          rankdir=LR;
          compound=true;
          label="$graphLabel";
    
          ..$(nodes; "\r\n          ")
    
          ..$(edges; "\r\n          ")
        }
      #>;
      
      content
      */
      ""
    }
    
    public Visualize() : void
    {
      Visualize(ParsedSubrules);
    }
    
    public Visualize(parsedSubrules : Seq[ParsedSubrule]) : void
    {
      def fileName = GetFilePath();
      File.WriteAllText(fileName, ToDot(parsedSubrules));
      X.ConvertToDot(fileName);
    }
    
    GetFilePath() : string
    {
      def ruleParser = ParsingSequence.SequenceInfo.Parser :> RuleParser;
      def path = Path.Combine(Path.GetTempPath(), "Nitra", "Dot", $<#..$(ruleParser.Grammar.Grammars; "-"; g => g.Name)#>, ruleParser.Descriptor.Name);
      def filePath = path + ".dot";
      def dir = Path.GetDirectoryName(filePath);
      unless (Directory.Exists(dir))
        _ = Directory.CreateDirectory(dir);
      filePath
    }
    
    Label(state : ParsingState) : string
    {
      state.Id + ": " + X.DotEscape(state.Description)
    }

    Name(state : ParsingState) : string
    {
      "State" + state.Id
    }
  }
}
