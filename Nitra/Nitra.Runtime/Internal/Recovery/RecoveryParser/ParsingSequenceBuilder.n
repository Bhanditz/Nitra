using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record]
  internal class ParsingSequenceBuilder[T]
    where T : ParsingSequence
  {
                   private         parsingSequenceCtor : (array[int] * array[int] * array[ParsingState] * Hashtable[int, int]) -> T;
                   private         idBuilder           : RuleIdBuilder;
                   private         staticStateToEarley : Hashtable[int, int];
    [RecordIgnore] private         parsingStates       : SCG.List[ParsingState * int * int] = SCG.List();
    [RecordIgnore] private         transitions         : Hashtable[int, SCG.HashSet[int]] = Hashtable();
    [RecordIgnore] private mutable stateCount          : int = 2;
    [RecordIgnore] private         startStates         : Hashtable[int, ParsingState] = Hashtable();
    [RecordIgnore] private         endStates           : Hashtable[int, ParsingState] = Hashtable();

    public StartState : int { get { 0 } }
    public EndState   : int { get { 1 } }
    public NewState() : int { stateCount++; stateCount - 1 }

    [Record]
    public class StateIds
    {
      public Start : int;
      public End   : int;
    }

    public AddState(state : ParsingState) : StateIds
    {
      idBuilder.AddParsingStateAndSetId(state);
      when (staticStateToEarley != null)
        staticStateToEarley[state.Subrule.State] = state.Id;
      def startState = NewState();
      def endState   = NewState();
      parsingStates.Add(state, startState, endState);
      startStates.Add(startState, state);
      endStates.Add(endState, state);
      when (state.Subrule?.CanParseEmptyString && !(state is ParsingState.Predicate))
        AddTransition(startState, endState);
      StateIds(startState, endState);
    }

    public AddTransition(from : int, to : int) : void
    {
      _ = transitions.Update(from, SCG.HashSet, (set) => { _ = set.Add(to); set });
    }

    public AddDefaultTransitions() : void
    {
      AddDefaultSequenceTransitions();
      AddDefaultStartAndEndTransitions();
    }

    public AddDefaultSequenceTransitions() : void
    {
      for (mutable i = 1; i < parsingStates.Count; ++i)
        AddTransition(parsingStates[i - 1][2], parsingStates[i][1]);
    }

    public AddDefaultStartAndEndTransitions() : void
    {
      def firsStateStart = parsingStates[0][1];
      def lastStateEnd = parsingStates[parsingStates.Count - 1][2];
      AddTransition(StartState, firsStateStart);
      AddTransition(lastStateEnd, EndState);
    }

    public CreateSequence() : T
    {
      startStates.Add(EndState, null);
      endStates.Add(StartState, null);
      def tmpStateSet = SCG.HashSet();
      def collectStates(state)
      {
        def collectAll(fromState)
        {
          mutable toStates;
          when (transitions.TryGetValue(fromState, out toStates))
            foreach (toState in toStates)
              when (tmpStateSet.Add(toState))
                collectAll(toState);
        }
        tmpStateSet.Clear();
        collectAll(state);
        tmpStateSet
          .MapToArrayFiltered(state => startStates.Contains(state), state => { def ps = startStates[state]; if (ps == null) -1 else ps.Id })
          .SortInplace(_.CompareTo(_));
      }
      def startStates = collectStates(StartState);

      def prevStates = Hashtable();
      foreach ((state, _startState, endState) in parsingStates)
      {
        state.Next = collectStates(endState);
        foreach (nextState in state.Next)
          when (nextState != -1)
            _ = prevStates.Update(nextState, SCG.HashSet, (set) => { _ = set.Add(state.Id); set });
      }
      foreach ((state, _startState, _endState) in parsingStates)
      {
        mutable prev;
        state.Prev = if (prevStates.TryGetValue(state.Id, out prev))
          prev.ToArray().SortInplace(_.CompareTo(_));
        else
          array[];
      }

      foreach (startState in startStates)
        when (startState >= 0)
          idBuilder.GetParsingState(startState).IsStart = true;

      def endStates = SCG.List();
      foreach ((state, _, _) in parsingStates)
        when (state.Next.Exists(_ == -1))
          endStates.Add(state.Id);

      def res = parsingSequenceCtor(startStates, endStates.ToArray().SortInplace(_.CompareTo(_)), parsingStates.MapToArray((state, _, _) => state), staticStateToEarley);
      res
    }

    public _Visualize() : void
    {
      def fileName = Path.Combine(Path.GetTempPath(), "Nitra", "ParsingSequenceBuilder");
      File.WriteAllText(fileName, ToDot());
      X.ConvertToDot(fileName);
    }

    public ToDot() : string
    {
      def nodes = SCG.List();
      def edges = SCG.List();
      for (mutable i = 0; i < this.stateCount; ++i)
      {
        mutable prefix = "";
        when (startStates.Contains(i))
          prefix += "s";
        when (endStates.Contains(i))
          prefix += "e";
        nodes.Add($<#$(i) [label="$(prefix)$(i)"]#>);
      }

      foreach ((state, s, e) in parsingStates)
        edges.Add($<#$(s) -> $(e) [label="($(state.Id)) $(X.DotEscape(state.Description))"]#>);

      foreach ((s, ends) in transitions.KeyValuePairs)
        foreach (e in ends)
          edges.Add($<#$(s) -> $(e) [color=red]#>);

      def content = $<#
        digraph RecoveryParser
        {
          rankdir=LR;
          compound=true;

          ..$(nodes; "\r\n          ")

          ..$(edges; "\r\n          ")
        }
      #>;

      content
    }
  }
}
