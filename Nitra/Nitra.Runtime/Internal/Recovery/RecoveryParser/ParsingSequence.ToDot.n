using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Extensions;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class ParsingSequence
  {
    public ToDot() : string
    {
      def nodes = SCG.List();
      def edges = SCG.List();

      foreach (state in States)
      {
        nodes.Add($<#$(Name(state)) [label="$(Label(state))"]#>);
        foreach (next in state.Next)
        {
          if (next < 0)
            edges.Add($<#$(Name(state)) -> End#>);
          else
            edges.Add($<#$(Name(state)) -> $(Name(States[next]))#>);
        }
      }
        
      nodes.Add(<#End [label="-1: End"]#>);

      def graphLabel = GraphLabel();
      def content = $<#
        digraph RecoveryParser
        {
          rankdir=LR;
          compound=true;
          label="$graphLabel";
    
          ..$(nodes; "\r\n          ")
    
          ..$(edges; "\r\n          ")
        }
      #>;
      
      content
    }

    public MakeGraph(parsedSubrules : Seq[ParsedSubrule], end : int) : Hashtable[int * int, list[int * int]]
    {
      def nodeEdges     = Hashtable();
      
      foreach (subrule in parsedSubrules)
      {
        nodeEdges[subrule.State, subrule.Begin] = [];
        when (subrule.End == end && States[subrule.State].Next.Contains(-1))
          nodeEdges[-1, subrule.End] = [];
      }

      foreach (subrule in parsedSubrules)
      {
        def from = (subrule.State, subrule.Begin);
        foreach (nextState in States[subrule.State].Next)
        {
          def to = (nextState, subrule.End);
          when (nodeEdges.Contains(to))
            nodeEdges[from] = to :: nodeEdges[from];
        }
      }
      
      nodeEdges
    }

    public MakeGraph(parsedSubrules : Seq[ParsedSubrule * TokenChanges], end : int) : Hashtable[int * int, list[(int * int) * TokenChanges]]
    {
      def nodeEdges     = Hashtable();
      
      foreach ((subrule, _) in parsedSubrules)
      {
        nodeEdges[subrule.State, subrule.Begin] = [];
        when (subrule.End == end && States[subrule.State].Next.Contains(-1))
          nodeEdges[-1, subrule.End] = [];
      }

      foreach ((subrule, subruleChanges) in parsedSubrules)
      {
        def from = (subrule.State, subrule.Begin);
        foreach (nextState in States[subrule.State].Next)
        {
          def to = (nextState, subrule.End);
          when (nodeEdges.Contains(to))
            nodeEdges[from] = (to, subruleChanges) :: nodeEdges[from];
        }
      }
      
      nodeEdges
    }
    
    public FindValidPaths(graph : Hashtable[int * int, list[int * int]], startPos : int, end : int) : Hashtable[int * int, int]
    {
      def nodeData = Hashtable.[int * int, int]();
      def walk(stateIndex : int, pos : int) : int
      {
        def nodeFrom = (stateIndex, pos);
        mutable res;
        when (nodeData.TryGetValue(nodeFrom, out res))
          return res;
          
        when (stateIndex < 0)
        {
          res = if (pos == end) 1 else 0;
          nodeData[nodeFrom] = res;
          return res;
        }
        
        nodeData[nodeFrom] = int.MaxValue;
        
        def edges = graph[nodeFrom];
        
        foreach (nodeTo in edges)
        {
          def res2 = walk(nodeTo);
            
          when (res2 == 1)
            res = res2;
        }
        
        nodeData[nodeFrom] = res;
        res
      }
      
      foreach (stateIndex in this.StartStates)
        when (graph.ContainsKey(stateIndex, startPos))
          _ = walk(stateIndex, startPos);
      
      nodeData
    }
    public GraphLabel() : string
    {
      when (this.SequenceInfo == null)
        return this.ToString();
      
      def fullName = (this.SequenceInfo.Parser :> RuleParser).Descriptor.ToString();
      def seqName = 
        match (this.SequenceInfo)
        {
          | ListWithSeparatorSeparator => "Loop Separator (in " + fullName + ")"
          | ListWithSeparatorRule      => "Loop With Separator Body (in " + fullName + ")"
          | List                       => "Loop Body (in " + fullName + ")"
          | Option                     => "Option (in " + fullName + ")"
          | Predicate                  => "Predicate (in " + fullName + ")"
          | Ast                        => fullName
        };
      def graphLabel = seqName + " = " + this;
      graphLabel
    }

    public Visualize() : void
    {
      def fileName = GetFilePath();
      File.WriteAllText(fileName, ToDot());
      X.ConvertToDot(fileName);
    }
    
    internal GetFilePath() : string
    {
      def ruleParser = 
        match (this)
        {
          | Extensible as ext => ext.RuleParser : RuleParser
          | _ => this.SequenceInfo.Parser :> RuleParser
        };
      def path = Path.Combine(Path.GetTempPath(), "Nitra", "Seq", $<#..$(ruleParser.Grammar.Grammars; "-"; g => g.Name)#>, ruleParser.Descriptor.Name);
      def filePath = path + ".dot";
      def dir = Path.GetDirectoryName(filePath);
      unless (Directory.Exists(dir))
        _ = Directory.CreateDirectory(dir);
      filePath
    }
    
    public GetFilePath(dir : string, startPos : int, end : int) : string
    {
      def escape(str : string) : string
      {
        def sb = StringBuilder(str);
        
        _ = sb.Replace("*", "ZERO_LOOP");
        _ = sb.Replace("+", "ONE_ZERO_LOOP");
        _ = sb.Replace("?", "OPT");
        
        foreach (ch in Path.GetInvalidPathChars())
          _ = sb.Replace(ch, '_');
          
        _ = sb.Replace(Path.PathSeparator, '_');
        _ = sb.Replace(Path.VolumeSeparatorChar, '_');
        _ = sb.Replace('<', '_');
        _ = sb.Replace('>', '_');
        _ = sb.Replace('/', '_');
        _ = sb.Replace('\\', '_');
        _ = sb.Replace(' ', '_');
        _ = sb.Replace('\t', '_');
        _ = sb.Replace('\n', '_');
        _ = sb.Replace('\r', '_');
        _ = sb.Replace("____", "_");
        _ = sb.Replace("___", "_");
        _ = sb.Replace("__", "_");
        
        sb.ToString()
      }
      def fileName = 
        match (this)
        {
          | Sequence as seq => startPos + "-" + seq.RuleName + "-" + escape(seq.RuleDesc) + "-" + end
          | seq => startPos + "-" + seq.RuleName + "-" + end
        };
      def filePath = Path.Combine(Path.GetTempPath(), dir, fileName);
      def dir = Path.GetDirectoryName(filePath);
      unless (Directory.Exists(dir))
        _ = Directory.CreateDirectory(dir);
      filePath
    }

    public GetUrlForExtensible(dir : string, startPos : int, end : int) : string
    {
      Path.GetFileName(GetFilePath(dir, startPos, end)) + "-Extensions.html"
    }
    
    public GetUrl(dir : string, startPos : int, end : int) : string
    {
      Path.GetFileName(GetFilePath(dir, startPos, end)) + ".svg"
    }
    
    public GetFilePathForExtensible(dir : string, startPos : int, end : int) : string
    {
      GetFilePath(dir, startPos, end) + "-Extensions.html"
    }
    
    Label(state : ParsingState) : string
    {
      state.Id + ": " + X.DotEscape(state.Description)
    }

    Name(state : ParsingState) : string
    {
      "State" + state.Id
    }
    
    public Label(stateIndex : int, pos : int) : string
    {
      def label =
        match (stateIndex)
        {
          | -1 => "End"
          | s  => X.DotEscape(this.States[s].Description)
        };

      "State: " + stateIndex + "At: " + pos + "\r\n" + label
    }

    public Name(stateIndex : int, pos : int) : string
    {
      "Node_State_" + (if (stateIndex < 0) "End" else stateIndex.ToString()) + "_Pos_" + pos
    }
  }
}
