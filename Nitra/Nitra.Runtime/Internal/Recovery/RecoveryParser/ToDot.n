using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public ToDot(_startPos : int) : SCG.List[string]
    {
      def maxDisplyString = 60;
      def files = SCG.List();
      mutable dir = @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079";
      unless (Directory.Exists(dir))
        dir = Directory.CreateDirectory(Path.ChangeExtension(Path.GetTempFileName(), null)).FullName;      
      
      foreach (file in Directory.GetFiles(dir))
        File.Delete(file);
      
      def escape(x : string) : string
      {
        x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
      }
      def getFileName(sequence : ParsedSequence) : string
      {
        sequence.Id + "_" + (if (sequence.HasName) sequence.Name else "") + "_" + sequence.StartPos
      }
      def getFilePath(dir : string, sequence : ParsedSequence) : string
      {
        Path.Combine(dir, getFileName(sequence))
      }
      def isContinuationOf(subrule1 : ParsedSubrule, subrule2 : ParsedSubrule) : bool
      {
        subrule2.Index + 1 == subrule1.Index && subrule2.End == subrule1.Begin
      }
      def hasContinuation(sequence : ParsedSequence, subrule : ParsedSubrule) : bool
      {
        subrule.Index == sequence.SubruleCount - 1 || sequence.ParsedSubrules.Any(s => isContinuationOf(s, subrule))
      }
      
      foreach (sequence in Sequences)
      {
        def text = ParseResult.Text;
        def fileName = getFilePath(dir, sequence);
        
        when (fileName == @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079\269_UsingDirective_0")
        {
          assert2(true);
        }
        when (fileName == @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079\180_")
        {
          assert2(true);
        }        
        
        when (sequence is ParsedSequence.Extensible as ext)
        {
          def prefixesFileName = getFilePath(dir, sequence) + "_Prefixes";
          def nodes = SCG.List();
          def edges = SCG.List();
          
          //nodes.Add(<#Complete [label=">>"]#>);
          nodes.Add(<#Start [label=">"]#>);
          
          foreach (prefix in ext.RuleParser.PrefixRules)
          {
            def startPos = sequence.StartPos;
            def id = prefix.RuleId;
            def prefixSeq = Sequences.FindObject(s => s.StartPos == startPos && s.Id == id);
            assert2(prefixSeq != null);
            def prefixFileName = getFileName(prefixSeq) + ".svg";
            def name = prefixSeq.Name;
            def style = if (prefixSeq.Ends.Count == 0) "fontcolor=red" else "peripheries=2 color=blue";
            def label = $<#..$(prefixSeq.Ends; "; "; e => $"$startPos, $e")\n$name#>;
            def node = $<#$name [label="$label" $style shape=box URL="$prefixFileName"]#>;
            nodes.Add(node);
            edges.Add($<#Start -> $name#>);
          }
          
          def content = 
$<#
  digraph RecoveryParser
  {
    rankdir=LR;
    compound=true;
    label="$sequence";
    
    ..$(nodes; "\r\n    ")
    
    ..$(edges; "\r\n    ")
  }
#>;
          File.WriteAllText(prefixesFileName, content);
          files.Add(prefixesFileName);
        }

        def failedSubrules = SCG.List();
        
        def subruleNode(sequence : ParsedSequence, subrule : ParsedSubrule, isFailed = false, needLabel : bool = false) : string
        {
          def makeUrl(id : int, name : string, startPos : int, sufix : string = null) : string
          {
            <#URL="#> + id + "_" + name + "_" + startPos + sufix + <#.svg"#>
          }
          def getUrl(sequence : ParsedSequence) : string
          {
            | ParsedSequence.Extensible as ex => makeUrl(ex.RuleParser.PrefixId, ex.Name, subrule.Begin, "_Prefixes")
            | _ => 
              def x = sequence.GetSubrule(subrule.Index);
              match (x)
              {
                | SubruleInfo.Option            as y => makeUrl(y.Rule.Id, "", subrule.Begin)
                | SubruleInfo.List              as y => makeUrl(y.Rule.Id, "", subrule.Begin)
                | SubruleInfo.ListWithSeparator as y => makeUrl(y.Rule.Id, "", subrule.Begin)
                | SubruleInfo.SimpleCall        as y => makeUrl(y.RuleParser.RuleId, y.RuleParser.RuleName, subrule.Begin)
                | SubruleInfo.ExtensibleCall    as y => makeUrl(y.RuleParser.PrefixId, y.RuleParser.RuleName, subrule.Begin)
                //| SubruleInfo.ExtensibleCall as y => makeUrl(y.RuleParser.RuleId, y.RuleParser.RuleName, subrule.Begin)
                | _ => ""
              }
          }
          def getName(sequence : ParsedSequence) : string
          {
            | ParsedSequence.Extensible as ex => subrule.Index + ":" + ex.RuleParser.RuleName
            | _ => sequence.GetSubrule(subrule.Index).ToString()
          }
          def url        = getUrl(sequence);
          def color = if (isFailed) "fontcolor=red" else "";
          when (!isFailed && needLabel && !hasContinuation(sequence, subrule))
            failedSubrules.Add(ParsedSubrule(subrule.End, subrule.End, subrule.Index + 1));
          def bkColor    = if (subrule.End > subrule.Begin) "peripheries=2 color=blue" else "";
          def textLen    = subrule.End - subrule.Begin;
          def ellipsis   = if (textLen > maxDisplyString) "…" else "";
          def parsedText = "\n'" + escape(text.Substring(subrule.Begin, Math.Min(textLen, maxDisplyString)) ) + ellipsis + "'\n";
          def label      = escape(subrule.Begin + ":" + subrule.End + "\n" + getName(sequence)) + parsedText;
          
          "Seq_" + sequence.Id + "_subrule_" + subrule.Index + "_B" + subrule.Begin + "_E" + subrule.End
          + if (needLabel) $<# [label="$label" $color $bkColor $url shape=box] #> else null
        }
        def nodes = SCG.List();
        def edges = SCG.List();
        
        
        def lastIndex = sequence.SubruleCount - 1;
        
        when (sequence.ParsedSubrules.Any(s => s.Index == lastIndex))
          nodes.Add(<#Complete [label=">>"]#>);
        
        foreach (subrule in sequence.ParsedSubrules)
          nodes.Add(subruleNode(sequence, subrule, needLabel=true));
        
        foreach (subrule when subrule.Index == 0 in sequence.ParsedSubrules)
          edges.Add("Start -> " + subruleNode(sequence, subrule));

        nodes.Add(<#Start [label=">"]#>);

        when (sequence.ParsedSubrules.Count == 0)
          failedSubrules.Add(ParsedSubrule(sequence.StartPos, sequence.StartPos, 0));
        
        foreach (subrule in sequence.ParsedSubrules)
        {
          def node         = subruleNode(sequence, subrule);
          def nextSubrules = sequence.ParsedSubrules.Where(s => isContinuationOf(s, subrule));
          foreach (nextSubrule in nextSubrules)
            edges.Add(node + " -> " + subruleNode(sequence, nextSubrule));
        }
          
        foreach (subrule when subrule.Index == lastIndex in sequence.ParsedSubrules)
          edges.Add(subruleNode(sequence, subrule) + " -> Complete");

        foreach (subrule2 in failedSubrules)
        {
          def subrule2 = subrule2;
          nodes.Add(subruleNode(sequence, subrule2, isFailed=true, needLabel=true));
          def prevSubrule = sequence.ParsedSubrules.FindValue(x => x.Index == subrule2.Index - 1 && x.End == subrule2.Begin);
          if (prevSubrule == null)
            edges.Add("Start -> " + subruleNode(sequence, subrule2, isFailed=true));
          else
            edges.Add(subruleNode(sequence, prevSubrule.Value) + " -> " + subruleNode(sequence, subrule2, isFailed=true));
        }
          
        def content = 
$<#
  digraph RecoveryParser
  {
    rankdir=LR;
    compound=true;
    label="$sequence";
    
    ..$(nodes; "\r\n    ")
    
    ..$(edges; "\r\n    ")
  }
#>;
        File.WriteAllText(fileName, content);
        files.Add(fileName);
      }
    
      X.ConvertToDot(files);
      
      SCG.List()
    }
  }
}
