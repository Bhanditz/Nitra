using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    private class ToDotImpl
    {
      private static MaxDisplyString : int = 60;
      private dir : string;
      private recoveryParser : RecoveryParser;

      public this(recoveryParser : RecoveryParser)
      {
        this.recoveryParser = recoveryParser;
        dir = @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079";
        //dir = @"C:\Users\Andrey.Belyakov\AppData\Local\Temp\tmpAABA";
        unless (Directory.Exists(dir))
          dir = Directory.CreateDirectory(Path.ChangeExtension(Path.GetTempFileName(), null)).FullName;

        foreach (file in Directory.GetFiles(dir))
          File.Delete(file);
      }

      private Escape(x : string) : string
      {
        x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
      }

      private GetFileName(sequence : ParsedSequence) : string
      {
        sequence.Id + "_" + (if (sequence.HasName) sequence.Name else "") + "_" + sequence.StartPos
      }

      private MakeUrl(sequence : ParsedSequence) : string
      {
        <#URL="#> + GetFileName(sequence) + <#.svg"#>
      }

      private GetExtensionsFileName(sequence : ParsedSequence, subrule : ParsedSubrule) : string
      {
        sequence.Id + "_" + (if (sequence.HasName) sequence.Name else "") + "_" + sequence.StartPos + "_Extentions" + "_B" + subrule.Begin
      }

      private GetExtensionsFilePath(sequence : ParsedSequence, subrule : ParsedSubrule) : string
      {
        Path.Combine(dir, GetExtensionsFileName(sequence, subrule))
      }

      private MakeExtensionsUrl(sequence : ParsedSequence, subrule : ParsedSubrule) : string
      {
        <#URL="#> + GetExtensionsFileName(sequence, subrule) + <#.svg"#>
      }

      private GetFilePath(sequence : ParsedSequence) : string
      {
        Path.Combine(dir, GetFileName(sequence))
      }

      private SubruleNodeName(sequence : ParsedSequence, subrule : ParsedSubrule) : string
      {
        "Seq_" + sequence.Id + "_subrule_" + subrule.Index + "_B" + subrule.Begin + "_E" + subrule.End
      }

      private SubruleNode(sequence : ParsedSequence, subrule : ParsedSubrule, isFailed = false) : string
      {
        def getUrl() : string
        {
          if (sequence is ParsedSequence.Extensible)
            MakeExtensionsUrl(sequence, subrule)
          else if (sequence.GetSequenceForSubrule(subrule) is Some(sequence))
            MakeUrl(sequence)
          else
            ""
        }
        def getName(sequence : ParsedSequence) : string
        {
          | ParsedSequence.Extensible as ex => subrule.Index + ":" + ex.RuleParser.RuleName
          | _ => sequence.GetSubrule(subrule.Index).ToString()
        }
        def url        = getUrl();
        def color      = if (isFailed) "fontcolor=red" else "";
        def bkColor    = if (subrule.End > subrule.Begin) "peripheries=2 color=blue" else "";
        def textLen    = subrule.End - subrule.Begin;
        def ellipsis   = if (textLen > MaxDisplyString) "…" else "";
        def parsedText = "\n'" + Escape(recoveryParser.ParseResult.Text.Substring(subrule.Begin, Math.Min(textLen, MaxDisplyString)) ) + ellipsis + "'\n";
        def label      = Escape(subrule.Begin + ":" + subrule.End + "\n" + getName(sequence)) + parsedText;

        def result     = SubruleNodeName(sequence, subrule) + $<# [label="$label" $color $bkColor $url shape=box] #>;
        result
      }

      public ToDot() : void
      {
        def files = SCG.HashSet();
        foreach (sequence in recoveryParser.Sequences)
        {
          def nodes = SCG.List();
          def edges = SCG.List();
          def addEdge(from : ParsedSubrule, to : ParsedSubrule) : void
          {
            edges.Add($<#$(SubruleNodeName(sequence, from)) -> $(SubruleNodeName(sequence, to))#>);
          }
          match (sequence)
          {
            | Root                       => ()
            | Extensible   as extensible =>
              nodes.Add(<#Start [label=">"]#>);
              def makeExtentionsFile(subrule : ParsedSubrule) : void
              {
                def extentionsfileName = GetExtensionsFilePath(sequence, subrule);
                unless (files.Add(extentionsfileName))
                  return;

                def check(s : ParsedSequence) : bool
                {
                  | ParsedSequence.Extension as extension => ((extension.Sequence.Parser :> ExtensionRuleParser).Descriptor :> ExtensionRuleDescriptor).BaseRule : object == extensible.RuleParser.Descriptor
                  | _ =>  false
                }
                def extensions = recoveryParser.Sequences.Filter(s => s.StartPos == subrule.Begin && check(s));
                def extNodes = extensions.Map(s => SubruleNode(s, ParsedSubrule(s.StartPos, s.StartPos, 0), false));
                def graphLabel = Escape(subrule.ToString());
                def content = $<#
                  digraph RecoveryParser
                  {
                    rankdir=LR;
                    compound=true;
                    label="$graphLabel";
    
                    ..$(extNodes; "\r\n    ")
    
                  }
                #>;
                File.WriteAllText(extentionsfileName, content);
              }
              foreach (subrule in sequence.ParsedSubrules)
              {
                makeExtentionsFile(subrule);
                nodes.Add(SubruleNode(sequence, subrule));
                when (subrule.Index == 0)
                  edges.Add($<#Start -> $(SubruleNodeName(sequence, subrule))#>);

                foreach (nextSubrule in sequence.ParsedSubrules.Where(nextSubrule => subrule.End == nextSubrule.Begin))
                  addEdge(subrule, nextSubrule);
                otherwise
                {
                  def failSubrule = ParsedSubrule(subrule.End, subrule.End, 1);
                  makeExtentionsFile(failSubrule);
                  nodes.Add(SubruleNode(sequence, failSubrule, true));
                  addEdge(subrule, failSubrule);
                }
              }
              otherwise
              {
                def failSubrule = ParsedSubrule(sequence.StartPos, sequence.StartPos, 0);
                makeExtentionsFile(failSubrule);
                nodes.Add(SubruleNode(sequence, failSubrule, true));
                edges.Add($<#Start -> $(SubruleNodeName(sequence, failSubrule))#>);
              }

            | Extension | Simple | Option | List | ListWithSeparatorRule | ListWithSeparatorSeparator =>
              nodes.Add(<#Start [label=">"]#>);
              foreach (subrule in sequence.ParsedSubrules)
              {
                nodes.Add(SubruleNode(sequence, subrule));
                when (subrule.Index == 0)
                  edges.Add($<#Start -> $(SubruleNodeName(sequence, subrule))#>);

                if (subrule.Index == sequence.SubruleCount - 1)
                {
                  nodes.Add(<#Complete [label=">>"]#>);
                  edges.Add($<#$(SubruleNodeName(sequence, subrule)) -> Complete #>);
                }
                else
                {
                  foreach (nextSubrule in sequence.ParsedSubrules.Where(nextSubrule => subrule.Index + 1 == nextSubrule.Index && subrule.End == nextSubrule.Begin))
                    addEdge(subrule, nextSubrule);
                  otherwise
                  {
                    def failSubrule = ParsedSubrule(subrule.End, subrule.End, subrule.Index + 1);
                    nodes.Add(SubruleNode(sequence, failSubrule, true));
                    addEdge(subrule, failSubrule);
                  }
                }
              }
              otherwise
              {
                def failSubrule = ParsedSubrule(sequence.StartPos, sequence.StartPos, 0);
                nodes.Add(SubruleNode(sequence, failSubrule, true));
                edges.Add($<#Start -> $(SubruleNodeName(sequence, failSubrule))#>);
              }
          }
          def graphLabel = Escape(sequence.ToString());
          def content = $<#
            digraph RecoveryParser
            {
              rankdir=LR;
              compound=true;
              label="$graphLabel";
    
              ..$(nodes; "\r\n    ")
    
              ..$(edges; "\r\n    ")
            }
          #>;
          def fileName = GetFilePath(sequence);
          File.WriteAllText(fileName, content);
          _ = files.Add(fileName);
        }
        X.ConvertToDot(files);
      }
    }

    public ToDot(_startPos : int) : SCG.List[string]
    {
      ToDotImpl(this).ToDot();
      SCG.List()
    }
  }
}
