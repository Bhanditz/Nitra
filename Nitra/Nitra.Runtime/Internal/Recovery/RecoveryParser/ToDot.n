using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public ToDot(_startPos : int) : SCG.List[string]
    {
      //def dir = Directory.CreateDirectory(Path.ChangeExtension(Path.GetTempFileName(), null)).FullName;
      def dir = @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079";
      def files = SCG.List();
      
      foreach (file in Directory.GetFiles(dir))
        File.Delete(file);
      
      def escape(x : string) : string
      {
        x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
      }
      def getFileName(dir : string, sequence : ParsedSequence) : string
      {
        Path.Combine(dir, sequence.Id + "_" + (if (sequence.HasName) sequence.Name else "") + "_" + sequence.StartPos)
      }
      def isContinuationOf(subrule1 : ParsedSubrule, subrule2 : ParsedSubrule) : bool
      {
        subrule2.Index + 1 == subrule1.Index && subrule2.End == subrule1.Begin
      }
      def hasContinuation(sequence : ParsedSequence, subrule : ParsedSubrule) : bool
      {
        sequence.ParsedSubrules.Any(s => isContinuationOf(s, subrule))
      }
      
      foreach (sequence in Sequences)
      {
        def text = ParseResult.Text;
        def fileName = getFileName(dir, sequence);
        
        when (fileName == @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079\179_Class")
        {
          assert2(true);
        }
        when (fileName == @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079\180_")
        {
          assert2(true);
        }        
        def subruleNode(sequence : ParsedSequence, subrule : ParsedSubrule, needLabel : bool = false) : string
        {
          def getUrl(sequence : ParsedSequence) : string
          {
            | ParsedSequence.Extensible as _ex => ""
            | _ => 
              def x = sequence.GetSubrule(subrule.Index);
              match (x)
              {
                | SubruleInfo.SimpleCall as y => <#URL="#> + y.RuleParser.RuleId + "_" + y.RuleParser.RuleName + "_" + subrule.Begin + <#.svg"#>
                | _ => ""
              }
          }
          def getName(sequence : ParsedSequence) : string
          {
            | ParsedSequence.Extensible as ex => subrule.Index + ":" + ex.RuleParser.RuleName
            | _ => sequence.GetSubrule(subrule.Index).ToString()
          }
          def url = getUrl(sequence);
          def color = if (hasContinuation(sequence, subrule)) "" else "fontcolor=red";
          def bkColor = if (subrule.End > subrule.Begin) "peripheries=2 color=blue" else "";
          def parsedText = "\n'" + escape(text.Substring(subrule.Begin, subrule.End - subrule.Begin)) + "'\n";
          def label = escape(subrule.Begin + ":" + subrule.End + "\n" + getName(sequence)) + parsedText;
          "Seq_" + sequence.Id + "_subrule_" + subrule.Index + "_B" + subrule.Begin + "_E" + subrule.End
          + if (needLabel) $<# [label="$label" $color $bkColor $url shape=box] #> else null
        }
        def nodes = SCG.List();
        def edges = SCG.List();
        
        nodes.Add(<#Start [label=">"]#>);
        
        def lastIndex = sequence.SubruleCount - 1;
        
        when (sequence.ParsedSubrules.Any(s => s.Index == lastIndex))
          nodes.Add(<#Complete [label=">>"]#>);
        
        foreach (subrule in sequence.ParsedSubrules)
          nodes.Add(subruleNode(sequence, subrule, needLabel=true));
        
        foreach (subrule when subrule.Index == 0 in sequence.ParsedSubrules)
          edges.Add(<#Start -> #> + subruleNode(sequence, subrule));

        foreach (subrule in sequence.ParsedSubrules)
        {
          def node         = subruleNode(sequence, subrule);
          def nextSubrules = sequence.ParsedSubrules.Where(s => isContinuationOf(s, subrule));
          foreach (nextSubrule in nextSubrules)
          edges.Add(node + <# -> #> + subruleNode(sequence, nextSubrule));
        }
          
        foreach (subrule when subrule.Index == lastIndex in sequence.ParsedSubrules)
          edges.Add(subruleNode(sequence, subrule) + <# -> Complete#>);
          
        def content = 
$<#
  digraph RecoveryParser
  {
    rankdir=LR;
    compound=true;
    label="$sequence";
    
    ..$(nodes; "\r\n    ")
    
    ..$(edges; "\r\n    ")
  }
#>;
        File.WriteAllText(fileName, content);
        files.Add(fileName);
      }
    
      X.ConvertToDot(files);
      
      SCG.List()
    }
  }
}
