using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public class ParsedSequence
  {
    public static DeletedTokenState   : int = -2;
    public static DeletedGarbageState : int = -3;
    
    [EqualsIgnore]
    public RecoveryParser : RecoveryParser;
    public StartPos : int;
    public ParsingSequence : ParsingSequence;

    [RecordIgnore, EqualsIgnore] public Callers        : SCG.HashSet[ParseRecord]   = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public ParsedSubrules : SCG.HashSet[ParsedSubrule] = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public Ends           : SCG.HashSet[int]           = SCG.HashSet();
    
    public IsToken : bool { get { this.ParsingSequence.IsToken }}
    
    public RuleName : string { get { "" } }

    public IsSubruleVoid(subrule : ParsedSubrule) : bool
    {
      if (subrule.State <= DeletedTokenState)
        false
      else match (ParsingSequence.States[subrule.State])
      {
        | Simple           as state => state.RuleParser.IsVoid
        | Extensible       as state => state.RuleParser.IsVoid
        | ExtensionPrefix  as state => state.RuleParser.IsVoid
        | ExtensionPostfix as state => state.RuleParser.IsVoid
        | Subsequence      as state => state.SequenceInfo.IsVoid
        | Scan                      => false
        | Predicate                 => true
      }
    }
    
    public SubruleMandatoryTokenCount(subrule : ParsedSubrule) : int
    {
      if (subrule.State <= DeletedTokenState)
        assert3(false)
      else match (ParsingSequence.States[subrule.State])
      {
        | Simple           as state => state.RuleParser.MandatoryTokens
        | Extensible       as state => state.RuleParser.MandatoryTokens
        | ExtensionPrefix  as state => state.RuleParser.MandatoryTokens
        | ExtensionPostfix          => 0
        | Subsequence      as state => state.SequenceInfo.MandatoryTokenCount
        | Scan             as state => state.Subrule.MandatoryTokenCount
        | Predicate                 => 0
      }
    }

    public GetSequencesForSubrule(parsedSubrule : ParsedSubrule) : Seq[ParsedSequence]
    {
      def begin = parsedSubrule.Begin;
      def end   = parsedSubrule.End;
      mutable sequence;

      if (parsedSubrule.State <= DeletedTokenState)
        ()
      else match (ParsingSequence.States[parsedSubrule.State])
      {
        | Simple           as state =>
          when (RecoveryParser.Sequences.TryGetValue((begin, state.RuleParser.ParsingSequence), out sequence))
          when (sequence.Ends.Contains(end))
            yield sequence;

        | Extensible       as state =>
          when (RecoveryParser.Sequences.TryGetValue((begin, state.RuleParser.ParsingSequence), out sequence))
          when (sequence.Ends.Contains(end))
            yield sequence;

        | ExtensionPrefix  as state =>
          foreach (prefixRule in state.RuleParser.PrefixRules)
            when (RecoveryParser.Sequences.TryGetValue((begin, prefixRule.ParsingSequence), out sequence))
            when (sequence.Ends.Contains(end))
              yield sequence;

        | ExtensionPostfix as state =>
          foreach (postfixRule when state.RuleParser.FirstPostfixRuleId <= postfixRule.RuleId in state.RuleParser.PostfixRules)
            when (RecoveryParser.Sequences.TryGetValue((begin, postfixRule.ParsingSequence), out sequence))
            when (sequence.Ends.Contains(end))
              yield sequence;

        | Subsequence      as state =>
          when (RecoveryParser.Sequences.TryGetValue((begin, state.Sequence), out sequence))
          when (sequence.Ends.Contains(end))
            yield sequence;

        | Scan => ()
        | Predicate => ()
      }
    }
    
    public AddCaller(caller : ParseRecord) : void
    {
      when (Callers.Add(caller))
        foreach (end in Ends)
          RecoveryParser.RecordsToComplete.Push(end, caller, this);
    }

    public AddEnd(end : int) : void
    {
      when (Ends.Add(end))
        foreach (caller in Callers)
          RecoveryParser.RecordsToComplete.Push(end, caller, this);
    }

    public GetNextSubrules(subrule : ParsedSubrule) : Seq[ParsedSubrule]
    {
      GetNextSubrules(subrule, ParsedSubrules)
    }

    public GetNextSubrules(subrule : ParsedSubrule, parsedSubrules : Seq[ParsedSubrule]) : Seq[ParsedSubrule]
    {
      if (subrule.State <= DeletedTokenState)
        parsedSubrules.Where(next => subrule.End == next.Begin)
      else
      {
        def state = ParsingSequence.States[subrule.State];
        parsedSubrules.Where(next => subrule.End == next.Begin && state.IsNext(next.State) && next != subrule)
      }
    }

    public GetPrevSubrules(subrule : ParsedSubrule) : Seq[ParsedSubrule]
    {
      GetPrevSubrules(subrule, ParsedSubrules)
    }

    public GetPrevSubrules(subrule : ParsedSubrule, parsedSubrules : Seq[ParsedSubrule]) : Seq[ParsedSubrule]
    {
      if (subrule.State <= DeletedTokenState)
        parsedSubrules.Where(prev => prev.End == subrule.Begin)
      else
      {
        def state = ParsingSequence.States[subrule.State];
        parsedSubrules.Where(prev => prev.End == subrule.Begin && state.IsPrev(prev.State) && prev != subrule)
      }
    }

    public GetFirstSubrules() : Seq[ParsedSubrule]
    {
      GetFirstSubrules(ParsedSubrules)
    }

    public GetFirstSubrules(parsedSubrules : Seq[ParsedSubrule]) : Seq[ParsedSubrule]
    {
      parsedSubrules.Where(p => p.Begin == StartPos && IsStartSubrule(parsedSubrules, p))
    }
    
    IsStartSubrule(parsedSubrules : Seq[ParsedSubrule], subrule : ParsedSubrule) : bool
    {
      when (subrule.Begin!= StartPos)
        return false;
        
      if (subrule.State <= ParsedSequence.DeletedTokenState)
      {
        def res = parsedSubrules.Any(p => p.End == subrule.Begin);
        !res
      }
      else
        ParsingSequence.IsStartState(subrule.State)
    }
    
    public GetLastSubrules() : Seq[ParsedSubrule]
    {
      GetLastSubrules(ParsedSubrules)
    }

    public GetLastSubrules(parsedSubrules : Seq[ParsedSubrule]) : Seq[ParsedSubrule]
    {
      parsedSubrules.Where(p => Ends.Contains(p.End) && IsEndSubrule(parsedSubrules, p))
    }

    public GetLastSubrules(end : int) : Seq[ParsedSubrule]
    {
      GetLastSubrules(ParsedSubrules, end)
    }

    public GetLastSubrules(parsedSubrules : Seq[ParsedSubrule], end : int) : Seq[ParsedSubrule]
    {
      parsedSubrules.Where(p => p.End == end && IsEndSubrule(parsedSubrules, p))
    }
    
    private IsEndSubrule(parsedSubrules : Seq[ParsedSubrule], subrule : ParsedSubrule) : bool
    {
      if (subrule.State <= DeletedTokenState)
      {
        def res = parsedSubrules.Any(p => p.Begin == subrule.End);
        !res
      }
      else
        ParsingSequence.States[subrule.State].Next.Exists(_ == -1)
    }

    public GetValidSubrules() : SCG.SortedSet[ParsedSubrule]
    {
      GetValidSubrulesImpl(GetLastSubrules(), ParsedSubrules)
    }

    public GetValidSubrules(end : int) : SCG.SortedSet[ParsedSubrule]
    {
      GetValidSubrules(ParsedSubrules, end)
    }

    public GetValidSubrules(parsedSubrules : Seq[ParsedSubrule]) : SCG.SortedSet[ParsedSubrule]
    {
      GetValidSubrulesImpl(GetLastSubrules(parsedSubrules), parsedSubrules)
    }

    public GetValidSubrules(parsedSubrules : Seq[ParsedSubrule], end : int) : SCG.SortedSet[ParsedSubrule]
    {
      GetValidSubrulesImpl(GetLastSubrules(parsedSubrules, end), parsedSubrules)
    }

    private GetValidSubrulesImpl(ends : Seq[ParsedSubrule], parsedSubrules : Seq[ParsedSubrule]) : SCG.SortedSet[ParsedSubrule]
    {
      def cmp  = ParsedSubrule.ComparerEndBeginIndex();
      def res  = SCG.SortedSet(cmp);
      def ends = SCG.SortedSet(ends, cmp);
      while (ends.Count > 0)
      {
        def end = ends.Max;
        _ = ends.Remove(end);
        when (res.Add(end))
        {
          foreach (prev in GetPrevSubrules(end, parsedSubrules))
            _ = ends.Add(prev);
          otherwise
          {
            assert3(true);
          }
        }
      }
      res
    }

    public override ToString() : string
    {
      def sb = Text.StringBuilder();
      def startPos = this.StartPos;
      
      def ruleName = ParsingSequence.RuleName;

      _ = sb.Append(ParsingSequence.RuleDesc + " ");
      
      when (ruleName != null)
        _ = sb.Append(" ~ " + ruleName);
        
      _ = sb.Append(", StartPos=");
        
      _ = sb.Append(startPos);
      _ = sb.Append(")");

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");
        
      def text = this.RecoveryParser.ParseResult.Text;
          
      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;
            
        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));
            
        _ = sb.Append("■");
            
        _ = sb.Append(text.SafeRightSubstring(startPos, showLen));
        
        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");
              
        _ = sb.Append("»");
      }
        
      sb.ToString()
    }
  }
}
