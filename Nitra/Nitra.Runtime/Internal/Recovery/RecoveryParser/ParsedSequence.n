using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public variant ParsedSequence
  {
    public StartPos : int;
    | Root
    | Extensible                 { RuleParser : ExtensibleRuleParser; }
    | Simple                     { Sequence : SequenceInfo; }
    | Extension                  { Sequence : SequenceInfo; }
    | Option                     { Subrule  : SubruleInfo.Option; }
    | List                       { Subrule  : SubruleInfo.List;              ListStart : int; Counter : int; }
    | ListWithSeparatorRule      { Subrule  : SubruleInfo.ListWithSeparator; ListStart : int; Counter : int; }
    | ListWithSeparatorSeparator { Subrule  : SubruleInfo.ListWithSeparator; ListStart : int; Counter : int; }

    [RecordIgnore, EqualsIgnore] public Callers        : SCG.HashSet[ParseRecord]   = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public ParsedSubrules : SCG.HashSet[ParsedSubrule] = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public Ends           : SCG.HashSet[int]           = SCG.HashSet();

    public GetSubrule(index : int) : SubruleInfo
    {
      match (this)
      {
        | Root                              => assert3(false)
        | Extensible                        => assert3(false)
        | Simple                     as seq => seq.Sequence.Subrules[index]
        | Extension                  as seq => seq.Sequence.Subrules[index]
        | Option                     as seq => seq.Subrule.Rule.Subrules[index]
        | List                       as seq => seq.Subrule.Rule.Subrules[index]
        | ListWithSeparatorRule      as seq => seq.Subrule.Rule.Subrules[index]
        | ListWithSeparatorSeparator as seq => seq.Subrule.Separator.Subrules[index]
      }
    }

    public SubruleCount : int
    {
      get
      {
        match (this)
        {
          | Root                              => 1
          | Extensible                        => 2
          | Simple                     as seq => seq.Sequence.Subrules.Length
          | Extension                  as seq => seq.Sequence.Subrules.Length
          | Option                     as seq => seq.Subrule.Rule.Subrules.Length
          | List                       as seq => seq.Subrule.Rule.Subrules.Length
          | ListWithSeparatorRule      as seq => seq.Subrule.Rule.Subrules.Length
          | ListWithSeparatorSeparator as seq => seq.Subrule.Separator.Subrules.Length
        }
      }
    }
  }
}
