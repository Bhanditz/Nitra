using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public partial class ParsedSequence
  {
    [EqualsIgnore]               public         RecoveryParser    : RecoveryParser;
                                 public         StartPos          : int;
                                 public         ParsingSequence   : ParsingSequence;
    [EqualsIgnore]               public         StartTokenChanges : TokenChanges { get; internal set; }

    [RecordIgnore, EqualsIgnore] public         Callers           : SCG.HashSet[ParseRecord]               = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public         ParsedSubrules    : Hashtable[ParsedSubrule, TokenChanges] = Hashtable();
    [RecordIgnore, EqualsIgnore] public         Ends              : Hashtable[int, TokenChanges]           = Hashtable();
    [RecordIgnore, EqualsIgnore] public mutable Iteration         : int = -1;

    public IsToken : bool { get { this.ParsingSequence.IsToken }}

    public RuleName : string { get { this.ParsingSequence.RuleName } }

    public StartParse() : void
    {
      foreach (startState in ParsingSequence.StartStates)
        RecoveryParser.StartParseSubrule(ParseRecord(this, startState, StartPos), StartTokenChanges);
    }

    public UpdateSubrules(end : int) : void
    {
      foreach ((subrule, subruleTokenChanges) when (subrule.End == end || subrule.Begin >= end) in ParsedSubrules.KeyValuePairs.ToArray().SortInplace(RecoveryParser.ParsingOrderSubrulesComparison))//TODO:Optimize
      {
        def subruleParseRecord = ParseRecord(this, subrule.State, subrule.Begin);
        mutable startChanges;
        when (RecoveryParser.Records[subrule.Begin].TryGetValue(subruleParseRecord, out startChanges))
          RecoveryParser.SubruleParsed(subrule.Begin, subrule.End, subruleParseRecord, startChanges, subruleTokenChanges);
      }
    }

    public AddParsedSubrule(subrule : ParsedSubrule, subruleTokenChanges : TokenChanges) : void
    {
      mutable oldChanges;
      if (ParsedSubrules.TryGetValue(subrule, out oldChanges))
        when (subruleTokenChanges < oldChanges)
        {
          ParsedSubrules[subrule] = subruleTokenChanges;
          UpdateSubrules(subrule.End);
        }
      else
        ParsedSubrules[subrule] = subruleTokenChanges;
    }

    public IsSubruleVoid(subrule : ParsedSubrule) : bool
    {
      match (ParsingSequence.States[subrule.State])
      {
        | Simple            as state => state.RuleParser.IsVoid
        | Extensible        as state => state.RuleParser.IsVoid
        | ExtensionPrefix   as state => state.RuleParser.IsVoid
        | ExtensionPostfix  as state => state.RuleParser.IsVoid
        | Subsequence       as state => state.SequenceInfo.IsVoid
        | List                       => false
        | ListWithSeparator          => false
        | Scan                       => false
        | Predicate                  => true
      }
    }

    public SubruleMandatoryTokenCount(state : int) : int
    {
      match (ParsingSequence.States[state])
      {
        | Simple            as state => state.RuleParser.SequenceInfo.MandatoryTokenCount
        | Extensible        as state => state.RuleParser.MandatoryTokenCount
        | ExtensionPrefix   as state => state.RuleParser.MandatoryTokenCount
        | ExtensionPostfix           => 0
        | Subsequence       as state => state.SequenceInfo.MandatoryTokenCount
        | List              as state => state.Subrule.MandatoryTokenCount
        | ListWithSeparator as state => state.Subrule.MandatoryTokenCount
        | Scan              as state => state.Subrule.MandatoryTokenCount
        | Predicate                  => 0
      }
    }

    public GetSequencesForSubrule(parsedSubrule : ParsedSubrule) : Seq[ParsedSequence]
    {
      this.ParsingSequence.GetSequencesForSubrule(parsedSubrule, this.RecoveryParser);
    }

    public AddCaller(caller : ParseRecord) : void
    {
      when (Callers.Add(caller))
        foreach (end in Ends.Keys)
          RecoveryParser.Completion(end, caller, this);
    }

    public AddEnd(end : int, endTokenChanges : TokenChanges) : void
    {
      def newTokenChanges = endTokenChanges - StartTokenChanges;
      mutable oldTokenChanges;
      if (Ends.TryGetValue(end, out oldTokenChanges))
      {
        when (newTokenChanges < oldTokenChanges)
        {
          Ends[end] = newTokenChanges;
          foreach (caller in Callers)
            caller.Sequence.AddParsedSubrule(ParsedSubrule(caller.ParsePos, end, caller.State), newTokenChanges);
        }
      }
      else
      {
        Ends[end] = newTokenChanges;
        foreach (caller in Callers)
          RecoveryParser.Completion(end, caller, this);
      }
    }

    public override ToString() : string
    {
      def invalidState = -100;
      def invalidCurPos = -1;
      def sb = Text.StringBuilder();
      ToString(sb, invalidState, invalidCurPos);
      sb.ToString()
    }

    public ToString(sb : Text.StringBuilder, beforeState : int, curPos : int) : void
    {
      def startPos = this.StartPos;

      ParsingSequence.ToString(sb, beforeState);

      _ = sb.Append(", StartPos=");

      _ = sb.Append(startPos);
      _ = sb.Append(")");

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");

      def text = this.RecoveryParser.ParseResult.Text;

      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;

        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));

        _ = sb.Append("■");

        def middle = if (curPos >= 0) curPos - startPos else showLen;

        _ = sb.Append(text.SafeRightSubstring(startPos, middle));

        when (curPos >= 0)
          _ = sb.Append("▸");

        when (middle < showLen)
        _ = sb.Append(text.SafeRightSubstring(startPos + middle, showLen - middle));

        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");

        _ = sb.Append("»");

        _ = sb.Append($" Name=«$RuleName»");
      }
    }
  }
}
