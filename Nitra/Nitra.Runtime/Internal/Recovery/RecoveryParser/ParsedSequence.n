using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public class ParsedSequence
  {
    [EqualsIgnore]
    public RecoveryParser : RecoveryParser;
    public StartPos : int;
    public ParsingSequence : ParsingSequence;

    [RecordIgnore, EqualsIgnore] public Callers        : SCG.HashSet[ParseRecord]   = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public ParsedSubrules : SCG.HashSet[ParsedSubrule] = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public Ends           : SCG.HashSet[int]           = SCG.HashSet();

    public IsSubruleVoid(subrule : ParsedSubrule) : bool
    {
    }
    
    public GetSequencesForSubrule(parsedSubrule : ParsedSubrule) : Seq[ParsedSequence]
    {
      def res = SCG.HashSet();
      def begin = parsedSubrule.Begin;
      def end   = parsedSubrule.End;

      match (ParsingSequence.States[parsedSubrule.State])
      {
        | Simple           as state =>
          foreach (record in RecoveryParser.Records[begin])
            when (record.Sequence.StartPos == begin)
            when (record.Sequence.Ends.Contains(end))
            when (record.Sequence.ParsingSequence : object == state.RuleParser.ParsingSequence)
              _ = res.Add(record.Sequence);

        | Extensible       as state =>
          foreach (record in RecoveryParser.Records[begin])
            when (record.Sequence.StartPos == begin)
            when (record.Sequence.Ends.Contains(end))
            when (record.Sequence.ParsingSequence : object == state.RuleParser.ParsingSequence)
              _ = res.Add(record.Sequence);

        | ExtensionPrefix  as state =>
          foreach (record in RecoveryParser.Records[begin])
            when (record.Sequence.StartPos == begin)
            when (record.Sequence.Ends.Contains(end))
            when (state.RuleParser.IsExtension(record.Sequence.ParsingSequence))
              _ = res.Add(record.Sequence);

        | ExtensionPostfix as state =>
          foreach (record in RecoveryParser.Records[begin])
            when (record.Sequence.StartPos == begin)
            when (record.Sequence.Ends.Contains(end))
            when (state.RuleParser.IsExtension(record.Sequence.ParsingSequence))
              _ = res.Add(record.Sequence);

        | Subsequence      as state =>
          foreach (record in RecoveryParser.Records[begin])
            when (record.Sequence.StartPos == begin)
            when (record.Sequence.Ends.Contains(end))
            when (record.Sequence.ParsingSequence : object == state.Sequence)
              _ = res.Add(record.Sequence);

        | Scan => ()
      }
      res
    }
    
    public AddCaller(caller : ParseRecord) : void
    {
      when (Callers.Add(caller))
        foreach (end in Ends)
          RecoveryParser.RecordsToComplete.Push(end, caller, this);
    }

    public AddEnd(end : int) : void
    {
      when (Ends.Add(end))
        foreach (caller in Callers)
          RecoveryParser.RecordsToComplete.Push(end, caller, this);
    }

    public GetNextSubrules(subrule : ParsedSubrule) : Seq[ParsedSubrule]
    {
      GetNextSubrules(subrule, ParsedSubrules)
    }

    public GetNextSubrules(subrule : ParsedSubrule, parsedSubrules : Seq[ParsedSubrule]) : Seq[ParsedSubrule]
    {
      def state = ParsingSequence.States[subrule.State];
      parsedSubrules.Where(next => subrule.End == next.Begin && state.Next.Exists(_ == next.State))
    }

    public GetPrevSubrules(subrule : ParsedSubrule) : Seq[ParsedSubrule]
    {
      GetPrevSubrules(subrule, ParsedSubrules)
    }

    public GetPrevSubrules(subrule : ParsedSubrule, parsedSubrules : Seq[ParsedSubrule]) : Seq[ParsedSubrule]
    {
      def state = ParsingSequence.States[subrule.State];
      parsedSubrules.Where(prev => prev.End == subrule.Begin && state.Prev.Exists(_ == prev.State))
    }

    public GetFirstSubrules() : Seq[ParsedSubrule]
    {
      ParsedSubrules.Where(p => p.Begin == StartPos && ParsingSequence.StartStates.Exists(_ == p.State))
    }

    public GetLastSubrules() : Seq[ParsedSubrule]
    {
      ParsedSubrules.Where(p => Ends.Contains(p.End) && ParsingSequence.States[p.State].Next.Exists(_ == -1));
    }

    public GetLastSubrules(end : int) : Seq[ParsedSubrule]
    {
      GetLastSubrules(ParsedSubrules, end)
    }

    public GetLastSubrules(parsedSubrules : Seq[ParsedSubrule], end : int) : Seq[ParsedSubrule]
    {
      parsedSubrules.Where(p => p.End == end && !p.IsEmpty);
    }

    public GetValidSubrules() : SCG.SortedSet[ParsedSubrule]
    {
      GetValidSubrulesImpl(GetLastSubrules())
    }

    public GetValidSubrules(end : int) : SCG.SortedSet[ParsedSubrule]
    {
      GetValidSubrulesImpl(GetLastSubrules(end))
    }

    private GetValidSubrulesImpl(ends : Seq[ParsedSubrule]) : SCG.SortedSet[ParsedSubrule]
    {
      assert3(false);
      //def cmp  = ParsedSubrule.ComparerEndBeginIndex();
      //def res  = SCG.SortedSet(cmp);
      //def ends = SCG.SortedSet(ends, cmp);
      //while (ends.Count > 0)
      //{
      //  def end = ends.Max;
      //  _ = ends.Remove(end);
      //  when (res.Add(end))
      //    foreach (prev in GetPrevSubrules(end))
      //      _ = ends.Add(prev);
      //}
      //when (this is Extensible)
      //  _ = res.RemoveWhere(p => p.Index == 1 && p.Begin == p.End);
      //res
    }
/*
    public override ToString() : string
    {
      def sb = Text.StringBuilder();
      def startPos = this.StartPos;
        
      def name = 
        match (this)
        {
          | Simple                     => "Simple     "
          | Extension                  => "Extension  "
          | Option                     => "Option     "
          | List                       => "List       "
          | ListRule                   => "ListRule   "
          | ListWithSeparator          => "ListWS     "
          | ListWithSeparatorRule      => "ListWSRule "
          | ListWithSeparatorSeparator => "ListWSSep  "
          | Root                       => "Root       "
          | Extensible                 => "Extensible "
        };

      _ = sb.Append(name);
        
      when (this.HasName)
      {
        _ = sb.Append(this.Name);
        _ = sb.Append(" = ");
      }
      match (this)
      {
        | ParsedSequence.Root            => _ = sb.Append("Root");
        | ParsedSequence.Extensible as r => _ = sb.Append("Extensible: " + r.RuleParser.RuleName );
        | _ =>
          def subruleCount = this.SubruleCount;
          
          for (mutable i = 0; i < subruleCount; i++)
          {
            def r = this.GetSubrule(i);
          
            when (i > 0)
              _ = sb.Append("  ");
            
            _ = sb.Append(r);
          }
        
          _ = sb.Append(", StartPos=");
        
          _ = sb.Append(startPos);
          _ = sb.Append(")");
      }

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");
        
      def text = this.RecoveryParser.ParseResult.Text;
          
      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;
            
        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));
            
        _ = sb.Append("■");
            
        _ = sb.Append(text.SafeRightSubstring(startPos, showLen));
        
        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");
              
        _ = sb.Append("»");
      }
        
      sb.ToString()
    }
    */
  }
}
