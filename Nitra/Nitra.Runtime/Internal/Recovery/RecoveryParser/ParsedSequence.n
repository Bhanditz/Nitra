using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public variant ParsedSequence
  {
    [EqualsIgnore]
    public RecoveryParser : RecoveryParser;
    public StartPos : int;
    
    | Root
    | Extensible                 { RuleParser : ExtensibleRuleParser; }
    | Simple                     { Sequence : SequenceInfo; }
    | Extension                  { Sequence : SequenceInfo; }
    | Option                     { Subrule  : SubruleInfo.Option; }
    | List                       { Subrule  : SubruleInfo.List;              ListStart : int; Counter : int; }
    | ListWithSeparatorRule      { Subrule  : SubruleInfo.ListWithSeparator; ListStart : int; Counter : int; }
    | ListWithSeparatorSeparator { Subrule  : SubruleInfo.ListWithSeparator; ListStart : int; Counter : int; }

    [RecordIgnore, EqualsIgnore] public Callers        : SCG.HashSet[ParseRecord]   = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public ParsedSubrules : SCG.HashSet[ParsedSubrule] = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public Ends           : SCG.HashSet[int]           = SCG.HashSet();
    
    public Id : int
    {
      get
      {
        match (this)
        {
          | Root                                   =>  -1
          | Extensible                 as sequence => sequence.RuleParser.PrefixId
          | Simple                     as sequence => sequence.Sequence.Id
          | Extension                  as sequence => sequence.Sequence.Id
          | Option                     as sequence => sequence.Subrule.Rule.Id
          | List                       as sequence => sequence.Subrule.Rule.Id
          | ListWithSeparatorRule      as sequence => sequence.Subrule.Rule.Id
          | ListWithSeparatorSeparator as sequence => sequence.Subrule.Separator.Id
        }
      }
    }

    public CanContinueFromSameSubrule : bool
    {
      get
      {
        match (this)
        {
          | Root                       => false
          | Simple                     => false
          | Extension                  => false
          | Option                     => false
          | Extensible                 => true
          | List                       => true
          | ListWithSeparatorRule      => true
          | ListWithSeparatorSeparator => true
        }
      }
    }

    public HasName : bool   { get { this is Extension || this is Simple || this is Extensible } }
    public Name    : string
    {
      get
      {
        match (this)
        {
          | Extensible as x => x.RuleParser.RuleName
          | Extension  as x => x.Sequence.Parser.RuleName
          | Simple     as x => x.Sequence.Parser.RuleName
          | _ => null
        }
      }
    }
    
    public GetSubrule(index : int) : SubruleInfo
    {
      match (this)
      {
        | Root                              => assert3(false)
        | Extensible                        => assert3(false)
        | Simple                     as seq => seq.Sequence.Subrules[index]
        | Extension                  as seq => seq.Sequence.Subrules[index]
        | Option                     as seq => seq.Subrule.Rule.Subrules[index]
        | List                       as seq => seq.Subrule.Rule.Subrules[index]
        | ListWithSeparatorRule      as seq => seq.Subrule.Rule.Subrules[index]
        | ListWithSeparatorSeparator as seq => seq.Subrule.Separator.Subrules[index]
      }
    }

    public SubruleCount : int
    {
      get
      {
        match (this)
        {
          | Root                              => 1
          | Extensible                        => 2
          | Simple                     as seq => seq.Sequence.Subrules.Length
          | Extension                  as seq => seq.Sequence.Subrules.Length
          | Option                     as seq => seq.Subrule.Rule.Subrules.Length
          | List                       as seq => seq.Subrule.Rule.Subrules.Length
          | ListWithSeparatorRule      as seq => seq.Subrule.Rule.Subrules.Length
          | ListWithSeparatorSeparator as seq => seq.Subrule.Separator.Subrules.Length
        }
      }
    }

    public override ToString() : string
    {
      def sb = Text.StringBuilder();
      def startPos = this.StartPos;
        
      def name = 
        match (this)
        {
          | Simple                     => "Simple     "
          | Extension                  => "Extension  "
          | Option                     => "Option     "
          | List                       => "List       "
          | ListWithSeparatorRule      => "ListRule   "
          | ListWithSeparatorSeparator => "ListSep    "
          | Root                       => "Root       "
          | Extensible                 => "Extensible "
        };

      _ = sb.Append(name);
        
      when (this.HasName)
      {
        _ = sb.Append(this.Name);
        _ = sb.Append(" = ");
      }
      match (this)
      {
        | ParsedSequence.Root            => _ = sb.Append("Root");
        | ParsedSequence.Extensible as r => _ = sb.Append("Extensible: " + r.RuleParser.RuleName );
        | _ =>
          def subruleCount = this.SubruleCount;
          
          for (mutable i = 0; i < subruleCount; i++)
          {
            def r = this.GetSubrule(i);
          
            when (i > 0)
              _ = sb.Append("  ");
            
            _ = sb.Append(r);
          }
        
          _ = sb.Append(", StartPos=");
        
          _ = sb.Append(startPos);
          _ = sb.Append(")");
      }

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");
        
      def text = this.RecoveryParser.ParseResult.Text;
          
      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;
            
        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));
            
        _ = sb.Append("■");
            
        _ = sb.Append(text.SafeRightSubstring(startPos, showLen));
        
        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");
              
        _ = sb.Append("»");
      }
        
      sb.ToString()
    }
  }
}
