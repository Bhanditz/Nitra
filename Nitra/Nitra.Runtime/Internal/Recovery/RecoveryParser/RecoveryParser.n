using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public ParseResult       : ParseResult;
    public Sequences         : Hashtable[int * ParsingSequence, ParsedSequence] = Hashtable();
    public Records           : array[SCG.HashSet[ParseRecord]];
    public RecordsToProcess  : PriorityQueue[ParseRecord] = PriorityQueue((l, r) =>
    {
      def c = l.TokenChanges.CompareTo(r.TokenChanges);
      if (c != 0)
        c
      else
        l.ParsePos.CompareTo(r.ParsePos)
    });
    public mutable MaxPos    : int = -1;
    public mutable BestSolution : TokenChanges = TokenChanges.Fail;
    mutable  _nextId : int;

    public StartSequence : ParsedSequence { get { this.Sequences[0, this.ParseResult.RuleParser.ParsingSequence] } }

    public GetNextId() : int { _nextId++; _nextId }

    public Visualize(astPatcher : AstPatcher) : void
    {
      def dir = Path.Combine(Path.GetTempPath(), "Seq");
      when (Directory.Exists(dir))
      {
        Directory.Delete(dir, recursive=true);
        _ = Directory.CreateDirectory(dir);
      }
        
      def visited = SCG.HashSet();
      def files = SCG.List();
      
      foreach (recordSet when recordSet != null in this.Records)
          foreach (record in recordSet)
            record.Sequence.ToDot(visited, files, astPatcher, -1);
            
      when (files.Count > 0)
      {
        X.ConvertToDot(files);
      }
      

      when (this.Records[0] != null && this.Records[0].Count > 0)
      {
        def seq = Sequences[(0, ParseResult.RuleParser.ParsingSequence)];
        def filePath = seq.GetFilePath("Seq", seq.StartPos, this.ParseResult.Text.Length) + ".svg";
      _ = Process.Start(filePath);
      }
    }
    
    public Records3(pattern : string = null, complatedOnly : bool = false, pos : int = -1) : array[array[ParseRecord]]
    {
      def result = array(Records.Length);
        
      foreach (x when x != null && (pos < 0 || pos == i) in Records with i)
        result[i] = x.Where(r => (pattern == null || r.ToString().Contains(pattern)) && (!complatedOnly || r.IsComplete))
                      .OrderBy(r => r.Sequence.StartPos).ThenBy(r => r.ToString(i)).ToArray();
          
      result
    }

    public this(parseResult : ParseResult)
    {
      Records     = array(parseResult.Text.Length + 1);
      ParseResult = parseResult;
    }

    public StartParseSequence(startPos : int, parsingSequence : ParsingSequence) : ParsedSequence
    {
      def key = (startPos, parsingSequence);
      mutable sequence;
      unless (Sequences.TryGetValue(key, out sequence))
      {
        sequence = ParsedSequence(this, startPos, parsingSequence);
        Sequences.Add(key, sequence);
        foreach (startState in sequence.ParsingSequence.StartStates)
          StartParseSubrule(ParseRecord(sequence, startState, TokenChanges.None, startPos));
      }
      sequence;
    }

    public StartParseSequence(caller : ParseRecord, startPos : int, parsingSequence : ParsingSequence) : ParsedSequence
    {
      def sequence = StartParseSequence(startPos, parsingSequence);
      sequence.AddCaller(caller);
      sequence;
    }

    public StartParseSubrule(record : ParseRecord) : void
    {
      when (record.IsComplete)
        record.Sequence.AddEnd(record.ParsePos, record.TokenChanges);
      mutable set = Records[record.ParsePos];
      when (set == null)
      {
        set = SCG.HashSet();
        Records[record.ParsePos] = set;
        MaxPos = Math.Max(MaxPos, record.ParsePos);
      }
      def newRecord = set.Add(record);
      when (newRecord && !record.IsComplete)
        RecordsToProcess.Enqueue(record);
    }

    public SubruleParsed(begin : int, end : int, record : ParseRecord, tokenChanges : TokenChanges) : void
    {
      unless (begin == end && record.ParsingState.IsNullable)
      {
        record.Sequence.Add(ParsedSubrule(begin, end, record.State));
        foreach (next in record.ParsingState.Next)
          StartParseSubrule(record.Next(next, end, tokenChanges));
      }
    }

    public StartParse(ruleParser : RuleParser) : void
    {
      def textPos = 0;
      def root = ParseRecord(ParsedSequence(this, 0, ParsingSequence.CreateRoot()), 0, TokenChanges.None, textPos);
      match (ruleParser)
      {
        | SimpleRuleParser     as ruleParser =>
          _ = StartParseSequence(root, textPos, ruleParser.ParsingSequence);

        | ExtensibleRuleParser as ruleParser =>
          _ = StartParseSequence(root, textPos, ruleParser.ParsingSequence);

        | _ => assert3(false)
      }
      Parse();
    }

    public Parse() : void
    {
      while (RecordsToProcess.Count > 0)
      {
        def record = RecordsToProcess.FrontItem;
        when (record.ParsePos == ParseResult.Text.Length)
          BestSolution = TokenChanges.Min(BestSolution, record.TokenChanges);
        unless (record.TokenChanges <= BestSolution)
          return;
        PredictionOrScanning(record, optimize = true);
        _ = RecordsToProcess.Dequeue();
      }
    }

    public Completion(endPos : int, caller : ParseRecord, sequence : ParsedSequence) : void
    {
      SubruleParsed(sequence.StartPos, endPos, caller, sequence.Ends[endPos]);
    }

    public PredictionOrScanning(record : ParseRecord, optimize : bool) : void
    {
      def textPos = record.ParsePos;
      mutable endPos;
      match (record.ParsingState)
      {
        | Simple           as state =>
          if (optimize && { endPos = state.RuleParser.Parse(textPos, ParseResult.Text, ParseResult); endPos >= 0 && (endPos != MaxPos || MaxPos >= ParseResult.MaxFailPos) })
          {
            SubruleParsed(textPos, endPos, record, TokenChanges.None);
            when (textPos == endPos)
              _ = StartParseSequence(record, textPos, state.RuleParser.ParsingSequence);
          }
          else
            _ = StartParseSequence(record, textPos, state.RuleParser.ParsingSequence);

        | Extensible       as state =>
          if (optimize && { endPos = state.RuleParser.Parse(textPos, ParseResult.Text, ParseResult); endPos >= 0 && (endPos != MaxPos || MaxPos >= ParseResult.MaxFailPos) })
          {
            SubruleParsed(textPos, endPos, record, TokenChanges.None);
            when (textPos == endPos)
              _ = StartParseSequence(record, textPos, state.RuleParser.ParsingSequence);
          }
          else
            _ = StartParseSequence(record, textPos, state.RuleParser.ParsingSequence);

        | ExtensionPrefix  as state =>
          foreach (prefixRule in state.RuleParser.PrefixRules)
            _ = StartParseSequence(record, textPos, prefixRule.ParsingSequence);

        | ExtensionPostfix as state =>
          foreach (postfixRule when state.RuleParser.FirstPostfixRuleId <= postfixRule.RuleId in state.RuleParser.PostfixRules)
            _ = StartParseSequence(record, textPos, postfixRule.ParsingSequence);

        | List              as state1 with seq = state1.Sequence
        | ListWithSeparator as state2 with seq = state2.Sequence
        | Subsequence       as state3 with seq = state3.Sequence =>
          _ = StartParseSequence(record, textPos, seq);

        | Scan             as state =>
          endPos = state.Subrule.Parse(textPos, ParseResult.Text, ParseResult);
          when (endPos >= 0)
            SubruleParsed(textPos, endPos, record, TokenChanges.None);

        | Predicate        as state =>
          when (state.HeadPredicate(textPos, ParseResult.Text, ParseResult))
            SubruleParsed(textPos, textPos, record, TokenChanges.None);
      }
    }

    public static CounterLessThanMax(counter: int, max : Nullable[int]) : bool
    {
      !max.HasValue || counter < max.GetValueOrDefault()
    }
  }
}
