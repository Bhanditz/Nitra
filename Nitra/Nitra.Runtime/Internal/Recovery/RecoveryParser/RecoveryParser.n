using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public ParseResult       : ParseResult;
    public Sequences         : HashSetEx[ParsedSequence] = HashSetEx();
    public AddedSequences    : SCG.List[ParsedSequence] = SCG.List();
    public Records           : array[SCG.HashSet[ParseRecord]];
    public RecordsToProcess  : SCG.Stack[int * ParseRecord] = SCG.Stack(50);
    public RecordsToComplete : SCG.Stack[int * ParseRecord * ParsedSequence] = SCG.Stack(50);
    public mutable MaxPos    : int = -1;

    mutable  _nextId : int;
    
    public GetNextId() : int { _nextId++; _nextId }
    
    public Records2           : array[array[ParseRecord]]
    {
      get
      {
        def result = array(Records.Length);
        
        foreach (x when x != null in Records with i)
          result[i] = x.OrderBy(r => r.ToString(i)).ToArray();
          
        result
      }
    }
    
    public this(parseResult : ParseResult)
    {
      Records     = array(parseResult.Text.Length + 1);
      ParseResult = parseResult;
    }

    public StartParseSequence(caller : ParseRecord, mutable sequence : ParsedSequence) : void
    {
      when (Sequences.AddOrGetFirstAddedItem(ref sequence))
      {
        def record = ParseRecord(sequence, 0, -1);
        StartParseSubrule(sequence.StartPos, record);
        AddedSequences.Add(sequence);
      }
      when (sequence.Callers.Add(caller))
        foreach (pos in sequence.Ends)
          RecordsToComplete.Push(pos, caller, sequence);
    }

    public StartParseSubrule(pos : int, record : ParseRecord) : void
    {
      if (record.IsComplete)
      {
        when (record.Sequence.Ends.Add(pos))
          foreach (caller in record.Sequence.Callers)
            RecordsToComplete.Push(pos, caller, record.Sequence);
      }
      else
      {
        mutable set = Records[pos];
        when (set == null)
        {
          set = SCG.HashSet();
          Records[pos] = set;
          MaxPos = Math.Max(MaxPos, pos);
        }
        record.ParsePos = pos;
        def newRecord = set.Add(record);
        when (newRecord)
          RecordsToProcess.Push((pos, record));
      }
    }

    public SubruleParsed(begin : int, end : int, record : ParseRecord) : void
    {
      _ = record.Sequence.ParsedSubrules.Add(ParsedSubrule(begin, end, record.Index));
      StartParseSubrule(end, record.Next());
    }

    public StartParse(ruleParser : RuleParser) : void
    {
      def textPos = 0;
      match (ruleParser)
      {
        | SimpleRuleParser     as ruleParser =>
          def sequence = ruleParser.Reflection(ruleParser.RuleId);
          StartParseSequence(ParseRecord(ParsedSequence.Root(this, textPos), 0, -1), ParsedSequence.Simple(this, textPos, sequence));

        | ExtensibleRuleParser as ruleParser =>
          StartParseSequence(ParseRecord(ParsedSequence.Root(this, textPos), 0, -1), ParsedSequence.Extensible(this, textPos, ruleParser));

        | _ => assert3(false)
      }
      Parse();
    }

    public Parse() : void
    {
      while (RecordsToProcess.Count > 0 || RecordsToComplete.Count > 0)
      {
        while (RecordsToProcess.Count > 0)
        {
          def (pos, record) = RecordsToProcess.Pop();
          PredictionOrScanning(pos, record, optimize=true);
        }
        while (RecordsToComplete.Count > 0)
          Completion(RecordsToComplete.Pop());
      }
    }

    public FindNextError() : void
    {
      mutable lastMaxPos;
      mutable lastRecordsCount;
      do
      {
        lastMaxPos = MaxPos;
        lastRecordsCount = Records[MaxPos].Count;
        def sequences = Records[MaxPos].Grouping(record => (record.Sequence, record));
        foreach ((sequence, records) in sequences.KeyValuePairs)
        {
          foreach (record in records)
            PredictionOrScanning(MaxPos, record, false);

          def minIndex = records.Min(record => record.Index) - 1;
          when (minIndex >= 0)
            foreach (begin in SCG.HashSet(sequence.ParsedSubrules.Where(subrule => subrule.Index == minIndex).Select(subrule => subrule.Begin)))
              PredictionOrScanning(begin, ParseRecord(sequence, minIndex, begin), false);
        }
        Parse();
      }
      while (lastMaxPos != MaxPos || lastRecordsCount != Records[MaxPos].Count);
    }

    public Completion(pos : int, caller : ParseRecord, sequence : ParsedSequence) : void
    {
      match (sequence)
      {
        | Root => ()
        | Simple | Option | Extensible =>
          SubruleParsed(sequence.StartPos, pos, caller);

        | Extension =>
          SubruleParsed(sequence.StartPos, pos, caller);
          StartParseSubrule(pos, ParseRecord(caller.Sequence, 1, pos));
          StartParseSubrule(pos, ParseRecord(caller.Sequence, 2, pos));

        | List                       as sequence =>
           _ = caller.Sequence.ParsedSubrules.Add(ParsedSubrule(sequence.ListStart, pos, caller.Index));
          when (sequence.StartPos < pos && CounterLessThanMax(sequence.Counter, sequence.Subrule.Max))
            StartParseSequence(caller, ParsedSequence.List(this, pos, sequence.Subrule, sequence.ListStart, sequence.Counter + 1));
          when (sequence.Counter >= sequence.Subrule.Min)
            SubruleParsed(sequence.ListStart, pos, caller);

        | ListWithSeparatorRule      as sequence =>
          def parsedSubrule = ParsedSubrule(sequence.ListStart, pos, caller.Index);
          when ((sequence.StartPos < pos || !caller.Sequence.ParsedSubrules.Contains(parsedSubrule)) && (sequence.Subrule.HangingSeparator || CounterLessThanMax(sequence.Counter, sequence.Subrule.Max)))
            StartParseSequence(caller, ParsedSequence.ListWithSeparatorSeparator(this, pos, sequence.Subrule, sequence.ListStart, sequence.Counter));
          when (sequence.Counter >= sequence.Subrule.Min)
            SubruleParsed(sequence.ListStart, pos, caller);
           _ = caller.Sequence.ParsedSubrules.Add(parsedSubrule);

        | ListWithSeparatorSeparator as sequence =>
          def parsedSubrule = ParsedSubrule(sequence.ListStart, pos, caller.Index);
          when ((sequence.StartPos < pos || !caller.Sequence.ParsedSubrules.Contains(parsedSubrule)) && CounterLessThanMax(sequence.Counter, sequence.Subrule.Max))
            StartParseSequence(caller, ParsedSequence.ListWithSeparatorRule(this, pos, sequence.Subrule, sequence.ListStart, sequence.Counter + 1));
          when (sequence.Subrule.HangingSeparator && sequence.Counter >= sequence.Subrule.Min)
            SubruleParsed(sequence.ListStart, pos, caller);
           _ = caller.Sequence.ParsedSubrules.Add(parsedSubrule);
      }
    }

    public PredictionOrScanning(textPos : int, record : ParseRecord, optimize : bool) : void
    {
      def parseSubruleAndAddNextRecord(textPos : int, record : ParseRecord) : bool
      {
        def endPos = record.CurSubrule.Parse(textPos, ParseResult.Text, ParseResult);
        if (endPos >= 0)
        {
          SubruleParsed(textPos, endPos, record);
          true;
        }
        else
          false
      }

      if (record.Sequence is ParsedSequence.Extensible as sequence)
      {
        match (record.Index)
        {
          | 0 =>
            foreach (prefixRule in sequence.RuleParser.PrefixRules)
            {
              def sequence = prefixRule.Reflection(prefixRule.RuleId);
              StartParseSequence(record, ParsedSequence.Extension(this, textPos, sequence));
            }

          | 1 =>
            foreach (postfixRule when sequence.RuleParser.FirstPostfixRuleId <= postfixRule.RuleId in sequence.RuleParser.PostfixRules)
            {
              def sequence = postfixRule.Reflection(postfixRule.RuleId);
              StartParseSequence(record, ParsedSequence.Extension(this, textPos, sequence));
            }

          | _ => assert3(false)
        }
      }
      else
      {
        def rule = record.CurSubrule;
        match (rule)
        {
          | Empty | Marker | RegularCall | TokenString =>
            _ = parseSubruleAndAddNextRecord(textPos, record)

          | ExtensibleCall    as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            when (rule.HeadPredicate == null || rule.HeadPredicate(textPos, ParseResult.Text, ParseResult))
              StartParseSequence(record, ParsedSequence.Extensible(this, textPos, rule.RuleParser));

          | SimpleCall        as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            when (rule.HeadPredicate == null || rule.HeadPredicate(textPos, ParseResult.Text, ParseResult))
            {
              def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
              StartParseSequence(record, ParsedSequence.Simple(this, textPos, sequence));
            }

          | Option            as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            when (rule.HeadPredicate == null || rule.HeadPredicate(textPos, ParseResult.Text, ParseResult))
            {
              StartParseSequence(record, ParsedSequence.Option(this, textPos, rule));
              SubruleParsed(textPos, textPos, record);
            }

          | List              as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            when (rule.HeadPredicate == null || rule.HeadPredicate(textPos, ParseResult.Text, ParseResult))
            {
              StartParseSequence(record, ParsedSequence.List(this, textPos, rule, textPos, 1));
              when (rule.Min == 0)
                SubruleParsed(textPos, textPos, record);
            }

          | ListWithSeparator as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            when (rule.HeadPredicate == null || rule.HeadPredicate(textPos, ParseResult.Text, ParseResult))
            {
              StartParseSequence(record, ParsedSequence.ListWithSeparatorRule(this, textPos, rule, textPos, 1));
              when (rule.Min == 0)
                SubruleParsed(textPos, textPos, record);
            }
        }
      }
    }

    public static CounterLessThanMax(counter: int, max : Nullable[int]) : bool
    {
      !max.HasValue || counter < max.GetValueOrDefault()
    }
  }
}
