using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Collections;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public class RecoveryParser
  {
    public ParseResult       : ParseResult;
    public Sequences         : HashSetEx[ParsedSequence] = HashSetEx();
    public Records           : array[SCG.HashSet[ParseRecord]];
    public RecordsToProcess  : SCG.Stack[int * ParseRecord] = SCG.Stack(50);
    public RecordsToComplete : SCG.Stack[int * ParseRecord * ParsedSequence] = SCG.Stack(50);
    public mutable MaxPos    : int = -1;

    mutable  _nextId : int;
    
    public GetNextId() : int { _nextId++; _nextId }
    
    public Records2           : array[array[string]]
    {
      get
      {
        def result = array(Records.Length);
        
        foreach (x when x != null in Records with i)
          result[i] = x.Select(r => r.ToString(i)).OrderBy(r => r).ToArray();
          
        result
      }
    }
    
    public this(parseResult : ParseResult)
    {
      Records     = array(parseResult.Text.Length + 1);
      ParseResult = parseResult;
    }

    private AddSequence(caller : ParseRecord, mutable sequence : ParsedSequence) : void
    {
      when (Sequences.AddOrGetFirstAddedItem(ref sequence))
      {
        def record = ParseRecord(sequence, 0, -1);
        AddRecord(sequence.StartPos, record);
      }
      when (sequence.Callers.Add(caller))
        foreach (pos in sequence.Ends)
          RecordsToComplete.Push(pos, caller, sequence);
    }

    private AddRecord(pos : int, record : ParseRecord) : void
    {
      if (record.IsComplete)
      {
        when (record.Sequence.Ends.Add(pos))
          foreach (caller in record.Sequence.Callers)
            RecordsToComplete.Push(pos, caller, record.Sequence);
      }
      else
      {
        mutable set = Records[pos];
        when (set == null)
        {
          set = SCG.HashSet();
          Records[pos] = set;
          MaxPos = Math.Max(MaxPos, pos);
        }
        record.ParsePos = pos;
        def newRecord = set.Add(record);
        when (newRecord)
          RecordsToProcess.Push((pos, record));
      }
    }

    private AddNextRecord(begin : int, end : int, record : ParseRecord) : void
    {
      _ = record.Sequence.ParsedSubrules.Add(ParsedSubrule(begin, end, record.Index));
      AddRecord(end, record.Next());
    }

    public StartParse(ruleParser : RuleParser) : void
    {
      def textPos = 0;
      match (ruleParser)
      {
        | SimpleRuleParser     as ruleParser =>
          def sequence = ruleParser.Reflection(ruleParser.RuleId);
          AddSequence(ParseRecord(ParsedSequence.Root(this, textPos), 0, -1), ParsedSequence.Simple(this, textPos, sequence));

        | ExtensibleRuleParser as ruleParser =>
          AddSequence(ParseRecord(ParsedSequence.Root(this, textPos), 0, -1), ParsedSequence.Extensible(this, textPos, ruleParser));

        | _ => assert3(false)
      }
      Parse();
    }

    public Parse() : void
    {
      while (RecordsToProcess.Count > 0 || RecordsToComplete.Count > 0)
      {
        while (RecordsToProcess.Count > 0)
        {
          def (pos, record) = RecordsToProcess.Pop();
          PredictionOrScanning(pos, record, true);
        }
        while (RecordsToComplete.Count > 0)
          Completion(RecordsToComplete.Pop());
      }
    }

    public FindNextError() : void
    {
      mutable lastMaxPos;
      mutable lastRecordsCount;
      do
      {
        lastMaxPos = MaxPos;
        lastRecordsCount = Records[MaxPos].Count;
        def sequences = Records[MaxPos].Grouping(record => (record.Sequence, record));
        foreach ((sequence, records) in sequences.KeyValuePairs)
        {
          foreach (record in records)
            PredictionOrScanning(MaxPos, record, false);

          def minIndex = records.Min(record => record.Index) - 1;
          when (minIndex >= 0)
            foreach (begin in SCG.HashSet(sequence.ParsedSubrules.Where(subrule => subrule.Index == minIndex).Select(subrule => subrule.Begin)))
              PredictionOrScanning(begin, ParseRecord(sequence, minIndex, begin), false);
        }
        Parse();
      }
      while (lastMaxPos != MaxPos || lastRecordsCount != Records[MaxPos].Count);
    }

    public Completion(pos : int, caller : ParseRecord, sequence : ParsedSequence) : void
    {
      match (sequence)
      {
        | Root => ()
        | Simple | Extension | Option =>
          AddNextRecord(sequence.StartPos, pos, caller);

        | Extensible as sequence =>
          AddNextRecord(sequence.StartPos, pos, caller);
          AddRecord(pos, ParseRecord(sequence, 1, -1));

        | List                       as sequence =>
          when (CounterLessThanMax(sequence.Counter, sequence.Subrule.Max))
            AddSequence(caller, ParsedSequence.List(this, pos, sequence.Subrule, sequence.ListStart, sequence.Counter + 1));
          when (sequence.Counter >= sequence.Subrule.Min)
            AddNextRecord(sequence.ListStart, pos, caller);

        | ListWithSeparatorRule      as sequence =>
          when (sequence.Subrule.HangingSeparator || CounterLessThanMax(sequence.Counter, sequence.Subrule.Max))
            AddSequence(caller, ParsedSequence.ListWithSeparatorSeparator(this, pos, sequence.Subrule, sequence.ListStart, sequence.Counter));
          when (sequence.Counter >= sequence.Subrule.Min)
            AddNextRecord(sequence.ListStart, pos, caller);

        | ListWithSeparatorSeparator as sequence =>
          when (CounterLessThanMax(sequence.Counter, sequence.Subrule.Max))
            AddSequence(caller, ParsedSequence.ListWithSeparatorRule(this, pos, sequence.Subrule, sequence.ListStart, sequence.Counter + 1));
          when (sequence.Subrule.HangingSeparator && sequence.Counter >= sequence.Subrule.Min)
            AddNextRecord(sequence.ListStart, pos, caller);
      }
    }

    public PredictionOrScanning(textPos : int, record : ParseRecord, optimize : bool) : void
    {
      def parseSubruleAndAddNextRecord(textPos : int, record : ParseRecord) : bool
      {
        def endPos = record.CurSubrule.Parse(textPos, ParseResult.Text, ParseResult);
        if (endPos >= 0)
        {
          AddNextRecord(textPos, endPos, record);
          true;
        }
        else
          false
      }

      if (record.Sequence is ParsedSequence.Extensible as sequence)
      {
        match (record.Index)
        {
          | 0 =>
            foreach (prefixRule in sequence.RuleParser.PrefixRules)
            {
              def sequence = prefixRule.Reflection(prefixRule.RuleId);
              AddSequence(record, ParsedSequence.Extension(this, textPos, sequence));
            }

          | 1 =>
            AddNextRecord(sequence.StartPos, textPos, record);
            foreach (postfixRule when sequence.RuleParser.FirstPostfixRuleId <= postfixRule.RuleId in sequence.RuleParser.PostfixRules)
            {
              def sequence = postfixRule.Reflection(postfixRule.RuleId);
              AddSequence(record, ParsedSequence.Extension(this, textPos, sequence));
            }

          | _ => assert3(false)
        }
      }
      else
      {
        def rule = record.CurSubrule;
        match (rule)
        {
          | Empty | Marker | RegularCall | TokenString =>
            _ = parseSubruleAndAddNextRecord(textPos, record)

          | ExtensibleCall    as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
              AddSequence(record, ParsedSequence.Extensible(this, textPos, rule.RuleParser));

          | SimpleCall        as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            {
              def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
              AddSequence(record, ParsedSequence.Simple(this, textPos, sequence));
            }

          | Option            as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            {
              AddSequence(record, ParsedSequence.Option(this, textPos, rule));
              AddNextRecord(textPos, textPos, record);
            }

          | List              as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            {
              AddSequence(record, ParsedSequence.List(this, textPos, rule, textPos, 1));
              when (rule.Min == 0)
                AddNextRecord(textPos, textPos, record);
            }

          | ListWithSeparator as rule =>
            unless (optimize && parseSubruleAndAddNextRecord(textPos, record))
            {
              AddSequence(record, ParsedSequence.ListWithSeparatorRule(this, textPos, rule, textPos, 1));
              when (rule.Min == 0)
                AddNextRecord(textPos, textPos, record);
            }
        }
      }
    }

    public static CounterLessThanMax(counter: int, max : Nullable[int]) : bool
    {
      !max.HasValue || counter < max.GetValueOrDefault()
    }

    public ToDot(_startPos : int) : SCG.List[string] * SCG.Dictionary[string, string]
    {
      //def dir = Directory.CreateDirectory(Path.ChangeExtension(Path.GetTempFileName(), null)).FullName;
      def dir = @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079";
      
      foreach (file in Directory.GetFiles(dir))
        File.Delete(file);
      
      def escape(x : string) : string
      {
        x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
      }
      def getFileName(dir : string, sequence : ParsedSequence) : string
      {
        Path.Combine(dir, sequence.Id + "_" + (if (sequence.HasName) sequence.Name else ""))
      }
      
      foreach (sequence in Sequences)
      {
        def fileName = getFileName(dir, sequence);
        
        when (fileName == @"c:\Users\Vlad.Chistyakov\AppData\Local\Temp\tmp2079\179_Class")
        {
          assert2(true);
        }
        
        def subruleNode(sequence : ParsedSequence, subrule : ParsedSubrule, needLabel : bool = false) : string
        {
          def getName(sequence : ParsedSequence) : string
          {
            | ParsedSequence.Extensible as ex => subrule.Index + ":" + ex.RuleParser.RuleName
            | _ => sequence.GetSubrule(subrule.Index).ToString()
          }
          
          def label = escape(subrule.Begin + ":" + subrule.End + " - " + getName(sequence));
          "Seq_" + sequence.Id + "_subgule_" + subrule.Index + "_B" + subrule.Begin + "_E" + subrule.End
          + if (needLabel) $<# [label="$label"] #> else null
        }
        def nodes = SCG.List();
        def edges = SCG.List();
        
        nodes.Add(<#Start [label=">"]#>);
        
        def lastIndex = sequence.SubruleCount - 1;
        
        when (sequence.ParsedSubrules.Any(s => s.Index == lastIndex))
          nodes.Add(<#Complete [label=">>"]#>);
        
        foreach (subrule in sequence.ParsedSubrules)
          nodes.Add(subruleNode(sequence, subrule, needLabel=true));
        
        foreach (subrule when subrule.Index == 0 in sequence.ParsedSubrules)
          edges.Add(<#Start -> #> + subruleNode(sequence, subrule));

        foreach (subrule in sequence.ParsedSubrules)
        {
          def node         = subruleNode(sequence, subrule);
          def nextSubrules = sequence.ParsedSubrules.Where(s => subrule.Index + 1 == s.Index && subrule.End == s.Begin);
          foreach (nextSubrule in nextSubrules)
          edges.Add(node + <# -> #> + subruleNode(sequence, nextSubrule));
        }
          
        foreach (subrule when subrule.Index == lastIndex in sequence.ParsedSubrules)
          edges.Add(subruleNode(sequence, subrule) + <# -> Complete#>);
          
        def content = 
$<#
  digraph RecoveryParser
  {
    rankdir=LR;
    bgcolor=ivory;
    compound=true;
    label="$sequence";
    
    ..$(nodes; "\r\n    ")
    
    ..$(edges; "\r\n    ")
  }
#>;
        File.WriteAllText(fileName, content);
      }
      
      assert3(false);
      /*
      def filesToOpen = SCG.List();
      def files = SCG.Dictionary();

      //def makeShortLabel(str : string ) : string { if (str.Length > 20) str.Substring(20) + "..." else str }
      def escape(x : string) : string
      {
        x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
      }
      def makeTooltip(str : string ) : string { if (str.Length > 0) escape(str) else "<EMPTY>" }
      def makeClusterName(pos : int, sequence : SequenceInfo) { $"cluster_$(pos)_$(sequence.Id)" }
      def makeExtensibleClusterName(pos : int, parserData : ExtensibleRuleParserData) { $"cluster_extensible_$(pos)_$(parserData.PrefixId)" }
      def makeExtensionClusterName(extensibleClusterName : string,  pos : int) { $"cluster_extenson_$(pos)_$(extensibleClusterName)" }
      def makeNodeName(clusterName : string, pos : int, index : int) { $"$(clusterName)_$(pos)_$(index)" }
      def makeClusterNode(clusterName : string) : string { $<# $clusterName [label="#" style="invis"]; #> }
      def makeClusterRef(target : string) : string { $<#URL="$(escape(target)).svg"#> }
      def renderCluster(parsedSequence : ParsedSequence) : string * string
      {
        def clusterName = makeClusterName(parsedSequence.Start.Pos, parsedSequence.Start.Sequence);
        def edges = SCG.List();
        def nodes = SCG.List();
        def callerNodes = SCG.List();
        def label = escape(parsedSequence.Start.ToString());
        nodes.Add(makeClusterNode(clusterName));
        foreach (parseRecordStart in parsedSequence.Records)
        {
          def nodeName = makeNodeName(clusterName, parseRecordStart.Pos, parseRecordStart.Record.Index);
          when (parseRecordStart.Record.Index > 0)
          {
            def prevNodeName = makeNodeName(clusterName, parseRecordStart.PrevPos, parseRecordStart.Record.Index - 1);
            def text = makeTooltip(ParseResult.Text.Substring(parseRecordStart.PrevPos, parseRecordStart.Pos - parseRecordStart.PrevPos));
            edges.Add($<# $prevNodeName -> $nodeName [edgetooltip="$text"]; #>);
          }
          def labelText = if (parseRecordStart.Record.IsComplete) "#COMPLETE#" else parseRecordStart.Record.CurSubrule.ToString();
          def label = escape($"$(parseRecordStart.Pos) $(labelText)");
          mutable url = "";
          unless (parseRecordStart.Record.IsComplete)
            match (parseRecordStart.Record.CurSubrule)
            {
              | SimpleCall as subrule =>
                def targetClusterKey = SequenceStart(parseRecordStart.Pos, subrule.RuleParser.Reflection(subrule.RuleParser.RuleId));
                when (Ast.ContainsKey(targetClusterKey))
                  url = makeClusterRef(makeClusterName(targetClusterKey.Pos, targetClusterKey.Sequence));

              | ExtensibleCall as subrule =>
                url = makeClusterRef(makeExtensibleClusterName(parseRecordStart.Pos, subrule.RuleParser.ParserData));

              | Option as subrule =>
                url = makeClusterRef(makeClusterName(parseRecordStart.Pos, subrule.Rule));

              | List as subrule =>
                url = makeClusterRef(makeClusterName(parseRecordStart.Pos, subrule.Rule));

              | ListWithSeparator as subrule =>
                url = makeClusterRef(makeClusterName(parseRecordStart.Pos, subrule.Rule));

              | _ => ()
            }
          def color = if (string.IsNullOrEmpty(url)) "ghostwhite" else "honeydew";
          nodes.Add($<# $nodeName [label="$label" shape=box style=filled color=black fillcolor=$color $url]; #>);

          foreach (caller in parsedSequence.Callers)
          {
            def callerClusterName = match (caller)
            {
              | ParsedSequence as caller => makeClusterName(caller.Start.Pos, caller.Start.Sequence)
              | ParsedExtensions as caller => makeExtensibleClusterName(caller.Start.Pos, caller.Start.ParserData)
              | _ => assert3(false)
            }
            def callerLabel = escape(caller.ToString());
            def clusterRef = makeClusterRef(callerClusterName);
            callerNodes.Add($<# $callerClusterName [label="$callerLabel" shape=box style=filled color=black fillcolor=moccasin $clusterRef]; #>);
            callerNodes.Add($<# $callerClusterName -> $clusterName [lhead = $clusterName]; #>);
          }
        }
        def subgraph =
        $<#
          subgraph $clusterName
          {
            bgcolor=ghostwhite;
            label="$label";
            ..$(nodes; "\n            ")
            ..$(edges; "\n            ")
          }
          ..$(callerNodes; "\n            ")
        #>;
        (clusterName, subgraph)
      }
      def renderGraph(body : string) : string
      {
        $<#
digraph RecoveryParser
{
  rankdir=LR;
  compound=true;
  $body
}
        #>
      }

      foreach (sequence in Ast.Values)
        foreach (parseRecordStart when !parseRecordStart.Record.IsComplete in sequence.Records)
        {
          match (parseRecordStart.Record.CurSubrule)
          {
            | SimpleCall as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.RuleParser.Reflection(subrule.RuleParser.RuleId))))

            | ExtensibleCall as subrule =>
              sequence.AddCaller(ExtensionsAst.Get(ExtensibleStart(parseRecordStart.Pos, subrule.RuleParser.ParserData)))

            | Option as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.Rule)))

            | List as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.Rule)))

            | ListWithSeparator as subrule =>
              sequence.AddCaller(Ast.Get(SequenceStart(parseRecordStart.Pos, subrule.Rule)))

            | _ => ()
          }
        }

      foreach ((sequenceStart, subrules) when !sequenceStart.Sequence.IsExtension in Ast.KeyValuePairs)
      {
        def (name, c) = renderCluster(subrules);
        files.Add(name, renderGraph(c));
      }

      foreach ((extensibleStart, subrules) in ExtensionsAst.KeyValuePairs)
      {
        def groupBySequenceStartPos = subrules.Sequences.Grouping(s => (s.Start.Pos, s));
        def extensibleClusterName = makeExtensibleClusterName(extensibleStart.Pos, extensibleStart.ParserData);
        def label = escape($"$(extensibleStart.Pos) $(extensibleStart.ParserData.Descriptor.Name)");
        def extensibleClusterSubclusters = SCG.List();
        foreach ((pos, clusters) in groupBySequenceStartPos.KeyValuePairs)
        {
          def extensionClusterName = makeExtensionClusterName(extensibleClusterName, pos);
          def extensionClusters = SCG.List();
          foreach (subCluster in clusters)
          {
            def (_, c) = renderCluster(subCluster);
            extensionClusters.Add(c);
          }
          extensibleClusterSubclusters.Add($<#
            subgraph $extensionClusterName
            {
              bgcolor=cornsilk;
              label="";
              $(makeClusterNode(extensionClusterName))
              ..$(extensionClusters; "\n              ")
            }
          #>);
        }
        files.Add(extensibleClusterName, renderGraph($<#
          subgraph $extensibleClusterName
          {
            bgcolor=ivory;
            label="$label";
            $(makeClusterNode(extensibleClusterName))
            ..$(extensibleClusterSubclusters; "\n            ")
          }
        #>));
      }

      filesToOpen.Add(files.Keys.First());
      (filesToOpen, files)*/
    }
  }
}
