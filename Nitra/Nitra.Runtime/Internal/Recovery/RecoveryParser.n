using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;
using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public class RecoveryParser
  {
    [Record, StructuralEquality]
    public variant ParseRecord
    {
      public StartPos : int;
      public Sequence : SequenceInfo;
      public Index    : int;

      | Simple
      | Extension                  { ExtensibleStartPos : int; RuleParser : ExtensibleRuleParser }
      | Option                     { NextRecord : ParseRecord; }
      | List                       { Counter : int; Subrule : SubruleInfo.List;              NextRecord : ParseRecord; }
      | ListWithSeparatorRule      { Counter : int; Subrule : SubruleInfo.ListWithSeparator; NextRecord : ParseRecord; }
      | ListWithSeparatorSeparator { Counter : int; Subrule : SubruleInfo.ListWithSeparator; NextRecord : ParseRecord; }

      public IsComplete : bool        { get { Index >= Sequence.Subrules.Length } }
      public CurSubrule : SubruleInfo { get { Sequence.Subrules[Index] } }

      public Next() : ParseRecord
      {
        assert3(!IsComplete);
        match (this)
        {
          | Simple                          => ParseRecord.Simple                    (StartPos, Sequence, Index + 1)
          | Extension                  as r => ParseRecord.Extension                 (StartPos, Sequence, Index + 1, r.ExtensibleStartPos, r.RuleParser)
          | Option                     as r => ParseRecord.Option                    (StartPos, Sequence, Index + 1, r.NextRecord)
          | List                       as r => ParseRecord.List                      (StartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
          | ListWithSeparatorRule      as r => ParseRecord.ListWithSeparatorRule     (StartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
          | ListWithSeparatorSeparator as r => ParseRecord.ListWithSeparatorSeparator(StartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
        }
      }
    }

    private Records     : array[SCG.HashSet[ParseRecord]];
    private ParseResult : ParseResult;
    private Stack       : SCG.Stack[ParseRecord];

    public this(parseResult : ParseResult)
    {
      Records     = array(parseResult.Text.Length);
      ParseResult = parseResult;
      Stack       = SCG.Stack(50);
    }

    private AddRecord(curPos : int, nextPos : int, record : ParseRecord) : void
    {
      mutable set = Records[nextPos];
      when (set == null)
      {
        set = SCG.HashSet();
        Records[nextPos] = set;
      }
      when (set.Add(record) && curPos == nextPos)
        Stack.Push(record);
    }

    public StartParse(ruleParser : RuleParser) : void
    {
      def textPos = 0;
      match (ruleParser)
      {
        | SimpleRuleParser     as ruleParser =>
          def sequence = ruleParser.Reflection(ruleParser .RuleId);
          AddRecord(textPos, textPos, ParseRecord.Simple(textPos, sequence, 0));

        | ExtensibleRuleParser as ruleParser =>
          foreach (prefixRule in ruleParser.PrefixRules)
          {
            def sequence = prefixRule.Reflection(prefixRule.RuleId);
            AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, textPos, ruleParser));
          }

        | _ => assert3(false)
      }
      Stack.Clear();
      Parse();
    }

    private Parse() : void
    {
      for (mutable textPos = 0; textPos < Records.Length; ++textPos)
      {
        def set = Records[textPos];
        when (set == null)
          continue;
        foreach (record in set)
          Stack.Push(record);
        while (Stack.Count > 0)
        {
          def record = Stack.Pop();
          if (record.IsComplete)
            Completion(textPos, record)
          else
            PredictionOrScanning(textPos, record)
        }
      }
    }

    public CompletionSimple(textPos : int, record : ParseRecord.Simple, recordsToComplete : SCG.IEnumerable[ParseRecord]) : void
    {
      foreach (x when !x.IsComplete in recordsToComplete)
        when (x.CurSubrule is SimpleCall as rule when rule.RuleParser : object == record.Sequence.Parser)
          AddRecord(textPos, textPos, x.Next());
    }

    public CompletionExtension(textPos : int, record : ParseRecord.Extension, recordsToComplete : SCG.IEnumerable[ParseRecord]) : void
    {
      def extensibleParser = record.RuleParser;
      foreach (x when !x.IsComplete in recordsToComplete)
        when (x.CurSubrule is ExtensibleCall as rule when rule.RuleParser : object == extensibleParser)
          AddRecord(textPos, textPos, x.Next());
    }

    public Completion(textPos : int, record : ParseRecord) : void
    {
      match (record)
      {
        | Simple as record =>
          if (record.StartPos == textPos)
          {
            def records = SCG.List();
            do
            {
              records.Clear();
              records.AddRange(Records[record.StartPos]);
              CompletionSimple(textPos, record, records);
            }
            while(records.Count != Records[record.StartPos].Count);
          }
          else
          {
            CompletionSimple(textPos, record, Records[record.StartPos]);
          }

        | Extension as record =>
          def extensibleParser = record.RuleParser;
          if (record.StartPos == textPos)
          {
            def records = SCG.List();
            do
            {
              records.Clear();
              records.AddRange(Records[record.ExtensibleStartPos]);
              CompletionExtension(textPos, record, records);
            }
            while(records.Count != Records[record.StartPos].Count);
          }
          else
          {
            CompletionExtension(textPos, record, Records[record.ExtensibleStartPos]);
          }
          foreach (postfixRule in record.RuleParser.PostfixRules)
            when (extensibleParser.FirstPostfixRuleId <= postfixRule.RuleId)
            {
              def sequence = postfixRule.Reflection(postfixRule.RuleId);
              AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, record.ExtensibleStartPos, record.RuleParser));
            }

        | Option                     as record =>
          AddRecord(textPos, textPos, record.NextRecord);

        | List                       as record =>
          when (CounterLessThanMax(record.Counter, record.Subrule.Max))
            AddRecord(textPos, textPos, ParseRecord.List(textPos, record.Subrule.Rule, 0, counter = record.Counter + 1, subrule = record.Subrule, nextRecord = record.NextRecord));
          when (record.Counter >= record.Subrule.Min)
            AddRecord(textPos, textPos, record.NextRecord);

        | ListWithSeparatorRule      as record =>
          AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorSeparator(textPos, record.Subrule.Rule, 0, counter = record.Counter + 1, subrule = record.Subrule, nextRecord = record.NextRecord));
          when (record.Counter >= record.Subrule.Min)
            AddRecord(textPos, textPos, record.NextRecord);

        | ListWithSeparatorSeparator as record =>
          when (CounterLessThanMax(record.Counter, record.Subrule.Max))
            AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, record.Subrule.Rule, 0, counter = record.Counter, subrule = record.Subrule, nextRecord = record.NextRecord));
          when (record.Subrule.HangingSeparator && record.Counter >= record.Subrule.Min)
            AddRecord(textPos, textPos, record.NextRecord);
      }
    }

    public PredictionOrScanning(textPos : int, record : ParseRecord) : void
    {
      def text = ParseResult.Text;
      match (record.CurSubrule)
      {
        | Empty                     => ()
        | Marker                    => assert3(false)
        | RegularCall       as rule =>
          def endPos = rule.Descriptor.Parse(textPos, text);
          when (endPos >= 0)
            AddRecord(textPos, endPos, record.Next());

        | TokenString       as rule =>
          def endPos = rule.Parse(textPos, text);
          when (endPos >= 0)
            AddRecord(textPos, endPos, record.Next());

        | ExtensibleCall    as rule =>
          foreach (prefixRule in rule.RuleParser.PrefixRules)
          {
            def sequence = prefixRule.Reflection(prefixRule.RuleId);
            AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, textPos, rule.RuleParser));
          }

        | SimpleCall        as rule =>
          def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
          AddRecord(textPos, textPos, ParseRecord.Simple(textPos, sequence, 0));

        | Option            as rule =>
          def nextRecord = record.Next();
          AddRecord(textPos, textPos, ParseRecord.Option(textPos, rule.Rule, 0, nextRecord));
          AddRecord(textPos, textPos, nextRecord);

        | List              as rule =>
          def nextRecord = record.Next();
          AddRecord(textPos, textPos, ParseRecord.List(textPos, rule.Rule, 0, counter = 0, subrule = rule, nextRecord = nextRecord));
          when (rule.Min == 0)
            AddRecord(textPos, textPos, nextRecord);

        | ListWithSeparator as rule =>
          def nextRecord = record.Next();
          AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, rule.Rule, 0, counter = 0, subrule = rule, nextRecord = nextRecord));
          when (rule.Min == 0)
            AddRecord(textPos, textPos, nextRecord);
      }
    }

    private static CounterLessThanMax(counter: int, max : Nullable[int]) : bool
    {
      !max.HasValue || counter < max.GetValueOrDefault()
    }
  }
}
