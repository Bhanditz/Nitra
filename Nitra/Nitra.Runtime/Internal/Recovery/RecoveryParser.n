using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;
using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public class RecoveryParser
  {
    [Record, StructuralEquality]
    public variant ParseRecord
    {
      public StartPos : int;
      public Sequence : SequenceInfo;
      public Index    : int;

      | Simple
      | Extension                  { ExtensibleStartPos : int; Subrule : SubruleInfo.ExtensibleCall }
      | Option                     { NextRecord : ParseRecord; }
      | List                       { Counter : int; Subrule : SubruleInfo.List; NextRecord : ParseRecord; }
      | ListWithSeparatorRule      { Counter : int; Subrule : SubruleInfo.ListWithSeparator; NextRecord : ParseRecord; }
      | ListWithSeparatorSeparator { Counter : int; Subrule : SubruleInfo.ListWithSeparator; NextRecord : ParseRecord; }

      public IsComplete : bool        { get { Index == Sequence.Subrules.Length } }
      public CurSubrule : SubruleInfo { get { Sequence.Subrules[Index] } }

      public Next() : ParseRecord
      {
        assert3(!IsComplete);
        match (this)
        {
          | Simple                          => ParseRecord.Simple                    (StartPos, Sequence, Index + 1)
          | Extension                  as r => ParseRecord.Extension                 (StartPos, Sequence, Index + 1, r.ExtensibleStartPos, r.Subrule)
          | Option                     as r => ParseRecord.Option                    (StartPos, Sequence, Index + 1, r.NextRecord)
          | List                       as r => ParseRecord.List                      (StartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
          | ListWithSeparatorRule      as r => ParseRecord.ListWithSeparatorRule     (StartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
          | ListWithSeparatorSeparator as r => ParseRecord.ListWithSeparatorSeparator(StartPos, Sequence, Index + 1, r.Counter, r.Subrule, r.NextRecord)
        }
      }
    }

    private Records     : array[SCG.HashSet[ParseRecord]];
    private ParseResult : ParseResult;
    private Stack       : SCG.Stack[ParseRecord];

    public this(length : int, parseResult : ParseResult)
    {
      Records     = array(length + 1);
      ParseResult = parseResult;
      Stack       = SCG.Stack(50);
    }

    private AddRecord(curPos : int, nextPos : int, record : ParseRecord) : void
    {
      mutable set = Records[nextPos];
      when (set == null)
      {
        set = SCG.HashSet();
        Records[nextPos] = set;
      }
      when (set.Add(record) && curPos == nextPos)
        Stack.Push(record);
    }

    public Parse() : void
    {
      def counterLessThanMax(counter: int, max : Nullable[int]) : bool
      {
        !max.HasValue || counter < max.GetValueOrDefault()
      }

      def text = ParseResult.Text;
      for (mutable textPos = 0; textPos < Records.Length; ++textPos)
      {
        def set = Records[textPos];
        when (set == null)
          continue;
        foreach (record in set)
          Stack.Push(record);
        while (Stack.Count > 0)
        {
          def record = Stack.Pop();
          if (record.Index >= record.Sequence.Subrules.Length)
          {
            //Completion
            match (record)
            {
              | Simple as record =>
                foreach (x when !x.IsComplete in Records[record.StartPos])
                  when (x.CurSubrule is SimpleCall as rule when rule.RuleParser : object == record.Sequence.Parser)
                    AddRecord(textPos, textPos, x.Next());

              | Extension as record =>
                def extensibleParser = record.Subrule.RuleParser;
                foreach (x when !x.IsComplete in Records[record.ExtensibleStartPos])
                  when (x.CurSubrule is ExtensibleCall as rule when rule.RuleParser : object == extensibleParser)
                    AddRecord(textPos, textPos, x.Next());
                foreach (postfixRule in record.Subrule.RuleParser.PostfixRules)
                  when (extensibleParser.FirstPostfixRuleId <= postfixRule.RuleId)
                  {
                    def sequence = postfixRule.Reflection(postfixRule.RuleId);
                    AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, record.ExtensibleStartPos, record.Subrule));
                  }

              | Option                     as record =>
                AddRecord(textPos, textPos, record.NextRecord);

              | List                       as record =>
                when (counterLessThanMax(record.Counter, record.Subrule.Max))
                  AddRecord(textPos, textPos, ParseRecord.List(textPos, record.Subrule.Rule, 0, counter = record.Counter + 1, subrule = record.Subrule, nextRecord = record.NextRecord));
                when (record.Counter >= record.Subrule.Min)
                  AddRecord(textPos, textPos, record.NextRecord);

              | ListWithSeparatorRule      as record =>
                AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorSeparator(textPos, record.Subrule.Rule, 0, counter = record.Counter + 1, subrule = record.Subrule, nextRecord = record.NextRecord));
                when (record.Counter >= record.Subrule.Min)
                  AddRecord(textPos, textPos, record.NextRecord);

              | ListWithSeparatorSeparator as record =>
                when (counterLessThanMax(record.Counter, record.Subrule.Max))
                  AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, record.Subrule.Rule, 0, counter = record.Counter, subrule = record.Subrule, nextRecord = record.NextRecord));
                when (record.Subrule.HangingSeparator && record.Counter >= record.Subrule.Min)
                  AddRecord(textPos, textPos, record.NextRecord);
            }
          }
          else match (record.Sequence.Subrules[record.Index])
          {
            | Empty                     => ()
            | Marker                    => assert3(false)
            | RegularCall       as rule =>
              def endPos = rule.Descriptor.Parse(textPos, text);
              when (endPos >= 0)
                AddRecord(textPos, endPos, record.Next());

            | TokenString       as rule =>
              def endPos = rule.Parse(textPos, text);
              when (endPos >= 0)
                AddRecord(textPos, endPos, record.Next());

            | ExtensibleCall    as rule =>
              foreach (prefixRule in rule.RuleParser.PrefixRules)
              {
                def sequence = prefixRule.Reflection(prefixRule.RuleId);
                AddRecord(textPos, textPos, ParseRecord.Extension(textPos, sequence, 0, textPos, rule));
              }

            | SimpleCall        as rule =>
              def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
              AddRecord(textPos, textPos, ParseRecord.Simple(textPos, sequence, 0));

            | Option            as rule =>
              def nextRecord = record.Next();
              AddRecord(textPos, textPos, ParseRecord.Option(textPos, rule.Rule, 0, nextRecord));
              AddRecord(textPos, textPos, nextRecord);

            | List              as rule =>
              def nextRecord = record.Next();
              AddRecord(textPos, textPos, ParseRecord.List(textPos, rule.Rule, 0, counter = 0, subrule = rule, nextRecord = nextRecord));
              when (rule.Min == 0)
                AddRecord(textPos, textPos, nextRecord);

            | ListWithSeparator as rule =>
              def nextRecord = record.Next();
              AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, rule.Rule, 0, counter = 0, subrule = rule, nextRecord = nextRecord));
              when (rule.Min == 0)
                AddRecord(textPos, textPos, nextRecord);
          }
        }
      }
    }
  }
}
