using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;
using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public class RecoveryParser
  {
    [Record, StructuralEquality]
    public variant ParseRecord
    {
      public StartPos : int;
      public Sequence : SequenceInfo;
      public Index    : int;

      | Simple
      | Extensible
      | List                       { Counter : int; NextRecord : ParseRecord; }
      | ListWithSeparatorRule      { Counter : int; NextRecord : ParseRecord; }
      | ListWithSeparatorSeparator { Counter : int; NextRecord : ParseRecord; }

      public Next() : ParseRecord
      {
        assert3(Index < Sequence.Subrules.Length);
        match (this)
        {
          | Simple                          => ParseRecord.Simple                    (StartPos, Sequence, Index + 1)
          | Extensible                      => ParseRecord.Extensible                (StartPos, Sequence, Index + 1)
          | List                       as r => ParseRecord.List                      (StartPos, Sequence, Index + 1, r.Counter, r.NextRecord)
          | ListWithSeparatorRule      as r => ParseRecord.ListWithSeparatorRule     (StartPos, Sequence, Index + 1, r.Counter, r.NextRecord)
          | ListWithSeparatorSeparator as r => ParseRecord.ListWithSeparatorSeparator(StartPos, Sequence, Index + 1, r.Counter, r.NextRecord)
        }
      }
    }

    private Records     : array[SCG.HashSet[ParseRecord]];
    private ParseResult : ParseResult;
    private Stack       : SCG.Stack[ParseRecord];

    public this(length : int, parseResult : ParseResult)
    {
      Records     = array(length + 1);
      ParseResult = parseResult;
      Stack       = SCG.Stack(50);
    }

    private AddRecord(curPos : int, nextPos : int, record : ParseRecord) : void
    {
      mutable set = Records[nextPos];
      when (set == null)
      {
        set = SCG.HashSet();
        Records[nextPos] = set;
      }
      when (set.Add(record) && curPos == nextPos)
        Stack.Push(record);
    }

    public Parse(seq : SequenceInfo) : void
    {
      def counterLessThanMax(counter: int, max : Nullable[int]) : bool
      {
        !max.HasValue || counter < max.GetValueOrDefault()
      }

      def text = ParseResult.Text;
      AddRecord(0, 0, ParseRecord(0, seq, 0));
      Stack.Clear();
      for (mutable textPos = 0; textPos < Records.Length; ++textPos)
      {
        def set = Records[textPos];
        when (set == null)
          continue;
        foreach (record in set)
          Stack.Push(record);
        while (Stack.Count > 0)
        {
          def record = Stack.Pop();
          if (record.Index >= record.Sequence.Subrules.Length)
          {
            //Completion
            foreach (x when x.Index < x.Sequence.Subrules.Length in Records[record.StartPos])
            {
              match (x.Sequence.Subrules[x.Index])
              {
                | Empty
                | RegularCall
                | TokenString => ()
                | Marker                    => assert3(false)
                | ExtensibleCall   as rule =>
                  foreach (prefixRule in rule.RuleParser.PrefixRules)
                  {
                    def sequence = prefixRule.Reflection(prefixRule.RuleId);
                    when (record.Sequence : object == sequence)
                      AddRecord(textPos, textPos, x.Next());
                  }

                | SimpleCall       as rule =>
                  def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
                  when (record.Sequence : object == sequence)
                    AddRecord(textPos, textPos, x.Next());

                | Option           as rule =>
                  when (record.Sequence : object == rule.Rule)
                    AddRecord(textPos, textPos, x.Next());

                | List             as rule =>
                  when (record.Sequence : object == rule.Rule)
                  when (record is ParseRecord.List as lst)
                  {
                    when (counterLessThanMax(lst.Counter, rule.Max))
                      AddRecord(textPos, textPos, ParseRecord.List(textPos, rule.Rule, 0, counter = lst.Counter + 1, nextRecord = lst.NextRecord));
                    when (lst.Counter >= rule.Min)
                      AddRecord(textPos, textPos, lst.NextRecord);
                  }

                | ListWithSeparator as rule =>
                  if (record.Sequence : object == rule.Rule)
                  {
                    when (record is ParseRecord.ListWithSeparatorRule as ruleRecord)
                    {
                      AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorSeparator(textPos, rule.Rule, 0, counter = ruleRecord.Counter + 1, nextRecord = ruleRecord.NextRecord));
                      when (ruleRecord.Counter >= rule.Min)
                        AddRecord(textPos, textPos, ruleRecord.NextRecord);
                    }
                  }
                  else when (record.Sequence : object == rule.Separator)
                  {
                    when (record is ParseRecord.ListWithSeparatorSeparator as separatorRecord)
                    {
                      when (counterLessThanMax(separatorRecord.Counter, rule.Max))
                        AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, rule.Rule, 0, counter = separatorRecord.Counter, nextRecord = separatorRecord.NextRecord));
                      when (rule.HangingSeparator && separatorRecord.Counter >= rule.Min)
                        AddRecord(textPos, textPos, separatorRecord.NextRecord);
                    }
                  }
              }
            }
          }
          else match (record.Sequence.Subrules[record.Index])
          {
            | Empty                     => ()
            | Marker                    => assert3(false)
            | RegularCall       as rule =>
              def endPos = rule.Descriptor.Parse(textPos, text);
              when (endPos >= 0)
                AddRecord(textPos, endPos, record.Next());

            | TokenString       as rule =>
              def endPos = rule.Parse(textPos, text);
              when (endPos >= 0)
                AddRecord(textPos, endPos, record.Next());

            | ExtensibleCall    as rule =>
              foreach (prefixRule in rule.RuleParser.PrefixRules)
              {
                def sequence = prefixRule.Reflection(prefixRule.RuleId);
                AddRecord(textPos, textPos, ParseRecord.Extensible(textPos, sequence, 0));
              }

            | SimpleCall        as rule =>
              def sequence = rule.RuleParser.Reflection(rule.RuleParser.RuleId);
              AddRecord(textPos, textPos, ParseRecord.Simple(textPos, sequence, 0));

            | Option            as rule =>
              AddRecord(textPos, textPos, ParseRecord.Simple(textPos, rule.Rule, 0));
              AddRecord(textPos, textPos, record.Next());

            | List              as rule =>
              def nextRecord = record.Next();
              AddRecord(textPos, textPos, ParseRecord.List(textPos, rule.Rule, 0, counter = 0, nextRecord = nextRecord));
              when (rule.Min == 0)
                AddRecord(textPos, textPos, nextRecord);

            | ListWithSeparator as rule =>
              def nextRecord = record.Next();
              AddRecord(textPos, textPos, ParseRecord.ListWithSeparatorRule(textPos, rule.Rule, 0, counter = 0, nextRecord = nextRecord));
              when (rule.Min == 0)
                AddRecord(textPos, textPos, nextRecord);
          }
        }
      }
    }
  }
}
