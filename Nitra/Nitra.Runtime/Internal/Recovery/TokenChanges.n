using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal.Recovery
{
  [Record]
  public struct TokenChanges
  {
    public static Fail : TokenChanges = TokenChanges(int.MaxValue, int.MaxValue);
    
    public Inserted : int;
    public Deleted  : int;
    
    public IsFail     : bool { get { Inserted == int.MaxValue } };
    public HasChanges : bool { get { Inserted > 0 || Deleted > 0 } }
    
    public static Min(x : TokenChanges, y : TokenChanges) : TokenChanges { if (x >= y) y else x }
    public static Max(x : TokenChanges, y : TokenChanges) : TokenChanges { if (x >= y) x else y }
    
    public static @<(x : TokenChanges, y : TokenChanges) : bool { y > x }
    
    public static @>(x : TokenChanges, y : TokenChanges) : bool
    {
      def a = x.Inserted + x.Deleted;
      def b = y.Inserted + y.Deleted; 
      if (a > b)
        true
      else if (a == b)
        x.Inserted > y.Inserted
      else
        false
    }
    
    public static @<=(x : TokenChanges, y : TokenChanges) : bool { y >= x }
    
    public static @>=(x : TokenChanges, y : TokenChanges) : bool
    {
      def a = x.Inserted + x.Deleted;
      def b = y.Inserted + y.Deleted; 
      if (a > b)
        true
      else if (a == b)
        x.Inserted >= y.Inserted
      else
        false
    }

    public static @!=(x : TokenChanges, y : TokenChanges) : bool { !(x == y) }
    
    public static @==(x : TokenChanges, y : TokenChanges) : bool
    {
      def a = x.Inserted + x.Deleted;
      def b = y.Inserted + y.Deleted; 
      if (a == b)
        x.Inserted == y.Inserted
      else
        false
    }

    public override Equals(obj : object) : bool
    {
      if (obj is TokenChanges as other)
        other == this
      else
        false
    }
    
    public override GetHashCode() : int { Inserted ^ (Deleted << 3) }

    public override ToString() : string
    {
      if (Inserted > 0 && Deleted > 0)
        $"(+$Inserted/-$Deleted)"
      else if (Inserted > 0)
        "+" + Inserted
      else if (Deleted > 0)
        "-" + Deleted
      else
        "0"
    }
  }
}
