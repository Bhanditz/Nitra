using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal.Recovery
{
  [Record]
  public struct ParsedStateInfo
  {
    public State : int;
    public Size  : int;

    public override ToString() : string
    {
      $"State=$State; Size=$Size"
    }
  }

  public interface IRecoveryRuleParser
  {
    IsStateCanParseEmptyString   (state : int) : bool;
    IsVoidState                  (state : int) : bool;
    IsStartState                 (state : int) : bool;
    GetStartState                (state : int) : int;
    IsLoopSeparatorStart         (state : int) : bool;
    IsLoopSeparator              (state : int) : bool;
    IsLoopBody                   (state : int) : bool;
    CodeForState                 (state : int) : string;
    CodeForStates                (startState : int, endState : int, skipOptionalStates : bool) : array[string];
    GetNextState                 (state : int) : int;
    GetOffsetForState            (state : int) : int;
    GetMandatoryTokensForState   (state : int) : int;

    GetLoopBodyForSeparator(separatorId : int, bodyId : out int, firstState : out int) : bool;

    GetRuleParserForState(state : int) : IRecoveryRuleParser * int;

    IsTokenRule : bool { get; }

    StartState      : int    { get; }
    Code            : string { get; }
    CodeWithStates  : string { get; }
    RuleName        : string { get; }
  }
}
