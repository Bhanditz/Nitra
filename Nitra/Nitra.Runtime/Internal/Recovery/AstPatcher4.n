using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Collections;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

using Hashtable = Nemerle.Collections.Hashtable;
using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public class AstPatcher4
  {
    [Record]
    private class SubrulesRange
    {
      public BeginIndex : int;
      public EndIndex   : int;
    }

    public          ParseResult : ParseResult { get; private set; }
    public          StateEndChanges    : Hashtable[ParsedSequence * int * int, TokenChanges]      { get; default Hashtable(); }
                                       
    private         _toProcess         : SCG.Queue[ParsedSequence * int] = SCG.Queue();
    private         _startSeq          : ParsedSequence;
    private         _recoveryParser    : RecoveryParser;
    private         _deletedTokens     : Dictionary[ParsedSequenceAndSubrule, bool];
    private         _allSubrules       : List[ParsedSubrule] = List();
    private mutable _subruleChanges    : array[TokenChanges];
    private         _subruleEndsAt     : array[Hashtable[ParsedSequence, SubrulesRange]];
    private mutable _iteration         : int = 0;
    private mutable _recursive         : bool = false;
    private mutable _updated           : bool = false;

    public GetNodeChanges(seq : ParsedSequence, subruleState : int, subruleStartPos : int) : TokenChanges
    {
      if (subruleState < 0)
        seq.Ends[subruleStartPos]
      else if (seq.StartPos == subruleStartPos && seq.ParsingSequence.States[subruleState].IsStart)
        TokenChanges()
      else
      {
        mutable min = TokenChanges.Fail;
        foreach (prevState in seq.ParsingSequence.States[subruleState].Prev)
        {
          mutable value;
          when (StateEndChanges.TryGetValue((seq, prevState, subruleStartPos), out value))
            min = TokenChanges.Min(min, value);
        }
        min
      }
    }

    public GetChangesForSubrule(seq : ParsedSequence, subrule : ParsedSubrule) : TokenChanges
    {
      def range = _subruleEndsAt[subrule.End][seq];
      for (mutable i = range.BeginIndex; i < range.EndIndex; ++i)
        when (_allSubrules[i] == subrule)
          return _subruleChanges[i];
      TokenChanges.Fail;
    }

    public this(startSeq : ParsedSequence, recoveryParser : RecoveryParser, deletedTokens : Dictionary[ParsedSequenceAndSubrule, bool])
    {
      _startSeq        = startSeq;
      _recoveryParser  = recoveryParser;
      _deletedTokens   = deletedTokens;
      this.ParseResult = recoveryParser.ParseResult;
      _subruleEndsAt   = array(this.ParseResult.Text.Length + 1);
    }

    public PatchAst() : void
    {
      def time = Diagnostics.Stopwatch.StartNew();
      FindBestPath();
      time.Stop();
      _ = time.Elapsed;
      DoPatchAst();
    }

    private DoPatchAst() : void
    {
      ParseSequence(_startSeq, this.ParseResult.Text.Length);
      while (_toProcess.Count > 0)
        ParseSequence(_toProcess.Dequeue());
    }

    private AddRecoveredSequence(key : int * int * ParsingSequence, subrules : array[ParsedSubrule * TokenChanges], _tokenChanges : TokenChanges) : void
    {//TODO: Optimize
      def (_startPos, endPos, parsingSequence) = key;
      def states = parsingSequence.States;

      def allFlattenSubrules = List();
      def flattenSubrules    = List();
      def walk(index)
      {
        mutable walkCalled = false;
        def (subrule, _) = subrules[index];
        def state = states[subrule.State];
        flattenSubrules.Add(subrule);

        foreach ((nextSubrule, _) in subrules with nextIndex)
          when (subrule.End == nextSubrule.Begin && state.Next.Contains(nextSubrule.State))
          {
            walk(nextIndex);
            walkCalled = true;
          }

        unless (walkCalled)
        {
          def positions = array(flattenSubrules.Count + 1);
          foreach (subrule in flattenSubrules with i)
            positions[i] = ParseResult.SubruleStart(subrule.Begin, subrule.State);
          positions[flattenSubrules.Count] = ParseResult.SubruleStart(endPos, -1);
          allFlattenSubrules.Add(positions);
        }

        flattenSubrules.RemoveAt(flattenSubrules.Count - 1);
      }

      def recoveredSequence = if (subrules.Length == 0)
      {
        def index = ParseResult.AddRecoveredSubrule(array[ParseResult.SubruleStart(endPos, -1)], parsingSequence);
        ParseResult.RecoveredSequence.Unambiguous(subrules, index);
      }
      else
      {
        walk(0);
        if (allFlattenSubrules.Count == 1)
        {
          def index = ParseResult.AddRecoveredSubrule(allFlattenSubrules[0], parsingSequence);
          ParseResult.RecoveredSequence.Unambiguous(subrules, index);
        }
        else
        {
          def indexes = array(allFlattenSubrules.Count);
          foreach (subrules in allFlattenSubrules with i)
            indexes[i] = ParseResult.AddRecoveredSubrule(subrules, parsingSequence);
          ParseResult.RecoveredSequence.Ambiguous(subrules, indexes);
        }
      }

      this.ParseResult.RecoveredSequences.Add(key, recoveredSequence);
    }

    public ParseSequence(seq : ParsedSequence, end : int) : void
    {
      def makeSequence(seq : ParsedSequence, mutable end : int) : void
      {
        def key = (seq.StartPos, end, seq.ParsingSequence);
        unless (this.ParseResult.RecoveredSequences.Contains(key))
        {
          def subrules = GetSubrulesAndChanges(seq, end);
          foreach ((subrule, changes) in _subrules)
          {
            def sequences = seq.GetSequencesForSubrule(subrule).ToArray();
            if (sequences.Length > 0)
            {
              assert3(sequences.Length == 1);
              assert(sequences[0].Ends[subrule.End] == changes);
              _toProcess.Enqueue(sequences[0], subrule.End);
            }
            else when (_deletedTokens.ContainsKey(ParsedSequenceAndSubrule(seq, subrule)))
            {
              def sequence = match (seq.ParsingSequence.States[0])
              {
                | ParsingState.Subsequence as state => state.Sequence
                | ParsingState.List        as state => state.Sequence
                | _                                 => assert(false);
              }
              def key = (subrule.Begin, subrule.End, sequence);
              AddRecoveredSequence(key, array[], TokenChanges(0, 1));
            }
          }
          AddRecoveredSequence(key, subrules, seq.Ends[end]);
        }
      }

      match (seq.ParsingSequence)
      {
        | Sequence =>
          makeSequence(seq, end);

        | Extensible =>
          def key = (seq.StartPos, end, seq.ParsingSequence);
          when (this.ParseResult.RecoveredSequences.Contains(key))
            return;
          def filteredSubrules = List();
          foreach ((subrule, changes) in GetSubrulesAndChanges(seq, end) with i)
          {
            when (i > 0 && subrule.Begin == subrule.End)
              continue;

            filteredSubrules.Add((subrule, changes));

            foreach (sequence in seq.GetSequencesForSubrule(subrule))
            {
              mutable seqChanges;
              when (sequence.Ends.TryGetValue(subrule.End, out seqChanges))
              when (seqChanges == changes)
                makeSequence(sequence, subrule.End);
            }
          }
          AddRecoveredSequence(key, filteredSubrules.ToArray(), seq.Ends[end]);
      }
    }

    private _subrules : List[ParsedSubrule * TokenChanges] = List();
    private GetSubrulesAndChanges(seq : ParsedSequence, mutable end : int) : array[ParsedSubrule * TokenChanges]
    {
      _subrules.Clear();
      mutable changes = seq.Ends[end];
      mutable state = seq.ParsingSequence.EndStates.Where(endState =>
      {
        mutable stateChanges;
        if (StateEndChanges.TryGetValue((seq, endState, end), out stateChanges))
          stateChanges == changes
        else
          false
      }).Max();

      endSearch:
      {
        while (true) continueSearch:
        {
          def range = _subruleEndsAt[end][seq];
          def prevStates = seq.ParsingSequence.States[state].Prev;
          for (mutable i = range.BeginIndex; i < range.EndIndex; ++i)
          {
            def subrule = _allSubrules[i];
            when (subrule.State != state)
              continue;
            def subruleChanges = _subruleChanges[i];
            when (subrule.Begin == seq.StartPos && seq.ParsingSequence.States[subrule.State].IsStart && subruleChanges == changes)
            {
              _subrules.Add(subrule, subruleChanges);
              endSearch();
            }
            foreach (prevState in prevStates)
            {
              mutable prevChanges;
              when (StateEndChanges.TryGetValue((seq, prevState, subrule.Begin), out prevChanges))
              when (prevChanges + subruleChanges == changes)
              {
                end     = subrule.Begin;
                changes = prevChanges;
                state   = prevState;
                _subrules.Add(subrule, subruleChanges);
                continueSearch();
              }
            }
          }
          assert3(false);
        }
      }
      _subrules.Reverse();
      _subrules.ToArray();
    }

    private static SubrulesComparison : Comparison[ParsedSubrule] = (l, r) =>
    {
      res:
        {
          mutable c;
          // Группируем по хвостамю
          c = l.End.CompareTo(r.End); when (c != 0) res(c);
          // Двигаем пустылки назад.
          c = l.Begin.CompareTo(r.Begin); when (c != 0) res(c);
          // Сдвигаем большие состояния в конец.
          // При текущей форме графа это позволяет произвести рассчёт за одн проход.
          // Если граф состояний парсинга изменится для пустышек может понадоится итерировать до фиксированной точки.
          l.State.CompareTo(r.State);
        }
    };

    public AddSubrulesRange(seq : ParsedSequence, begin : int, end : int) : void
    {
      def pos = _allSubrules[begin].End;
      when (_subruleEndsAt[pos] == null)
        _subruleEndsAt[pos] = Hashtable();
      _subruleEndsAt[pos].Add(seq, SubrulesRange(begin, end));//отрицательный begin означет что диапазон ещё не обсчитан
    }

    public FindBestPath() : void
    {
      def tmpSubrules = List();
      foreach (seq in _recoveryParser.Sequences.Values)
      {
        when (seq.ParsedSubrules.Count == 0)
          continue;
        tmpSubrules.Clear();
        tmpSubrules.AddRange(seq.ParsedSubrules);
        tmpSubrules.Sort(SubrulesComparison);
        mutable end   = _allSubrules.Count;
        mutable begin = end;
        _allSubrules.AddRange(tmpSubrules);
        for (; end < _allSubrules.Count; ++end)
          when (_allSubrules[begin].End != _allSubrules[end].End)
          {
            AddSubrulesRange(seq, begin, end);
            begin = end;
          }
        AddSubrulesRange(seq, begin, end);
      }
      _subruleChanges = array(_allSubrules.Count);

      foreach (ranges when ranges != null in _subruleEndsAt)
      {
        _recursive = false;
        do
        {
          ++_iteration;
          _updated = false;
          foreach (kv in ranges)
            CalcSubrulesRange(kv.Key, kv.Value);
        }//Если нет рекурсии то рассчёт происходит за один проход.
        while (_updated && _recursive);
      }

      foreach (end in _startSeq.Ends.Keys.ToArray())
      {
        ++_iteration;
        _ = CalcSequenceEndChanges(_startSeq, end);
      }
    }

    private CalcSequenceEndChanges(parsingSequence : ParsingSequence, begin : int, end : int) : TokenChanges
    {
      mutable seq;
      if (_recoveryParser.Sequences.TryGetValue((begin, parsingSequence), out seq))
        CalcSequenceEndChanges(seq, end);
      else
        TokenChanges(0, 0);//Нет последовательности. Значит было успешно разобрано основным парсером.
    }

    private CalcSequenceEndChanges(seq : ParsedSequence, end : int) : TokenChanges
    {
      mutable changes;
      unless (seq.Ends.TryGetValue(end, out changes))
        return TokenChanges.Fail;

      when (seq.Iteration == _iteration)
        return changes;

      //обработка рекурсии
      when (seq.Iteration > _iteration)
      {
        _recursive = true;
        return changes;
      }

      seq.Iteration = _iteration + 1;

      def oldChanges = changes;
      def range = _subruleEndsAt[end][seq];
      CalcSubrulesRange(seq, range);
      foreach (endState in seq.ParsingSequence.EndStates)
      {
        mutable stateChanges;
        when (StateEndChanges.TryGetValue((seq, endState, end), out stateChanges))
          changes = TokenChanges.Min(changes, stateChanges);
      }
      seq.Ends[end] = changes;
      seq.Iteration = _iteration;
      _updated = _updated || oldChanges != changes;
      changes
    }

    private CalcSubrulesRange(seq : ParsedSequence, range : SubrulesRange) : void
    {
      for (mutable i = range.BeginIndex; i < range.EndIndex; ++i)
      {
        def subrule = _allSubrules[i];
        def state = seq.ParsingSequence.States[subrule.State];

        def prevChanges =
          if (seq.StartPos == subrule.Begin && state.IsStart)
            // Последовательность всегда начинается без изменений. Предыдущие изменения суммируются в момент вызова последовательности
            // ибо последовательность может быть вызвана из разных мест и соответственно иметь разное число предыдущих изменений.
            TokenChanges(0, 0)
          else
          {
            mutable minChanges = TokenChanges.Fail;
            foreach (prevState in state.Prev)
            {
              mutable curChanges;
              def key = (seq, prevState, subrule.Begin);
              when (StateEndChanges.TryGetValue(key, out curChanges))
                minChanges = TokenChanges.Min(curChanges, minChanges);
            }
            minChanges
          };

        def subruleChanges = CalcSubruleTokenChanges(seq, subrule, state);
        _subruleChanges[i] = subruleChanges;

        def key = (seq, subrule.State, subrule.End);
        def newChanges = prevChanges + subruleChanges;
        mutable oldChanges;
        unless (StateEndChanges.TryGetValue(key, out oldChanges))
          oldChanges = TokenChanges.Fail;
        StateEndChanges[key] = TokenChanges.Min(newChanges, oldChanges);
      }
    }

    private CalcSubruleTokenChanges(seq : ParsedSequence, subrule : ParsedSubrule, state : ParsingState) : TokenChanges
    {
      if (_deletedTokens.ContainsKey(ParsedSequenceAndSubrule(seq, subrule)))
        TokenChanges(0, 1);
      else match (state)
      {
        | Scan when subrule.IsEmpty => TokenChanges(state.Subrule.MandatoryTokenCount, 0);
        | Scan | Predicate          => TokenChanges(0, 0)
        | Simple            as state1 with parsingSequence = state1.RuleParser.ParsingSequence
        | Extensible        as state2 with parsingSequence = state2.RuleParser.ParsingSequence
        | List              as state3 with parsingSequence = state3.Sequence
        | ListWithSeparator as state4 with parsingSequence = state4.Sequence
        | Subsequence       as state5 with parsingSequence = state5.Sequence =>
          if (subrule.IsEmpty)
          {
            def changes = TokenChanges(parsingSequence.MandatoryTokenCount, 0);
            mutable innerSeq;
            mutable oldChanges;
            when (_recoveryParser.Sequences.TryGetValue((subrule.Begin, parsingSequence), out innerSeq))
            when (innerSeq.Ends.TryGetValue(subrule.End, out oldChanges))
            when (oldChanges != changes)
            {
              _updated = true;
              innerSeq.Ends[subrule.End] = changes;
            }
            changes
          }
          else
            CalcSequenceEndChanges(parsingSequence, subrule.Begin, subrule.End);

        | ExtensionPrefix  as prefix when subrule.IsEmpty => TokenChanges(prefix.RuleParser.MandatoryTokenCount, 0)
        | ExtensionPrefix  as prefix =>
          mutable minChanges = TokenChanges.Fail;
          foreach (ruleParser in prefix.RuleParser.PrefixRules)
            minChanges = TokenChanges.Min(minChanges, CalcSequenceEndChanges(ruleParser.ParsingSequence, subrule.Begin, subrule.End));
          minChanges

        | ExtensionPostfix when subrule.IsEmpty => TokenChanges(0, 0)
        | ExtensionPostfix as postfix =>
          mutable minChanges = TokenChanges.Fail;
          foreach (ruleParser when postfix.RuleParser.FirstPostfixRuleId <= ruleParser.RuleId in postfix.RuleParser.PostfixRules)
            minChanges = TokenChanges.Min(minChanges, CalcSequenceEndChanges(ruleParser.ParsingSequence, subrule.Begin, subrule.End));
          minChanges
      }
    }

    public Visualize() : void
    {
      def dir = Path.Combine(Path.GetTempPath(), "Patch");
      when (Directory.Exists(dir))
      {
        Directory.Delete(dir, recursive=true);
        _ = Directory.CreateDirectory(dir);
      }
        
      def files = SCG.List();
      
      def startSeq = _recoveryParser.StartSequence;
      
      foreach (((start, end, parsingSeq), recSeq) in  this.ParseResult.RecoveredSequences.KeyValuePairs)
        ToDot(files, start, end, parsingSeq, recSeq);
      
            
      when (files.Count > 0)
      {
        def file = startSeq.ParsingSequence.GetFilePath("Patch", 0, this.ParseResult.Text.Length);
        X.ConvertToDot(files);
      _ = Process.Start(file + ".svg");
      }
    }
    
    ToDot(files : SCG.List[string], start : int, end : int, parsingSeq : ParsingSequence, recSeq : ParseResult.RecoveredSequence) : void
    {
      def file = parsingSeq.GetFilePath("Patch", start, end);
      files.Add(file);

      def parseResult = this.ParseResult;
      def nodes = SCG.List();
      def edges = SCG.List();
      
      def graph = parsingSeq.MakeGraph(recSeq.AllSubrules, end);
      
      foreach (((stateIndex, pos) as node, edges2) in graph.KeyValuePairs)
      {
        def border  = if (stateIndex <= 0)               " peripheries=2" else "";
        def shape   = if (stateIndex <  0)               " shape=box"     else "";
        def bkcolor = if (stateIndex <  0 && pos == end) " color=green"   else "";;//if (isValidNode(nodeData, node)) " color=green"
        nodes.Add($<#$(parsingSeq.Name(node)) [label="$(parsingSeq.Label(node))"$border$shape$bkcolor]#>);
        
        foreach (((endStateIndex, endPos), changes) in edges2)
        {
          def len = endPos - pos;
          def text  = 
            if (len == 0)
              "Ins: " + changes
            else
            {
              def str = X.EscapeString(len + ":«" + parseResult.Text.Substring(pos, len) + "»");
              if (changes.HasChanges)
                changes + " " + str
              else
                str
            };
            
          def subrule = ParsedSubrule(pos, endPos, stateIndex);
          def subSeqs = parsingSeq.GetSequencesForSubrule(subrule, _recoveryParser)
              .Where(seq => this.ParseResult.RecoveredSequences.ContainsKey((pos, endPos, seq.ParsingSequence))).ToArray();
              
          def to = (endStateIndex, endPos);
          def style = "";//(if (skip)  " fontcolor=red" else "")
                    //+ (if (isFromValid && isValidNode(nodeData, to)) " color=green" else "");
          
          match (subSeqs.Length)
          {
            | 0 => edges.Add($<#$(parsingSeq.Name(node)) -> $(parsingSeq.Name(to)) [label="$text"$style$(if (subrule.IsEmpty) "" else " fontcolor=purple")]#>);
            | 1 =>
              def subSeq = subSeqs[0];
              def url = subSeq.GetUrl("Patch", subSeq.StartPos, endPos);
              def text2 = if (parsingSeq is ParsingSequence.Extensible) subSeq.ParsingSequence.RuleName + " - " + text else text;
              edges.Add($<#$(parsingSeq.Name(node)) -> $(parsingSeq.Name(to)) [label="$text2"$style URL="$url"]#>);
              
            | _ => // делаем промежуточный файл
              assert2(parsingSeq is ParsingSequence.Extensible);
              def edges2 = SCG.List();
              
              foreach (subSeq in subSeqs)
              {
                def url = subSeq.GetUrl("Patch", subSeq.StartPos, endPos);
                edges2.Add($<#<a href="$url" style="text-decoration: initial; font-size: 20px;">$(subSeq.ParsingSequence.RuleName)</a>#>);
              }
              //GetFilePathForExtensible
              def htmlContent = $<#
  <?xml version="1.0" encoding="utf-8"?>
  <html>
    <head>
      <title>$(parsingSeq.RuleName)</title>
      <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    </head>
    <body>
    <pre>
    $text
  
  ..$(edges2; "\r\n")
    </pre>
    </body>
  </html> #>;
              def htmlPath = parsingSeq.GetFilePathForExtensible("Patch", start, endPos);
              File.WriteAllText(htmlPath, htmlContent);
              
              def url = parsingSeq.GetUrlForExtensible("Patch", start, endPos);
              def text2 = parsingSeq.RuleName + " - " + text;
              edges.Add($<#$(parsingSeq.Name(node)) -> $(parsingSeq.Name(to)) [label="$text2"$style URL="$url"]#>);
          }
        }
      }
            
      def graphLabel = parsingSeq.GraphLabel() + "\r\n" + X.DotEscape(parseResult.DebugText) + "\r\n\r\n";

      def content = $<#
        digraph RecoveryParser
        {
          rankdir=LR;
          compound=true;
          label="$graphLabel";
          fontname="Consolas";
    
          ..$(nodes; "\r\n          ")
    
          ..$(edges; "\r\n          ")
        }
      #>;
      
      File.WriteAllText(file, content);
    }
  }
}
