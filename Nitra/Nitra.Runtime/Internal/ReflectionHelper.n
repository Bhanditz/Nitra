using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  internal module ReflectionHelper
  {
    public GetBaseParseTreeType(ruleDescriptor : RuleDescriptor) : Type
    {
      | SimpleRuleDescriptor
      | ExtensibleRuleDescriptor =>
        def astTypeName = ruleDescriptor.Grammar.FullName + "ParseTree+" + ruleDescriptor.Name.Replace('.', '+');
        def astType     = ruleDescriptor.Grammar.GetType().Assembly.GetType(astTypeName);
        assert2(astType != null);
        astType

      | _ => assert3(false)
    }

    public GetParseTreeType(ruleDescriptor : RuleDescriptor) : Type
    {
      | SimpleRuleDescriptor =>
        def parseTreeTypeName = ruleDescriptor.Grammar.FullName + "ParseTree+" + ruleDescriptor.ParseTreeName.Replace('.', '+') + "+__Parsed__Node";
        def parseTreeType     = ruleDescriptor.Grammar.GetType().Assembly.GetType(parseTreeTypeName);
        assert2(parseTreeType != null);
        parseTreeType

      | ExtensionRuleDescriptor =>
        def nameParts = ruleDescriptor.ParseTreeName.Split(array['.']);
        nameParts[nameParts.Length - 1] = "__Parsed__" + nameParts[nameParts.Length - 1];
        def parseTreeTypeName = ruleDescriptor.Grammar.FullName + "ParseTree+" + string.Join("+", nameParts);
        def parseTreeType     = ruleDescriptor.Grammar.GetType().Assembly.GetType(parseTreeTypeName);
        assert2(parseTreeType != null);
        parseTreeType

      | _ => assert3(false)
    }

    public GetExtensionParseTreeType(ruleDescriptor : ExtensionRuleDescriptor) : Type
    {
      def nameParts   = ruleDescriptor.ParseTreeName.Split(array['.']);
      def astTypeName = ruleDescriptor.Grammar.FullName + "ParseTree+" + string.Join("+", nameParts);
      def astType     = ruleDescriptor.Grammar.GetType().Assembly.GetType(astTypeName);
      assert2(astType != null);
      astType
    }
  }
}
