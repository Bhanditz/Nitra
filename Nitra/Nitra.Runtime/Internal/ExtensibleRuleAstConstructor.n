using Nitra;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;

namespace Nitra.Internal
{
  public module ExtensibleRuleAstConstructor
  {
    public Create[T](pos : ref int, parseResult : ParseResult, bindingPower : int, ruleDescriptor : ExtensibleRuleDescriptor, astFactory : IExtensibleRuleAstFactory[T]) : T
    {
      def ruleParser = parseResult.RuleParser.Grammar.GetExtensibleRuleParser(ruleDescriptor, bindingPower);

      def prefixWalkersOffset   = if (ruleParser.PrefixRules.Length > 0)  ruleParser.PrefixRules[0].RuleId  else 0; //FIXME empty array
      def postfixWalkersOffset  = if (ruleParser.PostfixRules.Length > 0) ruleParser.PostfixRules[0].RuleId else 0; //FIXME empty array

      mutable newPos;
      mutable ast = ruleParser.FindFirstPrefix(ref pos, parseResult);
      mutable prefixValue;
      def prefixStartPos = pos;
      if (ast > 0)
      {
        mutable extensionParser = ruleParser.ParserData.PrefixParsers[(parseResult.ast[ast + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.AstMask.Id) - prefixWalkersOffset];
        newPos = pos;
        prefixValue = astFactory.CreatePrefix(ref newPos, ast, extensionParser, parseResult);
        ast = ruleParser.FindNextPrefix(ast, parseResult);
        when (ast > 0)
        {
          def firstNewPos = newPos;
          def ambiguitys = System.Collections.Generic.List();
          ambiguitys.Add(extensionParser, prefixValue);
          while (ast > 0)
          {
            def nextExtensionParser = ruleParser.ParserData.PrefixParsers[(parseResult.ast[ast + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.AstMask.Id) - prefixWalkersOffset];
            newPos = pos;
            def _nextValue = astFactory.CreatePrefix(ref newPos, ast, nextExtensionParser, parseResult);
            assert(newPos == firstNewPos);
            ambiguitys.Add(nextExtensionParser, _nextValue);
            extensionParser = nextExtensionParser;
            ast = ruleParser.FindNextPrefix(ast, parseResult);
          }
          // prefix ambiguity
          prefixValue = astFactory.CreateAmbiguous(parseResult, ruleDescriptor, prefixStartPos, firstNewPos, ambiguitys.ToArray());
        }
        pos = newPos;
      }
      else
      {
        // missing prefix
        prefixValue = astFactory.CreateMissing(parseResult, ruleDescriptor, prefixStartPos);
      }

      mutable extensionParser;
      mutable postfixValue;
      while (pos < parseResult.Text.Length && { ast = ruleParser.FindFirstPostfix(ref pos, parseResult); ast > 0 })
      {
        extensionParser = ruleParser.ParserData.PostfixParsers[(parseResult.ast[ast + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.AstMask.Id) - postfixWalkersOffset];
        newPos = pos;
        postfixValue = astFactory.CreatePostfix(prefixValue, prefixStartPos, ref newPos, ast, extensionParser, parseResult);
        when (newPos == pos)
          break;
        ast = ruleParser.FindNextPostfix(ast, parseResult);
        when (ast > 0)
        {
          def firstNewPos = newPos;
          def ambiguitys = System.Collections.Generic.List();
          ambiguitys.Add(extensionParser, postfixValue);
          while (ast > 0)
          {
            def nextExtensionParser = ruleParser.ParserData.PostfixParsers[(parseResult.ast[ast + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.AstMask.Id) - postfixWalkersOffset];
            newPos = pos;
            def _nextValue = astFactory.CreatePostfix(prefixValue, prefixStartPos, ref newPos, ast, nextExtensionParser, parseResult);
            assert(newPos == firstNewPos);
            ambiguitys.Add(nextExtensionParser, _nextValue);
            extensionParser = nextExtensionParser;
            ast = ruleParser.FindNextPostfix(ast, parseResult);
          }
          // postfix ambiguity
          postfixValue = astFactory.CreateAmbiguous(parseResult, ruleDescriptor, pos, firstNewPos, ambiguitys.ToArray());
        }
        prefixValue = postfixValue;
        pos = newPos;
      }

      prefixValue
    }
  }
}
