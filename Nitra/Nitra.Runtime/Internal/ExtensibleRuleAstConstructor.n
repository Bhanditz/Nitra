using Nitra;
using Nitra.Runtime.Collections;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Internal
{
  public module ExtensibleRuleAstConstructor
  {
    public Create[T](startPos : int, endPos : int, parseResult : ParseResult, bindingPower : int, ruleDescriptor : ExtensibleRuleDescriptor, astFactory : IExtensibleRuleAstFactory[T]) : T
      where T : Ast
    {
      def ruleParser = parseResult.RuleParser.Grammar.GetExtensibleRuleParser(ruleDescriptor, bindingPower);

      mutable recoveredSequence;
      if (parseResult.RecoveredSequences.TryGetValue((startPos, endPos, ruleParser.ParsingSequence), out recoveredSequence))
      {
        match (recoveredSequence)
        {
          | Unambiguous(recoveredSubrulesIndex) => CreateImpl(startPos, parseResult, ruleParser, ruleDescriptor, astFactory, recoveredSubrulesIndex)
          | Ambiguous(indexes) =>
            def ambiguities = array(indexes.Length);
            foreach (recoveredSubrulesIndex in indexes with i)
              ambiguities[i] = CreateImpl(startPos, parseResult, ruleParser, ruleDescriptor, astFactory, recoveredSubrulesIndex);
            astFactory.CreateAmbiguous(ambiguities, AstAmbiguityType.Recovery);
        }
      }
      else
      {
        mutable pos = startPos;
        Create(ref pos, parseResult, bindingPower, ruleDescriptor, astFactory)
      }
    }

    private CreateImpl[T](startPos : int, parseResult : ParseResult, ruleParser : ExtensibleRuleParser, ruleDescriptor : ExtensibleRuleDescriptor, astFactory : IExtensibleRuleAstFactory[T], recoveredSubrulesIndex : int) : T
      where T : Ast
    {
      def (subruleStarts, parsingSequence) = parseResult.RecoveredSubrules[recoveredSubrulesIndex];
      def states = parsingSequence.States;

      mutable resultAst;

      for (mutable i = 0; i < subruleStarts.Length - 1; ++i)
      {
        def begin    = subruleStarts[i].Pos;
        def end      = subruleStarts[i + 1].Pos;
        def state    = states[subruleStarts[i].State];

        match (state)
        {
          | ExtensionPrefix =>
            assert(resultAst == null);

            resultAst =
              if (begin == end)
                astFactory.CreateMissing(parseResult, ruleDescriptor, begin);
              else
              {
                def prefixBuffer = LightList();

                foreach (prefix in ruleParser.PrefixRules)
                {
                  mutable prefixRecoveredSequence;
                  when (parseResult.RecoveredSequences.TryGetValue((begin, end, prefix.ParsingSequence), out prefixRecoveredSequence))
                  {
                    match (prefixRecoveredSequence)
                    {
                      | Unambiguous(recoveredSubrulesIndex) => prefixBuffer.Add(astFactory.CreatePrefix(begin, end, recoveredSubrulesIndex, prefix, parseResult))
                      | Ambiguous(indexes) =>
                        foreach (recoveredSubrulesIndex in indexes with n)
                          prefixBuffer.Add(astFactory.CreatePrefix(begin, end, recoveredSubrulesIndex, prefix, parseResult));
                    }
                  }
                }

                match (prefixBuffer.Count)
                {
                  | 0 => assert(false)
                  | 1 => prefixBuffer.FirstItem
                  | _ => astFactory.CreateAmbiguous(prefixBuffer.ToArray(), AstAmbiguityType.Prefix)
                }
              };

          | ExtensionPostfix => 
            assert(resultAst != null);

            def postfixBuffer = LightList();

            foreach (postfix when (postfix.RuleId >= ruleParser.FirstPostfixRuleId) in ruleParser.PostfixRules)
            {
              mutable postfixRecoveredSequence;
              when (parseResult.RecoveredSequences.TryGetValue((begin, end, postfix.ParsingSequence), out postfixRecoveredSequence))
              {
                match (postfixRecoveredSequence)
                {
                  | Unambiguous(recoveredSubrulesIndex) => postfixBuffer.Add(astFactory.CreatePostfix(resultAst, startPos, begin, end, recoveredSubrulesIndex, postfix, parseResult))
                  | Ambiguous(indexes) =>
                    foreach (recoveredSubrulesIndex in indexes with n)
                      postfixBuffer.Add(astFactory.CreatePrefix(begin, end, recoveredSubrulesIndex, postfix, parseResult))
                }
              }
            }

            resultAst =
              match (postfixBuffer.Count)
              {
                | 0 => assert(false)
                | 1 => postfixBuffer.FirstItem
                | _ => astFactory.CreateAmbiguous(postfixBuffer.ToArray(), AstAmbiguityType.Postfix)
              };

          | _ => assert(false, "ExtensionPrefix or ExtensionPostfix expected");
        }
      }

      assert(resultAst != null);
      resultAst
    }

    public Create[T](pos : ref int, parseResult : ParseResult, bindingPower : int, ruleDescriptor : ExtensibleRuleDescriptor, astFactory : IExtensibleRuleAstFactory[T]) : T
    {
      def ruleParser = parseResult.RuleParser.Grammar.GetExtensibleRuleParser(ruleDescriptor, bindingPower);

      mutable newPos;
      mutable ast = ruleParser.FindFirstPrefix(ref pos, parseResult);
      mutable prefixValue;
      def prefixStartPos = pos;
      if (ast > 0)
      {
        def prefixParserOffset = GetExtensionParserOffset(ruleParser.PrefixRules);

        mutable extensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PrefixParsers, ast, prefixParserOffset);
        newPos = pos;
        prefixValue = astFactory.CreatePrefix(ref newPos, ast, extensionParser, parseResult);
        ast = ruleParser.FindNextPrefix(ast, parseResult);
        when (ast > 0)
        {
          def firstNewPos = newPos;
          def ambiguitys = SCG.List();
          ambiguitys.Add(prefixValue);
          while (ast > 0)
          {
            def nextExtensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PrefixParsers, ast, prefixParserOffset);
            newPos = pos;
            def _nextValue = astFactory.CreatePrefix(ref newPos, ast, nextExtensionParser, parseResult);
            assert(newPos == firstNewPos);
            ambiguitys.Add(_nextValue);
            extensionParser = nextExtensionParser;
            ast = ruleParser.FindNextPrefix(ast, parseResult);
          }
          // prefix ambiguity
          prefixValue = astFactory.CreateAmbiguous(ambiguitys.ToArray(), AstAmbiguityType.Prefix);
        }
        pos = newPos;
      }
      else
      {
        // missing prefix
        prefixValue = astFactory.CreateMissing(parseResult, ruleDescriptor, prefixStartPos);
      }

      def postfixParserOffset = GetExtensionParserOffset(ruleParser.PostfixRules);
      mutable extensionParser;
      mutable postfixValue;
      while (pos < parseResult.Text.Length && { ast = ruleParser.FindFirstPostfix(ref pos, parseResult); ast > 0 })
      {
        extensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PostfixParsers, ast, postfixParserOffset);
        newPos = pos;
        postfixValue = astFactory.CreatePostfix(prefixValue, prefixStartPos, ref newPos, ast, extensionParser, parseResult);
        when (newPos == pos)
          break;
        ast = ruleParser.FindNextPostfix(ast, parseResult);
        when (ast > 0)
        {
          def firstNewPos = newPos;
          def ambiguitys = SCG.List();
          ambiguitys.Add(postfixValue);
          while (ast > 0)
          {
            def nextExtensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PostfixParsers, ast, postfixParserOffset);
            newPos = pos;
            def _nextValue = astFactory.CreatePostfix(prefixValue, prefixStartPos, ref newPos, ast, nextExtensionParser, parseResult);
            assert(newPos == firstNewPos);
            ambiguitys.Add(_nextValue);
            extensionParser = nextExtensionParser;
            ast = ruleParser.FindNextPostfix(ast, parseResult);
          }
          // postfix ambiguity
          postfixValue = astFactory.CreateAmbiguous(ambiguitys.ToArray(), AstAmbiguityType.Postfix);
        }
        prefixValue = postfixValue;
        pos = newPos;
      }

      prefixValue
    }

    public GetExtensionParserOffset(parsers : array[ExtensionRuleParser]) : int
    {
      //FIXME empty array
      if (parsers.Length > 0) parsers[0].RuleId else 0
    }

    public GetExtensionParser(parseResult : ParseResult, parsers : array[ExtensionRuleParser], astPtr : int, offset : int) : ExtensionRuleParser
    {
      def ruleId = parseResult.ast[astPtr + ExtensibleRuleParser.AstOfs.Id] & ExtensibleRuleParser.AstMask.Id;
      parsers[ruleId - offset]
    }
  }
}
