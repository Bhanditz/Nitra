using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal.Recovery;
using System;
using System.Collections.Generic;

namespace Nitra.Internal
{
  public sealed class RuleIdBuilder
  {
    private mutable _isBuilding      : bool;
    private         _existingParsers : array[IParserInfo];
    private         _newParsers      : List[IParserInfo];
    private         _existingStates  : array[ParsingState];
    private         _newStates       : List[ParsingState];

    public this(existingParsers : array[IParserInfo], existingStates  : array[ParsingState])
    {
      _isBuilding      = true;
      _existingParsers = existingParsers;
      _newParsers      = List();
      _existingStates  = existingStates;
      _newStates       = List();
    }

    public NewRuleId(parser : IParserInfo) : int
    {
      assert(_isBuilding);

      def id = _existingParsers.Length + _newParsers.Count;
      _newParsers.Add(parser);
      id
    }

    public AddParsingStateAndSetId(state : ParsingState) : void
    {
      assert(_isBuilding);

      def id = _existingStates.Length + _newStates.Count;
      state.Id = id;
      _newStates.Add(state);
    }

    public GetParsingState(stateId : int) : ParsingState
    {
      assert(_isBuilding);

      _newStates[stateId - _existingStates.Length]
    }

    public GetResult() : array[IParserInfo] * array[ParsingState]
    {
      _isBuilding = false;

      def newParsers = array(_existingParsers.Length + _newParsers.Count);
      _existingParsers.CopyTo(newParsers, 0);
      _newParsers.CopyTo(newParsers, _existingParsers.Length);

      def newStates = array(_existingStates.Length + _newStates.Count);
      _existingStates.CopyTo(newStates, 0);
      _newStates.CopyTo(newStates, _existingStates.Length);

      Threading.Thread.MemoryBarrier(); // make WolfHound happy
      (newParsers, newStates)
    }
  }
}
