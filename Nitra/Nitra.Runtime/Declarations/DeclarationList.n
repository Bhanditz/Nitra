using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Declarations
{
  public interface IDeclarationList[T] : IEnumerable[T], IDeclarationNode
    where T : IDeclaration
  {
    Length            : int   { get; }
    Item[index : int] : T     { get; }
  }

  [DebuggerDisplay("Length = {Length}")]
  public abstract class DeclarationList[T] : IDeclarationList[T]
    where T : IDeclaration
  {
    public this(parent : IDeclaration, span : NSpan, items : array[T])
    {
      Parent = parent;
      Span   = span;
      _items = items;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    protected _items           : array[T];

    public Parent            : IDeclaration { get; }
    public File              : File         { get { Parent.File } }
    public IsAmbiguous       : bool         { get { false } }
    public Span              : NSpan        { get; }
    public Length            : int          { get { _items.Length } }
    public Item[index : int] : T            { get { _items[index] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (_items : IEnumerable[T]).GetEnumerator()
    }

    public abstract EvalProperties(context : EvalDeclarationPropertiesContext) : void;

    public abstract IsPropertyEvaluated(index : int) : bool;
  }

  public abstract class AmbiguousDeclarationList[T] : IDeclarationList[T]
    where T : IDeclaration
  {
    public this(ambiguities : array[IDeclarationList[T]])
    {
      Ambiguities = ambiguities
    }

    public Ambiguities       : array[IDeclarationList[T]] { get; }
    public Parent            : IDeclaration               { get { Ambiguities[0].Parent } }
    public File              : File                       { get { Ambiguities[0].File } }
    public IsAmbiguous       : bool                       { get { true } }
    public Span              : NSpan                      { get { Ambiguities[0].Span } }
    public Length            : int                        { get { Ambiguities[0].Length } }
    public Item[index : int] : T                          { get { Ambiguities[0][index] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (Ambiguities[0] : IEnumerable[T]).GetEnumerator()
    }

    public abstract EvalProperties(context : EvalDeclarationPropertiesContext) : void;

    public abstract IsPropertyEvaluated(index : int) : bool;
  }
}
