using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Declarations
{
  [DebuggerDisplay("Length = {Length}")]
  public sealed class DeclarationList[T] : IEnumerable[T], IDeclaration
    where T : IDeclaration
  {
    public this(parent : IDeclaration, span : NSpan, items : array[T])
    {
      Parent = parent;
      Span   = span;
      _items = items;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    private _items           : array[T];

    public Parent            : IDeclaration { get; }
    public Name              : Reference    { get { null } }
    public File              : File         { get { Parent.File } }
    public IsAmbiguous       : bool         { get { false } }

    public Span              : NSpan        { get; }
    public IsEmpty           : bool         { get { _items.Length == 0 } }
    public Length            : int          { get { _items.Length } }
    public Item[index : int] : T            { get { _items[index] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (_items : IEnumerable[T]).GetEnumerator()
    }

    public EvalProperties(context : EvalDeclarationPropertiesContext) : void
    {
      foreach (item in _items)
        item.EvalProperties(context)
    }

    public IsPropertyEvaluated(index : int) : bool
    {
      _ = index;
      false
    }
  }
}
