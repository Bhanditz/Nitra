using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public module AstUtils
  {
    public GetAstAmbiguities[TParseTree, TAst](ambiguities : array[TParseTree]) : array[TAst]
      where TParseTree   : IMappedParseTree[TAst]
      where TAst         : IAst
    {
      def result = array(ambiguities.Length);
      foreach (node in ambiguities with index)
        result[index] = node.GetAst();
      result
    }

    public GetAstAmbiguities[TParseTree, TAst](parseTree : IAmbiguousParseTree, getAst : Func[TParseTree, TAst]) : array[TAst]
      where TParseTree : IParseTree
      where TAst       : IAst
    {
      def result = array(parseTree.Ambiguities.Count);
      foreach (pt :> TParseTree in parseTree.Ambiguities with index)
        result[index] = getAst(pt);
      result
    }

    public EvalAmbiguitiesProperties(context : DependentPropertyEvalContext, ambiguities : array[IAst]) : void
    {
      foreach (ambiguity in ambiguities)
        ambiguity.EvalProperties(context);
    }

    public SetAmbiguitiesParent(parent : IAst, ambiguities : array[IAst]) : void
    {
      foreach (ambiguity in ambiguities)
        ambiguity.SetParent(parent);
    }
  }
}
