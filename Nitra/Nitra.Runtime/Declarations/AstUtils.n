using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public module AstUtils
  {
    public GetAstAmbiguities[TParseTree, TParent, TAst](parent : TParent, ambiguities : array[TParseTree]) : array[TAst]
      where TParseTree   : IMappedParseTree[TParent, TAst]
      where TParent      : IAst
      where TAst         : IAst
    {
      def result = array(ambiguities.Length);
      foreach (node in ambiguities with index)
        result[index] = node.GetAst(parent);
      result
    }

    public GetAstOption[TParseTree, TParent, TAst](parent : TParent, opt : OptionParseTree[TParseTree]) : IAstOption[TAst]
      where TParseTree   : IMappedParseTree[TParent, TAst]
      where TParent      : IAst
      where TAst         : IAst
    {
      if (opt.IsAmbiguous)
      {
        def ambiguousParseTree = opt :> IAmbiguousParseTree;
        def ambiguities        = array(ambiguousParseTree.Ambiguities.Count);
        foreach (parseTree :> OptionParseTree[TParseTree] in ambiguousParseTree.Ambiguities with index)
          ambiguities[index] = GetAstOption(parent, parseTree);
        AmbiguousAstOption(ambiguities)
      }
      else if (opt.HasValue)
      {
        def value = opt.Value.GetAst(parent);
        AstOption(parent, opt.Location.Span, value)
      }
      else
      {
        AstOption(parent, opt.Location.Span)
      }
    }

    public GetAstList[TParseTree, TParent, TAst](parent : TParent, lst : ListParseTree[TParseTree]) : IAstList[TAst]
      where TParseTree   : IMappedParseTree[TParent, TAst]
      where TParent      : IAst
      where TAst         : IAst
    {
      if (lst.IsAmbiguous)
      {
        def ambiguousParseTree = lst :> IAmbiguousParseTree;
        def ambiguities        = array(ambiguousParseTree.Ambiguities.Count);
        foreach (parseTree :> ListParseTree[TParseTree] in ambiguousParseTree.Ambiguities with index)
          ambiguities[index] = GetAstList(parent, parseTree);
        AmbiguousAstList(ambiguities)
      }
      else
      {
        def declarations = array(lst.Count);
        foreach (node in lst with index)
          declarations[index] = node.GetAst(parent);
        AstList(parent, lst.Location.Span, declarations)
      }
    }
  }
}
