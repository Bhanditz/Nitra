using Nitra.Declarations;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public module AstUtils
  {
    public static EvalProperties([NotNull] context : DependentPropertyEvalContext, [NotNull] compilerMessages : ICompilerMessages, [NotNull] asts : Seq[IAst]) : void
    {
      mutable oldState;
      try
      {
        oldState = AstContext.Set(compilerMessages);

        mutable calculatedCount;
        mutable passCount = 0;
        do
        {
          context.DeferredCount = 0;
          calculatedCount = context.CalculatedCount;
          foreach (ast in asts)
            ast.EvalProperties(context);
          passCount++;
        }
        while (context.DeferredCount > 0 && calculatedCount != context.CalculatedCount);
      }
      finally AstContext.Restore(oldState)
    }

    public GetAstAmbiguities[TParseTree, TAst](ambiguities : array[TParseTree]) : array[TAst]
      where TParseTree   : IMappedParseTree[TAst]
      where TAst         : IAst
    {
      def result = array(ambiguities.Length);
      foreach (node in ambiguities with index)
        result[index] = node.GetAst();
      result
    }

    public GetAstAmbiguities[TParseTree, TAst](parseTree : IAmbiguousParseTree, getAst : Func[TParseTree, TAst]) : array[TAst]
      where TParseTree : IParseTree
      where TAst       : IAst
    {
      def result = array(parseTree.Ambiguities.Count);
      foreach (pt :> TParseTree in parseTree.Ambiguities with index)
        result[index] = getAst(pt);
      result
    }

    public EvalAmbiguitiesProperties(context : DependentPropertyEvalContext, ast : IAmbiguousAst) : void
    {
      foreach (ambiguity in ast.Ambiguities)
        ambiguity.EvalProperties(context);
    }

    public ResetAmbiguitiesProperties(ast : IAmbiguousAst) : void
    {
      foreach (ambiguity in ast.Ambiguities)
        ambiguity.ResetProperties();
    }

    public AcceptToAll[T](visitor : IAstVisitor, asts : array[T]) : void
      where T: IAst
    {
      when (asts != null)
        foreach (ast in asts)
          ast.Accept(visitor);
    }
  }
}
