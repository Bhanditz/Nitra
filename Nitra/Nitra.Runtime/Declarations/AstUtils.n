using Nitra.Declarations;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public module AstUtils
  {
    public static EvalProperties([NotNull] context : DependentPropertyEvalContext, [NotNull] files : array[File], passName : string = null, stage : int = 0) : void
    {
      context.Stage = stage;

      mutable calculatedCount;
      mutable passCount = 0;
      do
      {
        context.DeferredCount = 0;
        calculatedCount = context.CalculatedCount;
        foreach (file in files)
        {
          mutable oldState;
          try
          {
            oldState = AstContext.Set(file.TypingMessages);
            def statistics = file.Statistics?.Typing;
            def passStatistics = 
              if      (passName == null)   statistics
              else                         statistics?.GetOrAddContainerSubtask(passName);
            def stat = passStatistics?.ReplaceSingleSubtask(file.FullName, file.Name);
            stat?.Restart();
            
            file.Ast?.EvalProperties(context);
            
            stat?.Stop();
          }
          finally AstContext.Restore(oldState)
        }
        passCount++;
      }
      while (context.DeferredCount > 0 && calculatedCount != context.CalculatedCount);
      
      // Notify symbols about current stage is finished.
      def stageNotifier = StageNotifierVisitor();
      foreach (file in files)
      {
        def ast = file.Ast;
        when (ast != null)
          stageNotifier.Notify(ast, stage);
      }
    }

    public GetAstAmbiguities[TParseTree, TAst](ambiguities : array[TParseTree]) : array[TAst]
      where TParseTree   : ParseTree
      where TAst         : IAst
    {
      def result = array(ambiguities.Length);
      foreach (node in ambiguities with index)
        result[index] = node.GetAstUntyped() :> TAst;
      result
    }

    public EvalAmbiguitiesProperties(context : DependentPropertyEvalContext, ast : IAmbiguousAst) : void
    {
      foreach (ambiguity in ast.Ambiguities)
        ambiguity.EvalProperties(context);
    }

    public ResetAmbiguitiesProperties(ast : IAmbiguousAst) : void
    {
      foreach (ambiguity in ast.Ambiguities)
        ambiguity.ResetProperties();
    }

    public AcceptToAll[T](visitor : IAstVisitor, asts : array[T]) : void
      where T: IAst
    {
      when (asts != null)
        foreach (ast in asts)
          ast.Accept(visitor);
    }

    public GetFirstAmbiguity[T](parseTree : T) : T * int
      where T: ParseTree
    {
      if (parseTree.IsAmbiguous)
      {
        def ambiguities = (parseTree :> IAmbiguousParseTree).Ambiguities;
        (ambiguities[0] :> T, ambiguities.Count - 1)
      }
      else
        (parseTree, 0)
    }

    public GetNextAmbiguity[T](parseTree : T, state : int) : T * int
      where T: ParseTree
    {
      def ambiguities = (parseTree :> IAmbiguousParseTree).Ambiguities;
      (ambiguities[ambiguities.Count - state] :> T, state - 1)
    }
  }
}
