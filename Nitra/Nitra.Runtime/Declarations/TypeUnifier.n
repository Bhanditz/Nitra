using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class TypeUnifier
  {
    [Record]
    private struct TypeVarState
    {
      public Var                   : TypeVarSymbol;
      public BaseTypeConstraint    : TypeSymbol;
      public DerivedTypeConstraint : TypeSymbol;
    }

    private _typeVarInitContext : DependentPropertyEvalContext = DependentPropertyEvalContext();

    public abstract IsSubtype(subtype : TypeSymbol, supertype : TypeSymbol) : bool;

    public virtual CreateTypeVar(baseTypeConstraint : TypeSymbol, derivedTypeConstraint : TypeSymbol) : TypeVarSymbol
    {
      def var = BoundedTypeVarSymbol();

      when (baseTypeConstraint : object != null)
        var.BaseTypeConstraint = baseTypeConstraint;

      when (derivedTypeConstraint : object != null)
        var.DerivedTypeConstraint = derivedTypeConstraint;

      var.EvalProperties(_typeVarInitContext);
      var
    }

    public TryProvide(t : TypeSymbol, derivedTypeConstraint : TypeSymbol) : bool
    {
      TryUnify(t, CreateTypeVar(null, derivedTypeConstraint))
    }

    public Provide(t : TypeSymbol, derivedTypeConstraint : TypeSymbol) : bool
    {
      Unify(t, CreateTypeVar(null, derivedTypeConstraint))
    }

    public TryRequire(t : TypeSymbol, baseTypeConstraint : TypeSymbol) : bool
    {
      TryUnify(t, CreateTypeVar(baseTypeConstraint, null))
    }

    public Require(t : TypeSymbol, baseTypeConstraint : TypeSymbol) : bool
    {
      Unify(t, CreateTypeVar(baseTypeConstraint, null))
    }

    public TryUnify(t1 : TypeSymbol, t2 : TypeSymbol) : bool
    {
      mutable updatedVariables;
      def result = Unify(t1, t2, ref updatedVariables);
      ResetTypeVars(ref updatedVariables);
      result
    }

    public Unify(t1 : TypeSymbol, t2 : TypeSymbol) : bool
    {
      mutable updatedVariables;
      def result = Unify(t1, t2, ref updatedVariables);
      unless (result)
        ResetTypeVars(ref updatedVariables);
      result
    }

    private Unify(t1 : TypeSymbol, t2 : TypeSymbol, updatedVariables : ref LightList[TypeVarState]) : bool
    {
      match (UnwrapTypeVar(t1), UnwrapTypeVar(t2))
      {
        | (TypeVarSymbol as v1, TypeVarSymbol as v2) =>
          mutable newBaseTypeConstraint;
          match (v1.IsBaseTypeConstraintEvaluated, v2.IsBaseTypeConstraintEvaluated)
          {
            | (false, false) => ()
            | (true,  false) => newBaseTypeConstraint = v1.BaseTypeConstraint;
            | (false,  true) => newBaseTypeConstraint = v2.BaseTypeConstraint;
            | (true,   true) =>
              if (IsSubtype(v1.BaseTypeConstraint, v2.BaseTypeConstraint))
                newBaseTypeConstraint = v1.BaseTypeConstraint
              else if (IsSubtype(v2.BaseTypeConstraint, v1.BaseTypeConstraint))
                newBaseTypeConstraint = v2.BaseTypeConstraint
              else
                return false; // base type constraints are not compatible
          }

          mutable newDerivedTypeConstraint;
          match (v1.IsDerivedTypeConstraintEvaluated, v2.IsDerivedTypeConstraintEvaluated)
          {
            | (false, false) => ()
            | (true,  false) => newDerivedTypeConstraint = v1.DerivedTypeConstraint;
            | (false,  true) => newDerivedTypeConstraint = v2.DerivedTypeConstraint;
            | (true,   true) =>
              if (IsSubtype(v1.DerivedTypeConstraint, v2.DerivedTypeConstraint))
                newDerivedTypeConstraint = v2.DerivedTypeConstraint
              else if (IsSubtype(v2.DerivedTypeConstraint, v1.DerivedTypeConstraint))
                newDerivedTypeConstraint = v1.DerivedTypeConstraint
              else
                return false; // derived type constraints are not compatible
          }

          mutable type;
          when (newBaseTypeConstraint : object != null && newDerivedTypeConstraint : object != null)
          {
            if (newBaseTypeConstraint.Equals(newDerivedTypeConstraint))
              type = newBaseTypeConstraint;
            else unless (IsSubtype(newDerivedTypeConstraint, newBaseTypeConstraint))
              return false; // merged constraints are not consistent
          }

          when (type : object == null)
            type = CreateTypeVar(newBaseTypeConstraint, newDerivedTypeConstraint);

          BindTypeVar(v1, type, ref updatedVariables);
          BindTypeVar(v2, type, ref updatedVariables);
          true

        | (type, var is TypeVarSymbol)
        | (var is TypeVarSymbol, type) =>
          when (var.IsBaseTypeConstraintEvaluated && !IsSubtype(type, var.BaseTypeConstraint))
            return false; // base type constraint not satisfied

          when (var.IsDerivedTypeConstraintEvaluated && !IsSubtype(var.DerivedTypeConstraint, type))
            return false; // derived type constraint not satisfied

          BindTypeVar(var, type, ref updatedVariables);
          true

        | (t1', t2') =>
          mutable ti1 = t1';
          mutable args1;
          mutable ti2 = t2';
          mutable args2;

          when (t1'.DecomposeType() is VSome(s))
          {
            ti1   = s.TypeInfo;
            args1 = s.TypeArguments;
          }

          when (t2'.DecomposeType() is VSome(s))
          {
            ti2   = s.TypeInfo;
            args2 = s.TypeArguments;
          }

          if (ti1 : object == ti2)
            Unify(ref args1, ref args2, ref updatedVariables);
          else
            false
      }
    }

    private Unify(ts1 : ref LightList[TypeSymbol], ts2 : ref LightList[TypeSymbol], updatedVariables : ref LightList[TypeVarState]) : bool
    {
      when (ts1.Count != ts2.Count)
        return false;

      for (mutable i = 0; i < ts1.Count; ++i)
        unless (Unify(ts1[i], ts2[i], ref updatedVariables))
          return false;

      true
    }

    private UnwrapTypeVar(t : TypeSymbol) : TypeSymbol
    {
      | tv is TypeVarSymbol when tv.IsTypeEvaluated => UnwrapTypeVar(tv.Type)
      | _ => t
    }

    private BindTypeVar(var : TypeVarSymbol, type : TypeSymbol, updatedVariables : ref LightList[TypeVarState]) : void
    {
      def state = TypeVarState(var,
        if (var.IsBaseTypeConstraintEvaluated)    var.BaseTypeConstraint    else null,
        if (var.IsDerivedTypeConstraintEvaluated) var.DerivedTypeConstraint else null);

      var.Type = type;
      updatedVariables.Add(state);
    }

    private ResetTypeVars(vars : ref LightList[TypeVarState]) : void
    {
      def e = vars.GetEnumerator();
      when (e.MoveNext())
      {
        do
        {
          def state = e.Current;
          state.Var.ResetProperties();

          when (state.BaseTypeConstraint : object != null)
            state.Var.BaseTypeConstraint = state.BaseTypeConstraint;

          when (state.DerivedTypeConstraint : object != null)
            state.Var.DerivedTypeConstraint = state.DerivedTypeConstraint;

          state.Var.EvalProperties(_typeVarInitContext);
        }
        while (e.MoveNext())
      }
    }
  }
}
