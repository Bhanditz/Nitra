using Nitra.Declarations;
using Nitra.Serialization2;

using System.IO;
using Nemerle.Collections;

namespace Nitra.Runtime.Binding
{
  public type ISymbol2 = DeclarationSymbol;

  public partial interface ScopedAst : IAst
  {
  }

  public partial interface Declaration : ScopedAst, IAst
  {
    CreateSymbol() : ISymbol2;
  }

  public partial interface DeclarationSymbol : IDependentPropertyContainer
  {
    Id               : int                 { get; }
    Name             : string              { get; }
    IsNameValid      : bool                { get; }

    GetDeclarationsUntyped() : Seq[Declaration];
    AddDeclaration(newDeclaration : Declaration) : void; // TODO: remove from public interface
    CanMerge(candidate : Declaration) : bool;
    IsSameIdentity(candidate : Declaration) : bool;
    AfterStage(stage : int) : void;
    ToXaml() : string;
    Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void;
    Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : void;
  }
}
