using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class Declaration[TParent] : IDeclarationPart
    where TParent : IDeclarationPart
  {
    public virtual  File        : File      { get { Parent.File } }
    public virtual  IsAmbiguous : bool      { get { false } }
    public abstract Span        : NSpan     { get; }
    public abstract Parent      : TParent   { get; }
    public abstract EvalProperties(context : EvalDeclarationPropertiesContext) : void;
    public abstract IsPropertyEvaluated(index : int) : bool;
    public virtual ToXaml() : string
    {
      def type = GetType();
      
      def str = if (type.IsNested) type.DeclaringType.Name + "." + type.Name else type.Name;
      def typeStr = $"<Span Foreground = 'gray'>$str</Span>: ";
      
      if (this : object is IDeclaration as decl)
        typeStr + ": " + decl.Name
      else
        typeStr
    }
  }
}
