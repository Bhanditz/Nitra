using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public module TypeUtils
  {
    public TryUnify(t1 : TypeSymbol, t2 : TypeSymbol) : bool
    {
      mutable updatedVariables;
      def result = Unify(t1, t2, ref updatedVariables);
      ResetTypeVars(ref updatedVariables);
      result
    }

    public Unify(t1 : TypeSymbol, t2 : TypeSymbol) : bool
    {
      mutable updatedVariables;
      def result = Unify(t1, t2, ref updatedVariables);
      unless (result)
        ResetTypeVars(ref updatedVariables);
      result
    }

    private Unify(t1 : TypeSymbol, t2 : TypeSymbol, updatedVariables : ref LightList[TypeVarSymbol]) : bool
    {
      mutable ti1 = t1;
      mutable args1;
      mutable ti2 = t2;
      mutable args2;

      when (t1.DecomposeType() is VSome(s))
      {
        ti1   = s.TypeInfo;
        args1 = s.TypeArguments;
      }

      when (t2.DecomposeType() is VSome(s))
      {
        ti2   = s.TypeInfo;
        args2 = s.TypeArguments;
      }

      def ti_1 = UnwrapTypeVar(ti1);
      def ti_2 = UnwrapTypeVar(ti2);

      when (ti_1 : object == ti_2)
        return Unify(ref args1, ref args2, ref updatedVariables);

      match (ti_1, ti_2)
      {
        | (tv1 is TypeVarSymbol, tv2 is TypeVarSymbol) =>
          when (tv1 : object != tv2)
          {
            tv1.Type = tv2; // Union
            updatedVariables.Add(tv1);
          }
          Unify(ref args1, ref args2, ref updatedVariables)

        | (ti, tv is TypeVarSymbol)
        | (tv is TypeVarSymbol, ti) =>
          tv.Type = ti;
          updatedVariables.Add(tv);
          Unify(ref args1, ref args2, ref updatedVariables)

        | _ => false
      }
    }

    private Unify(ts1 : ref LightList[TypeSymbol], ts2 : ref LightList[TypeSymbol], updatedVariables : ref LightList[TypeVarSymbol]) : bool
    {
      when (ts1.Count != ts2.Count)
        return false;

      for (mutable i = 0; i < ts1.Count; ++i)
        unless (Unify(ts1[i], ts2[i], ref updatedVariables))
          return false;

      true
    }

    private UnwrapTypeVar(t : TypeSymbol) : TypeSymbol
    {
      | tv is TypeVarSymbol when tv.IsTypeEvaluated => UnwrapTypeVar(tv.Type)
      | _ => t
    }

    private ResetTypeVars(vars : ref LightList[TypeVarSymbol]) : void
    {
      def e = vars.GetEnumerator();
      when (e.MoveNext())
      {
        def context = DependentPropertyEvalContext();
        do
        {
          e.Current.ResetProperties();
          e.Current.EvalProperties(context);
        }
        while (e.MoveNext())
      }
    }
  }
}
