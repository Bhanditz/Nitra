using Nitra.Runtime.Binding;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public interface IDeclarationOption[+T] : IDeclarationPart
    where T : IDeclarationPart
  {
    HasValue : bool { get; }
    Value    : T    { get; }
  }

  [Record]
  public variant DeclarationOption[T] : IDeclarationOption[T]
    where T : IDeclarationPart
  {
    public          Parent      : IDeclarationPart { get; }
    public          File        : File             { get { Parent.File } }
    public          IsAmbiguous : bool             { get { false } }
    public          Span        : NSpan            { get; }
    public abstract HasValue    : bool             { get; }
    public abstract Value       : T                { get; }

    public abstract EvalProperties(context : EvalDeclarationPropertiesContext) : void;

    public IsPropertyEvaluated(index : int) : bool
    {
      _ = index;
      false
    }

    | Some
      {
        value : T;
        public override HasValue : bool { get { true } }
        public override Value    : T    { get { value } }

        public override EvalProperties(context : EvalDeclarationPropertiesContext) : void
        {
          value.EvalProperties(context)
        }
      }

    | None
      {
        public override HasValue : bool { get { false } }
        public override Value    : T    { get { throw NotSupportedException("Value not set") } }

        public override EvalProperties(context : EvalDeclarationPropertiesContext) : void
        {
          _ = context
        }
      }

      public virtual  ToXaml() : string
      {
        match (this)
        {
          | None => "<Span Foreground = 'gray'>None</Span>"
          | Some as x => x.value.ToString()
        }
      }
    }
}
