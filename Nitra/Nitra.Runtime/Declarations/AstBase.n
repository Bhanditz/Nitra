using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class AstBase[TParent] : IAst
    where TParent : IAst
  {
    public virtual  File        : File      { get { Parent.File } }
    public virtual  IsAmbiguous : bool      { get { false } }
    public virtual  IsMissing   : bool      { get { false } }
    public abstract Span        : NSpan     { get; }
    public abstract Parent      : TParent   { get; protected set; }
                    ParentImpl  : IAst implements IAst.Parent { get { Parent } }
    public abstract EvalProperties(context : DependentPropertyEvalContext) : void;
    public abstract IsPropertyEvaluated(index : int) : bool;

    public virtual SetParent(newParent : IAst) : void
    {
      | null                 => throw ArgumentNullException("newParent")
      | newParent is TParent => Parent = newParent;
      | _                    => throw ArgumentException($"Type '$(newParent.GetType())' is not subtype of '$(typeof(TParent))'");
    }

    public virtual ToXaml() : string
    {
      def type = GetType();
      def color = if (this.IsAmbiguous) "red" else "gray";
      def str = if (type.IsNested) type.DeclaringType.Name + "." + type.Name else type.Name;
      def typeStr = $"<Span Foreground = '$color'>$str</Span>";

      if (this : object is IDeclaration as decl)
      {
        def text = decl.Name.Text;
        if (!string.IsNullOrWhiteSpace(text))
          typeStr + ": " + text
        else
          typeStr
      }
      else
        typeStr
    }
  }
}
