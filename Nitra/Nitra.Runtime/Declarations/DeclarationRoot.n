using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class DeclarationRoot[TContent] : IAst
    where TContent : IAst
  {
    public File        : File             { get; }
    public Span        : NSpan            { get { NSpan(0, File?.Length) } }
    public Parent      : IAst             { get null }
    public IsAmbiguous : bool             { get false }
    public Content     : TContent         { get; }

    private this(file : File, content : TContent)
    {
      this.File    = file;
      this.Content = content;

      content.SetParent(this);
    }

    public EvalProperties() : void
    {
      EvalProperties(DependentPropertyEvalContext())
    }

    public EvalProperties(context : DependentPropertyEvalContext) : void
    {
      mutable calculatedCount;
      mutable passCount = 0;
      do
      {
        context.DeferredCount = 0;
        calculatedCount = context.CalculatedCount;
        Content.EvalProperties(context);
        passCount++;
      }
      while (context.DeferredCount > 0 && calculatedCount != context.CalculatedCount);
    }

    public IsPropertyEvaluated(index : int) : bool
    {
      _ = index;
      throw NotSupportedException();
    }

    public SetParent(newParent : IAst) : void
    {
      _ = newParent;
      throw NotSupportedException();
    }

    public static Create(file : File, parseTree : IMappedParseTree[TContent]) : DeclarationRoot[TContent]
    {
      DeclarationRoot(file, parseTree.GetAst())
    }

    public ToXaml() : string { "<Bold>Root</Bold>" }
  }
}
