using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class DeclarationRoot[TContent] : IDeclaration
    where TContent : IDeclaration
  {
    public Name        : Reference    { get assert(false) }
    public File        : File         { get; }
    public Span        : NSpan        { get { NSpan(0, File.Length) } }
    public Parent      : IDeclaration { get null }
    public IsAmbiguous : bool         { get false }
    public Content     : TContent     { get; private set }

    private this(file : File)
    {
      this.File = file;
    }

    public EvalProperties(context : EvalDeclarationPropertiesContext) : void
    {
      Content.EvalProperties(context)
    }

    public IsPropertyEvaluated(index : int) : bool
    {
      _ = index;
      throw NotSupportedException();
    }

    public static Create(file : File, parseTree : IDeclarableParseTree[IDeclaration, TContent]) : DeclarationRoot[TContent]
    {
      def declarationRoot = DeclarationRoot(file);
      declarationRoot.Content = parseTree.GetDeclaration(declarationRoot);
      declarationRoot
    }

    public ToXaml() : string { "<Bold>Root</Bold>" }
  }
}
