using Nitra.Internal;
using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Declarations
{
  // TODO: Добавить возможность различать + и *
  public interface IAstList[+T] : IEnumerable[T], IAst
    where T : IAst
  {
    Count             : int   { get; }
    Item[index : int] : T     { get; }
  }

  [DebuggerDisplay("Count = {Count}")]
  public class AstList[T] : AstBase, IAstList[T]
    where T : IAst
  {
    public this(loc : Located, params items : array[T])
    {
      this(loc.File, loc.Span, items)
    }

    public this(file : File, span : NSpan, params items : array[T])
    {
      File   = file;
      Span   = span;
      _items = items;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    protected _items           : array[T];

    public Count             : int   { get { _items.Length } }
    public Item[index : int] : T     { get { _items[index] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (_items : IEnumerable[T]).GetEnumerator()
    }

    public override EvalProperties(context : DependentPropertyEvalContext) : void
    {
      foreach (item in _items)
        item.EvalProperties(context);
    }

    public override ToXaml() : string { "List Count: " + _items.Length }

    public override Accept(visitor : IAstVisitor) : void
    {
      foreach (item in _items)
      {
        | x is IReference => visitor.Visit(x);
        | x => visitor.Visit(x);
      }
    }
  }

  public class AmbiguousAstList[T] : IAstList[T], IAmbiguousAst
    where T : IAst
  {
    public this(ambiguities : array[IAstList[T]])
    {
      Ambiguities = ambiguities
    }

    public Ambiguities       : array[IAstList[T]] { get; }
    public File              : File               { get { Ambiguities[0].File } }
    public Span              : NSpan              { get { Ambiguities[0].Span } }
    public IsAmbiguous       : bool               { get { true } }
    public IsMissing         : bool               { get { false } }
    public Count             : int                { get { Ambiguities[0].Count } }
    public Item[index : int] : T                  { get { Ambiguities[0][index] } }

    private AmbiguitiesImpl : array[IAst] implements IAmbiguousAst.Ambiguities { get { Ambiguities :> array[IAst] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (Ambiguities[0] : IEnumerable[T]).GetEnumerator()
    }

    public virtual EvalProperties(context : DependentPropertyEvalContext) : void
    {
      AstUtils.EvalAmbiguitiesProperties(context, this)
    }

    public IsPropertyEvaluated(index : int) : bool
    {
      Ambiguities[0].IsPropertyEvaluated(index)
    }

    public ResetProperties() : void
    {
      AstUtils.ResetAmbiguitiesProperties(this)
    }

    public IsAllPropertiesEvaluated : bool
    {
      get { Ambiguities[0].IsAllPropertiesEvaluated }
    }

    public ToXaml() : string { "<Span Foreground='Red'>AmbiguousList Count: " + Ambiguities.Length + "</Span>" }

    public Accept(visitor : IAstVisitor) : void
    {
      foreach (item in Ambiguities)
        item.Accept(visitor);
    }
  }
}
