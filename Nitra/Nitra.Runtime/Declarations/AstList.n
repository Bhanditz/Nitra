using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Declarations
{
  // TODO: Добавить возможность различать + и *
  public interface IAstList[+T] : IEnumerable[T], IAst
    where T : IAst
  {
    Count             : int   { get; }
    Item[index : int] : T     { get; }

    public static CreateConcrete(parent : IAst, span : NSpan, items : array[IAst]) : this
    {
      AstList(parent, span, (items : object) :> array[T])
    }

    public static CreateAmbiguous(ambiguities : array[IAstList[IAst]]) : this
    {
      AmbiguousAstList((ambiguities : object) :> array[IAstList[T]])
    }

    public static Create[TParseTree, TParent, TAst](parent : TParent, lst : ListParseTree[TParseTree]) : IAstList[TAst]
      where TParseTree   : IMappedParseTree[TParent, TAst]
      where TParent      : IAst
      where TAst         : IAst
    {
      if (lst.IsAmbiguous)
      {
        def ambiguousParseTree = lst :> IAmbiguousParseTree;
        def ambiguities        = array(ambiguousParseTree.Ambiguities.Count);
        foreach (parseTree :> ListParseTree[TParseTree] in ambiguousParseTree.Ambiguities with index)
          ambiguities[index] = Create(parent, parseTree);
        AmbiguousAstList(ambiguities)
      }
      else
      {
        def declarations = array(lst.Count);
        foreach (node in lst with index)
          declarations[index] = node.GetAst(parent);
        AstList(parent, lst.Location.Span, declarations)
      }
    }
  }

  [DebuggerDisplay("Count = {Count}")]
  public class AstList[T] : IAstList[T]
    where T : IAst
  {
    public this(parent : IAst, span : NSpan, items : array[T])
    {
      Parent = parent;
      Span   = span;
      _items = items;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    protected _items           : array[T];

    public Parent            : IAst  { get; }
    public File              : File  { get { Parent.File } }
    public IsAmbiguous       : bool  { get { false } }
    public Span              : NSpan { get; }
    public Count             : int   { get { _items.Length } }
    public Item[index : int] : T     { get { _items[index] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (_items : IEnumerable[T]).GetEnumerator()
    }

    public virtual EvalProperties(context : DependentPropertyEvalContext) : void
    {
      foreach (item in _items)
        item.EvalProperties(context);
    }

    public virtual IsPropertyEvaluated(_ : int) : bool { false }

    public ToXaml() : string { "List Count: " + _items.Length }
  }

  public class AmbiguousAstList[T] : IAstList[T], IAmbiguousAst
    where T : IAst
  {
    public this(ambiguities : array[IAstList[T]])
    {
      Ambiguities = ambiguities
    }

    public Ambiguities       : array[IAstList[T]] { get; }
    public Parent            : IAst               { get { Ambiguities[0].Parent } }
    public File              : File               { get { Ambiguities[0].File } }
    public IsAmbiguous       : bool               { get { true } }
    public Span              : NSpan              { get { Ambiguities[0].Span } }
    public Count             : int                { get { Ambiguities[0].Count } }
    public Item[index : int] : T                  { get { Ambiguities[0][index] } }

    private AmbiguitiesImpl : array[IAst] implements IAmbiguousAst.Ambiguities { get { Ambiguities :> array[IAst] } }

    public GetEnumerator() : IEnumerator[T]
    {
      (Ambiguities[0] : IEnumerable[T]).GetEnumerator()
    }

    public virtual EvalProperties(context : DependentPropertyEvalContext) : void
    {
      foreach (ambiguity in Ambiguities)
        ambiguity.EvalProperties(context);
    }

    public virtual IsPropertyEvaluated(_ : int) : bool { false }

    public ToXaml() : string { "AmbiguousList Count: " + Ambiguities.Length }
  }
}
