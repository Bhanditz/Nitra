using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Declarations
{
  // TODO: Добавить возможность различать + и *
  public interface IAstList[+T, +TData] : IEnumerable[T], IAst
    where T     : IAst
    where TData : IDependentPropertyHost
  {
    Count             : int   { get; }
    Item[index : int] : T     { get; }
    Data              : TData { get; }
  }

  [DebuggerDisplay("Count = {Count}")]
  public sealed class AstList[T, TData] : IAstList[T, TData]
    where T     : IAst
    where TData : IDependentPropertyHost
  {
    public this(parent : IAst, span : NSpan, data : TData, items : array[T])
    {
      Parent = parent;
      Span   = span;
      Data   = data;
      _items = items;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    private _items           : array[T];

    public Parent            : IAst  { get; }
    public File              : File  { get { Parent.File } }
    public IsAmbiguous       : bool  { get { false } }
    public Span              : NSpan { get; }
    public Count             : int   { get { _items.Length } }
    public Item[index : int] : T     { get { _items[index] } }
    public Data              : TData { get; }

    public GetEnumerator() : IEnumerator[T]
    {
      (_items : IEnumerable[T]).GetEnumerator()
    }

    public EvalProperties(context : DependentPropertyEvalContext) : void
    {
      Data.EvalProperties(context)
    }

    public IsPropertyEvaluated(_ : int) : bool { false }

    public ToXaml() : string { "List Count: " + _items.Length }
  }

  public sealed class AmbiguousAstList[T, TData] : IAstList[T, TData]
    where T     : IAst
    where TData : IDependentPropertyHost
  {
    public this(ambiguities : array[IAstList[T, TData]])
    {
      Ambiguities = ambiguities
    }

    public Ambiguities       : array[IAstList[T, TData]] { get; }
    public Parent            : IAst               { get { Ambiguities[0].Parent } }
    public File              : File               { get { Ambiguities[0].File } }
    public IsAmbiguous       : bool               { get { true } }
    public Span              : NSpan              { get { Ambiguities[0].Span } }
    public Count             : int                { get { Ambiguities[0].Count } }
    public Item[index : int] : T                  { get { Ambiguities[0][index] } }
    public Data              : TData              { get { Ambiguities[0].Data } }

    public GetEnumerator() : IEnumerator[T]
    {
      (Ambiguities[0] : IEnumerable[T]).GetEnumerator()
    }

    public EvalProperties(context : DependentPropertyEvalContext) : void
    {
      Data.EvalProperties(context)
    }

    public IsPropertyEvaluated(_ : int) : bool { false }

    public ToXaml() : string { "AmbiguousList Count: " + Ambiguities.Length }
  }
}
