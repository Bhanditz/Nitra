using Nitra.Runtime.Binding;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public interface IAstOption[+T, +TData] : IAst
    where T     : IAst
    where TData : IDependentPropertyHost
  {
    HasValue : bool  { get; }
    Value    : T     { get; }
    Data     : TData { get; }
  }

  [Record]
  public variant AstOption[T, TData] : IAstOption[T, TData]
    where T     : IAst
    where TData : IDependentPropertyHost
  {
    public          Parent      : IAst  { get; }
    public          File        : File  { get { Parent.File } }
    public          IsAmbiguous : bool  { get { false } }
    public          Span        : NSpan { get; }
    public abstract HasValue    : bool  { get; }
    public abstract Value       : T     { get; }
    public          Data        : TData { get; }

    public EvalProperties(context : EvalDeclarationPropertiesContext) : void
    {
      Data.EvalProperties(context)
    }

    public IsPropertyEvaluated(_ : int) : bool { false }

    public ToXaml() : string
    {
      match (this)
      {
        | None => "<Span Foreground = 'gray'>None</Span>"
        | Some as x => x.value.ToString()
      }
    }

    | Some
      {
        value : T;
        public override HasValue : bool { get { true } }
        public override Value    : T    { get { value } }
      }

    | None
      {
        public override HasValue : bool { get { false } }
        public override Value    : T    { get { throw NotSupportedException("Value not set") } }
      }
  }

  public sealed class AmbiguousAstOption[T, TData] : IAstOption[T, TData]
    where T     : IAst
    where TData : IDependentPropertyHost
  {
    public this(ambiguities : array[IAstOption[T, TData]])
    {
      Ambiguities = ambiguities
    }

    public Ambiguities       : array[IAstOption[T, TData]] { get; }
    public Parent            : IAst               { get { Ambiguities[0].Parent } }
    public File              : File               { get { Ambiguities[0].File } }
    public IsAmbiguous       : bool               { get { true } }
    public Span              : NSpan              { get { Ambiguities[0].Span } }
    public HasValue          : bool               { get { Ambiguities[0].HasValue } }
    public Value             : T                  { get { Ambiguities[0].Value } }
    public Data              : TData              { get { Ambiguities[0].Data } }

    public EvalProperties(context : EvalDeclarationPropertiesContext) : void
    {
      Data.EvalProperties(context)
    }

    public IsPropertyEvaluated(_ : int) : bool { false }

    public ToXaml() : string { "AmbiguousOption Count: " + Ambiguities.Length }
  }
}
