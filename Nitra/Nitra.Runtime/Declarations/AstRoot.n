using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;
using Nitra.Internal;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class AstRoot[TContent] : IAst
    where TContent : IAst
  {
    public File        : File             { get { Content.File } }
    public Span        : NSpan            { get { Content.Span } }
    public IsAmbiguous : bool             { get false }
    public IsMissing   : bool             { get false }
    public Content     : TContent         { get; }

    private this(content : TContent)
    {
      this.Content = content;
    }

    EvalProperties(context : DependentPropertyEvalContext) : void implements IDependentPropertyHost.EvalProperties
    {
      EvalProperties(context, DebugCompilerMessages())
    }

    public EvalProperties(compilerMessages : ICompilerMessages) : void
    {
      EvalProperties(DependentPropertyEvalContext(), compilerMessages)
    }

    public EvalProperties([NotNull] context : DependentPropertyEvalContext, [NotNull] compilerMessages : ICompilerMessages) : void
    {
      mutable oldState;
      try
      {
        oldState = AstContext.Set(compilerMessages);

        mutable calculatedCount;
        mutable passCount = 0;
        do
        {
          context.DeferredCount = 0;
          calculatedCount = context.CalculatedCount;
          Content.EvalProperties(context);
          passCount++;
        }
        while (context.DeferredCount > 0 && calculatedCount != context.CalculatedCount);
      }
      finally AstContext.Restore(oldState)
    }

    public IsPropertyEvaluated(index : int) : bool
    {
      _ = index;
      throw NotSupportedException();
    }

    public static Create(parseTree : IMappedParseTree[TContent]) : AstRoot[TContent]
    {
      Create(parseTree, DebugCompilerMessages())
    }

    public static Create([NotNull] parseTree : IMappedParseTree[TContent], [NotNull] compilerMessages : ICompilerMessages) : AstRoot[TContent]
    {
      mutable oldState;
      try
      {
        oldState = AstContext.Set(compilerMessages);

        def content = parseTree.GetAst();
        AstRoot(content)
      }
      finally AstContext.Restore(oldState)
    }

    public ToXaml() : string { "<Bold>Root</Bold>" }
  }
}
