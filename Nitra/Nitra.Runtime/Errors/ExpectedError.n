using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Runtime.Reflection;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  public class ExpectedError : ParseError
  {
    public Expected : ReadOnlyCollection[INitraReflection];

    public this(loc : Location, expected : array[INitraReflection])
    {
      base(loc);
      Expected = ReadOnlyCollection(expected);
    }
    
    public this(loc : Location, expected : Seq[INitraReflection])
    {
      base(loc);
      Expected = ReadOnlyCollection(expected.ToArray());
    }
    
    public override Message : string { [Memoize] get { MekeMessage() } }

    public override DebugText : string
    {
      [Memoize] get
      {
        MekeMessage()
      }
    }

    MekeMessage() : string
    {
      def getIn(_)
      {
        | SubruleInfo.ListItem => ""
        | SubruleInfo as si with name = si.Sequence.RuleName => if (string.IsNullOrEmpty(name)) "" else $" in $name"
        | _ => ""
      }
      
      def inStr = getIn(Expected.First());
      $<#Expected: ..$(SubruleToString(Expected); " ")$inStr#>
    }

    static SubruleToString(expected : Seq[INitraReflection]) : Seq[string]
    {
      def toStr(e : INitraReflection) : string
      {
        | StartRuleParser as p => p.ParsingSequence.RuleName
        | _ => e.ToString()
      }
      def res = expected
        .Select(toStr)
        //.Distinct()
        //.OrderBy(fun(x) { | "';'" | "','" => 0 | "'.'" => 1 | _ => x.Length })
        //.ThenBy(x => x)
        ;
      res
    }
    
    public override ToString() : string { MekeMessage() }

    [OverrideObjectEquals]
    public Equals(other : this) : bool
    {
      other != null && Expected.Count == other.Expected.Count && EqualsImpl(other) && Enumerable.SequenceEqual(Expected, other.Expected)
    }

    [Memoize]
    public override GetHashCode() : int
    {
      mutable hashCode = base.GetHashCode();
      
      foreach (e in Expected)
        hashCode ^= e.GetHashCode();
      
      hashCode
    }
    
  }
}
