using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Runtime.Reflection;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  class CompositeExpectedError : ParseError
  {
    public Errors: ReadOnlyCollection[ExpectedError] { get; }
    
    public this(loc : Location, errors: array[ExpectedError])
    {
      base(loc);
      Errors = ReadOnlyCollection(errors);
    }

    public override Message : string { [Memoize] get { MekeMessage() } }

    public override DebugText : string
    {
      [Memoize] get
      {
        MekeMessage()
      }
    }

    MekeMessage() : string
    {
      $<#..$(Errors; ", "; e => e.Message)#>
    }

    public override ToString() : string { "Expected: " + MekeMessage() }

    [OverrideObjectEquals]
    public Equals(other : this) : bool
    {
      other != null && Errors.Count == other.Errors.Count && EqualsImpl(other) && Enumerable.SequenceEqual(Errors, other.Errors)
    }

    [Memoize]
    public override GetHashCode() : int
    {
      mutable hashCode = base.GetHashCode();
      
      foreach (e in Errors)
        hashCode ^= e.GetHashCode();
      
      hashCode
    }
  }
}
