using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  [Record]
  public class ExpectedRulesError : ParseError
  {
    protected _recoveries : array[ParseAlternativeNode];

    public Recoveries : ReadOnlyCollection[ParseAlternativeNode]
    {
      [Memoize] get { ReadOnlyCollection(_recoveries) }
    }

    MekeMessage() : string
    {
      def expected = List();
      def skipedStatesCode(postfix : List[string], frame : RecoveryStackFrame, nextFrame : RecoveryStackFrame, startState : int, endState : int) : void
      {
        def res = frame.CodeForStates(startState, endState, true);
        when (res.Length != 0)
        {
          if (frame.IsTokenRule && nextFrame != null)
            postfix.Add($<#..$(nextFrame.CodeForStates(nextFrame.FailState, nextFrame.GetNextState(nextFrame.FailState), true); " ")#>);
          else
            postfix.Add($<#..$(res; " ")#>);
        }
      }
        
      foreach (node when node.IsTop in _recoveries)
      {
        def alternatives = node.GetFlatParseAlternatives();
          
        foreach (alternative in alternatives)
        {
          def prefixes = List();
          def postfix = List();
          def nodes = alternative.NToArray();
          def tokenIndex = Array.FindLastIndex(nodes, n => n.Frame.IsTokenRule);
          foreach (node in nodes with i)
          {
            when (tokenIndex >= 0 && i < tokenIndex)
              continue; // skip frames nested in token
                
            def nextIndex = i + 1;
            def nextFrame = if (nextIndex < nodes.Length) nodes[nextIndex].Frame else null;
            def frame = node.Frame;
            def parsingFailAtState = frame.FailState2;
            def recursionState     = frame.FailState;
            def endState = node.ParseAlternative.State;
            if (node.IsTop)
              skipedStatesCode(prefixes, frame, nextFrame, parsingFailAtState, endState);
            else
            {
              when (parsingFailAtState < recursionState)
                skipedStatesCode(prefixes, frame, nextFrame, parsingFailAtState, recursionState);
                  
              def startState = frame.GetNextState(recursionState);

              when (startState >= 0 && (startState < endState || endState < 0))
                skipedStatesCode(postfix, frame, nextFrame, startState, endState);
            }
          }
          prefixes.Reverse();
          prefixes.AddRange(postfix);
          expected.Add($<#..$(prefixes; " ")#>);
        }
      }
      def expected = expected;
      def msg = $"Expected: ..$(expected.Distinct()).";
      msg
    }
    
    public override Message : string { [Memoize] get { MekeMessage() } }

    public override DebugText : string { [Memoize] get { $<#..$(_recoveries.Filter(f => f.IsTop); "\n")#> } }
  }
}
