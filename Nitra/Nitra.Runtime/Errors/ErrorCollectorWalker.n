using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  public sealed class ErrorCollectorWalker : AstWalkerBase[Context]
  {
    public class Context
    {
      public mutable Inserted : list[INitraReflection * NSpan];
      public Parent : Context;
      public mutable IsLeaf : bool = true;
      
      public this(parent : Context)
      {
        Parent   = parent;
        Inserted = parent.Inserted;
      }
      
      public this()
      {
        Inserted = [];
      }
      
      public Add(ruleInfo : INitraReflection, span : NSpan) : void
      {
        Inserted ::= (ruleInfo, span);
        _ = Inserted;
      }
      
      public GetErrors(parseResult : ParseResult) : Seq[ExpectedError]
      {
        def result   = List();
        def inserted = Inserted.Reverse();
        mutable currSpan = NSpan(-1, -1);
        mutable infos    = List();
        def add(parseResult, currSpan, infos)
        {
          def loc = Location(parseResult.OriginalSource, currSpan);
          def error = ExpectedError(loc, infos);
          result.Add(error);
        }
        
        foreach ((e, span) in inserted)
        {
          when (currSpan.EndPos != span.EndPos)
          {
            when (currSpan.StartPos >= 0)
              add(parseResult, currSpan, infos);
            
            infos.Clear();
            currSpan = span;
          }
          
          infos.Add(e);
        }
        
        when (infos.Count > 0)
          add(parseResult, currSpan, infos);
        
        result
      }
    }
    
    //public Errors : List[ParseError] { get; default List();}
    public Errors : List[ExpectedError] { get; default List();}
    
    public this()
    {
    }

    public Walk(parseResult : ParseResult) : void
    {
      Walk(parseResult, Context());
            
      def getGroupKey(e : INitraReflection) : object
      {
        | SubruleInfo.TokenString as x => x.Sequence
        | _ => e
      }

      def errors = Errors.Distinct().OrderBy(e => e.Location.StartPos);//.Where(e => e.Expected.Count == 1 && e.Expected.All(x => x is SubruleInfo.TokenString));
      foreach (error in errors)
        parseResult.ReportError(error);
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      IgnoreParams();

      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
      }
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      IgnoreParams();

      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
      }
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnList(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListItem(astPtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : ParseResult, context : Context) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnListItem(astPtr, ruleInfo, startPos, endPos, parseResult, context);
    }
    
    public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : ParseResult, context : Context) : void
    {
      IgnoreParams();
      context.Add(ruleParser, NSpan(pos, pos));
    }

    public override WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : ParseResult, context : Context) : void
    {
      def newContext = Context(context);
      base.WalkSimple(startPos, endPos, ruleParser, parseResult, newContext);
      TryAddErrors(parseResult, newContext);
    }
    
    public override WalkExtensible(startPos : int, endPos : int, ruleParser : ExtensibleRuleParser, parseResult : ParseResult, context : Context) : void
    {
      def newContext = Context(context);
      base.WalkExtensible(startPos, endPos, ruleParser, parseResult, newContext);
      TryAddErrors(parseResult, newContext);
    }
    
    public override WalkPrefix(astPtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, context : Context) : void
    {
      def newContext = Context(context);
      base.WalkPrefix(astPtr, startPos, endPos, ruleParser, parseResult, newContext);
      TryAddErrors(parseResult, newContext);
    }

    public override WalkPostfix(astPtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, context : Context) : void
    {
      def newContext = Context(context);
      base.WalkPostfix(astPtr, startPos, endPos, ruleParser, parseResult, newContext);
      TryAddErrors(parseResult, newContext);
    }
    
    TryAddErrors(parseResult : ParseResult, context : Context) : void
    {
      when (context.Inserted != [] && context.Inserted : object != context.Parent?.Inserted && context.IsLeaf)
      {
        when (context.Parent != null)
          context.Parent.IsLeaf = false;
        
        foreach (e in context.GetErrors(parseResult))
          this.Errors.Add(e);
      }
    }
  }
}
