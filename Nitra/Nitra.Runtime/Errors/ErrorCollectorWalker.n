using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  public sealed class ErrorCollectorWalker : AstWalkerBase[Context.Node]
  {
    [Record]
    public variant Context
    {
      | Leaf { Skipped : INitraReflection; Span : NSpan; }
      | Node
        {
          IsAlternative : bool;
          [RecordIgnore] public Children : List[Context] = List();
          
          public Add(ruleInfo : INitraReflection, span : NSpan) : void
          {
            Children.Add(Context.Leaf(ruleInfo, span));
          }
        }
        
      public override ToString() : string
      {
        match (this)
        {
          | Leaf as x => x.Skipped + " " + x.Span
          | Node as n => (if (n.IsAlternative) "Alternatives=" else "Children=").ToString() + n.Children.Count + " Tokens=" + DebugTotalLength;
        }
      }
      
      DebugTotalLength : int
      {
        [Memoize]
        get
        {
          match (this)
          {
            | Leaf => 1
            | Node as n => n.Children.Sum(c => c.DebugTotalLength)
          }
        }
      }

      [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
      AsArray2 : array[Context]
      {
        get
        {
          match (this)
          {
            | Leaf => array(0)
            | Node as n => n.Children.ToArray()
          }
        }
      }
    }
    
    /*
    public class Context
    {
      public mutable Inserted : list[INitraReflection * NSpan];
      public Parent : Context;
      public mutable IsLeaf : bool = true;
      public mutable _skipped : int;
      
      public this(parent : Context)
      {
        Parent   = parent;
        Inserted = parent.Inserted;
      }
      
      public this()
      {
        Inserted = [];
      }
      
      public Add(ruleInfo : INitraReflection, span : NSpan) : void
      {
        Inserted ::= (ruleInfo, span);
        _ = Inserted;
      }
      
      public GetErrors(parseResult : ParseResult) : Seq[ExpectedError]
      {
        def result   = List();
        def inserted = Inserted.Reverse();
        mutable currSpan = NSpan(-1, -1);
        mutable infos    = List();
        def add(parseResult, currSpan, infos)
        {
          def loc = Location(parseResult.OriginalSource, currSpan);
          def error = ExpectedError(loc, infos);
          result.Add(error);
        }
        
        foreach ((e, span) in inserted)
        {
          when (currSpan.EndPos != span.EndPos)
          {
            when (currSpan.StartPos >= 0)
              add(parseResult, currSpan, infos);
            
            infos.Clear();
            currSpan = span;
          }
          
          infos.Add(e);
        }
        
        when (infos.Count > 0)
          add(parseResult, currSpan, infos);
        
        result
      }
    }
    */

    _simpleNodes     : Hashtable[SimpleRuleParser * NSpan, Context.Node] = Hashtable();
    _extensibleNodes : Hashtable[ExtensibleRuleParser * NSpan, Context.Node] = Hashtable();
    
    public Errors : List[ExpectedError] { get; default List();}
    
    public this()
    {
    }

    static ToDot(parseResult : ParseResult, context : Context) : string
    {
      def graphLabel = X.DotEscape(parseResult.DebugText);
      def edges = List();
      def nodes = List();
      def nodesIdMap = Hashtable();
      mutable id = 0;
      def makeNodes(context : Context)
      {
        when (nodesIdMap.ContainsKey(context))
          return;
          
        id++;
        nodesIdMap.Add(context, id);
        //def makeName()
        def name = "Node_" + id;
        
        nodes.Add($<#$name [label="$(X.DotEscape(context.ToString()))"]#>);
        
        when (context is Context.Node as node)
          foreach (child in node.Children)
            makeNodes(child);
      }
      def visited = HashSet();
      def makeEdges(context : Context)
      {
        unless (visited.Add(context))
          return;
          
        def id1 = nodesIdMap[context];
        def name1 = "Node_" + id1;
        
        when (context is Context.Node as node)
          foreach (child in node.Children)
          {
            def id2 = nodesIdMap[child];
            def name2 = "Node_" + id2;
            edges.Add($<#$name1 -> $name2 [label="$(X.DotEscape(child.ToString()))"]#>);
            makeEdges(child);
          }
      }
      makeNodes(context);
      makeEdges(context);
      def content = $<#
        digraph RecoveryParser
        {
          rankdir=LR;
          compound=true;
          label="$graphLabel";
          fontname="Consolas";
    
          ..$(nodes; "\r\n          ")
    
          ..$(edges; "\r\n          ")
        }
      #>;
      
      content
    }
    
    public Walk(parseResult : ParseResult) : void
    {
      _simpleNodes.Clear();
      _extensibleNodes.Clear();
      def context = Context.Node(isAlternative=false);
      Walk(parseResult, context);

      X.ExecuteDot(ToDot(parseResult, context));
      
      def errors = Errors.Distinct();
      
      def aggregateErrors(errors) : Seq[ParseError]
      {
        def groups = errors.GroupBy(e => e.Location.EndPos);
        def result = List();
        foreach (group in groups)
        {
          def xs = group.ToArray();
          
          if (xs.Length == 1)
            result.Add(xs[0]);
          else
            result.Add(CompositeExpectedError(xs[0].Location, xs));
        }
        
        result.OrderBy(e => e.Location.StartPos).ThenBy(e => e.Location.EndPos)
      }
      
      def aggregatedErrors = aggregateErrors(errors);
      
      foreach (error in aggregatedErrors)
        parseResult.ReportError(error);
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      IgnoreParams();

      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
      }
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      IgnoreParams();

      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
      }
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnList(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListItem(astPtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanParseEmptyString)
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      base.OnListItem(astPtr, ruleInfo, startPos, endPos, parseResult, context);
    }
    
    public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : ParseResult, context : Context.Node) : void
    {
      IgnoreParams();
      context.Add(ruleParser, NSpan(pos, pos));
    }

    public override WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : ParseResult, context : Context.Node) : void
    {
      mutable newContext;
      def key = (ruleParser, NSpan(startPos, endPos));
      unless (_simpleNodes.TryGetValue(key, out newContext))
      {
        newContext = Context.Node(isAlternative=true);
        _simpleNodes.Add(key, newContext);
        base.WalkSimple(startPos, endPos, ruleParser, parseResult, newContext);
      }
      AddErrors(context, newContext);
    }
    
    public override WalkExtensible(startPos : int, endPos : int, ruleParser : ExtensibleRuleParser, parseResult : ParseResult, context : Context.Node) : void
    {
      mutable newContext;
      def key = (ruleParser, NSpan(startPos, endPos));
      unless (_extensibleNodes.TryGetValue(key, out newContext))
      {
        newContext = Context.Node(isAlternative=true);
        _extensibleNodes.Add(key, newContext);
        base.WalkExtensible(startPos, endPos, ruleParser, parseResult, newContext);
      }
      AddErrors(context, newContext);
    }
    
    public override WalkPrefix(astPtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, context : Context.Node) : void
    {
      def newContext = Context.Node(isAlternative=false);
      base.WalkPrefix(astPtr, startPos, endPos, ruleParser, parseResult, newContext);
      AddErrors(context, newContext);
    }

    public override WalkPostfix(astPtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, context : Context.Node) : void
    {
      def newContext = Context.Node(isAlternative=false);
      base.WalkPostfix(astPtr, startPos, endPos, ruleParser, parseResult, newContext);
      AddErrors(context, newContext);
    }
    
    AddErrors(context : Context.Node, newContext : Context.Node) : void
    {
      match (newContext.Children.Count)
      {
        | 0 => ()
        | 1 => context.Children.Add(newContext.Children[0])
        | _ => context.Children.Add(newContext);
      }
    }
    
    //TryAddErrors(parseResult : ParseResult, context : Context) : void
    //{
    //  when (context.Inserted != [] && context.Inserted : object != context.Parent?.Inserted && context.IsLeaf)
    //  {
    //    when (context.Parent != null)
    //      context.Parent.IsLeaf = false;
        
    //    foreach (e in context.GetErrors(parseResult))
    //      this.Errors.Add(e);
    //  }
    //}
  }
}
