using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Errors
{
  public class ExpectedSubrulesError : ParseError
  {
    public Expected : ReadOnlyCollection[ParsedSequence * ParsedSubrule];
    
    public this(loc : Location, expected : Seq[ParsedSequence * ParsedSubrule])
    {
      base(loc);
      Expected = ReadOnlyCollection(expected.ToArray());
    }
    
    public override Message : string { [Memoize] get { MekeMessage() } }

    public override DebugText : string { [Memoize] get { $<#..$(Expected; "\n"; ((seq, subrule)) => $"$subrule $seq")#> } }
    
    MekeMessage() : string
    {
      $"Expected: ..$(SubruleToString(Expected))"
    }
    
    static SubruleToString(expected : Seq[ParsedSequence * ParsedSubrule]) : Seq[string]
    {
      expected.Select(((seq, subrule)) => 
        //if (subrule.IsEmpty)
          seq.ParsingSequence.States[subrule.State].Description
        //else
        //  ("'" + text.Substring(subrule.Begin, subrule.Length)) + "'"
          );
    }
    
    public override ToString() : string{ this.Location + ": " + Message }
  }
}
