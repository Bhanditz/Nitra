using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;
using Nemerle;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;
using Nemerle.Collections;
using Nemerle.Late;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Linq;
using System.Collections.ObjectModel;

using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra.Runtime
{
  [Record]
  public struct TokenCount
  {
    public AllTokens : int;
    public KeyTokens : int;

    private class TokenCounter : AstWalkerBase
    {
      public mutable AllTokens : int = 0;
      public mutable KeyTokens : int = 0;
      public override OnRegularCall      (ruleInfo : RuleInfo.RegularCall,       startPos : int, endPos : int) : void { IgnoreParams(); when (endPos >= 0) { ++AllTokens; when (ruleInfo.Descriptor.IsKeyToken) ++KeyTokens; } }
      public override OnTokenString      (ruleInfo : RuleInfo.TokenString,       startPos : int, endPos : int) : void { IgnoreParams(); when (endPos >= 0) { ++AllTokens; when (ruleInfo.IsKeyToken) ++KeyTokens; } }
      public override OnSimpleCall       (ruleInfo : RuleInfo.SimpleCall,        startPos : int, endPos : int) : bool { IgnoreParams(); if (ruleInfo.RuleParser.IsTokenRule) { ++AllTokens; when (ruleInfo.RuleParser.Descriptor.IsKeyToken) ++KeyTokens; false } else true }
      public override OnExtensibleCall   (ruleInfo : RuleInfo.ExtensibleCall,    startPos : int, endPos : int) : bool { IgnoreParams(); if (ruleInfo.RuleParser.IsTokenRule) { ++AllTokens; when (ruleInfo.RuleParser.Descriptor.IsKeyToken) ++KeyTokens; false } else true }
      public override OnOption           (ruleInfo : RuleInfo.Option,            startPos : int, endPos : int) : bool { IgnoreParams(); true }
      public override OnList             (ruleInfo : RuleInfo.List,              startPos : int, endPos : int) : bool { IgnoreParams(); true }
      public override OnListWithSeparator(ruleInfo : RuleInfo.ListWithSeparator, startPos : int, endPos : int) : bool { IgnoreParams(); true }
    }

    public static CreateFromStackFrame(frame : RecoveryStackFrame) : TokenCount
    {
      def counter = TokenCounter();
      match (frame)
      {
        | Root                       => ()
        | Extensible        as frame => _ = counter.WalkExtensible(frame.StartPos, frame.RuleParser, frame.ParseResult)
        | ListBody          as frame => _ = counter.Walk(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.ParseResult)
        | ListSeparator     as frame => _ = counter.Walk(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.ParseResult)
        | Rule              as frame => _ = counter.Walk(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.ParseResult)
        | ExtensiblePrefix  as frame => _ = counter.WalkExtension(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.RuleParser, frame.ParseResult)
        | ExtensiblePostfix as frame => _ = counter.WalkExtension(frame.AstHandle.AstPtr, frame.AstHandle.TextPos, frame.RuleParser, frame.ParseResult)
      }
      TokenCount(counter.AllTokens, counter.KeyTokens);
    }
  }
}
