using Nemerle;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

[assembly: DefineSurround("Magic", true,
  def parentNodes = PushNodes(),
  PopNodes(parentNodes, name, startPos, endPos))]

namespace Nitra.Runtime.Reflection
{
  internal sealed class ReflectionWalker : AstWalkerBase
  {
    private mutable nodes : List[ReflectionStruct] = List();

    private static emptyNodes : ReadOnlyCollection[ReflectionStruct] = ReadOnlyCollection(array[]);

    private PushNodes() : List[ReflectionStruct]
    {
      def parentNodes = nodes;
      nodes = List();
      parentNodes
    }

    private PopNodes(parentNodes : List[ReflectionStruct], name : string, startPos : int, endPos : int) : void
    {
      def children = if (nodes.Count > 0) ReadOnlyCollection(nodes.ToArray()) else emptyNodes;
      nodes = parentNodes;
      PutNode(name, startPos, endPos, children);
    }

    private PutNode(name : string, startPos : int, endPos : int, children : ReadOnlyCollection[ReflectionStruct]) : void
    {
      def node =
        if (endPos >= 0)
          ReflectionStruct(name, NSpan(startPos, endPos), children);
        else
          ReflectionStruct("Failed: " + name, NSpan(startPos, startPos), children);
      nodes.Add(node);
    }

    public override OnList(ruleInfo : RuleInfo.List, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      def name = 
        if (ruleInfo.IsOptimized)
          "SkipAnyPattern: " + ruleInfo.Description
        else
          "List: " + ruleInfo.Description;
      surroundwith (Magic)
        base.OnList(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnListWithSeparator(ruleInfo : RuleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      def name = "ListWithSeparator: " + ruleInfo.Description;
      surroundwith (Magic)
        base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnOption(ruleInfo : RuleInfo.Option, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      def name = "Option: " + ruleInfo.Description;
      surroundwith (Magic)
        base.OnOption(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnSimpleCall(ruleInfo : RuleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      def name = ruleInfo.RuleParser.Descriptor.Name;
      surroundwith (Magic)
        base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnExtensibleCall(ruleInfo : RuleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      def name = ruleInfo.RuleParser.Descriptor.Name;
      surroundwith (Magic)
        base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult);
    }

    public override OnRegularCall(ruleInfo : RuleInfo.RegularCall, startPos : int, endPos : int, _parseResult : ParseResult) : void
    {
      def name = ruleInfo.Descriptor.Name;
      PutNode(name, startPos, endPos, emptyNodes);
    }

    public override OnTokenString(ruleInfo : RuleInfo.TokenString, startPos : int, endPos : int, _parseResult : ParseResult) : void
    {
      def name = ruleInfo.Description;
      PutNode(name, startPos, endPos, emptyNodes);
    }

    public override OnMarker(ruleInfo : RuleInfo.Marker, startPos : int, endPos : int, _parseResult : ParseResult) : void
    {
      def name = ruleInfo.Description;
      PutNode(name, startPos, endPos, emptyNodes);
    }

    public override OnEmpty(_ruleInfo : RuleInfo.Empty, startPos : int, endPos : int, _parseResult : ParseResult) : void
    {
      def name = "<Empty>";
      PutNode(name, startPos, endPos, emptyNodes);
    }

    public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : ParseResult) : void
    {
      def name = "Missed: " + ruleParser.Code;
      PutNode(name, pos, pos, emptyNodes);
    }
    
    public GetResult() : array[ReflectionStruct]
    {
      nodes.ToArray()
    }
  }
}
