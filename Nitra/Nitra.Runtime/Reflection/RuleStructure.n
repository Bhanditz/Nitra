using Nitra.Internal;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  public variant SequenceInfo
  {
    public Id : int { get; }
    public Description : string { get; }
    public Subrules : array[SubruleInfo] { get; }
    public SubrulesWithMarkers : array[SubruleInfo] { get; }

    | Ast
    | Option
    | List
    | ListWithSeparatorRule
    | ListWithSeparatorSeparator

    public this(id : int, description : string, subrulesWithMarkers : array[SubruleInfo])
    {
      Id = id;
      Description = description;
      Subrules = subrulesWithMarkers.FilterToArray(info => !(info is SubruleInfo.Marker));
      SubrulesWithMarkers = subrulesWithMarkers;
    }

    public GetSize(astPtr : int, parseResult : ParseResult) : int
    {
      assert3(parseResult.ast[astPtr + ExtensibleRuleParser.AstOfs.State] == ParseResult.AstParsedState);
      mutable size = 0;
      foreach (subrule in Subrules)
        size += parseResult.GetSize(astPtr + subrule.Offset);
      size;
    }

    public override ToString() : string
    {
      Description
    }
  }
}
