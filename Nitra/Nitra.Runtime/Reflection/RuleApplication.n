using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  public interface IRuleApplication
  {
    Position    : int { get; }
    Size        : int { get; }
    HasChildren : bool { get; }
  }

  [Record]
  public struct RuleApplication : IRuleApplication
  {
    private _parseResult : ParseResult;
    public Position   : int           { get; }
    public RawTreePointer : int           { get; }

    private Sequence             : SequenceInfo          { get { _parseResult.GetSequenceInfo(RawTreePointer) } }
    public FirstFailedIndex : int
    {
      get
      {
        ret:
        {
          def state = _parseResult.rawTree[RawTreePointer + 2];
          when (state != ParseResult.AstParsedState)
          {
            foreach (rule in Sequence.Subrules with i)
              when (rule.State > state)
                ret(i - 1);

            ret(Sequence.Subrules.Length - 1);
          }
          -1
        }
      }
    }

    public HasChildren : bool { get { Sequence.Subrules.Length > 0 } }
    public GetChildren() : ReadOnlyCollection[RuleCall]
    {
      def calls = List();
      mutable pos = Position;
      foreach (ruleInfo in Sequence.Subrules)
      {
        def size = _parseResult.GetSize(RawTreePointer + ruleInfo.Offset);//TODO: FIXME Handle state
        calls.Add(RuleCall(_parseResult, ruleInfo, pos, size));
        pos += size;
      }
      ReadOnlyCollection(calls)
    }

    public Size : int
    {
      get
      {
        mutable size = 0;
        foreach (subrule in Sequence.Subrules)//TODO: FIXME Handle state
          size += _parseResult.GetSize(RawTreePointer + subrule.Offset);
        size
      }
    }

    public override ToString() : string { Sequence.ToString() }
  }

  [Record]
  public struct RuleCall : IRuleApplication
  {
    private _parseResult  : ParseResult;
    public SubruleInfo       : SubruleInfo { get; }
    public Position       : int { get; }
    public Size           : int { get; }

    public HasChildren : bool
    {
      get
      {
        if (Size == 0)
          false
        else match (SubruleInfo)
        {
          | Empty | RegularCall | TokenString | ExtensibleCall | Marker => false
          | SimpleCall | Option | List | ListWithSeparator | ListItem   => true
        }
      }
    }

    private static _empty : ReadOnlyCollection[RuleApplication] = ReadOnlyCollection(array(0));
    public GetChildren() : ReadOnlyCollection[RuleApplication]
    {
      def getById(id, pos)
      {
        ret:
        {
          for (mutable rawTreePtr = _parseResult.memoize[pos]; rawTreePtr > 0; rawTreePtr = _parseResult.rawTree[rawTreePtr + 1])
            when (_parseResult.rawTree[rawTreePtr] == id)
              ret(RuleApplication(_parseResult, pos, rawTreePtr));
          assert(false);
        }
      }
      if (Size == 0)
        _empty
      else match (SubruleInfo)
      {
        | ListItem => assert(false)
        | Empty
        | RegularCall
        | TokenString
        | ExtensibleCall
        | Marker         => _empty

        | ListWithSeparator          (rule, separator, _, _, _) =>
          def calls = List();
          mutable isRule = true;
          mutable pos = Position;
          mutable endPos = Position + Size;
          while (pos < endPos)
          {
            def call = getById(if (isRule) rule.Id else separator.Id, pos);
            isRule = !isRule;
            calls.Add(call);
            pos += call.Size;
          }
          assert(pos == endPos);
          ReadOnlyCollection(calls);

        | SimpleCall                 (ruleParser) => ReadOnlyCollection(array[getById(ruleParser.RuleId, Position)])
        | Option                     (rule) => ReadOnlyCollection(array[getById(rule.Id, Position)]);
        | List                       (rule, _, _, _) =>
          def calls = List();
          mutable pos = Position;
          mutable endPos = Position + Size;
          while (pos < endPos)
          {
            def call = getById(rule.Id, pos);
            calls.Add(call);
            pos += call.Size;
          }
          assert(pos == endPos);
          ReadOnlyCollection(calls);
      }
    }

    public override ToString() : string { SubruleInfo.ToString() }
  }
}
