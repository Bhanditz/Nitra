using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  public variant SequenceInfo : INitraReflection
  {
    public Parser              : IParserInfo         { get; }
    public Id                  : int                 { get; }
    public RawSize             : int                 { get; }
    public RuleName            : string              { get; }
    public Description         : string              { get; }
    public IsVoid              : bool;
    public Subrules            : array[SubruleInfo]  { get; }
    public SubrulesWithMarkers : array[SubruleInfo]  { get; }
    public ParsingSequence     : ParsingSequence     { get; internal set; }

    public IsExtension         : bool { get { this is Root && Parser is ExtensionRuleParser } }
    public IsPrefix            : bool { get { this is Root && Parser is ExtensionRuleParser(Descriptor = PrefixRuleDescriptor) } }
    public IsPostfix           : bool { get { this is Root && Parser is ExtensionRuleParser(Descriptor = PostfixRuleDescriptor) } }
    public IsSimple            : bool { get { this is Root && Parser is SimpleRuleParser    } }
    public CanParseEmptyString : bool { get { MandatoryTokenCount == 0 } }

    | Root
    | Option
    | ListItem
    | ListWithSeparatorItem
    | ListWithSeparatorSeparator
    | Predicate { IsAnd : bool }

    public this(parser : IParserInfo, id : int, rawSize : int, ruleName : string, description : string, isVoid : bool, subrulesWithMarkers : array[SubruleInfo])
    {
      Parser              = parser;
      Id                  = id;
      RawSize             = rawSize;
      RuleName            = ruleName;
      Description         = description;
      Subrules            = subrulesWithMarkers.FilterToArray(info => !(info is SubruleInfo.Marker));
      SubrulesWithMarkers = subrulesWithMarkers;
      IsVoid              = isVoid;

      foreach (subrule in subrulesWithMarkers)
        subrule.Owner = this;

      foreach (subrule in SubrulesWithMarkers with i)
      {
        subrule.Index = -1;
        subrule.IndexWithMarkers = i;
      }

      foreach (subrule in Subrules with i)
        subrule.Index = i;
    }

    public MandatoryTokenCount : int { get; internal set; }

    /// Return null if it's a not extension rule
    public ExtensionRuleDescriptorOpt : ExtensibleRuleDescriptor
    {
      get
      {
        when (this is Root)
        when (Parser is ExtensionRuleParser as parser)
          return (parser.Descriptor :> ExtensionRuleDescriptor).BaseRule;
        null
      }
    }

    public GetSize(rawTreePtr : int, parseResult : ParseResult) : int
    {
      assert3(parseResult.rawTree[rawTreePtr + ExtensibleRuleParser.RawTreeOfs.State] == ParseResult.RawTreeParsedState);
      mutable size = 0;
      foreach (subrule in Subrules)
        size += parseResult.GetSize(rawTreePtr + subrule.Offset);
      size;
    }

    public FullName  : string { get { RuleName } }
    public ShortName : string { get { RuleName } }
    public IsMarker  : bool   { get { false } }

    public override ToString() : string
    {
      Description
    }
  }
}
