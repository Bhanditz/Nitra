using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  [Record]
  public sealed class SequenceAst[T1, T2] : Ast where T1 : IAst where T2 : IAst
  {
    private static applyItem1 : bool = !typeof(T1).IsValueType;
    private static applyItem2 : bool = !typeof(T2).IsValueType;

    public override Location : Nitra.Location { get }
    public          Item1    : T1 { get }
    public          Item2    : T2 { get }

    public override Apply(visitor : AstVisitor) : Ast
    {
      visitor.Enter(this);

      mutable isDirty;

      mutable newItem1 = Item1;
      when (applyItem1)
      {
        newItem1 = visitor.Visit(Item1 :> Ast) :> T1;
        isDirty |= !ReferenceEquals(newItem1, Item1);
      }

      mutable newItem2 = Item2;
      when (applyItem2)
      {
        newItem2 = visitor.Visit(Item2 :> Ast) :> T2;
        isDirty |= !ReferenceEquals(newItem2, Item2);
      }

      def result =
        if (isDirty)
          SequenceAst(this.Location, newItem1, newItem2)
        else
          this;

      visitor.Leave(result, isDirty);
      result
    }

    public override Write(astWriter : Nitra.Serialization.IAstWriter) : void
    {
      _ = astWriter;
      throw System.NotImplementedException()
    }
  }
}
