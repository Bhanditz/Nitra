using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  [Record]
  public variant OptionAst[T] : Ast where T : IAst
  {
    | Some
      {
        private static applyItem : bool = !typeof(T).IsValueType;

        Item : T;

        public override Apply(visitor : AstVisitor) : Ast
        {
          visitor.Enter(this);
          mutable result = this;
          mutable isDirty;
          when (applyItem)
          {
            def newItem = visitor.Visit(Item :> Ast) :> T;
            unless (ReferenceEquals(newItem, Item))
            {
              isDirty = true;
              result = OptionAst.Some(this.Location, newItem)
            }
          }
          visitor.Leave(result, isDirty);
          result
        }
      }

    | None
      {
        public override Apply(visitor : AstVisitor) : Ast
        {
          visitor.Enter(this);
          visitor.Leave(this, false);
          this
        }
      }

    public override Location : Nitra.Location { get }

    public override Write(astWriter : Nitra.Serialization.IAstWriter) : void
    {
      _ = astWriter;
      throw System.NotImplementedException()
    }
  }
}
