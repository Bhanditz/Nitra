using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal sealed class RecoveryModeOptionAstReader[TLoader, TItem] : RecoveryModeParseTreeReader[RecoveryModeAstReaderContext[TLoader, TItem], OptionParseTree[TItem]]
    where TLoader : IParseTree
    where TItem   : TLoader
  {
    public static Instance : this;

    static this() { Instance = RecoveryModeOptionAstReader() }

    protected override MakeEmptyParseTree(parseResult : Nitra.ParseResult, pos : int, context : RecoveryModeAstReaderContext[TLoader, TItem]) : OptionParseTree[TItem]
    {
      _ = context;
      OptionParseTree.None(Location(parseResult, pos, pos))
    }

    protected override MakeAmbiguousParseTree(ambiguities : array[Nitra.OptionParseTree[TItem]], context : RecoveryModeAstReaderContext[TLoader, TItem]) : Nitra.OptionParseTree[TItem]
    {
      _ = context;
      AmbiguousOptionParseTree(ambiguities)
    }

    protected override ReadParseTree(parseResult : Nitra.ParseResult, startPos : int, endPos : int, recoveredSubruleIndex : int, context : RecoveryModeAstReaderContext[TLoader, TItem]) : OptionParseTree[TItem]
    {
      def item = context.ItemLoader.ReadSequence(context.ItemSequenceId, recoveredSubruleIndex) |> context.ItemConverter.Cast;
      OptionParseTree.Some(Location(parseResult, startPos, endPos), item)
    }

    protected override ReadParseTreeInStandardMode(parseResult : ParseResult, startPos : int, endPos : int, context : RecoveryModeAstReaderContext[TLoader, TItem]) : OptionParseTree[TItem]
    {
      mutable pos = startPos;
      def item = context.ItemLoader.ReadSequence(context.ItemSequenceId, ref pos) |> context.ItemConverter.Cast;
      assert(pos == endPos);
      OptionParseTree.Some(Location(parseResult, startPos, endPos), item)
    }
  }
}
