using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  [Record]
  internal struct RecoveryModeListAstReaderContext[TLoader, TItem]
    where TLoader : IAst
    where TItem : TLoader
  {
    public ItemLoader     : IAstSequenceLoader[TLoader];
    public ItemSequenceId : int;
    public ItemConverter  : IAstCast[TLoader, TItem];
  }

  internal class RecoveryModeListAstReader[TLoader, TItem] : RecoveryModeBaseListAstReader[RecoveryModeListAstReaderContext[TLoader, TItem], SCG.List[TItem], ListAst[TItem]]
    where TLoader : IAst
    where TItem   : TLoader
  {
    public static Instance : this;

    static this() { Instance = RecoveryModeListAstReader() }

    protected sealed override MakeAmbiguousAst(ambiguities : array[ListAst[TItem]]) : ListAst[TItem]
    {
      AmbiguousListAst(ambiguities)
    }

    protected sealed override MakeEmptyAst(parseResult : ParseResult, pos : int, context : RecoveryModeListAstReaderContext[TLoader, TItem]) : ListAst[TItem]
    {
      _ = context;
      EmptyListAst(Location(parseResult.OriginalSource, pos, pos))
    }

    protected sealed override CreateListBuffer() : SCG.List[TItem]
    {
      SCG.List()
    }

    protected override ReadListItem(stateNumber : int, parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, listBuffer : SCG.List[TItem], context : RecoveryModeListAstReaderContext[TLoader, TItem]) : void
    {
      _ = stateNumber;
      RecoveryModeSequenceAstReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeSequenceAstReaderContext(context.ItemLoader, context.ItemSequenceId))
        |> context.ItemConverter.Cast
        |> listBuffer.Add;
    }

    protected sealed override CreateListAst(parseResult : ParseResult, startPos : int, endPos : int, listBuffer : SCG.List[TItem]) : ListAst[TItem]
    {
      ConcreteListAst(Location(parseResult.OriginalSource, startPos, endPos), listBuffer)
    }
  }
}
