using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal sealed class RecoveryModeListWithSeparatorAstReader[TItemLoader, TItem, TSeparatorLoader, TSeparator] :
    RecoveryModeBaseListAstReader[
      /* TContext    */ RecoveryModeAstReaderContext[TItemLoader, TItem] * RecoveryModeAstReaderContext[TSeparatorLoader, TSeparator],
      /* TListBuffer */ SCG.List[TItem] * SCG.List[TSeparator],
      /* TAst        */ SequenceAst[ListAst[TItem], ListAst[TSeparator]]]
    where TItemLoader      : IAst
    where TItem            : TItemLoader
    where TSeparatorLoader : IAst
    where TSeparator       : TSeparatorLoader
  {
    public static Instance : this;

    static this() { Instance = RecoveryModeListWithSeparatorAstReader() }

    protected override MakeAmbiguousAst(ambiguities : array[SequenceAst[ListAst[TItem], ListAst[TSeparator]]]) : SequenceAst[ListAst[TItem], ListAst[TSeparator]]
    {
      AmbiguousSequenceAst(ambiguities)
    }

    protected override MakeEmptyAst(parseResult : ParseResult, pos : int, context : RecoveryModeAstReaderContext[TItemLoader, TItem] * RecoveryModeAstReaderContext[TSeparatorLoader, TSeparator]) : SequenceAst[ListAst[TItem], ListAst[TSeparator]]
    {
      _ = context;
      def loc = Location(parseResult.OriginalSource, pos, pos);
      ConcreteSequenceAst(loc, EmptyListAst(loc), EmptyListAst(loc))
    }

    protected override CreateListBuffer() : SCG.List[TItem] * SCG.List[TSeparator]
    {
      (SCG.List(), SCG.List())
    }

    protected override ReadListItem(stateNumber : int, parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, listBuffer : SCG.List[TItem] * SCG.List[TSeparator], context : RecoveryModeAstReaderContext[TItemLoader, TItem] * RecoveryModeAstReaderContext[TSeparatorLoader, TSeparator]) : void
    {
      match (stateNumber)
      {
        | 0 =>
          RecoveryModeSequenceAstReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeSequenceAstReaderContext(context[0].ItemLoader, context[0].ItemSequenceId))
            |> context[0].ItemConverter.Cast
            |> listBuffer[0].Add

        | 1 =>
          RecoveryModeSequenceAstReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeSequenceAstReaderContext(context[1].ItemLoader, context[1].ItemSequenceId))
            |> context[1].ItemConverter.Cast
            |> listBuffer[1].Add

        | _ => assert(false, "Unknown ListWithSeparator state number")
      }
    }

    protected override CreateListAst(parseResult : ParseResult, startPos : int, endPos : int, listBuffer : SCG.List[TItem] * SCG.List[TSeparator]) : SequenceAst[ListAst[TItem], ListAst[TSeparator]]
    {
      def loc = Location(parseResult.OriginalSource, startPos, endPos);
      ConcreteSequenceAst(loc, ConcreteListAst(loc, listBuffer[0]), ConcreteListAst(loc, listBuffer[1]))
    }
  }
}
