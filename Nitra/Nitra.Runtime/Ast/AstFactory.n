using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Internal
{
  public module AstFactory
  {
    public CreateOption[TLoader, TItem](loader : IAstSequenceLoader[TLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, pos : ref int) : OptionAst[TItem]
      where TLoader : IAst
      where TItem   : TLoader
    {
      if (parseResult.GetSize(astPtr + offset) > 0)
      {
        def optionStartPos = pos;
        def item           = loader.ReadSequence(itemSequenceId, ref pos) :> TItem;
        OptionAst.Some(Location(parseResult.OriginalSource, optionStartPos, pos), item)
      }
      else
        OptionAst.None(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateList[TLoader, TItem](loader : IAstSequenceLoader[TLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, pos : ref int) : ListAst[TItem]
      where TLoader : IAst
      where TItem   : TLoader
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer = SCG.List(16);
        def listStartPos = pos;
        do
        {
          def item = loader.ReadSequence(itemSequenceId, ref pos) :> TItem;
          itemBuffer.Add(item);
        }
        while (pos < listEnd);
        assert(pos == listEnd);

        ListAst(Location(parseResult.OriginalSource, listStartPos, listEnd), itemBuffer)
      }
      else
        ListAst(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateListWithSeparator[TItemLoader, TItem, TSeparatorLoader, TSeparator](itemLoader : IAstSequenceLoader[TItemLoader], separatorLoader : IAstSequenceLoader[TSeparatorLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, separatorSequenceId : int, isHangingSeparator : bool, pos : ref int) : SequenceAst[ListAst[TItem], ListAst[TSeparator]]
      where TItemLoader      : IAst
      where TItem            : TItemLoader
      where TSeparatorLoader : IAst
      where TSeparator       : TSeparatorLoader
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer      = SCG.List(16);
        def separatorBuffer = SCG.List(16);
        def listStartPos    = pos;
        if (isHangingSeparator)
        {
          def loop()
          {
            def item = itemLoader.ReadSequence(itemSequenceId, ref pos) :> TItem;
            itemBuffer.Add(item);

            if (pos < listEnd)
            {
              def separator = separatorLoader.ReadSequence(separatorSequenceId, ref pos) :> TSeparator;
              separatorBuffer.Add(separator);

              if (pos < listEnd)
                loop();
              else
                assert(pos == listEnd);
            }
            else
              assert(pos == listEnd);
          }
          loop();
        }
        else
        {
          def loop()
          {
            def item = itemLoader.ReadSequence(itemSequenceId, ref pos) :> TItem;
            itemBuffer.Add(item);

            if (pos < listEnd)
            {
              def separator = separatorLoader.ReadSequence(separatorSequenceId, ref pos) :> TSeparator;
              separatorBuffer.Add(separator);

              loop();
            }
            else
              assert(pos == listEnd);
          }
          loop();
        }

        def loc = Location(parseResult.OriginalSource, listStartPos, listEnd);
        SequenceAst(loc, ListAst(loc, itemBuffer), ListAst(loc, separatorBuffer))
      }
      else
      {
        def loc = Location(parseResult.OriginalSource, pos, pos);
        SequenceAst(loc, ListAst(loc), ListAst(loc))
      }
    }

    public CreateListWithSeparatorOnlyItems[TItemLoader, TItem, TSeparatorLoader](itemLoader : IAstSequenceLoader[TItemLoader], separatorLoader : IAstSequenceLoader[TSeparatorLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, separatorSequenceId : int, isHangingSeparator : bool, pos : ref int) : ListAst[TItem]
      where TItemLoader      : IAst
      where TItem            : TItemLoader
      where TSeparatorLoader : IAst
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer      = SCG.List(16);
        def listStartPos    = pos;
        if (isHangingSeparator)
        {
          def loop()
          {
            def item = itemLoader.ReadSequence(itemSequenceId, ref pos) :> TItem;
            itemBuffer.Add(item);

            if (pos < listEnd)
            {
              _ = separatorLoader.ReadSequence(separatorSequenceId, ref pos);

              if (pos < listEnd)
                loop();
              else
                assert(pos == listEnd);
            }
            else
              assert(pos == listEnd);
          }
          loop();
        }
        else
        {
          def loop()
          {
            def item = itemLoader.ReadSequence(itemSequenceId, ref pos) :> TItem;
            itemBuffer.Add(item);

            if (pos < listEnd)
            {
              _ = separatorLoader.ReadSequence(separatorSequenceId, ref pos);

              loop();
            }
            else
              assert(pos == listEnd);
          }
          loop();
        }

        ListAst(Location(parseResult.OriginalSource, listStartPos, listEnd), itemBuffer)
      }
      else
        ListAst(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateListWithSeparatorOnlySeparators[TItemLoader, TSeparatorLoader, TSeparator](itemLoader : IAstSequenceLoader[TItemLoader], separatorLoader : IAstSequenceLoader[TSeparatorLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, separatorSequenceId : int, isHangingSeparator : bool, pos : ref int) : ListAst[TSeparator]
      where TItemLoader      : IAst
      where TSeparatorLoader : IAst
      where TSeparator       : TSeparatorLoader
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def separatorBuffer = SCG.List(16);
        def listStartPos    = pos;
        if (isHangingSeparator)
        {
          def loop()
          {
            _ = itemLoader.ReadSequence(itemSequenceId, ref pos);

            if (pos < listEnd)
            {
              def separator = separatorLoader.ReadSequence(separatorSequenceId, ref pos) :> TSeparator;
              separatorBuffer.Add(separator);

              if (pos < listEnd)
                loop();
              else
                assert(pos == listEnd);
            }
            else
              assert(pos == listEnd);
          }
          loop();
        }
        else
        {
          def loop()
          {
            _ = itemLoader.ReadSequence(itemSequenceId, ref pos);

            if (pos < listEnd)
            {
              def separator = separatorLoader.ReadSequence(separatorSequenceId, ref pos) :> TSeparator;
              separatorBuffer.Add(separator);

              loop();
            }
            else
              assert(pos == listEnd);
          }
          loop();
        }

        ListAst(Location(parseResult.OriginalSource, listStartPos, listEnd), separatorBuffer)
      }
      else
        ListAst(Location(parseResult.OriginalSource, pos, pos))
    }
  }
}
