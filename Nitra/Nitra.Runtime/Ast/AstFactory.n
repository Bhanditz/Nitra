using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  public module AstFactory
  {
    public CreateOption[TLoader, TItem](loader : IAstSequenceLoader[TLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, pos : ref int) : OptionAst[TItem]
      where TLoader : IAst
      where TItem   : TLoader
    {
      if (parseResult.GetSize(astPtr + offset) > 0)
      {
        def optionStartPos = pos;
        def item           = loader.ReadSequence(itemSequenceId, ref pos) :> TItem;
        OptionAst.Some(Location(parseResult.OriginalSource, optionStartPos, pos), item)
      }
      else
        OptionAst.None(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateList[TLoader, TItem](loader : IAstSequenceLoader[TLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, pos : ref int) : ListAst[TItem]
      where TLoader : IAst
      where TItem   : TLoader
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer = SCG.List(16);
        def listStartPos = pos;
        do
        {
          def item = loader.ReadSequence(itemSequenceId, ref pos) :> TItem;
          itemBuffer.Add(item);
        }
        while (pos < listEnd);
        assert(pos == listEnd);

        ListAst(Location(parseResult.OriginalSource, listStartPos, listEnd), itemBuffer)
      }
      else
        ListAst(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateListWithSeparator[TItemLoader, TItem, TSeparatorLoader, TSeparator](itemLoader : IAstSequenceLoader[TItemLoader], separatorLoader : IAstSequenceLoader[TSeparatorLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, separatorSequenceId : int, pos : ref int) : SequenceAst[ListAst[TItem], ListAst[TSeparator]]
      where TItemLoader      : IAst
      where TItem            : TItemLoader
      where TSeparatorLoader : IAst
      where TSeparator       : TSeparatorLoader
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer      = SCG.List(16);
        def separatorBuffer = SCG.List(16);
        def listStartPos    = pos;
        def loop()
        {
          def item = itemLoader.ReadSequence(itemSequenceId, ref pos) :> TItem;
          itemBuffer.Add(item);

          if (pos < listEnd)
          {
            def separator = separatorLoader.ReadSequence(separatorSequenceId, ref pos) :> TSeparator;
            separatorBuffer.Add(separator);

            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          }
          else
            assert(pos == listEnd);
        }
        loop();

        def loc = Location(parseResult.OriginalSource, listStartPos, listEnd);
        SequenceAst(loc, ListAst(loc, itemBuffer), ListAst(loc, separatorBuffer))
      }
      else
      {
        def loc = Location(parseResult.OriginalSource, pos, pos);
        SequenceAst(loc, ListAst(loc), ListAst(loc))
      }
    }

    public CreateListWithSeparatorOnlyItems[TItemLoader, TItem, TSeparatorLoader](itemLoader : IAstSequenceLoader[TItemLoader], separatorLoader : IAstSequenceLoader[TSeparatorLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, separatorSequenceId : int, pos : ref int) : ListAst[TItem]
      where TItemLoader      : IAst
      where TItem            : TItemLoader
      where TSeparatorLoader : IAst
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer      = SCG.List(16);
        def listStartPos    = pos;
        def loop()
        {
          def item = itemLoader.ReadSequence(itemSequenceId, ref pos) :> TItem;
          itemBuffer.Add(item);

          if (pos < listEnd)
          {
            _ = separatorLoader.ReadSequence(separatorSequenceId, ref pos);

            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          }
          else
            assert(pos == listEnd);
        }
        loop();

        ListAst(Location(parseResult.OriginalSource, listStartPos, listEnd), itemBuffer)
      }
      else
        ListAst(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateListWithSeparatorOnlySeparators[TItemLoader, TSeparatorLoader, TSeparator](itemLoader : IAstSequenceLoader[TItemLoader], separatorLoader : IAstSequenceLoader[TSeparatorLoader], parseResult : ParseResult, astPtr : int, offset : int, itemSequenceId : int, separatorSequenceId : int, pos : ref int) : ListAst[TSeparator]
      where TItemLoader      : IAst
      where TSeparatorLoader : IAst
      where TSeparator       : TSeparatorLoader
    {
      def listEnd = pos + parseResult.GetSize(astPtr + offset);
      if (listEnd > pos)
      {
        def separatorBuffer = SCG.List(16);
        def listStartPos    = pos;
        def loop()
        {
          _ = itemLoader.ReadSequence(itemSequenceId, ref pos);

          if (pos < listEnd)
          {
            def separator = separatorLoader.ReadSequence(separatorSequenceId, ref pos) :> TSeparator;
            separatorBuffer.Add(separator);

            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          }
          else
            assert(pos == listEnd);
        }
        loop();

        ListAst(Location(parseResult.OriginalSource, listStartPos, listEnd), separatorBuffer)
      }
      else
        ListAst(Location(parseResult.OriginalSource, pos, pos))
    }

    public CreateOption[TLoader, TItem](loader : IAstSequenceLoader[TLoader], parseResult : ParseResult, parsingSequence : ParsingSequence, state : int, itemSequenceId : int, startPos : int, endPos : int) : OptionAst[TItem]
      where TLoader : IAst
      where TItem   : TLoader
    {
      if (startPos < endPos)
      {
        def itemParsingSequence = (parsingSequence.States[state].Subrule :> SubruleInfo.Option).Rule.ParsingSequence;
        def item = loader.ReadSequence(itemSequenceId, startPos, endPos, itemParsingSequence) :> TItem;
        OptionAst.Some(Location(parseResult.OriginalSource, startPos, endPos), item)
      }
      else
        OptionAst.None(Location(parseResult.OriginalSource, startPos, endPos))
    }

    public CreateList[TLoader, TItem](loader : IAstSequenceLoader[TLoader], parseResult : ParseResult, parentParsingSequence : ParsingSequence, state : int, itemSequenceId : int, emptyItemSequenceId : int, startPos : int, endPos : int) : ListAst[TItem]
      where TLoader : IAst
      where TItem   : TLoader
    {
      if (startPos < endPos)
      {
        def parsingSequence = (parentParsingSequence.States[state].Subrule :> SubruleInfo.List).ParsingSequence;
        mutable recoveredSequence;
        if (parseResult.RecoveredSequences.TryGetValue((startPos, endPos, parsingSequence), out recoveredSequence))
        {
          def states = parsingSequence.States;
          match (recoveredSequence)
          {
            | Unambiguous(recoveredSubruleIndex) =>
              def items = SCG.List();

              def subrules = parseResult.RecoveredSubrules[recoveredSubruleIndex].Subrules;
              for (mutable i = 0; i < subrules.Length - 1; ++i)
              {
                def begin    = subrules[i].Pos;
                def end      = subrules[i + 1].Pos;
                def state    = states[subrules[i].State];

                match (state.Subrule)
                {
                  | ListItem(ParsingSequence = itemParsingSequence) =>
                    def item =
                      if (begin < end)
                        loader.ReadSequence(itemSequenceId, begin, end, itemParsingSequence)
                      else
                        loader.ReadEmptySequence(emptyItemSequenceId, startPos);
                    items.Add(item :> TItem);

                  | _ => assert(false, "List items expected");
                }
              }

              ListAst(Location(parseResult.OriginalSource, startPos, endPos), items);

            | Ambiguous => throw NotImplementedException("Ambiguous List");
          }
        }
        else
        {
          throw NotImplementedException("Fallback to standard AST reading");
        }
      }
      else
        ListAst(Location(parseResult.OriginalSource, startPos, endPos));
    }

    public CreateListWithSeparator[TItemLoader, TItem, TSeparatorLoader, TSeparator](
      itemLoader : IAstSequenceLoader[TItemLoader],
      separatorLoader : IAstSequenceLoader[TSeparatorLoader],
      parseResult : ParseResult,
      parentParsingSequence : ParsingSequence,
      state : int,
      itemSequenceId : int,
      emptyItemSequenceId : int,
      separatorSequenceId : int,
      emptySeparatorSequenceId : int,
      startPos : int,
      endPos : int) : SequenceAst[ListAst[TItem], ListAst[TSeparator]]
      where TItemLoader      : IAst
      where TItem            : TItemLoader
      where TSeparatorLoader : IAst
      where TSeparator       : TSeparatorLoader
    {
      if (startPos < endPos)
      {
        def listInfo = parentParsingSequence.States[state].Subrule :> SubruleInfo.ListWithSeparator;
        def parsingSequence = listInfo.ParsingSequence;
        mutable recoveredSequence;
        if (parseResult.RecoveredSequences.TryGetValue((startPos, endPos, parsingSequence), out recoveredSequence))
        {
          def states = parsingSequence.States;
          match (recoveredSequence)
          {
            | Unambiguous(recoveredSubruleIndex) =>
              def items      = SCG.List();
              def separators = SCG.List();

              def subrules = parseResult.RecoveredSubrules[recoveredSubruleIndex].Subrules;
              for (mutable i = 0; i < subrules.Length - 1; ++i)
              {
                def begin       = subrules[i].Pos;
                def end         = subrules[i + 1].Pos;
                def stateNumber = subrules[i].State;
                def state       = states[stateNumber];

                match (state.Subrule)
                {
                  | ListItem(ParsingSequence = itemParsingSequence) =>
                    match (stateNumber)
                    {
                      | 0 =>
                        def item =
                          if (begin < end)
                            itemLoader.ReadSequence(itemSequenceId, begin, end, itemParsingSequence);
                          else
                            itemLoader.ReadEmptySequence(emptyItemSequenceId, begin);
                        items.Add(item :> TItem);

                      | 1 =>
                        def separator =
                          if (begin < end)
                            separatorLoader.ReadSequence(separatorSequenceId, begin, end, itemParsingSequence);
                          else
                            separatorLoader.ReadEmptySequence(emptySeparatorSequenceId, begin);
                        separators.Add(separator :> TSeparator);

                      | _ => assert(false, "Unknown ListWithSeparator state number");
                    }

                  | _ => assert(false, "List items expected");
                }
              }

              def loc = Location(parseResult.OriginalSource, startPos, endPos);
              SequenceAst(loc, ListAst(loc, items), ListAst(loc, separators))

            | Ambiguous => throw NotImplementedException("Ambiguous ListWithSeparator");
          }
        }
        else
        {
          throw NotImplementedException("Fallback to standard AST reading");
        }
      }
      else
      {
        def loc = Location(parseResult.OriginalSource, startPos, endPos);
        SequenceAst(loc, ListAst(loc), ListAst(loc))
      }
    }

    public CreateListWithSeparatorOnlyItems[TItemLoader, TItem](
      itemLoader : IAstSequenceLoader[TItemLoader],
      parseResult : ParseResult,
      parentParsingSequence : ParsingSequence,
      state : int,
      itemSequenceId : int,
      emptyItemSequenceId : int,
      startPos : int,
      endPos : int) : ListAst[TItem]
      where TItemLoader      : IAst
      where TItem            : TItemLoader
    {
      if (startPos < endPos)
      {
        def listInfo = parentParsingSequence.States[state].Subrule :> SubruleInfo.ListWithSeparator;
        def parsingSequence = listInfo.ParsingSequence;
        mutable recoveredSequence;
        if (parseResult.RecoveredSequences.TryGetValue((startPos, endPos, parsingSequence), out recoveredSequence))
        {
          def states = parsingSequence.States;
          match (recoveredSequence)
          {
            | Unambiguous(recoveredSubruleIndex) =>
              def items      = SCG.List();

              def subrules = parseResult.RecoveredSubrules[recoveredSubruleIndex].Subrules;
              for (mutable i = 0; i < subrules.Length - 1; ++i)
              {
                def begin       = subrules[i].Pos;
                def end         = subrules[i + 1].Pos;
                def stateNumber = subrules[i].State;
                def state       = states[stateNumber];

                match (state.Subrule)
                {
                  | ListItem(ParsingSequence = itemParsingSequence) =>
                    match (stateNumber)
                    {
                      | 0 =>
                        def item =
                          if (begin < end)
                            itemLoader.ReadSequence(itemSequenceId, begin, end, itemParsingSequence);
                          else
                            itemLoader.ReadEmptySequence(emptyItemSequenceId, begin);
                        items.Add(item :> TItem);

                      | 1 => ()
                      | _ => assert(false, "Unknown ListWithSeparator state number");
                    }

                  | _ => assert(false, "List items expected");
                }
              }

              ListAst(Location(parseResult.OriginalSource, startPos, endPos), items)

            | Ambiguous => throw NotImplementedException("Ambiguous ListWithSeparator");
          }
        }
        else
        {
          throw NotImplementedException("Fallback to standard AST reading");
        }
      }
      else
      {
        ListAst(Location(parseResult.OriginalSource, startPos, endPos))
      }
    }

    public CreateListWithSeparatorOnlySeparators[TSeparatorLoader, TSeparator](
      separatorLoader : IAstSequenceLoader[TSeparatorLoader],
      parseResult : ParseResult,
      parentParsingSequence : ParsingSequence,
      state : int,
      separatorSequenceId : int,
      emptySeparatorSequenceId : int,
      startPos : int,
      endPos : int) : ListAst[TSeparator]
      where TSeparatorLoader : IAst
      where TSeparator       : TSeparatorLoader
    {
      if (startPos < endPos)
      {
        def listInfo = parentParsingSequence.States[state].Subrule :> SubruleInfo.ListWithSeparator;
        def parsingSequence = listInfo.ParsingSequence;
        mutable recoveredSequence;
        if (parseResult.RecoveredSequences.TryGetValue((startPos, endPos, parsingSequence), out recoveredSequence))
        {
          def states = parsingSequence.States;
          match (recoveredSequence)
          {
            | Unambiguous(recoveredSubruleIndex) =>
              def separators = SCG.List();

              def subrules = parseResult.RecoveredSubrules[recoveredSubruleIndex].Subrules;
              for (mutable i = 0; i < subrules.Length - 1; ++i)
              {
                def begin       = subrules[i].Pos;
                def end         = subrules[i + 1].Pos;
                def stateNumber = subrules[i].State;
                def state       = states[stateNumber];

                match (state.Subrule)
                {
                  | ListItem(ParsingSequence = itemParsingSequence) =>
                    match (stateNumber)
                    {
                      | 0 => ()
                      | 1 =>
                        def separator =
                          if (begin < end)
                            separatorLoader.ReadSequence(separatorSequenceId, begin, end, itemParsingSequence);
                          else
                            separatorLoader.ReadEmptySequence(emptySeparatorSequenceId, begin);
                        separators.Add(separator :> TSeparator);

                      | _ => assert(false, "Unknown ListWithSeparator state number");
                    }

                  | _ => assert(false, "List items expected");
                }
              }

              ListAst(Location(parseResult.OriginalSource, startPos, endPos), separators)

            | Ambiguous => throw NotImplementedException("Ambiguous ListWithSeparator");
          }
        }
        else
        {
          throw NotImplementedException("Fallback to standard AST reading");
        }
      }
      else
      {
        ListAst(Location(parseResult.OriginalSource, startPos, endPos))
      }
    }
  }
}
