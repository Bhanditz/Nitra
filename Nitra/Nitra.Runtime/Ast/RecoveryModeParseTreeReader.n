using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal abstract class RecoveryModeParseTreeReader[TContext, TAst]
  {
    public Read(parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, context : TContext) : TAst
    {
      if (startPos == endPos)
        MakeEmptyAst(parseResult, startPos, context)
      else
        match (parseResult.TryGetRecoveredSequence(startPos, endPos, parsingSequence))
        {
          | null                               => ReadAstStandardMode(parseResult, startPos, endPos, context)
          | Unambiguous(recoveredSubruleIndex) => ReadAst(parseResult, startPos, endPos, recoveredSubruleIndex, context)
          | Ambiguous(indexes) =>
            def ambiguities = array(indexes.Length);
            foreach (recoveredSubruleIndex in indexes with i)
              ambiguities[i] = ReadAst(parseResult, startPos, endPos, recoveredSubruleIndex, context);
            MakeAmbiguousAst(ambiguities, context)
        }
    }

    protected abstract MakeEmptyAst(parseResult : ParseResult, pos : int, context : TContext) : TAst;
    protected abstract MakeAmbiguousAst(ambiguities : array[TAst], context : TContext) : TAst;
    protected abstract ReadAstStandardMode(parseResult : ParseResult, startPos : int, endPos : int, context : TContext) : TAst;
    protected abstract ReadAst(parseResult : ParseResult, startPos : int, endPos : int, recoveredSubruleIndex : int, context : TContext) : TAst;
  }
}
