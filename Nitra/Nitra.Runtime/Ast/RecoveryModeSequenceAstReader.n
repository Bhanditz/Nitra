using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  [Record]
  internal struct RecoveryModeSequenceAstReaderContext[TLoader]
    where TLoader : IAst
  {
    public Loader     : IAstSequenceLoader[TLoader];
    public SequenceId : int;
  }

  internal sealed class RecoveryModeSequenceAstReader[TLoader] : RecoveryModeAstReader[RecoveryModeSequenceAstReaderContext[TLoader], TLoader]
    where TLoader : IAst
  {
    public static Instance : this;

    static this() { Instance = RecoveryModeSequenceAstReader() }

    protected override MakeEmptyAst(parseResult : ParseResult, pos : int, context : RecoveryModeSequenceAstReaderContext[TLoader]) : TLoader
    {
      _ = parseResult;
      context.Loader.ReadEmptySequence(context.SequenceId, pos)
    }

    protected override MakeAmbiguousAst(ambiguities : array[TLoader], context : RecoveryModeSequenceAstReaderContext[TLoader]) : TLoader
    {
      context.Loader.CreateAmbiguousSequence(context.SequenceId, ambiguities)
    }

    protected override ReadAst(parseResult : ParseResult, startPos : int, endPos : int, recoveredSubruleIndex : int, context : RecoveryModeSequenceAstReaderContext[TLoader]) : TLoader
    {
      _ = parseResult; _ = startPos; _ = endPos;
      context.Loader.ReadSequence(context.SequenceId, recoveredSubruleIndex);
    }

    protected override ReadAstStandardMode(parseResult : ParseResult, startPos : int, endPos : int, context : RecoveryModeSequenceAstReaderContext[TLoader]) : TLoader
    {
      _ = parseResult;
      mutable pos = startPos;
      def result = context.Loader.ReadSequence(context.SequenceId, ref pos);
      assert(pos == endPos);
      result
    }
  }
}
