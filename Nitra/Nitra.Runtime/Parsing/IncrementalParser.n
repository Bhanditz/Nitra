using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra
{
  public class IncrementalParser
  {
    private mutable _oldParseResult : ParseResult = null;
    private _syncRoot               : object = object();
    public ParseResult : IParseResult { get { _oldParseResult } }

    public CollectGarbage() : void
    {
      lock (_syncRoot)
      {
        //Пока тупо перепарсиваем. Потом сделаю умнее.
        when (_oldParseResult != null)
          _oldParseResult = _oldParseResult.ParseSession.Parse(_oldParseResult.SourceSnapshot) :> ParseResult;
      }
    }

    public Parse(parseSession : ParseSession, source : SourceSnapshot) : IParseResult
    {
      lock (_syncRoot)
      {
        _oldParseResult = parseSession.Parse(source) :> ParseResult;
        _oldParseResult
      }
    }

    public DetectChangesAndParse(parseSession : ParseSession, source : SourceSnapshot) : IParseResult
    {
      lock (_syncRoot)
      {
        if (_oldParseResult != null)
        {
          mutable head = 0;
          mutable tail = 0;
          def maxTail = Math.Min(source.Text.Length, _oldParseResult.Text.Length);
          while (tail < maxTail && source.Text[source.Text.Length - tail - 1] == _oldParseResult.Text[_oldParseResult.Text.Length - tail - 1])
            ++tail;
          def maxHead = maxTail - tail;
          while (head < maxHead && source.Text[head] == _oldParseResult.Text[head])
            ++head;
          Parse(parseSession, source, head, tail)
        }
        else
          Parse(parseSession, source)
      }
    }

    public Parse(parseSession : ParseSession, source : SourceSnapshot, head : int, tail : int) : IParseResult
    {
      lock (_syncRoot)
      {
        when (_oldParseResult == null || head < 0 || tail < 0)
          return Parse(parseSession, source);

        //assert2(head + tail <= source.Text.Length);
        //assert2(head + tail <= _oldParseResult.Text.Length);
        //for (mutable i = 0; i < head; ++i)
        //  assert2(source.Text[i] == _oldParseResult.Text[i]);
        //for (mutable i = 0; i < tail; ++i)
        //  assert2(source.Text[source.Text.Length - i - 1] == _oldParseResult.Text[_oldParseResult.Text.Length - i - 1]);

        def newParseResult = ParseResult(parseSession, source, _oldParseResult, head, tail);

        _oldParseResult = parseSession.Parse(newParseResult);
        _oldParseResult
      }
    }
  }
}
