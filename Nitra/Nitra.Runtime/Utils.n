using System.Reflection;
using Nitra.Internal;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

public module X
{
  public VisualizeFrame(frame : RecoveryStackFrame) : void
  {
    VisualizeFrames([frame])
  }

  public VisualizeFrames(stacks : Seq[RecoveryStackFrame]) : void
  {
    def dot = Nitra.Internal.RecoveryStackFrame.DotStacks(stacks);
    ExecuteDot(dot);
  }

  public VisualizeFrames(stacks : Seq[ParseAlternativeNode]) : void
  {
    def dot = Nitra.Internal.ParseAlternativeNode.DotNodes(stacks);
    ExecuteDot(dot);
  }

  public VisualizeRecoveryResults(results : Seq[RecoveryResult]) : void
  {
    VisualizeFrames(results.Map(r => r.Stack))
  }

  public VisualizeRecoveryParser(recoveryParser : RecoveryParser) : void
  {
    def dot = recoveryParser.ToDot();
    ExecuteDot(dot);
  }

  static ToolsDir = "ExternalTools";

  private ExecuteDot(source : string) : void
  {
    def dotFileName = Path.ChangeExtension(Path.GetTempFileName(), "dot");
    File.WriteAllText(dotFileName, source);
    def svgFileName = Path.ChangeExtension(dotFileName, "svg");
    def process = Process.Start(FindDotExe(), $<#$dotFileName -o $svgFileName -Tsvg#>);
    process.WaitForExit();
    _ = Process.Start(svgFileName);
  }

  private FindDotExe() : string
  {
    def dir = Path.GetDirectoryName(Path.GetFullPath(Assembly.GetExecutingAssembly().Location));
    def findDot(dir : string) : string
    {
      if (Directory.Exists(Path.Combine(dir, ToolsDir)))
        Path.Combine(dir, ToolsDir, @"DOT\dot.exe")
      else
      {
        def parent = Directory.GetParent(dir);
        if (parent == null)
          null
        else
          findDot(parent.FullName)
      }
    }
    
    findDot(dir)
  }
}
