using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Runtime.Reflection;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Globalization;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public module NitraUtils
  {
    public ToImmutableArray[T](this @list : LightList[T]) : ImmutableArray[T]
    {
      match (@list.Count)
      {
        | 0 => ImmutableArray.Empty
        | 1 => ImmutableArray.Create(@list.FirstItem)
        | len => 
          def builder = ImmutableArray.CreateBuilder(len);
          foreach (x in @list)
            builder.Add(x);
          builder.MoveToImmutable();
      }
    }
    
    public GetObjectId(this nodeToIdMap : Dictionary[object, int], obj : object) : int
    {
      mutable id;
      if (nodeToIdMap.TryGetValue(obj, out id))
        id
      else
      {
        id = nodeToIdMap.Count;
        nodeToIdMap.Add(obj, id);
        id
      }
    }
    
    public MakeUnion[TSymbol](res : ImmutableArray[BindResult[TSymbol]]) : BindResult[TSymbol]
      where TSymbol : DeclarationSymbol
    {
      def set = HashSet();
      when (res.Length == 2)
      {
        def res1 = res[0];
        def res2 = res[1];
        def syms1 = res1.Symbols;
        def syms2 = res2.Symbols;
        when (syms1.Length == 1 && syms2.Length == 1)
        {
          when (syms1[0].Id == syms2[0].Id)
            return BindResult.Union(syms1, res);
        }
      }
      
      foreach (br when br.HasResult in res)
        foreach (sym in br.Symbols)
          _ = set.Add(sym);
          
      BindResult.Union(set.ToImmutableArray(), res)
    }
    
    public ToBindResult[TSymbol](this res : LightList[BindResult[TSymbol]]) : BindResult[TSymbol]
      where TSymbol : DeclarationSymbol
    {
      match(res.Count)
      {
        | 0 => BindResult.Nil()
        | 1 => res.FirstItem
        | _ => MakeUnion(res.ToImmutableArray())
      }
    }

    public ToBindResult[TSymbol](this res : ImmutableArray[BindResult[TSymbol]]) : BindResult[TSymbol]
      where TSymbol : DeclarationSymbol
    {
      match(res.Length)
      {
        | 0 => BindResult.Nil()
        | 1 => res[0]
        | _ => MakeUnion(res)
      }
    }

    public ToBindResult[TSymbol](this res : LightList[TSymbol]) : BindResult[TSymbol]
      where TSymbol : DeclarationSymbol
    {
      match(res.Count)
      {
        | 0 => BindResult.Nil()
        | 1 => BindResult.Single(res.FirstItem)
        | _ => BindResult.Multiple(res.ToImmutableArray())
      }
    }
  } // module
} // namespace
