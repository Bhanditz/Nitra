using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using Nitra.Internal;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime
{
  public abstract class AstWalkerBase
  {
    public virtual OnEmpty(ruleInfo : RuleInfo.Empty, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      IgnoreParams();
    }

    public virtual OnMarker(ruleInfo : RuleInfo.Marker, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      IgnoreParams();
    }

    public virtual OnRegularCall(ruleInfo : RuleInfo.RegularCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      IgnoreParams();
    }

    public virtual OnTokenString(ruleInfo : RuleInfo.TokenString, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      IgnoreParams();
    }

    public virtual OnSimpleCall(ruleInfo : RuleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      mutable curTextPos = startPos;
      if (endPos < 0)
        _ = Walk(parseResult.TryGetAst(curTextPos, ruleInfo.RuleParser.RuleId), curTextPos, parseResult)
      else
        when (startPos != endPos)
        {
          curTextPos = Walk(parseResult.GetAst(curTextPos, ruleInfo.RuleParser.RuleId), curTextPos, parseResult);
          assert3(curTextPos == endPos);
        }
    }

    public virtual OnExtensibleCall(ruleInfo : RuleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      mutable curTextPos = startPos;
      if (endPos < 0)
        _ = WalkExtension(parseResult.TryGetAst(curTextPos, ruleInfo.RuleParser.PrefixId), curTextPos, ruleInfo.RuleParser, parseResult)
      else
        when (startPos != endPos)
        {
          curTextPos = WalkExtension(parseResult.GetAst(curTextPos, ruleInfo.RuleParser.PrefixId), curTextPos, ruleInfo.RuleParser, parseResult);
          while (curTextPos < endPos)
            curTextPos = WalkExtension(parseResult.GetAst(curTextPos, ruleInfo.RuleParser.PostfixId), curTextPos, ruleInfo.RuleParser, parseResult);
          assert3(curTextPos == endPos);
        }
    }

    public virtual OnOption(ruleInfo : RuleInfo.Option, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      mutable curTextPos = startPos;
      if (endPos < 0)
         _ = WalkAst(parseResult.TryGetAst(curTextPos, ruleInfo.Rule.Id), curTextPos, parseResult)
      else
        when (startPos != endPos)
        {
          curTextPos = WalkAst(parseResult.GetAst(curTextPos, ruleInfo.Rule.Id), curTextPos, parseResult);
          assert3(curTextPos == endPos);
        }
    }

    public virtual OnList(ruleInfo : RuleInfo.List, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      mutable curTextPos = startPos;
      if (endPos < 0)
         _ = WalkAst(parseResult.TryGetAst(curTextPos, ruleInfo.Rule.Id), curTextPos, parseResult)
      else
        when (startPos != endPos && !ruleInfo.IsOptimized)
        {
          while (curTextPos < endPos)
            curTextPos = WalkAst(parseResult.GetAst(curTextPos, ruleInfo.Rule.Id), curTextPos, parseResult);
          assert3(curTextPos == endPos);
        }
    }

    public virtual OnListWithSeparator(ruleInfo : RuleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult) : void
    {
      mutable curTextPos = startPos;
      if (endPos < 0)
         _ = WalkAst(parseResult.TryGetAst(curTextPos, ruleInfo.Rule.Id), curTextPos, parseResult)
      else
        when (startPos != endPos)
        {
          while (true)
          {
            when (curTextPos >= endPos) break;
            curTextPos = WalkAst(parseResult.GetAst(curTextPos, ruleInfo.Rule.Id), curTextPos, parseResult);

            when (curTextPos >= endPos) break;
            curTextPos = WalkAst(parseResult.GetAst(curTextPos, ruleInfo.Separator.Id), curTextPos, parseResult);
          }
          assert3(curTextPos == endPos);
        }
    }

    public Walk(parseResult : ParseResult) : int
    {
      match (parseResult.RuleParser)
      {
        | ExtensibleRuleParser as ruleParser => WalkExtensible(0, ruleParser, parseResult)
        | SimpleRuleParser     as ruleParser => WalkAst       (parseResult.TryGetAst(0, ruleParser.RuleId), 0, parseResult)
        | _                                  => assert3(false)
      }
    }

    public Walk(astPtr : int, mutable curTextPos : int, parseResult : ParseResult) : int
    {
      when (astPtr <= 0)
        return -1;

      match (parseResult.ParserHost.GetRuleParser(parseResult, astPtr))
      {
        | ExtensibleRuleParserData as ruleParserData => WalkExtension(astPtr, curTextPos, ruleParserData.GetParser(0), parseResult)
        | _                                          => WalkAst      (astPtr, curTextPos, parseResult)
      }
    }

    public WalkExtensible(mutable curTextPos : int, ruleParser : ExtensibleRuleParser, parseResult : ParseResult) : int
    {
      curTextPos = WalkExtension(parseResult.TryGetAst(curTextPos, ruleParser.PrefixId), curTextPos, ruleParser, parseResult);
      if (curTextPos >= 0)
      {
        mutable endPos;
        do
        {
          endPos = curTextPos;
          curTextPos = WalkExtension(parseResult.TryGetAst(curTextPos, ruleParser.PostfixId), curTextPos, ruleParser, parseResult);
        }
        while (curTextPos >= 0);
        endPos
      }
      else
        -1
    }

    public WalkExtension(astPtr : int, mutable curTextPos : int, ruleParser : ExtensibleRuleParser, parseResult : ParseResult) : int
    {
      when (astPtr <= 0)
        return -1;

      def id = parseResult.ast[astPtr] & ExtensibleRuleParser.AstMask.Id;
      if (id == ruleParser.PrefixId)
      {
        mutable prefixAst = astPtr;
        def astPtr = ruleParser.BestPrefix(parseResult.TryGetPrefix(ref curTextPos, ref prefixAst), parseResult);
        WalkAst(astPtr, curTextPos, parseResult)
      }
      else
      {
        mutable postfixAst = astPtr;
        def astPtr = ruleParser.BestPostfix(parseResult.TryGetPostfix(ref curTextPos, ref postfixAst), parseResult);
        WalkAst(astPtr, curTextPos, parseResult)
      }
    }

    private WalkAst(astPtr : int, mutable curTextPos : int, parseResult : ParseResult) : int
    {
      when (astPtr <= 0)
        return -1;
      def state = parseResult.ast[astPtr + ExtensibleRuleParser.AstOfs.State];

      foreach (ruleInfo in parseResult.ParserHost.GetRuleStructure(parseResult, astPtr).SubrulesWithMarkers)
      {
        if (state >= 0 && ruleInfo.State >= state)
        {//обработка состояния облома
          match (ruleInfo)
          {
            | Marker            as ruleInfo => OnMarker           (ruleInfo, curTextPos, -1, parseResult)
            | RegularCall       as ruleInfo => OnRegularCall      (ruleInfo, curTextPos, -1, parseResult)
            | TokenString       as ruleInfo => OnTokenString      (ruleInfo, curTextPos, -1, parseResult)
            | SimpleCall        as ruleInfo => OnSimpleCall       (ruleInfo, curTextPos, -1, parseResult)
            | ExtensibleCall    as ruleInfo => OnExtensibleCall   (ruleInfo, curTextPos, -1, parseResult)
            | Option            as ruleInfo => OnOption           (ruleInfo, curTextPos, -1, parseResult)
            | List              as ruleInfo => OnList             (ruleInfo, curTextPos, -1, parseResult)
            | ListWithSeparator as ruleInfo => OnListWithSeparator(ruleInfo, curTextPos, -1, parseResult)
            | Empty             as ruleInfo => OnEmpty            (ruleInfo, curTextPos, -1, parseResult)
          }
          return -1;
        }
        else if (ruleInfo is Marker as ruleInfo)
          OnMarker(ruleInfo, curTextPos, curTextPos, parseResult);
        else
        {
          def sizePtr = astPtr + ruleInfo.Offset;
          def size = parseResult.GetSkipAndSize2(sizePtr);
          def size = if (size >= 0)
            size
          else
          {
            def skip = parseResult.GetSkip(sizePtr);
            curTextPos += skip;
            (~size) - skip
          }
          def endPos = curTextPos + size;
          match (ruleInfo)
          {
            | Marker                        => assert3(false)
            | RegularCall       as ruleInfo => OnRegularCall      (ruleInfo, curTextPos, endPos, parseResult)
            | TokenString       as ruleInfo => OnTokenString      (ruleInfo, curTextPos, endPos, parseResult)
            | SimpleCall        as ruleInfo => OnSimpleCall       (ruleInfo, curTextPos, endPos, parseResult)
            | ExtensibleCall    as ruleInfo => OnExtensibleCall   (ruleInfo, curTextPos, endPos, parseResult)
            | Option            as ruleInfo => OnOption           (ruleInfo, curTextPos, endPos, parseResult)
            | List              as ruleInfo => OnList             (ruleInfo, curTextPos, endPos, parseResult)
            | ListWithSeparator as ruleInfo => OnListWithSeparator(ruleInfo, curTextPos, endPos, parseResult)
            | Empty             as ruleInfo => OnEmpty            (ruleInfo, curTextPos, endPos, parseResult)
          }
          curTextPos = endPos;
        }
      }
      curTextPos
    }
  }
}
