using Nemerle;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;

using NC = Nemerle.Collections;

namespace Nitra
{
  [Record]
  public variant StatisticsTask
  {
    public Id     : string { get; }
    public Title  : string { get; }
    public abstract Total : TimeSpan { get; }
    public TotalFormatted : string { get { Total.TotalSeconds.ToString("N6") } }
    protected abstract ToString(sb : Text.StringBuilder, level : int) : void;
    public override ToString() : string { def sb = Text.StringBuilder(); ToString(sb, 0); sb.ToString() }
    protected HeaderToString(sb : Text.StringBuilder, level : int) : void
    {
      _ = sb.Append(' ', level);
      _ = sb.AppendLine(this.Title + ": " + this.Total);
    }
      
    | Single
      {
        [RecordIgnore] private _timer : Stopwatch = Stopwatch();
        public Elapsed : TimeSpan { get { _timer.Elapsed } }
        public override Total : TimeSpan { get { Elapsed } }
        protected override ToString(sb : Text.StringBuilder, level : int) : void { HeaderToString(sb, level); }

        public Start() : void { _timer.Start(); }
        public Stop()  : void { _timer.Stop(); }
      }
        
    | Container
      {
        [RecordIgnore] private _tasks : Dictionary[string, StatisticsTask] = Dictionary();
        [RecordIgnore] public  Tasks  : ObservableCollection[StatisticsTask] { get; default ObservableCollection(); }
      
        public override Total : TimeSpan
        {
          get
          {
            mutable result;
            foreach (t in _tasks.Values)
              result += t.Total;
            result
          }
        }
          
        protected override ToString(sb : Text.StringBuilder, level : int) : void
        {
          HeaderToString(sb, level);
          
          def nextLevel = level + 1;
          
          foreach (task in Tasks)
            task.ToString(sb, nextLevel);
        }
        
        public Item[id : string] : StatisticsTask
        {
          get
          {
            mutable result;
            _ = _tasks.TryGetValue(id, out result);
            result
          }
        }
          
        public AddSubtask(task : StatisticsTask) : void
        {
          _tasks.Add(task.Id, task);
          Tasks.Add(task);
        }
      }
    }
}
