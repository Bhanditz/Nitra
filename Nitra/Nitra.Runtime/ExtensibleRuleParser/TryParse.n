using SCG = System.Collections.Generic;

namespace Nitra.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public override TryParse(recoveryStack : RecoveryStackFrame, startState : int, mutable curTextPos : int, continueList : bool, parsedStates : SCG.List[ParsedStateInfo], parseResult : Nitra.Internal.ParseResult) : int
    {
      _ = recoveryStack;
      _ = continueList;
      def text = parseResult.Text;
      mutable startPos = curTextPos;
      if (startState == PrefixState)
      {
        mutable bestPos;
        curTextPos = ParsePrefix(curTextPos, text, parseResult);
        if (curTextPos > 0)
        {
          parsedStates.Add(ParsedStateInfo(PrefixState, curTextPos - startPos));
          startPos = curTextPos;
          do
          {
            bestPos = curTextPos;
            curTextPos = ParsePostfix(curTextPos, text, parseResult);
          }
          while (curTextPos > bestPos);
          when (curTextPos > startPos)
            parsedStates.Add(ParsedStateInfo(PostfixState, curTextPos - startPos));
          bestPos;
        }
        else
          -1;
      }
      else if (startState == PostfixState || startState == -2) // -2 is a continue parse
      {
        mutable bestPos;
        do
        {
          bestPos = curTextPos;
          curTextPos = ParsePostfix(curTextPos, text, parseResult);
        }
        while (curTextPos > bestPos);
        when (curTextPos > startPos)
          parsedStates.Add(ParsedStateInfo(PostfixState, curTextPos - startPos));
        bestPos
      }
      else
      {
        assert(continueList);
        curTextPos
      }
    }
  }
}
