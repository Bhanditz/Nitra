using Nitra.Internal.Recovery;
using Nemerle.Imperative;

namespace Nitra.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public override FindRecoveryPosition(mutable curTextPos : int, stack : RecoveryStackFrame, parseResult : ParseResult) : void
    {
      def startTextPos = curTextPos;
      def prefixStack = parseResult.RecoveryStackFrame_Extensible(stack, startTextPos, startTextPos, this, PrefixState);
      curTextPos = FindRecoveryPositionPrefix(curTextPos, prefixStack, parseResult);
      when (curTextPos > 0 && FirstPostfixRule < PostfixRules.Length)
      {
        do
        {
          def postfixStack = parseResult.RecoveryStackFrame_Extensible(stack, startTextPos, curTextPos, this, PostfixState);
          curTextPos = FindRecoveryPositionPostfix(curTextPos, postfixStack, parseResult)
        }
        while (curTextPos > 0);
      }
    }

    private FindRecoveryPositionPrefix(mutable curTextPos : int, stack : RecoveryStackFrame, parseResult : ParseResult) : int
    {
      def startTextPos = curTextPos;
      mutable bestResult = 0;
      mutable prefixAst = parseResult.TryGetAst(curTextPos, PrefixId);
      when (prefixAst > 0)
      {
        bestResult = parseResult.TryGetPrefix(ref curTextPos, ref prefixAst);
        if (bestResult > 0)
        {
          def state = parseResult.ast[bestResult + AstOfs.State];
          assert (state == ParseResult.AstParsedState || state >= 0);
        }
        else when (bestResult < 0)
          return -1;
      }
      def astHandle = parseResult.AstHandle_Prefix(this.ParserData, -1, curTextPos);
      def stack = parseResult.RecoveryStackFrame_ExtensiblePrefix(stack, startTextPos, astHandle, this);
      if (bestResult == 0)
      {//0
        when (stack != null)
          if (parseResult.MaxFailPos == curTextPos)
            parseResult.RecoveryStacks.Add(stack);
          else
            foreach (prefixRule in PrefixRules)
              _ = prefixRule.FindRecoveryPosition(curTextPos, bestResult, stack, parseResult);
        -1;
      }
      else
      {
        mutable newPos = -1;
        mutable bestFound = false;
        while (bestResult > 0)
        {
          def prefixParser = PrefixRuleParser(bestResult, parseResult);
          when (stack != null)
            prefixParser.FindRecoveryPosition(curTextPos, bestResult, stack, parseResult);
          def state = parseResult.ast[bestResult + AstOfs.State];
          when (state == ParseResult.AstParsedState)
          {
            def flags = parseResult.ast[bestResult + AstOfs.Id] & ExtensibleRuleParser.AstMask.Flags;
            when ((flags == ExtensibleRuleParser.AstFlags.Best || flags == ExtensibleRuleParser.AstFlags.Equal) && !bestFound)
            {
              bestFound = flags == ExtensibleRuleParser.AstFlags.Best;
              def pos = curTextPos + GetPrefixSize(bestResult, parseResult);
              assert3(newPos < 0 || newPos == pos);
              newPos = pos;
            }
          }
          bestResult = parseResult.ast[bestResult + AstOfs.Next]
        }
        newPos
      }
    }

    private FindRecoveryPositionPostfix(mutable curTextPos : int, stack : RecoveryStackFrame, parseResult : ParseResult) : int
    {
      def startTextPos = curTextPos;
      mutable bestResult = 0;
      mutable postfixAst = parseResult.TryGetAst(curTextPos, PostfixId);
      when (postfixAst > 0)
      {
        bestResult = parseResult.TryGetPostfix(ref curTextPos, ref postfixAst);
        if (bestResult > 0)
        {
          def state = parseResult.ast[bestResult + AstOfs.State];
          assert (state == ParseResult.AstParsedState || state >= 0);
        }
        else when (bestResult < 0)
          return -1;
      }
      def astHandle = parseResult.AstHandle_Postfix(this.ParserData, -1, curTextPos);
      def stack = parseResult.RecoveryStackFrame_ExtensiblePostfix(stack, startTextPos, astHandle, this);
      if (bestResult == 0)
      {//0
        when (stack != null)
          if (parseResult.MaxFailPos == curTextPos)
            parseResult.RecoveryStacks.Add(stack);
          else
            foreach (postfixRule in PostfixRules)
              _ = postfixRule.FindRecoveryPosition(curTextPos, bestResult, stack, parseResult);
        -1;
      }
      else
      {
        mutable newPos = -1;
        mutable bestFound = false;
        while (bestResult > 0)
        {
          def postfixParser = PostfixRuleParser(bestResult, parseResult);
          when (stack != null)
            postfixParser.FindRecoveryPosition(curTextPos, bestResult, stack, parseResult);
          def state = parseResult.ast[bestResult + AstOfs.State];
          when (state == ParseResult.AstParsedState)
          {
            def flags = parseResult.ast[bestResult + AstOfs.Id] & ExtensibleRuleParser.AstMask.Flags;
            when ((flags == ExtensibleRuleParser.AstFlags.Best || flags == ExtensibleRuleParser.AstFlags.Equal) && !bestFound)
            {
              bestFound = flags == ExtensibleRuleParser.AstFlags.Best;
              def pos = curTextPos + GetPostfixSize(bestResult, parseResult);
              assert3(newPos < 0 || newPos == pos);
              newPos = pos;
            }
          }
          bestResult = parseResult.ast[bestResult + AstOfs.Next]
        }
        newPos
      }
    }
  }
}
