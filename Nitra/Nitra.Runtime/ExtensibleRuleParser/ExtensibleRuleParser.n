using Nitra.Internal.Recovery;
using Nitra.Runtime.Internal;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  public sealed partial class ExtensibleRuleParser : StartRuleParser
  {
    public PrefixRuleParser(ptr : int, parseResult : ParseResult) : ExtensionRuleParser
    {
      PrefixRules[(parseResult.rawTree[ptr + PrefixOfs.Id] & RawTreeMask.Id) - PrefixOffset]
    }

    public PostfixRuleParser(ptr : int, parseResult : ParseResult) : ExtensionRuleParser
    {
      PostfixRules[(parseResult.rawTree[ptr + PostfixOfs.Id] & RawTreeMask.Id) - PostfixOffset]
    }

    public GetPrefixSize(bestResult : int, parseResult : ParseResult) : int
    {
      assert(parseResult.rawTree[bestResult + RawTreeOfs.State] == ParseResult.RawTreeParsedState);
      mutable size = 0;
      mutable i = bestResult + RawTreeOfs.Sizes;
      mutable end = i + PrefixRuleParser(bestResult, parseResult).SubrulesCount;
      for (; i < end; ++i)
        size += parseResult.GetSize(i);
      size;
    }

    public GetPostfixSize(bestResult : int, parseResult : ParseResult) : int
    {
      assert(parseResult.rawTree[bestResult + RawTreeOfs.State] == ParseResult.RawTreeParsedState);
      mutable size = 0;
      mutable i = bestResult + RawTreeOfs.Sizes;
      mutable end = i + PostfixRuleParser(bestResult, parseResult).SubrulesCount;
      for (; i < end; ++i)
        size += parseResult.GetSize(i);

      size;
    }
    public override IsTokenRule : bool { get { Descriptor.IsTokenRule } }
    public override IsVoid      : bool { get { Descriptor.IsVoid } }
    public override ToString()  : string
    {
      this.ParsingSequence.RuleName
    }
  }
}
