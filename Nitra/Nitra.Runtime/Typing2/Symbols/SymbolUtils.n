using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

using SCG = System.Collections.Generic;

namespace Nitra.Runtime.Binding
{
  public module SymbolUtils
  {
    public static ReportError[TSymbol](r : Ref[TSymbol]) : void
      where TSymbol : DeclarationSymbol
    {
      match (r)
      {
        | Unresolved as us => AstContext.CompilerMessages.Error(us, $<#Unbound name '$(us.Name)'.#>);
        | Ambiguous as sym =>
          def e = sym.AllDeclarations.GetEnumerator();
          if (e.MoveNext())
          {
            mutable index = 1;
            def firstName = e.Current.Name;
            using (err = AstContext.CompilerMessages.RootError(firstName, $<#Symbol '$(firstName)' is ambiguous.#>))
            {
              while (e.MoveNext())
              {
                def otherName = e.Current.Name;
                err.Hint(otherName, $<#Declaration $index#>);
                ++index;
              }
            }
          }
          else
            assert(false, "Ambiguous symbol without declarations detected!");

        | Some => ()
      }
    }

    private static mutable _symbolIdCounter : int = 0;

    public static CreateSymbolId() : int
    {
      Interlocked.Increment(ref _symbolIdCounter)
    }

    public static ToXaml(symbol : DeclarationSymbol) : string
    {
      def builder = StringBuilder(symbol.Name);
      when (symbol.IsKindEvaluated)
        _ = builder.Append(" <Span Foreground = 'blue'>").Append(symbol.Kind).Append("</Span>");
      builder.ToString();
    }

    public static ToString(symbol : DeclarationSymbol) : string
    {
      def builder = StringBuilder(symbol.Name);
      when (symbol.IsKindEvaluated)
        _ = builder.Append(" (").Append(symbol.Kind).Append(")");
      builder.ToString();
    }
  }
}
