using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  [Record]
  public class AmbiguousHierarchicalSymbol : HierarchicalBaseSymbol, IAmbiguousSymbol
  {
    public override Kind             : string                   { get { "ambiguous" } }
    public override IsResolved       : bool                     { get { ResolutionResult != null } }
    public override SpanClass        : string                   { get { if (IsResolved) ResolutionResult.SpanClass else "Error" } }
    public          Ambiguous        : list[HierarchicalSymbol] { get; set; }
    [RecordIgnore] mutable _resolutionResult : ISymbol;

    public override ResolutionResult : ISymbol { get { _resolutionResult } }
    public SetResolutionResult(value : ISymbol) : void { assert2(_resolutionResult == null); _resolutionResult = value; }

    public override TryResolve(algorithm : Func[IAmbiguousSymbol, Seq[ISymbol]]) : ISymbol
    {
      SymbolUtils.TryResolve(this, algorithm);
    }

    public override ToString() : string { if (IsResolved) ResolutionResult.ToString() else $<#$Kind: ..$(Ambiguous; " "; _.FullName)#>  }
  }
}
