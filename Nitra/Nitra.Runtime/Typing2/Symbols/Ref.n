using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public interface IRef : ILocated
  {
    Name        : string { get; }
    IsNameValid : bool   { get; }
    FullName    : string { get; }
    Kind        : string { get; }
    SpanClass   : string { get; }

    [DependentProperty("IsSymbolEvaluated")]
    Symbol            : ISymbol2 { get; }
    IsSymbolEvaluated : bool     { get; }

    TryResolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[ISymbol2, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : ISymbol2;
    Resolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[ISymbol2, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : ISymbol2;
    GetSymbols() : Seq[ISymbol2];
  }

  [Record]
  public variant Ref[TSymbol] : IRef
    where TSymbol : ISymbol2
  {
    public abstract Name        : string { get; }
    public abstract IsNameValid : bool   { get; }
    public abstract FullName    : string { get; }
    public abstract Kind        : string { get; }
    public abstract SpanClass   : string { get; }
    public          File        : File   { get; }
    public          Span        : NSpan  { get; }

    public IsAllPropertiesEvaluated : bool  { get { true } }
    public PropertiesEvalState      : int   { get { 0 } }

    [DependentProperty("IsSymbolEvaluated")]
    public abstract Symbol            : TSymbol { get; }
    public abstract IsSymbolEvaluated : bool    { get; }

    public abstract TryResolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : ISymbol2;

    public Resolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : ISymbol2
    {
      def r = TryResolve(algorithm);
      SymbolUtils.ReportError(r);
      r
    }

    public override ToString() : string { Name + " (" + Kind + ")" }
    public abstract GetSymbols() : Seq[ISymbol2];
    public ReportMessage(messageType : CompilerMessageType, cond : bool, text : string) : void
    {
      unless (cond)
        File.AstMessages.ReportMessage(messageType, this.ToLocation(), text, 0)
    }

    | Some
      {
        public override Name        : string { get { Symbol.Name } }
        public override IsNameValid : bool   { get { Symbol.IsNameValid } }
        public override FullName    : string { get { Symbol.FullName } }
        public override Kind        : string { get { Symbol.Kind } }
        public override SpanClass   : string { get { Symbol.SpanClass } }

        [DependentProperty("IsSymbolEvaluated")]
        public override Symbol            : TSymbol { get; }
        public override IsSymbolEvaluated : bool    { get { true } }

        public override TryResolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
        {
          def algorithm = algorithm ?? ResolutionAlgorithms.TryCast;

          match (algorithm(Symbol))
          {
            | VSome(symbol) => Ref.Some(File, Span, symbol)
            | VNone         => Ref.Unresolved(File, Span, Name, ResolutionSource.Resolve(this))
          }
        }

        public override GetSymbols() : Seq[ISymbol2] { array[Symbol] }
        public override GetHashCode() : int { Symbol.GetHashCode() }
        public override Equals(other : object) : bool
        {
          | other is Some => this.Symbol.Equals(other.Symbol)
          | _ => false
        }
      }

    | Unresolved
      {
        public override Name        : string           { get; }
        public          Source      : ResolutionSource { get; }
        public override IsNameValid : bool             { get { true } }
        public override FullName    : string           { get { Name } }
        public override Kind        : string           { get { "unresolved" } }
        public override SpanClass   : string           { get { "Error" } }

        [DependentProperty("IsSymbolEvaluated")]
        public override Symbol            : TSymbol { get { assert(false, "Ref is unresolved.") } }
        public override IsSymbolEvaluated : bool    { get { false } }

        public override TryResolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
        {
          _ = algorithm;
          Ref.Unresolved(File, Span, Name, ResolutionSource.Resolve(this))
        }

        public override GetSymbols() : Seq[ISymbol2] { Enumerable.Empty() }
        public override GetHashCode() : int { Name.GetHashCode() }
        public override Equals(other : object) : bool
        {
          | other is Unresolved => EqualityComparer.Default.Equals(this.File, other.File) && this.Span.Equals(other.Span) && StringComparer.Ordinal.Equals(this.Name, other.Name)
          | _ => false
        }
      }

    | Ambiguous
      {
        public          Ambiguities : list[TSymbol]    { get; }
        public          Source      : ResolutionSource { get; }

        public override Name        : string { get { Ambiguities.Head.Name } }
        public override IsNameValid : bool   { get { Ambiguities.Head.IsNameValid } }
        public override FullName    : string { get { Ambiguities.Head.FullName } }
        public override Kind        : string { get { "ambiguous" } }
        public override SpanClass   : string { get { "Error" } }

        [DependentProperty("IsSymbolEvaluated")]
        public override Symbol            : TSymbol          { get { assert(false, "Ref is ambiguous.") } }
        public override IsSymbolEvaluated : bool             { get { false } }
        public          AllDeclarations   : Seq[Declaration] { get { Ambiguities.SelectMany(_.Declarations) } }

        public override TryResolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
        {
          def algorithm = algorithm ?? ResolutionAlgorithms.TryCast;

          def results = LightList.[TConcreteSymbol]();
          foreach (s in Ambiguities)
            when (algorithm(s) is VSome(symbol))
              results.Add(symbol);

          match (results.Count)
          {
            | 0 => Ref.Unresolved(File, Span, Name, ResolutionSource.Resolve(this))
            | 1 => Ref.Some(File, Span, results.FirstItem)
            | _ => Ref.Ambiguous(File, Span, results.ToNList(), ResolutionSource.Resolve(this))
          }
        }

        public override GetSymbols() : Seq[ISymbol2] { Ambiguities }
        public override ToString() : string { $<#$Kind: ..$(Ambiguities; " "; _.FullName)#> }
        public override GetHashCode() : int { Ambiguities.GetHashCode() }
        public override Equals(other : object) : bool
        {
          | other is Ambiguous => this.Ambiguities.Equals(other.Ambiguities)
          | _ => false
        }
      }
  }
}
