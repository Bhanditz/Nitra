using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;
// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol = Nitra.Runtime.Binding.Symbol2;

namespace Nitra.Runtime.Binding
{
  [Record]
  public abstract class Symbol2 : IEquatable[Symbol]
  {
    private static mutable _next : int = 0;

    public static ReportError(symbol : Symbol) : void
    {
      ReportError(symbol.Name, symbol);
    }
    
    public static ReportError(reference : IAst, symbol : Symbol) : void
    {
      match (symbol)
      {
        | UnresolvedSymbol => AstContext.CompilerMessages.Error(reference, $<#Unbound name '$reference'.#>);
        | AmbiguousSymbol as sym =>
          using (err = AstContext.CompilerMessages.RootError(reference, $<#Symbol '$reference' is ambiguous.#>))
            foreach (a when a.Name : object != reference in sym.Ambiguous with i)
              when (a.Declarations is head :: _)
                err.Hint(head, $<#Declaration $i#>);

        | AmbiguousHierarchicalSymbol as sym =>
          using (err = AstContext.CompilerMessages.RootError(reference, $<#Symbol '$reference' is ambiguous.#>))
            foreach (a when a.Name : object != reference in sym.Ambiguous with i)
              when (a.Declarations is head :: _)
                err.Hint(head, $<#Declaration $i#>);
          
        | _ => ()
      }
    }
    
    public static TryResolve[T](symbol : T, algorithm : Func[IAmbiguousSymbol, Seq[Symbol]]) : Symbol
      where T: Symbol, IAmbiguousSymbol
    {
      def results = algorithm(symbol).ToArray();
      match (results.Length)
      {
        | 0 => UnresolvedSymbol(symbol.Ambiguous.First().Name)
        | 1 =>
          def resolved = results[0];
          assert(!symbol.IsResolved || symbol.ResolutionResult == resolved);
          symbol.ResolutionResult = results[0];
          symbol.Declarations = resolved.Declarations;
          resolved
          
        | _ => AmbiguousSymbol(results[0].Name, results.NToList())
      }
    }    
    
    [RecordIgnore]  public          Id            : int                 { get; default { Interlocked.Increment(ref _next) } }
                    public          Name          : IName               { get; }
                    public abstract FullName      : string              { get; }
                    public abstract Kind          : string              { get; }
    [RecordIgnore]  public          Declarations  : list[IDeclaration]  { get; set; default []; }
    
    public virtual  SpanClass : string { get { "Default" } }
    
    public virtual IsResolved : bool { get { true } }
    
    public virtual Scope : Scope { get { Scope.Nil() } }
    
    public virtual TryBind(reference : IReference) : Symbol
    {
      this.Scope.TryBind(reference)
    }

    public Bind(reference : IReference) : Symbol
    {
      def sym = TryBind(reference);
      ReportError(reference, sym);
      sym
    }
    
    public virtual TryResolve(algorithm : Func[IAmbiguousSymbol, Seq[Symbol]]) : Symbol
    {
      _ = algorithm;
      this
    }
    
    public Resolve(algorithm : Func[IAmbiguousSymbol, Seq[Symbol]]) : Symbol
    {
      def sym = TryResolve(algorithm);
      Symbol.ReportError(sym);
      sym
    }
   
    public virtual MakeComletionList(prefix : string) : Seq[Symbol2]
    {
      _ = prefix;
      Enumerable.Empty()
    }
    
    public virtual ToXaml() : string { Name?.Text + " <Span Foreground = 'blue'>" + Kind + "</Span>" }
    
    public override ToString() : string { Name?.Text + " (" + Kind + ")" }

    #region Equality
    
    public static @==(x : Symbol, y : Symbol) : bool { x : object == y }
    public static @!=(x : Symbol, y : Symbol) : bool { x : object != y }

    [OverrideObjectEquals]
    public Equals(other : Symbol) : bool
      implements IEquatable[Symbol].Equals
    {
      other : object == this
    }

    public override GetHashCode() : int { Id }
    
    #endregion
  }
}
