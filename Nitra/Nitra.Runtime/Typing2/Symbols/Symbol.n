using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol = Nitra.Runtime.Binding.Symbol2;

namespace Nitra.Runtime.Binding
{
  [Record]
  public abstract class Symbol2 : IEquatable[Symbol]
  {
    private static mutable _next : int = 0;
    
    [RecordIgnore]  public          Id            : int                 { get; default { Interlocked.Increment(ref _next) } }
                    public          Name          : IReference          { get; }
                    public abstract FullName      : string              { get; }
                    public abstract Kind          : string              { get; }
    [RecordIgnore]  public          Declarations  : list[IDeclaration]  { get; set; default []; }
    
    public virtual IsResolved : bool { get { false } }
    
    public virtual TryBind(reference : IReference) : Symbol
    {
      UnresolvedSymbol(reference)
    }
    
    public override ToString() : string { Name?.Text + " (" + Kind + ")" }

    #region Equality
    
    public static @==(x : Symbol, y : Symbol) : bool { x : object == y }
    public static @!=(x : Symbol, y : Symbol) : bool { x : object != y }

    [OverrideObjectEquals]
    public Equals(other : Symbol) : bool
      implements IEquatable[Symbol].Equals
    {
      other : object == this
    }

    public override GetHashCode() : int { Id }
    
    #endregion
  }
}
