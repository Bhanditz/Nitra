using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;
// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol  = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  public abstract class Symbol2 : ISymbol2
  {
    private static mutable _next : int = 0;

    protected this(name : IName)
    {
      Id           = Interlocked.Increment(ref _next);
      Name         = name;
      Declarations = [];
    }

    public         Id               : int                { get; }
    public         Name             : IName              { get; }
    public virtual FullName         : string             { get { Name.Text } }
    public virtual Kind             : string             { get { "something" } }
    public         Declarations     : list[IDeclaration] { get; internal set; }
    public virtual SpanClass        : string             { get { "Default" } }
    public virtual IsResolved       : bool               { get { true } }
    public virtual ResolutionResult : ISymbol            { get { this } }
    public virtual Scope            : Scope              { get { Scope.Nil() } }

    public virtual IsMergeKeyEquals(candidate : IDeclaration) : bool
    {
      _ = candidate;
      false
    }

    public virtual MergeCondition(candidate : IDeclaration) : bool
    {
      _ = candidate;
      true
    }

    public virtual TryBind(reference : IReference) : ISymbol
    {
      this.Scope.TryBind(reference)
    }

    public Bind(reference : IReference) : ISymbol
    {
      def sym = TryBind(reference);
      SymbolUtils.ReportError(reference, sym);
      sym
    }

    public virtual TryResolve(algorithm : Func[IAmbiguousSymbol, Seq[ISymbol]]) : ISymbol
    {
      _ = algorithm;
      this
    }

    public Resolve(algorithm : Func[IAmbiguousSymbol, Seq[ISymbol]]) : ISymbol
    {
      def sym = TryResolve(algorithm);
      SymbolUtils.ReportError(sym);
      sym
    }

    public virtual MakeComletionList(prefix : string) : Seq[ISymbol]
    {
      _ = prefix;
      Enumerable.Empty()
    }

    public virtual AfterStage (stage : int) : void { _ = stage; }

    public virtual ToXaml() : string { Name?.Text + " <Span Foreground = 'blue'>" + Kind + "</Span>" }

    public override ToString() : string { Name?.Text + " (" + Kind + ")" }

    public EvalProperties(context : DependentPropertyEvalContext) : void
    {
      _ = context;
    }

    public IsPropertyEvaluated(index : int) : bool
    {
      _ = index;
      false
    }

    public ResetProperties() : void {}

    public IsAllPropertiesEvaluated : bool { get { false } }

    #region Equality
    
    public static @==(x : Symbol, y : Symbol) : bool { x : object == y }
    public static @!=(x : Symbol, y : Symbol) : bool { x : object != y }

    [OverrideObjectEquals]
    public Equals(other : ISymbol2) : bool
      implements IEquatable[ISymbol2].Equals
    {
      other : object == this
    }

    public override GetHashCode() : int { Id }
    
    #endregion
  }
}
