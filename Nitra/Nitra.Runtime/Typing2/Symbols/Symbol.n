using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;
// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol  = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  public abstract class Symbol2 : ISymbol2
  {
    private static mutable _next : int = 0;

    protected this()
    {
      Id = Interlocked.Increment(ref _next);
    }

    public          Id               : int                { get; }
    public abstract Name             : string             { get; }
    public abstract IsNameValid      : bool               { get; }
    public virtual  FullName         : string             { get { Name } }
    public virtual  Kind             : string             { get { "something" } }
    public virtual  SpanClass        : string             { get { "Default" } }
    public virtual  Scope            : Scope              { get { EmptyScope.Instance } }

    public virtual GetDeclarationsUntyped() : Seq[Declaration] implements ISymbol2.get_Declarations
    {
      []
    }

    public virtual CanMerge(candidate : Declaration) : bool
    {
      _ = candidate;
      false
    }

    public virtual IsSameIdentity(candidate : Declaration) : bool
    {
      _ = candidate;
      true
    }

    public virtual AfterStage (stage : int) : void { _ = stage; }

    public virtual ToXaml() : string { Name + " <Span Foreground = 'blue'>" + Kind + "</Span>" }

    public override ToString() : string { Name + " (" + Kind + ")" }

    public virtual EvalProperties(context : DependentPropertyEvalContext) : void
    {
      _ = context;
    }

    public virtual ResetProperties() : void {}

    public virtual IsAllPropertiesEvaluated : bool { get { false } }
    public virtual PropertiesEvalState      : int  { get { 0 } }

    #region Equality
    
    public static @==(x : Symbol, y : Symbol) : bool { x : object == y }
    public static @!=(x : Symbol, y : Symbol) : bool { x : object != y }

    [OverrideObjectEquals]
    public Equals(other : ISymbol2) : bool
      implements IEquatable[ISymbol2].Equals
    {
      other : object == this
    }

    public override GetHashCode() : int { Id }

    #endregion
  }
}
