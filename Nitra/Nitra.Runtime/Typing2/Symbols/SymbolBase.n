using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public abstract class SymbolBase
  {
    protected this()
    {
      _id = Interlocked.Increment(ref _symbolIdCounter);
    }

    private static mutable _symbolIdCounter : int = 0;
    private           _id               : int;
    protected mutable _declarationStore : Nitra.Runtime.Binding.SymbolDeclarationStore;

    public Id           : int    { get { _id } }
    public Name         : string { get { _declarationStore.Name } }
    public IsNameValid  : bool   { get { _declarationStore.IsNameValid } }

    public override GetHashCode() : int { _id }
    public override Equals(other : object) : bool { other == this }

    public GetDeclarationsUntyped() : Seq[Declaration]
    {
      _declarationStore.GetDeclarationsUntyped()
    }

    public AddDeclaration(newDeclaration : Declaration) : void
    {
      _declarationStore = _declarationStore.AddDeclaration(newDeclaration)
    }

    public virtual CanMerge(candidate : Declaration) : bool
    {
      _ = candidate;
      false
    }

    public virtual IsSameIdentity(candidate : Declaration) : bool
    {
      _ = candidate;
      true
    }

    public virtual AfterStage(stage : int) : void
    {
      _ = stage;
    }

    public ToXaml() : string
    {
      SymbolUtils.ToXaml(this :> DeclarationSymbol)
    }

    public override ToString() : string
    {
      SymbolUtils.ToString(this :> DeclarationSymbol)
    }
  }
}
