using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public abstract class SymbolBase
  {
    protected this()
    {
      _id = Interlocked.Increment(ref _symbolIdCounter);
    }

    private static mutable _symbolIdCounter : int = 0;

    private         _id           : int;
    private mutable _nameId       : int;
    private mutable _declarations : object;

    public Id          : int    { get { _id } }
    public IsNameValid : bool   { get { _nameId > 0 } }
    public Name        : string { get { if (_nameId > 0) StringIndex.GetText(_nameId) else "<invalid name>" } }
    public InitialName : string { get { if (_nameId < 0) StringIndex.GetText(~_nameId) else Name } }

    public override GetHashCode() : int { _id }
    public override Equals(other : object) : bool { other == this }

    public GetDeclarationsUntyped() : Seq[Declaration]
    {
      match (_declarations)
      {
        | d   is Declaration       => [d]
        | lst is list[Declaration] => lst
        | _                        => []
      }
    }

    public GetDeclarationsOfType[TDeclaration]() : Seq[TDeclaration]
      where TDeclaration : Declaration
    {
      match (_declarations)
      {
        | d is TDeclaration => yield d;
        | lst is list[Declaration] =>
          foreach (d is TDeclaration in lst)
            yield d;

        | _ => ()
      }
    }

    public AddDeclaration([NotNull] newDeclaration : Declaration) : void
    {
      _declarations =
        match (_declarations)
        {
          | null                     => newDeclaration
          | d is Declaration         => [newDeclaration, d] : object
          | lst is list[Declaration] => newDeclaration :: lst
          | _ => assert(false, $"Unable to add declaration '$newDeclaration' to symbol declaration store")
        };

      UpdateName(newDeclaration.Name.Id);
    }

    protected UpdateName(newId : int) : void
    {
      when (_nameId != newId)
      {
        if (_nameId == 0)
          _nameId = newId
        else when (_nameId > 0)
          _nameId = ~_nameId
      }
    }

    public virtual CanMerge(candidate : Declaration) : bool
    {
      _ = candidate;
      false
    }

    public virtual IsSameIdentity(candidate : Declaration) : bool
    {
      _ = candidate;
      true
    }

    public virtual AfterStage(stage : int) : void
    {
      _ = stage;
    }

    public ToXaml() : string
    {
      SymbolUtils.ToXaml(this :> DeclarationSymbol)
    }

    public override ToString() : string
    {
      SymbolUtils.ToString(this :> DeclarationSymbol)
    }
  }
}
