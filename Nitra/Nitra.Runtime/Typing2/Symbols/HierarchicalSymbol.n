using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public interface IContainer : ISymbol2
  {
    IsMembersScopeEvaluated : bool                { get; }
    MembersScope            : Scope.Table         { get; }
  }
  
  //public interface IContainer[TMember] : IContainer
  //  where TMember: IMembersSymbol
  //{
  //  new Members : Seq[TMember] { get; }
  //}
  
  [Record]
  public abstract class HierarchicalSymbol : MembersSymbol, IContainer
  {
    [RecordIgnore] public IsMembersScopeEvaluated : bool        { get { true } }
    [RecordIgnore] public MembersScope            : Scope.Table { get; default Scope.Table(); }

    public override Scope : Scope { get { MembersScope } }
    
    public override IsResolved : bool { get { true } }
    
    public override TryBind(reference : IReference) : ISymbol2
    {
      this.Scope.TryBind(reference)
    }

    public DefineNestedSymbol(symbol : HierarchicalSymbol, reportErrors : bool) : void
    {
      this.MembersScope.DefineNestedSymbol(this, symbol, reportErrors)
    }

    public override MakeComletionList(prefix : string) : Seq[ISymbol2]
    {
      Scope.MakeComletionList(prefix)
    }
  }
}
