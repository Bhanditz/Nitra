using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  [Record]
  public abstract class HierarchicalSymbol : HierarchicalBaseSymbol
  {
    [RecordIgnore] public Scope : Scope.Table { get; set; default Scope.Table(); }
    
    public DefineNestedSymbol(symbol : HierarchicalSymbol) : void
    {
      mutable old;
      when (Scope.NameTable.TryGetValue(symbol.Name.Id, out old))
      {
        AstContext.CompilerMessages.Error(symbol.Name, 
          $"The $(Kind) '$(FullName)' already contains a definition for '$(symbol.Name)'");

        if (old is AmbiguousHierarchicalSymbol as amb)
          amb.Ambiguous ::= symbol;
        else
          Scope.NameTable[Name.Id] = AmbiguousHierarchicalSymbol(old.Name, symbol.Parent, [old :> HierarchicalSymbol, symbol]);

        return;
      }
          
      Scope.NameTable.Add(symbol.Name.Id, symbol);
    }

    public override IsResolved : bool { get { true } }
    
    public override TryBind(reference : IReference) : Symbol2
    {
      this.Scope.TryBind(reference)
    }
  }
}
