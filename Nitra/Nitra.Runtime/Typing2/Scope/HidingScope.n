using Nitra.Declarations;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol  = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  public sealed class HidingScope : Scope
  {
    public Hidden : Scope { get; }
    public Scope  : Scope { get; }
    
    internal this(hidden : Scope, scope  : Scope)
    {
      Hidden = hidden;
      Scope  = scope;
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      def binded = results.Count;
      Scope.BindMany(reference, ref results);
      when (binded == results.Count)
        Hidden.BindMany(reference, ref results);
    }

    public override MakeCompletionList(prefix : string) : Seq[ISymbol]
    {
      def hiding = Scope.MakeCompletionList(prefix).ToDictionary(_.Id);
      def result = List(hiding.Values);

      foreach (symbol in Hidden.MakeCompletionList(prefix))
        when (!hiding.ContainsKey(symbol.Id))
          result.Add(symbol);

      result
    }

    public override ToString() : string
    {
      $<#$Scope hides $Hidden#>
    }
  }
}
