using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  [StructuralEquality]
  public sealed class HidingScope : Scope
  {
    public Hidden : Scope { get; }
    public Scope  : Scope { get; }

    internal this(hidden : Scope, scope  : Scope)
    {
      Hidden = hidden;
      Scope  = scope;
    }

    public override AllSymbols : Seq[DeclarationSymbol]
    {
      get
      {
        def enumerated = HashSet();
        foreach (symbol in this.Scope.AllSymbols)
          yield { _ = enumerated.Add(symbol); symbol };
        foreach (symbol in this.Hidden.AllSymbols)
          when (enumerated.Add(symbol))
            yield symbol;
      }
    }
    
    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      this.Scope.FindMany(predicate, ref results);
      this.Hidden.FindMany(predicate, ref results);
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      def binded = results.Count;
      Scope.BindMany(reference, ref results);
      when (binded == results.Count)
        Hidden.BindMany(reference, ref results);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      def hiding = Scope.MakeCompletionList(prefix).ToDictionary(_.Id);
      def result = List(hiding.Values);

      foreach (symbol in Hidden.MakeCompletionList(prefix))
        when (!hiding.ContainsKey(symbol.Id))
          result.Add(symbol);

      result
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
    {
      def id            = nodeToIdMap.GetObjectId(this);
      def idScope       = nodeToIdMap.GetObjectId(this.Scope);
      def idHidingScope = nodeToIdMap.GetObjectId(this.Hidden);

      nodes.Add($<#Obj_$id [label="HidingScope"]#>);
      edges.Add($<#Obj_$id -> Obj_$idScope#>);
      edges.Add($<#Obj_$id -> Obj_$idHidingScope  [color=darkgray]#>);

      this.Scope.ToDot(nodeToIdMap, nodes, edges);
      this.Hidden.ToDot(nodeToIdMap, nodes, edges);
    }
    
    public override ToString() : string
    {
      <#HidingScope#>
    }

    public override HideWith(scope : Scope) : Scope
    {
      if (this.Scope.Equals(scope))
        this
      else
        base.HideWith(scope)
    }

    public override UnionWith(scope : Scope) : Scope
    {
      // hide(h1, s) + hide(h2, s) -> hide(h1 + h2, s)
      if (scope is HidingScope(Hidden = otherHidden, Scope = otherScope) when this.Scope.Equals(otherScope))
        Hidden.UnionWith(otherHidden).HideWith(Scope)
      else
        base.UnionWith(scope)
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(Hidden, writer);
      metadataWriter.WriteObject(Scope, writer);
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def hidden = metadataReader.ReadObject(reader);
      def scope  = metadataReader.ReadObject(reader);
      HidingScope(hidden, scope)
    }
  }
}
