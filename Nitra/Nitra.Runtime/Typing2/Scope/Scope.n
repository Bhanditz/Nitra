using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  public abstract class Scope
  {
    public abstract BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void where TSymbol : ISymbol;
    public abstract MakeCompletionList(prefix : string) : Seq[ISymbol];

    public Bind[TSymbol](reference : Reference) : Ref[TSymbol]
      where TSymbol : ISymbol
    {
      def sym = TryBind(reference);
      SymbolUtils.ReportError(sym);
      sym
    }

    /// Если не может связать возвращает AmbiguousSymbol или UnresolvedSymbol.
    public TryBind[TSymbol](reference : Reference) : Ref[TSymbol]
      where TSymbol : ISymbol
    {
      mutable result = LightList();
      BindMany(reference, ref result);
      match (result.Count)
      {
        | 0 => Ref.Unresolved(reference.File, reference.Span, reference.Text, ResolutionSource.Bind(this))
        | 1 => Ref.Some(reference.File, reference.Span, result[0])
        | _ => Ref.Ambiguous(reference.File, reference.Span, result.ToNList(), ResolutionSource.Bind(this))
      }
    }
  }

  public module ScopeExtensions
  {
    public UnionWith(this scope1 : Scope, scope2 : Scope) : Scope
    {
      | (EmptyScope, s)
      | (s, EmptyScope) => s
      | (UnionScope(Scopes = scopes1), UnionScope(Scopes = scopes2)) => UnionScope(scopes1 + scopes2)
      | (UnionScope(Scopes = scopes), s)
      | (s, UnionScope(Scopes = scopes)) => UnionScope(s :: scopes)
      | _ => UnionScope([scope1, scope2])
    }

    public HideWith(this scope1 : Scope, scope2 : Scope) : Scope
    {
      if (scope1 : object == EmptyScope.Instance)
        scope2
      else if (scope2 : object == EmptyScope.Instance)
        scope1
      else
        HidingScope(scope1, scope2)
    }

    public FilterWith(this scope : Scope, predicate : Func[ISymbol, bool]) : Scope
    {
      if (scope : object == EmptyScope.Instance)
        scope
      else
        FilteringScope(scope, predicate)
    }
  }
}
