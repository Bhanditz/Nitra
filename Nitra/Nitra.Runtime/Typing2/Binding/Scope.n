using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  public variant Scope
  {
    | Table
      {
        [RecordIgnore] private _nameTable : Hashtable[int, ISymbol];

        public this() { _nameTable = Hashtable(); }

        public Symbols : Hashtable[int, ISymbol].ValueCollection { get { _nameTable.Values } }

        public Define[TSymbol](declaration : IDeclaration) : TSymbol
          where TSymbol : ISymbol2
        {
          def     name             = declaration.Name;
          def     candidateSymbols = LightList();
          mutable ambiguousSymbols : HashSet[ISymbol2];

          // пробуем смерджить
          match (this.TryGetSymbol(name))
          {
            | null => () // это первое объявление символа с таким именем в этом scope-е
            | ambiguousSymbol is IAmbiguousSymbol =>
              ambiguousSymbols = HashSet(ambiguousSymbol.Ambiguous);
              foreach (symbol is TSymbol in ambiguousSymbol.Ambiguous)
              {
                when (symbol.IsMergeKeyEquals(declaration) && symbol.MergeCondition(declaration))
                  candidateSymbols.Add(symbol);
              }

            | symbol is TSymbol =>
              ambiguousSymbols = HashSet();
              _ = ambiguousSymbols.Add(symbol);

              when (symbol.IsMergeKeyEquals(declaration) && symbol.MergeCondition(declaration))
                candidateSymbols.Add(symbol);

            | symbol =>
              ambiguousSymbols = HashSet();
              _ = ambiguousSymbols.Add(symbol);
          }

          def concreteSymbol =
            match (candidateSymbols.Count)
            {
              | 0 => declaration.CreateSymbol(name) :> TSymbol;
              | 1 => candidateSymbols[0] // merge
              | _ => assert(false)
            };

          if (ambiguousSymbols : object == null)
            _nameTable.Add(name.Id, concreteSymbol);
          else when (ambiguousSymbols.Add(concreteSymbol))
          {
            // фильтруем без учета конкретного типа
            def realAmbiguousSymbols = ambiguousSymbols.FilterToArray(s => !concreteSymbol.Equals(s) && s.IsMergeKeyEquals(declaration));
            when (realAmbiguousSymbols.Length > 0)
            {
              def cm = AstContext.CompilerMessages;
              using (nested = cm.RootError(name, $"Redefinition of '$name'"))
                foreach (ambiguous in realAmbiguousSymbols)
                  foreach (d in ambiguous.Declarations)
                    nested.Hint(d.Name, "previous definition.");
            }
            _nameTable[name.Id] = AmbiguousSymbol(name, ambiguousSymbols.NToList());
          }

          concreteSymbol
        }

        internal TryGetSymbol(name : IName) : ISymbol
        {
          mutable old;
          when (_nameTable.TryGetValue(name.Id, out old))
            return old;

          null
        }

        internal TryGetSymbol(name : IReference) : ISymbol
        {
          mutable old;
          when (_nameTable.TryGetValue(name.Id, out old))
            return old;

          null
        }

        public override ToString() : string { $<#[..$(_nameTable.Keys; ", "; StringIndex.GetText)]#> }
      }

    | Union  { public Scopes : list[Scope] { get; } }
    | Hide   { public Scope  : Scope       { get; } public Hidden : Scope { get; } }
    | Filter { public Scope  : Scope       { get; } public Predicate : Func[ISymbol, bool] { get; } }
    | Nil
    
    public static IsPrefixOf(this prefix : string, text : string) : bool
    {
      text.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase)
    }

    public MakeComletionList(prefix : string) : Seq[ISymbol2]
    {
      match (this)
      {
        | Table  as s => if (string.IsNullOrEmpty(prefix)) s.Symbols else s.Symbols.Where(s => prefix.IsPrefixOf(s.Name.Text))
        | Union  as s => s.Scopes.SelectMany(s => s.MakeComletionList(prefix))
        | Filter as s => s.Scope.MakeComletionList(prefix).Where(s.Predicate)
        | Nil         => Enumerable.Empty()
        | Hide   as s =>
          def hiding = s.Scope.MakeComletionList(prefix).ToDictionary(s => s.Id);
          def result = List(hiding.Values);
          
          foreach (symbol in s.Hidden.MakeComletionList(prefix))
            when (!hiding.ContainsKey(symbol.Id))
              result.Add(symbol);

          result
      }
    }

    public Bind(reference : IReference) : ISymbol
    {
      def sym = TryBind(reference);
      SymbolUtils.ReportError(reference, sym);
      sym
    }

    /// Если не может связать возвращает AmbiguousSymbol или UnresolvedSymbol.
    public TryBind(reference : IReference) : ISymbol
    {
      def result = BindMany(reference);
      match (result.Count)
      {
        | 0 => UnresolvedSymbol(reference.ToName())
        | 1 => result[0]
        | _ => AmbiguousSymbol(reference.ToName(), result.NToList())
      }
    }

    public BindMany(reference : IReference) : List[ISymbol]
    {
      def results = List(2);
      def bindManyImpl(thisScope : Scope, reference : IReference, results : List[ISymbol]) : void
      {
        match (thisScope)
        {
          | Table as s =>
            def result = s.TryGetSymbol(reference);
            match (result)
            {
              | null => ()
              | a is IAmbiguousSymbol => results.AddRange(a.Ambiguous);
              | _ => results.Add(result);
            }
          
          | Union as s => 
            foreach (scope in s.Scopes)
              bindManyImpl(scope, reference, results);

          | Hide as s => 
            def binded = results.Count;
            bindManyImpl(s.Scope, reference, results);
            when (binded == results.Count)
              bindManyImpl(s.Hidden, reference, results);
        
          | Filter as s =>
            def notFilteredResults = List();
            bindManyImpl(s.Scope, reference, notFilteredResults);
            foreach (sym in notFilteredResults)
              when (s.Predicate(sym))
                results.Add(sym);
          
          | Nil => ()
        }
      }
      
      bindManyImpl(this, reference, results);
      results
    }
    
    public override ToString() : string
    {
      match (this)
      {
        | Table       => assert3(false)
        | Union  as s => $<# Union(..$(s.Scopes))#>
        | Hide   as s => $<#$(s.Scope) hide $(s.Hidden)#>
        | Filter      => "Filter"
        | Nil => ""
      }
    }
  }
}
