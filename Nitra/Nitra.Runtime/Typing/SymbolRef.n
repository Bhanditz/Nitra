using Nemerle;
using Nitra.ProjectSystem;

namespace Nitra.Typing
{
  internal interface ISymbolRef
  {
    ToOption() : ValueOption[Symbol];
  }

  [Record]
  public variant SymbolRef[T] : Located, ISymbolRef
    where T : Symbol
  {
    | Some { Symbol : T }
    | None

    public override Location : Location { get; }
    public IsGenerated       : bool     { get; }
    public IsSome            : bool     { get { this is Some } }
    public IsNone            : bool     { get { this is None } }
    public HasValue          : bool     { get { this is Some } }

    public GetValue(messages : ICompilerMessages) : T
    {
      match (this)
      {
        | Some(symbol) => symbol
        | None         => messages.FatalError(this, $"Unresolved symbol $(this.GetText())"); //assert2(false); assert(false);
      }
    }

    private ToGenericOption() : ValueOption[Symbol] implements ISymbolRef.ToOption
    {
      match (this)
      {
        | Some(symbol) => VSome(symbol)
        | None         => VNone()
      }
    }

    public static Create(located : Located, value : option[T], isGenerated : bool = false) : SymbolRef[T]
    {
     Create(located.Location, value, isGenerated)
    }

    public static Create(location : Location, value : option[T], isGenerated : bool = false) : SymbolRef[T]
    {
      match (value)
      {
        | Some(symbol) => SymbolRef.Some(location, isGenerated, symbol)
        | None         => SymbolRef.None(location, isGenerated)
      }
    }

    public static Create(located : Located, value : ValueOption[T], isGenerated : bool = false) : SymbolRef[T]
    {
      Create(located.Location, value, isGenerated)
    }

    public static Create(location : Location, value : ValueOption[T], isGenerated : bool = false) : SymbolRef[T]
    {
      match (value)
      {
        | VSome(symbol) => SymbolRef.Some(location, isGenerated, symbol)
        | VNone         => SymbolRef.None(location, isGenerated)
      }
    }

    public override ToString() : string
    {
      match (this)
      {
        | Some(r) => r.Name
        | None    => $"$(GetText()) (unresolved)"
      }
    }

    public Equals(other : SymbolRef[T]) : bool
    {
      match (this, other)
      {
        | (Some(thisSymbol), Some(otherSymbol)) => thisSymbol : object == otherSymbol
        | _ => false
      }
    }

    public override Equals(other : object) : bool
    {
      if (this is Some(thisSymbol))
        match (other)
        {
          | other is SymbolRef[T] =>
            if (other is Some(otherSymbol))
              thisSymbol : object == otherSymbol
            else false

          | other is ISymbolRef =>
            if (other.ToOption() is VSome(otherSymbol))
              thisSymbol : object == otherSymbol
            else false

          | _ => false
        }
      else false
    }

    public static @==[K](self : SymbolRef[K], other : SymbolRef[T]) : bool
      where K : Symbol
    {
      match (self, other)
      {
        | (Some(selfSymbol), Some(otherSymbol)) => selfSymbol : object == otherSymbol : object
        | _ => false
      }
    }

    public override GetHashCode() : int
    {
      match (this)
      {
        | Some(symbol) => (symbol : object).GetHashCode()
        | None         => typeof(T).GetHashCode()
      }
    }

    public Map[K](mapper : T -> K) : option[K]
    {
      match (this)
      {
        | Some(symbol) => option.Some(mapper(symbol))
        | None         => option.None()
      }
    }

    public static @:(symbolRef : SymbolRef[T]) : option[T]
    {
      symbolRef.ToOption()
    }

    public ToOption() : option[T]
    {
      match (this)
      {
        | Some(symbol) => option.Some(symbol)
        | None         => option.None()
      }
    }
  }
}
