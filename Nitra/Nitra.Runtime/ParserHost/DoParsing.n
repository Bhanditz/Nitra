using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime;
using Nitra.Runtime.Errors;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParserHost
  {
    public DoParsing(source : SourceSnapshot, descriptor : StartRuleDescriptor) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor);
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor) : ParseResult
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsingImpl(source, 0, grammar.GetSimpleRuleParser(desc), VNone())
        | desc is ExtensibleRuleDescriptor => DoParsingImpl(source, 0, grammar.GetExtensibleRuleParser(desc, 0), VNone())
        | _ => assert3(false, "DoParsing support only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    public DoParsing(source : SourceSnapshot, descriptor : StartRuleDescriptor, token : CancellationToken) : ParseResult
    {
      DoParsing(source, AddGrammar(DefaultCompositeGrammar, descriptor.Grammar), descriptor, token);
    }

    public DoParsing(source : SourceSnapshot, grammar : CompositeGrammar, descriptor : StartRuleDescriptor, token : CancellationToken) : ParseResult
    {
      match (descriptor)
      {
        | desc is SimpleRuleDescriptor     => DoParsingImpl(source, 0, grammar.GetSimpleRuleParser(desc), VSome(token))
        | desc is ExtensibleRuleDescriptor => DoParsingImpl(source, 0, grammar.GetExtensibleRuleParser(desc, 0), VSome(token))
        | _ => assert3(false, "DoParsing support only SimpleRuleDescriptor or ExtensibleRuleDescriptor")
      }
    }

    private DoParsingImpl(source : SourceSnapshot, startPos : int, ruleParser : StartRuleParser, token : ValueOption[CancellationToken]) : ParseResult
    {
      when (Thread.CurrentThread.Name != null)
        Thread.CurrentThread.Name = "Parsing Thread";
      def parseResult = ParseResult(source, startPos, source.Text.Length * 10, this, ruleParser);
      def registration = match(token)
      {
        | VSome(token) => VSome(token.Register(() => parseResult.TerminateParsing = true))
        | VNone        => VNone()
      };
      try
      {
        _ = parseResult.Allocate(2);
        mutable res = ruleParser.Parse(startPos, parseResult.Text, parseResult);
        when (res < 0)
        {
          def maxFailPos = parseResult.MaxFailPos;
          try
          {
            def rp = RecoveryParser(parseResult);
            rp.PanicRecovery();
            //rp.RecoveryFromAllErrors();

            def errorCollector = ErrorCollectorWalker();
            errorCollector.Walk(parseResult);

            res = parseResult.Text.Length;
          }
          catch
          {
            | _ is OperationCanceledException => throw;
            | e =>
              def error = GetParsingFailureError(parseResult, maxFailPos);
              parseResult.ReportError(error);
              throw ParsingFailureException(error.ToString(), e, parseResult);
          }
        }
        
        assert3(res >= 0);

        parseResult.ast[ParseResult.ResultOffset] = res;

        parseResult
      }
      finally
      {
        when (registration is VSome(registration))
          registration.Dispose();
      }
    }

    private static GetParsingFailureError(parseResult : ParseResult, maxFailPos : int) : ParseError
    {
      def isValidToken(x) { x > maxFailPos }

      when (maxFailPos == parseResult.Text.Length)
        return UnexpectedEndOfFileError(Location(parseResult, maxFailPos, maxFailPos));

      def tokens = parseResult.RuleParser.Grammar.ParseAllGrammarTokens(maxFailPos, parseResult);
      if (tokens.Any(isValidToken))
      {
        def longestToken = tokens.Max();
        UnexpectedError(Location(parseResult, maxFailPos, longestToken))
      }
      else
      {
        mutable pos = maxFailPos + 1; // range already checked
        while (pos < parseResult.Text.Length)
        {
          when (parseResult.RuleParser.Grammar.ParseAllGrammarTokens(pos, parseResult).Any(isValidToken))
            break;
          ++pos;
        }
        UnexpectedError(Location(parseResult, maxFailPos, pos))
      }
    }
  }
}
