using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Strategies;

using System;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public partial class ParserHost
  {
    private _syncRoot : object = object();

    private DefaultCompositeGrammar : CompositeGrammar;

    internal AssemblyScope : Func[Seq[Assembly]] { get; }

    public RecoveryStrategy : RecoveryStrategy { get; set; }

    public this()
    {
      this(DefaultAssemblyScope, Recovery(null).Strategy) // TODO: Recovery.Strategy не реентерабельный!
    }

    public this([NotNull] recoveryStrategy : RecoveryStrategy)
    {
      this(DefaultAssemblyScope, recoveryStrategy)
    }

    public this(assemblyScope : Func[Seq[Assembly]])
    {
      this(assemblyScope, Recovery(null).Strategy) // TODO: Recovery.Strategy не реентерабельный!
    }

    public this([NotNull] assemblyScope : Func[Seq[Assembly]], [NotNull] recoveryStrategy : RecoveryStrategy)
    {
      DefaultCompositeGrammar = CompositeGrammar(this);
      _compositeGrammars.Add(DefaultCompositeGrammar.Grammars, DefaultCompositeGrammar);
      AssemblyScope    = assemblyScope;
      RecoveryStrategy = recoveryStrategy;
      _allRules.Add(null);//Root recovery stack frame id.
    }

    private _walkers : Hashtable[string, WalkerHost] = Hashtable();

    public GetWalkerHost(walkerType : string) : WalkerHost
    {
      lock (_syncRoot)
      {
        if (_walkers.Contains(walkerType))
          _walkers[walkerType]
        else
        {
          def host = WalkerHost(this, walkerType);
          foreach (compositeGrammar in _compositeGrammars.Values)
            host.AddCompositeGrammar(compositeGrammar);
          _walkers[walkerType] = host;
          host;
        }
      }
    }

    internal RuleParsers[ruleId : int] : object
    {
      get { _allRules[ruleId] }
    }

    public static DefaultAssemblyScope : Func[Seq[Assembly]] = () => AppDomain.CurrentDomain.GetAssemblies();
  }
}
