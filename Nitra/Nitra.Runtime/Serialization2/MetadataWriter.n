using Nitra.ProjectSystem;
using Nitra.Runtime.Binding;
using Nitra.Staging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Reflection;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization2
{
  public sealed class MetadataWriter
  {
    public this(project : Project)
    {
      Project = project;
    }

    public Project : Project { get; }

    private _typeDescriptors : Dictionary[Type, MetadataTypeDescriptor]   = Dictionary();
    private _symbols         : Dictionary[DeclarationSymbol, int]         = Dictionary();

    private GetTypeDescriptor(type : Type) : MetadataTypeDescriptor
    {
      mutable descriptor;
      unless (_typeDescriptors.TryGetValue(type, out descriptor))
      {
        descriptor =
          if (type.IsGenericTypeDefinition)
            MetadataTypeDescriptor.GenericDefinition(_typeDescriptors.Count + 1, type, type.GetGenericArguments().Length)
          else if (type.IsGenericType)
          {
            def definition = GetTypeDescriptor(type.GetGenericTypeDefinition());
            def arguments  = type.GetGenericArguments().MapToList(GetTypeDescriptor);
            MetadataTypeDescriptor.Generic(_typeDescriptors.Count + 1, type, definition, arguments);
          }
          else
            MetadataTypeDescriptor.Simple(_typeDescriptors.Count + 1, type);

        _typeDescriptors.Add(type, descriptor);
      }
      descriptor
    }

    public WriteObject(obj : ISerializable, writer : BinaryWriter) : void
    {
      if (obj != null)
      {
        def descriptor = GetTypeDescriptor(obj.GetType());
        writer.Write(descriptor.Id : int);
        obj.Serialize(writer, this);
      }
      else
        writer.Write(0 : int);
    }

    public WriteObjects[T](items : list[T], writer : BinaryWriter) : void
      where T: ISerializable
    {
      writer.Write(items.Length : int);
      foreach (item in items)
        WriteObject(item, writer);
    }

    public WriteObjects[T](items : System.Collections.Generic.ICollection[T], writer : BinaryWriter) : void
      where T: ISerializable
    {
      writer.Write(items.Count : int);
      foreach (item in items)
        WriteObject(item, writer);
    }

    public WriteRoot(root : ISerializable, stream : Stream) : void
    {
      _typeDescriptors.Clear();
      _symbols.Clear();

      using (buffer = MemoryStream())
      {
        using (writer = BinaryWriter(buffer, MetadataDefaults.Encoding, true))
          WriteObject(root, writer);

        using (writer = BinaryWriter(stream, MetadataDefaults.Encoding, true))
        {
          def normalTypes = _typeDescriptors.Values.Where(t => !(t is MetadataTypeDescriptor.Generic)).GroupBy(d => d.Type.Assembly).ToList();
          writer.Write(normalTypes.Count : int);
          foreach (group in normalTypes)
          {
            writer.Write(group.Key.FullName);
            writer.Write(group.Count() : int);
            foreach (type in group.OrderBy(t => t.Id))
            {
              writer.Write(type.Type.FullName);
              writer.Write(type.Id : int);
              def argCount = if (type is MetadataTypeDescriptor.GenericDefinition(argCount)) argCount else 0;
              writer.Write(argCount : int);
            }
          }

          def genericTypes = _typeDescriptors.Values.OfType.[MetadataTypeDescriptor.Generic]().OrderBy(t => t.Id).ToList();
          writer.Write(genericTypes.Count : int);
          foreach (type in genericTypes)
          {
            writer.Write(type.Id : int);
            writer.Write(type.Definition.Id : int);
            foreach (arg in type.Arguments)
              writer.Write(arg.Id : int);
          }
        }

        buffer.WriteTo(stream);
      }
    }

    public RegisterSymbol(symbol : DeclarationSymbol, id : out int) : bool
    {
      if (_symbols.TryGetValue(symbol, out id))
        false
      else
      {
        def newId = _symbols.Count + 1;
        _symbols.Add(symbol, newId);
        id = newId;
        true
      }
    }
  }
}
