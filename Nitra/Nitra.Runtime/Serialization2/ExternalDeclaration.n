using Nitra.ProjectSystem;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization2
{
  public class ExternalDeclaration[TSymbol] : DeclarationBase, Declaration
    where TSymbol: DeclarationSymbol, new()
  {
    public this(name : Name)
    {
      __NameImpl = name;
    }

    private mutable _containingTable : TableScope;

    public Name                       : Name              { get { __NameImpl } }
    public IsSymbolEvaluated          : bool              { get { __NameImpl.IsSymbolEvaluated } }
    public Symbol                     : DeclarationSymbol
    {
      get { __NameImpl.Symbol }
      set { __NameImpl.Symbol = value }
    }

    public IsContainingTableEvaluated : bool              { get { _containingTable : object != null } }
    public ContainingTable            : TableScope
    {
      get { assert(IsContainingTableEvaluated); _containingTable }
      set { assert(!IsContainingTableEvaluated); _containingTable = value }
    }

    public override IsParsed : bool { get { false } }

    public override CreateSymbol() : DeclarationSymbol
    {
      TSymbol()
    }

    public override Accept(visitor : IAstVisitor) : void
    {
      visitor.Visit(Name);
    }

    public override ToXaml() : string
    {
      Name.ToXaml()
    }
  }
}
