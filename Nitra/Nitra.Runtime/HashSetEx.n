using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Collections
{
  [System.Serializable]
  [System.Runtime.InteropServices.ComVisible(false)]
  [DebuggerDisplay("Count = {Count}: {ToString()}")]
  [DebuggerNonUserCode]
  public class HashSetEx[T] : IEnumerable[T]
  {
    _hashtable : Hashtable[T, T] = Hashtable();

		public TryGetValue(key : T, value : out T) : bool
		{
		  _hashtable.TryGetValue(key, out value)
		}

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public Keys : Dictionary[T, T].KeyCollection { get { _hashtable.Keys } }

		public IsEmpty : bool { get { _hashtable.Count == 0 } }
		
		public Count : int { get { _hashtable.Count } }
		
		public Contains(key : T) : bool
		{
		  _hashtable.ContainsKey(key)
		}
		
		public Add(key : T) : void
		{
		  _hashtable.Add(key, key) : void;
		}
		
    public GetEnumerator() : IEnumerator[T]
    {
      _hashtable.Keys.GetEnumerator()
    }
	}
}
