using Nemerle;
using Nemerle.Collections;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

[assembly: DefineSurround("not_recovery", false, def old_isRecovered = _isRecovered, _isRecovered = old_isRecovered)]

namespace Nitra.Runtime
{
  [Record]
  public struct ExtensionAmbiguity
  {
    public AstPtr              : int;
    public ExtensionRuleParser : ExtensionRuleParser;
  }
  
  public abstract class WalkerBase[TContext]
  {

    mutable _isRecovered : bool;

    public Walk(parseResult : ParseResult, context : TContext) : void
    {
      _isRecovered = parseResult.RecoveredSequences.Count > 0;
      def endPos = parseResult.Text.Length;

      match (parseResult.RuleParser)
      {
        | ExtensibleRuleParser as ruleParser => WalkExtensible(parseResult.StartPos, endPos, ruleParser, parseResult, context)
        | SimpleRuleParser     as ruleParser => WalkSimple(parseResult.StartPos, endPos, ruleParser, parseResult, context)
        | _                                  => assert3(false)
      }
    }

    public virtual OnDeleted(parseResult : ParseResult, startPos : int, endPos : int, sequenceInfo : SequenceInfo, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnEmpty(ruleInfo : SubruleInfo.Empty, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : ParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      IgnoreParams();
    }


    public virtual OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      WalkSimple(startPos, endPos, ruleInfo.RuleParser, parseResult, context);
    }

    public virtual OnListItem(astPtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.ParsingSequence, startPos, endPos, context))
          return;
      }

      assert2(endPos >= 0);

      when (startPos != endPos)
      {
        surroundwith(not_recovery)
        {
          _ = WalkSequence(astPtr, startPos, parseResult, context);
        }
      }
    }

    public virtual OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      WalkExtensible(startPos, endPos, ruleInfo.RuleParser, parseResult, context)
    }

    public virtual OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      assert2(endPos >= 0);

      when (startPos == endPos)
        return;

      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.Rule.ParsingSequence, startPos, endPos, context))
          return;
      }

      surroundwith(not_recovery)
      {
        def curTextPos = WalkSequence(parseResult.GetAst(startPos, ruleInfo.Rule.Id), startPos, parseResult, context);
        assert3(curTextPos == endPos);
      }
    }

    public virtual OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      mutable curTextPos = startPos;

      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.ParsingSequence, startPos, endPos, context))
          return;
      }

      assert2(endPos >= 0);

      when (startPos != endPos && !ruleInfo.IsOptimized)
      {
        while (curTextPos < endPos)
          surroundwith(not_recovery)
          {
            def astPtr = parseResult.GetAst(curTextPos, ruleInfo.Rule.Id);
            def endPos = curTextPos + parseResult.GetAstSize(astPtr, ruleInfo.Rule);
            OnListItem(astPtr, ruleInfo.ListItemRule, curTextPos, endPos, parseResult, context);
            curTextPos = endPos;
          }
        assert3(curTextPos == endPos);
      }
    }

    public virtual OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : ParseResult, context : TContext) : void
    {
      mutable curTextPos = startPos;

      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.ParsingSequence, startPos, endPos, context))
          return;
      }

      assert2(endPos >= 0);

      when (startPos != endPos)
      {
        surroundwith(not_recovery)
        while (true)
        {
          when (curTextPos >= endPos) break;
          def astPtr = parseResult.GetAst(curTextPos, ruleInfo.Rule.Id);
          def itemEndPos = curTextPos + parseResult.GetAstSize(astPtr, ruleInfo.Rule);
          OnListItem(astPtr, ruleInfo.ListItemRule, curTextPos, itemEndPos, parseResult, context);
          curTextPos = itemEndPos;

          when (curTextPos >= endPos) break;
          def astPtr = parseResult.GetAst(curTextPos, ruleInfo.Separator.Id);
          def itemEndPos = curTextPos + parseResult.GetAstSize(astPtr, ruleInfo.Separator);
          OnListItem(astPtr, ruleInfo.ListItemSeparator, curTextPos, itemEndPos, parseResult, context);
          curTextPos = itemEndPos;
        }
        assert3(curTextPos == endPos);
      }
    }

    GetExtentions(parseResult : ParseResult, minRuleId : int, extensions : array[ExtensionRuleParser], begin : int, end : int, ambiguity : out List[ExtensionAmbiguity]) : ExtensionRuleParser
    {
      mutable firstPrefix;

      foreach (extension in extensions)
      {
        when (extension.RuleId >= minRuleId)
        when (parseResult.RecoveredSequences.ContainsKey((begin, end, extension.ParsingSequence)))
        {
          if (firstPrefix == null)
            firstPrefix = extension;
          else
          {
            when (ambiguity == null)
            {
              ambiguity = List();
              ambiguity.Add(ExtensionAmbiguity(-1, firstPrefix));
            }
            ambiguity.Add(ExtensionAmbiguity(-1, extension));
          }
        }
      }

      firstPrefix
    }

    public Walk(parseResult : ParseResult, states : array[ParsingState], subrules : array[ParseResult.SubruleStart], sequenceInfo : SequenceInfo, context : TContext) : void
    {
      StartWalkSequence(sequenceInfo);

      mutable prevIndexWithMarkers = -1;
      for (mutable i = 0; i < subrules.Length - 1; ++i)
      {
        def begin    = subrules[i].Pos;
        def end      = subrules[i + 1].Pos;
        def state    = states[subrules[i].State];
        def ruleInfo = state.Subrule;

        when (sequenceInfo != null)
        {
          for (mutable j = prevIndexWithMarkers + 1; j < ruleInfo.IndexWithMarkers; j++)
          {
            def subruleInfo = sequenceInfo.SubrulesWithMarkers[j];
            when (subruleInfo is SubruleInfo.Marker as marker)
              OnMarker(marker, begin, begin, parseResult, context);
          }
        }

        match (state)
        {
          | ExtensionPrefix  as state =>
            if (begin == end)
              OnPrefixMissed(state.RuleParser, begin, parseResult, context);
            else
            {
              mutable ambiguousPrefixs;
              def firstPrefix = GetExtentions(parseResult, -1, state.RuleParser.PrefixRules, begin, end, out ambiguousPrefixs);

              if (ambiguousPrefixs != null)
                OnAmbiguousPrefix(parseResult, state.RuleParser, ambiguousPrefixs, begin, end, context);
              else when (firstPrefix != null)
                _ = WalkPrefix(-1, begin, end, firstPrefix, parseResult, context);
            }

          | ExtensionPostfix as state =>
            mutable ambiguousPostfixs;
            def firstPrefix = GetExtentions(parseResult, state.RuleParser.FirstPostfixRuleId, state.RuleParser.PostfixRules, begin, end, out ambiguousPostfixs);

            if (ambiguousPostfixs != null)
              OnAmbiguousPostfix(parseResult, state.RuleParser, ambiguousPostfixs, begin, end, context);
            else when (firstPrefix != null)
              _ = WalkPostfix(-1, begin, end, firstPrefix, parseResult, context);

          | Predicate => ()

          | _ =>
            match (ruleInfo)
            {
              | Marker                        => assert3(false)
              | RegularCall       as ruleInfo => OnRegularCall      (    ruleInfo, begin, end, parseResult, context)
              | TokenString       as ruleInfo => OnTokenString      (    ruleInfo, begin, end, parseResult, context)
              | SimpleCall        as ruleInfo => OnSimpleCall       (    ruleInfo, begin, end, parseResult, context)
              | ExtensibleCall    as ruleInfo => OnExtensibleCall   (    ruleInfo, begin, end, parseResult, context)
              | Option            as ruleInfo => OnOption           (    ruleInfo, begin, end, parseResult, context)
              | List              as ruleInfo => OnList             (    ruleInfo, begin, end, parseResult, context)
              | ListWithSeparator as ruleInfo => OnListWithSeparator(    ruleInfo, begin, end, parseResult, context)
              | ListItem          as ruleInfo => OnListItem         (-1, ruleInfo, begin, end, parseResult, context)
              | Empty             as ruleInfo => OnEmpty            (    ruleInfo, begin, end, parseResult, context)
            }
        }
        prevIndexWithMarkers = if (ruleInfo == null) -1 else ruleInfo.IndexWithMarkers;
      }

      when (sequenceInfo != null)
      {
        def seqEnd = subrules[subrules.Length - 1].Pos;
        for (mutable j = prevIndexWithMarkers + 1; j < sequenceInfo.SubrulesWithMarkers.Length; j++)
        {
          def subruleInfo = sequenceInfo.SubrulesWithMarkers[j];
          when (subruleInfo is SubruleInfo.Marker as marker)
            OnMarker(marker, seqEnd, seqEnd, parseResult, context);
        }
      }

      FinishWalkSequence(sequenceInfo);
    }

    public virtual OnAmbiguous(parseResult : ParseResult, states : array[ParsingState], parseWays : array[array[ParseResult.SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : TContext) : void
    {
      _ = startPos; _ = endPos;

      foreach (parseWay in parseWays)
        Walk(parseResult, states, parseWay, sequenceInfo, context)
    }

    public virtual OnAmbiguousPrefix(parseResult : ParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity], startPos : int, endPos : int, context : TContext) : void
    {
      _ = extensibleRuleParser;
      foreach (parser in ambiguousPrefixs)
        _ = WalkPrefix(parser.AstPtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
    }

    public virtual OnAmbiguousPostfix(parseResult : ParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity], startPos : int, endPos : int, context : TContext) : void
    {
      _ = extensibleRuleParser;
      foreach (parser in ambiguousPrefixs)
        _ = WalkPostfix(parser.AstPtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
    }

    Walk(parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, context : TContext) : bool
    {
      when (startPos == endPos)
        return true;

      match (parseResult.TryGetRecoveredSequence(startPos, endPos, parsingSequence))
      {
        | null => false
        | Unambiguous as recoveredSequence =>
          if (recoveredSequence.IsDeleted)
            OnDeleted(parseResult, startPos, endPos, parsingSequence.SequenceInfo, context);
          else
            Walk(parseResult, parsingSequence.States, parseResult.RecoveredSubrules[recoveredSequence.Subrules].Subrules, parsingSequence.SequenceInfo, context);
          true

        | Ambiguous   as recoveredSequence =>
          assert2(!recoveredSequence.IsDeleted);
          def parseWays = array(recoveredSequence.Subrules.Length);
          foreach (subruleStart in recoveredSequence.Subrules with i)
            parseWays[i] = parseResult.RecoveredSubrules[subruleStart].Subrules;

          OnAmbiguous(parseResult, parsingSequence.States, parseWays, parsingSequence.SequenceInfo, startPos, endPos, context);
          true
      }
    }

    public virtual WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : ParseResult, context : TContext) : void
    {
      when (_isRecovered)
      {
        when (Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context))
          return;
      }

      surroundwith(not_recovery)
      {
        def end = WalkSequence(parseResult.TryGetAst(startPos, ruleParser.RuleId), startPos, parseResult, context);
        assert(end == endPos);
      }
    }

    public virtual WalkExtensible(startPos : int, endPos : int, ruleParser : ExtensibleRuleParser, parseResult : ParseResult, context : TContext) : void
    {
      when (_isRecovered)
      {
        when (Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context))
          return;
      }

      surroundwith(not_recovery)
      {
        mutable curTextPos = startPos;
        curTextPos = WalkExtension(parseResult.TryGetAst(curTextPos, ruleParser.PrefixId), curTextPos, ruleParser, parseResult, context);
        while (curTextPos < endPos)
          curTextPos = WalkExtension(parseResult.TryGetAst(curTextPos, ruleParser.PostfixId), curTextPos, ruleParser, parseResult, context);
        when (curTextPos != endPos)
          assert2(false);
      }
    }

    public WalkExtension(astPtr : int, mutable curTextPos : int, ruleParser : ExtensibleRuleParser, parseResult : ParseResult, context : TContext) : int
    {
      when (astPtr <= 0)
        return -1;

      def id = parseResult.ast[astPtr] & ExtensibleRuleParser.AstMask.Id;
      if (id == ruleParser.PrefixId)
      {
        mutable prefixAst = astPtr;
        def bestResult = parseResult.TryGetPrefix(ref curTextPos, ref prefixAst);

        if (bestResult > 0)
        {
          mutable pos = curTextPos;
          mutable prefixAstPtr = ruleParser.FindFirstPrefix(ref pos, parseResult);
          if (ruleParser.FindNextPrefix(prefixAstPtr, parseResult) > 0)
          {
            def ambiguousPrefixs = List.[ExtensionAmbiguity]();
            def extensionParser = ruleParser.PrefixRuleParser(prefixAstPtr, parseResult);
            def endPos = curTextPos + parseResult.GetAstSize(prefixAstPtr, extensionParser.SequenceInfo);
            do
            {
              def extensionParser = ruleParser.PrefixRuleParser(prefixAstPtr, parseResult);
              ambiguousPrefixs.Add(ExtensionAmbiguity(prefixAstPtr, extensionParser));
              prefixAstPtr = ruleParser.FindNextPrefix(prefixAstPtr, parseResult);
            }
            while (prefixAstPtr > 0);

            OnAmbiguousPrefix(parseResult, ruleParser, ambiguousPrefixs, curTextPos, endPos, context);

            endPos
          }
          else
          {
            def extensionParser = ruleParser.PrefixRuleParser(prefixAstPtr, parseResult);
            def endPos = curTextPos + parseResult.GetAstSize(prefixAstPtr, extensionParser.SequenceInfo);
            WalkPrefix(prefixAstPtr, curTextPos, endPos, extensionParser, parseResult, context);
            endPos
          }
        }
        else
        {
          OnPrefixMissed(ruleParser, curTextPos, parseResult, context);
          curTextPos
        }
      }
      else
      {
        mutable pos = curTextPos;
        mutable postfixAst = ruleParser.FindFirstPostfix(ref pos, parseResult);
        if (ruleParser.FindNextPostfix(postfixAst, parseResult) > 0)
        {
          def ambiguousPrefixs = List.[ExtensionAmbiguity]();
          def extensionParser = ruleParser.PostfixRuleParser(postfixAst, parseResult);
          def endPos = curTextPos + parseResult.GetAstSize(postfixAst, extensionParser.SequenceInfo);
          do
          {
            def extensionParser = ruleParser.PostfixRuleParser(postfixAst, parseResult);
            ambiguousPrefixs.Add(ExtensionAmbiguity(postfixAst, extensionParser));
            postfixAst = ruleParser.FindNextPostfix(postfixAst, parseResult);
          }
          while (postfixAst > 0);

          OnAmbiguousPostfix(parseResult, ruleParser, ambiguousPrefixs, curTextPos, endPos, context);

          endPos
        }
        else
        {
          def extensionParser = ruleParser.PostfixRuleParser(postfixAst, parseResult);
          def endPos = curTextPos + parseResult.GetAstSize(postfixAst, extensionParser.SequenceInfo);
          WalkPostfix(postfixAst, curTextPos, endPos, extensionParser, parseResult, context);
          endPos
        }
      }
    }

    public virtual WalkPrefix(astPtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, context : TContext) : void
    {
      if (astPtr < 0)
        _ = Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context);
      else
        _ = WalkSequence(astPtr, startPos, parseResult, context)
    }

    public virtual WalkPostfix(astPtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : ParseResult, context : TContext) : void
    {
      if (astPtr < 0)
        _ = Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context);
      else
        _ = WalkSequence(astPtr, startPos, parseResult, context)
    }

    public virtual StartWalkSequence (sequenceInfo : SequenceInfo) : void { IgnoreParams(); }
    public virtual FinishWalkSequence(sequenceInfo : SequenceInfo) : void { IgnoreParams(); }

    protected WalkSequence(astPtr : int, mutable curTextPos : int, parseResult : ParseResult, context : TContext) : int
    {
      assert2(astPtr > 0);
      assert2(parseResult.ast[astPtr + ExtensibleRuleParser.AstOfs.State] == int.MinValue);

      def sequenceInfo = parseResult.GetSequenceInfo(astPtr);
      StartWalkSequence(sequenceInfo);
      foreach (ruleInfo in sequenceInfo.SubrulesWithMarkers)
      {
        if (ruleInfo is Marker as ruleInfo)
          OnMarker(ruleInfo, curTextPos, curTextPos, parseResult, context);
        else
        {
          def sizePtr = astPtr + ruleInfo.Offset;
          def size    = parseResult.GetSize(sizePtr);
          def endPos  = curTextPos + size;

          match (ruleInfo)
          {
            | ListItem                      => assert(false)
            | Marker                        => assert3(false)
            | RegularCall       as ruleInfo => OnRegularCall      (ruleInfo, curTextPos, endPos, parseResult, context)
            | TokenString       as ruleInfo => OnTokenString      (ruleInfo, curTextPos, endPos, parseResult, context)
            | SimpleCall        as ruleInfo => OnSimpleCall       (ruleInfo, curTextPos, endPos, parseResult, context)
            | ExtensibleCall    as ruleInfo => OnExtensibleCall   (ruleInfo, curTextPos, endPos, parseResult, context)
            | Option            as ruleInfo => OnOption           (ruleInfo, curTextPos, endPos, parseResult, context)
            | List              as ruleInfo => OnList             (ruleInfo, curTextPos, endPos, parseResult, context)
            | ListWithSeparator as ruleInfo => OnListWithSeparator(ruleInfo, curTextPos, endPos, parseResult, context)
            | Empty             as ruleInfo => OnEmpty            (ruleInfo, curTextPos, endPos, parseResult, context)
          }
          curTextPos = endPos;
        }
      }

      FinishWalkSequence(sequenceInfo);
      curTextPos
    }
  }
}
