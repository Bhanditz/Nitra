using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;

namespace Nitra.ProjectSystem
{
  public abstract class CompilerMessages : ICompilerMessages
  {
    public NumberPrefix : string { get; }

    protected this(numberPrefix : string = null)
    {
      NumberPrefix = if (string.IsNullOrEmpty(numberPrefix)) "MSG" else numberPrefix;
    }

    public Hint         (loc : Location, msg : string, num : int = -1) : void                  {               ReportMessage(loc, msg, num, CompilerMessageType.Hint)    }
    public Warning      (loc : Location, msg : string, num : int = -1) : void                  {               ReportMessage(loc, msg, num, CompilerMessageType.Warning) }
    public Error        (loc : Location, msg : string, num : int = -1) : void                  { ErrorCount++; ReportMessage(loc, msg, num, CompilerMessageType.Error)   }
    public FatalError[T](loc : Location, msg : string, num : int = -1) : T                     { ErrorCount++; ReportMessage(loc, msg, num, CompilerMessageType.FatalError); assert(false, msg) }
    public RootWarning  (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages {               ReportMessage(loc, msg, num, CompilerMessageType.Warning); FakeRootCompilerMessages(this) }
    public RootHint     (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages {               ReportMessage(loc, msg, num, CompilerMessageType.Hint);    FakeRootCompilerMessages(this) }
    public RootError    (loc : Location, msg : string, num : int = -1) : IRootCompilerMessages { ErrorCount++; ReportMessage(loc, msg, num, CompilerMessageType.Error);   FakeRootCompilerMessages(this) }

    public ErrorCount : int { get; private set; }

    protected abstract ReportMessage(loc : Location, msg : string, num : int, messageType : CompilerMessageType) : void;

    protected FormatMessage(loc : Location, msg : string, num : int, messageType : CompilerMessageType) : string
    {
      def text = StringBuilder().Append(loc.ToMessageString()).Append(GetMessagePrefix(messageType));

      when (num != -1)
        _ = text.Append(NumberPrefix).Append(num).Append(": ");

      text.Append(msg).ToString()
    }

    protected static GetMessagePrefix(messageType : CompilerMessageType) : string
    {
      | FatalError | Error => "error: "
      | Warning            => "warning: "
      | Hint               => "hint: "
    }
  }
}
