using Nitra.Declarations;
using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class Project : CompilerMessages, ICompilerMessages
  {
    [ThreadStatic, Obsolete] public mutable static CurrentProject : Project; // TODO: Избавиться от этого.

    private mutable _assemblies : List[AssemblyName];

    public RootNamespace : NamespaceSymbol { get; private set; }

    protected this()
    {
    }

    public abstract Files : Seq[File] { get; }

    public Declarations : Seq[IDeclaration] { get { Files.Select(_.Declaration) } }

    public virtual Init(referencedAssemblies : Seq[AssemblyName]) : void
    {
      def assemblies = List();

      repeat(AssemblyIds.ReservedIdsCount)
        assemblies.Add(null);

      assemblies.AddRange(referencedAssemblies);
      _assemblies = assemblies;

      def root = HierarchyNode(this);
      def rootNamespace = NamespaceSymbol(null : string);
      root.SetRootNamespaceSymbol(rootNamespace);
      RootNamespace = rootNamespace;
    }

    public GetAssemblyName(assemblyId : byte) : AssemblyName
    {
      _assemblies[assemblyId]
    }

    [Memoize]
    public GetAssemblyId(assemblyName : AssemblyName) : byte
    {
      def arrayEquals(a : array[byte], b : array[byte]) : bool
      {
        when (ReferenceEquals(a, b))
          return true;
        when (a == null || b == null)
          return false;
        when (a.Length != b.Length)
          return false;
        for(mutable i = 0; i < a.Length; ++i)
          when (a[i] != b[i])
            return false;
        true
      }

      mutable nearestVersion = Version();
      mutable result = AssemblyIds.NoAssembly;
      for (mutable index = AssemblyIds.ReservedIdsCount; index < _assemblies.Count; ++index)
      {
        def n = _assemblies[index];
        when (n.Name == assemblyName.Name && arrayEquals(n.GetPublicKeyToken(), assemblyName.GetPublicKeyToken()))
        {
          when (n.Version == assemblyName.Version)
            return index :> byte;

          when (n.Version > assemblyName.Version && n.Version >= nearestVersion)
            result = index :> byte;
        }
      }
      result
    }

    public virtual AddSymbolRef(_symbol : Symbol, _loc : Location) : void
    {
    }

    public virtual AddSymbolDef(_symbol : Symbol, _loc : Location) : void
    {
    }
  }
}
