using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  [Record]
  public struct CompilerMessage
  {
    public Type           : CompilerMessageType   { get; }
    public Kind           : Guid                  { get; }
    public Location       : Location              { get; }
    public Text           : string                { get; }
    public Number         : int                   { get; }
    public NestedMessages : list[CompilerMessage] { get; }

    public override ToString() : string { this.Location.ToMessageString() + Text }
  }

  public module CompilerMessageExtensions
  {
    public TranslateTo(this message : CompilerMessage, target : ICompilerMessages) : void
    {
      if (message.NestedMessages.IsEmpty)
        target.ReportMessage(message.Type, message.Location, message.Text, message.Number)
      else
        using (root = target.ReportRootMessage(message.Type, message.Location, message.Text, message.Number))
          message.NestedMessages.TranslateTo(root)
    }

    public TranslateTo(this messages : list[CompilerMessage], target : ICompilerMessages) : void
    {
      foreach (message in messages)
        message.TranslateTo(target)
    }
  }
}
