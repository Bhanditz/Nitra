using Nitra.Runtime;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  [Record]
  public abstract class File : ISourceSnapshotProvider
  {
    public abstract Project     : Project { get; }
    public abstract Length      : int     { get; }
    public abstract FullName    : string  { get; }
    public virtual  Name        : string  { get { IO.Path.GetFileNameWithoutExtension(FullName) } }
    public abstract Ast         : IAst    { get; }
    public Statistics           : FileStatistics { get; }
    
    [RecordIgnore] protected mutable _parseMessages : CompilerMessageList = CompilerMessageList();
    public ParseMessages        : Seq[CompilerMessage] { get { _parseMessages } }

    [RecordIgnore] protected mutable _astMessages : CompilerMessageList = CompilerMessageList();
    public AstMessages          : CompilerMessageList { get { _astMessages } }
    
    [RecordIgnore] protected mutable _typingMessages : CompilerMessageList = CompilerMessageList();
    public TypingMessages       : CompilerMessageList{ get { _typingMessages } }
    
    public abstract GetParseTree() : IMappedParseTree[IAst];
    public abstract DeepResetProperties() : void;
    
    public GetCompilerMessages() : array[CompilerMessage]
    {
      def len1 = _parseMessages.Count;
      def len2 = len1 + _astMessages.Count;
      def result = array(len2 + _typingMessages.Count);
      _parseMessages.CopyTo (result, 0);
      _astMessages.CopyTo   (result, len1);
      _typingMessages.CopyTo(result, len2);
      result
    }
    

    public abstract GetSource() : SourceSnapshot;

    public virtual EvalProperties(context : DependentPropertyEvalContext) : void
    {
      IgnoreParams();
    }

    public override ToString() : string { FullName }
  }

  public abstract class ConcreteFile : File
  {
            _ruleDescriptor   : StartRuleDescriptor;
            _compositeGrammar : CompositeGrammar;
    mutable _parseResult      : IParseResult;
    mutable _astRoot          : AstRoot[IAst];
    mutable _parseTree        : IMappedParseTree[IAst];
    
    public ParseResult : IParseResult { get { _parseResult }}

    protected this(ruleDescriptor : StartRuleDescriptor, compositeGrammar : CompositeGrammar = null, statistics : FileStatistics = null)
    {
      base(statistics);
      _ruleDescriptor   = ruleDescriptor;
      _compositeGrammar = compositeGrammar;
    }

    public override Ast        : IAst
    {
      get
      {
        when (_astRoot == null)
          UpdateAst();
        _astRoot.Content
      }
    }

    public override GetParseTree() : IMappedParseTree[IAst]
    {
      when (_parseTree == null)
        UpdateParseTree();
      _parseTree
    }

    public virtual ResetCache() : void
    {
      _parseMessages.Clear();
      _parseResult = null;
      ResetParseTree();
    }

    public virtual ResetParseTree() : void
    {
      ResetAst();

      _parseTree   = null;
    }
    
    public virtual ResetAst() : void
    {
      _astMessages.Clear();
      _typingMessages.Clear();
      
      _astRoot     = null;
    }
    
    public override DeepResetProperties() : void
    {
      _typingMessages.Clear();
      when (_astRoot != null)
        IAstExtensions.DeepResetProperties(_astRoot.Content);
    }

    public override EvalProperties(context : DependentPropertyEvalContext) : void
    {
      when (_astRoot == null)
        UpdateAst();
      _astRoot.EvalProperties(context, _typingMessages);
    }

    protected virtual GetParseSession() : ParseSession
    {
      ParseSession(_ruleDescriptor, _compositeGrammar, compilerMessages=_parseMessages);
    }

    public virtual ReParse() : void
    {
      assert3(Project != null);

      def stat = Statistics;
      stat?.Parse.Restart();
      
      def parseSession = GetParseSession();
      _parseMessages.Clear();
      _astMessages.Clear();
      _typingMessages.Clear();
      
      _parseResult     = parseSession.Parse(GetSource());
      
      stat?.Parse.Stop();
    }

    public virtual UpdateParseTree() : void
    {
      when (_parseResult == null)
        ReParse();
        
      def stat = Statistics;
      // TODO: The parse tree does not materialize here. So the measurements are incorrect.
      stat?.ParseTree.Restart();

      _parseTree = _parseResult.CreateParseTree() :> IMappedParseTree[IAst];
      
      stat?.ParseTree.Stop();
    }

    public virtual UpdateAst() : void
    {
      assert3(Project != null);
      
      when (_parseResult == null)
        ReParse();

      when (_parseTree == null)
        UpdateParseTree();

      def stat = Statistics;
      stat?.Ast.Restart();
      
      _astMessages.Clear();
      _typingMessages.Clear();
      
      _astRoot = AstRoot[IAst].Create(_parseTree, _astMessages);
      
      stat?.Ast.Stop();
    }
  }
}
