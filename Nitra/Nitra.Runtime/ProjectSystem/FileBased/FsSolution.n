using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public class FsSolution : Solution
  {
    public FsProjects : ObservableCollection[FsProject] { get; }

    public this()
    {
      FsProjects = ObservableCollection();
      FsProjects.CollectionChanged += OnCollectionChanged;
    }

    public override Projects : Seq[Project]
    {
      get { FsProjects }
    }

    OnCollectionChanged(_sender : object, e : NotifyCollectionChangedEventArgs) : void
    {
      when (e.NewItems != null)
      {
        foreach(newItem is FsProject in e.NewItems)
        {
          def oldSolution = newItem.FsSolution;
          when (oldSolution != null)
            _ = oldSolution.FsProjects.Remove(newItem);
          newItem.FsSolution = this;
          //Add listener for each item on PropertyChanged event
          //newItem.PropertyChanged += this.OnItemPropertyChanged;         
        }
      }

      when (e.OldItems != null)
      {
        foreach(oldItem is FsProject in e.OldItems)
        {
          oldItem.FsSolution = null;
          //oldItem.PropertyChanged -= this.OnItemPropertyChanged;
        }
      }
    }

    //OnItemPropertyChanged(sender : object, e : PropertyChangedEventArgs) : void
    //{
    //  when (sender is FsFile as item)
    //    ModifiedItems.Add(item);
    //}
  }
}
