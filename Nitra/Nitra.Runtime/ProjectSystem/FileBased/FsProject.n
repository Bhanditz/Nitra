using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public class FsProject : Project
  {
    public FsSolution : FsSolution                   { get; internal set; }
    public FsFiles    : ObservableCollection[FsFile] { get; }

    public this([NotNull] compilerMessages : ICompilerMessages, solution : FsSolution = null, filePaths : Seq[FsFile] = null)
    {
      base(compilerMessages);
      FsSolution = solution;
      FsFiles = if (filePaths == null) ObservableCollection() else ObservableCollection(filePaths);
      FsFiles.CollectionChanged += OnCollectionChanged;
    }

    public override Files : Seq[File]
    {
      get { FsFiles }
    }

    OnCollectionChanged(_sender : object, e : NotifyCollectionChangedEventArgs) : void
    {
      when (e.NewItems != null)
      {
        foreach(newItem is FsFile in e.NewItems)
        {
          def oldProj = newItem.FsProject;
          when (oldProj != null)
            _ = oldProj.FsFiles.Remove(newItem);
          newItem.FsProject = this;
          //Add listener for each item on PropertyChanged event
          //newItem.PropertyChanged += this.OnItemPropertyChanged;         
        }
      }

      when (e.OldItems != null)
      {
        foreach(oldItem is FsFile in e.OldItems)
        {
          oldItem.FsProject = null;
          //oldItem.PropertyChanged -= this.OnItemPropertyChanged;
        }
      }
    }

    //OnItemPropertyChanged(sender : object, e : PropertyChangedEventArgs) : void
    //{
    //  when (sender is FsFile as item)
    //    ModifiedItems.Add(item);
    //}
  }
}
