using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal abstract class RecoveryModeBaseListParseTreeReader[TContext, TListBuffer, TParseTree] : RecoveryModeParseTreeReader[TContext, TParseTree]
  {
    protected sealed override ReadParseTree(parseResult : ParseResult, startPos : int, endPos : int, recoveredSubruleIndex : int, context : TContext) : TParseTree
    {
      def listBuffer = CreateListBuffer();
      def (subrules, parsingSequence) = parseResult.RecoveredSubrules[recoveredSubruleIndex];
      for (mutable i = 0; i < subrules.Length - 1; ++i)
      {
        def itemStartPos = subrules[i].Pos;
        def itemEndPos   = subrules[i + 1].Pos;
        def stateNumber  = subrules[i].State;
        def state        = parsingSequence.States[stateNumber];
        match (state.Subrule)
        {
          | ListItem(ParsingSequence = itemParsingSequence) => ReadListItem(stateNumber, parseResult, itemParsingSequence, itemStartPos, itemEndPos, listBuffer, context)
          | _ => assert(false, "List items expected")
        }
      }
      CreateListParseTree(parseResult, startPos, endPos, listBuffer)
    }

    protected sealed override ReadParseTreeInStandardMode(parseResult : ParseResult, startPos : int, endPos : int, context : TContext) : TParseTree
    {
      _ = parseResult; _ = startPos; _ = endPos; _ = context;
      throw NotImplementedException("Fallback to standard parse tree reading");
    }

    protected abstract CreateListBuffer() : TListBuffer;

    protected abstract ReadListItem(stateNumber : int, parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, listBuffer : TListBuffer, context : TContext) : void;

    protected abstract CreateListParseTree(parseResult : ParseResult, startPos : int, endPos : int, listBuffer : TListBuffer) : TParseTree;
  }
}
