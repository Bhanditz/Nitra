using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Internal
{
  internal sealed class RecoveryModeDynamicExtensionListParseTreeReader[TItem] : RecoveryModeParseTreeReader[RecoveryModeDynamicExtensionListParseTreeReaderContext[TItem], ListParseTree[TItem]]
    where TItem : IParseTree
  {
    public static Instance : this;

    static this() { Instance = RecoveryModeDynamicExtensionListParseTreeReader() }

    protected override MakeEmptyParseTree(parseResult : ParseResult, pos : int, context : RecoveryModeDynamicExtensionListParseTreeReaderContext[TItem]) : ListParseTree[TItem]
    {
      _ = context;
      EmptyListParseTree(Location(parseResult, pos))
    }

    protected override MakeAmbiguousParseTree(ambiguities : array[ListParseTree[TItem]], context : RecoveryModeDynamicExtensionListParseTreeReaderContext[TItem]) : ListParseTree[TItem]
    {
      _ = context;
      AmbiguousListParseTree(ambiguities)
    }

    protected override ReadParseTreeInStandardMode(parseResult : ParseResult, startPos : int, endPos : int, context : RecoveryModeDynamicExtensionListParseTreeReaderContext[TItem]) : ListParseTree[TItem]
    {
      IgnoreParams();
      assert(false);
    }

    protected override ReadParseTree(parseResult : ParseResult, startPos : int, endPos : int, recoveredSubruleIndex : int, context : RecoveryModeDynamicExtensionListParseTreeReaderContext[TItem]) : ListParseTree[TItem]
    {
      def buffer = SCG.List(16);
      def (subrules, _) = parseResult.RecoveredSubrules[recoveredSubruleIndex];
      for (mutable i = 0; i < subrules.Length - 1; ++i)
      {
        def itemStartPos = subrules[i].Pos;
        def itemEndPos   = subrules[i + 1].Pos;
        def stateNumber  = subrules[i].State;
        def state        = parseResult.ParserHost.ParsingStates[stateNumber];
        match (state.Subrule)
        {
          | _ => assert(false, "List items expected")
        }
      }
      ConcreteListParseTree(Location(parseResult, startPos, endPos), buffer)
    }
  }

  [Record]
  internal struct RecoveryModeDynamicExtensionListParseTreeReaderContext[TItem]
  {
    public Descriptor       : ExtensibleRuleDescriptor;
    public BindingPower     : int;
    public ParseTreeFactory : IExtensibleRuleParseTreeFactory[TItem]
  }
}
