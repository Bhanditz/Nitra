using System;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public abstract class ListParseTree[T] : ParseTree, SCG.IList[T]
    where T : IParseTree
  {
    public abstract Count             : int                { get }
    public          IsEmpty           : bool               { get { Count == 0 } }
    public          Head              : T                  { get { Item[0] } }
    public          Tail              : ListParseTree[T]
    {
      get
      {
        if (Count == 1)
          EmptyListParseTree(this.Location.FromEnd())
        else
          GetSlice(1, Count - 1)
      }
    }
    public abstract Item[index : int] : T                  { get }
    public abstract UpdateItems(newItems : SCG.List[T]) : ListParseTree[T];
    public abstract GetEnumerator() : SCG.IEnumerator[T];
    public abstract Contains(item : T) : bool;
    public abstract CopyTo(@array : array[T], arrayIndex : int) : void;
    public abstract IndexOf(item : T) : int;
    public abstract GetSlice(index : int, count : int) : ListParseTree[T];

    IsReadOnly : bool implements SCG.ICollection[T].IsReadOnly
    {
      get { true }
    }

    Item1[index : int] : T implements SCG.IList[T].Item
    {
      get { Item[index] }
      set { _ = value; _ = index; throw NotSupportedException() }
    }

    Add(_ : T) : void             implements SCG.ICollection[T].Add    { throw NotSupportedException() }
    Clear() : void                implements SCG.ICollection[T].Clear  { throw NotSupportedException() }
    Remove(_ : T) : bool          implements SCG.ICollection[T].Remove { throw NotSupportedException() }
    Insert(_ : int, _ : T) : void implements SCG.IList[T].Insert       { throw NotSupportedException() }
    RemoveAt(_ : int) : void      implements SCG.IList[T].RemoveAt     { throw NotSupportedException() }
  }
}
