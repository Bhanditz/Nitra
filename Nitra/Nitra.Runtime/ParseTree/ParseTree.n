using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Nitra
{
  public abstract class ParseTree : Located, IParseTree
  {
    internal static CanApplyVisitor[T]() : bool where T : IParseTree
    {
      !typeof(T).IsValueType
    }

    public virtual IsAmbiguous    : bool           { get false }
    public virtual IsMissing      : bool           { get false }
    public virtual RuleDescriptor : RuleDescriptor { get null }

    public override ToString() : string
    {
      ToString(PrettyPrintOptions.DebugIndent)
    }

    public virtual Apply(visitor : ParseTreeVisitor) : ParseTree
    {
      visitor.Enter(this);
      visitor.Leave(this, this);
      this
    }

    public ToString(options : PrettyPrintOptions) : string
    {
      def writer = StringPrettyPrintWriter(options);
      PrettyPrint(writer, 0, null);
      writer.ToString()
    }

    public ToString(options : PrettyPrintOptions, spans : out List[SpanInfo]) : string
    {
      def writer = StringPrettyPrintWriter(options);
      PrettyPrint(writer, 0, null);
      spans = writer.GetSpans();
      writer.ToString()
    }

    public virtual PrettyPrint(writer : PrettyPrintWriter, callerBindingPower : int, spanClass : SpanClass) : void
    {
      _ = writer;
      _ = callerBindingPower;
      _ = spanClass;
    }

    protected virtual PrettyPrintSource : IPrettyPrintSource
    {
      get { this.Location.Source }
    }

    protected virtual GetSourceSnapshotProvider() : ISourceSnapshotProvider
    {
      throw NotImplementedException()
    }

    protected virtual GetLocationSpan() : NSpan implements IParseTree.GetSpan
    {
      this.Location.Span
    }
  }
}
