using Nemerle;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  internal sealed class RecoveryModeListWithSeparatorOnlyItemsParseTreeReader[TItemLoader, TItem] : RecoveryModeListParseTreeReader[TItemLoader, TItem]
    where TItemLoader : IParseTree
    where TItem       : TItemLoader
  {
    public new static Instance : this;

    static this() { Instance = RecoveryModeListWithSeparatorOnlyItemsParseTreeReader() }

    protected override ReadListItem(stateNumber : int, parseResult : ParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, listBuffer : SCG.List[TItem], context : RecoveryModeParseTreeReaderContext[TItemLoader, TItem]) : void
    {
      match (stateNumber % 2)
      {
        | 0 =>
          RecoveryModeSequenceParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeSequenceParseTreeReaderContext(context.ItemLoader, context.ItemSequenceId))
            |> context.ItemConverter.Cast
            |> listBuffer.Add;

        | 1 => ()
        | _ => assert(false, "Unknown ListWithSeparator state number")
      }
    }
  }
}
