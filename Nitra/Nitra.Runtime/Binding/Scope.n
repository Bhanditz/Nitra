using Nitra.Declarations;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  [Record]
  public class Symbol2
  {
    public Name : IReference;
    [RecordIgnore] public mutable Declarations : list [IDeclaration] = []
  }
  
  [Record]
  public class NamespaceSymbol : Symbol2
  {
    [RecordIgnore] public Scope : Scope.Table = Scope.Table();
  }
  
  public variant Scope
  {
    | Table
      {
        NameTable : Hashtable[IReference, Symbol2];
        
        public this() { NameTable = Hashtable(); }
        
        public Define(symbol : Symbol2/*, _declaration : IDeclaration*/) : void
        {
          mutable old;
          when (NameTable.TryGetValue(symbol.Name, out old))
          {
            // TODO: Report error messages.Error()
            //def project = declaration.File.Project;
            //project.Error(declaration.Name, "....");
            return;
          }
          
          NameTable.Add(symbol.Name, symbol);
        }
        
        public override ToString() : string
        {
          $"..$(NameTable.Keys)"
        }
      }
    | Union  { Scopes : list[Scope] }
    | Hide   { Scope : Scope; Hidden : Scope; }
    | Filter { Scope : Scope; Predicate : Symbol -> bool; }
    | Nil
  }
}
