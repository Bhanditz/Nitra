using Nitra.Declarations;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  [Record]
  public class Symbol2
  {
    public Name : IReference { get; }
    [RecordIgnore] public Declarations : list [IDeclaration] { get; set; default []; }
    
    public override ToString() : string { Name?.Text + " (symbol)" }
  }
  
  public class NamespaceSymbol : Symbol2
  {
    public static RootNamespace : NamespaceSymbol = NamespaceSymbol(null, null);

    public Parent : NamespaceSymbol { get; }
    [RecordIgnore] public Scope : Scope.Table { get; set; default Scope.Table(); }
    
    public this(name : IReference, parent : NamespaceSymbol)
    {
      base(name);
      
      assert2(name == null && parent == null || name != null && parent != null);
      
      when (parent != null)
      {
        Parent = parent;
        parent.Scope.Define(this);
      }
    }

    public FullName : string
    {
      get
      {
        def loop(ns : NamespaceSymbol, sb : Text.StringBuilder) : void
        {
          when (ns.Parent != null)
          {
            loop(ns.Parent, sb);
            when (ns.Parent.Parent != null)
              _ = sb.Append('.');
            _ = sb.Append(ns.Name);
          }
        }
        
        def sb = Text.StringBuilder();
        loop(this, sb);
        sb.ToString()
      }
    }
    
    public override ToString() : string { (if (Name == null) "<root>" else FullName) + " (namespace)" }
  }
  
  public variant Scope
  {
    | Table
      {
        public NameTable : Hashtable[IReference, Symbol2] { get; }
        
        public this() { NameTable = Hashtable(); }
        
        public Define(symbol : Symbol2/*, _declaration : IDeclaration*/) : void
        {
          mutable old;
          when (NameTable.TryGetValue(symbol.Name, out old))
          {
            // TODO: Report error messages.Error()
            //def project = declaration.File.Project;
            //project.Error(declaration.Name, "....");
            return;
          }
          
          NameTable.Add(symbol.Name, symbol);
        }
        
        public override ToString() : string
        {
          $"Scope.Table: { ..$(NameTable.Keys) }"
        }
      }
    | Union  { public Scopes : list[Scope] { get; } }
    | Hide   { public Scope  : Scope       { get; } public Hidden : Scope { get; } }
    | Filter { public Scope  : Scope       { get; } public Predicate : Symbol -> bool { get; } }
    | Nil
  }
}
