using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public class Reference : IEquatable[Reference]
  {
    public static @:(reference : Reference) : string { reference.Name.Text }
    public static @:(reference : Reference) : Name   { reference.Name }
    public static @==(a : Reference, b : Reference) : bool { a.Equals(b) }
    public static @!=(a : Reference, b : Reference) : bool { !a.Equals(b) }

    public this(name : string, span : NSpan)
    {
      this(Name.GetOrAdd(name), span)
    }

    public this(name : Name, span : NSpan)
    {
      Name     = name;
      Span     = span;
    }

    public Name     : Name;
    public Span     : NSpan;

    public override ToString() : string { Name.Text }

    public static Create(parseTree : ParseTree) : Reference
    {
      def name = Name.GetOrAdd(parseTree.GetText());
      def span = parseTree.Location.Span;
      Reference(name, span)
    }

    [OverrideObjectEquals]
    public Equals(other : Reference) : bool
      implements IEquatable[Reference].Equals
    {
      other : object != null && other.Span == Span && other.Name == Name
    }

    public override GetHashCode() : int { Name.HashCode ^ Span.GetHashCode() }
  }
}
