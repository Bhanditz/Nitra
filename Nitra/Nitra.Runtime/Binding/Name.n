using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Binding
{
  public class Name : IEquatable[Name], IEquatable[string]
  {
    private static _internTable : ConcurrentDictionary[string, Name] = ConcurrentDictionary(StringComparer.InvariantCulture);

    public static @:(name : Name) : string { name.Text }
    public static @==(a : Name, b : Name) : bool { a : object == b }
    public static @!=(a : Name, b : Name) : bool { a : object != b }

    public static GetOrAdd(text : string) : Name
    {
      def internTable = _internTable;
      mutable result;
      when (internTable.TryGetValue(text, out result))
        return result;

      def interned = string.Intern(text); // TODO: возможно нужно сделать локальное интернирование для ускорения
      internTable.GetOrAdd(interned, Name(interned))
    }

    public Text : string;
    public HashCode : int;

    private this(text : string)
    {
      Text = text;
      HashCode = interned.GetHashCode();
    }

    public Equals(other : Name) : bool
      implements IEquatable[Name].Equals
    {
      this : object == other
    }

    public Equals(other : string) : bool
      implements IEquatable[string].Equals
    {
      StringComparer.InvariantCulture.Equals(this.Text, other)
    }

    public override GetHashCode() : int { HashCode }

    public override Equals(obj : object) : bool
    {
      match (obj)
      {
        | _ when obj == this => true // Names is interned. We can compare it by ref.
        | text is string     => Equals(text)
        | _                  => false
      }
    }

    public override ToString() : string { Text }
  }
}
