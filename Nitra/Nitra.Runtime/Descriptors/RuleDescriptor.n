using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;

using System;

namespace Nitra
{
  [System.Diagnostics.DebuggerDisplay("{Grammar.FullName}::{Name}")]
  public abstract class RuleDescriptor
  {
    public abstract Name         : string            { get; }
    public abstract Grammar      : GrammarDescriptor { get; }
    public abstract IdInGrammar  : int               { get; }
    public abstract IsStartRule  : bool              { get; }
    public abstract IsTokenRule  : bool              { get; }
    public abstract IsKeyToken   : bool              { get; }
    public abstract IsVoid       : bool              { get; }
    public abstract OperatorInfo : OperatorInfo      { get; }
    public          Prefix       : bool              { get { this.OperatorInfo %&& OperatorInfo.Prefix } }
    public          Postfix      : bool              { get { this.OperatorInfo %&& OperatorInfo.Postfix } }
    public          Infix        : bool              { get { this.OperatorInfo %&& OperatorInfo.Infix } }
    public abstract Arity        : int               { get; }
    public abstract SpanClass    : SpanClass         { get; }
    public override ToString()   : string
    {
      $"$(Grammar.FullName)::$Name"
    }
  }

  public abstract class StartRuleDescriptor : RuleDescriptor
  {
    public virtual CreateParseTree(startPos : int, endPos : int, parseResult : ParseResult, grammar : CompositeGrammar) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }

    public virtual CreateSplicableParseTree[T](startPos : int, parseResult : ParseResult, grammar : CompositeGrammar, splicableParseTreeBuilder : ISplicableParseTreeBuilder[T]) : T
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }

    public Parse([NotNull] parseSession : ParseSession) : IParseResult
    {
      parseSession.StartRuleDescriptor = this;
      parseSession.Parse()
    }

    public Parse([NotNull] sourceSnapshot : SourceSnapshot) : IParseResult
    {
      def parseSession = ParseSession(sourceSnapshot, this);
      parseSession.Parse()
    }
  }

  [Record]
  public abstract class RegularRuleDescriptor : RuleDescriptor
  {
    public delegate ParseDelegate(pos : int, text : string) : int;

    public        override IsTokenRule : bool { get true }
    public sealed override IsStartRule : bool { get false }
    public                 Parse       : ParseDelegate { get; }
    public                 RegexText   : string { get; }
  }

  public abstract class SimpleRuleDescriptor : StartRuleDescriptor
  {
    public abstract NewParser(grammar : CompositeGrammar, ruleIdBuilder : RuleIdBuilder) : SimpleRuleParser;
  }

  public abstract class ExtensibleRuleDescriptor : StartRuleDescriptor
  {
    public abstract IsSplicable : bool { get; }

    public virtual CreateMissingParseTree(parseResult : ParseResult, pos : int) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }

    public virtual CreateAmbiguousParseTree(ambiguities : array[ParseTree], ambiguityType :  ParseTreeAmbiguityType) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }
  }

  public abstract class ExtensionRuleDescriptor : RuleDescriptor
  {
    public sealed override IsStartRule : bool { get false }
    public abstract NewParser(grammar : CompositeGrammar, ruleIdBuilder : RuleIdBuilder, parserData : ExtensibleRuleParserData) : ExtensionRuleParser;
    public abstract BaseRule : ExtensibleRuleDescriptor { get; }
  }

  public abstract class PrefixRuleDescriptor : ExtensionRuleDescriptor
  {
    public virtual CreateParseTree(pos : ref int, rawTreePtr : int, parseResult : ParseResult) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }

    public virtual CreateParseTree(startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : ParseResult) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }
  }

  public abstract class PostfixRuleDescriptor : ExtensionRuleDescriptor
  {
    public abstract BindingPower : int { get; }

    public virtual CreateParseTree(prefix : ParseTree, prefixStartPos : int, pos : ref int, rawTreePtr : int, parseResult : ParseResult) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }

    public virtual CreateParseTree(prefix : ParseTree, prefixStartPos : int, startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : ParseResult) : ParseTree
    {
      IgnoreParams();
      assert(false, "ParseTree is not available")
    }
  }
}
