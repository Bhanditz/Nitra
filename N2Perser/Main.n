using Nemerle.Collections;
using Nemerle.Parser;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Console;
using System.Linq;

using SCG = System.Collections.Generic;

[Record] public class NamespaceMember     : Located { }
[Record] public class QualifiedIdentifier : Located
{
  public Path       : string       { get; }
  public Ids        : list[NToken] { get; }
  public Separators : list[NToken] { get; }
}

[ParserGrammar(Options = EmitDebugSources,
  grammar 
  {
    any = ['\u0000'..'\uFFFF'];
    
    [StartRule]
    Start : CompilationUnit = s CompilationUnit !any;

    [Ast(Body)]
    CompilationUnit           : Located = NamespaceBody;

    [Ast(Members)]
    NamespaceBody             : Located   = NamespaceMember*;

    NamespaceMember           : NamespaceMember;
    
    [Ast(UsingLit, NsOrTypeName, Semicolon)]
    UsingImportDeclaration    is NamespaceMember = "using"s QualifiedIdentifier ";"s;
    
    [Ast(UsingLit, Alias, EqLit, NsOrTypeName, Semicolon)]
    UsingAliasDeclaration     is NamespaceMember = "using"s Identifier "="s QualifiedIdentifier ";"s;
    
    [Ast(NsLit, NsOrTypeName, OpenLit, Body, CloseLit)]
    NamespaceDeclaration      is NamespaceMember = "namespace"s QualifiedIdentifier "{"s Namespace { NamespaceBody } "}"s;
    //GlobalAttributDeclaration is NamespaceMember;
    //ClassDeclaration          is NamespaceMember;
    
    IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
    IdentifierNext  = IdentifierFirst | ['0'..'9'];
    Identifier : NToken = IdentifierFirst IdentifierNext* s;
    
    QualifiedIdentifier : QualifiedIdentifier = Identifier ("."s Identifier)*;
    
    //semicolon : NToken      = ";"s;
    //semicolonOpt            = (";"s)?;

    #region Line terminators

    newLineCharacter = '\n'
                      | '\r'
                      | '\u2028'    /*  line separator       */
                      | '\u2029';   /*  paragraph separator  */
    newLine   = "\r\n" | newLineCharacter;

    #endregion

    #region White space

    whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */

    #endregion

    #region Spacer

    space = whitespace | newLine;

    s : void = space*;                      /* optional spacer          */
    //S : void = !identifierPartCharacters s; /* identifier break spacer  */
    #endregion
  }
)]
public partial abstract class N2Parser
{
  static _grammarDescriptors : Hashtable[string, GrammarDescriptor] = Hashtable();
  
  static this()
  {
    def path               = Path.GetDirectoryName(Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);
    def files              = Directory.GetFiles(path, "*.dll");
    def grammarsAttr       = typeof(GrammarsAttribute);
    def standardAssemblies = HashSet(["Nemerle.dll", "Nemerle.Compiler.dll", "Nemerle.Parser.dll", "Nemerle.Parser.Macro.dll"]);
    
    foreach (file when !standardAssemblies.Contains(file) in files)
    {
      def asm   = Assembly.LoadFrom(file);
      def attrs = asm.GetCustomAttributesData();
      
      foreach (attr in attrs)
      {
        when (attr.Constructor.DeclaringType.Equals(grammarsAttr))
        {
          def attrInstances = asm.GetCustomAttributes(grammarsAttr, false) :> array[GrammarsAttribute];
          
          foreach (attrInstance in attrInstances)
          foreach (type in attrInstance.Grammars)
          {
            def prop = type.GetProperty("StaticDescriptor");
            def value = prop.GetValue(null, null) :> GrammarDescriptor;
            _grammarDescriptors.Add(value.FullName, value);
          }
        }
      }
    }
  }
  
  UsingImportDeclaration(usingImport : NamespaceMember.UsingImportDeclaration) : void
  {
    mutable grammarDescriptor;
    
    when (_grammarDescriptors.TryGetValue(usingImport.NsOrTypeName.Path, out grammarDescriptor))
      Parser.AddGrammar(grammarDescriptor);
  }

  NamespaceScopeBegin() : void
  {
    Parser.PushState();
  }

  NamespaceScopeEnd(_ : bool) : void
  {
    Parser.PopState();
  }
  
  Identifier(first : NToken, next : NToken) : NToken
  {
    NToken(first.StartPos, next.EndPos)
  }
  
  //QualifiedIdentifier : QualifiedIdentifier = Identifier ("."s Identifier)*;
  QualifiedIdentifier(id1 : NToken, tail : List[NToken * NToken]) : QualifiedIdentifier
  {
    def ids = List();
    def separators = List();
    ids.Add(id1);
    
    foreach ((sep, id2) in tail)
    {
      ids.Add(id2);
      separators.Add(sep);
    }
    
    def path = $<#..$(ids; "."; GetText)#>;
    
    QualifiedIdentifier(path, ids.NToList(), separators.NToList())
  }
}

module Program
{
  Main() : void
  {
    def test(code : string) : void
    {
      def parser = N2Parser.GrammarImpl();
      match (parser.ParseStart(code))
      {
        | None      =>
          WriteLine($"Fail: \"$code\"");
          def (pos, rules) = parser.Parser.GetErrors();
          def (line, pos) = parser.ParsingSource.PositionToLineColumn(pos);
          foreach (rule in rules)
            WriteLine($"  $line:$pos $(rule.Grammar.Name).$(rule.Name)");
        | Some(ast) =>
          //WriteLine($"Ok:   \"$code\" AST: $(printAst(ast))");
          _ = ast;
          WriteLine("OK");
      }
    }
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1;
  type X = A.B;
}
    #>);
    _ = ReadLine();
  }
}