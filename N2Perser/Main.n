using Nemerle.Collections;
using Nemerle.Parser;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

[Record] public class NamespaceMember     : Located { }
[Record] public class QualifiedIdentifier : Located
{
  public Path       : string       { get; }
  public Ids        : list[NToken] { get; }
  public Separators : list[NToken] { get; }
}

[ParserGrammar(Options = EmitDebugSources,
  grammar 
  {
    any = ['\u0000'..'\uFFFF'];
    
    [StartRule]
    Start : CompilationUnit = CompilationUnit !any;

    [Ast(body)]
    CompilationUnit           : Located = NamespaceBody;

    [Ast(members)]
    NamespaceBody             : Located   = NamespaceMember*;

    NamespaceMember           : NamespaceMember;
    
    [Ast(UsingLit, NsOrTypeName)]
    UsingImportDeclaration    is NamespaceMember = "using"s QualifiedIdentifier;
    
    [Ast(UsingLit, Alias, EqLit, NsOrTypeName)]
    UsingAliasDeclaration     is NamespaceMember = "using"s Identifier "="s QualifiedIdentifier;
    
    [Ast(NsLit, NsOrTypeName, OpenLit, Body, CloseLit)]
    NamespaceDeclaration      is NamespaceMember = "namespace"s QualifiedIdentifier "{"s Namespace { NamespaceBody } "}"s;
    //GlobalAttributDeclaration is NamespaceMember;
    //ClassDeclaration          is NamespaceMember;
    
    IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
    IdentifierNext  = IdentifierFirst | ['0'..'9'];
    Identifier = IdentifierFirst IdentifierNext* s;
    
    QualifiedIdentifier : QualifiedIdentifier = Identifier ("."s Identifier)*;
    
    //semicolon : NToken      = ";"s;
    //semicolonOpt            = (";"s)?;

    #region Line terminators

    newLineCharacter = '\n'
                      | '\r'
                      | '\u2028'    /*  line separator       */
                      | '\u2029';   /*  paragraph separator  */
    newLine   = "\r\n" | newLineCharacter;

    #endregion

    #region White space

    whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */

    #endregion

    #region Spacer

    space = whitespace | newLine;

    s : void = space*;                      /* optional spacer          */
    //S : void = !identifierPartCharacters s; /* identifier break spacer  */
    #endregion
  }
)]
public partial abstract class N2Parser
{
  UsingImportDeclaration(_ : NamespaceMember.UsingImportDeclaration) : void
  {
  }

  NamespaceScopeBegin() : void
  {
    Parser.PushState();
  }

  NamespaceScopeEnd(_ : bool) : void
  {
    Parser.PopState();
  }
  
  //QualifiedIdentifier : QualifiedIdentifier = Identifier ("."s Identifier)*;
  QualifiedIdentifier(id1 : NToken, tail : List[NToken * NToken]) : QualifiedIdentifier
  {
    def ids = List();
    def separators = List();
    ids.Add(id1);
    
    foreach ((sep, id2) in tail)
    {
      ids.Add(id2);
      separators.Add(sep);
    }
    
    def path = $<#..$(ids; ".")#>;
    
    QualifiedIdentifier(path, ids.NToList(), separators.NToList())
  }
  
  UsingImportDeclaration(_usingLit : Nemerle.Parser.NToken, _qualId : QualifiedIdentifier) : NamespaceMember
  {
    null;
    //NamespaceMember.
  }
}

module Program
{
  Main() : void
  {
    WriteLine("Hi!");
    _ = ReadLine();
  }
}