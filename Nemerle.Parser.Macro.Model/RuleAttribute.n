using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Parser.Model
{
  [Record]
  public class Usage : Attribute
  {
    public Text : string { get; private set; }
  }

  [Record]
  public variant RuleAttribute : Nemerle.Compiler.Located
  {
    | StartRule
    | Ast
      {
        names : list[NameRef];
        [Memoize]
        public GetNames(rd : RuleDefinition) : list[NameRef]
        {
          def makeName(name : NameRef, rule : Rule) : NameRef
          {
            def toCamelCase(str : string, sufix : string = null) : string
            {
              if (str.Length == 0)
                str
              else if (sufix == null)
                char.ToUpperInvariant(str[0]).ToString() + str.Substring(1).ToLowerInvariant()
              else
                sufix + char.ToUpperInvariant(str[0]).ToString() + str.Substring(1).ToLowerInvariant()
            }
            def toCamelCaseName(name : NameRef) : NameRef
            {
              def str = name.AsName;
              if (str.Length == 0 || char.IsUpper(str[0]))
                name
              else
                NameRef(name.Location, toCamelCase(str))
            }
            def makeKeywordName(str : string) : string
            {
              def isIdentifier(str : string) : bool
              {
                if (str.Length == 0)
                  false
                else
                {
                  def ch = str[0];
                  
                  if (ch == '_' || char.IsLetter(ch))
                    str.Exists(ch => ch == '_' || char.IsLetterOrDigit(ch)) // TODO: Performance problem
                  else
                    false
                }
              }
              
              if (isIdentifier(str))
                toCamelCase(str, "Kw")
              else
                Message.FatalError(rule.Location, $<#Name for literal "$str" not defined. You should define by 'token field Name = String;' statement.#>)
            }
            def makeNameForRule(rule : Rule) : NameRef
            {
              | String(str) when rd.TokenFieldNames.Contains(str) => rd.TokenFieldNames.Get(str)
              | String(str) => NameRef(name.Location, makeKeywordName(str))
              | Call(name, _) => toCamelCaseName(name)
              | _ => Message.FatalError(rule.Location, $<#Name for rule "$rule" not defined.#>)
            }
                  
            match (name.Parts)
            {
              | ["_"]  => makeNameForRule(rule)
              | [_]    => name
              | _      => assert2(false); assert(false);
            }
          }
          
          NList.Map2(names, rd.GetSubRules(), makeName)
        }
      }
    | SpanClass             { name : NameRef; }
    
    public static GetUsages() : string
    {
      def ty = typeof(this);
      def options = ty.GetNestedTypes(BindingFlags.NonPublic | BindingFlags.Public);

      def makeUsage(opt : Type) : string
      {
        def attrs = opt.GetCustomAttributes(typeof(Usage), false);
        def usage = if (attrs.Length > 0) (attrs[0] :> Usage).Text else opt.Name;

        usage
      }

      $<#..$(options; " or "; makeUsage)#>
    }

    public override ToString() : string
    {
      match (this)
      {
        | StartRule                   => "StartRule"
        | Ast(names)                  => $"Ast$names"
        | SpanClass(name)             => $"SpanClass($name)"
      }
    }
  }
}
