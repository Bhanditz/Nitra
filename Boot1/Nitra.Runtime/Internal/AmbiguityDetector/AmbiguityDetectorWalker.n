using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.WalkerBase;
using Nitra.Runtime.Reflection;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime
{
  internal sealed class AmbiguityDetectorWalker : WalkerBase[FakeVoid]
  {
    public override OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, _context : FakeVoid) : void
    {
      throw AmbiguousSequenceException(parseResult, startPos, endPos, parseWays, sequenceInfo);
    }

    public override OnAmbiguousPrefix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguous : List[ExtensionAmbiguity[PrefixRuleParser]], startPos : int, endPos : int, _context : FakeVoid) : void
    {
      throw AmbiguousPrefixException(parseResult, startPos, endPos, extensibleRuleParser, ambiguous)
    }

    public override OnAmbiguousPostfix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguous : List[ExtensionAmbiguity[PostfixRuleParser]], startPos : int, endPos : int, _context : FakeVoid) : void
    {
      throw AmbiguousPrefixException(parseResult, startPos, endPos, extensibleRuleParser, ambiguous)
    }
  }
}
