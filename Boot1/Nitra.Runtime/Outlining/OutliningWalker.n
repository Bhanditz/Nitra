using Nemerle;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Outlining
{
  internal sealed class OutliningWalker : WalkerBase[List[OutliningInfo]]
  {
    private mutable _lastSpaceStartPos : int;
    private mutable _lastSpaceEndPos   : int;
    private mutable _isHiddenByDefault : bool;
    private         _outliningStarts   : Stack[int * bool * bool] = Stack();

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : List[OutliningInfo]) : void
    {
      if (IsWhitespaceRule(ruleInfo.RuleParser.Descriptor))
      {
        // отлавливаем динамическую последовательность пустых s: первое съедает все пробелы, остальные оказываются пустыми
        if (startPos < endPos || (_lastSpaceEndPos < startPos && startPos == endPos))
        {
          _lastSpaceStartPos = startPos;
          _lastSpaceEndPos   = endPos;
        }
        // встретили обломившуюся s
        else when (_lastSpaceEndPos < startPos && endPos < 0)
        {
          _lastSpaceStartPos = startPos;
          _lastSpaceEndPos   = startPos;
        }
      }
      else unless (ruleInfo.RuleParser.Descriptor.IsTokenRule)
        base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : IParseResult, context : List[OutliningInfo]) : void
    {
      unless (ruleInfo.RuleParser.Descriptor.IsTokenRule)
        base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, _endPos : int, parseResult : IParseResult, context : List[OutliningInfo]) : void
    {
      match (ruleInfo.Name)
      {
        | "Nitra.Core.outline_impl"         with (isImplementation = true,  isNeedSkipSpaces = false)
        | "Nitra.Core.outline_begin"        with (isImplementation = false, isNeedSkipSpaces = false)
        | "Nitra.Core.outline_begin_before" with (isImplementation = false, isNeedSkipSpaces = true) =>
          def outliningStartPos = if (isNeedSkipSpaces && _lastSpaceEndPos == startPos) _lastSpaceStartPos else startPos;
          _outliningStarts.Push(outliningStartPos, _isHiddenByDefault, isImplementation);
          _isHiddenByDefault = false;

        | "Nitra.Core.outline_end"          with isNeedSkipSpaces = false
        | "Nitra.Core.outline_end_before"   with isNeedSkipSpaces = true =>
          def outliningEndPos = if (isNeedSkipSpaces && _lastSpaceEndPos == startPos) _lastSpaceStartPos else startPos;
          when (_outliningStarts.Count > 0)
          {
            def (outliningStartPos, isHiddenByDefault, isImplementation) = _outliningStarts.Pop();
            when (outliningStartPos < outliningEndPos)
            {
              def startLine = parseResult.SourceSnapshot.PositionToLineColumn(outliningStartPos).Line;
              def endLine   = parseResult.SourceSnapshot.PositionToLineColumn(outliningEndPos).Line;
              when (endLine > startLine)
              {
                def outlining = OutliningInfo(NSpan(outliningStartPos, outliningEndPos), isHiddenByDefault, isImplementation);
                context.Add(outlining);
              }
            }
          }

        | "Nitra.Core.outline_hiden" => _isHiddenByDefault = true;
        | _ => ()
      }
    }

    private static IsWhitespaceRule(rd : RuleDescriptor) : bool
    {
      rd.Grammar.FullName == "Nitra.Core" && (rd.Name == "s" || rd.Name == "S")
    }

    public override OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : List[OutliningInfo]) : void
    {
      _ = startPos; _ = endPos;

      when (parseWays.Length > 0)
        Walk(parseResult, parseWays[0], sequenceInfo, context);
    }

    public override OnAmbiguousPrefix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PrefixRuleParser]], startPos : int, endPos : int, context : List[OutliningInfo]) : void
    {
      _ = extensibleRuleParser;
      when (ambiguousPrefixs.Count > 0)
      {
        def parser = ambiguousPrefixs[0];
        _ = WalkPrefix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
      }
    }

    public override OnAmbiguousPostfix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PostfixRuleParser]], startPos : int, endPos : int, context : List[OutliningInfo]) : void
    {
      _ = extensibleRuleParser;
      when (ambiguousPrefixs.Count > 0)
      {
        def parser = ambiguousPrefixs[0];
        _ = WalkPostfix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
      }
    }
  }
}
