using System.Threading;
namespace Nitra.Declarations
{
  public class DependentPropertyEvalContext
  {
    public Stage                  : int               { get; internal set; }
    public CalculatedCount        : int               { get; private  set; }
    public DeferredCount          : int               { get; internal set; }
    public Pass                   : int               { get { _pass } }
    public CollectorsCreatedCount : int               { get { _collectorsCreated } }
    public CancellationToken      : CancellationToken { get; set; }

    public CalculatedCountInc() : void
    {
      CalculatedCount += 1
    }

    public DeferredCountInc() : void
    {
      DeferredCount += 1
    }

    internal NextPass() : void
    {
      ++_pass;
      _collectorsCreated = 0;
    }

    private mutable _pass              : int;
    private mutable _collectorsCreated : int;

    public NotifyCollectorCreated(createdOnStage : out int, createdOnPass : out int) : void
    {
      createdOnStage = Stage;
      createdOnPass  = _pass;
      ++_collectorsCreated;
    }
  }
}
