using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using SC = System.Collections;

namespace DotNet.BackEnd.CCI
{
  public abstract class LazyList[T] : IReadOnlyList[T]
  {
    protected mutable _list : ImmutableArray[T];
    
    protected abstract OnLoad() : void;
    
    Load() : void
    {
      when (_list == null)
        OnLoad();
    }
    
    public Item[index : int] : T
    {
      get
      {
        Load();
        _list[index]
      }
    }
    
    public Count : int
    {
      get
      {
        Load();
        _list.Length
      }
    }
   
    public GetEnumerator() : ImmutableArray[T].Enumerator
    {
      Load();
      _list.GetEnumerator()
    }
    
    GetEnumeratorImpl() : IEnumerator[T]
     implements Seq[T].GetEnumerator
    {
      (_list : Seq[T]).GetEnumerator()
    }

    GetEnumeratorImpl2() : SC.IEnumerator
     implements SC.IEnumerable.GetEnumerator
    {
      (_list : SC.IEnumerable).GetEnumerator()
    }
  }
}
