using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra;
using Nitra.Quote;

[assembly: QuotationRules("CSharp.Grammar", "SplicableCSharp", "Statement",  "Expression")]

internal sealed class CSharpVisitor : AstVisitor
{
  public override Visit(ast : Ast) : Ast
  {
    def newAst = quote match (ast)
    {
      | <# Statement: $LocalVariableType(_) $Name(varName) = $(expr1).Where($Name(item) => $Expression(pred)); #> =>
        quote <# Statement:
          {
            List<object> $Name(varName) = new List<object>();
            foreach (var $Name(item) in $Expression(expr1))
            {
              if ($BooleanExpression(pred))
              {
                $Identifier(varName).Add($Identifier(item));
              }
            }
          }
        #>;

      | <# Expression: 0 #> => quote <# Expression: 1 - 1 #>;
      | x => x
    }
    newAst.Apply(this)
  }
}
