//using Nitra;

syntax module CSharp
{
  using Outline;
  using PrettyPrint;
  using StandardSpanClasses;
  using CStyleComments;
  using Whitespaces;

  literal Less                = "<";
  literal Greater             = ">";
  literal OpenBrace           = "(";
  literal CloseBrace          = ")";
  literal OpenBrace           = "{";
  literal CloseBrace          = "}";
  literal OpenSquareBrace     = "[";
  literal CloseSquareBrace    = "]";
  literal SingleQuote         = "\'";
  literal Quote               = "\"";
  literal Semicolon           = ";";
  literal Comma               = ",";
  literal Dot                 = ".";
  literal Colon               = ":";
  literal Question            = "?";
  literal At                  = "@";
  literal AliasSeparator      = "::";
  literal Assign              = "=";
  literal Prefix              = "\\u";
  literal DodDot              = "..";
  literal Op                  = "=>", "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "??",
                                      "||", "&&", "|", "^", "&", "==", "!=", "<=", ">=", "<<", ">>", "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
  literal Backslash           = "\\";
  literal Epsilon             = "";

  span class Keyword = ['a'..'z', '_']['a'..'z', '_']+;

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  alias Epsilon                 = "";

  [StartRule]
  syntax CompilationUnit = ExternAliasDirective* UsingDirective* NamespaceMemberDeclaration* !Any;

// Contextual keywords:
// "add" | "alias" | "ascending" | "assembly" | "by" | "descending" | "dynamic" | "equals" | "field" | "from" | "get" | "global"!!! | "group" |
// "into" | "join" | "let" | "method" | "module" | "on" | "orderby" | "param" | "partial" | "property" | "remove" | "select" | "set" | "type" |
// "typevar"!!! | "value" | "var" | "where" | "yield"

  regex KeywordToken
                =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                  | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                  | "event"    | "explicit"   | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                  | "if"       | "implicit"   | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                  | "new"      | "null"       | "object"    | "operator"  | "out"       | "override" | "params" | "private"     | "protected" | "public"
                  | "readonly" | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                  | "struct"   | "switch"     | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                  | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while"
                  | "__arglist";

  alias Name                = Identifier;
  alias QualifiedName       = QualifiedIdentifier;
  alias Char                = Any;
  alias Comma               = ","?;

  [Keyword]
  token Keyword = Name=KeywordToken !IdentifierPartCharacters;

  regex Any = ['\u0000'..'\uFFFF'];

  /////////////////////////////////////////////////////////
  // Spacing

  extend token IgnoreToken
  {
    | [SpanClass(Comment), ExplicitSpaces] SingleLineComment;
    | [SpanClass(Comment), ExplicitSpaces] MultiLineComment;
    | [SpanClass(Comment), ExplicitSpaces] Preprocessor = Start='#' Body=(!NewLineCharacter Any)* End=NewLine?;
  }

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

  // Spacing
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Identifiers

  [Identifier]
  token Identifier = !Keyword At="@"? IdentifierBody;
  [ExplicitSpaces]
  syntax QualifiedIdentifier  = QualifiedAlias? (QualifiedIdentifierPart; s "." s)+; // TODO: In C# spec. it's "namespace-or-type-name". Rename it!
  [ExplicitSpaces]
  syntax NamespaceName        = (Identifier; s "." s)+;

  [ExplicitSpaces]
  syntax QualifiedIdentifierPartTypeArguments
  {
    | QualifiedIdentifierPartTypeArgumentList  = s "<" s TypeArguments ">" s;
    | QualifiedIdentifierPartOpenTypeArguments = s "<" s RankSeparator* ">" s;
  }

  [ExplicitSpaces]
  syntax QualifiedIdentifierPart = Identifier QualifiedIdentifierPartTypeArguments?;
  syntax QualifiedAlias = Alias = Identifier "::";


  // same as 'QualifiedIdentifierPart' but avoids capturing type arguments of method name
  syntax TypeMemberIdentifierPart  = Identifier (QualifiedIdentifierPartTypeArguments !"(")?;
  syntax TypeMemberIdentifier      = QualifiedAlias? (TypeMemberIdentifierPart; ".")+; // TODO: Maybe a bug. It's should end with Identifier

  regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];//['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я', 'і'];//
  regex CombiningCharacter        = [Mn, Mc];
  regex DecimalDigitCharacter     = [Nd];
  regex ConnectingCharacter       = [Pc];
  regex FormattingCharacter       = [Cf];

  regex IdentifierStartCharacter  = LetterCharacter | "_" | UnicodeEscapeSequence;
  regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter | UnicodeEscapeSequence;
  regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

  // Identifiers
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Literals

  regex DecimalDigit                        = ['0'..'9'];
  regex HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
  regex IntegerTypeSuffixTerminal           = ('U' | 'u') ('l' | 'L')? | ('l' | 'L') ('U' | 'u')?;
  regex IntegerTypeSuffix                   = IntegerTypeSuffixTerminal; // "UL" | "ul" | "uL" | "Ul" | "LU" | "lu" | "Lu" | "lU" | "U" | "u" | "L" | "l";
  [SpanClass(Number)]
  regex DecimalIntegerLiteral               = DecimalDigit+ IntegerTypeSuffix?;
  [SpanClass(Number)]
  regex HexadecimalIntegerLiteral           = ("0x" | "0X") HexDigit+ IntegerTypeSuffix?;
  [SpanClass(Number)]
  regex IntegerLiteral                      = HexadecimalIntegerLiteral | DecimalIntegerLiteral;

  regex RealTypeSuffix                      = "F" | "f" | "D" | "d" | "M" | "m";
  regex ExponentPart                        = ("E" | "e") ("-" | "+")? DecimalDigit+;
  regex RealLiteral_1                       = DecimalDigit* "." DecimalDigit+ ExponentPart? RealTypeSuffix?;
  regex RealLiteral_2                       = DecimalDigit+ ExponentPart RealTypeSuffix?;
  regex RealLiteral_3                       = DecimalDigit+ RealTypeSuffix;
  [SpanClass(Number)]
  regex RealLiteral                         = RealLiteral_1 | RealLiteral_2 | RealLiteral_3;

  regex UnicodeEscapeSequence_u             = "\\u" HexDigit HexDigit HexDigit HexDigit;
  regex UnicodeEscapeSequence_U             = "\\U" HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
  regex UnicodeEscapeSequence               = UnicodeEscapeSequence_u | UnicodeEscapeSequence_U;
  regex HexadecimalEscapeSequence           = "\\x" HexDigit HexDigit? HexDigit? HexDigit?;
  regex SimpleEscapeSequence                = "\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v";
  regex NotAllowedCharLiteralChar           = NewLineCharacter | "'" | "\\";
  token SingleCharacter   = !NotAllowedCharLiteralChar Any;

  token Character
  {
    | SimpleEscapeSequenceChar      = SimpleEscapeSequence;
    | UnicodeEscapeSequenceChar     = UnicodeEscapeSequence;
    | HexadecimalEscapeSequenceChar = HexadecimalEscapeSequence;
    | SingleCharacterChar           = SingleCharacter;
  }

  [SpanClass(Char)] token CharacterLiteral = "'" Character "'";

  regex NotAllowedRegularStringLiteralChar = NewLineCharacter | "\"" | "\\";

  token RegularStringLiteralPart
  {
    | SimpleEscapeSequenceStrPart           = SimpleEscapeSequence;
    | UnicodeEscapeSequenceStrPart          = UnicodeEscapeSequence;
    | HexadecimalEscapeSequenceStrPart      = HexadecimalEscapeSequence;
    | RegularStringLiteralCharacterSequence = (!NotAllowedRegularStringLiteralChar Any)+;
  }

  [SpanClass(String)]
  token RegularStringLiteral = "\"" RegularStringLiteralPart* "\"";

  regex DoubleQuote = "\"\"";

  token VerbatimStringLiteralPart
  {
    | QuoteEscapeSequence                     = DoubleQuote;
    | VerbatimStringLiteralCharacterSequence  = (!"\"" Any)+;
  }

  [SpanClass(String)]
  token VerbatimStringLiteral = OpenQuote = "@\"" VerbatimStringLiteralPart* CloseQuote = "\"";

  regex BooleanLiteral = "true" | "false";

  // Literals
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  //

  syntax ExternAliasDirective = "extern" sm "alias" sm Name ";"nl;

  syntax UsingDirective
  {
    | Alias = "using"sm Name sm "=" sm QualifiedName ";" nl;
    | Open  = "using"sm QualifiedName ";" nl;
  }

  syntax NamespaceMemberDeclaration
  {
    | Namespace = "namespace" sm NamespaceName outline_begin_before nl "{" inl ExternAliasDirective* UsingDirective* NamespaceMemberDeclaration* d "}" ";"? nl outline_end_before;
    | Type      = TypeDeclaration;
  }

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeDeclaration

  syntax TypeBase = ":" (AnyType; ","sm)+;
  syntax Partial  = "partial"sm;

  // TODO: Make separate modifier lists for each kind of type declaration.

  syntax StructHead = "struct"    sm         Name;
  syntax InterfaceHead = "interface";

  syntax TypeDeclaration
  {
    | Class     = Modifiers Partial? "class"       sm         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
  }

  syntax TypeBody = outline_begin_before "{" inl TypeMemberDeclaration* d "}" ";"? nl outline_end_before;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeMemberDeclarations

  syntax TypeMemberDeclaration
  {
    | NestedType      = TypeDeclaration;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////////////////////////////////////////
  // Modifiers

  syntax Modifiers = Modifier*;

  syntax Modifier
  {
    | New       = "new"sm;
    | Public    = "public"sm;
    | Protected = "protected"sm;
    | Internal  = "internal"sm;
    | Private   = "private"sm;
    | Virtual   = "virtual"sm;
    | Volatile  = "volatile"sm;
    | Static    = "static"sm;
    | Readonly  = "readonly"sm;
    | Sealed    = "sealed"sm;
    | Override  = "override"sm;
    | Abstract  = "abstract"sm;
    | Extern    = "extern"sm;
    | Unsafe    = "unsafe"sm;
    | AsyncMod  = "async"sm; // C# 5
  }

  syntax Async = "async"sm; // C# 5

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeParameters

  regex InOrOut  = "in" | "out";
  syntax VarianceAnnotation  = Annotation=InOrOut sm;
  syntax TypeParameter       = VarianceAnnotation? Name;
  syntax TypeParameters   = "<" (TypeParameter; ","sm)+ ">";

  syntax TypeParameterConstraint
  {
    | Ctor   = "new" "(" ")";
    | Class  = "class";
    | Struct = "struct";
    | Base   = AnyType;
  }

  syntax TypeParameterConstraints        = (TypeParameterConstraint; ","sm)+;
  syntax TypeParameterConstraintsClause  =  "where"sm Name ":"sm TypeParameterConstraints nl;
  syntax TypeParameterConstraintsClauses = TypeParameterConstraintsClause*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Types

  regex EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
  regex IntegralType      = EnumBaseType | "char";
  regex FloatingPointType = "float" | "double";
  regex NumericType       = IntegralType | FloatingPointType | "decimal";
  regex PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

  syntax TypeName
  {
    | PredefinedType
    | QualifiedName = !PredefinedType QualifiedIdentifier
  }

  regex Pointer = "*";
  syntax PointerSpecifiers = Pointer*;

  syntax RankSeparator = ",";
  syntax RankSpecifier = "[" RankSeparator* "]";

  syntax TypeSpecifier
  {
    | RankSpecifier;
    | PointerSpecifier = Pointer;
  }

  [ExplicitSpaces] syntax NullableSpecifier = "?" !"?"; // dont't collide with `??' operator

  syntax AnyNonArrayType             = TypeName NullableSpecifier?;
  syntax AnyType                     = AnyNonArrayType TypeSpecifier*;
  syntax TypeArgument                = AnyType;
  syntax TypeArguments               = (TypeArgument; ","sm)+;

  syntax MayBeGenericArgumentList    = "<" TypeArguments ">" &GenericArgumentListFollow;

  regex GenericArgumentListFollow    = '(' | ')' | ']' | '}' | ':' | ';' | ',' | '.' | '?' | "==" | "!=";

  //
  ////////////////////////////////////////////////////////////////////////////////////
}
