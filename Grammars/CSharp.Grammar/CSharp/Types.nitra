namespace CSharp
{
  syntax module Types
  {
    using Outline;
    using PrettyPrint;
    using StandardSpanClasses;
    using Whitespaces;

    using CSharp.TokenNames;
    using Literals;
    using CSharp.CsIdentifiers;
    using Expressions;
    using Attributes;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias Attributes              = AttributeSection*;
    alias Name                    = Identifier;

    ////////////////////////////////////////////////////////////////////////////////////
    // TypeParameters

    regex InOrOut  = "in" | "out";
    syntax VarianceAnnotation  = Annotation=InOrOut sm;
    syntax TypeParameter       = Attributes VarianceAnnotation? Name;
    syntax TypeParameters   = "<" (TypeParameter; ","sm)+ ">";

    syntax TypeParameterConstraint
    {
      | Ctor   = "new" "(" ")";
      | Class  = "class";
      | Struct = "struct";
      | Base   = AnyType;
    }

    syntax TypeParameterConstraints        = (TypeParameterConstraint; ","sm)+;
    syntax TypeParameterConstraintsClause  =  "where"sm Name ":"sm TypeParameterConstraints nl;
    syntax TypeParameterConstraintsClauses = TypeParameterConstraintsClause*;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // Types

    regex EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
    regex IntegralType      = EnumBaseType | "char";
    regex FloatingPointType = "float" | "double";
    regex NumericType       = IntegralType | FloatingPointType | "decimal";
    regex PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

    syntax TypeName
    {
      | PredefinedType
      | QualifiedName = !PredefinedType QualifiedIdentifier
    }

    regex Pointer = "*";
    syntax PointerSpecifiers = Pointer*;

    syntax RankSeparator = ",";
    syntax RankSpecifier = "[" RankSeparator* "]";

    syntax TypeSpecifier
    {
      | RankSpecifier;
      | PointerSpecifier = Pointer;
    }

    [ExplicitSpaces] syntax NullableSpecifier = "?" !"?"; // dont't collide with `??' operator

    syntax AnyNonArrayType             = TypeName NullableSpecifier?;
    syntax AnyNonArrayTypeNullableHack = TypeName NullableSpecifier = (NullableSpecifier !(Expression ":" Expression))?; // don't collide with ternary op ? : // BUG:
    syntax AnyType                     = AnyNonArrayType TypeSpecifier*;
    syntax AnyTypeNullableHack         = AnyNonArrayTypeNullableHack TypeSpecifier*;
    syntax TypeArgument                = AnyType;
    syntax TypeArguments               = (TypeArgument; ","sm)+;

    syntax MayBeGenericArgumentList    = "<" TypeArguments ">" &GenericArgumentListFollow;

    regex GenericArgumentListFollow    = '(' | ')' | ']' | '}' | ':' | ';' | ',' | '.' | '?' | "==" | "!=";

    //
    ////////////////////////////////////////////////////////////////////////////////////
  }
}
