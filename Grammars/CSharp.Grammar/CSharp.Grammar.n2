//using N2;

syntax module CSharp
{
  token field Less                = "<";
  token field Greater             = ">";
  token field OpenBrace           = "(";
  token field CloseBrace          = ")";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field OpenSquareBrace     = "[";
  token field CloseSquareBrace    = "]";
  token field SingleQuote         = "\'";
  token field Quote               = "\"";
  token field Semicolon           = ";";
  token field Comma               = ",";
  token field Dot                 = ".";
  token field Colon               = ":";
  token field Question            = "?";
  token field At                  = "@";
  token field AliasSeparator      = "::";
  token field Assign              = "=";
  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = "=>", "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "??",
                                    "||", "&&", "|", "^", "&", "==", "!=", "<=", ">=", "<<", ">>", "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
  token field Backslash           = "\\";
  
  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  alias Attributes              = AttributeSection*;
  alias GlobalAttributes        = GlobalAttributeSection*;
  alias BooleanExpression       = Expression;

  token NullChars = '\u0000';

  [StartRule]
  syntax CompilationUnit = s ExternAliasDirective* UsingDirective* GlobalAttributes NamespaceMemberDeclaration* NullChars* !Any;

// Official contextual keywords:
// "add" | "alias" | "ascending" | "assembly" | "by" | "descending" | "dynamic" | "equals" | "field" | "from" | "get" | "global"!!! | "group" | 
// "into" | "join"!!! | "let" | "method" | "module" | "on" | "orderby" | "param" | "partial" | "property" | "remove" | "select" | "set" | "type" |
// "typevar"!!! | "value" | "var" | "where" | "yield" 

  token KeywordToken
                =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                  | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                  | "event"    | "explicit"   | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                  | "if"       | "implicit"   | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                  | "new"      | "null"       | "object"    | "operator"  | "out"       | "override" | "params" | "private"     | "protected" | "public"
                  | "readonly" | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                  | "struct"   | "switch"     | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                  | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while";

  syntax Keyword = KeywordToken as Name !IdentifierPartCharacters;
  
  token Any = ['\u0000'..'\uFFFF'];

  /////////////////////////////////////////////////////////
  // Spacing

  token NewLineCharacter  = '\n' | '\r' | '\u2028' /*  line separator */ | '\u2029' /*  paragraph separator */;
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs] | '\t' | '\v' | '\f' | '\uFEFF';
  token Space = Whitespace | NewLine;
	token Spaces = Space+;

  void s   = Spaces*;                     // optional spacer
  void S   = !IdentifierPartCharacters s; // identifier break spacer
  void SM  = !IdentifierPartCharacters s; // identifier break spacer
  void i   = ' '*;                        // increase a indent
  void d   = ' '*;                        // decrease a indent
  void nl  = Spaces*;                     // optional spacer and plase for \n while pretty printing
  void inl = Spaces*;                     // i + nl
  void sm  = Spaces*;                     // optional spacer and prefer to print space while pretty printing

  alias Name                = Identifier;
  alias QualifiedName       = QualifiedIdentifier;
  alias Char                = Any;
  alias Comma               = (","s)?;
  
  // Spacing
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Identifiers

  syntax Identifier           = !Keyword "@"? as At IdentifierBody s;
  syntax QualifiedIdentifier  = QualifiedAlias? (QualifiedIdentifierPart; "."s)+; // TODO: In C# spec. it's "namespace-or-type-name". Rename it!
  syntax NamespaceName        = (Identifier; "."s)+;
  
  syntax QualifiedIdentifierPartTypeArguments;

  syntax QualifiedIdentifierPartTypeArgumentList  is QualifiedIdentifierPartTypeArguments = "<"s TypeArguments ">"s;
  syntax QualifiedIdentifierPartOpenTypeArguments is QualifiedIdentifierPartTypeArguments = "<"s RankSeparator* ">"s;

  syntax QualifiedIdentifierPart = Identifier QualifiedIdentifierPartTypeArguments?;
  syntax QualifiedAlias = Identifier as Alias "::"s;

  
  // same as 'QualifiedIdentifierPart' but avoids capturing type arguments of method name
  syntax TypeMemberIdentifierPart  = Identifier (QualifiedIdentifierPartTypeArguments !"(")?;
  syntax TypeMemberIdentifier      = QualifiedAlias? (TypeMemberIdentifierPart; "."s)+; // TODO: Maybe a bug. It's should end with Identifier

  token LetterCharacter           = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я', 'і'];//[Lu, Ll, Lt, Lm, Lo, Nl];//
  token CombiningCharacter        = [Mn, Mc];
  token DecimalDigitCharacter     = [Nd];
  token ConnectingCharacter       = [Pc];
  token FormattingCharacter       = [Cf];

  token IdentifierStartCharacter  = LetterCharacter | "_" | UnicodeEscapeSequence;
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter | UnicodeEscapeSequence;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

  // Identifiers
  /////////////////////////////////////////////////////////
 
  /////////////////////////////////////////////////////////
  // Literals

  token DecimalDigit                        = ['0'..'9'];
  token HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
  token IntegerTypeSuffixTerminal           = ('U' | 'u') ('l' | 'L')? | ('l' | 'L') ('U' | 'u')?;
  token IntegerTypeSuffix                   = IntegerTypeSuffixTerminal; // "UL" | "ul" | "uL" | "Ul" | "LU" | "lu" | "Lu" | "lU" | "U" | "u" | "L" | "l";
  token DecimalIntegerLiteral               = DecimalDigit+ IntegerTypeSuffix?;
  token HexadecimalIntegerLiteral           = ("0x" | "0X") HexDigit+ IntegerTypeSuffix?;
  token IntegerLiteral                      = HexadecimalIntegerLiteral | DecimalIntegerLiteral;

  token RealTypeSuffix                      = "F" | "f" | "D" | "d" | "M" | "m";
  token ExponentPart                        = ("E" | "e") ("-" | "+")? DecimalDigit+;
  token RealLiteral_1                       = DecimalDigit* "." DecimalDigit+ ExponentPart? RealTypeSuffix?;
  token RealLiteral_2                       = DecimalDigit+ ExponentPart RealTypeSuffix?;
  token RealLiteral_3                       = DecimalDigit+ RealTypeSuffix;
  token RealLiteral                         = RealLiteral_1 | RealLiteral_2 | RealLiteral_3;

  token UnicodeEscapeSequence_u             = "\\u" HexDigit HexDigit HexDigit HexDigit;
  token UnicodeEscapeSequence_U             = "\\U" HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
  token UnicodeEscapeSequence               = UnicodeEscapeSequence_u | UnicodeEscapeSequence_U;
  token HexadecimalEscapeSequence           = "\\x" HexDigit HexDigit? HexDigit? HexDigit?;
  token SimpleEscapeSequence                = "\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v";
  token NotAllowedCharLiteralChar           = NewLineCharacter | "'" | "\\";
  syntax SingleCharacter                    = !NotAllowedCharLiteralChar Any;

  syntax Character;

  extend syntax Character
  {
    SimpleEscapeSequenceChar      = SimpleEscapeSequence;
    UnicodeEscapeSequenceChar     = UnicodeEscapeSequence;
    HexadecimalEscapeSequenceChar = HexadecimalEscapeSequence;
    SingleCharacterChar           = SingleCharacter;
  }

  syntax CharacterLiteral = "'" Character "'";

  token NotAllowedRegularStringLiteralChar = NewLineCharacter | "\"" | "\\";

  syntax RegularStringLiteralPart;

  extend syntax RegularStringLiteralPart
  {
    SimpleEscapeSequenceStrPart           = SimpleEscapeSequence;
    UnicodeEscapeSequenceStrPart          = UnicodeEscapeSequence;
    HexadecimalEscapeSequenceStrPart      = HexadecimalEscapeSequence;
    RegularStringLiteralCharacterSequence = !NotAllowedRegularStringLiteralChar Any;
  }

  syntax RegularStringLiteral = "\"" RegularStringLiteralPart* "\"";

  token DoubleQuote = "\"\"";

  syntax VerbatimStringLiteralPart;

  extend syntax VerbatimStringLiteralPart
  {
    QuoteEscapeSequence                     = DoubleQuote;
    VerbatimStringLiteralCharacterSequence  = (!"\"" Any)+;
  }

  syntax VerbatimStringLiteral = "@\"" as OpenQuote VerbatimStringLiteralPart* "\"" as CloseQuote;
                                                     
  token BooleanLiteral = "true" | "false";

  // Literals
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // 

  syntax ExternAliasDirective = "extern" SM "alias" SM Name ";"nl;

  syntax UsingDirective;

  syntax UsingAliasDirective     is UsingDirective = "using"SM Name sm "=" sm QualifiedName ";" nl;
  syntax UsingNamespaceDirective is UsingDirective = "using"SM QualifiedName ";" nl;

  syntax NamespaceMemberDeclaration;

  syntax NamespaceDeclaration     is NamespaceMemberDeclaration = "namespace"SM NamespaceName nl "{" inl UsingDirective* NamespaceMemberDeclaration* d "}"s ";"? nl;
  syntax NamespaceTypeDeclaration is NamespaceMemberDeclaration = TypeDeclaration;

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeDeclaration

  syntax TypeBase = ":"s (AnyType; ","sm)+;
  syntax Partial  = "partial"SM;

  // TODO: Make separate modifier lists for each kind of type declaration.

  syntax TypeDeclaration;

  extend syntax TypeDeclaration
  {
    ClassDeclaration     = Attributes Modifiers Partial? "class"     SM         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
    StructDeclaration    = Attributes Modifiers Partial? "struct"    SM         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
    InterfaceDeclaration = Attributes Modifiers Partial? "interface" SM         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
    EnumDeclaration      = Attributes Modifiers          "enum"      SM         Name                 EnumBase? nl                                    EnumBody;
    DelegateDeclaration  = Attributes Modifiers          "delegate"  SM AnyType Name TypeParameters? "("s FormalParameters ")"s TypeParameterConstraintsClauses? ";"nl;
  }

  syntax TypeBody = "{" inl TypeMemberDeclaration* d "}"s ";"? nl;
  syntax EnumBody = "{" inl EnumMemberDeclarations d "}"s ";"? nl;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeMemberDeclarations

  syntax TypeMemberDeclaration;
  
  extend syntax TypeMemberDeclaration
  {
    NestedTypeDeclaration      = TypeDeclaration;
    MethodDeclaration          = Attributes Modifiers Partial? MethodHeader Body;
    PropertyDeclaration        = Attributes Modifiers AnyType sm TypeMemberIdentifier PropertyBody;
    FieldDeclaration           = Attributes Modifiers AnyType sm VariableDeclarators  ";" nl;
    ConstantDeclaration        = Attributes Modifiers "const"SM AnyType sm ConstantDeclarators ";" nl;
    ConstructorDeclaration     = Attributes Modifiers Name "("s FormalParameters ")"s ConstructorInitializer? Body;
    EventDeclaration           = Attributes Modifiers "event"S AnyType sm TypeMemberIdentifier nl "{"s inl EventAccessorDeclarations d "}"s;
    SimpleEventDeclaration     = Attributes Modifiers "event"S AnyType sm VariableDeclarators ";" nl;
    IndexerDeclaration         = Attributes Modifiers AnyType sm  (TypeMemberIdentifier "."s)? "this"S "["s FormalParameters "]"s PropertyBody;
    DestructorDeclaration      = Attributes Modifiers "~"s Name "("s FormalParameters ")"s Body;
    FixedSizeBufferDeclaration = Attributes Modifiers "fixed"SM AnyType sm (FixedSizeBufferDeclarator; ","sm)+ ";" nl;
    OperatorDeclaration1       = Attributes Modifiers AnyType sm "operator"SM OverloadableOperator S "("s FormalParameters ")"s Body;
    OperatorDeclaration2       = Attributes Modifiers OperatorKind SM "operator" SM AnyType "("s FormalParameters ")"s Body;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Members

  syntax Body;
  syntax BlockBody is Body = nl "{" inl Statement* d "}"s ";"? nl;
  syntax EmptyBody is Body = ";" nl;

  syntax PropertyBody = nl "{" inl AccessorDeclarations d "}" nl;

  syntax FixedSizeBufferDeclarator = Identifier "["s ConstantExpression "]"s;

  token OverloadableOperator = "++" | "--" | "<<" | ">>" | "==" | "!=" | ">=" | "<=" | ">" | "<" | "true" | "false"
                              | "^" | "!" | "~" | "+" | "-" | "*" | "/" | "%" | "&" | "|";

  token OperatorKind = "implicit" | "explicit";

  syntax MethodHeader = AnyType sm TypeMemberIdentifier TypeParameters? "("s FormalParameters ")"s TypeParameterConstraintsClauses?;

  syntax GetAccessorDeclaration = Attributes Modifiers "get"S Body;
  syntax SetAccessorDeclaration = Attributes Modifiers "set"S Body;

  syntax AccessorDeclarations;
  extend syntax AccessorDeclarations
  {
    GetSet = GetAccessorDeclaration SetAccessorDeclaration?;
    SetGet = SetAccessorDeclaration GetAccessorDeclaration?;
  }

  syntax ConstructorInitializer;

  extend syntax ConstructorInitializer
  {
    ConstructorInitializerThis = sm ":" sm "this"S "("s ArgumentList ")"s;
    ConstructorInitializerBase = sm ":" sm "base"S "("s ArgumentList ")"s;
  }

  syntax EnumBase               = sm ":" sm AnyType;
  syntax EnumMemberDeclaration  = Attributes Name (sm "=" sm ConstantExpression)?;
  syntax EnumMemberDeclarations = (EnumMemberDeclaration; ","nl)* Comma nl;

  syntax AddAccessorDeclaration    = Attributes "add"S    Body;
  syntax RemoveAccessorDeclaration = Attributes "remove"S Body;

  syntax EventAccessorDeclarations;

  extend syntax EventAccessorDeclarations
  {
    AddRemoveAccessors = AddAccessorDeclaration    RemoveAccessorDeclaration;
    RemoveAddAccessors = RemoveAccessorDeclaration AddAccessorDeclaration;
  }
  
  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // FormalParameters

  token ParameterModifier = "ref" | "out" | "this" | "params";
  syntax DefaultArgument  = "="s Expression;
  syntax FormalParameter  = Attributes (ParameterModifier SM)? AnyType sm Name DefaultArgument?;
  syntax FormalParameters = (FormalParameter; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////////////////////////////////////////
  // Modifiers

  syntax Modifiers = Modifier*;

  syntax Modifier;

  extend syntax Modifier
  {
    New       = "new"SM;
    Public    = "public"SM;
    Protected = "protected"SM;
    Internal  = "internal"SM;
    Private   = "private"SM;
    Virtual   = "virtual"SM;
    Volatile  = "volatile"SM;
    Static    = "static"SM;
    Readonly  = "readonly"SM;
    Sealed    = "sealed"SM;
    Override  = "override"SM;
    Abstract  = "abstract"SM;
    Extern    = "extern"SM;
    Unsafe    = "unsafe"SM;
    AsyncMod  = "async"SM; // C# 5
  }

  syntax Async = "async"SM; // C# 5

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Attributes

  syntax AttributeArguments = "("s ArgumentList ")"s;
  syntax Attribute          = QualifiedName AttributeArguments?;
  syntax AttributeList      = (Attribute; ","sm)* Comma;

  token GlobalAttributeTarget = "assembly" | "module";
  syntax GlobalAttributeTargetSpecifier = GlobalAttributeTarget S ":"s;
  syntax GlobalAttributeSection         = "["s GlobalAttributeTargetSpecifier sm AttributeList "]"nl;

  token AttributeTarget = "field" | "event" | "method" | "param" | "property" | "return" | "type";

  syntax AttributeTargetSpecifier = AttributeTarget s ":"s;
  syntax AttributeSection         = "["s AttributeTargetSpecifier? AttributeList "]"nl;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Arguments

  token ArgumentModfier = "ref" | "out";
  syntax ArgumentName    = Name ":" !":" s; // avoid conflict with alias
  syntax Argument        = ArgumentName? (ArgumentModfier SM)? as Modfier Expression;
  syntax ArgumentList    = (Argument; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeParameters

  token InOrOut  = "in" | "out";
  syntax VarianceAnnotation  = InOrOut as Annotation SM;
  syntax TypeParameter       = Attributes VarianceAnnotation? Name;
  syntax TypeParameters   = "<"s (TypeParameter; ","sm)+ ">"s;

  syntax TypeParameterConstraint;

  extend syntax TypeParameterConstraint
  {
    TypeParameterConstraint_ctor   = "new"S "("s ")"s;
    TypeParameterConstraint_class  = "class"S;
    TypeParameterConstraint_struct = "struct"S;
    TypeParameterConstraint_base   = AnyType;
  }
  
  syntax TypeParameterConstraints        = (TypeParameterConstraint; ","sm)+;
  syntax TypeParameterConstraintsClause  =  "where"SM Name ":"sm TypeParameterConstraints nl;
  syntax TypeParameterConstraintsClauses = TypeParameterConstraintsClause*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Types

  token EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
  token IntegralType      = EnumBaseType | "char";
  token FloatingPointType = "float" | "double";
  token NumericType       = IntegralType | FloatingPointType | "decimal";
  token PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

  syntax TypeName;
  
  syntax PredefinedTypeName is TypeName = PredefinedType S;
  syntax QualifiedTypeName  is TypeName = QualifiedName;

  token Pointer = "*";
  syntax PointerSpecifiers = (Pointer s)*;

  syntax TypeSpecifier;
  syntax RankSpecifierTypeSpecifier is TypeSpecifier = "["s RankSeparator* "]"s;
  syntax PointerSpecifier           is TypeSpecifier = "*"s;

  syntax RankSpecifier = "["s RankSeparator* "]"s;

  syntax RankSeparator               = "," s;
  syntax NullableSpecifier           = "?" !"?" s; // dont't collide with `??' operator

  syntax AnyNonArrayType             = TypeName NullableSpecifier?;
  syntax AnyNonArrayTypeNullableHack = TypeName (NullableSpecifier !(Expression ":"s Expression))? as NullableSpecifier; // don't collide with ternary op ? :
  syntax AnyType                     = AnyNonArrayType TypeSpecifier*;
  syntax AnyTypeNullableHack         = AnyNonArrayTypeNullableHack TypeSpecifier*;
  syntax TypeArgument                = AnyType;
  syntax TypeArguments               = (TypeArgument; ","sm)* Comma;

  syntax MayBeGenericArgumentList    = "<"s TypeArguments ">"s &GenericArgumentListFollow;

  token GenericArgumentListFollow    = '(' | ')' | ']' | '}' | ':' | ';' | ',' | '.' | '?' | "==" | "!=";

  syntax AnyTypeWithSpecifier;

  extend syntax AnyTypeWithSpecifier
  {
    AnyTypeWithSpecifier_1 = AnyNonArrayType TypeSpecifier+;
    AnyTypeWithSpecifier_2 = TypeName NullableSpecifier;      
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Variables

  syntax VariableDeclarators = (VariableDeclarator; ","sm)+;
  syntax VariableDeclarator  = Name (sm "=" sm VariableInitializer)?;

  syntax VariableInitializer;

  extend syntax VariableInitializer
  {
    ArrayInitializer      = "{"sm (VariableInitializer; ","sm)* sm Comma "}"s;
    ExpressionInitializer = Expression;
    PropertyInitializer   = Name sm "=" sm ComplexInitializer;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Constants

  syntax ConstantDeclarator  = Name sm "=" sm ConstantExpression;
  syntax ConstantDeclarators = (ConstantDeclarator; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Lamdas

  token  ExplicitAnonymousFunctionParameterModifier = "ref" | "out";
  syntax ExplicitAnonymousFunctionParameter         = (ExplicitAnonymousFunctionParameterModifier S)? AnyType sm Name;
  syntax ExplicitAnonymousFunctionSignature         = "("s (ExplicitAnonymousFunctionParameter; ","sm)* ")"s;

  syntax ImplicitAnonymousFunctionSignature         = (Identifier; ","sm)* as Names;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  object-creation-expression, array-creation-expression, delegate-creation-expression, anonymous-object-creation-expression 

  syntax ComplexInitializer = "{"s (VariableInitializer; ","sm)* Comma "}"s;

  syntax MemberDeclarator;

  extend syntax MemberDeclarator
  {
    MemberDeclarator1  = QualifiedIdentifier;
    MemberDeclarator2  = Expression : 150 "." QualifiedIdentifier;
    MemberDeclarator3  = PredefinedType "." QualifiedIdentifier;
    MemberDeclarator4  = Name sm "=" sm Expression;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Statement internals 

  syntax Block    = nl "{" inl Statement* d "}" nl;

  syntax IndentedEmbeddedStatement;

  extend syntax IndentedEmbeddedStatement
  {
    IndentedStatement = !"{" (inl EmbeddedStatement d); // not a block statment
    IndentedBlock     = &"{" Block;
  }

  syntax SwitchLabel; // switch-label

  extend syntax SwitchLabel
  {
    CaseSwitchLabel    = "case" SM ConstantExpression ":"nl;
    DefaultSwitchLabel = "default"s ":"nl;
  }

  syntax SwitchSection = SwitchLabel+ i Statement+ d;

  syntax LocalVariableDeclaration = LocalVariableType sm VariableDeclarators; // local-variable-declaration

  syntax ForInitializer;

  extend syntax ForInitializer
  {
    ForInitializer1 = LocalVariableDeclaration;
    ForInitializer2 = (Expression; ","sm)+;
  }

  syntax ForIterator = (Expression; ","sm)+;

  syntax ForCondition            = Expression;

  syntax LocalVariableType;

  extend syntax LocalVariableType
  {
    LocalVariableType1 = "var"S;
    LocalVariableType2 = AnyType;
  }

  syntax CastPredicate;

  // It is pisec! :)
  extend syntax CastPredicate
  {
    CastPredicate01 = '~';
    CastPredicate02 = '!' !'=';
    CastPredicate03 = '&' !'=';
    CastPredicate04 = '&' !'&';
    CastPredicate05 = '(';
    CastPredicate06 = !("as"S) IdentifierStartCharacter;
    CastPredicate07 = !("is"S) IdentifierStartCharacter;
    CastPredicate08 = '@';
    CastPredicate09 = IntegerLiteral;
    CastPredicate10 = CharacterLiteral;
    CastPredicate11 = BooleanLiteral;
    CastPredicate12 = RegularStringLiteral;
    CastPredicate13 = "null" S;
    CastPredicate14 = RealLiteral;
  }

  syntax ResourceAcquisition; // resource-acquisition

  extend syntax ResourceAcquisition
  {
    ResourceAcquisition1 = LocalVariableDeclaration /* &")" */;
    ResourceAcquisition2 = Expression;
  }

  syntax CatchExceptionFulter = "(" s AnyType (sm Identifier)? as Name ")" s;
  syntax CatchClause   = "catch"   SM (CatchExceptionFulter sm)? Block;
  syntax FinallyClause = "finally" SM Block;

  syntax AnonymousFunctionBody;
  extend syntax AnonymousFunctionBody
  {
    AnonymousFunctionBodyBlock      = Block;
    AnonymousFunctionBodyExpression = Expression;
  }

  syntax ConstantExpression = Expression;

  //  Statement internals
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Linq Query

  syntax FromClaus;

  extend syntax FromClaus
  {
    FromClaus1 = "from" SM            Name sm "in" SM Expression;
    FromClaus2 = "from" SM AnyType sm Name sm "in" SM Expression;
  }

  token OrderingDirection = "ascending" | "descending";

  syntax SelectOrGroupClause;

  extend syntax SelectOrGroupClause
  {
    SelectClause = "select" SM Expression;
    GroupClause  = "group"  SM Expression sm "by" SM Expression;
  }

  syntax QueryBody = QueryBodyClause* SelectOrGroupClause QueryContinuation?;

  syntax IntoClause = "into" SM Name;

  syntax Ordering = Expression (OrderingDirection S)?;

  syntax QueryBodyClause;

  extend syntax QueryBodyClause
  {
    FromClaus3    = FromClaus; // from-clause
    LetClause     = "let" SM Name sm "=" sm Expression; // let-clause
    WhereClause   = "where" SM BooleanExpression; // where-clause
    JoinClause1   =            Name sm "in" SM Expression sm "on" SM Expression sm "equals" SM Expression (sm QueryBodyClause)?; // join-clause && join-into-clause
    JoinClause2   = AnyType sm Name sm "in" SM Expression sm "on" SM Expression sm "equals" SM Expression (sm QueryBodyClause)?; // join-clause && join-into-clause
    OrderbyClause = "orderby" SM (Ordering; ","sm)+; // orderby-clause
  }

  syntax QueryContinuation = IntoClause sm QueryBody;

  //  Linq Query
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Statements

  syntax Statement;
  
  extend syntax Statement
  {
    LabeledStatement                  = Name ":" sm Statement;
    LocalVariableDeclarationStatement = LocalVariableDeclaration;
    LocalConstantDeclarationStatement = "const" SM AnyType ConstantDeclarators;
    EmbeddedStatementStatement        = EmbeddedStatement;
  }

  syntax EmbeddedStatement;

  extend syntax EmbeddedStatement
  {
    EmptyStatement          = ";" nl;
    BlockStatement          = Block;
    ExpressionStatement     = Expression ";" nl;

    // selection-statement
    IfStatement             = "if" SM "("s BooleanExpression ")"s IndentedEmbeddedStatement ("else"S IndentedEmbeddedStatement)?;
    SwitchStatement         = "switch" SM "("s Expression ")"nl "{" inl SwitchSection* d "}" nl;
    // iteration-statement
    WhileStatement          = "while" SM "("s BooleanExpression ")"s IndentedEmbeddedStatement;
    DoStatement             = "do"S nl IndentedEmbeddedStatement "while" SM "("s BooleanExpression ")"s ";" nl;
    ForStatement            = "for"S "("s ForInitializer? ";"sm ForCondition? ";"sm ForIterator? ")"s IndentedEmbeddedStatement;
    ForeachStatement        = "foreach"S "("s LocalVariableType sm Name sm "in" sm Expression ")"s IndentedEmbeddedStatement;

    CheckedStatement        = "checked"SM   Block; // checked-statement
    UncheckedStatement      = "unchecked"SM Block; // unchecked-statement
    
    LockStatement           = "lock"SM  "("s Expression ")"s          IndentedEmbeddedStatement; // lock-statement
    UsingStatement          = "using"SM "("s ResourceAcquisition ")"s IndentedEmbeddedStatement; // using-statement

    YieldStatement_return   = "yield" SM "return" SM Expression ";"nl; // try-statement
    YieldStatement_break    = "yield" SM "break"  S ";"nl;             // try-statement

    TryStatement_catch    =  "try" SM Block CatchClause+ FinallyClause?;
    TryStatement_finally  =  "try" SM Block FinallyClause;


    // jump-statement
    BreakStatement        = "break"S                                ";" nl;
    ContinueStatement     = "continue"S                             ";" nl;
    GotoStatement_case    = "goto"SM "case"SM   ConstantExpression  ";" nl;
    GotoStatement_default = "goto"SM "default"S                     ";" nl;
    GotoStatement_id      = "goto"SM            Name                ";" nl;
    ReturnStatement       = "return"SM          Expression          ";" nl;
    ReturnStatementVoid   = "return"S                               ";" nl;
    ThrowStatement        = "throw"SM           Expression?         ";" nl;

    // Unsafe
    UnsafeStatement       = "unsafe"S Block; // unsafe
    FixedStatement        = "fixed" SM "("s LocalVariableType sm VariableDeclarators ")"nl EmbeddedStatement; // unsafe
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////
 
  ////////////////////////////////////////////////////////////////////////////////////
  // Expressions

  syntax Expression;

  extend syntax Expression
  {
    // B.1.8 Literals
    BooleanLiteralExpression         = BooleanLiteral S;
    RegularStringLiteralExpression   = RegularStringLiteral S;
    VerbatimStringLiteralExpression  = VerbatimStringLiteral S;
    RealLiteralExpression            = RealLiteral S;
    IntegerLiteralExpression         = IntegerLiteral  S;
    CharacterLiteraExpression        = CharacterLiteral S;
    NullLiteralExpression            = "null" S;
                                     
    QualifiedNameExpression          = QualifiedName; // simple-name || member-access
    ParenthesizedExpression          = "("s Expression ")"s; // parenthesized-expression
    Cast1                            = "("s !Expression AnyType ")"s Expression;
    Cast2                            = "("s AnyType ")"s &CastPredicate Expression;
    ThisAccess                       = "this"S;
    BaseAccessMember                 = "base"S "."s QualifiedName;
    BaseAccessIndexer                = "base"S "["s ArgumentList "]"s;
    //BaseError                        = "base"S = Error;
                                     
    // Lambdas                       
    LambdaExpression_SingleParam1    =            Name                                        sm "=>" sm AnonymousFunctionBody;
    LambdaExpression_ExplicitParams1 =            ExplicitAnonymousFunctionSignature          sm "=>" sm AnonymousFunctionBody;
    LambdaExpression_ImplicitParams1 =            "("s ImplicitAnonymousFunctionSignature ")" sm "=>" sm AnonymousFunctionBody;
    LambdaExpression_SingleParam2    = "async" SM Name                                        sm "=>" sm AnonymousFunctionBody;
    LambdaExpression_ExplicitParams2 = "async" SM ExplicitAnonymousFunctionSignature          sm "=>" sm AnonymousFunctionBody;
    LambdaExpression_ImplicitParams3 = "async" SM "("s ImplicitAnonymousFunctionSignature ")" sm "=>" sm AnonymousFunctionBody;
                                     
    QueryExpression                  = FromClaus sm QueryBody;
                                     
    // Anonymous function            
    AnonymousFunction1               =            "delegate"SM ExplicitAnonymousFunctionSignature? nl "{" inl Statement* d "}"s;
    AnonymousFunction2               = "async" SM "delegate"SM ExplicitAnonymousFunctionSignature? nl "{" inl Statement* d "}"s;
                                     
    StackallocInitializer            = "stackalloc"SM AnyType "["s Expression "]"s; // unsafe

    // Group: Primary
    PointerMemberAccess        =  Expression "->"s Expression                    { precedence 150; } // pointer-member-access
    MemberAccess1              =  Expression : 150 "."s QualifiedName; // member-access 
    MemberAccess2              =  PredefinedType "."s QualifiedName; // member-access 
    Invocation                 =  Expression : 150 "("s ArgumentList ")"s;
    IndexerAccess              =  Expression : 150 "["s ArgumentList "]"s;
    PostIncrement              =  Expression "++"s                               { precedence 150; }
    PostDecrement              =  Expression "--"s                               { precedence 150; }

    // delegate-creation-expression || object-creation-expression || anonymous-object-creation-expression
    NewObject_1                = "new"SM AnyNonArrayType "("s ArgumentList ")"s;             // delegate-creation-expression || object-creation-expression (1)
    NewObject_2                = "new"SM AnyNonArrayType "("s ArgumentList ")"sm ComplexInitializer;                          // object-creation-expression (2)
    NewObject_3                = "new"SM AnyNonArrayType sm ComplexInitializer;                                               // object-creation-expression (3)
    NewArray_1                 = "new"SM AnyNonArrayType PointerSpecifiers "["s (Expression; ","sm)+ "]"s RankSpecifier*;                       // array-creation-expression  (1)
    NewArray_2                 = "new"SM AnyNonArrayType PointerSpecifiers "["s (Expression; ","sm)+ "]"s RankSpecifier* sm ComplexInitializer; // array-creation-expression  (1)
    NewArray_3                 = "new"SM AnyNonArrayType RankSpecifier+ ComplexInitializer;                                   // array-creation-expression  (2)
    NewArray_4                 = "new"SM RankSpecifier ComplexInitializer;                                                    // array-creation-expression  (3)
    NewAnonymous               = "new"SM "{"sm (MemberDeclarator; ","sm)* Comma sm "}"s;                                            // anonymous-object-creation-expression

    TypeOf                     =  "typeof"S     "("s AnyType    ")"s;
    Checked                    =  "checked"S    "("s Expression ")"s;
    Unchecked                  =  "unchecked"S  "("s Expression ")"s;
    Default                    =  "default"S    "("s AnyType    ")"s;
    Sizeof                     =  "sizeof"S     "("s AnyType    ")"s;


    // Group: Unary
    Identity              = "+"s  Expression                                     { precedence 140; }
    Negation              = "-"s  Expression                                     { precedence 140; }
    LogicalNegation       = "!"s  Expression                                     { precedence 140; }
    BitwiseNegation       = "~"s  Expression                                     { precedence 140; }
    PreIncrement          = "++"s Expression                                     { precedence 140; }
    PreDecrement          = "--"s Expression                                     { precedence 140; }
    AddressofExpression   = "&"s  Expression                                     { precedence 140; } // unsafe
    //ExplicitlyCast      = (T)s Expression                                      { precedence 140; }
    AwaitExpression       = "await" SM Expression;//                                { precedence 140; } // C# 5

    PointerIndirection    = "*"s  Expression                                     { precedence 135; } // pointer-indirection-expression

    // Group: Multiplicative
    Mul                   = Expression sm "*"  sm Expression                     { precedence 130; }
    Div                   = Expression sm "/"  sm Expression                     { precedence 130; }
    Remainder             = Expression sm "%"  sm Expression                     { precedence 130; }
    // Group: Additive
    Add                   = Expression sm "+"  sm Expression                     { precedence 120; }
    Sub                   = Expression sm "-"  sm Expression                     { precedence 120; }
    // Group: Shift
    ShiftLeft             = Expression sm "<<" sm Expression                     { precedence 110; }
    ShiftRight            = Expression sm ">>" sm Expression                     { precedence 110; }
    // Group: Relational and type testing
    LessThan              = Expression sm "<"  sm Expression                     { precedence 100; }
    GreaterThan           = Expression sm ">"  sm Expression                     { precedence 100; }
    LessThanOrEqual       = Expression sm "<=" sm Expression                     { precedence 100; }
    GreaterThanOrEqual    = Expression sm ">=" sm Expression                     { precedence 100; }
    Is                    = Expression : 100 sm "is" sm AnyTypeNullableHack;
    As                    = Expression : 100 sm "as" sm AnyTypeNullableHack;
    // Equality
    Equal                 = Expression sm "==" sm Expression                     { precedence  90; }
    NotEqual              = Expression sm "!=" sm Expression                     { precedence  90; }
    // Group: Logical AND                                                                      
    LogicalAnd            = Expression sm "&"  sm Expression                     { precedence  80; }
    // Group: Logical XOR                                                                      
    LogicalXor            = Expression sm "^"  sm Expression                     { precedence  70; }
    // Group: Logical OR                                                                       
    LogicalOr             = Expression sm "|"  sm Expression                     { precedence  60; }
    // Group: Conditional AND                                                                  
    ConditionalAnd        = Expression sm "&&" sm Expression                     { precedence  50; }
    // Group: Conditional OR                                                                   
    ConditionalOr         = Expression sm "||" sm Expression                     { precedence  40; }
    // Group: Null coalescing                                                                  
    NullCoalescing        = Expression sm "??" sm Expression                     { precedence  30; }
    // Group: Conditional                                                                      
    Conditional           = Expression : 21 sm "?" sm Expression sm ":" sm Expression; // right-associative
    // Group: Assignment or anonymous function                                                 
    Assignment            = Expression sm "="  sm Expression                     { precedence  10 right-associative; }
    MulAssignment         = Expression sm "*=" sm Expression                     { precedence  10 right-associative; }
    DivAssignment         = Expression sm "/=" sm Expression                     { precedence  10 right-associative; }
    RemainderAssignment   = Expression sm "%=" sm Expression                     { precedence  10 right-associative; }
    AddAssignment         = Expression sm "+=" sm Expression                     { precedence  10 right-associative; }
    SubAssignment         = Expression sm "-=" sm Expression                     { precedence  10 right-associative; }
    ShiftLeftAssignment   = Expression sm "<<="sm Expression                     { precedence  10 right-associative; }
    ShiftRightAssignment  = Expression sm ">>="sm Expression                     { precedence  10 right-associative; }
    AndAssignment         = Expression sm "&=" sm Expression                     { precedence  10 right-associative; }
    XorAssignment         = Expression sm "^=" sm Expression                     { precedence  10 right-associative; }
    OrAssignment          = Expression sm "|=" sm Expression                     { precedence  10 right-associative; }
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////
}