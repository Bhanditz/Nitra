//using N2;

syntax module CSharp
{
  token field Less                = "<";
  token field Greater             = ">";
  token field OpenBrace           = "(";
  token field CloseBrace          = ")";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field OpenSquareBrace     = "[";
  token field CloseSquareBrace    = "]";
  token field SingleQuote         = "\'";
  token field Quote               = "\"";
  token field Semicolon           = ";";
  token field Comma               = ",";
  token field Dot                 = ".";
  token field Colon               = ":";
  token field Question            = "?";
  token field At                  = "@";
  token field AliasSeparator      = "::";
  token field Assign              = "=";
  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=",
                                    "||", "&&", "|", "^", "&", "==", "!=", "<=", ">=", "<<", ">>", "+", "-", "!", "~", "++", "--", "*", "/", "%";
  token field Backslash           = "\\";
  
  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  alias  Attributes               = AttributeSection*;
  alias  GlobalAttributes         = GlobalAttributeSection*;

  [StartRule]
  syntax CompilationUnit = s /*externAliasDirectives*/ UsingDirective* GlobalAttributes NamespaceMemberDeclaration* !Any;

  token KeywordToken
                =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                  | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                  | "event"    | "explicit"   | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                  | "if"       | "implicit"   | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                  | "new"      | "null"       | "object"    | "operator"  | "out"       | "override" | "params" | "private"     | "protected" | "public"
                  | "readonly" | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                  | "struct"   | "switch"     | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                  | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while";

  syntax Keyword = KeywordToken as Name !IdentifierPartCharacters;

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
	token Spaces = Space+;


  void s = Spaces*;                     // optional spacer
  void S = !IdentifierPartCharacters s; // identifier break spacer
  void SM = !IdentifierPartCharacters s; // identifier break spacer
  void i = ' '*;                        // increase a indent
  void d = ' '*;                        // decrease a indent
  void nl  = Spaces*;                   // optional spacer and plase for \n while pretty printing
  void inl = Spaces*;                   // i + nl
  void sm  = Spaces*;                   // optional spacer and prefer to print space while pretty printing


  token LetterCharacter           = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я'];//[Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter        = [Mn, Mc];
  token DecimalDigitCharacter     = [Nd];
  token ConnectingCharacter       = [Pc];
  token FormattingCharacter       = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar        = "\"" | "\\";
  token ReservedCharChar          = "\'" | "\\";

  alias Name                = Identifier;
  alias QualifiedName       = QualifiedIdentifier;
  alias Char                = Any;
  alias Comma               = (","s)?;
  
  [SpanClass(String)]
  syntax StringLiteral                    = "\""  StringPart* "\"" s;

  syntax StringPart;

  syntax UnicodeEscapeSequenceStringPart  is StringPart = "\\u" HexDigit HexDigit HexDigit HexDigit;
  syntax EscapeSequenceStringPart         is StringPart = "\\"  Char;
  syntax SimpleStringPart                 is StringPart = Chars { alias Chars = (!ReservedStringChar Any)+; }

  [SpanClass(Char)]
  syntax CharLiteral                      = "\'"  CharPart "\'" s;
  
  syntax CharPart;

  syntax SimpleCharPart                   is CharPart = !ReservedCharChar Char;
  syntax UnicodeEscapeSequenceCharPart    is CharPart = "\\u" HexDigit HexDigit HexDigit HexDigit;
  syntax EscapeSequenceCharPart           is CharPart = "\\" Char;
  
  token Digits = ['0'..'9']+;

  [SpanClass(Number)]
  syntax Number                           = Digits s;
  syntax Identifier                       = !Keyword "@"? as At IdentifierBody s;
  
  syntax QualifiedIdentifierPartTypeArguments;

  syntax QualifiedIdentifierPartTypeArgumentList  is QualifiedIdentifierPartTypeArguments = "<"s TypeArguments ">"s;
  syntax QualifiedIdentifierPartOpenTypeArguments is QualifiedIdentifierPartTypeArguments = "<"s RankSeparator* ">"s;

  syntax QualifiedIdentifierPart = Identifier QualifiedIdentifierPartTypeArguments?;
  // TODO: In C# spec. it's "namespace-or-type-name". Rename it!
  syntax QualifiedAlias = Identifier as Alias "::"s;
  syntax QualifiedIdentifier     = QualifiedAlias? (QualifiedIdentifierPart; "."s)+;

  syntax NamespaceName = (Identifier; "."s)+;
  
  // same as 'QualifiedIdentifierPart' but avoids capturing type arguments of method name
  syntax TypeMemberIdentifierPart  = Identifier (QualifiedIdentifierPartTypeArguments !"(")?;
  syntax TypeMemberIdentifier      = QualifiedAlias? (TypeMemberIdentifierPart; "."s)+;

 
  /////////////////////////////////////////////////////////
  // 

  syntax UsingDirective;

  syntax UsingAliasDirective     is UsingDirective = "using"SM Name sm "=" sm QualifiedName ";" nl;
  syntax UsingNamespaceDirective is UsingDirective = "using"SM QualifiedName ";" nl;

  syntax NamespaceMemberDeclaration;

  syntax NamespaceDeclaration     is NamespaceMemberDeclaration = "namespace"SM NamespaceName nl "{" inl UsingDirective* NamespaceMemberDeclaration* d "}"s ";"? nl;
  syntax NamespaceTypeDeclaration is NamespaceMemberDeclaration = TypeDeclaration;

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeDeclaration

  syntax TypeBase = ":"s (AnyType; ","sm)+;
  syntax Partial = "partial"SM;

  syntax TypeDeclaration;

  // TODO: Make separate modifier lists for each kind of type declaration.

  syntax ClassDeclaration is TypeDeclaration      = Attributes Modifiers Partial? "class"SM     Name TypeParameterList? TypeBase? inl
                                                      TypeParameterConstraintsClauses d
                                                    "{" inl TypeMemberDeclaration* d "}"s ";"? nl;

  syntax StructDeclaration is TypeDeclaration     = Attributes Modifiers Partial? "struct"SM    Name TypeParameterList? TypeBase? inl
                                                      TypeParameterConstraintsClauses d
                                                    "{" inl TypeMemberDeclaration* d "}"s ";"? nl;

  syntax InterfaceDeclaration is TypeDeclaration  = Attributes Modifiers          "interface"SM Name TypeParameterList? TypeBase? inl
                                                      TypeParameterConstraintsClauses d
                                                    "{" inl TypeMemberDeclaration* d "}"s ";"? nl;

  syntax EnumDeclaration is TypeDeclaration       = Attributes Modifiers          "enum"SM     Name                     EnumBase? nl 
                                                    "{" inl EnumMemberDeclarations d "}"s ";"? nl;
  syntax EnumBase               = sm ":" sm AnyType;
  syntax EnumMemberDeclaration  = Attributes Name (sm "=" sm ConstantExpression)?;
  syntax EnumMemberDeclarations = (EnumMemberDeclaration; ","nl)* Comma nl;
  
  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeMemberDeclarations

  syntax TypeMemberDeclaration;
  
  syntax NestedTypeDeclaration      is TypeMemberDeclaration = TypeDeclaration;
  syntax MethodDeclaration          is TypeMemberDeclaration = MethodHeader Body;
  syntax PropertyDeclaration        is TypeMemberDeclaration = Attributes Modifiers AnyType sm TypeMemberIdentifier nl "{" inl AccessorDeclarations d "}" nl; 
  syntax FieldDeclaration           is TypeMemberDeclaration = Attributes Modifiers AnyType sm VariableDeclarators  ";" nl;
  syntax ConstantDeclaration        is TypeMemberDeclaration = "const"SM AnyType sm ConstantDeclarators ";" nl;
  //syntax ConstructorDeclaration     is TypeMemberDeclaration = ;
  //syntax EventDeclaration           is TypeMemberDeclaration = ;
  //syntax OperatorDeclaration        is TypeMemberDeclaration = ;
  //syntax IndexerDeclaration         is TypeMemberDeclaration = ;
  //syntax DestructorDeclaration      is TypeMemberDeclaration = ;
  //syntax FixedSizeBufferDeclaration is TypeMemberDeclaration = ;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Members

  syntax Body;
  syntax BlockBody is Body = nl "{" inl Statement* d "}"s ";"? nl;
  syntax EmptyBody is Body = ";" nl;

  syntax MethodHeader = Attributes Modifiers AnyType sm TypeMemberIdentifier TypeParameterList? "("s FormalParameterList? ")"s TypeParameterConstraintsClauses?;

  syntax GetAccessorDeclaration = Attributes Modifiers "get"S Body;
  syntax SetAccessorDeclaration = Attributes Modifiers "set"S Body;
  syntax AccessorDeclarations;
  syntax GetSet is AccessorDeclarations = GetAccessorDeclaration SetAccessorDeclaration?;
  syntax SetGet is AccessorDeclarations = SetAccessorDeclaration GetAccessorDeclaration?;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // FormalParameters

  token ParameterModifier = "ref" | "out" | "this" | "params";
  syntax DefaultArgument         = "="s Expression;
  syntax FormalParameter         = Attributes (ParameterModifier SM)? AnyType sm Name DefaultArgument?;
  syntax FormalParameterList     = (FormalParameter; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////////////////////////////////////////
  // Modifiers

  syntax Modifiers = Modifier*;

  syntax Modifier;

  syntax New       is Modifier = "new"SM;
  syntax Public    is Modifier = "public"SM;
  syntax Protected is Modifier = "protected"SM;
  syntax Internal  is Modifier = "internal"SM;
  syntax Private   is Modifier = "private"SM;
  syntax Virtual   is Modifier = "virtual"SM;
  syntax Volatile  is Modifier = "volatile"SM;
  syntax Static    is Modifier = "static"SM;
  syntax Readonly  is Modifier = "readonly"SM;
  syntax Sealed    is Modifier = "sealed"SM;
  syntax Override  is Modifier = "override"SM;
  syntax Abstract  is Modifier = "abstract"SM;
  syntax Extern    is Modifier = "extern"SM;
  syntax Unsafe    is Modifier = "unsafe"SM;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Attributes

  syntax AttributeArguments = "("s ArgumentList ")"s;
  syntax Attribute          = QualifiedName AttributeArguments?;
  syntax AttributeList      = (Attribute; ","sm)* Comma;

  token GlobalAttributeTarget = "assembly" | "module";
  syntax GlobalAttributeTargetSpecifier = GlobalAttributeTarget ":"s;
  syntax GlobalAttributeSection         = "["s GlobalAttributeTargetSpecifier AttributeList "]"nl;

  token AttributeTarget = "field" | "event" | "method" | "param" | "property" | "return" | "type";

  syntax AttributeTargetSpecifier = AttributeTarget ":"s;
  syntax AttributeSection         = "["s AttributeTargetSpecifier? AttributeList "]"nl;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Arguments

  token ArgumentModfier = "ref" | "out";
  syntax ArgumentName    = Name ":" !":" s; // avoid conflict with alias
  syntax Argument        = ArgumentName? (ArgumentModfier SM)? as Modfier Expression;
  syntax ArgumentList    = (Argument; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // TypeParameters

  token InOrOut  = "in" | "out";
  syntax VarianceAnnotation  = InOrOut as Annotation SM;
  syntax TypeParameter       = Attributes VarianceAnnotation? Name;
  syntax TypeParameterList   = "<"s (TypeParameter; ","sm)+ ">"s;

  syntax TypeParameterConstraint;

  syntax TypeParameterConstraint_ctor   is TypeParameterConstraint = "new"S "("s ")"s;
  syntax TypeParameterConstraint_class  is TypeParameterConstraint = "class"S;
  syntax TypeParameterConstraint_struct is TypeParameterConstraint = "struct"S;
  syntax TypeParameterConstraint_base   is TypeParameterConstraint = AnyType;
  
  syntax TypeParameterConstraints        = (TypeParameterConstraint; ","sm)+;
  syntax TypeParameterConstraintsClause  =  "where"SM Name ":"sm TypeParameterConstraints nl;
  syntax TypeParameterConstraintsClauses = TypeParameterConstraintsClause*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Types

  token EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
  token IntegralType      = EnumBaseType | "char";
  token FloatingPointType = "float" | "double";
  token NumericType       = IntegralType | FloatingPointType | "decimal";
  token PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

  syntax TypeName;
  
  syntax PredefinedTypeName is TypeName = PredefinedType S;
  syntax QualifiedTypeName  is TypeName = QualifiedName;

  syntax TypeSpecifier;
  syntax RankSpecifier    is TypeSpecifier = "["s RankSeparator* "]"s;
  syntax PointerSpecifier is TypeSpecifier = "*"s;

  syntax RankSeparator               = "," s;
  syntax NullableSpecifier           = "?" !"?" s; // dont't collide with `??' operator

  syntax AnyNonArrayType             = TypeName NullableSpecifier?;
  syntax AnyNonArrayTypeNullableHack = TypeName (NullableSpecifier !(Expression ":"s Expression))? as NullableSpecifier; // don't collide with ternary op ? :
  syntax AnyType                     = AnyNonArrayType TypeSpecifier*;
  syntax AnyTypeNullableHack         = AnyNonArrayTypeNullableHack TypeSpecifier*;
  syntax TypeArgument                = AnyType;
  syntax TypeArguments               = (TypeArgument; ","sm)* Comma;

  syntax MayBeGenericArgumentList    = "<"s TypeArguments ">"s &GenericArgumentListFollow;

  token GenericArgumentListFollow    = '(' | ')' | ']' | '}' | ':' | ';' | ',' | '.' | '?' | "==" | "!=";

  syntax AnyTypeWithSpecifier;
  syntax AnyTypeWithSpecifier_1 is AnyTypeWithSpecifier = AnyNonArrayType TypeSpecifier+;
  syntax AnyTypeWithSpecifier_2 is AnyTypeWithSpecifier = TypeName NullableSpecifier;      

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Variables

  syntax VariableDeclarators = (VariableDeclarator; ","sm)+;
  syntax VariableDeclarator  = Name (sm "=" sm VariableInitializer)?;

  syntax VariableInitializer;

  syntax ArrayInitializer       is VariableInitializer = "{"sm (VariableInitializer; ","sm)* sm Comma "}"s;
  syntax ExpressionInitializer  is VariableInitializer = Expression;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  // Constants

  syntax ConstantDeclarator  = Name sm "=" sm ConstantExpression;
  syntax ConstantDeclarators = (ConstantDeclarator; ","sm)*;

  //
  ////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  //  Statements

  syntax Statement;
  
  syntax EmptyStatement is Statement = ";" nl;

  //
  ////////////////////////////////////////////////////////////////////////////////////
 
  ////////////////////////////////////////////////////////////////////////////////////
  // Expressions

  syntax Expression;

  syntax IntLiteral is Expression = Digits+;
  
  syntax RefExpression is Expression = QualifiedName;

  syntax ConstantExpression = Expression;

  //syntax StackallocInitializer   is VariableInitializer = "stackalloc"SM AnyType "["s Expression "]"s;

  //
  ////////////////////////////////////////////////////////////////////////////////////
}