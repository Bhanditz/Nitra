//using N2;

syntax module CSharp
{
  token field OpenBrace           = "(";
  token field CloseBrace          = ")";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field OpenSquareBrace     = "[";
  token field CloseSquareBrace    = "]";
  token field SingleQuote         = "\'";
  token field Quote               = "\"";
  token field Semicolon           = ";";
  token field Comma               = ",";
  token field Colon               = ":";
  token field Assign              = "=";
  token field Prefix              = "\\u";
  token field DodDot              = "..";
  token field Op                  = "+", "-", "*", "/", "?", "^", "%", "&", "!";
  token field Backslash           = "\\";

  span class Char;
  span class String;
  span class Number;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "(", ")";
  braces "{", "}";
  braces "[", "]";

  [StartRule]
  syntax CompilationUnit = s /*externAliasDirectives*/ UsingDirective* /*globalAttributes */ NamespaceMemberDeclaration* !Any;

  token KeywordToken
                =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                  | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                  | "event"    | "explicit"   | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                  | "if"       | "implicit"   | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                  | "new"      | "null"       | "object"    | "operator"  | "out"       | "override" | "params" | "private"     | "protected" | "public"
                  | "readonly" | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                  | "struct"   | "switch"     | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                  | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while";

  syntax Keyword = KeywordToken as Name !IdentifierPartCharacters;

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
	token Spaces = Space+;


  void s = Spaces*;                     // optional spacer
  void S = !IdentifierPartCharacters s; // identifier break spacer
  void i = ' '*;                        // increase a indent
  void d = ' '*;                        // decrease a indent
  void nl  = Spaces*;                   // optional spacer and plase for \n while pretty printing
  void inl = Spaces*;                   // i + nl
  void sm  = Spaces*;                   // optional spacer and prefer to print space while pretty printing


  token LetterCharacter           = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я'];//[Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter        = [Mn, Mc];
  token DecimalDigitCharacter     = [Nd];
  token ConnectingCharacter       = [Pc];
  token FormattingCharacter       = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar        = "\"" | "\\";
  token ReservedCharChar          = "\'" | "\\";

  alias Name          = Identifier;
  alias QualifiedName = QualifiedIdentifier;
  alias Char          = Any;

  [SpanClass(String)]
  syntax StringLiteral                    = "\""  StringPart* "\"" s;

  syntax StringPart;

  syntax UnicodeEscapeSequenceStringPart  is StringPart = "\\u" HexDigit HexDigit HexDigit HexDigit;
  syntax EscapeSequenceStringPart         is StringPart = "\\"  Char;
  syntax SimpleStringPart                 is StringPart = Chars { alias Chars = (!ReservedStringChar Any)+; }

  [SpanClass(Char)]
  syntax CharLiteral                      = "\'"  CharPart "\'" s;
  
  syntax CharPart;

  syntax SimpleCharPart                   is CharPart = !ReservedCharChar Char;
  syntax UnicodeEscapeSequenceCharPart    is CharPart = "\\u" HexDigit HexDigit HexDigit HexDigit;
  syntax EscapeSequenceCharPart           is CharPart = "\\" Char;
  
  token Digits = ['0'..'9']+;

  [SpanClass(Number)]
  syntax Number                           = Digits s;
  syntax Identifier                       = !Keyword IdentifierBody s;
  syntax QualifiedIdentifier              = Names             { alias Names = (Identifier; "."s)+; }
  
 
  /////////////////////////////////////////////////////////

  syntax UsingDirective;

  syntax UsingAliasDirective     is UsingDirective = "using"S Name sm "=" sm QualifiedName ";" nl;
  syntax UsingNamespaceDirective is UsingDirective = "using"S QualifiedName ";" nl;

  syntax NamespaceMemberDeclaration;

  syntax NamespaceDeclaration     is NamespaceMemberDeclaration = "namespace"S QualifiedName nl "{" inl UsingDirective* NamespaceMemberDeclaration* d "}"s ";"? nl;
  syntax NamespaceTypeDeclaration is NamespaceMemberDeclaration = TypeDeclaration;

  syntax TypeDeclaration;

  syntax ClassDeclaration is TypeDeclaration = /*attributes? modifiers?*/ "class" S Name /*typeParameterList? typeBase? typeParameterConstraintsClauses?*/ 
                                               nl "{" inl TypeDeclaration* d "}"s ";"? nl;

  //syntax AttributeArguments = "("s ArgumentList? ")"s;
  //syntax Attribute          = QualifiedIdentifier AttributeArguments?;
  //syntax AttributeList      = Attribute (","s Attribute)*;

  //syntax GlobalAttributeTarget          = ("assembly" / "module")S;
  //syntax GlobalAttributeTargetSpecifier = GlobalAttributeTarget ":"s;
  //syntax GlobalAttributeSection         = "["s GlobalAttributeTargetSpecifier AttributeList (","s)? "]"s;
  //syntax GlobalAttributes               = GlobalAttributeSection*;

  //syntax AttributeTarget          = ("field" / "event" / "method" / "param" / "property" / "return" / "type")S;
  //syntax AttributeTargetSpecifier = AttributeTarget ":"s;
  //syntax AttributeSection         = "["s AttributeTargetSpecifier? AttributeList (","s)? "]"s;
  //syntax Attributes               = AttributeSection+;

}