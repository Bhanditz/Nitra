namespace N2.Tests
{
  syntax module JsonParser
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using CStyleComments;

    braces "(", ")";
    braces "{", "}";
    braces "[", "]";

    [StartRule, ExplicitSpaces]
    syntax Start = s Value !Any;

    ///////////////////////////////////////////////////////////////////////////
    // Whitespaces

    extend syntax IgnoreToken
    {
      | [SpanClass(Comment)] SingleLineComment;
      | [SpanClass(Comment)] MultiLineComment;
    }

    ///////////////////////////////////////////////////////////////////////////
    // Identifier

    // Non ambiguous
    [ExplicitSpaces] syntax Identifier = !Keyword IdentifierBody
    {
      token KeywordToken = "true" | "false" | "null";
      [ExplicitSpaces] syntax Keyword = KeywordToken !IdentifierPartCharacters;
    }

    // Non ambiguous (Keyword vs. Identifier)
    //[ExplicitSpaces] syntax Identifier = IdentifierBody;


    ///////////////////////////////////////////////////////////////////////////
    // Strings

    token EscChar                   = '\\' | '/' | 'b' | 'f' | 'n' | 'r'| 't' | 'u' HexDigit HexDigit HexDigit HexDigit
    {
      token HexDigit                  = ['0'..'9', 'a'..'f', 'A'..'F'];
    }

    [SpanClass(String), ExplicitSpaces]
    syntax StringLiteral1 = "\"" StringPart* "\""
    {
      [ExplicitSpaces] syntax StringPart
      {
        token Esc1                      = '\\' EscChar1
        {
          token EscChar1                  = '\"' | EscChar;
        }

        | EscStringPart   = Esc1;
        | OtherStringPart = Chars=(!ReservedStringChar1 Any)+
          {
            token ReservedStringChar1       = '\"' | '\\';
          }
      }
    }

    [SpanClass(String), ExplicitSpaces]
    syntax StringLiteral2 = "\'" StringPart* "\'"
    {
      token ReservedStringChar2       = '\'' | '\\';
      token EscChar2                  = '\'' | EscChar;
      token Esc2                      = '\\' EscChar2;

      [ExplicitSpaces] syntax StringPart
      {
        | EscStringPart   = Esc2;
        | OtherStringPart = Chars=(!ReservedStringChar2 Any)+;
      }
    }

    ///////////////////////////////////////////////////////////////////////////
    // Numbers

    token Digits   = ['0'..'9']+;
    token Integer  = '0' | ['1'..'9'] ['0'..'9']*;
    token Exponent = ("E" | "e") ("-" | "+")? Digits;

    [ExplicitSpaces]
    syntax Fraction = "." Digits ;

    [ExplicitSpaces]
    [SpanClass(Number)]
    syntax Number = Minus="-"? Integer Fraction? Exponent?;

    ///////////////////////////////////////////////////////////////////////////
    // Value

    syntax Value
    {
      | Identifier
      | StringLiteral1
      | StringLiteral2
      | Number
      //| [ExplicitSpaces] Number = Integer Fraction? Exponent? s;
      //| [ExplicitSpaces] NumberNeg = Minus="-" Integer Fraction? Exponent? s;
      | Object = "{" outline_impl inl Properties=(Property; "," nl)* nl d outline_end "}";
      | Array  = "[" outline_begin (Value; "," sm)* outline_end "]";
      | "true"
      | "false"
      | "null"
    }

    syntax Property
    {
      | StringLiteral1 ":" sm Value;
      | StringLiteral2 ":" sm Value;
      | Identifier     ":" sm Value;
    }
  }
}
