using Nitra;
using Nitra.Tests;

using System.Console;

namespace Sample.Json
{
  module Program
  {
    Main() : void
    {
      def source = SourceSnapshot(text);
      def parseResult = JsonParser.Start.Parse(source);
      if (parseResult.IsSuccess)
      {
        def ast = JsonParserParseTree.Start.CreateParseTree(parseResult);
        WriteLine($"Pretty print: $ast");
        WriteLine();
      }
      else
      {
        foreach(error in parseResult.GetErrors())
        {
          def (line, col) = error.Location.StartLineColumn;
          WriteLine($<#$line:$col: $(error.Message)#>);
        }
      }

      _ = ReadLine();
    }
    text =
@"{
      'glossary': {
          'title': 'example glossary',
      'GlossDiv': {
              'title': 'S',
        'GlossList': {
                  'GlossEntry': {
                      'ID': 'SGML',
            'SortAs': 'SGML',
            'GlossTerm': 'Standard Generalized Markup Language',
            'Acronym': 'SGML',
            'Abbrev': 'ISO 8879:1986',
            'GlossDef': {
                          'para': 'A meta-markup language, used to create markup languages such as DocBook.',
              'GlossSeeAlso': ['GML', 'XML']
                      },
            'GlossSee': 'markup'
                  }
              }
          }
      }
}  ";
  }
}
