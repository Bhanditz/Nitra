namespace Kotlin
{
  syntax module ClassMembers
  {
    using Nitra.Core;
    using Kotlin.Annotations;
    using Kotlin.Expressions;
    using Kotlin.Classes;
    using Kotlin.Modifiers;
    using Kotlin.Types;

    syntax MemberDeclaration
    {
      | CompanionObject = Modifiers "companion" "object"
      | Object
      | Function
      | Property
      | Class
      | TypeAlias
      | AnonymousInitializer = "init" Block
      | SecondaryConstructor
    }
    syntax ValueParameters = "(" (FunctionParameter; ",")* ")";
    syntax FunctionParameter = Modifiers Kind Parameter ("=" Expression)?
    {
      syntax Kind//TODO: better name
      {
        | Val  = "val"
        | Var  = "var"
        | None = ""
      }
    }
    syntax Block = "{" Statements "}";
    syntax Function = Modifiers "fun" TypeParameters? Kind SimpleName TypeParameters? ValueParameters (":" Type)? TypeConstraints FunctionBody?
    {
      syntax Kind//TODO: rename
      {
        | Type = Type "."
        | Annotations
        | None = ""
      }
    }
    syntax FunctionBody
    {
      | Block
      | Assignment = "=" Expression
    }
    syntax VariableDeclarationEntry = SimpleName (":" Type)?;
    syntax MultipleVariableDeclarations = "(" (VariableDeclarationEntry; ",")+ ")";
    syntax Property = Modifiers Kind//TODO:!!!!!!
          //typeParameters? (type "." | annotations)?
          //(multipleVariableDeclarations | variableDeclarationEntry)
          TypeConstraints
          //("by" | "=" expression SEMI?)?
          AccessorDeclarations SEMI?
    {
      syntax Kind//TODO: better name
      {
        | Val  = "val"
        | Var  = "var"
      }
      syntax AccessorDeclarations
      {
        | GetSet = Getter Setter?
        | SetGet = Setter Getter?
        | None   = ""
      }
      syntax Getter
      {
        | Empty    = Modifiers "get"
        | WithBody = Modifiers "get" "(" ")" (":" Type)? FunctionBody
      }
      syntax Setter
      {
        | Empty    = Modifiers "set"
        | WithBody = Modifiers "set" "(" Modifiers Value ")" FunctionBody
          {
            syntax Value
            {
              | SimpleName
              | Parameter
            }
          }
      }
    }

    syntax Parameter = SimpleName ":" Type;
    syntax Object = "object" SimpleName PrimaryConstructor? (":" (DelegationSpecifier; ",")+)? ClassBody?;
    syntax SecondaryConstructor = Modifiers "constructor" ValueParameters (":" ConstructorDelegationCall)? Block;
    syntax ConstructorDelegationCall
    {
      | This  = "this" ValueArguments
      | Super = "super" ValueArguments
    }
  }
}