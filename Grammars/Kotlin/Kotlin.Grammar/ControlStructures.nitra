namespace Kotlin
{
  syntax module ControlStructures
  {
    using Nitra.Core;

    using Kotlin.Annotations;
    using Kotlin.ClassMembers;
    using Kotlin.Expressions;
    using Kotlin.Types;

    extend syntax Expression
    {
      | If = "if" "(" Expression ")" Expression SEMI? ("else" Expression)?

      | Try = "try" Block CatchBlock* FinallyBlock?
        {
          syntax CatchBlock   = "catch" "(" Annotations SimpleName ":" UserType ")" Block;
          syntax FinallyBlock = "finally" Block;
        }

      | For = "for" "(" Annotations Declaratioans "in" Expression ")" Expression
        {
          syntax Declaratioans
          {
            | MultipleVariableDeclarations
            | VariableDeclarationEntry
          }
        }

      | While   = "while" "(" Expression ")" Expression
      | DoWhile = "do" Expression "while" "(" Expression ")"

      | When = "when" ("(" Expression ")")? "{" Entry* "}"
        {
          syntax Entry
          {
            | (Condition; ",")+ "->" Expression SEMI
            | "else"            "->" Expression SEMI
          }
          syntax Condition
          {
            | Expression
            | In    = "in"  Expression
            | NotIn = "!in" Expression
            | Is    = "is"  IsRHS
            | NotIs = "!is" IsRHS
          }
        }

      //Jump
      |                  Throw    = "throw" Expression
      | [ExplicitSpaces] Return   = "return" LabelReference? Expression?
      | [ExplicitSpaces] Continue = "continue" LabelReference?
      | [ExplicitSpaces] Break    = "break" LabelReference?
    }
  }
}