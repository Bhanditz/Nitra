namespace Kotlin
{
  syntax module Classes
  {
    using Nitra.Core;
    using Kotlin.Annotations;
    using Kotlin.Expressions;
    using Kotlin.EnumClasses;
    using Kotlin.ClassMembers;
    using Kotlin.Modifiers;
    using Kotlin.Types;

    syntax Class = Modifiers ClassOrInterface SimpleName//TODO:порезать на части
          TypeParameters?
          PrimaryConstructor?
          (":" Annotations (DelegationSpecifier; ",")+)?
          TypeConstraints
          Body
    {
      syntax ClassOrInterface
      {
        | Class = "class"
        | Interface = "interface"
      }
      syntax Body
      {
        | ClassBody
        | EnumClassBody = "{" (EnumEntry; ",";?)* (";" Members)? "}"
          {
            syntax EnumEntry = Modifiers SimpleName EntryInitializer? ClassBody?
            {
              syntax EntryInitializer
              {
                | Initializer = ":" Annotations ConstructorInvocation;
                | Arguments = "(" ValueArguments ")"
              }
            }
          }
        | Empty = ""
      }
    }
    syntax PrimaryConstructor = (Modifiers "constructor")? ("(" (FunctionParameter; ",")+ ")") ;
    syntax ClassBody = "{" Members "}";
    syntax Members = MemberDeclaration*;
    syntax DelegationSpecifier
    {
      | ConstructorInvocation 
      | UserType
      | ExplicitDelegation
    }
    syntax ExplicitDelegation = UserType "by" Expression;
    syntax TypeParameters = "<" (TypeParameter; ",")+ ">"
    {
      syntax TypeParameter = Modifiers SimpleName (":" UserType)?;
    }

    syntax TypeConstraints = ("where" (TypeConstraint; ",")+)?
    {
      syntax TypeConstraint = Annotations SimpleName ":" Type;
    }
  }
}