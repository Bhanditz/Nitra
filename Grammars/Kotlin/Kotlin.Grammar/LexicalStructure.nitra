namespace Kotlin
{
  syntax module LexicalStructure
  {
    using Nitra.Core;

    regex Digit = ['0'..'9'];
    regex IntegerLiteral = Digit+;
    regex FloatLiteral = Digit+ ("." Digit+)?;//TODO: <Java double literal>;
    regex HexDigit = Digit | ['A'..'F', 'a'..'f'];
    regex HexadecimalLiteral = "0x" HexDigit+;
    regex CharacterLiteral = '\'' 'a' '\'' //TODO: <character as in Java>;

    See Basic types
    NoEscapeString
    (used by literalConstant)
      : <"""-quoted string>;
    
    RegularStringPart
    (used by stringTemplateElement)
      : <any character other than backslash, quote, $ or newline>
    ShortTemplateEntryStart:
      : "$"
    EscapeSequence:
      : UnicodeEscapeSequence | RegularEscapeSequence
    UnicodeEscapeSequence:
      : "\u" HexDigit{4}
    RegularEscapeSequence:
      : "\" <any character other than newline>

    See String templates
    SEMI
    (used by whenEntry, if, statements, packageHeader, property, import)
      : <semicolon or newline>;
    SimpleName
    (used by typeParameter, catchBlock, simpleUserType, atomicExpression, LabelName, package, packageHeader, class, object, functionLiteral, infixFunctionCall, function, parameter, callableReference, FieldName, variableDeclarationEntry, stringTemplateElement, setter, enumEntry, import, valueArguments, unescapedAnnotation, typeConstraint)
      : <java identifier>
      : "`" <java identifier> "`"
      ;

    See Java interoperability
    FieldName
    (used by atomicExpression)
      : "$" SimpleName;
    LabelName
    (used by labelReference, labelDefinition)
      : "@" SimpleName;
  }
}
