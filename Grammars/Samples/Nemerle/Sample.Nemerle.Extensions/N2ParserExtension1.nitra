using Nemerle;

syntax module N2ParserExtension1
{
  using N2Parser;
  using PrettyPrint;
  using Whitespaces;
  using ModifierParser;

  extend syntax NamespaceMember
  {
    | TypeAliasDeclaration = "type" sm Identifier sm "=" sm QualifiedIdentifier ";"nl;
  }

  extend syntax Modifier
  {
    | Test = "!test test!" sm;
  }

  extend syntax Expression
  {
    precedence TestPrecedence order Additive < TestPrecedence < Multiplicative:
    | TestOperator1 = Expression sm "^_^" sm Expression
    | TestOperator2 = Expression sm "@_@" sm Expression right-associative
    | TestOperator3 = Expression ^ TestPrecedence sm "%_%" sm Expression ^ TestPrecedence
  }
}
