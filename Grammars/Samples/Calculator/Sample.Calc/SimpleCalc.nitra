using Nitra;
using Nitra.Runtime;
using Nemerle;
using Nemerle.Collections;
using System.Collections.Generic;
using Whitespaces;

syntax module SimpleCalc
{
  using PrettyPrint;
  using TokenNames;
  using StandardSpanClasses;

  [StartRule]
  syntax Start = Expr !Any { [Cached] Value() : double = Expr.Value(); }

  regex Digits = ['0'..'9']+;
  regex Id     = ['a' .. 'z', 'A' .. 'Z']+;

  [StartRule]
  syntax Expr
  {
    Value() : double;
    missing Value = double.NaN;

    | [SpanClass(Number)]
      Num        = Digits              { override Value = double.Parse(GetText(this.Digits)); }
    | Call       = Id '(' Id Id ')'    { override Value = 42.0; }
    | Rounds     = '(' Expr ')'        { override Value = Expr.Value(); }

    precedence Additive:
    | Add        = Expr sm '+' sm Expr { override Value = Expr1.Value() + Expr2.Value(); }
    | Sub        = Expr sm '-' sm Expr { override Value = Expr1.Value() - Expr2.Value(); }

    precedence Multiplicative:
    | Mul        = Expr sm '*' sm Expr { override Value = Expr1.Value() * Expr2.Value(); }
    | Div        = Expr sm '/' sm Expr { override Value = Expr1.Value() / Expr2.Value(); }
    | Mod        = Expr sm '%' sm Expr { override Value = Expr1.Value() % Expr2.Value(); }

    precedence Power:
    | Pow        = Expr sm '^' sm Expr right-associative
                                       { override Value = System.Math.Pow(Expr1.Value(), Expr2.Value()); }

    precedence Unary:
    | Neg        = '-' Expr            { override Value = -Expr.Value(); }
  }
}
