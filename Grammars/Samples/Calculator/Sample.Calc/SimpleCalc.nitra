using Nitra;
using Nitra.Runtime;
using Nemerle;
using Nemerle.Collections;
using System.Collections.Generic;
using Whitespaces;

syntax module SimpleCalc
{
  using Outline;
  using PrettyPrint;
  using StandardSpanClasses;
  using CStyleComments;
  using TokenNames;

  [StartRule]
  syntax Start = Expr !Any { [Cached] Value() : double = Expr.Value(); }

  alias Expression  = Expr;
  alias Name        = Identifier;

  regex Digit = ['0'..'9'];
  regex Digits = Digit+;
  regex LetterCharacter = ['a' .. 'z', 'A' .. 'Z']+;
 
   regex KeywordToken
                =   "abstract" | "as"         | "base"      | "bool"      | "break"     | "byte"     | "case"   | "catch"       | "char"      | "checked"
                  | "class"    | "const"      | "continue"  | "decimal"   | "default"   | "delegate" | "do"     | "double"      | "else"      | "enum"
                  | "event"    | "explicit"   | "extern"    | "false"     | "finally"   | "fixed"    | "float"  | "for"         | "foreach"   | "goto"
                  | "if"       | "implicit"   | "in"        | "int"       | "interface" | "internal" | "is"     | "lock"        | "long"      | "namespace"
                  | "new"      | "null"       | "object"    | "operator"  | "out"       | "override" | "params" | "private"     | "protected" | "public"
                  | "readonly" | "ref"        | "return"    | "sbyte"     | "sealed"    | "short"    | "sizeof" | "stackalloc"  | "static"    | "string"
                  | "struct"   | "switch"     | "this"      | "throw"     | "true"      | "try"      | "typeof" | "uint"        | "ulong"     | "unchecked"
                  | "unsafe"   | "ushort"     | "using"     | "virtual"   | "void"      | "volatile" | "while"
                  | "__arglist";

  [Keyword]
  token Keyword = Name=KeywordToken !IdentifierPartCharacters;

  regex IdentifierStartCharacter  = LetterCharacter | "_";
  regex IdentifierPartCharacters  = LetterCharacter | Digit;
  regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

  [ExplicitSpaces]
  syntax QualifiedIdentifierPartTypeArguments
  {
    | QualifiedIdentifierPartTypeArgumentList  = s "<" s TypeArguments ">" s;
    | QualifiedIdentifierPartOpenTypeArguments = s "<" s RankSeparator* ">" s;
  }

  [ExplicitSpaces]
  syntax QualifiedIdentifierPart = Identifier QualifiedIdentifierPartTypeArguments?;
  syntax QualifiedAlias = Alias = Identifier "::";
  [Identifier]
  token Identifier = !Keyword At="@"? IdentifierBody;
  [ExplicitSpaces]
  syntax QualifiedIdentifier  = QualifiedAlias? (QualifiedIdentifierPart; s "." s)+; // TODO: In C# spec. it's "namespace-or-type-name". Rename it!

  ////////////////////////////////////////////////////////////////////////////////////
  // Types

  regex EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
  regex IntegralType      = EnumBaseType | "char";
  regex FloatingPointType = "float" | "double";
  regex NumericType       = IntegralType | FloatingPointType | "decimal";
  regex PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

  syntax TypeName
  {
    | PredefinedType
    | QualifiedName = !PredefinedType QualifiedIdentifier
  }

  regex Pointer = "*";
  syntax PointerSpecifiers = Pointer*;

  syntax RankSeparator = ",";
  syntax RankSpecifier = "[" RankSeparator* "]";

  syntax TypeSpecifier
  {
    | RankSpecifier;
    | PointerSpecifier = Pointer;
  }

  [ExplicitSpaces] syntax NullableSpecifier = "?" !"?"; // dont't collide with `??' operator

  syntax AnyNonArrayType             = TypeName NullableSpecifier?;
  syntax AnyNonArrayTypeNullableHack = TypeName NullableSpecifier = (NullableSpecifier !(Expression ":" Expression))?; // don't collide with ternary op ? : // BUG:
  syntax AnyType                     = AnyNonArrayType TypeSpecifier*;
  syntax AnyTypeNullableHack         = AnyNonArrayTypeNullableHack TypeSpecifier*;
  syntax TypeArgument                = AnyType;
  syntax TypeArguments               = (TypeArgument; ","sm)+;

  syntax MayBeGenericArgumentList    = "<" TypeArguments ">" &GenericArgumentListFollow;

  regex GenericArgumentListFollow    = '(' | ')' | ']' | '}' | ':' | ';' | ',' | '.' | '?' | "==" | "!=";

  syntax AnyTypeWithSpecifier
  {
    | Common   = AnyNonArrayType TypeSpecifier+;
    | Nullable = TypeName NullableSpecifier;
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////


  regex ParameterModifier = "ref" | "out" | "this" | "params";
  syntax DefaultArgument  = "=" Expr;
  syntax FormalParameter  = (ParameterModifier sm)? AnyType sm Name DefaultArgument?; // TODO: Add "__arglist"
  syntax FormalParameters = (FormalParameter; ","sm)*;


  [StartRule]
  syntax Expr
  {
    Value() : double;
    missing Value = double.NaN;

    | [SpanClass(Number)]
      Num        = Digits                             { override Value = double.Parse(GetText(this.Digits)); }
    | Neg        = '-' Expr            precedence 100 { override Value = -Expr.Value(); }
    | Add        = Expr sm '+' sm Expr precedence 10  { override Value = Expr1.Value() + Expr2.Value(); }
    | Sub        = Expr sm '-' sm Expr precedence 10  { override Value = Expr1.Value() - Expr2.Value(); }
    | Ref        = Identifier                                 { override Value = 42.0; }
    | Call       = Identifier '(' FormalParameters ')'            { override Value = 42.0; }
    //| Rounds     = '(' FormalParameters ')'                       { override Value = Expr.Value(); }
    //| Mul        = Expr sm '*' sm Expr precedence 20  { override Value = Expr1.Value() * Expr2.Value(); }
    //| Div        = Expr sm '/' sm Expr precedence 20  { override Value = Expr1.Value() / Expr2.Value(); }
    //| Mod        = Expr sm '%' sm Expr precedence 20  { override Value = Expr1.Value() % Expr2.Value(); }
    //| Pow        = Expr sm '^' sm Expr precedence 30 right-associative
    //                                                  { override Value = System.Math.Pow(Expr1.Value(), Expr2.Value()); }
  }
}
