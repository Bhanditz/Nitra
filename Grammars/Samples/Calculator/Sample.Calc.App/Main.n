using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using N2;

module Program
{
  parserHost : ParserHost = ParserHost();

  Main () : void
  {
    def eval(text : string) : void
    {
      def source = SourceSnapshot(text);
      def parseResult = parserHost.DoParsing(source, CalcGrammar.GrammarImpl.startRuleDescriptor);
      if (parseResult.IsSuccess)
      {
        def ast = parseResult.CreateAst.[CalcGrammar.Start.Ast]();
        WriteLine($<#Result: ..$(ast.Value(); ", ")#>);
        WriteLine($"Pretty print: $ast");
        WriteLine("AST dump:");
        WriteLine(ast.GetDump().ToString());
        WriteLine();
      }
      else
      {
        def errors = parseResult.CollectErrors();
        def pos    = source.PositionToLineColumn(errors.Position);
        WriteLine($<#Parse error at ($(pos.ToString())), rules: ..$(errors.Messages; ", ")#>);
      }
    }
    def inputLoop() : void
    {
      Write("input>");
      def text = ReadLine();
      unless (string.IsNullOrEmpty(text))
      {
        eval(text);
        inputLoop()
      }
    }
    inputLoop()
  }
}
