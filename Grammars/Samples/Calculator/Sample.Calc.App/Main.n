using N2.Runtime;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using N2;

module Program
{
  parserHost : ParserHost = ParserHost();

  Main () : void
  {
    def commandPrompt = "input>";
    def eval(text : string) : void
    {
      def error(msg : string, pos : int) : void
      {
        WriteLine(string(' ', pos + commandPrompt.Length) + "^");
        WriteLine(msg);
      }

      def source = SourceSnapshot(text);
      def parseResult = parserHost.DoParsing(source, CalcGrammar.GrammarImpl.startRuleDescriptor);
      {
        try
        {
          if (parseResult.IsSuccess)
          {
            def ast = parseResult.CreateAst.[CalcGrammar.Start]() :> CalcGrammar.Start.Ast;
            WriteLine($<#Result: ..$(ast.Value(); ", ")#>);
            WriteLine($"Pretty print: $ast");
            WriteLine("AST dump:");
            WriteLine(ast.GetDump().ToString());
          }
          else
            error("Parsing fail.", parseResult.LastSuccessPos);

        }
        catch
        {
          | e is AstWalkerException => error(e.Message, e.Pos);
        }
        WriteLine();
      }
    }
    def inputLoop() : void
    {
      Write(commandPrompt);
      def text = ReadLine();
      unless (string.IsNullOrEmpty(text))
      {
        eval(text);
        inputLoop()
      }
    }
    inputLoop()
  }
}
