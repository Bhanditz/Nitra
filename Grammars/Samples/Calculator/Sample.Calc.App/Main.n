using Nitra.Runtime;
using Nitra.ProjectSystem;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nitra;

module Program
{
  Main () : void
  {
    def commandPrompt = "input>";
    def session       = ParseSession(CalcGrammar.start, compilerMessages = ConsoleCompilerMessages());

    def error(msg : string, pos : int) : void
    {
      WriteLine(string(' ', pos + commandPrompt.Length) + "^");
      WriteLine(msg);
    }

    def writeColored(color : ConsoleColor, text : string, pos : int, length : int)
    {
      def originalColor = ForegroundColor;
      ForegroundColor = color;
      Write(text.Substring(pos, length));
      ForegroundColor = originalColor;
    }

    def colorizeText(text : string, spans : Seq[SpanInfo])
    {
      mutable pos = 0;
      foreach (span in spans)
      {
        when (span.SpanClass : object == StandardSpanClasses.SpanClass_Number)
        {
          writeColored(ConsoleColor.Gray, text, pos, span.Span.StartPos - pos);
          writeColored(ConsoleColor.Magenta, text, span.Span.StartPos, span.Span.Length);
          pos = span.Span.EndPos;
        }
        when (span.SpanClass : object == StandardSpanClasses.SpanClass_Operator)
        {
          writeColored(ConsoleColor.Gray, text, pos, span.Span.StartPos - pos);
          writeColored(ConsoleColor.Cyan, text, span.Span.StartPos, span.Span.Length);
          pos = span.Span.EndPos;
        }
      }
      writeColored(ConsoleColor.Gray, text, pos, text.Length - pos);
      WriteLine();
    }

    def eval(text : string, left : int, top : int) : void
    {
      def source      = SourceSnapshot(text);
      def parseResult = session.Parse(source);
      try
      {
        def newLeft = CursorLeft;
        def newTop  = CursorTop;

        // overwrite original input with colored one
        SetCursorPosition(left, top);
        def spans = HashSet();
        def text = source.Text;
        parseResult.GetSpans(0, text.Length, spans);
        colorizeText(text, spans);

        SetCursorPosition(newLeft, newTop);
        // output computed result
        def parseTree = CalcGrammarParseTree.start.CreateParseTree(parseResult);
        WriteLine($<#Result: ..$(parseTree.Value(); ", ")#>);

        // dump parse tree
        mutable prettyPrintSpans;
        def prettyPrintText = parseTree.ToString(PrettyPrintOptions.DebugIndent, out prettyPrintSpans);
        Write("Pretty print: ");
        colorizeText(prettyPrintText, prettyPrintSpans);
      }
      catch
      {
        | e => error(e.Message, 0);
      }
      WriteLine();
    }
    def inputLoop() : void
    {
      Write(commandPrompt);
      def left = CursorLeft;
      def top  = CursorTop;
      def text = ReadLine();
      unless (string.IsNullOrEmpty(text))
      {
        eval(text, left, top);
        inputLoop()
      }
    }
    inputLoop()
  }
}
