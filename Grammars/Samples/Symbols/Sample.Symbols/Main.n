using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using N2;
using N2.Runtime;
using N2.Typing;
using N2.Serialization;

public class StubProject : Project
{
}

[Record, ExportableSymbol]
public abstract class SampleSymbol1 : SingleDefSymbol
{
  public abstract X : string { get; }
  public abstract S : option[Symbol] { get; }
  public override Description : string { get { "SampleSymbol1" } }
  public abstract TestProp : Test { get; }
}

[Record, StructuralEquality]
public class Test : Located
{
  public Prop1 : int    { get; }
  public Prop2 : string { get; }
}

[Record]
public sealed class ParsedSampleSymbol1 : SampleSymbol1
{
  public override X : string { get; }
  public override S : option[Symbol] { get; }
  public override TestProp : Test { get; }
}

[Record, ExportableSymbol]
public abstract class NonTreeSymbol : SingleDefSymbol
{
  public abstract Z : string { get; }
  public override Description : string { get { "NoneTreeSymbol1" } }
}

[Record]
public sealed class ParsedNonTreeSymbol : NonTreeSymbol
{
  public override Z : string { get; }
}

module Program
{
  Main() : void
  {
    def p1 = StubProject();
    p1.Init([]);
    Project.CurrentProject = p1;

    def sym1 = ParsedSampleSymbol1("Sample1", Location.Default, "xxx", None(), Test(Location.Default, 42, "Hi!"));
    def sym2 = ParsedSampleSymbol1("Sample2", Location.Default, "yyy", Some(ParsedNonTreeSymbol("NonTree1", Location.Default, "zzz")), Test(Location.Default, 333, "Wow!"));
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Bar" ], sym1, Location.Default);
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Baz" ], sym2, Location.Default);

    def stream = MemoryStream();
    def writer = ExportableSymbolWriter(stream);
    writer.WriteSymbols();

    def p2 = StubProject();
    p2.Init([]);
    Project.CurrentProject = p2;

    def registry = ExternalSymbolConstructorRegistry.CreateFromAppDomainAssemblies();

    _ = stream.Seek(0L, SeekOrigin.Begin);
    def reader = ExportableSymbolReader(stream, registry, AssemblyIds.NoAssembly, Location.Default);
    reader.CreateSymbols();
    reader.ReadSymbols();

    def node = p2.RootNamespace.Node.AddNode(["Foo", "Bar", "Sample1"]);
    def sym1_loaded = node.Symbol :> SampleSymbol1;
    assert2(sym1.TestProp == sym1_loaded.TestProp);
    def node = p2.RootNamespace.Node.AddNode(["Foo", "Baz", "Sample2"]);
    def sym2_loaded = node.Symbol :> SampleSymbol1;
    assert2(sym2.TestProp == sym2_loaded.TestProp);

    _ = ReadLine();
  }
}