using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using N2;
using N2.Runtime;
using N2.Typing;

public class StubProject : Project
{
}

[Record, ExportableSymbol]
public abstract class SampleSymbol1 : SingleDefSymbol
{
  public abstract FooBar : int { get; }
  public override Description : string { get { "SampleSymbol1" } }
}

[Record]
public sealed class ParsedSampleSymbol1 : SampleSymbol1
{
  public override FooBar : int { get { 1 } }
}

module Program
{
  Main() : void
  {
    def p1 = StubProject();
    p1.Init([]);
    Project.CurrentProject = p1;

    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Bar" ], ParsedSampleSymbol1("Sample1", Location.Default), Location.Default);
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Baz" ], ParsedSampleSymbol1("Sample2", Location.Default), Location.Default);

    def stream = MemoryStream();
    ExportableSymbolWriter.Write(p1.RootNamespace, BinaryWriter(stream));

    def p2 = StubProject();
    p2.Init([]);
    Project.CurrentProject = p2;

    _ = stream.Seek(0L, SeekOrigin.Begin);
    ExportableSymbolReader.Read(p2.RootNamespace, BinaryReader(stream));

    _ = ReadLine();
  }
}