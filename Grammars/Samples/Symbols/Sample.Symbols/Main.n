using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using N2;
using N2.Runtime;
using N2.Typing;
using N2.Serialization;

public class StubProject : Project
{
}

[Record, ExportableSymbol]
public abstract class SampleSymbol1 : SingleDefSymbol
{
  public abstract X : string { get; }
  public abstract S : option[NonTreeSymbol] { get; }
  public override Description : string { get { "SampleSymbol1" } }
}

[Record]
public sealed class ParsedSampleSymbol1 : SampleSymbol1
{
  public override X : string { get; }
  public override S : option[NonTreeSymbol] { get; }
}

[Record, ExportableSymbol]
public abstract class NonTreeSymbol : SingleDefSymbol
{
  public abstract Z : string { get; }
  public override Description : string { get { "NoneTreeSymbol1" } }
}

[Record]
public sealed class ParsedNonTreeSymbol : NonTreeSymbol
{
  public override Z : string { get; }
}

module Program
{
  Main() : void
  {
    def p1 = StubProject();
    p1.Init([]);
    Project.CurrentProject = p1;

    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Bar" ], ParsedSampleSymbol1("Sample1", Location.Default, "xxx", None()), Location.Default);
    _ = p1.RootNamespace.Node.AddAndReport.[SampleSymbol1]([ "Foo", "Baz" ], ParsedSampleSymbol1("Sample2", Location.Default, "yyy", Some(ParsedNonTreeSymbol("NonTree1", Location.Default, "zzz"))), Location.Default);

    def stream = MemoryStream();
    def writer = ExportableSymbolWriter();
    writer.Write(p1.RootNamespace, BinaryWriter(stream));

    def p2 = StubProject();
    p2.Init([]);
    Project.CurrentProject = p2;

    def registry = ExternalSymbolReaderRegistry.CreateFromAppDomainAssemblies();

    _ = stream.Seek(0L, SeekOrigin.Begin);
    def reader = ExportableSymbolReader();
    def binaryReader = BinaryReader(stream);
    reader.CreateSymbols(registry, p2.RootNamespace, AssemblyIds.NoAssembly, binaryReader);
    reader.LoadSymbols(binaryReader);

    _ = ReadLine();
  }
}