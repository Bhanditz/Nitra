syntax module SampleSyntax
{
  using Nitra.Core;
  using Nitra.CStyleComments;

  keyword regex ['a'..'z', '_'..'_']+ rule S;

  regex Keyword = "var";

  token Reference = !Keyword IdentifierBody { map Nitra.Declarations.Reference = Nitra.Declarations.Reference(this); }
  token Name      = !Keyword IdentifierBody { map Nitra.Declarations.Name      = Nitra.Declarations.Name(this); }

  [StartRule]
  syntax TopRule = (VariableDeclaration nl)*;

  syntax VariableDeclaration = "var" sm Name sm "=" sm Expression ";";

  syntax Expression
  {
    | [SpanClass(Number)] Num = Digits
      {
        regex Digits = ['0'..'9']+;
      }

    | Braces = "(" Expression ")";
    | Variable = Reference;

  precedence Sum:
    | Sum = Expression sm Operator="+" sm Expression;
    | Sub = Expression sm Operator="-" sm Expression;

  precedence Mul:
    | Mul = Expression sm Operator="*" sm Expression;
    | Div = Expression sm Operator="/" sm Expression;

  precedence Unary:
    | Plus  = Operator="+" Expression
    | Minus = Operator="-" Expression
  }
}
