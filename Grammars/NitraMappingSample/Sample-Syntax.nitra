using Nitra;
using Nitra.Runtime;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

syntax module Sample
{
  using Core;
  using CStyleComments;

  keyword regex IdentifierBody rule S;

  regex Keyword = "var";

  [Reference]
  token Reference = !Keyword IdentifierBody;

  [Name]
  token Name = !Keyword IdentifierBody;

  [StartRule]
  syntax TopRule = (VariableDeclaration nl)* !Any;

  syntax VariableDeclaration = "var" sm Name sm "=" sm Expression ";";

  syntax Expression
  {
    | [SpanClass(Number)] Num = Digits
      {
        regex Digits = ['0'..'9']+;
      }

    | Braces = "(" Expression ")";
    | Variable = Reference;

  precedence Sum:
    | Sum = Expression sm Op="+" sm Expression;
    | Sub = Expression sm Op="-" sm Expression;

  precedence Mul:
    | Mul = Expression sm Op="*" sm Expression;
    | Div = Expression sm Op="/" sm Expression;

  precedence Unary:
    | Plus  = Op="+" Expression
    | Minus = Op="-" Expression
  }

  extend token IgnoreToken
  {
    | [SpanClass(Comment)] SingleLineComment
    | [SpanClass(Comment)] MultiLineComment
  }
}
