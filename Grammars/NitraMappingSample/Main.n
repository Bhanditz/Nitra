using Nitra;
using Nitra.Runtime;
using Nitra.Runtime.Binding;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

module Program
{
  Main() : void
  {
    def session = ParseSession(Sample.TopRule, compilerMessages = ConsoleCompilerMessages());
    while (true)
    {
      Write("input>");
      def text = ReadLine();
      when (string.IsNullOrEmpty(text))
        break;

      def source    = SourceSnapshot(text);
      def result    = session.Parse(source);
      def parseTree = result.CreateParseTree();

      Write("print>");
      WriteLine(parseTree);
      WriteLine();
    }
  }
}

public partial class Top : AstBase, IProjectSupport
{
  public RefreshProject(files : Seq[File]) : void
  {
    def files   = files.ToArray();
    def context = DependentPropertyEvalContext();
    def scope   = TableScope("Variables");

    foreach (file in files)
      when (file.Ast is ScopedAst as top)
        top.ContainingScope = scope;

    AstUtils.EvalProperties(context, files, "Collect variables", 0);
    AstUtils.EvalProperties(context, files, "Compute variables", 1);
  }
}