using Nitra;
using Nitra.ProjectSystem;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  internal sealed class BuiltInSymbolDeclaration[TSymbol] : Declaration
    where TSymbol : ISymbol2, new()
  {
    public this(name : string)
    {
      this(SourceSnapshot.Default.File, NSpan(), name)
    }

    public this(file : File, span : NSpan, name : string)
    {
      Name = Name(file, span, name);
    }

    public Name                       : Name       { get; }
    public File                       : File       { get { Name.File } }
    public Span                       : NSpan      { get { Name.Span } }
    public IsSymbolEvaluated          : bool       { get { false } }
    public Symbol                     : ISymbol2   { get { null } set { _ = value; } }
    public IsContainingTableEvaluated : bool       { get { false } }
    public ContainingTable            : TableScope { get { null } set { _ = value } }
    public IsAllPropertiesEvaluated   : bool       { get { false } }
    public PropertiesEvalState        : int        { get { 0 } }
    public IsAmbiguous                : bool       { get { false } }
    public IsMissing                  : bool       { get { false } }

    public CreateSymbol() : ISymbol2
    {
      TSymbol()
    }

    public EvalProperties(context : DependentPropertyEvalContext) : void
    {
      _ = context;
    }

    public ResetProperties() : void
    {
    }

    public Accept(visitor : IAstVisitor) : void
    {
      visitor.Visit(Name);
    }

    public ToXaml() : string
    {
      Name.ToXaml()
    }
  }
}
