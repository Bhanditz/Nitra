using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Staging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public sealed class BaseTypeReferenceSet : ICollector
  {
    public this(context : DependentPropertyEvalContext)
    {
      context.NotifyStagedObjectCreated(out CreatedOnStage, out CreatedOnPass);
      _parentTypes  = HashSet();
    }

    private mutable _isEvaluationInProgress : bool;
    private mutable _isCycled               : bool;
    private mutable _ancestorTypes          : HashSet[TypeReference];
    private mutable _parentScope            : Scope;
    private mutable _parentClass            : option[TypeReference];
    private         _parentTypes            : HashSet[TypeReference];

    public CreatedOnStage           : int                   { get; }
    public CreatedOnPass : int                   { get; }
    public IsCycled                 : bool                  { get { TryEvaluateHierarchy(); _isCycled } }
    public AncestorTypes            : Seq[TypeReference]    { get { TryEvaluateHierarchy(); _ancestorTypes } }
    public ParentTypes              : Seq[TypeReference]    { get { _parentTypes } }
    public ParentScope              : Scope                 { get { TryEvaluateHierarchy(); _parentScope } }
    public ParentClass              : option[TypeReference] { get { TryEvaluateHierarchy(); _parentClass } }

    [Collect]
    public AddParent(type : TypeReference) : void
    {
      _ = _parentTypes.Add(type);
    }

    [Collect]
    public AddParent(set : Seq[TypeReference]) : void
    {
      _parentTypes.UnionWith(set);
    }

    public ContainsParent(type : TypeReference) : bool
    {
      _parentTypes.Contains(type)
    }

    public ContainsAncestor(type : TypeReference) : bool
    {
      TryEvaluateHierarchy();
      _ancestorTypes.Contains(type)
    }

    private TryEvaluateHierarchy() : void
    {
      when (_ancestorTypes != null)
        return;

      if (_isEvaluationInProgress)
      {
        _isCycled      = true;
        _ancestorTypes = HashSet();
        _parentClass   = None();
        _parentScope   = EmptyScope.Instance;
      }
      else
      {
        _isEvaluationInProgress = true;

        def ancestorTypes = HashSet(_parentTypes);
        mutable parentClass : option[_];
        mutable parentScope;

        foreach (TypeReference(Ref = IRef(IsSymbolEvaluated = true, Symbol = GenericContainerTypeSymbol as symbol)) as type in _parentTypes)
        {
          def parentTypeSet = symbol.BaseTypeSet;
          ancestorTypes.UnionWith(parentTypeSet.AncestorTypes);

          when (type.IsClass && (parentClass : object) == null)
          {
            parentClass = Some(type);
            parentScope = HidingScope(symbol.MemberScope, parentTypeSet.ParentScope);
          }
        }

        unless (_isCycled)
        {
          _ancestorTypes = ancestorTypes;
          _parentClass   = if (parentClass : object == null) None() else parentClass; // operator '??' unwraps option[T]
          _parentScope   = parentScope ?? EmptyScope.Instance;
        }

        _isEvaluationInProgress = false;
      }
    }

    public override ToString() : string
    {
      $"$CreatedOnStage($CreatedOnPass): ..$_parentTypes"
    }
  }
}
