using Nitra;
using Nitra.Runtime.Binding;
using Nitra.Staging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public sealed class BaseTypeReferenceSet : IStaged
  {
    public this(creationStage : int)
    {
      CreationStage = creationStage;
      _parentTypes  = HashSet();
    }

    private mutable _isEvaluationInProgress : bool;
    private mutable _isCycled               : bool;
    private mutable _ancestorTypes          : HashSet[TypeReference];
    private mutable _ancestorScope          : Scope;
    private         _parentTypes            : HashSet[TypeReference];

    public CreationStage  : int                { get; }
    public IsCycled       : bool               { get { _ = GetAncestorTypes(); _isCycled } }
    public AncestorTypes  : Seq[TypeReference] { get { GetAncestorTypes() } }
    public ParentTypes    : Seq[TypeReference] { get { _parentTypes } }
    public AncestorScope  : Scope              { get { _ = GetAncestorTypes(); _ancestorScope } }

    [StagedInit]
    public AddParent(type : TypeReference) : void
    {
      _ = _parentTypes.Add(type);
    }

    [StagedInit]
    public AddParent(set : Seq[TypeReference]) : void
    {
      _parentTypes.UnionWith(set);
    }

    public ContainsParent(type : TypeReference) : bool
    {
      _parentTypes.Contains(type)
    }

    public ContainsAncestor(type : TypeReference) : bool
    {
      GetAncestorTypes().Contains(type)
    }

    private GetAncestorTypes() : HashSet[TypeReference]
    {
      when (_ancestorTypes != null)
        return _ancestorTypes;

      if (_isEvaluationInProgress)
      {
        _isCycled      = true;
        _ancestorTypes = HashSet();
        _ancestorScope = EmptyScope.Instance;
      }
      else
      {
        _isEvaluationInProgress = true;

        def result = HashSet(_parentTypes);
        foreach (type when type.Ref.IsSymbolEvaluated in _parentTypes)
        {
          when (type.Ref.Symbol is GenericContainerTypeSymbol as symbol)
          {
            def parentTypeSet = symbol.BaseTypeSet;
            result.UnionWith(parentTypeSet.AncestorTypes);
          }
        }

        unless (_isCycled)
        {
          _ancestorTypes = result;
          _ancestorScope = EmptyScope.Instance; //TODO: make scope!
        }

        _isEvaluationInProgress = false;
      }
      _ancestorTypes
    }

    public override ToString() : string
    {
      $"$CreationStage: ..$_parentTypes"
    }
  }
}
