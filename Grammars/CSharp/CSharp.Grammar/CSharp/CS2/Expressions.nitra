namespace CSharp
{
  syntax module Expressions
  {
    using Nitra.Core;

    using CSharp.TokenNames;
    using CSharp.Core;
    using Literals;
    using CSharp.CsIdentifiers;
    using Types;
    using Statements;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias QualifiedName       = QualifiedIdentifier;

    ////////////////////////////////////////////////////////////////////////////////////
    // Arguments

    regex ArgumentModfier = "ref" | "out";
    syntax ArgumentName    = Reference !"::" ":" sm;
    syntax Argument
    {
      | Ref    = ArgumentName? Modfier="ref" sm Expression;
      | Out    = ArgumentName? Modfier="out" sm Expression;
      | Simple = ArgumentName?                  Expression;
    }

    syntax ArgumentList    = (Argument; ","sm)*;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    //  Initializers: array-initializer, variable-initializer

    syntax ArrayInitializer = "{" sm (VariableInitializer; "," sm; ?)* sm "}";

    syntax VariableInitializer
    {
      | Expression
      | ArrayInitializer
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////

    extend syntax Expression
    {
      // B.1.8 Literals
      | BooleanLiteral;
      | RegularStringLiteral;
      | VerbatimStringLiteral;
      | RealLiteral;
      | IntegerLiteral;
      | CharacterLiteral;
      | NullLiteral            = "null";

      | QualifiedName; // simple-name || member-access
      | Parenthesized          = "(" Expression ")"; // parenthesized-expression
      | Cast1                  = "(" !Expression AnyType ")" Expression;
      | Cast2                  = "(" &Expression AnyType ")" &CastPredicate Expression;
      | ThisAccess             = "this";
      | BaseAccessMember       = "base" "." QualifiedName=QualifiedIdentifierContinuation;
      | BaseAccessIndexer      = "base" "[" ArgumentList "]";
      //BaseError              = "base" = Error;

      // delegate-creation-expression || object-creation-expression || anonymous-object-creation-expression
      | NewObject_1            = "new" sm AnyNonArrayType "(" ArgumentList ")";             // delegate-creation-expression || object-creation-expression (1)
      | NewArray_3             = "new" sm AnyNonArrayType RankSpecifier+ sm ArrayInitializer;                           // array-creation-expression  (2)
      | NewArray_4             = "new" sm RankSpecifier sm ArrayInitializer;                                            // array-creation-expression  (3)

      | TypeOf                 =  "typeof"     "(" AnyType    ")";
      | Checked                =  "checked"    "(" Expression ")";
      | Unchecked              =  "unchecked"  "(" Expression ")";
      | Default                =  "default"    "(" AnyType    ")";
      | Sizeof                 =  "sizeof"     "(" AnyType    ")";

      precedence AssignmentOrAnonymousFunction:
      | Assignment             = Expression sm "="  sm Expression right-associative;
      | MulAssignment          = Expression sm "*=" sm Expression right-associative;
      | DivAssignment          = Expression sm "/=" sm Expression right-associative;
      | RemainderAssignment    = Expression sm "%=" sm Expression right-associative;
      | AddAssignment          = Expression sm "+=" sm Expression right-associative;
      | SubAssignment          = Expression sm "-=" sm Expression right-associative;
      | ShiftLeftAssignment    = Expression sm "<<="sm Expression right-associative;
      | ShiftRightAssignment   = Expression sm ">>="sm Expression right-associative;
      | AndAssignment          = Expression sm "&=" sm Expression right-associative;
      | XorAssignment          = Expression sm "^=" sm Expression right-associative;
      | OrAssignment           = Expression sm "|=" sm Expression right-associative;

      precedence Conditional:
      | Conditional            = Expression ^ Conditional sm "?" sm Expression sm ":" sm Expression;

      precedence NullCoalescing:
      | NullCoalescing         = Expression sm "??" sm Expression;

      precedence ConditionalOR:
      | ConditionalOr          = Expression sm "||" sm Expression;

      precedence ConditionalAND:
      | ConditionalAnd         = Expression sm "&&" sm Expression;

      precedence LogicalOR:
      | LogicalOr              = Expression sm "|"  sm Expression;

      precedence LogicalXOR:
      | LogicalXor             = Expression sm "^"  sm Expression;

      precedence LogicalAND:
      | LogicalAnd             = Expression sm "&"  sm Expression;

      precedence Equality:
      | Equal                  = Expression sm "==" sm Expression;
      | NotEqual               = Expression sm "!=" sm Expression;

      precedence RelationalAndTypeTesting:
      | LessThan               = Expression sm "<"  sm Expression;
      | GreaterThan            = Expression sm ">"  sm Expression;
      | LessThanOrEqual        = Expression sm "<=" sm Expression;
      | GreaterThanOrEqual     = Expression sm ">=" sm Expression;
      | Is                     = Expression ^ RelationalAndTypeTesting sm "is" sm AnyTypeNullableHack;
      | As                     = Expression ^ RelationalAndTypeTesting sm "as" sm AnyTypeNullableHack;

      precedence Shift:
      | ShiftLeft              = Expression sm "<<" sm Expression;
      | ShiftRight             = Expression sm ">>" sm Expression;

      precedence Additive:
      | Add                    = Expression sm "+"  sm Expression;
      | Sub                    = Expression sm "-"  sm Expression;

      precedence Multiplicative:
      | Mul                    = Expression sm "*"  sm Expression; 
      | Div                    = Expression sm "/"  sm Expression;
      | Remainder              = Expression sm "%"  sm Expression;

      precedence PointerIndirection:
      | PointerIndirection     = "*"  Expression;// pointer-indirection-expression

      precedence Unary:
      | Identity               = "+"  Expression;
      | Negation               = "-"  Expression;
      | LogicalNegation        = "!"  Expression;
      | BitwiseNegation        = "~"  Expression;
      | PreIncrement           = "++" Expression;
      | PreDecrement           = "--" Expression;
      //ExplicitlyCast         = (T) Expression ;

      precedence Primary:
      | MemberAccess1          =  Expression ^ Primary "." QualifiedName=QualifiedIdentifierContinuation; // member-access
      | MemberAccess2          =  PredefinedType "." QualifiedName=QualifiedIdentifierContinuation; // member-access
      | Invocation             =  Expression ^ Primary "(" ArgumentList ")";
      | IndexerAccess          =  Expression ^ Primary "[" ArgumentList "]";
      | PostIncrement          =  Expression "++";
      | PostDecrement          =  Expression "--";
    }
  }
}
