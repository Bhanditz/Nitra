using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;

namespace CSharp
{
  asts QualifiedReference
  {
    | Simple    {                                     Name      : Reference; }
    | Aliased   { Alias         : Reference;          Name      : Reference; }
    | Qualified { Qualifier     : QualifiedReference; Name      : Reference; }
    | Generic   { QualifiedName : QualifiedReference; Arguments : QualifiedReference+; }
  }

  map syntax CsIdentifiers.QualifiedIdentifier -> QualifiedReference
  {
    | (None,    (first :: other, _)) = other.Aggregate(first.CreateSimple(),            (acc, item) => item.CreateQualified(acc));
    | (Some(a), (first :: other, _)) = other.Aggregate(first.CreateAliased(a.GetAst()), (acc, item) => item.CreateQualified(acc));
    | (_,       ([],             _)) = IntrinsicUtils.CreateMissingQualifiedReference(QualifiedIdentifierParts.Span);
  }
  map syntax CsIdentifiers.InterfaceType -> QualifiedReference
  {
    | (None,    (first, _) :: other) = other.Aggregate(first.CreateSimple(),            (acc, item) => item.Item1.CreateQualified(acc));
    | (Some(a), (first, _) :: other) = other.Aggregate(first.CreateAliased(a.GetAst()), (acc, item) => item.Item1.CreateQualified(acc));
    | (_,       []                 ) = IntrinsicUtils.CreateMissingQualifiedReference(InterfaceTypeParts.Span);
  }

  map syntax Types.TypeName -> QualifiedReference
  {
    | QualifiedName  -> QualifiedIdentifier
    | PredefinedType = IntrinsicUtils.CreatePredefinedTypeReference(PredefinedType, GetText(PredefinedType));
  }

  map syntax Types.AnyNonArrayType -> QualifiedReference
  {
    | (typeName, None) -> typeName
    | (typeName, Some) -> Generic
      {
        QualifiedName = IntrinsicUtils.CreateQualifiedReference(Span, "System", "Nullable");
        [ typeName ] -> Arguments;
      }
  }

  map syntax Types.TypeSpecifier -> QualifiedReference
  {
    | PointerSpecifier = IntrinsicUtils.CreateQualifiedReference(Span, "#Pointer");
    | RankSpecifier =
      {
        def rank = RankSpecifier.RankSeparators.Count + 1;
        IntrinsicUtils.CreateQualifiedReference(Span, "#Array" + rank.ToString())
      };
  }

  map syntax Types.AnyType -> QualifiedReference =
  {
    mutable acc = AnyNonArrayType.GetAst();

    foreach (ts in TypeSpecifiers)
    {
      acc = QualifiedReference.Generic(
        Span          = acc.Span + ts.Span,
        QualifiedName = ts.GetAst(),
        Arguments     = QualifiedReference.AstList(acc.Span, acc))
    }

    acc
  };
}
