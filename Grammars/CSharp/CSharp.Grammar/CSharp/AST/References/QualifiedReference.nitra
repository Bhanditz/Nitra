using Nitra;
using Nitra.Runtime.Binding;
using System.Linq;

namespace CSharp
{
  abstract ast QualifiedReference
  {
  stage 1:
    in Arity : int = 0;
    in Scope   : Scope;
    out Symbol : ISymbol2;
    out Type : ITypeReference;

    | Simple
      {
        Name.Scope = Scope;
        Symbol     = Name.Symbol.TryResolve(Name, Utils.TypeOverloadResolution(Arity));
        Type       = NType(Symbol);

        Name : Reference;
      }

    | Aliased 
      {
        Name.Scope = Scope;
        Symbol     = Name.Symbol.TryResolve(Name, Utils.TypeOverloadResolution(Arity));
        Type       = NType(Symbol);

        Alias : Reference;
        Name  : Reference;
      }

    | Qualified
      {
        Qualifier.Arity = 0;
        Qualifier.Scope = Scope;
        Name.Scope      = Qualifier.Symbol.Scope;
        Symbol          = Name.Symbol.TryResolve(Name, Utils.TypeOverloadResolution(Arity));
        Type            = NType(Symbol);

        Qualifier : QualifiedReference;
        Name      : Reference;
      }

    | Generic
      {
        Arguments.Arity     = 0;
        QualifiedName.Arity = Arguments.Count;
        QualifiedName.Scope = Scope;
        Arguments.Scope     = Scope;
        Symbol              = QualifiedName.Symbol;
        Type                = NType(Symbol, Arguments.Symbol);

        QualifiedName : QualifiedReference;
        Arguments     : QualifiedReference*; // TODO: change to  QualifiedReference+
      }
  }
}
