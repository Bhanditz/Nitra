using Nitra;
using Nitra.Runtime.Binding;
using System.Linq;

namespace CSharp
{
  abstract ast QualifiedReference
  {
  stage 1:
    in  Arity   : int = 0;
    in  Scope   : Scope;
    out Ref     : Ref[ISymbol2];
    out Type    : TypeReference;

    | Simple
      {
        Name.Scope = Scope;
        Ref        = Name.Ref.TryResolve(Utils.TypeOverloadResolution(Arity));
        Type       = TypeReference.Create(Ref);

        Name : Reference;
      }

    | Aliased
      {
        Name.Scope = Scope;
        Ref        = Name.Ref.TryResolve(Utils.TypeOverloadResolution(Arity));
        Type       = TypeReference.Create(Ref);

        Alias : Reference;
        Name  : Reference;
      }

    | Qualified
      {
        Qualifier.Arity = 0;
        Qualifier.Scope = Scope;
        Name.Scope      = Qualifier.Ref.Symbol.Scope;
        Ref             = Name.Ref.TryResolve(Utils.TypeOverloadResolution(Arity));
        Type            = TypeReference.Create(Ref);

        Qualifier : QualifiedReference;
        Name      : Reference;
      }

    | Generic
      {
        Arguments.Arity     = 0;
        QualifiedName.Arity = Arguments.Count;
        QualifiedName.Scope = Scope;
        Arguments.Scope     = Scope;
        Ref                 = QualifiedName.Ref;
        Type                = TypeReference.Create(Ref, Arguments.Type);

        QualifiedName : QualifiedReference;
        Arguments     : QualifiedReference*; // TODO: change to  QualifiedReference+
      }
  }
}
