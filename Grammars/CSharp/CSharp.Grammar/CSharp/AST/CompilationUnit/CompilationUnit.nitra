using CSharp.Utils;
using Nitra.Runtime.Binding;

namespace CSharp
{
  abstract ast NamespaceBody : BindableAst
  {
    ExternAlias     : ExternAliasDirective*;
    UsingDirectives : UsingDirective*;
    Members         : NamespaceMember*;
  }
  
  ast CompilationUnit : NamespaceBody
  {
  stage 0:
    in RootNamespace : NamespaceSymbol;

    Members.Parent                  = RootNamespace;

    ExternAlias.ScopeIn             = Scope;
    UsingDirectives.CurrentScope    = ExternAlias.ScopeOut;
    UsingDirectives.ContainingScope = TableScope("CompilationUnit aliases");
    UsingDirectives.OpeningIn       = [];
    Members.Scope                   = MakeMembersScope(Scope, UsingDirectives.OpeningOut, UsingDirectives.ContainingScope);

    Attributes      : Attribute*;
  }

  declaration ExplicitNamespace : Namespace, NamespaceBody
  {
    Path.ParentPipeIn               = Parent;
    ExternAlias.ScopeIn             = Scope;
    UsingDirectives.OpeningIn       = [];
    UsingDirectives.ContainingScope = TableScope(ToString());
    UsingDirectives.CurrentScope    = ExternAlias.ScopeOut;
    ContainingScope                 = Path.ParentPipeOut.MemberScope;
    Members.Parent                  = Symbol;
    Symbol.Parent                   = Parent;
    Members.Scope                   = Utils.MakeMembersScope(MakeEnteredScope(Scope, Parent, Symbol), UsingDirectives.OpeningOut, UsingDirectives.ContainingScope);

    Path            : ImplicitNamespace*;
  }
}
