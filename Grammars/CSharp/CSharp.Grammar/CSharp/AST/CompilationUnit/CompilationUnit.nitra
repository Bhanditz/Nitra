using CSharp.Utils;
using Nitra.Runtime.Binding;

namespace CSharp
{
  abstract ast NamespaceBody : BindableAst
  {
  stage 1:
    out EnteredScope : Scope;

    ExternAlias.ScopeIn             = Scope;
    UsingDirectives.OpeningIn       = [];
    UsingDirectives.CurrentScope    = ExternAlias.ScopeOut;
    Members.Scope                   = MakeMembersScope(EnteredScope, UsingDirectives.OpeningOut, UsingDirectives.ContainingScope);
    UsingDirectives.ContainingScope = TableScope("aliases");

    ExternAlias     : ExternAliasDirective*;
    UsingDirectives : UsingDirective*;
    Members         : NamespaceMember*;
  }
  
  ast CompilationUnit : NamespaceBody
  {
  stage 0:
    in RootNamespace : NamespaceSymbol;

    Members.Parent                  = RootNamespace;
    EnteredScope                    = Scope;


    Attributes      : Attribute*;
  }

  declaration ExplicitNamespace : Namespace, NamespaceBody
  {
    EnteredScope                    = MakeEnteredScope(Scope, Parent, Symbol);
    Path.ParentPipeIn               = Parent;
    ContainingScope                 = Path.ParentPipeOut.MemberScope;
    Members.Parent                  = Symbol;
    Symbol.Parent                   = Parent;

    Path            : ImplicitNamespace*;
  }
}
