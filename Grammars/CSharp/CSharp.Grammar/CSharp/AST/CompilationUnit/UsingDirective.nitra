using Nitra.Declarations;
using Nitra.Runtime.Binding;

namespace CSharp
{
  abstract ast UsingDirective : ScopedAst
  {
  stage 1:
    inuot Opening : list[Scope];
    CurrentScope : Scope;
  }

  declaration UsingAliasDirective : UsingDirective
  {
    symbol
    {
      //out ReplacementSymbol : Symbol2 = NamespaceOrTypeName.Symbol;
      //check ReplacementSymbol is NamespaceSymbol on fail NamespaceOrTypeName, "Using directive can open only namespace."
    }
    OpeningOut = OpeningIn;
    NamespaceOrTypeName.Scope = CurrentScope;


    NamespaceOrTypeName : QualifiedReference;
  }

  ast UsingOpenDirective : UsingDirective
  {
    NamespaceOrTypeName.Scope = CurrentScope;
    OpeningOut = NamespaceOrTypeName.Symbol :: OpeningIn;

    NamespaceOrTypeName : QualifiedReference;
  }

  map syntax TopDeclarations.UsingDirective -> UsingDirective
  {
    | Alias -> UsingAliasDirective
      {
        Name          -> Name;
        QualifiedName -> NamespaceOrTypeName;
      }

    | Open -> UsingOpenDirective
      {
        QualifiedName -> NamespaceOrTypeName;
      }
  }
}
