using CSharp.SymbolUtils;

using Nitra;
using Nitra.Runtime.Binding;

namespace CSharp
{
  abstract ast UsingDirective : ScopedAst, NamespaceMember
  {
  }

  declaration UsingAliasDirective : UsingDirective
  {
    symbol
    {
      Kind      = "alias";
      SpanClass = NitraCSharpLanguage.AliasSpanClass;
      Scope     = SymbolUtils.TryGetReplacementSymbolScope(this);

      in ReplacementSymbol : ISymbol2;
      in Type              : TypeReference;
    }

    ContainingTable           = UsingAliasesScope;
    NamespaceOrTypeName.Scope = CurrentScope;
    Symbol.ReplacementSymbol  = NamespaceOrTypeName.Ref.Symbol;
    Symbol.Type               = NamespaceOrTypeName.Type;

    NamespaceOrTypeName : QualifiedReference;
  }

  ast UsingOpenDirective : UsingDirective
  {
    ContainingTable           = null;
    NamespaceOrTypeName.Scope = CurrentScope;
    OpeningOut                = PrependScopeIfResolved(NamespaceOrTypeName.Ref, OpeningIn);

    unless (NamespaceOrTypeName.Ref.Symbol is NamespaceSymbol)
      Error("Using directive can open only namespace.");

    NamespaceOrTypeName : QualifiedReference;
  }
}
