using Nitra.Declarations;
using Nitra.Runtime.Binding;

namespace CSharp
{
  abstract ast UsingDirective
  {
  stage 1:
    inout ScopeBuilder : UsingsScopeBuilder;
  }

  declaration UsingAliasDirective : UsingDirective
  {
    NamespaceOrTypeName.Scope = ScopeBuilderIn.Current;
    ScopeBuilderOut = ScopeBuilderIn.Alias(NamespaceOrTypeName.Symbol, this);

    NamespaceOrTypeName : QualifiedReference;
  }

  ast UsingOpenDirective : UsingDirective
  {
    NamespaceOrTypeName.Scope = ScopeBuilderIn.Current;
    ScopeBuilderOut = ScopeBuilderIn.Open(NamespaceOrTypeName.Symbol, NamespaceOrTypeName);

    NamespaceOrTypeName : QualifiedReference;
  }

  map syntax TopDeclarations.UsingDirective -> UsingDirective
  {
    | Alias -> UsingAliasDirective
      {
        Name          -> Name;
        QualifiedName -> NamespaceOrTypeName;
      }

    | Open -> UsingOpenDirective
      {
        QualifiedName -> NamespaceOrTypeName;
      }
  }
}
