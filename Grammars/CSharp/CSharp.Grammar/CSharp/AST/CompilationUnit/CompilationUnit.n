using CSharp.Symbols;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public partial class CompilationUnit : AstBase, IProjectSupport
  {
    public RefreshProject(files : Seq[File]) : void
    {
      def files         = files.ToArray();
      def stageNotifier = StageNotifierVisitor();
      def context       = DependentPropertyEvalContext();
      def rootNamespace = NamespaceSymbol(null, null);
      
      def notifyAfterStage(files : array[File], stage : int) : void
      {
        foreach (file in files)
          when (file.Ast is CompilationUnit as cu)
            stageNotifier.Notify(cu, stage);
      }
      
      foreach (file in files)
        when (file.Ast is CompilationUnit as cu)
          cu.RootNamespace = rootNamespace;
      AstUtils.EvalProperties(context, files, "SymbolHierarchy");
      
      notifyAfterStage(files, 0);
      
      def rootScope = rootNamespace.Scope;
      foreach (file in files)
        when (file.Ast is CompilationUnit as cu)
          cu.RootScope = rootScope;
      AstUtils.EvalProperties(context, files, "Scopes");
      
      notifyAfterStage(files, 1);
    }
  }
}
