using CSharp.Symbols;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public partial class CompilationUnit : AstBase, IProjectSupport
  {
    public RefreshProject(asts : Seq[IAst], compilerMessages : ICompilerMessages, statistics : StatisticsTask.Container) : void
    {
      mutable buildSymbolHierarchyStatistics;
      mutable buildScopesStatistics;
      
      when (statistics != null)
      {
        buildSymbolHierarchyStatistics = StatisticsTask.Single("SymbolHierarchy", "Build symbol hierarchy");
        buildScopesStatistics          = StatisticsTask.Single("Scopes",          "Build scopes");
        statistics.AddSubtask(buildSymbolHierarchyStatistics);
        statistics.AddSubtask(buildScopesStatistics);
        buildSymbolHierarchyStatistics.Start();
      }
      
      def context = DependentPropertyEvalContext();
      def rootNamespace = NamespaceSymbol(null, null);
      
      foreach (cu is CompilationUnit.CSharp in asts)
        cu.RootNamespace = rootNamespace;
      AstUtils.EvalProperties(context, compilerMessages, asts);
      
      buildSymbolHierarchyStatistics?.Stop();
      buildScopesStatistics?.Start();
      
      def rootScope = rootNamespace.Scope;
      foreach (cu is CompilationUnit.CSharp in asts)
        cu.RootScope = rootScope;
      AstUtils.EvalProperties(context, compilerMessages, asts);
      
      buildScopesStatistics?.Stop();
    }
  }
}
