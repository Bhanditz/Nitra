using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public partial class CompilationUnit : AstBase, IProjectSupport, NamespaceBody
  {
    public RefreshReferences(project : Project) : void { IgnoreParams(); }
    public RefreshProject(project : Project) : void
    {
      when (project.Data == null)
        RefreshReferences(project);

      def context       = DependentPropertyEvalContext();
      def rootNamespace = NamespaceSymbol();
      rootNamespace.MemberTable = TableScope("<root namespace>", rootNamespace);
      rootNamespace.DeclaredIn = null;
      rootNamespace.FullName = "";

      CreateBuiltInSymbols(rootNamespace, context);

      def evalHost = CSharpProjectEvalPropertiesHost(project, rootNamespace);
      evalHost.EvalProperties(context, "SymbolHierarchy", 0);
      evalHost.EvalProperties(context, "Scopes", 1);
      evalHost.EvalProperties(context, "Type bodies binding", 2);
    }

    private static CreateBuiltInSymbols(rootNamespace : NamespaceSymbol, context : DependentPropertyEvalContext) : void
    {
      def initNamespace(declaredIn : NamespaceSymbol, symbol : NamespaceSymbol)
      {
        symbol.DeclaredIn  = declaredIn;
        symbol.FullName    = AstUtils.MakeNamespaceFullName(declaredIn.FullName, symbol.Name);
        symbol.MemberTable = TableScope(symbol.ToString(), symbol);
      }

      def initType[TSymbol](declaredIn : NamespaceSymbol, symbol : TSymbol, baseType : TypeSymbol) : void
        where TSymbol : GenericContainerTypeSymbol, NamespaceMemberDeclarationSymbol
      {
        symbol.DeclaredIn          = declaredIn;
        symbol.FullName            = AstUtils.MakeNamespaceFullName(declaredIn.FullName, symbol.Name);
        symbol.MemberTable         = TableScope(symbol.ToString(), symbol);
        symbol.IsPartial           = false;
        symbol.BaseTypeSet         = BaseTypeReferenceSet(context);
        symbol.TypeParametersCount = 0;
        symbol.Flags               = ModifierSet(context);

        symbol.Flags.Add(Modifiers.Public);
        when (baseType : object != null)
          symbol.BaseTypeSet.AddParent(baseType);
      }

      def systemNamespace = CreateBuiltInSymbol.[NamespaceSymbol](rootNamespace, "System", context, initNamespace);
      def objectClass     = CreateBuiltInSymbol.[TopClassSymbol](systemNamespace, "Object", context, initType(_, _, null));
      def valueTypeStruct = CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "ValueType", context, initType(_, _, objectClass));

      def initClass(parent : NamespaceSymbol, symbol : TopClassSymbol) : void { initType(parent, symbol, objectClass) }
      def initStruct(parent : NamespaceSymbol, symbol : TopStructSymbol) : void { initType(parent, symbol, valueTypeStruct) }

      def makeAlias(typeSymbol : TypeSymbol, alias : string) : void
      {
        _ = CreateBuiltInSymbol.[BuiltInTypeAliasSymbol](rootNamespace, alias, context,
          fun(_, aliasSymbol)
          {
            aliasSymbol.Replacement = Ref.Some(SourceSnapshot.Default.File, NSpan(0), typeSymbol);
          });
      }

      makeAlias(objectClass, "object");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Void", context, initStruct), "void");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Boolean", context, initStruct), "bool");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Byte", context, initStruct), "byte");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "SByte", context, initStruct), "sbyte");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Int16", context, initStruct), "short");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "UInt16", context, initStruct), "ushort");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Int32", context, initStruct), "int");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "UInt32", context, initStruct), "uint");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Int64", context, initStruct), "long");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "UInt64", context, initStruct), "ulong");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Single", context, initStruct), "float");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Double", context, initStruct), "double");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Decimal", context, initStruct), "decimal");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Char", context, initStruct), "char");
      makeAlias(CreateBuiltInSymbol.[TopClassSymbol](systemNamespace, "String", context, initClass), "string");
      makeAlias(CreateBuiltInSymbol.[TopClassSymbol](rootNamespace, "#Dynamic", context, initClass), "dynamic");
    }

    private static CreateBuiltInSymbol[TSymbol](parent : NamespaceSymbol, nameText : string, context : DependentPropertyEvalContext, init : NamespaceSymbol * TSymbol -> void) : TSymbol
      where TSymbol : DeclarationSymbol, new()
    {
      def name   = Name(SourceSnapshot.Default.File, NSpan(), nameText);
      def symbol = ExternalDeclaration.[TSymbol](name).DefineSymbol(parent.MemberTable);
      init(parent, symbol);
      symbol.EvalProperties(context);
      symbol
    }
  }

  class CSharpProjectEvalPropertiesHost : ProjectEvalPropertiesHost
  {
    private _rootNamespace : NamespaceSymbol;

    public this(project : Project, rootNamespace : NamespaceSymbol)
    {
      base(project, [rootNamespace]);
      _rootNamespace = rootNamespace;
    }

    protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      match (context.Stage)
      {
        | 0 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.RootNamespace = _rootNamespace;

        | 1 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.Scope = _rootNamespace.Scope;

        | _ => ()
      }
    }
  }
}
