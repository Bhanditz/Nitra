using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime.Binding;
using System;
using System.Collections.Generic;
using System.Linq;


namespace CSharp
{
  public partial interface BindableAst : IDependentPropertyContainer, IAst { }
  
  public partial interface NamespaceBody : IDependentPropertyContainer, IAst, BindableAst {}
  
  public partial class CompilationUnit : AstBase, IProjectSupport, NamespaceBody
  {
    public RefreshReferences(project : Project) : void { IgnoreParams(); }
    public RefreshSources(project : Project) : void { IgnoreParams(); }
    public RefreshProject(project : Project) : void
    {
      def files         = project.Files.ToArray();
      def context       = DependentPropertyEvalContext();
      def rootNamespace = NamespaceSymbol();
      rootNamespace.MemberTable = TableScope("<root namespace>", rootNamespace);
      rootNamespace.Parent = null;
      rootNamespace.FullName = "";

      CreateBuiltInSymbols(rootNamespace, context);

      foreach (file in files)
        when (file.Ast is CompilationUnit as cu)
          cu.RootNamespace = rootNamespace;
      AstUtils.EvalProperties(context, files, "SymbolHierarchy", 0, rootNamespace);

      def rootScope = rootNamespace.Scope;
      foreach (file in files)
        when (file.Ast is CompilationUnit as cu)
          cu.Scope = rootScope;
      AstUtils.EvalProperties(context, files, "Scopes", 1, rootNamespace);

      AstUtils.EvalProperties(context, files, "Type bodies binding", 2, rootNamespace);
    }

    private static CreateBuiltInSymbols(rootNamespace : NamespaceSymbol, context : DependentPropertyEvalContext) : void
    {
      def initNamespace(parent : NamespaceSymbol, symbol : NamespaceSymbol)
      {
        symbol.AssemblyId  = Nitra.Typing.AssemblyIds.CurrentAssembly;
        symbol.Parent      = parent;
        symbol.FullName    = SymbolUtils.MakeNamespaceFullName(parent.FullName, symbol.Name);
        symbol.MemberTable = TableScope(symbol.ToString(), symbol);
      }

      def initType[TSymbol](parent : NamespaceSymbol, symbol : TSymbol, baseType : TypeSymbol) : void
        where TSymbol : GenericContainerTypeSymbol, NamespaceMemberDeclarationSymbol
      {
        symbol.AssemblyId          = Nitra.Typing.AssemblyIds.CurrentAssembly;
        symbol.Parent              = parent;
        symbol.FullName            = SymbolUtils.MakeNamespaceFullName(parent.FullName, symbol.Name);
        symbol.MemberTable         = TableScope(symbol.ToString(), symbol);
        symbol.IsPartial           = false;
        symbol.BaseTypeSet         = BaseTypeReferenceSet(context);
        symbol.TypeParametersCount = 0;
        symbol.Flags               = ModifierSet(context);

        symbol.Flags.Add(Modifiers.Public);
        when (baseType : object != null)
        {
          def r = Ref.Some(SourceSnapshot.Default.File, NSpan(), baseType);
          symbol.BaseTypeSet.AddParent(TypeReference(r.File, r.Span, r, []));
        }
      }

      def systemNamespace = CreateBuiltInSymbol.[NamespaceSymbol](rootNamespace, "System", context, initNamespace);
      def objectClass     = CreateBuiltInSymbol.[TopClassSymbol](systemNamespace, "Object", context, initType(_, _, null));
      def valueTypeStruct = CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "ValueType", context, initType(_, _, objectClass));

      def initClass(parent : NamespaceSymbol, symbol : TopClassSymbol) : void { initType(parent, symbol, objectClass) }
      def initStruct(parent : NamespaceSymbol, symbol : TopStructSymbol) : void { initType(parent, symbol, valueTypeStruct) }

      def makeAlias(typeSymbol : TypeSymbol, alias : string) : void
      {
        _ = CreateBuiltInSymbol.[BuiltInTypeAliasSymbol](rootNamespace, alias, context,
          fun(_, aliasSymbol)
          {
            aliasSymbol.AssemblyId = Nitra.Typing.AssemblyIds.CurrentAssembly;
            aliasSymbol.Type = typeSymbol;
          });
      }

      makeAlias(objectClass, "object");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Void", context, initStruct), "void");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Boolean", context, initStruct), "bool");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Byte", context, initStruct), "byte");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "SByte", context, initStruct), "sbyte");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Int16", context, initStruct), "short");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "UInt16", context, initStruct), "ushort");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Int32", context, initStruct), "int");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "UInt32", context, initStruct), "uint");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Int64", context, initStruct), "long");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "UInt64", context, initStruct), "ulong");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Single", context, initStruct), "float");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Double", context, initStruct), "double");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Decimal", context, initStruct), "decimal");
      makeAlias(CreateBuiltInSymbol.[TopStructSymbol](systemNamespace, "Char", context, initStruct), "char");
      makeAlias(CreateBuiltInSymbol.[TopClassSymbol](systemNamespace, "String", context, initClass), "string");
      makeAlias(CreateBuiltInSymbol.[TopClassSymbol](rootNamespace, "#Dynamic", context, initClass), "dynamic");
    }

    private static CreateBuiltInSymbol[TSymbol](parent : NamespaceSymbol, name : string, context : DependentPropertyEvalContext, init : NamespaceSymbol * TSymbol -> void) : TSymbol
      where TSymbol : ISymbol2, new()
    {
      def declaration = BuiltInSymbolDeclaration.[TSymbol](name);
      def symbol      = parent.MemberTable.Define.[TSymbol](declaration, context);
      init(parent, symbol);
      symbol
    }
  }
}
