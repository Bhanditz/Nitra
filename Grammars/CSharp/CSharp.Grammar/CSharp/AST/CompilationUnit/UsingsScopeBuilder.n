using CSharp.Symbols;
using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public class UsingsScopeBuilder
  {
    public          Current  : Scope;
    private mutable _opens    : list[Scope] = [];
    private mutable _aliases : Scope.Table;

    public this(current : Scope) { Current = current; }

    public Open(symbol : Symbol2, ast : IAst) : UsingsScopeBuilder
    {
      if (symbol is NamespaceSymbol as ns)
        _opens ::= ns.Scope;
      else when (symbol.IsResolved)
        AstContext.CompilerMessages.Error(ast, <#Using directive can open only namespace.#>);

      this
    }
    
    public Alias(alias : IReference, symbol : Symbol2, ast : IAst) : UsingsScopeBuilder
    {
      //AliasSymbol(alias)
      this
    }
    
    public MakeResultScop() : Scope
    {
      def main =
        if (_aliases == null)
          Current
        else
          Scope.Union([Current, _aliases]);

      def result =
        if (_opens.IsEmpty)
          main
        else
          Scope.Hide(main, Scope.Union(_opens));
          
      result
    }
    
    private Aliases : Scope.Table { get { when (_aliases == null) _aliases = Scope.Table(); _aliases } }
  }
}
