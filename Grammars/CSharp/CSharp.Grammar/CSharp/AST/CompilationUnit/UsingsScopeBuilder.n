using CSharp.Symbols;
using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public class UsingsScopeBuilder
  {
    public          Current  : Scope { get; }
    private mutable _opens   : list[Scope] = [];
    private mutable _aliases : Scope.Table;

    public this(current : Scope) { Current = current; }

    public Open(symbol : Symbol2, namespaceOrType : QualifiedReference) : UsingsScopeBuilder
    {
      if (symbol is NamespaceSymbol as ns)
        _opens ::= ns.Scope;
      else when (symbol.IsResolved)
        AstContext.CompilerMessages.Error(namespaceOrType, <#Using directive can open only namespace.#>);

      this
    }
    
    public Alias(_symbol : Symbol2, usingAliasDirective : UsingAliasDirective) : UsingsScopeBuilder
    {
      def alias = usingAliasDirective.Name;
      def sym = AliasSymbol(alias, usingAliasDirective.NamespaceOrTypeName);
      sym.Declarations ::= usingAliasDirective;
      alias.Symbol = sym;
      Aliases.DefineSymbol(sym);
      this
    }
    
    public ResultScop : Scope
    {
      get
      {
        def main =
          if (_aliases == null)
            Current
          else
            Scope.Union([Current, _aliases]);

        def result =
          if (_opens.IsEmpty)
            main
          else
            Scope.Hide(main, Scope.Union(_opens));
          
        result
      }
    }
    
    private Aliases : Scope.Table { get { when (_aliases == null) _aliases = Scope.Table(); _aliases } }
  }
}
