using CSharp.Symbols;
using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public class UsingsScopeBuilder
  {
    public          Current         : Scope { get; }
    private mutable _opens          : list[Scope] = [];
    private mutable _aliases        : Scope.Table;

    public this(current : Scope)
    {
      Current = current;
    }

    public Open(symbol : Symbol2, namespaceOrType : QualifiedReference) : UsingsScopeBuilder
    {
      if (symbol is NamespaceSymbol as ns)
        _opens ::= ns.Scope;
      else when (symbol.IsResolved)
        AstContext.CompilerMessages.Error(namespaceOrType, <#Using directive can open only namespace.#>);

      this
    }
    
    public Alias(_symbol : Symbol2, usingAliasDirective : UsingAliasDirective) : UsingsScopeBuilder
    {
      def alias = usingAliasDirective.Name;
      def sym = AliasSymbol(alias, usingAliasDirective.NamespaceOrTypeName);
      sym.Declarations ::= usingAliasDirective;
      alias.Symbol = sym;
      Aliases.DefineSymbol(sym, reportErrors=true);
      this
    }

    public ResultScope : Scope
    {
      get
      {
        def makeCurrentScope(scope : Scope) : Scope
        {
          def withAliases =
            if (_aliases == null)
              scope
            else
              Scope.Union([scope, _aliases]);

          def withUsings =
            match (_opens)
            {
              | []    => withAliases
              | [one] => Scope.Hide(withAliases, one)
              | _     => Scope.Hide(withAliases, Scope.Union(_opens))
            };
            
          withUsings
        }

        match (Current)
        {
          | Hide as h with (scope = h.Scope, parent = h.Hidden) => Scope.Hide(makeCurrentScope(scope), parent)
          | scope => makeCurrentScope(scope)
        }
      }
    }
    
    private Aliases : Scope.Table { get { when (_aliases == null) _aliases = Scope.Table(); _aliases } }
  }
}
