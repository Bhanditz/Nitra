using CSharp.Utils;
using Nitra.Runtime.Binding;

namespace CSharp
{
  abstract declaration Namespace : NamespaceMemberDeclaration
  {
    sealed symbol
    {
      Kind      = "namespace";
      SpanClass = "Namespace";
      FullName  = SymbolUtils.MakeFullName(this);

      out MemberScope : TableScope = TableScope(ToString());
    }
  }

  declaration ImplicitNamespace : Namespace
  {
    inout ParentPipe : NamespaceSymbol;

    Parent                          = ParentPipeIn;
    Symbol.Parent                   = Parent;
    ContainingTable                 = ParentPipeIn.MemberScope;
    ParentPipeOut                   = Symbol;
  }

  abstract ast NamespaceBody : BindableAst
  {
  stage 1:
    out EnteredScope : Scope;

    Members.OpeningIn         = [];
    Members.UsingAliasesScope = TableScope("aliases");
    Members.CurrentScope      = Scope;
    Members.Scope             = MakeMembersScope(EnteredScope, Members.OpeningOut, Members.UsingAliasesScope);

    Members         : NamespaceMember*;
  }

  declaration ExplicitNamespace : Namespace, NamespaceBody
  {
    EnteredScope                    = MakeEnteredScope(Scope, Parent, Symbol);
    Path.ParentPipeIn               = Parent;
    ContainingTable                 = Path.ParentPipeOut.MemberScope;
    Members.Parent                  = Symbol;
    Symbol.Parent                   = Path.ParentPipeOut;

    Path            : ImplicitNamespace*;
  }
}
