using CSharp.Symbols;
using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;

using System.Linq;
using SCG = System.Collections.Generic;

namespace CSharp
{
  abstract declaration TypeMember : NamespaceOrType
  {
  }

  map syntax TopDeclarations.TypeMemberDeclaration -> TypeMember*
  {
    | NestedType      -> [TypeDeclaration]
    | Constructor     -> [Member.Constructor
      {
        Name             -> Name;
        FormalParameters -> Parameters;
        Attributes       -> Attributes;
      }]
    | Destructor      -> [Member.Destructor
      {
        Name             -> Name;
        FormalParameters -> Parameters;
        Attributes       -> Attributes;
      }]
    | Method          -> [Member.Method
      {
        MethodHeader.Name             -> Name;
        MethodHeader.InterfaceTypeOpt -> InterfaceType;
        match(MethodHeader.TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameters;
        MethodHeader.TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        MethodHeader.AnyType          -> ReturnType;
        MethodHeader.FormalParameters -> Parameters;
        Attributes                    -> Attributes;
      }]
    | Property        -> [Member.Property
      {
        Name             -> Name;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
      }]
    | Event           -> [Member.Event
      {
        Name             -> Name;
        InterfaceTypeOpt -> InterfaceType;
        EventHeader { AnyType -> Type; Attributes -> Attributes; } -> Header;
        EventAccessorDeclarations -> Accessors;
      }]
    | Indexer         -> [Member.Indexer
      {
        Name = Name(this.File, this.KwThis, "#Item");
        FormalParameters -> Parameters;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
      }]
    | SimpleEvent     -> VariableDeclarators.VariableDeclarators.Item1(EventHeader { AnyType -> Type; Attributes -> Attributes; })
    | Field           -> VariableDeclarators.VariableDeclarators.Item1(FieldHeader { AnyType -> Type; Attributes -> Attributes; })
    | Constant        -> ConstantDeclarators.ConstantDeclarators.Item1
    | FixedSizeBuffer -> FixedSizeBufferDeclarators.Item1(FixedSizeBufferHeader { AnyType -> Type; Attributes -> Attributes; })
    | OperatorUnary   -> [Member.OperatorUnary
      {
        Name = Name(this.File, this.OverloadableUnaryOperator, this.GetText(OverloadableUnaryOperator));
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Attributes      -> Attributes;
      }]
    | OperatorBinary  -> [Member.OperatorBinary
      {
        Name = Name(this.File, this.OverloadableBinaryOperator, this.GetText(OverloadableBinaryOperator));
        FormalParameter1 -> Parameter1;
        FormalParameter2 -> Parameter2;
        AnyType          -> ReturnType;
        Attributes       -> Attributes;
      }]
    | OperatorCnv     -> [Member.OperatorCnv
      {
        Name = Name(this.File, this.OperatorKind, "#" + this.GetText(this.OperatorKind));
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Attributes      -> Attributes;
      }]
  }

  map syntax Statements.VariableDeclarator(header : FieldHeader) -> Member.Field
  {
    Name   -> Name;
    header -> Header;
  }

  map syntax Statements.VariableDeclarator(header : EventHeader) -> Member.Event
  {
    Name   -> Name;
    header -> Header;
    None() -> InterfaceType;
    []     -> Accessors;
  }

  map syntax TopDeclarations.EnumBase -> QualifiedReference
  {
    AnyType
  }

  map syntax TopDeclarations.EnumMemberDeclaration -> Member.EnumMember
  {
    Name       -> Name;
    Attributes -> Attributes;
  }

  map syntax TopDeclarations.EnumMemberDeclarations -> Member.EnumMember*
  {
    EnumMemberDeclarations.Item1
  }
}
