using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;

using System.Linq;
using SCG = System.Collections.Generic;

namespace CSharp
{
  abstract declaration TypeMember
  {
    symbol
    {
      in Parent : GenericContainerTypeSymbol;
    }
    in Parent : GenericContainerTypeSymbol;
    //ContainingScope = Parent.Scope;
  }

  // enum, delegate, class, struct or interface
  abstract declaration Type
  {
    Attributes : Attribute*;
    Modifiers  : Modifier*;

    //Modifiers.FlagsIn = Modifiers.None;
  }

  // delegate, class, struct or interface
  abstract declaration GenericType : Type
  {
    symbol
    {
      // out TypeParameterSymbols : array[TypeParameterSymbol] = array(TypeParameters.Count);
      // TypeParameterSymbols = TypeParameters.Symbols;
    }

    out TypeParametersScope : TableScope = TableScope();

    TypeParameters           : TypeParameter*;
    TypeParameterConstraints : TypeParameterConstraintsClause*;
  }

  abstract declaration Enum : Type
  {
    EnumBase  : QualifiedReference?;
    Members   : EnumMember*;
  }

  declaration TopEnum        : Enum, NamespaceMember { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }
  declaration NestedEnum     : Enum, TypeMember      { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }

  abstract declaration Delegate : GenericType
  {
    ReturnType               : QualifiedReference;
    Parameters               : FormalParameter*;
  }

  declaration TopDelegate    : Delegate, NamespaceMember { ContainingScope = Parent.MemberScope; }
  declaration NestedDelegate : Delegate, TypeMember      { ContainingScope = Parent.MemberScope; }

  // class, struct or interface
  abstract declaration GenericContainerType : GenericType
  {
    symbol
    {
      out MemberScope : TableScope = TableScope();
    }

    TypeBase                 : QualifiedReference*;
    Members                  : TypeMember*;
    IsPartial                : bool;
  }

  declaration TopClass        : GenericContainerType, NamespaceMember { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }
  declaration NestedClass     : GenericContainerType, TypeMember      { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }
  declaration TopStruct       : GenericContainerType, NamespaceMember { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }
  declaration NestedStruct    : GenericContainerType, TypeMember      { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }
  declaration TopInterface    : GenericContainerType, NamespaceMember { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }
  declaration NestedInterface : GenericContainerType, TypeMember      { ContainingScope = Parent.MemberScope; Members.Parent = Symbol; }

  ast NestedTypeTag {}

  map syntax TopDeclarations.TypeMemberDeclaration -> TypeMember*
  {
    | NestedType      -> [TypeDeclaration(NestedTypeTag {})]
    | Constructor     -> [Member.Constructor
      {
        Name                      -> Name;
        FormalParameters          -> Parameters;
        Attributes                -> Attributes;
        Modifiers                 -> Modifiers;
        ConstructorInitializerOpt -> Initializer;
      }]
    | Destructor      -> [Member.Destructor
      {
        Name             -> Name;
        FormalParameters -> Parameters;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | Method          -> [Member.Method
      {
        MethodHeader.Name             -> Name;
        MethodHeader.InterfaceTypeOpt -> InterfaceType;
        match(MethodHeader.TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameters;
        MethodHeader.TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(PartialOpt.Span, PartialOpt.HasValue);
        MethodHeader.AnyType          -> ReturnType;
        MethodHeader.FormalParameters -> Parameters;
        Attributes                    -> Attributes;
        Modifiers                     -> Modifiers;
      }]
    | Property        -> [Member.Property
      {
        Name             -> Name;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | Event           -> [Member.Event
      {
        Name             -> Name;
        InterfaceTypeOpt -> InterfaceType;
        EventHeader { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; } -> Header;
        EventAccessorDeclarations -> Accessors;
      }]
    | Indexer         -> [Member.Indexer
      {
        Name = Name(this.File, this.KwThis, "#Item");
        FormalParameters -> Parameters;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | SimpleEvent     -> VariableDeclarators.VariableDeclarators.Item1(EventHeader    { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | Field           -> VariableDeclarators.VariableDeclarators.Item1(FieldHeader    { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | Constant        -> ConstantDeclarators.ConstantDeclarators.Item1(ConstantHeader { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | FixedSizeBuffer -> FixedSizeBufferDeclarators.Item1(FixedSizeBufferHeader       { AnyType -> Type; Attributes -> Attributes; Modifiers -> Modifiers; })
    | OperatorUnary   -> [Member.OperatorUnary
      {
        Name = Name(this.File, this.OverloadableUnaryOperator, this.GetText(OverloadableUnaryOperator));
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Attributes      -> Attributes;
        Modifiers       -> Modifiers;
      }]
    | OperatorBinary  -> [Member.OperatorBinary
      {
        Name = Name(this.File, this.OverloadableBinaryOperator, this.GetText(OverloadableBinaryOperator));
        FormalParameter1 -> Parameter1;
        FormalParameter2 -> Parameter2;
        AnyType          -> ReturnType;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
    | ImplicitOperator   -> [Member.OperatorCnv
      {
        Name = Name(this.File, this.KwImplicit, "#Implicit");
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Kind = ParsedValue(this.KwImplicit, OperatorKind.Implicit);
        Attributes      -> Attributes;
        Modifiers       -> Modifiers;
      }]
    | ExplicitOperator   -> [Member.OperatorCnv
      {
        Name = Name(this.File, this.KwExplicit, "#Explicit");
        FormalParameter -> Parameter;
        AnyType         -> ReturnType;
        Kind = ParsedValue(this.KwExplicit, OperatorKind.Explicit);
        Attributes      -> Attributes;
        Modifiers       -> Modifiers;
      }]
  }

  map syntax Statements.VariableDeclarator(header : FieldHeader) -> Member.Field
  {
    Name   -> Name;
    header -> Header;
  }

  map syntax Statements.VariableDeclarator(header : EventHeader) -> Member.Event
  {
    Name   -> Name;
    header -> Header;
    None() -> InterfaceType;
    []     -> Accessors;
  }

  map syntax TopDeclarations.EnumBase -> QualifiedReference
  {
    AnyType
  }

  map syntax TopDeclarations.EnumMemberDeclaration -> EnumMember
  {
    Name       -> Name;
    Attributes -> Attributes;
  }

  map syntax TopDeclarations.EnumMemberDeclarations -> EnumMember*
  {
    EnumMemberDeclarations.Item1
  }
}
