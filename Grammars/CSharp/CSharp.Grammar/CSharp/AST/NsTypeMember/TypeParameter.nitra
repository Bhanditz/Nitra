using CSharp.Utils;

using Nitra;
using Nitra.Runtime.Binding;
using Nemerle.Collections;
using SCG = System.Collections.Generic;

namespace CSharp
{
  //declaration alias TypeParameterAlias = TypeParameter;

  declaration TypeParameter
  {
    symbol
    {
      Kind      = "type parameter";
      SpanClass = NitraCSharpLanguage.TypeSpanClass;
      FullName  = Name;

      in TypeConstraints : TypeConstraintSet;
      in Variance        : Variance;
    }
  }

  declaration TypeParameterAlias : BindableAst
  {
    symbol
    {
      Kind      = "type parameter alias";
      SpanClass = NitraCSharpLanguage.AliasSpanClass;

      in TypeParameter : TypeParameterSymbol;
    }

    in    TypeParameterSymbols : SCG.IList[TypeParameterSymbol];
    inout Index                : int;
    in    DeclaringMember      : ISymbol2;

  stage 2:
    out    IsValidAlias         : bool = Symbol.TypeParameter.IsNameValid && this.Variance.ValueOrDefault == Symbol.TypeParameter.Variance;

    IndexOut = IndexIn + 1;
    Symbol.TypeParameter          = GetTypeParameter(this, TypeParameterSymbols, IndexIn); // workaround ICE: TypeParameterSymbols[IndexIn]
    Symbol.TypeParameter.Variance = this.Variance.ValueOrDefault;
    Attributes.NameScope          = Scope;

    Variance   : Variance;
    Attributes : Attribute*;

    unless (IsValidAlias)
      Error($"Partial declarations of '$(DeclaringMember.FullName)' must have the same type parameter names in the same order.");
  }
}
