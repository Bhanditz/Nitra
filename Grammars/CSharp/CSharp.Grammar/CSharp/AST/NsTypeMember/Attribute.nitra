using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;

using System.Linq;
using SCG = System.Collections.Generic;

namespace CSharp
{
  ast Attribute
  {
    Target : AttributeTarget?;
    Name   : QualifiedReference;
    // TODO: Map arguments
  }

  asts AttributeTarget
  {
    | Assembly
    | Module
    | Field
    | Event
    | Method
    | Param
    | Property
    | Return
    | Type
    | Typevar
  }

  map syntax Attributes.Attribute(targetOpt : AttributeTarget?) -> Attribute
  {
    targetOpt     -> Target;
    QualifiedName -> Name;
  }

  map syntax Attributes.AttributeList(targetOpt : AttributeTarget?) -> Attribute*
  {
    Attributes.Item1(targetOpt)
  }

  map syntax Attributes.AttributeSection -> Attribute*
  {
    AttributeList(AttributeTargetSpecifierOpt)
  }

  map syntax Attributes.GlobalAttributeSection -> Attribute*
  {
    AttributeList(Some(GlobalAttributeTargetSpecifier))
  }

  map syntax Attributes.AttributeTargetSpecifier -> AttributeTarget =
  {
    match (this.GetText(this.AttributeTarget))
    {
      | "field"    => AttributeTarget.Field(this.File, this.AttributeTarget)
      | "event"    => AttributeTarget.Event(this.File, this.AttributeTarget)
      | "method"   => AttributeTarget.Method(this.File, this.AttributeTarget)
      | "param"    => AttributeTarget.Param(this.File, this.AttributeTarget)
      | "property" => AttributeTarget.Property(this.File, this.AttributeTarget)
      | "return"   => AttributeTarget.Return(this.File, this.AttributeTarget)
      | "type"     => AttributeTarget.Type(this.File, this.AttributeTarget)
      | "typevar"  => AttributeTarget.Typevar(this.File, this.AttributeTarget)
      | _          => AttributeTarget.AmbiguousOrMissing(this.File, this.AttributeTarget)
    }
  }

  map syntax Attributes.GlobalAttributeTargetSpecifier -> AttributeTarget =
  {
    match (this.GetText(this.GlobalAttributeTarget))
    {
      | "assembly" => AttributeTarget.Assembly(this.File, this.GlobalAttributeTarget)
      | "module"   => AttributeTarget.Module(this.File, this.GlobalAttributeTarget)
      | _          => AttributeTarget.AmbiguousOrMissing(this.File, this.GlobalAttributeTarget)
    }
  }
}
