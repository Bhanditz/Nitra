using CSharp.Symbols;
using Nitra;
using Nitra.Runtime.Binding;

using System.Linq;

namespace CSharp
{
  abstract declaration NamespaceOrType
  {
    in Parent       : NamespaceOrTypeSymbol;
  }

  abstract declaration NamespaceMember : NamespaceOrType
  {
    in Scope : Scope;
  }

  map syntax TopDeclarations.NamespaceMemberDeclaration -> NamespaceMember
  {
    | Namespace -> Namespace
      {
        Name =
        {
          // TODO: create complex list mapping!
          def parts = NamespaceName.Names.Item1;
          if (parts.Count > 0)
            parts[parts.Count - 1].GetAst()
          else
            Name.AmbiguousOrMissing(this.File, NSpan(this.Span.StartPos))
        };
        NamespaceName.Names.Item1   -> Path;
        ExternAliasDirectives       -> ExternAlias;
        UsingDirectives             -> UsingDirectives;
        NamespaceMemberDeclarations -> Members;
      }
    | Type -> TypeDeclaration
  }
}