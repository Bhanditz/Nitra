using Nitra;
using Nitra.Runtime.Binding;

using System.Linq;

namespace CSharp
{
  abstract declaration NamespaceMember
  {
    in Parent  : NamespaceSymbol;
    //ContainingScope = Parent.Scope;
  }

  map syntax TopDeclarations.NamespaceMemberDeclaration -> NamespaceMember
  {
    | Namespace ->
      let path : Name* = NamespaceName.Names.Item1 in
      Namespace
      {
        // TODO: what if 'path' is ambiguous?
        Name = if (path.Count > 0) path[path.Count - 1] else Name.AmbiguousOrMissing(this.File, NSpan(this.Span.StartPos));
        path                        -> Path;
        ExternAliasDirectives       -> ExternAlias;
        UsingDirectives             -> UsingDirectives;
        NamespaceMemberDeclarations -> Members;
      }

    | Type -> TypeDeclaration
  }
}
