using Nitra;
using Nitra.Runtime.Binding;
using Nemerle.Collections;

namespace CSharp
{
  abstract ast TypeParameterConstraint
  {
  stage 1:
    in Scope           : Scope;
    in TypeConstraints : TypeConstraintSet;
    inout ConstraintIndex : int;
    in    ConstraintCount : int;

    ConstraintIndexOut = ConstraintIndexIn + 1;

    | Ctor
      {
        TypeConstraints |= TypeConstraint.Ctor;

        ReportMessage(CompilerMessageType.Error,
          ConstraintIndexIn + 1 == ConstraintCount,
          "The 'new()' constraint must be the last constraint specified.");
      }
    | Class
      {
        TypeConstraints |= TypeConstraint.Class;

        ReportMessage(CompilerMessageType.Error,
          ConstraintIndexIn == 0,
          "The 'class' constraint must come before any other constraints.");
      }
    | Struct
      {
        TypeConstraints |= TypeConstraint.Struct;

        ReportMessage(CompilerMessageType.Error,
          ConstraintIndexIn == 0,
          "The 'struct' constraint must come before any other constraints.");
      }
    | Base
      {
        Type.Scope = Scope;
        TypeConstraints |= Type.Type;

        Type : QualifiedReference;
      }
  }
}
