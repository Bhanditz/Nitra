namespace CSharp
{
  declarations Member : TypeMember
  {
    | Constructor
      {
        Parameters : FormalParameter*;
      }
    | Destructor
      {
        Parameters : FormalParameter*;
      }
    | Method
      {
        InterfaceType            : QualifiedReference?;
        TypeParameters           : TypeParameter*;
        TypeParameterConstraints : TypeParameterConstraintsClause*;
        IsPartial                : bool;
        Parameters               : FormalParameter*;
        ReturnType               : QualifiedReference;
      }
    | Property
      {
        InterfaceType : QualifiedReference?;
        Type          : QualifiedReference;
        Accessors     : PropertyAccessor*;
      }
    | Event
      {
        InterfaceType : QualifiedReference?;
        Header        : EventHeader;
        Accessors     : EventAccessor*;
      }
    | Indexer
      {
        Parameters    : FormalParameter*;
        Type          : QualifiedReference;
        InterfaceType : QualifiedReference?;
        Accessors     : PropertyAccessor*;
      }
    | Constant
    | Field    { Header : FieldHeader; }
    | FixedSizeBuffer { Header : FixedSizeBufferHeader; }
    | OperatorUnary
      {
        ReturnType : QualifiedReference;
        Parameter  : FormalParameter;
      }
    | OperatorBinary
      {
        ReturnType : QualifiedReference;
        Parameter1 : FormalParameter;
        Parameter2 : FormalParameter;
      }
    | OperatorCnv
      {
        ReturnType : QualifiedReference;
        Parameter  : FormalParameter;
      }
    | EnumMember
  }

  ast FieldHeader
  {
    Type : QualifiedReference;
  }

  ast EventHeader
  {
    Type : QualifiedReference;
  }

  ast FixedSizeBufferHeader
  {
    Type : QualifiedReference;
  }

  declaration FormalParameter
  {
    Type : QualifiedReference;
  }

  asts PropertyAccessor
  {
    | Get
    | Set
  }

  asts EventAccessor
  {
    | Add
    | Remove
  }

  map syntax TopDeclarations.FormalParameter -> FormalParameter
  {
    Name    -> Name;
    AnyType -> Type;
  }

  map syntax TopDeclarations.FormalParameters -> FormalParameter*
  {
    FormalParameters.Item1
  }

  map syntax Statements.ConstantDeclarator -> Member.Constant
  {
    Name -> Name;
  }

  map syntax TopDeclarations.FixedSizeBufferDeclarator(header : FixedSizeBufferHeader) -> Member.FixedSizeBuffer
  {
    Name   -> Name;
    header -> Header;
  }

  map syntax TopDeclarations.GetAccessorDeclaration -> PropertyAccessor.Get { }

  map syntax TopDeclarations.SetAccessorDeclaration -> PropertyAccessor.Set { }

  map syntax TopDeclarations.AccessorDeclarations -> PropertyAccessor*
  {
    | GetSet(g, Some(s)) -> [g, s]
    | GetSet(g, None)    -> [g]
    | SetGet(s, Some(g)) -> [s, g]
    | SetGet(s, None)    -> [s]
    | None               -> []
  }

  map syntax TopDeclarations.AddAccessorDeclaration -> EventAccessor.Add { }

  map syntax TopDeclarations.RemoveAccessorDeclaration -> EventAccessor.Remove { }

  map syntax TopDeclarations.EventAccessorDeclarations -> EventAccessor*
  {
    | AddRemove(a, r) -> [a, r]
    | RemoveAdd(r, a) -> [r, a]
  }
}
