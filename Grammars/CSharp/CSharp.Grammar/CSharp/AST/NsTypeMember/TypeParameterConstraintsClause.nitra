using Nitra;
using Nitra.Runtime.Binding;
using Nemerle.Collections;

namespace CSharp
{
  ast TypeParameterConstraintsClause
  {
  stage 1:
    in  Scope : Scope;
    out Ref   : Ref[TypeParameterAliasSymbol];

    ParameterName.Scope         = Scope;
    Constraints.Scope           = Scope;
    Constraints.TypeConstraints = TypeConstraintSet(context.Stage);
    Ref                         = ParameterName.Ref.TryResolve.[TypeParameterAliasSymbol]();
    Ref.Symbol.TypeParameter.TypeConstraints |= Constraints.TypeConstraints;

    ParameterName : Reference;
    Constraints   : TypeParameterConstraint*; // TODO: make TypeParameterConstraint+

    decompose Constraints
    {
      Class  : TypeParameterConstraint.Class?;
      Struct : TypeParameterConstraint.Struct?;
      Ctor   : TypeParameterConstraint.Ctor?;
      Bases  : TypeParameterConstraint.Base*;
    }

    // constraint  Class && !Struct || Struct && !Class || !Struct && !Class
    // constraint  Ctor && !Struct 
  }
}
