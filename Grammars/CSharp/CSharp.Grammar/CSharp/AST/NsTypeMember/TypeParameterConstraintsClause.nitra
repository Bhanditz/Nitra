using Nitra;
using Nitra.Runtime.Binding;
using Nemerle.Collections;

namespace CSharp
{
  ast TypeParameterConstraintsClause
  {
  stage 1:
    in Scope : Scope;
    out Symbol : ISymbol2;

    ParameterName.Scope = Scope;
    Constraints.Scope   = Scope;
    Symbol              = ParameterName.Symbol.TryResolve(ParameterName, Utils.TypeOverloadResolution(0));

    ParameterName : Reference;
    Constraints   : TypeParameterConstraint*; // TODO: make TypeParameterConstraint+

    decompose Constraints
    {
      Class  : TypeParameterConstraint.Class?;
      Struct : TypeParameterConstraint.Struct?;
      Ctor   : TypeParameterConstraint.Ctor?;
      Bases  : TypeParameterConstraint.Base*;
    }

    // constraint  Class && !Struct || Struct && !Class || !Struct && !Class
    // constraint  Ctor && !Struct 
  }
}
