using Nemerle.Collections;

namespace CSharp
{
  declarations Type : NamespaceMember, TypeMember
  {
    | Struct    { Members : TypeMember*; }
    | Class     { TypeBase : QualifiedReference*; Members : TypeMember*; }
    | Interface { Members : TypeMember*; }
    | Delegate
    | Enum
  }

  map syntax TopDeclarations.TypeDeclaration -> Type
  {
    | Class
      {
        Name                            -> Name;
        TypeBase = 
          if (TypeBaseOpt.HasValue)
            QualifiedReference.AstList(TypeBaseOpt.Value.AnyTypes, TypeBaseOpt.Value.AnyTypes.Item1.MapToArray(_.GetAst()))
          else
            QualifiedReference.AstList(TypeBaseOpt, array(0));
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Struct
      {
        StructHead.Name                 -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Interface
      {
        Name -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Enum
      {
        Name                                                         -> Name;
        //EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1 -> Members;
      }
    | Delegate
      {
        Name -> Name;
      }
  }
}