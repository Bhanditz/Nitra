using CSharp.Symbols;
using Nitra.Runtime.Binding;
using Nemerle.Collections;

namespace CSharp
{
  declarations Type : NamespaceMember, TypeMember
  {
    | Class
      {
        out Symbol : ClassSymbol = ClassSymbol.Create(this);

        TypeBase.Scope = Scope.Hide(this.Symbol.Scope, this.Scope);
        Members.Parent = Symbol;

        TypeBase : QualifiedReference*;
        Members : TypeMember*;
      }

    | Struct
      {
        out Symbol : StructSymbol = StructSymbol.Create(this);
        
        Members.Parent        = Symbol;

        Members : TypeMember*;
      }

    | Interface
      {
        out Symbol : InterfaceSymbol = InterfaceSymbol.Create(this);

        Members.Parent        = Symbol;

        Members : TypeMember*;
      }

    | Delegate
      {
        out Symbol : DelegateSymbol = null;
      }

    | Enum
      {
        out Symbol : EnumSymbol = null;
      }
  }

  map syntax TopDeclarations.TypeDeclaration -> Type
  {
    | Class
      {
        Name                            -> Name;
        TypeBase = 
          if (TypeBaseOpt.HasValue)
            QualifiedReference.AstList(TypeBaseOpt.Value.AnyTypes, TypeBaseOpt.Value.AnyTypes.Item1.MapToArray(_.GetAst()))
          else
            QualifiedReference.AstList(TypeBaseOpt, array(0));
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Struct
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Interface
      {
        Name -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Enum
      {
        Name                                                         -> Name;
        //EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1 -> Members;
      }
    | Delegate
      {
        Name -> Name;
      }
  }
}