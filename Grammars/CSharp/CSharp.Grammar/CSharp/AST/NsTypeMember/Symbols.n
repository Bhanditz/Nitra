using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public partial interface NamespaceMemberSymbol : ISymbol2
  {
    Parent : NamespaceSymbol { get; }
  }

  public partial class NamespaceSymbol : DeclaredSymbol, NamespaceMemberSymbol
  {
    public          Parent      : NamespaceSymbol { get; set; }
    public          MemberScope : TableScope      { get; default TableScope(); }
    public override Scope       : Scope           { get { MemberScope } }

    public override IsMergeKeyEquals(candidate : Declaration) : bool
    {
      candidate is Namespace
    }
  }

  public partial interface TypeMemberSymbol : ISymbol2
  {
    Parent : GenericContainerTypeSymbol { get; }
  }

  public partial interface TypeSymbol : ISymbol2
  {
  }

  public partial interface GenericTypeSymbol : TypeSymbol
  {
    TypeParametersCount : int                        { get; }
    TypeParameters      : array[TypeParameterSymbol] { get; }
  }

  public partial interface EnumSymbol : TypeSymbol
  {
  }

  public partial class TopEnumSymbol : DeclaredSymbol, EnumSymbol, NamespaceMemberSymbol
  {
    public Parent : NamespaceSymbol { get; set; }
  }

  public partial class NestedEnumSymbol : DeclaredSymbol, EnumSymbol, TypeMemberSymbol
  {
    public Parent : GenericContainerTypeSymbol { get; set; }
  }

  public partial interface DelegateSymbol : GenericTypeSymbol
  {
  }

  public partial class TopDelegateSymbol : DeclaredSymbol, DelegateSymbol, NamespaceMemberSymbol
  {
    public Parent              : NamespaceSymbol            { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }

  public partial class NestedDelegateSymbol : DeclaredSymbol, DelegateSymbol, TypeMemberSymbol
  {
    public Parent              : GenericContainerTypeSymbol { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }

  public partial interface GenericContainerTypeSymbol : GenericTypeSymbol
  {
    MemberScope : TableScope { get; }
  }

  public partial class TopClassSymbol : DeclaredSymbol, GenericContainerTypeSymbol, NamespaceMemberSymbol
  {
    public Parent              : NamespaceSymbol            { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public MemberScope         : TableScope                 { get; default TableScope(); }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }

  public partial class NestedClassSymbol : DeclaredSymbol, GenericContainerTypeSymbol, TypeMemberSymbol
  {
    public Parent              : GenericContainerTypeSymbol { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public MemberScope         : TableScope                 { get; default TableScope(); }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }

  public partial class TopStructSymbol : DeclaredSymbol, GenericContainerTypeSymbol, NamespaceMemberSymbol
  {
    public Parent              : NamespaceSymbol            { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public MemberScope         : TableScope                 { get; default TableScope(); }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }
  
  public partial class NestedStructSymbol : DeclaredSymbol, GenericContainerTypeSymbol, TypeMemberSymbol
  {
    public Parent              : GenericContainerTypeSymbol { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public MemberScope         : TableScope                 { get; default TableScope(); }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }

  public partial class TopInterfaceSymbol : DeclaredSymbol, GenericContainerTypeSymbol, NamespaceMemberSymbol
  {
    public Parent              : NamespaceSymbol            { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public MemberScope         : TableScope                 { get; default TableScope(); }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }
  
  public partial class NestedInterfaceSymbol : DeclaredSymbol, GenericContainerTypeSymbol, TypeMemberSymbol
  {
    public Parent              : GenericContainerTypeSymbol { get; set; }
    public TypeParametersCount : int                        { get { (Declarations.Head :> GenericType).TypeParameters.Count } }
    public MemberScope         : TableScope                 { get; default TableScope(); }
    public TypeParameters      : array[TypeParameterSymbol] { [Memoize] get { Utils.CreateTypeParameters(TypeParametersCount) } }
  }

  public abstract partial class MemberSymbol : DeclaredSymbol, TypeMemberSymbol
  {
    public Parent : GenericContainerTypeSymbol { get; set; }
  }

  public partial class TypeParameterSymbol : DeclaredSymbol
  {
  }

  public class TypeParameterAliasSymbol : TypeParameterSymbol
  {
    public this(target : TypeParameterSymbol)
    {
      Target = target;
    }

    public           Target           : TypeParameterSymbol { get; }
    public override  ResolutionResult : ISymbol2            { get { Target } }
  }
}
