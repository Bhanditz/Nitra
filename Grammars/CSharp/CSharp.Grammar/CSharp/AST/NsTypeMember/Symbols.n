using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public partial class UsingAliasDirectiveSymbol : DeclaredSymbol
  {
    public override Scope            : Scope     { get { ReplacementSymbol.Scope } }
    public override ResolutionResult : ISymbol2  { get { ReplacementSymbol } }
    public override IsResolved       : bool      { get { IsReplacementSymbolEvaluated } }
  }

  public partial interface NamespaceMemberSymbol : ISymbol2
  {
    //public FullName : string
    //{
    //  get
    //  {
    //  }
    //}
  }

  public partial class NamespaceSymbol : DeclaredSymbol, NamespaceMemberSymbol, ITypeReference
  {
    public override Scope       : Scope           { get { MemberScope } }

    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(0, candidate) }
    public override CanMerge(candidate : Declaration) : bool { candidate is Namespace }
  }

  public partial interface TypeMemberSymbol : ISymbol2
  {
    //public FullName : string
    //{
    //  get
    //  {
    //  }
    //}
  }

  public partial interface TypeSymbol : ISymbol2, ITypeReference
  {
  }

  public partial interface GenericTypeSymbol : TypeSymbol
  {
  }

  public partial interface EnumSymbol : TypeSymbol
  {
  }

  public partial class TopEnumSymbol : DeclaredSymbol, EnumSymbol, NamespaceMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(0, candidate) }
    public override CanMerge(candidate : Declaration) : bool { candidate is TopEnum }
  }

  public partial class NestedEnumSymbol : DeclaredSymbol, EnumSymbol, TypeMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(0, candidate) }
    public override CanMerge(candidate : Declaration) : bool { candidate is NestedEnum }
  }

  public partial interface DelegateSymbol : GenericTypeSymbol
  {
  }

  public partial class TopDelegateSymbol : DeclaredSymbol, DelegateSymbol, NamespaceMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.TopDelegate](TypeParametersCount, candidate) }
  }

  public partial class NestedDelegateSymbol : DeclaredSymbol, DelegateSymbol, TypeMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.NestedDelegate](TypeParametersCount, candidate) }
  }

  public partial interface GenericContainerTypeSymbol : GenericTypeSymbol
  {
  }

  public partial class TopClassSymbol : DeclaredSymbol, GenericContainerTypeSymbol, NamespaceMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.TopClass](this, candidate) }
  }

  public partial class NestedClassSymbol : DeclaredSymbol, GenericContainerTypeSymbol, TypeMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.NestedClass](this, candidate) }
  }

  public partial class TopStructSymbol : DeclaredSymbol, GenericContainerTypeSymbol, NamespaceMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.TopStruct](this, candidate) }
  }

  public partial class NestedStructSymbol : DeclaredSymbol, GenericContainerTypeSymbol, TypeMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.NestedStruct](this, candidate) }
  }

  public partial class TopInterfaceSymbol : DeclaredSymbol, GenericContainerTypeSymbol, NamespaceMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.TopInterface](this, candidate) }
  }

  public partial class NestedInterfaceSymbol : DeclaredSymbol, GenericContainerTypeSymbol, TypeMemberSymbol
  {
    public override IsSameIdentity(candidate : Declaration) : bool { SymbolUtils.IsSameIdentity(TypeParametersCount, candidate) }
    public override CanMerge(candidate : Declaration) : bool { SymbolUtils.CanMerge.[CSharp.NestedInterface](this, candidate) }
  }

  public partial interface MemberSymbol : ISymbol2, TypeMemberSymbol
  {
  }

  public partial class TypeParameterSymbol : DeclaredSymbol, ITypeReference
  {
    private mutable _aliases : list[TypeParameterAlias] = [];

    public Aliases : list[TypeParameterAlias] { get { _aliases } }

    internal AddAliasSymbol(alias : TypeParameterAlias) : void
    {
      _aliases ::= alias;
      def decl = TypeParameter(alias.File, alias.Span, alias.Name, false);
      AddDeclaration(decl);
    }
  }

  public partial class TypeParameterAliasSymbol : DeclaredSymbol
  {
    public override ResolutionResult : ISymbol2 { get { TypeParameter } }
  }
}
