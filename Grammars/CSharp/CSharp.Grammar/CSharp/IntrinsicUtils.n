using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  internal module IntrinsicUtils
  {
    private CreateReference(parent : IAst, span : NSpan, text : string) : Reference
    {
      def r = Reference.Concrete(parent, span);
      r.Initialize(Id = StringIndex.GetId(text));
      r
    }

    public CreateOpenTypeArgument(parent : IAst, span : NSpan) : QualifiedReference
    {
      def qid = QualifiedReference.Simple(parent, span);
      qid.Initialize(Name = CreateReference(qid, span, "#"));
      qid
    }

    public CreateQualifiedReference(parent : IAst, span : NSpan, parts : array[string]) : QualifiedReference
    {
      assert(parts.Length > 0);

      def loop(index, parent)
      {
        if (index > 0)
        {
          def qid = QualifiedReference.Qualified(parent, span);
          qid.Initialize(
            Qualifier = loop(index - 1, qid),
            Name      = CreateReference(qid, span, parts[index]));
          qid
        }
        else
        {
          def qid = QualifiedReference.Simple(parent, span);
          qid.Initialize(Name = CreateReference(qid, span, parts[index]));
          qid
        }
      }
      loop(parts.Length - 1, parent)
    }

    public CreatePredefinedTypeReference(parent : IAst, span : NSpan, text : string) : QualifiedReference
    {
      match (text)
      {
        | "void"    => CreateQualifiedReference(parent, span, array["System", "Void"])
        | "object"  => CreateQualifiedReference(parent, span, array["System", "Object"])
        | "bool"    => CreateQualifiedReference(parent, span, array["System", "Bool"])
        | "string"  => CreateQualifiedReference(parent, span, array["System", "String"])
        | "char"    => CreateQualifiedReference(parent, span, array["System", "Char"])
        | "byte"    => CreateQualifiedReference(parent, span, array["System", "Byte"])
        | "sbyte"   => CreateQualifiedReference(parent, span, array["System", "SByte"])
        | "short"   => CreateQualifiedReference(parent, span, array["System", "Int16"])
        | "ushort"  => CreateQualifiedReference(parent, span, array["System", "UInt16"])
        | "int"     => CreateQualifiedReference(parent, span, array["System", "Int32"])
        | "uint"    => CreateQualifiedReference(parent, span, array["System", "UInt32"])
        | "long"    => CreateQualifiedReference(parent, span, array["System", "Int64"])
        | "ulong"   => CreateQualifiedReference(parent, span, array["System", "UInt64"])
        | "float"   => CreateQualifiedReference(parent, span, array["System", "Single"])
        | "double"  => CreateQualifiedReference(parent, span, array["System", "Double"])
        | "decimal" => CreateQualifiedReference(parent, span, array["System", "Decimal"])
        | "dynamic" => CreateQualifiedReference(parent, span, array["#Dynamic"])
        | _         => assert(false)
      }
    }
  }
}
