using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  internal module IntrinsicUtils
  {
    private CreateReference(span : NSpan, text : string) : Reference
    {
      Reference.Concrete(Span = span, Id = StringIndex.GetId(text))
    }

    public CreateOpenTypeArgument(span : NSpan) : QualifiedReference
    {
      QualifiedReference.Simple(Span = span, Name = CreateReference(span, "#"))
    }

    public CreateQualifiedReference(span : NSpan, parts : array[string]) : QualifiedReference
    {
      assert(parts.Length > 0);

      def loop(index)
      {
        if (index > 0)
        {
          QualifiedReference.Qualified(
            Span      = span,
            Qualifier = loop(index - 1),
            Name      = CreateReference(span, parts[index]))
        }
        else
        {
          QualifiedReference.Simple(
            Span = span,
            Name = CreateReference(span, parts[index]))
        }
      }
      loop(parts.Length - 1)
    }

    public CreatePredefinedTypeReference(span : NSpan, text : string) : QualifiedReference
    {
      match (text)
      {
        | "void"    => CreateQualifiedReference(span, array["System", "Void"])
        | "object"  => CreateQualifiedReference(span, array["System", "Object"])
        | "bool"    => CreateQualifiedReference(span, array["System", "Bool"])
        | "string"  => CreateQualifiedReference(span, array["System", "String"])
        | "char"    => CreateQualifiedReference(span, array["System", "Char"])
        | "byte"    => CreateQualifiedReference(span, array["System", "Byte"])
        | "sbyte"   => CreateQualifiedReference(span, array["System", "SByte"])
        | "short"   => CreateQualifiedReference(span, array["System", "Int16"])
        | "ushort"  => CreateQualifiedReference(span, array["System", "UInt16"])
        | "int"     => CreateQualifiedReference(span, array["System", "Int32"])
        | "uint"    => CreateQualifiedReference(span, array["System", "UInt32"])
        | "long"    => CreateQualifiedReference(span, array["System", "Int64"])
        | "ulong"   => CreateQualifiedReference(span, array["System", "UInt64"])
        | "float"   => CreateQualifiedReference(span, array["System", "Single"])
        | "double"  => CreateQualifiedReference(span, array["System", "Double"])
        | "decimal" => CreateQualifiedReference(span, array["System", "Decimal"])
        | "dynamic" => CreateQualifiedReference(span, array["#Dynamic"])
        | _         => assert(false)
      }
    }
  }
}
