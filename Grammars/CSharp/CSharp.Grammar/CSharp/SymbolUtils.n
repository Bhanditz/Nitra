using Nitra;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  module SymbolUtils
  {
    public MakeNamespaceFullName(parent : NamespaceSymbol, name : string) : string
    {
      if (parent == null)
        name
      else
        parent.FullName + "." + name
    }

    public PrependScopeIfResolved(reference : Ref[ISymbol2], scopes : list[Scope]) : list[Scope]
    {
      if (reference.IsSymbolEvaluated)
        reference.Symbol.Scope :: scopes
      else
        scopes
    }
    
    public IsPartial(declarations : Seq[GenericContainerType]) : bool
    {
      declarations.FirstOrDefault()?.IsPartial.ValueOrDefault
    }

    public IsSameIdentity(typeParametersCount : int, candidate : Declaration) : bool
    {
      match (candidate)
      {
        | CSharp.GenericType as t => t.TypeParameterAliases.Count == typeParametersCount
        | CSharp.Namespace
        | CSharp.Type             => typeParametersCount == 0
        | _                       => false
      }
    }

    public CanMerge[T](typeParametersCount : int, candidate : Declaration) : bool
      where T : GenericType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == typeParametersCount
        | _ => false
      }
    }

    public CanMerge[T](symbol : GenericContainerTypeSymbol, candidate : Declaration) : bool
      where T : GenericContainerType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount && symbol.IsPartial && genericType.IsPartial.ValueOrDefault
        | _ => false
      }
    }

    public TryGetReplacementSymbolScope(aliasDirective : UsingAliasDirectiveSymbol) : Scope
    {
      if (aliasDirective.IsReplacementSymbolEvaluated)
        aliasDirective.ReplacementSymbol.Scope
      else
        EmptyScope.Instance
    }
  }
}
