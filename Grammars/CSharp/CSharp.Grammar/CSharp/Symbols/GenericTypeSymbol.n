using Nitra.Declarations;
using Nitra.Runtime.Binding;
using System.Collections.ObjectModel;
namespace CSharp.Symbols
{
  public abstract class GenericTypeSymbol : TypeSymbol
  {
    public this(name : IName, parent : HierarchicalSymbol, typeParameters : array[TypeParameterSymbol], isPartial : bool)
    {
      base(name, parent);
      TypeParameters = ReadOnlyCollection(typeParameters);
      IsPartial      = isPartial;
    }
    
    public IsPartial : bool { get; }
    
    public TypeParameters : ReadOnlyCollection[TypeParameterSymbol] { get; }

    public MakeBaseTypesScope(parentScope : Scope) : Scope
    {
      def typeParamScope = Scope.Table();
      
      foreach (typeParameter in TypeParameters)
        typeParamScope.DefineSymbol(typeParameter);
        
      Scope.Hide(typeParamScope, parentScope)
    }
  }
}

