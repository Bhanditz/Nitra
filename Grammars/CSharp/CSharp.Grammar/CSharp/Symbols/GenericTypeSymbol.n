using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;

namespace CSharp.Symbols
{
  public abstract class GenericTypeSymbol : TypeSymbol
  {
    public static Create(
      ctorTop        : GenericType * array[TypeParameterSymbol] -> GenericTypeSymbol,
      ctorNested     : GenericType * array[TypeParameterSymbol] -> GenericTypeSymbol,
      declaration    : GenericType,
      typeParameters : array[TypeParameterSymbol],
      parent         : NamespaceOrTypeSymbol
    ) : GenericTypeSymbol
    {
      //def err(loc : IAst, str : string) : void { AstContext.CompilerMessages.Error(loc, str); }
      def name = declaration.Name;
      def typeParametersCount = typeParameters.Length;
      def isPartial = declaration.IsPartial.ValueOrDefault;
      
      assert2(!declaration.TypeParameters.IsMissing);
      
      def ambiguous = List();
      
      mutable symbol = parent.NestedScope.TryGetSymbol(name);
      match (symbol)
      {
        | null => ()
        | ambig is IAmbiguousSymbol => 
          foreach (ambiguousSymbol in ambig.Ambiguous)
            ambiguous.Add(ambiguousSymbol);
          
        | _ => ambiguous.Add(symbol);
      }
      
      def candidates = List();
      
      // TODO: заменить ClassSymbol на параметр типа
      foreach (candidate in ambiguous)
        when (candidate is ClassSymbol as genericType) // is class?
          when (genericType.TypeParameters.Count == typeParametersCount)
            candidates.Add(genericType);
            
      def define()
      {
        def classSymbol = 
          if (declaration.Parent is NamespaceSymbol)
            ctorTop(declaration, typeParameters)
            else
              ctorNested(declaration, typeParameters);

        def realAmbiguous = ambiguous.OfType.[GenericTypeSymbol]().Where(s => s.TypeParameters.Count == typeParametersCount).ToList();
        when (realAmbiguous.Count > 0)
        {
          def cm = AstContext.CompilerMessages;
          using (nested = cm.RootError(name, $"The $(parent.Kind) '$(parent.FullName)' already contains a declaration for '$name'"))
            foreach (a in realAmbiguous)
              foreach (d in a.Declarations)
                nested.Hint(d.Name, "previous definition.");
        }     
        parent.DefineNestedSymbol(classSymbol, reportErrors=false);
        classSymbol
      }
            
      def classSymbol =
        if (candidates.Count() == 1 && candidates[0].IsPartial && isPartial)
          candidates[0] // merge
        else
          define();

      name.Symbol = classSymbol;
      classSymbol.Declarations ::= declaration;
      classSymbol
    }
    
    public this(declaration : GenericType, typeParameters : array[TypeParameterSymbol])
    {
      base(declaration.Name, declaration.Parent);
      TypeParameters = ReadOnlyCollection(typeParameters);
      IsPartial      = declaration.IsPartial.ValueOrDefault;
    }
    
    public IsPartial : bool { get; }
    
    public TypeParameters : ReadOnlyCollection[TypeParameterSymbol] { get; }

    public MakeBaseTypesScope(parentScope : Scope) : Scope
    {
      def typeParamScope = Scope.Table();
      
      foreach (typeParameter in TypeParameters)
        typeParamScope.DefineSymbol(typeParameter, reportErrors=true);
        
      Scope.Hide(typeParamScope, parentScope)
    }
    
    public override ToString() : string
    {
      def tp = if (TypeParameters.Count == 0) "" else $<#<..$(TypeParameters; ", "; x => x.Name.Text)>#>;
      def name = this.Name?.Text;
      $"$name$tp ($Kind)"
    }

    CollectConstraints(partsConstraints : array[TypeParameterConstraintsClause.IAstList]) : void
    {
      def symbolsMap = this.TypeParameters.ToDictionary(x => x, _ => List());

      foreach (constraintClauses in partsConstraints)
        foreach (constraintClause in constraintClauses)
          symbolsMap[constraintClause.Symbol :> TypeParameterSymbol].Add(constraintClause);
          
      foreach (x in symbolsMap)
        x.Key.UpdateConstraints(x.Value);
        
      foreach (x in symbolsMap)
        x.Key.Calc();
    }
    
    public override AfterStage(stage : int) : void
    {
      when (stage != 1)
        return;
      Debug.WriteLine(stage + ": " + this);
      //assert(true);

      when (Declarations.IsEmpty)
        return;
        
      //def err(ast : IAst,  msg : string) : void { AstContext.CompilerMessages.Error(ast, msg); }
      //def typeParameters = this.TypeParameters;
      
      // Оставляемм только те списски констрэйн-клаусов которы не пусты. В шарпе можно не задавать констрэйны в дополнительных частях partial-классов.
      def partsConstraints = Declarations.OfType.[GenericType]().Where(x => x.TypeParameterConstraints.Count > 0).MapToArray(x => x.TypeParameterConstraints);
      
      when (partsConstraints.Length == 0) // констрэйнов нет
        return;
      
      CollectConstraints(partsConstraints);
      
      /*  
      // находим констрэйн-клаусы для частей для которых задано меньшее их число.
      def maxConstraintCount = partsConstraints.Max(x => x.Count);
      def inconsistentParts = partsConstraints.Where(x => x.Count < maxConstraintCount).ToArray();
      
      when (inconsistentParts.Length > 0)
      {
        return;
      }
      
      // если констрэ
      
      //def 
      
      mutable hasCtorConstraint   = false;
      mutable hasClassConstraint  = false;
      mutable hasStructConstraint = false;
      def bases = HashSet();
      
      def first = Declarations.Head :> GenericType;
      
      foreach (constraintClause in first.TypeParameterConstraints with i)
      {
        def ptSymbol = constraintClause.Symbol;
        foreach (constraint in constraintClause.Constraints)
        {
          | Ctor   => hasCtorConstraint   = true;
          | Class  => hasClassConstraint  = true;
          | Struct => hasStructConstraint = false;
          | Base as currBase with baseSymbol = currBase.Symbol => 
            unless (bases.Add(baseSymbol))
              err(currBase, $"Duplicate constraint '$currBase' for type parameter '$(ptSymbol.Name)'");

          if (baseSymbol is ClassSymbol && i != 0)
            err(currBase, $"The class type constraint '$currBase' must come before any other constraints.");
          else when (!(baseSymbol is InterfaceSymbol || baseSymbol is TypeParameterSymbol || baseSymbol is ClassSymbol))
            err(currBase, $"'$currBase' is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.");
            
        }
      }
        
  
      /// */
    }
  }
}

