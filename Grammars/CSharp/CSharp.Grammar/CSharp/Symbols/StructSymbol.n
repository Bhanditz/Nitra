using Nitra;
using Nitra.Runtime.Binding;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp.Symbols
{
  [Record]
  public abstract class StructSymbol : TypeSymbol
  {
    public static Create(declaration : Type.Struct) : StructSymbol
    {
      def name = declaration.Name;
      def parent = declaration.Parent;

      // TODO: Add support of partial classes
      def classSymbol =
          if (declaration.Parent is NamespaceSymbol as p)
            TopStructSymbol(name, p)
          else
            NestedStructSymbol(name, declaration.Parent);

      parent.DefineNestedSymbol(classSymbol);
      classSymbol.Declarations ::= declaration;
      classSymbol
    }
  }
  
  [Record]
  public class TopStructSymbol : StructSymbol
  {
    public new Parent : NamespaceSymbol { get { (this : NamespaceOrTypeSymbol).Parent :> NamespaceSymbol } }
    
    public override Kind : string { get { "struct" } }
  }

  [Record]
  public class NestedStructSymbol : StructSymbol
  {
    public new Parent : TypeSymbol { get { (this : NamespaceOrTypeSymbol).Parent :> TypeSymbol } }
    
    public override Kind : string { get { "nested struct" } }
  }
}
