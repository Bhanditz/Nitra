using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp.Symbols
{
  [Record]
  public class NamespaceOrTypeSymbol : Symbol2
  {
    public Parent : NamespaceOrTypeSymbol { get; }
    
    [RecordIgnore] public Scope : Scope.Table { get; set; default Scope.Table(); }
    
    public static Init[TParent](name : IReference, parent : TParent, symbol : NamespaceOrTypeSymbol) : TParent
      where TParent: NamespaceOrTypeSymbol
    {
      assert2(name == null && parent == null || name != null && parent != null);
      
      when (parent != null)
        parent.Scope.Define(symbol);

      parent
    }

    public FullName : string
    {
      get
      {
        def loop(node : NamespaceOrTypeSymbol, sb : Text.StringBuilder) : void
        {
          when (node.Parent != null)
          {
            loop(node.Parent, sb);
            when (node.Parent.Parent != null)
              _ = sb.Append('.');
            _ = sb.Append(node.Name);
          }
        }
        
        def sb = Text.StringBuilder();
        loop(this, sb);
        sb.ToString()
      }
    }
  }
  
  public class NamespaceSymbol : NamespaceOrTypeSymbol
  {
    public static RootNamespace : NamespaceSymbol = NamespaceSymbol(null, null);

    public new Parent : NamespaceSymbol { get; }
    
    public this(name : IReference, parent : NamespaceSymbol)
    {
      base(name, parent);
      Parent = Init(name, parent, this);
    }

    public override ToString() : string { (if (Name == null) "<root>" else FullName) + " (namespace)" }
  }
}
