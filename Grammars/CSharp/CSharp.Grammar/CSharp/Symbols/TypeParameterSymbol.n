using Nitra;
using Nitra.Runtime.Binding;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace CSharp.Symbols
{
  public class TypeParameterSymbol : Symbol2
  {
    public static Create(typeParameterAst : TypeParameter, index : int, prevTypeParameters : IList[TypeParameterSymbol]) : TypeParameterSymbol
    {
      mutable prevSymbol;
      if (prevTypeParameters == null)
        prevSymbol = TypeParameterSymbol(typeParameterAst)
      else
      {
        prevSymbol = prevTypeParameters[index];
        when (prevSymbol.Name.Id != typeParameterAst.Name.Id)
          using (root = AstContext.CompilerMessages.RootError(typeParameterAst.Name, $"Type parameter name '$(typeParameterAst.Name)' differs from declared in other parts."))
            foreach (dec in prevSymbol.Declarations)
              root.Error(dec.Name, "Previous declaration.");
      }
      
      prevSymbol.Declarations ::= typeParameterAst;
      prevSymbol
    }
    
    public this(typeParameter : TypeParameter)
    {
      base(typeParameter.Name);
      this.Variance = typeParameter.Variance;
    }
    
    public override FullName        : string                { get { Name.Text } }
    public override Kind            : string                { get { "type parameter" } }
    public override SpanClass       : string                { get { "NitraCSharpType" } }
    public          Variance        : ParsedValue[Variance] { get; }
    
    public IsClass               : bool                                { get; private set; }
    public IsStruct              : bool                                { get; private set; }
    public HasDefaultConstructor : bool                                { get; private set; }
    public BaseClass             : ReadOnlyCollection[ClassSymbol]     { get; private set; }
    public Implements            : ReadOnlyCollection[InterfaceSymbol] { get; private set; }
    
    public UpdateConstraints(constraints : TypeParameterConstraintsClause.AstList) : void
    {
      def err(ast : IAst,  msg : string) : void { AstContext.CompilerMessages.Error(ast, msg); }
      mutable isClass = false;
      mutable isStruct = false;
      def bases = HashSet();
      
      foreach (constraint in constraints)
      {
        isClass  |= constraint.Class.HasValue;
        isStruct |= constraint.Struct.HasValue;

        foreach (currBase in constraint.Bases with i)
        {
          def sym = currBase.Symbol;
          if (sym is ClassSymbol && i != 0)
            err(currBase, $"The class type constraint '$currBase' must come before any other constraints.");
          else when (!(sym is InterfaceSymbol || sym is TypeParameterSymbol || sym is ClassSymbol))
            err(currBase, $"'$currBase' is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.");
            
          _ = bases.Add(currBase);
        }
      }
    }
  }
}
