using Nitra.Runtime.Binding;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp.Symbols
{
  [Record]
  public abstract class ClassSymbol : TypeSymbol
  {
    public static Create(declaration : Type.Class) : ClassSymbol
    {
      if (declaration.Parent is NamespaceSymbol as p)
        TopClassSymbol(declaration.Name, p, declaration)
      else
        NestedClassSymbol(declaration.Name, declaration.Parent :> TypeSymbol, declaration)
    }
  }
  
  public class TopClassSymbol : ClassSymbol
  {
    public new Parent : NamespaceSymbol { get; }
    
    public this(name : IReference, parent : NamespaceSymbol, declaration : Type.Class)
    {
      base(name, parent);
      Parent = Init(name, parent, this);
      Declarations ::= declaration;
    }

    public override ToString() : string { this.Name + " (class)" }
  }

  public class NestedClassSymbol : ClassSymbol
  {
    public new Parent : TypeSymbol { get; }
    
    public this(name : IReference, parent : TypeSymbol, declaration : Type.Class)
    {
      base(name, parent);
      Parent = Init(name, parent, this);
      Declarations ::= declaration;
    }

    public override ToString() : string { this.Name + " (nested class)" }
  }
}
