namespace CSharp
{
  syntax module CS6Expression
  {
    using CSharp.CS5;
    using CSharp.CS6Literals;

    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    using TopDeclarations;
    using Expressions;
    using Statements;
    using Literals;

    extend syntax Expression
    {
      | NameofExpression = "nameof" "(" NamedEntity=Expression ")"
      | InterpolatedRegularStringLiteral
      | InterpolatedVerbatimStringLiteral
      | Tuple = !("(" Expression ")") "(" (TupleArgument; "," sm)+ ")"
    precedence Primary:
      | NullConditional1 = Expression ^ Primary "?" "." QualifiedName=QualifiedIdentifierContinuation; 
      | NullConditional2 = Expression ^ Primary "?" "[" ArgumentList "]";      
    }

    extend syntax Argument
    {
      | OutVar      = ArgumentName? Modfier="out" sm LocalVariableType sm Name;
      | OutWildcard = ArgumentName? Modfier="out" sm Wildcard="*";
    }

    syntax TupleArgument
    {
      | Named   = Name !"::" ":" sm Expression;
      | Unnamed = Expression;
    }
  }
}
