namespace CSharp
{
  syntax module CS6Expression
  {
    using CSharp.CS5;

    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    using TopDeclarations;
    using Expressions;
    using Statements;
    using Literals;

    extend syntax Expression
    {
      | NameofExpression = "nameof" "(" NamedEntity=Expression ")"
      | InterpolatedRegularStringLiteral
    precedence Primary:
      | NullConditional1 = Expression ^ Primary "?" "." QualifiedName=QualifiedIdentifierContinuation; 
      | NullConditional2 = Expression ^ Primary "?" "[" ArgumentList "]";      
    }

    [SpanClass(String)]
    syntax InterpolatedRegularStringLiteral = "$" "\"" InterpolatedRegularStringLiteralPart* "\"";

    syntax InterpolatedRegularStringLiteralPart
    {
      | Interpolation1 = !"{{" "{" Expression "}"
      | Interpolation2 = !"{{" "{" Expression "," sm Expression "}"
      | OpenBraceEscapeSequence = "{{"
      | CloseBraceEscapeSequence = "}}"
      | ErrorOpenBrace
      | ErrorCloseBrace
      | SimpleEscapeSequenceStrPart           = SimpleEscapeSequence;
      | UnicodeEscapeSequenceStrPart          = UnicodeEscapeSequence;
      | HexadecimalEscapeSequenceStrPart      = HexadecimalEscapeSequence;
      | RegularStringLiteralCharacterSequence = (!InterpolatedNotAllowedRegularStringLiteralChar Any)+;
    }

    [SpanClass(Error)]
    regex ErrorOpenBrace = "{"; // TODO: Report an error 
    [SpanClass(Error)]
    regex ErrorCloseBrace = "}"; // TODO: Report an error 
    regex InterpolatedNotAllowedRegularStringLiteralChar = NotAllowedRegularStringLiteralChar | "{" | "}";
  }
}
