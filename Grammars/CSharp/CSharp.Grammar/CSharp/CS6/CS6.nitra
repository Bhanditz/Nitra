namespace CSharp
{
  syntax module CS6
  {
    using CSharp.CS5;

    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    using TopDeclarations;
    using Expressions;
    using Statements;
    using Literals;

    alias QualifiedName       = QualifiedIdentifier;

    extend syntax NamespaceMemberDeclaration
    {
      | UsingStaticDirective = "using" "static" QualifiedName ";" nl;
    }

    // Property Body
    extend syntax PropertyBody {
      | WithPropertyInitializer = nl outline_begin_before "{" inl AccessorDeclarations d "}" "=" VariableInitializer ";" nl outline_end_before;
      | WithExpression = nl outline_begin_before "=>" Expression ";" nl outline_end_before;
    }

    // Method Body
    extend syntax Body {
      | WithExpression = nl outline_begin_before "=>" Expression ";" nl outline_end_before;
    }

    extend syntax Expression
    {
      | InterpolatedStringLiteral
      | NameofExpression

    precedence Unary:
      | NullConditionalExpression
    }

    extend syntax CatchClause 
    { 
      | WithFilter = "catch"   sm (CatchExceptionFilter sm)? ExceptionFilter? Block;
    }
    
    syntax NullConditionalExpression = Expression NullConditionalOperations;

    syntax NullConditionalOperations 
    {
      | MemberAccess = NullConditionalOperations? "?" "." Reference TypeParameters?
      | ElementAccess = NullConditionalOperations? "?" "[" ArgumentList "]"

    precedence A:
      | MemberAccessB = NullConditionalOperations "." Reference TypeParameters?
      | ElementAccessB = NullConditionalOperations "[" ArgumentList "]"
      | Invocation = NullConditionalOperations "(" ArgumentList? ")"
    }

    [SpanClass(String)]
    token InterpolatedStringLiteral = "$" "\"" RegularStringLiteralPart* "\"";

    syntax ExceptionFilter = "when" "(" Expression ")";

    syntax NameofExpression = "nameof" "(" NamedEntity ")";
    
    syntax NamedEntity 
    {
      | QualifiedIdentifierPart
      | Target = NamedEntityTarget "." Reference TypeParameters?
    }

    syntax NamedEntityTarget
    {
      | This = "this"
      | Base = "base"
      | NamedEntity
      | PredefinedType
      | QualifiedIdentifier
    }
  }
}
