using Nitra.Declarations;
using Nitra.Staging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public sealed class ModifierSet : IStaged, IEquatable[ModifierSet]
  {
    public this(context : DependentPropertyEvalContext)
    {
      context.NotifyStagedObjectCreated(out CreatedOnStage, out CreatedOnIterationNumber);
    }

    public CreatedOnStage           : int  { get; }
    public CreatedOnIterationNumber : int  { get; }
    public IsEmpty                  : bool { get { _modifiers == Modifiers.None } }

    private mutable _modifiers : Modifiers;

    [StagedInit]
    public Add(modifiers : Modifiers) : void
    {
      _modifiers |= modifiers;
    }

    [StagedInit]
    public Add(modifiers : ModifierSet) : void
    {
      _modifiers |= modifiers.GetModifiers();
    }

    public GetModifiers() : Modifiers
    {
      _modifiers
    }

    public Contains(modifiers : Modifiers) : bool
    {
      _modifiers %&& modifiers
    }

    public override ToString() : string
    {
      $"$CreatedOnStage($CreatedOnIterationNumber): $_modifiers"
    }

    public Equals(other : ModifierSet) : bool
      implements IEquatable[ModifierSet].Equals
    {
      | null => false
      | _    => this._modifiers == other._modifiers
    }

    public override Equals(other : object) : bool
    {
      | ModifierSet as other => Equals(other)
      | _                    => false
    }

    public override GetHashCode() : int
    {
      _modifiers :> int
    }
  }
}
