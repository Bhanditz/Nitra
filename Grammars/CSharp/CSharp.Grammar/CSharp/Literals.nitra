namespace CSharp
{
  syntax module Literals
  {
    using Nitra.Core;

    using CSharp.TokenNames;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    regex DecimalDigit                        = ['0'..'9'];
    regex HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
    regex IntegerTypeSuffixTerminal           = ('U' | 'u') ('l' | 'L')? | ('l' | 'L') ('U' | 'u')?;
    regex IntegerTypeSuffix                   = IntegerTypeSuffixTerminal; // "UL" | "ul" | "uL" | "Ul" | "LU" | "lu" | "Lu" | "lU" | "U" | "u" | "L" | "l";
    [SpanClass(Number)]
    regex DecimalIntegerLiteral               = DecimalDigit+ IntegerTypeSuffix?;
    [SpanClass(Number)]
    regex HexadecimalIntegerLiteral           = ("0x" | "0X") HexDigit+ IntegerTypeSuffix?;
    [SpanClass(Number)]
    regex IntegerLiteral                      = HexadecimalIntegerLiteral | DecimalIntegerLiteral;

    regex RealTypeSuffix                      = "F" | "f" | "D" | "d" | "M" | "m";
    regex ExponentPart                        = ("E" | "e") ("-" | "+")? DecimalDigit+;
    regex RealLiteral_1                       = DecimalDigit* "." DecimalDigit+ ExponentPart? RealTypeSuffix?;
    regex RealLiteral_2                       = DecimalDigit+ ExponentPart RealTypeSuffix?;
    regex RealLiteral_3                       = DecimalDigit+ RealTypeSuffix;
    [SpanClass(Number)]
    regex RealLiteral                         = RealLiteral_1 | RealLiteral_2 | RealLiteral_3;

    regex UnicodeEscapeSequence_u             = "\\u" HexDigit HexDigit HexDigit HexDigit;
    regex UnicodeEscapeSequence_U             = "\\U" HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
    regex UnicodeEscapeSequence               = UnicodeEscapeSequence_u | UnicodeEscapeSequence_U;
    regex HexadecimalEscapeSequence           = "\\x" HexDigit HexDigit? HexDigit? HexDigit?;
    regex SimpleEscapeSequence                = "\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v";
    regex NotAllowedCharLiteralChar           = NewLineCharacter | "'" | "\\";
    token SingleCharacter   = !NotAllowedCharLiteralChar Any;

    token Character
    {
      | SimpleEscapeSequenceChar      = SimpleEscapeSequence;
      | UnicodeEscapeSequenceChar     = UnicodeEscapeSequence;
      | HexadecimalEscapeSequenceChar = HexadecimalEscapeSequence;
      | SingleCharacterChar           = SingleCharacter;
    }

    [SpanClass(Char)] token CharacterLiteral = "'" Character "'";

    regex NotAllowedRegularStringLiteralChar = NewLineCharacter | "\"" | "\\";

    token RegularStringLiteralPart
    {
      | SimpleEscapeSequenceStrPart           = SimpleEscapeSequence;
      | UnicodeEscapeSequenceStrPart          = UnicodeEscapeSequence;
      | HexadecimalEscapeSequenceStrPart      = HexadecimalEscapeSequence;
      | RegularStringLiteralCharacterSequence = (!NotAllowedRegularStringLiteralChar Any)+;
    }

    [SpanClass(String)]
    token RegularStringLiteral = "\"" RegularStringLiteralPart* "\"";

    regex DoubleQuote = "\"\"";

    token VerbatimStringLiteralPart
    {
      | QuoteEscapeSequence                     = DoubleQuote;
      | VerbatimStringLiteralCharacterSequence  = (!"\"" Any)+;
    }

    [SpanClass(String)]
    token VerbatimStringLiteral = OpenQuote = "@\"" VerbatimStringLiteralPart* CloseQuote = "\"";

    regex BooleanLiteral = "true" | "false";
  }
}
