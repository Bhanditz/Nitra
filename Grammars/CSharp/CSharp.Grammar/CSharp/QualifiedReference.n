using Nitra;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public class QualifiedReference
  {
    _nameParts            : array[Reference];
    public NamespaceAlias : Reference;
    public Span           : NSpan;
    public HashCode       : int;

    private this(namespaceAlias : Reference, nameParts : array[Reference], span : NSpan)
    {
      _nameParts     = nameParts;
      NamespaceAlias = namespaceAlias;
      Span           = span;

      mutable hashCode = 3001;
      when (namespaceAlias != null)
        hashCode ^= namespaceAlias.GetHashCode();

      foreach (namePart in _nameParts)
        hashCode ^= namePart.GetHashCode();

      HashCode = hashCode;
    }

    public static Create[T](nameParts : ListParseTree[T]) : QualifiedReference
      where T : ParseTree
    {
      Create(null, nameParts, nameParts.Location.Span)
    }

    public static Create[T](namespaceAlias : ParseTree, nameParts : ListParseTree[T], span : NSpan) : QualifiedReference
      where T : ParseTree
    {
      def namespaceAliasReference =
        if (namespaceAlias != null)
          Reference.Create(namespaceAlias)
        else
          null;

      def namePartReferences = array(nameParts.Length);
      foreach (namePart in nameParts with i)
        namePartReferences[i] = Reference.Create(namePart);

      QualifiedReference(namespaceAliasReference, namePartReferences, span)
    }
  }
}
