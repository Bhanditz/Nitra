using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.ProjectSystem;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  [Record]
  public sealed class TypeReference : ITypeReference, ILocated, IEquatable[TypeReference]
  {
    public File      : File                { get; }
    public Span      : NSpan               { get; }
    public Symbol    : IRef                { get; }
    public Arguments : list[TypeReference] { get; }

    public Name     : string { get { Symbol.Name } }
    public FullName : string
    {
      get
      {
        if (Arguments.IsEmpty)
          $<#$(Symbol.FullName)#>
        else
          $<#$(Symbol.FullName)[..$(Arguments; ", "; _.FullName)]#>
      }
    }

    public IsClass : bool
    {
      get
      {
        if (Symbol.IsSymbolEvaluated)
        {
          match (Symbol.Symbol)
          {
            | TopClassSymbol | NestedClassSymbol => true
            | _ => false
          }
        }
        else false
      }
    }

    public IsInterface : bool
    {
      get
      {
        if (Symbol.IsSymbolEvaluated)
        {
          match (Symbol.Symbol)
          {
            | TopInterfaceSymbol | NestedInterfaceSymbol => true
            | _ => false
          }
        }
        else false
      }
    }

    public IsTypeParameter : bool
    {
      get
      {
        if (Symbol.IsSymbolEvaluated)
        {
          match (Symbol.Symbol)
          {
            | TypeParameterSymbol => true
            | _ => false
          }
        }
        else false
      }
    }

    public override ToString() : string { FullName }

    public Equals(other : TypeReference) : bool
      implements IEquatable[TypeReference].Equals
    {
      | null => false
      | _ => this.Symbol.Equals(other.Symbol) && this.Arguments.Equals(other.Arguments)
    }

    public override Equals(other : object) : bool
    {
      | TypeReference as other => Equals(other)
      | _ => false
    }

    public override GetHashCode() : int
    {
      Symbol.GetHashCode() ^ Arguments.GetHashCode()
    }

    public static Create(r : IRef) : TypeReference
    {
      if (r.IsSymbolEvaluated)
      {
        match (r.Symbol)
        {
          | UsingAliasDirectiveSymbol(Type = originalType) => TypeReference(r.File, r.Span, originalType.Symbol, originalType.Arguments)
          | _ => TypeReference(r.File, r.Span, r, [])
        }
      }
      else
        TypeReference(r.File, r.Span, r, [])
    }

    public static Create(r : IRef, arguments : IList[TypeReference]) : TypeReference
    {
      TypeReference(r.File, r.Span, r, arguments.NToList())
    }
  }
}
