using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  [Record]
  [StructuralEquality]
  public class NType : ITypeReference
  {
    public this(symbol : ITypeReference) { Symbol = symbol; Arguments = []; }
    public this(symbol : ITypeReference, arguments : IList[ITypeReference]) { Symbol = symbol; Arguments = arguments.NToList(); }

    public Symbol : ITypeReference { get; }
    public Arguments : list[ITypeReference] { get; }

    public Name     : string { get { Symbol.Name } }
    public FullName : string
    {
      get
      {
        if (Arguments.IsEmpty)
          $<#$(Symbol.FullName)#>
        else
          $<#$(Symbol.FullName)[..$(Arguments; ", "; _.FullName)]#>
      }
    }

    public override ToString() : string { FullName }
  }
}
