namespace CSharp
{
  syntax module CS7
  {
    using CSharp.CS6;
    using CS6Expression;
    using CS6Literals;

    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    using Attributes;
    using TopDeclarations;
    using Expressions;
    using Statements;
    using Literals;
    using ObjectAndCollectionInitializers;

    alias Attributes    = AttributeSection*;
    alias QualifiedName = QualifiedIdentifier;

    ////////////////////////////////////////////////////////////
    // out var

    extend syntax Argument
    {
      | OutVar      = ArgumentName? Modfier="out" sm LocalVariableType sm Name;
      | OutWildcard = ArgumentName? Modfier="out" sm Wildcard="*";
    }

    // out var
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // Tuple

    extend syntax Expression
    {
      | Tuple = !("(" Expression ")") "(" (TupleArgument; "," sm)+ ")"
    }

    // [ExplicitSpaces] - inherited
    extend syntax TypeName
    {
      | Tuple = "(" s (TupleTypeField; s "," s sm)+ s ")"
    }

    [ExplicitSpaces]
    syntax TupleTypeField
    {
      | Named = AnyType s sm Name
      | Unnamed = AnyType
    }

    syntax TupleArgument
    {
      | Named   = Reference !"::" ":" sm Expression;
      | Unnamed = Expression;
    }

    // Tuple
    ////////////////////////////////////////////////////////////
  }
}
