 // TODO: Move the ast to DotNetLang

using Nitra;
using Nitra.Declarations;

using Nemerle.Collections;

namespace DotNet
{
  ast PatternMatching : Expr
  {
    TypeName.Scope = Scope;
    Expr1.Scope    = Scope;
    Type = PlatformTypes.Boolean;
  stage 1:
    out TypeNameRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();
    
    Expr1 : Expr;
    TypeName : QualifiedReference;
  }

  ast TupleExpr : Expr
  {
    Type = PlatformTypes.Object; // FIXME
    Fields : TupleExprField*;
  }

  abstract ast TupleExprField
  {
  stage 1:
    out Type : TypeSymbol = Expr.Type;

    Expr : Expr;
  }

  ast NamedTupleExprField : TupleExprField
  {
    Reference : Reference;
  }

  ast UnnamedTupleExprField : TupleExprField
  {
  }

  abstract ast TupleTypeField : BindableAst
  {
  stage 1:
    out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

    Type.Scope = Scope;

    Type : QualifiedReference;
  }

  ast UnnamedTupleField : TupleTypeField {}

  ast NamedTupleField : TupleTypeField
  {
    Name : Nitra.Declarations.Name; // TODO: Fix binding
  }

  ast TupleType : QualifiedReference
  {
    Ref = SC7Utils.MakeTupleRef(Location, context, Fields.TypeRef, Fields);
    Fields.Scope = Scope;
    when (Fields.Count == 1)
      Error(context, "Tuple must contain at least two elements.");

    Fields : TupleTypeField*;
  }
}
