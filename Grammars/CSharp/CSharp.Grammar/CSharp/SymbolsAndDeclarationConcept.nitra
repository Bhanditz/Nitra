// 1) типизированный Parent
// 2) наследование declartion
// 3) обеспечить порядок отображения, соответствующий порядку в ParseTree


using Nitra;
using Nitra.Runtime;
using Nitra.Internal;

namespace CSharp
{
  declaration Project // виртуальная деларация
  {
    GlobalNamespace                  = CreateGlabalNamespace();
    CompilationUnits.GlobalNamespace = GlobalNamespace;
    CompilationUnits.FakeIn          = 0;
    CompilationUnits.InScope         = PrepareScope(GlobalNamespace.Scope, CompilationUnits.FakeOut/*доступен после полного построения дерева типов*/);
    
    dependent GlobalNamespace  : NamespaceSymbol;
    CompilationUnits : CompilationUnit*;
  }

  declaration CompilationUnit : UsingSite
  {
    dependent GlobalNamespace  : NamespaceSymbol;

    Members.ParentNamespace = GlobalNamespace;
    Namespace = GlobalNamespace;
  }

  abstract declaration Scoped
  {
    inout Scope : Scope;
  }

  abstract declaration UsingSite : Scoped
  {
    UsingDirectives.ScopeIn      = this.ScopeIn;
    UsingDirectives.AliasTableIn = Scope.Table();
    UsingDirectives.OpenScopeIn  = [];
    Members.ScopeIn              = Hide(Union(this.ScopeIn, UsingDirectives.AliasTableOut), Union(UsingDirectives.OpenScopeOut));
    Members.FakeIn               = FakeIn;
    FakeOut                      = Namespace.Fake /*всегда равно 1*/ + Members.FakeOut; // количество добавленных символов
    Members.ParentNamespace      = Namespace;

    dependent Namespace : NamespaceSymbol;
    inout     Fake      : int;
    
    UsingDirectives     : UsingDirective*; // заполняется отображанием
    Members             : NamespaceMember*;
  }

  declaration Namespace : UsingSite
    where Parent : UsingSite
  {
    Name.ScopeIn    = this.ScopeIn;
    Members.ScopeIn = Hide(Union(this.ScopeIn, UsingDirectives.AliasTableOut), Union(UsingDirectives.OpenScopeOut));
    Namespace       = ParentNamespace.GetOrDefine(Name, this);

    dependent ParentNamespace : NamespaceSymbol;
    Name    : QualifiedReference;
  }

  declarations UsingDirective
    where Parent : UsingSite
  {
    inout AliasTable : Scope.Table;
    inout OpenScope : list[Scope];
    
    | Alias
      {
        AliasTableOut = AliasTableIn.Define(AliasSymbol(Name, this, ScopeIn.Bind(NamespaceOrTypeName)));
        
        Name                : Reference;
        NamespaceOrTypeName : QualifiedReference;
      }
    | Open
      {
        OpenScopeOut = ScopeIn.Bind(NamespaceOrTypeName).Scope) :: OpenScopeIn;
        
        NamespaceOrTypeName : QualifiedReference;
      }
  }

  symbol AliasSymbol : SingleDeclarationSymbol[UsingDirective.Alias]
  {
    NamespaceOrTypeSymbol : NamespaceTypeSymbol;
  }
  
  declarations Top
  {
    | Class
      {
        Name    : Reference;
        Members : Top*;
      }
    | Struct
      {
        Name    : Reference;
        Members : Top*;
      }
    | Interface
      {
        Name    : Reference;
        Members : Top*;
      }
    | Enum
      {
        Name    : Reference;
        Members : Top*;
      }
    | Delegate
      {
        Name    : Reference;
      }
    | Member
      {
      }
  }

  declare CompilationUnit from Main.CompilationUnit
  {
    Externs         <- ExternAliasDirectives;
    UsingDirectives <- UsingDirectives;
  }

  declare ExternAliasDirective from TopDeclarations.ExternAliasDirective
  {
    Name = Reference.Create(Name);
  }

  declare UsingDirective from TopDeclarations.UsingDirective
  {
    | Alias
      {
        Name                = Reference.Create(Name);
        NamespaceOrTypeName = DeclarationUtils.CreateQualifiedReference(QualifiedName);
      }
    | Open
      {
        NamespaceOrTypeName = DeclarationUtils.CreateQualifiedReference(QualifiedName);
      }
  }

  declare Top from TopDeclarations.NamespaceMemberDeclaration
  {
    | Namespace
      {
        Name = QualifiedReference.Create(NamespaceName.Identifiers.Item1);
        Externs         <- ExternAliasDirectives;
        UsingDirectives <- UsingDirectives;
        Members         <- NamespaceMemberDeclarations;
      }
  }

  declare Top from TopDeclarations.NamespaceMemberDeclaration.Type = TypeDeclaration.GetDeclaration(Parent);

  declare Top from TopDeclarations.TypeDeclaration
  {
    | Class
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(Parent, TypeBody.TypeMemberDeclarations);
      }
    | Struct
      {
        Name    = Reference.Create(StructHead.Name);
        Members = DeclarationUtils.MakeList(Parent, TypeBody.TypeMemberDeclarations);
      }
    | Interface
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(Parent, TypeBody.TypeMemberDeclarations);
      }
    | Enum
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(Parent, EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1);
      }
    | Delegate
      {
        Name    = Reference.Create(Name);
      }
  }

  declare Top from TopDeclarations.TypeMemberDeclaration
  {
    | Member from Method          {}
    | Member from Property        {}
    | Member from Field           {}
    | Member from Constant        {}
    | Member from Constructor     {}
    | Member from Event           {}
    | Member from SimpleEvent     {}
    | Member from Indexer         {}
    | Member from Destructor      {}
    | Member from FixedSizeBuffer {}
    | Member from Operator1       {}
    | Member from Operator2       {}
  }

  declare Top from TopDeclarations.TypeMemberDeclaration.NestedType = TypeDeclaration.GetDeclaration(Parent);

  declare Top.Member from TopDeclarations.EnumMemberDeclaration
  {
  }


  abstract symbol Symbol
  {
    [Key] Name  : Name;
    Declarations : Declaration[T]*;
  }

  abstract symbol SingleDeclarationSymbol[T] : Symbol  // Символ должен иметь 1-у декларацию.
  {
    Declaration : Declaration = Declarations[0];
  }

  symbol ZeroOrOneDeclarationSymbol[T] : SingleDeclarationSymbol[T]
  {
    Declaration : Declaration[T]? = if (Declarations.IsEmpty) None() : Some(Declarations[0]);  // Поддерживает 0 или 1-у декларацию.
  }
  
  abstract symbol MultyDeclarationSymbol[T] : Symbol // abstract допускает переопределение в наследниках. Запрещает создавать такой символ напрямую.
  {
  }

  symbol ZeroOrMenyDeclarationSymbol[T] : MultyDeclarationSymbol[T] // Поддерживает 0 или более деклараций. Допускает автоматическое создание символа (без деларации).
  {
    BindOrCreate(scope : Scope) : ZeroOrMenyDeclarationSymbol[T] { ... }
  }

  symbol OneOrMenyDeclarationSymbol[T] : MultyDeclarationSymbol[T] // Поддерживает 1 или более декларацию. 
  {
  }

  // автоматически создается при Scope.BindOrCreate()
  symbol NamespaceSymbol : ZeroOrMenyDeclarationSymbol[Namespace], NamespaceTypeSymbol
  {
    Parent : NamespaceSymbol;

    Scope : NamespaceBodyScope;
    
    
    GetOrDefine(name : Reference) : NamespaceSymbol
    {
      Scope.GetOrDefine(name);
    }

    ToScopeTree() : Scope
    {
      if (Parent == null) Scope.Nil() else Scope(this.Scope, Parent.ToScopeTree())
    }
  }
  
  symbol TypeSymbol : OneOrMenyDeclarationSymbol[TypeSymbol], NamespaceTypeSymbol
  {
  }
  
  abstract symbol NamespaceTypeSymbol
  {
  }
  
  scope NamespaceBodyScope
  {
    Namespaces : Scope[NamespaceSymbol];
    Types      : Scope[TypeSymbol];
  }

  scope GlobalScope : NamespaceBodyScope
  {
  }
}


