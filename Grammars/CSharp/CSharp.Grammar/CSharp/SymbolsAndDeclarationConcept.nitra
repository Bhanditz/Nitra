// 1) типизированный Parent
// 2) наследование declartion
// 3) обеспечить порядок отображения, соответствующий порядку в ParseTree


using Nitra;
using Nitra.Runtime;
using Nitra.Internal;

namespace CSharp
{
  declaration Declaration[T] where T: Declaration
  {
    Parent : T;
  }

  declaration Scoped
  {
    Scope         : Scope;
  }

  declaration CompilationUnit : UsingSite
  {
    this.Scope = GlobalScope;
    Externs         : ExternAliasDirective*;
    UsingDirectives : UsingDirective*;
  }

  declaration ExternAliasDirective
  {
    Name : Reference;
  }

  abstract declaration UsingSite : Scoped
  {
    Namespace : NamespaceSymbol;
    private UsingScope : Scope.Table = Scope.Table(); // 1
    private UsingOpenScope : List[Scope] = List(); // 2
    ChildrenScope : Scope = Scope.Union(UsingScope, Scope.Union(UsingOpenScope.NToList()));    // 3
    
    UsingDirectives : UsingDirective*; // заполняется отображанием
  }

  declarations UsingDirective
    where Parent : UsingSite
  {
    | Alias
      {
        Parent.UsingScope.Define(AliasSymbol(Name, this, Parent.Scope.Bind(NamespaceOrTypeName)));
        Name                : Reference;
        NamespaceOrTypeName : QualifiedReference;
      }
    | Open
      {
        Parent.UsingOpenScope.Add(Parent.Scope.Bind(NamespaceOrTypeName).Scope);
        NamespaceOrTypeName : QualifiedReference;
      }
  }

  declaration Namespace : UsingSite
    where Parent : UsingSite
  {
    this.Scope = Parent.UsingOpenScope;
    Namespace = Parent.Namespace.DefineOrDoNothingIfExists(Name);
    Namespace.Declarations.Add(this); // если что может поругаться на лишние декларации (для пространств имен не применимо)
    ChildrenScope = Scope.Hilde(Namespace.ToScopeTree(), Scope.Hilde(UsingScope, Parent.UsingScope));

    
    
    Name            : QualifiedReference;
    Externs         : ExternAliasDirective*;
    UsingDirectives : UsingDirective*;
    
    //ChildrenScope должен быть доступен здесь
    Members         : Top*;
  }

  symbol AliasSymbol : SingleDeclarationSymbol[UsingDirective.Alias]
  {
    NamespaceOrTypeSymbol : NamespaceTypeSymbol;
  }
  
  declarations Top
  {
    | Class
      {
        Name    : Reference;
        Members : Top*;
      }
    | Struct
      {
        Name    : Reference;
        Members : Top*;
      }
    | Interface
      {
        Name    : Reference;
        Members : Top*;
      }
    | Enum
      {
        Name    : Reference;
        Members : Top*;
      }
    | Delegate
      {
        Name    : Reference;
      }
    | Member
      {
      }
  }

  declare CompilationUnit from Main.CompilationUnit
  {
    Externs         <- ExternAliasDirectives;
    UsingDirectives <- UsingDirectives;
  }

  declare ExternAliasDirective from TopDeclarations.ExternAliasDirective
  {
    Name = Reference.Create(Name);
  }

  declare UsingDirective from TopDeclarations.UsingDirective
  {
    | Alias
      {
        Name                = Reference.Create(Name);
        NamespaceOrTypeName = DeclarationUtils.CreateQualifiedReference(QualifiedName);
      }
    | Open
      {
        NamespaceOrTypeName = DeclarationUtils.CreateQualifiedReference(QualifiedName);
      }
  }

  declare Top from TopDeclarations.NamespaceMemberDeclaration
  {
    | Namespace
      {
        Name = QualifiedReference.Create(NamespaceName.Identifiers.Item1);
        Externs         <- ExternAliasDirectives;
        UsingDirectives <- UsingDirectives;
        Members         <- NamespaceMemberDeclarations;
      }
  }

  declare Top from TopDeclarations.NamespaceMemberDeclaration.Type = TypeDeclaration.GetDeclaration(Parent);

  declare Top from TopDeclarations.TypeDeclaration
  {
    | Class
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(Parent, TypeBody.TypeMemberDeclarations);
      }
    | Struct
      {
        Name    = Reference.Create(StructHead.Name);
        Members = DeclarationUtils.MakeList(Parent, TypeBody.TypeMemberDeclarations);
      }
    | Interface
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(Parent, TypeBody.TypeMemberDeclarations);
      }
    | Enum
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(Parent, EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1);
      }
    | Delegate
      {
        Name    = Reference.Create(Name);
      }
  }

  declare Top from TopDeclarations.TypeMemberDeclaration
  {
    | Member from Method          {}
    | Member from Property        {}
    | Member from Field           {}
    | Member from Constant        {}
    | Member from Constructor     {}
    | Member from Event           {}
    | Member from SimpleEvent     {}
    | Member from Indexer         {}
    | Member from Destructor      {}
    | Member from FixedSizeBuffer {}
    | Member from Operator1       {}
    | Member from Operator2       {}
  }

  declare Top from TopDeclarations.TypeMemberDeclaration.NestedType = TypeDeclaration.GetDeclaration(Parent);

  declare Top.Member from TopDeclarations.EnumMemberDeclaration
  {
  }


  abstract symbol Symbol
  {
    [Key] Name  : Name;
    Declarations : Declaration[T]*;
  }

  abstract symbol SingleDeclarationSymbol[T] : Symbol  // Символ должен иметь 1-у декларацию.
  {
    Declaration : Declaration = Declarations[0];
  }

  symbol ZeroOrOneDeclarationSymbol[T] : SingleDeclarationSymbol[T]
  {
    Declaration : Declaration[T]? = if (Declarations.IsEmpty) None() : Some(Declarations[0]);  // Поддерживает 0 или 1-у декларацию.
  }
  
  abstract symbol MultyDeclarationSymbol[T] : Symbol // abstract допускает переопределение в наследниках. Запрещает создавать такой символ напрямую.
  {
  }

  symbol ZeroOrMenyDeclarationSymbol[T] : MultyDeclarationSymbol[T] // Поддерживает 0 или более деклараций. Допускает автоматическое создание символа (без деларации).
  {
    BindOrCreate(scope : Scope) : ZeroOrMenyDeclarationSymbol[T] { ... }
  }

  symbol OneOrMenyDeclarationSymbol[T] : MultyDeclarationSymbol[T] // Поддерживает 1 или более декларацию. 
  {
  }

  // автоматически создается при Scope.BindOrCreate()
  symbol NamespaceSymbol : ZeroOrMenyDeclarationSymbol[Namespace], NamespaceTypeSymbol
  {
    Parent : NamespaceSymbol;

    Scope : NamespaceBodyScope;
    
    
    DefineOrDoNothingIfExists(name : Reference) : void
    {
      Scope.DefineOrDoNothingIfExists(name);
    }

    ToScopeTree() : Scope
    {
      if (Parent == null) Scope.Nil() else Scope(this.Scope, Parent.ToScopeTree())
    }
  }
  
  symbol TypeSymbol : OneOrMenyDeclarationSymbol[TypeSymbol], NamespaceTypeSymbol
  {
  }
  
  abstract symbol NamespaceTypeSymbol
  {
  }
  
  scope NamespaceBodyScope
  {
    Namespaces : Scope[NamespaceSymbol];
    Types      : Scope[TypeSymbol];
  }

  scope GlobalScope : NamespaceBodyScope
  {
  }
}


