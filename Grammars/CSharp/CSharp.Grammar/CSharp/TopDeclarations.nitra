namespace CSharp
{
  syntax module TopDeclarations
  {
    using Outline;
    using PrettyPrint;
    using StandardSpanClasses;
    using Whitespaces;

    using CSharp.TokenNames;
    using Literals;
    using CSharp.CsIdentifiers;
    using Expressions;
    using Statements;
    using Types;
    using Attributes;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias Attributes          = AttributeSection*;
    alias QualifiedName       = QualifiedIdentifier;
    alias ConstantExpression  = Expression;
    alias Epsilon             = "";


    syntax ExternAliasDirective = "extern" sm "alias" sm Name ";"nl;

    syntax UsingDirective
    {
      | Alias = "using"sm Name sm "=" sm QualifiedName ";" nl;
      | Open  = "using"sm QualifiedName ";" nl;
    }

    syntax NamespaceMemberDeclaration
    {
      | Namespace = "namespace" sm NamespaceName outline_begin_before nl "{" inl ExternAliasDirective* UsingDirective* NamespaceMemberDeclaration* d "}" ";"? nl outline_end_before;
      | Type      = TypeDeclaration;
    }

    ////////////////////////////////////////////////////////////////////////////////////
    // TypeDeclaration

    syntax TypeBase = sm ":" sm (AnyType; "," sm)+;
    syntax Partial  = "partial"sm;

    // TODO: Make separate modifier lists for each kind of type declaration.

    syntax TypeDeclaration
    {
      | Class     = Attributes Modifiers Partial? "class"       sm         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
      | Struct    = Attributes Modifiers Partial? "struct"      sm         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
      | Interface = Attributes Modifiers Partial? "interface"   sm         Name TypeParameters? TypeBase? inl TypeParameterConstraintsClauses d TypeBody;
      | Enum      = Attributes Modifiers          "enum"        sm         Name                 EnumBase? nl                                    EnumBody;
      | Delegate  = Attributes Modifiers          "delegate"    sm AnyType Name TypeParameters? "(" FormalParameters ")" TypeParameterConstraintsClauses ";"nl;
    }

    syntax TypeBody = outline_begin_before "{" inl TypeMemberDeclaration* d "}" ";"? nl outline_end_before;
    syntax EnumBody = outline_begin_before "{" inl EnumMemberDeclarations d "}" ";"? nl outline_end_before;

    syntax TypeMemberDeclaration
    {
      | NestedType      = TypeDeclaration;
      | Method          = Attributes Modifiers Partial? MethodHeader Body;
      | Property        = Attributes Modifiers AnyType sm InterfaceType? Name PropertyBody;
      | Field           = Attributes Modifiers AnyType sm VariableDeclarators  ";" nl;
      | Constant        = Attributes Modifiers "const"sm AnyType sm ConstantDeclarators ";" nl;
      | Constructor     = Attributes Modifiers Name "(" FormalParameters ")" ConstructorInitializer? Body;
      | Event           = Attributes Modifiers "event"sm AnyType sm InterfaceType? Name nl "{" inl EventAccessorDeclarations d "}";
      | SimpleEvent     = Attributes Modifiers "event"sm AnyType sm VariableDeclarators ";" nl;
      | Indexer         = Attributes Modifiers AnyType sm  InterfaceType? "this" "[" FormalParameters "]" PropertyBody;
      | Destructor      = Attributes Modifiers "~" Name "(" FormalParameters ")" Body;
      | FixedSizeBuffer = Attributes Modifiers "fixed"sm AnyType sm (FixedSizeBufferDeclarator; ","sm)+ ";" nl;
      | OperatorUnary   = Attributes Modifiers AnyType sm "operator" sm OverloadableUnaryOperator  "(" AnyType sm Name ")" Body;
      | OperatorBinary  = Attributes Modifiers AnyType sm "operator" sm OverloadableBinaryOperator "(" AnyType sm Name "," sm AnyType sm Name ")" Body;
      | OperatorCnv     = Attributes Modifiers OperatorKind sm "operator" sm AnyType "(" FormalParameters ")" Body;
    }

    ////////////////////////////////////////////////////////////////////////////////////
    // Members

    syntax MethodHeader = AnyType sm InterfaceType? Name TypeParameters? "(" FormalParameters ")" TypeParameterConstraintsClauses?;

    syntax Body
    {
      | Block = nl outline_begin_before "{" inl Statement* d "}" ";"? nl outline_end_before;
      | Empty = ";" nl;
    }

    syntax PropertyBody = nl outline_begin_before "{" inl AccessorDeclarations d "}" nl outline_end_before;

    syntax FixedSizeBufferDeclarator = Name "[" ConstantExpression "]";

    // TODO: keyword choice detection will not work!
    regex OverloadableUnaryOperator  = "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false";
    regex OverloadableBinaryOperator = "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=";
    regex OverloadableOperator = "++" | "--" | "<<" | ">>" | "==" | "!=" | ">=" | "<=" | ">" | "<" | "true" | "false"
                                | "^" | "!" | "~" | "+" | "-" | "*" | "/" | "%" | "&" | "|";

    regex OperatorKind = "implicit" | "explicit";


    syntax GetAccessorDeclaration = Attributes Modifiers "get"sm Body;
    syntax SetAccessorDeclaration = Attributes Modifiers "set"sm Body;

    syntax AccessorDeclarations
    {
      | GetSet = GetAccessorDeclaration SetAccessorDeclaration?;
      | SetGet = SetAccessorDeclaration GetAccessorDeclaration?;
      | None   = Epsilon; // TODO: Add error handling here
    }

    syntax ConstructorInitializer
    {
      | This = sm ":" sm "this" "(" ArgumentList ")";
      | Base = sm ":" sm "base" "(" ArgumentList ")";
    }

    syntax EnumBase               = sm ":" sm AnyType;
    syntax EnumMemberDeclaration  = Attributes Name (sm "=" sm ConstantExpression)?;
    syntax EnumMemberDeclarations = (EnumMemberDeclaration; ","nl; ?)* nl;

    syntax AddAccessorDeclaration    = Attributes "add" sm    Body;
    syntax RemoveAccessorDeclaration = Attributes "remove" sm Body;

    syntax EventAccessorDeclarations
    {
      | AddRemove = AddAccessorDeclaration    RemoveAccessorDeclaration;
      | RemoveAdd = RemoveAccessorDeclaration AddAccessorDeclaration;
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // FormalParameters

    regex ParameterModifier = "ref" | "out" | "this" | "params";
    syntax DefaultArgument  = sm "=" Expression;
    syntax FormalParameter  = Attributes (ParameterModifier sm)? AnyType sm Name DefaultArgument?; // TODO: Add "__arglist"
    syntax FormalParameters = (FormalParameter; ","sm)*;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // Modifiers

    syntax Modifiers = Modifier*;

    syntax Modifier
    {
      | New       = "new"sm;
      | Public    = "public"sm;
      | Protected = "protected"sm;
      | Internal  = "internal"sm;
      | Private   = "private"sm;
      | Virtual   = "virtual"sm;
      | Volatile  = "volatile"sm;
      | Static    = "static"sm;
      | Readonly  = "readonly"sm;
      | Sealed    = "sealed"sm;
      | Override  = "override"sm;
      | Abstract  = "abstract"sm;
      | Extern    = "extern"sm;
      | Unsafe    = "unsafe"sm;
      | AsyncMod  = "async"sm; // C# 5
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////
  }
}
