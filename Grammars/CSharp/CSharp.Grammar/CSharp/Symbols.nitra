using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;
using System.Linq;

namespace CSharp
{
  declaration Project
  {
    CompilationUnits : CompilationUnit*;
  }

  declarations CompilationUnit
  {
    | CSharp
      {
        Externs         : ExternAliasDirective*;
        UsingDirectives : UsingDirective*;
      }
  }

  declarations QualifiedReference
  {
    | Simple
      {
        Name  : Reference;
      }
    | Aliased
      {
        Alias : Reference;
        Name  : Reference;
      }
    | Qualified
      {
        Qualifier : QualifiedReference;
        Name      : Reference;
      }
    | Generic
      {
        Name      : QualifiedReference;
        Arguments : QualifiedReference+;
      }
  }

  map syntax CsIdentifiers.QualifiedAlias -> Reference call Alias;

  map syntax CsIdentifiers.QualifiedIdentifier -> QualifiedReference =
  {
    assert(QualifiedIdentifierParts.Item1.Count > 0);

    def makeSpan(pt)
    {
      NSpan(Location.StartPos, pt.Location.EndPos)
    }

    mutable acc;

    foreach (part in QualifiedIdentifierParts.Item1)
    {
      if (acc != null)
      {
        acc = QualifiedReference.Qualified(
          Span      = makeSpan(part.Identifier),
          Qualifier = acc,
          Name      = part.Identifier.GetAst())
      }
      else if (QualifiedAliasOpt.HasValue)
      {
        acc = QualifiedReference.Aliased(
          Span  = makeSpan(part.Identifier),
          Alias = QualifiedAliasOpt.Value.GetAst(),
          Name  = part.Identifier.GetAst())
      }
      else
      {
        acc = QualifiedReference.Simple(
          Span = makeSpan(part.Identifier),
          Name = part.Identifier.GetAst())
      }

      when (part.QualifiedIdentifierPartTypeArgumentsOpt.HasValue)
      {
        def typeArguments = part.QualifiedIdentifierPartTypeArgumentsOpt.Value;
        def args =
          match (typeArguments)
          {
            | CsIdentifiersParseTree.QualifiedIdentifierPartTypeArguments.TypeArgumentList as x =>
              def args = array(x.AnyTypes.Item1.Count);
              foreach (anyType in x.AnyTypes.Item1 with index)
                args[index] = anyType.GetAst();
              args

            | CsIdentifiersParseTree.QualifiedIdentifierPartTypeArguments.OpenTypeArguments as x =>
              def args = array(x.RankSeparators.Count + 1);
              args[0] = IntrinsicUtils.CreateOpenTypeArgument(NSpan(x.OpenBrace.EndPos, x.OpenBrace.EndPos));
              foreach (rs in x.RankSeparators with index)
                args[index + 1] = IntrinsicUtils.CreateOpenTypeArgument(NSpan(rs.Location.EndPos, rs.Location.EndPos));
              args

            | _ => assert(false)
          };

        acc = QualifiedReference.Generic(
          Span      = makeSpan(typeArguments),
          Name      = acc,
          Arguments = QualifiedReference.AstList(typeArguments.Location.Span, args))
      }
    }

    acc
  };

  map syntax Types.TypeName -> QualifiedReference;
  map syntax Types.TypeName.QualifiedName  -> QualifiedReference call QualifiedIdentifier;
  map syntax Types.TypeName.PredefinedType -> QualifiedReference = IntrinsicUtils.CreatePredefinedTypeReference(PredefinedType, GetText(PredefinedType));

  map syntax Types.AnyNonArrayType -> QualifiedReference =
  {
    mutable acc = TypeName.GetAst();

    when (NullableSpecifierOpt.HasValue)
      acc = QualifiedReference.Generic(
        Span      = Location.Span,
        Name      = IntrinsicUtils.CreateQualifiedReference(Location.Span, array["System", "Nullable"]),
        Arguments = QualifiedReference.AstList(Location.Span, array[acc]));

    acc
  };

  map syntax Types.AnyType -> QualifiedReference =
  {
    mutable acc = AnyNonArrayType.GetAst();

    foreach (ts in TypeSpecifiers)
    {
      def span = NSpan(Location.StartPos, ts.Location.EndPos);
      def name =
        match (ts)
        {
          | TypesParseTree.TypeSpecifier.RankSpecifier as x =>
            def rank = x.RankSpecifier.RankSeparators.Count + 1;
            IntrinsicUtils.CreateQualifiedReference(span, array["#Array" + rank.ToString()])

          | TypesParseTree.TypeSpecifier.PointerSpecifier =>
            IntrinsicUtils.CreateQualifiedReference(span, array["#Pointer"])

          | _ => assert(false)
        };

      acc = QualifiedReference.Generic(
        Span      = span,
        Name      = name,
        Arguments = QualifiedReference.AstList(span, array[acc]))
    }

    acc
  };

  declaration ExternAliasDirective
  {
    Name   : Reference;
  }

  declarations UsingDirective
  {
    | Alias
      {
        Name                : Reference;
        NamespaceOrTypeName : QualifiedReference;
      }
    | Open
      {
        NamespaceOrTypeName : QualifiedReference;
      }
  }

  declarations Top
  {
    | Namespace
      {
        Path            : Reference*;
        name Name       : Reference;
        ExternAlias     : ExternAliasDirective*;
        UsingDirectives : UsingDirective*;
        Members         : Top*;
      }
    | Type
      {
        name Name : Reference;
        Members   : Top*;
      }
    | Member
      {
        //name Name : Reference;
      }
  }

  map syntax Main.CompilationUnit -> CompilationUnit.CSharp
  {
    ExternAliasDirectives -> Externs;
    UsingDirectives       -> UsingDirectives;
  }

  map syntax TopDeclarations.ExternAliasDirective -> ExternAliasDirective
  {
    Name -> Name;
  }

  map syntax TopDeclarations.UsingDirective -> UsingDirective
  {
    | Alias
      {
        Name          -> Name;
        QualifiedName -> NamespaceOrTypeName;
      }
    | Open
      {
        QualifiedName -> NamespaceOrTypeName;
      }
  }

  map syntax TopDeclarations.NamespaceMemberDeclaration -> Top
  {
    | Namespace
      {
        Name            = NamespaceName.Identifiers.Item1.Last().GetAst();
        Path            = null;
        ExternAliasDirectives       -> ExternAlias;
        UsingDirectives             -> UsingDirectives;
        NamespaceMemberDeclarations -> Members;
      }
    | Type call TypeDeclaration;
  }

  map syntax TopDeclarations.TypeDeclaration -> Top
  {
    | Class -> Type
      {
        Name                            -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Struct -> Type
      {
        StructHead.Name                 -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Interface -> Type
      {
        Name -> Name;
        TypeBody.TypeMemberDeclarations -> Members;
      }
    | Enum -> Type
      {
        Name                                                         -> Name;
        EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1 -> Members;
      }
    | Delegate -> Type
      {
        Name    -> Name;
        Members = Top.AstList(Location.Span, array[]);
      }
  }

  map syntax TopDeclarations.TypeMemberDeclaration -> Top
  {
    | NestedType      -> Type call TypeDeclaration;
    | Method          -> Member
    | Property        -> Member
    | Field           -> Member
    | Constant        -> Member
    | Constructor     -> Member
    | Event           -> Member
    | SimpleEvent     -> Member
    | Indexer         -> Member
    | Destructor      -> Member
    | FixedSizeBuffer -> Member
    | Operator1       -> Member
    | Operator2       -> Member
  }

  map syntax TopDeclarations.EnumMemberDeclaration -> Top.Member;
}
