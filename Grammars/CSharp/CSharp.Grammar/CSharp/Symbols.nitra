using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;
using Nitra.Internal;
using System.Linq;

namespace CSharp
{
  declaration Project
  {
    CompilationUnits : CompilationUnit*;
  }

  declarations CompilationUnit
  {
    | CSharp
      {
        Externs         : ExternAliasDirective*;
        UsingDirectives : UsingDirective*;
      }
  }

  declaration QualifiedIdentifier
  {
    Alias : Reference?;
    Parts : QualifiedIdentifierPart+;
  }

  declarations QualifiedIdentifierPart
  {
    Name          : Reference;
    | Simple            {                                   }
    | WithTypeArguments { Arguments : QualifiedIdentifier*; }
    | WithTypeRank      { Rank      : int;                  }
  }

  map syntax CsIdentifiers.QualifiedAlias -> Reference = Alias.GetAst(parent);

  map syntax CsIdentifiers.QualifiedIdentifier -> QualifiedIdentifier
  {
    QualifiedAliasOpt -> Alias;
    Parts = AstUtils.GetAstList(declaration, QualifiedIdentifierParts.Item1);
  }

  map syntax CsIdentifiers.QualifiedIdentifierPart -> QualifiedIdentifierPart =
  {
    if (QualifiedIdentifierPartTypeArgumentsOpt.HasValue)
    {
      match (QualifiedIdentifierPartTypeArgumentsOpt.Value)
      {
        | CsIdentifiersParseTree.QualifiedIdentifierPartTypeArguments.QualifiedIdentifierPartTypeArgumentList as x =>
          def declaration = QualifiedIdentifierPart.WithTypeArguments(parent, Location.Span);
          declaration.Initialize(Name = Identifier.GetAst(declaration), Arguments = QualifiedIdentifier.AstList(declaration, x.TypeArguments.Location.Span, array[]));
          declaration

        | CsIdentifiersParseTree.QualifiedIdentifierPartTypeArguments.QualifiedIdentifierPartOpenTypeArguments as x =>
          def declaration = QualifiedIdentifierPart.WithTypeRank(parent, Location.Span);
          declaration.Initialize(Name = Identifier.GetAst(declaration), Rank = x.RankSeparators.Count);
          declaration

        | _ => assert(false)
      }
    }
    else
    {
      def declaration = QualifiedIdentifierPart.Simple(parent, Location.Span);
      declaration.Initialize(Name = Identifier.GetAst(declaration));
      declaration
    }
  };

  declaration ExternAliasDirective
  {
    Name   : Reference;
  }

  declarations UsingDirective
  {
    | Alias
      {
        Name                : Reference;
        NamespaceOrTypeName : QualifiedIdentifier;
      }
    | Open
      {
        NamespaceOrTypeName : QualifiedIdentifier;
      }
  }

  declarations Top
  {
    | Namespace
      {
        Path            : Reference*;
        name Name       : Reference;
        ExternAlias     : ExternAliasDirective*;
        UsingDirectives : UsingDirective*;
        Members         : Top*;
      }
    | Type
      {
        name Name : Reference;
        Members   : Top*;
      }
    | Member
      {
        //name Name : Reference;
      }
  }

  map syntax Main.CompilationUnit -> CompilationUnit.CSharp
  {
    ExternAliasDirectives -> Externs;
    UsingDirectives       -> UsingDirectives;
  }

  map syntax TopDeclarations.ExternAliasDirective -> ExternAliasDirective
  {
    Name -> Name;
  }

  map syntax TopDeclarations.UsingDirective -> UsingDirective
  {
    | Alias
      {
        Name          -> Name;
        QualifiedName -> NamespaceOrTypeName;
      }
    | Open
      {
        QualifiedName -> NamespaceOrTypeName;
      }
  }

  map syntax TopDeclarations.NamespaceMemberDeclaration -> Top
  {
    | Namespace
      {
        Name            = NamespaceName.Identifiers.Item1.Last().GetAst(declaration);
        Path            = null;
        ExternAliasDirectives       -> ExternAlias;
        UsingDirectives             -> UsingDirectives;
        NamespaceMemberDeclarations -> Members;
      }
    | Type = TypeDeclaration.GetAst(parent);
  }

  map syntax TopDeclarations.TypeDeclaration -> Top
  {
    | Class -> Type
      {
        Name    -> Name;
        Members = AstUtils.GetAstList(declaration, TypeBody.TypeMemberDeclarations);
      }
    | Struct -> Type
      {
        Name    = StructHead.Name.GetAst(declaration);
        Members = AstUtils.GetAstList(declaration,TypeBody.TypeMemberDeclarations);
      }
    | Interface -> Type
      {
        Name    -> Name;
        Members = AstUtils.GetAstList(declaration, TypeBody.TypeMemberDeclarations);
      }
    | Enum -> Type
      {
        Name    -> Name;
        Members = AstUtils.GetAstList(declaration, EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1);
      }
    | Delegate -> Type
      {
        Name    -> Name;
        Members = Top.AstList(declaration, Location.Span, array[]);
      }
  }

  map syntax TopDeclarations.TypeMemberDeclaration -> Top
  {
    | NestedType      -> Type   = TypeDeclaration.GetAst(parent);
    | Method          -> Member {}
    | Property        -> Member {}
    | Field           -> Member {}
    | Constant        -> Member {}
    | Constructor     -> Member {}
    | Event           -> Member {}
    | SimpleEvent     -> Member {}
    | Indexer         -> Member {}
    | Destructor      -> Member {}
    | FixedSizeBuffer -> Member {}
    | Operator1       -> Member {}
    | Operator2       -> Member {}
  }

  map syntax TopDeclarations.EnumMemberDeclaration -> Top.Member
  {
  }
}
