// 1) типизированный parent
// 2) наследование declartion
// 3) обеспечить порядок отображения, соответствующий порядку в ParseTree


using Nitra;
using Nitra.Runtime;
using Nitra.Internal;

namespace CSharp
{
  // abstract ???
  declaration UsingSite
  {
    // Scope         : Scope;
    // ChildrenScope : Scope;
    UsingDirectives : UsingDirective*;
  }

  declaration CompilationUnit // : UsingSite
  {
     // this.Scope = GlobalScope;
    Externs         : ExternAliasDirective*;
    UsingDirectives : UsingDirective*;
  }

  declaration ExternAliasDirective
  {
    Name : Reference;
  }

  declarations UsingDirective// [UsingSite] ???
  // parent : UsingSite ???
  {
    | Alias
      {
        // parent.ChildrenScope.DefineSymbol(Name, parent.Scope.Bind(NamespaceOrTypeName));
        Name                : Reference;
        NamespaceOrTypeName : QualifiedReference;
      }
    | Open
      {
        // parent.ChildrenScope.Open(parent.Scope.Bind(NamespaceOrTypeName).Scope);
        NamespaceOrTypeName : QualifiedReference;
      }
  }

    declaration Namespace // : UsingSite
      // parent : UsingSite
    {
     // this.Scope = parent.ChildrenScope;
      Name            : QualifiedReference;
      Externs         : ExternAliasDirective*;
      UsingDirectives : UsingDirective*;
      Members         : Top*;
    }

  declarations Top
  {
    | Class
      {
        Name    : Reference;
        Members : Top*;
      }
    | Struct
      {
        Name    : Reference;
        Members : Top*;
      }
    | Interface
      {
        Name    : Reference;
        Members : Top*;
      }
    | Enum
      {
        Name    : Reference;
        Members : Top*;
      }
    | Delegate
      {
        Name    : Reference;
      }
    | Member
      {
      }
  }

  declare CompilationUnit from Main.CompilationUnit
  {
    Externs         <- ExternAliasDirectives;
    UsingDirectives <- UsingDirectives;
  }

  declare ExternAliasDirective from TopDeclarations.ExternAliasDirective
  {
    Name = Reference.Create(Name);
  }

  declare UsingDirective from TopDeclarations.UsingDirective
  {
    | Alias
      {
        Name                = Reference.Create(Name);
        NamespaceOrTypeName = DeclarationUtils.CreateQualifiedReference(QualifiedName);
      }
    | Open
      {
        NamespaceOrTypeName = DeclarationUtils.CreateQualifiedReference(QualifiedName);
      }
  }

  declare Top from TopDeclarations.NamespaceMemberDeclaration
  {
    | Namespace
      {
        Name = QualifiedReference.Create(NamespaceName.Identifiers.Item1);
        Externs         <- ExternAliasDirectives;
        UsingDirectives <- UsingDirectives;
        Members         <- NamespaceMemberDeclarations;
      }
  }

  declare Top from TopDeclarations.NamespaceMemberDeclaration.Type = TypeDeclaration.GetDeclaration(parent);

  declare Top from TopDeclarations.TypeDeclaration
  {
    | Class
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(parent, TypeBody.TypeMemberDeclarations);
      }
    | Struct
      {
        Name    = Reference.Create(StructHead.Name);
        Members = DeclarationUtils.MakeList(parent, TypeBody.TypeMemberDeclarations);
      }
    | Interface
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(parent, TypeBody.TypeMemberDeclarations);
      }
    | Enum
      {
        Name    = Reference.Create(Name);
        Members = DeclarationUtils.MakeList(parent, EnumBody.EnumMemberDeclarations.EnumMemberDeclarations.Item1);
      }
    | Delegate
      {
        Name    = Reference.Create(Name);
      }
  }

  declare Top from TopDeclarations.TypeMemberDeclaration
  {
    | Member from Method          {}
    | Member from Property        {}
    | Member from Field           {}
    | Member from Constant        {}
    | Member from Constructor     {}
    | Member from Event           {}
    | Member from SimpleEvent     {}
    | Member from Indexer         {}
    | Member from Destructor      {}
    | Member from FixedSizeBuffer {}
    | Member from Operator1       {}
    | Member from Operator2       {}
  }

  declare Top from TopDeclarations.TypeMemberDeclaration.NestedType = TypeDeclaration.GetDeclaration(parent);

  declare Top.Member from TopDeclarations.EnumMemberDeclaration
  {
  }
}
