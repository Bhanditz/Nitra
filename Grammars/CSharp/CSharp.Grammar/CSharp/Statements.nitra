namespace CSharp
{
  syntax module Statements
  {
    using Outline;
    using PrettyPrint;
    using StandardSpanClasses;
    using Whitespaces;

    using CSharp.TokenNames;
    using Literals;
    using CSharp.CsIdentifiers;
    using Expressions;
    using Types;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias Name                = DeclarationName;
    alias Reference           = Identifier;
    alias BooleanExpression   = Expression;
    alias ConstantExpression  = Expression;

    ////////////////////////////////////////////////////////////////////////////////////
    // Variables

    syntax VariableDeclarators = (VariableDeclarator; ","sm)+;
    syntax VariableDeclarator  = Name (sm "=" sm VariableInitializer)?;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // Constants

    syntax ConstantDeclarator  = Name sm "=" sm ConstantExpression;
    syntax ConstantDeclarators = (ConstantDeclarator; ","sm)*;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    //  Statement internals

    syntax Block    = nl "{" inl Statement* d "}" nl;

    syntax IndentedEmbeddedStatement
    {
      | Statement = !"{" (inl EmbeddedStatement d); // not a block statment
      | Block     = &"{" Stmt=Block;
    }

    syntax SwitchLabel
    {
      | Case    = "case" sm ConstantExpression ":"nl;
      | Default = "default" ":"nl;
    }

    syntax SwitchSection = SwitchLabel+ i Statement+ d;

    syntax LocalVariableDeclaration = LocalVariableType sm VariableDeclarators; // local-variable-declaration

    syntax ForInitializer
    {
      | Var = LocalVariableDeclaration;
      | List = (Expression; ","sm)+;
    }

    syntax ForIterator = (Expression; ","sm)+;

    alias  ForCondition            = Expression;

    syntax LocalVariableType
    {
      | Var = "var"
      | Type = !"var" AnyType;
    }

    [ExplicitSpaces]
    syntax CastPredicate
    {
      | CastPredicate01 = '~';
      | CastPredicate02 = '!' !'=';
      | CastPredicate03 = '&' !'=';
      | CastPredicate04 = '&' !'&';
      | CastPredicate05 = '(';
      | CastPredicate06 = !("as"S) IdentifierStartCharacter;
      | CastPredicate07 = !("is"S) IdentifierStartCharacter;
      | CastPredicate08 = '@';
      | CastPredicate09 = IntegerLiteral;
      | CastPredicate10 = CharacterLiteral;
      | CastPredicate11 = BooleanLiteral S;
      | CastPredicate12 = RegularStringLiteral;
      | CastPredicate13 = "null" S;
      | CastPredicate14 = RealLiteral;
    }

    syntax ResourceAcquisition
    {
      | LocalVar   = LocalVariableDeclaration /* &")" */;
      | Expression;
    }

    syntax CatchExceptionFilter = "(" AnyType Name = (sm Identifier)? ")";
    syntax CatchClause   = "catch"   sm (CatchExceptionFilter sm)? Block;
    syntax FinallyClause = "finally" sm Block;

    //  Statement internals
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    //  Statements

    syntax Statement
    {
      | Labeled           = Name ":" sm Statement;
      | LocalVariable     = LocalVariableDeclaration ";"nl;
      | LocalConstant     = "const" sm AnyType ConstantDeclarators ";"nl;
      | EmbeddedStatement;
    }

    syntax EmbeddedStatement
    {
      | Empty       = ";" nl;
      | Block;
      | ExpressionStatement = Expression ";" nl;

      // selection-statement
      | If          = "if" sm "(" BooleanExpression ")" IndentedEmbeddedStatement ("else" IndentedEmbeddedStatement)?;
      | Switch      = "switch" sm "(" Expression ")"nl "{" inl SwitchSection* d "}" nl;
      // iteration-statement
      | While       = "while" sm "(" BooleanExpression ")" IndentedEmbeddedStatement;
      | Do          = "do" nl IndentedEmbeddedStatement "while" sm "(" BooleanExpression ")" ";" nl;
      | For         = "for" "(" ForInitializer? ";"sm ForCondition? ";"sm ForIterator? ")" IndentedEmbeddedStatement;
      | Foreach     = "foreach" "(" LocalVariableType sm Name sm "in" sm Expression ")" IndentedEmbeddedStatement;

      | Checked     = "checked" sm   Block; // checked-statement
      | Unchecked   = "unchecked" sm Block; // unchecked-statement

      | Lock        = "lock" sm  "(" Expression ")"          IndentedEmbeddedStatement; // lock-statement
      | Using       = "using" sm "(" ResourceAcquisition ")" IndentedEmbeddedStatement; // using-statement

      | YieldReturn = "yield" sm "return" sm Expression ";"nl; // try-statement
      | YieldBreak  = "yield" sm "break"    ";"nl;             // try-statement

      | TryCatch    =  "try" sm Block CatchClause+ FinallyClause?;
      | TryFinally  =  "try" sm Block FinallyClause;


      // jump-statement
      | Break                 = "break"                                 ";" nl;
      | Continue              = "continue"                              ";" nl;
      | GotoCase    = "goto" sm "case"sm   ConstantExpression  ";" nl;
      | GotoDefault = "goto" sm "default"                      ";" nl;
      | GotoId      = "goto" sm            Label=Reference     ";" nl;
      | Return                = "return"sm          Expression          ";" nl;
      | ReturnVoid  = "return"                                ";" nl;
      | Throw       = "throw" sm           Expression?         ";" nl;

      // Unsafe
      | Unsafe      = "unsafe" Block; // unsafe
      | Fixed       = "fixed" sm "(" LocalVariableType sm VariableDeclarators ")"nl IndentedEmbeddedStatement; // unsafe
    }
  }
}
