using CSharp.Symbols;
using Nitra;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  module Utils
  {
    public EnterNamespace(mutable ns : NamespaceSymbol, path : Reference.IAstList, namespaceDeclaration : Namespace) : NamespaceSymbol
    {
      def lastIndex = path.Count - 1;
      foreach (name in path with i)
      {
        mutable symbol = ns.Scope.TryGetSymbol(name);
        when (symbol == null)
        {
          def namespaceSymbol = NamespaceSymbol(name, ns);
          name.Symbol = namespaceSymbol;
          ns.DefineNestedSymbol(namespaceSymbol);
          symbol = namespaceSymbol;
        }
        when (i == lastIndex)
          symbol.Declarations ::= namespaceDeclaration;
          
        ns = (symbol :> NamespaceSymbol);
      }
      
      ns
    }
    
    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def parent = ns.Parent;
        def scope  = ns.Scope;
        
        if (parent == parentNs)
          Scope.Hide(scope, parentScope)
        else
          Scope.Hide(scope, buildEnterNsScope(parent))
      }
      
      buildEnterNsScope(enteredNs)
    }
  }
}
