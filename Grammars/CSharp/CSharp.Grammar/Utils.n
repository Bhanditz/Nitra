using Nitra;
using Nitra.ProjectSystem;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  module Utils
  {
    public CreateOpenTypeArgument(file : File, span : NSpan) : QualifiedReference
    {
      QualifiedReference.Simple(File = file, Span = span, Name = Reference(file, span, "#"))
    }

    public CreateMissingQualifiedReference(file : File, span : NSpan) : QualifiedReference
    {
      QualifiedReference.Simple(
        File = file,
        Span = span,
        Name = Reference.AmbiguousOrMissing(file, span))
    }

    public MakeMembersScope(currentScope : Scope, opening : list[Scope], aliases : TableScope) : Scope
    {
      def makeCurrentScope(scope : Scope) : Scope
      {
        def withAliases =
          if (aliases.Symbols.Count == 0)
            scope
          else
            scope.UnionWith(aliases);

        def withUsings =
          match (opening)
          {
            | []    => withAliases
            | [one] => one.HideWith(withAliases)
            | _     => Scope.Union(opening).HideWith(withAliases)
          };

        withUsings
      }

      if (currentScope is HidingScope as h)
        h.Hidden.HideWith(makeCurrentScope(h.Scope))
      else
        makeCurrentScope(currentScope)
    }

    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def parent = ns.Parent;
        def scope  = ns.Scope;

        if (parent : object == parentNs)
          parentScope.HideWith(scope)
        else
          buildEnterNsScope(parent).HideWith(scope)
      }
      
      buildEnterNsScope(enteredNs)
    }

    [Memoize]
    public TypeOverloadResolution(argumentsCount : int) : ResolutionAlgorithm[ISymbol2, ISymbol2]
    {
      def resolve(candidate : ISymbol2) : ValueOption[ISymbol2]
      {
        | symbol is BuiltInTypeAliasSymbol    when symbol.IsTypeEvaluated                       => resolve(symbol.Type)
        | symbol is UsingAliasDirectiveSymbol when argumentsCount == 0                          => VSome(symbol)
        | symbol is TypeParameterAliasSymbol  when symbol.IsTypeParameterEvaluated              => resolve(symbol.TypeParameter)
        | symbol is TypeParameterSymbol       when argumentsCount == 0                          => VSome(symbol)
        | symbol is NamespaceSymbol           when argumentsCount == 0                          => VSome(symbol)
        | symbol is GenericTypeSymbol         when argumentsCount == symbol.TypeParametersCount => VSome(symbol)
        | _ => VNone()
      }
      resolve
    }

    private _noTypeParameters : array[TypeParameterSymbol] = array(0);

    public CreateTypeParameters(count : int) : array[TypeParameterSymbol]
    {
      if (count == 0)
        _noTypeParameters
      else
      {
        def result = array(count);
        for (mutable i = 0; i < result.Length; ++i)
          result[i] = TypeParameterSymbol();
        result
      }
    }

    public GetTypeParametersCount(declarations : Seq[GenericEntity]) : int
    {
      declarations.FirstOrDefault()?.TypeParameterAliases?.Count
    }

    public GetTypeParameter(alias : TypeParameterAlias, typeParameterSymbols : IList[TypeParameterSymbol], IndexIn : int) : TypeParameterSymbol
    {
      def typeParameterSymbol = typeParameterSymbols[IndexIn];
      typeParameterSymbol.AddAliasSymbol(alias);
      typeParameterSymbol
    }
  }
}
