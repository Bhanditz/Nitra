using Nemerle.Parser;

syntax module CalcGrammar
{
  token field OpenBracket  = "(";
  token field CloseBracket = ")";
  token field OpenBrace    = "{";
  token field CloseBrace   = "}";
  token field Op           = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%";

  span class Number;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBracket  = "(" | "{";
  span class CloseBracket = ")" | "}";

  brackets "(", ")";
  brackets "{", "}";

  option EmitDebugSources = true;

  using IncGrammar;
  using NumParser;

  token any = ['\u0000'..'\uFFFF'];
  syntax s : void = ' '*;

  [StartRule, Ast(expr)]
  syntax start : Ast = s expr !any;

  [StartRule, Ast()]
  syntax expr : Ast;

  [Ast(_, _, _)] syntax rounds is expr = '('s expr ')'s;
  [Ast(_, expr, _)] syntax seq    is expr = '{'s expr* '}'s;

  [SpanClass(Number)]
  [Ast(num)]        syntax num is expr = number s;

  [Ast(_, _)]   syntax neg is expr = '-'s expr : 100;

  [Ast(_, _)]   syntax prefixDec is expr = "--"s expr : 200;
  [Ast(_, _)]   syntax postfixDec is expr = expr : 200 "--"s;

  [Ast(_, _, _)]   syntax add is expr = expr : 10 '+'s expr : 10;
  [Ast(_, _, _)]   syntax sub is expr = expr : 10 '-'s expr : 10;
  [Ast(_, _, _)]   syntax mul is expr = expr : 20 '*'s expr : 20;
  [Ast(_, _, _)]   syntax div is expr = expr : 20 '/'s expr : 20;
  [Ast(_, _, _)]   syntax mod is expr = expr : 20 '%'s expr : 20;
  [Ast(_, _, _)]   syntax pow is expr = expr : 31 '^'s expr : 30;

  [Ast(_, _, _, _, _)]   syntax cond is expr = expr : 301 '?'s expr ':'s expr;

  [Ast(l, CoalescingOp, r)]     syntax coalescing  is expr = expr : 401 "??"s expr : 400;
}

syntax module IncGrammar
{
  using cp = CalcGrammar;

  [Ast(op, expr)] syntax plus is cp.expr = '+'cp.s cp.expr : 100;
  [Ast(op, expr)] syntax prefixInc is cp.expr = "++"cp.s cp.expr : 200;
  [Ast(expr, op)] syntax postfixInc is cp.expr = cp.expr : 200 "++"cp.s;
}
