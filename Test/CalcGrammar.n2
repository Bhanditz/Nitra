using Nemerle.Parser;

syntax module CalcGrammar
{
  token field OpenBracket  = "(";
  token field CloseBracket = ")";
  token field OpenBrace    = "{";
  token field CloseBrace   = "}";
  token field Op           = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  span class Number;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':', '%']+;
  span class OpenBracket  = "(" | "{";
  span class CloseBracket = ")" | "}";

  brackets "(", ")";
  brackets "{", "}";

  option EmitDebugSources = true;

  using IncGrammar;
  using NumParser;

  token any = ['\u0000'..'\uFFFF'];
  void s = ' '*;

  [StartRule]
  syntax start       = s expr !any;

  [StartRule]
  syntax expr;

  syntax rounds is expr = '('s expr ')'s;
  syntax seq    is expr = '{'s expr* '}'s;

  [SpanClass(Number)]
  syntax num is expr = number s;

  syntax neg is expr = '-'s expr : 100;

  syntax prefixDec is expr = "--"s expr : 200;
  syntax postfixDec is expr = expr : 200 "--"s;

  // We can redefine names for fields in any time.
  token field Operator = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  syntax add is expr = expr : 10 '+'s expr : 10 { precedence 10; }
  syntax sub is expr = expr : 10 '-'s expr : 10 { precedence 10; }
  syntax mul is expr = expr : 20 '*'s expr : 20 { precedence 20; }
  syntax div is expr = expr : 20 '/'s expr : 20 { precedence 20; }
  syntax mod is expr = expr : 20 '%'s expr : 20 { precedence 20; }
  syntax pow is expr = expr : 31 '^'s expr : 30 { precedence 30 right-associative; }

  [Ast(Condition, _, _, Colon, _)]
  syntax cond is expr = expr : 301 '?'s expr ':'s expr;

  syntax coalescing  is expr = expr : 401 "??"s expr : 400;
}

syntax module IncGrammar
{
  using cp = CalcGrammar;
  using CalcGrammar;

  syntax plus is cp.expr = '+'cp.s cp.expr : 100;
  syntax prefixInc is cp.expr = "++"cp.s cp.expr : 200;
  syntax postfixInc is cp.expr = cp.expr : 200 "++"cp.s;
}
