using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Parser;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using SCG = System.Collections.Generic;
using System.Console;
using System.Linq;

abstract class ExprAst : Located
{
}

[ParserGrammar(Options = EmitDebugSources,
  grammar
  {
    using IncParser;
    using NumParser;

    any = ['\u0000'..'\uFFFF'];
    s : void = ' '*;

    [StartRule]
    start : ExprAst = s expr !any;

    [StartRule]
    expr : ExprAst;

    [Ast(l, expr, r)] rounds is expr = '('s expr ')'s;
    [Ast(l, expr, r)] seq is expr = '{'s expr* '}'s;

    [Ast(num)]        num is expr = number s;

    [Ast(op, expr)]   neg is expr = '-'s expr : 100;

    [Ast(op, expr)]   prefixDec is expr = "--"s expr : 200;
    [Ast(expr, op)]   postfixDec is expr = expr : 200 "--"s;

    [Ast(l, op, r)]   add is expr = expr : 10 '+'s expr : 10;
    [Ast(l, op, r)]   sub is expr = expr : 10 '-'s expr : 10;
    [Ast(l, op, r)]   mul is expr = expr : 20 '*'s expr : 20;
    [Ast(l, op, r)]   div is expr = expr : 20 '/'s expr : 20;
    [Ast(l, op, r)]   mod is expr = expr : 20 '%'s expr : 20;
    [Ast(l, op, r)]   pow is expr = expr : 31 '^'s expr : 30;
  }
)]
abstract class CalcParser
{}

[ParserGrammar(Options = EmitDebugSources,
  grammar
  {
    using CalcParser;
    //using cp = CalcParser;

    [Ast(op, expr)] plus is expr = '+'s expr : 100;
    [Ast(op, expr)] prefixInc is expr = "++"s expr : 200;
    [Ast(expr, op)] postfixInc is expr = expr : 200 "++"s;
  }
)]
abstract class IncParser
{
}

module Program
{
  Main() : void
  {
    def print(text)
    {
      def parser = CalcParser.GrammarImpl();
      match (parser.ParseStart(text))
      {
        | None      =>
          WriteLine($"Fail: \"$text\"");
          def (pos, rules) = parser.Parser.GetErrors();
          foreach (rule in rules)
            WriteLine($"  $pos $(rule.Grammar.Name).$(rule.Name)");
        | Some(ast) =>
          def printAst(ast : ExprAst)
          {
            match (ast)
            {
              | CalcParser.Expr.Rounds(_, ast, _) => $"( $(printAst(ast)) )"
              | CalcParser.Expr.Seq(_, asts, _)   => $<#{ ..$(asts; " ; "; printAst(_)) }#>
              | CalcParser.Expr.Num(num)          => $"$num"
              | CalcParser.Expr.Neg(_, v)         => $"[ - $(printAst(v)) ]"
              | CalcParser.Expr.PrefixDec(_, v)   => $"[ -- $(printAst(v)) ]"
              | CalcParser.Expr.PostfixDec(v, _)  => $"[ $(printAst(v)) -- ]"
              | CalcParser.Expr.Add(l, _, r)      => $"[ $(printAst(l)) + $(printAst(r)) ]"
              | CalcParser.Expr.Sub(l, _, r)      => $"[ $(printAst(l)) - $(printAst(r)) ]"
              | CalcParser.Expr.Mul(l, _, r)      => $"[ $(printAst(l)) * $(printAst(r)) ]"
              | CalcParser.Expr.Div(l, _, r)      => $"[ $(printAst(l)) / $(printAst(r)) ]"
              | CalcParser.Expr.Mod(l, _, r)      => $"[ $(printAst(l)) % $(printAst(r)) ]"
              | CalcParser.Expr.Pow(l, _, r)      => $"[ $(printAst(l)) ^ $(printAst(r)) ]"

              | IncParser.Expr.Plus(_, v)         => $"[ + $(printAst(v)) ]"
              | IncParser.Expr.PrefixInc(_, v)    => $"[ ++ $(printAst(v)) ]"
              | IncParser.Expr.PostfixInc(v, _)   => $"[ $(printAst(v)) ++ ]"
            }
          }
          WriteLine($"Ok:   \"$text\" AST: $(printAst(ast))");
      }
    }
    print("1+2+3");
    print("1+2*3");
    print("1*2-3");
    print("1^2^3");
    print("1*2^3");
    print("1^2*3");
    print("-1+2+3");
    print("1+-2*3");
    print("1*2--3");
    print("1*(2--3)");
    print("1*2- -3");
    print("1*(2- -3)");
    print("1^2^-3");
    print("1*-2^3");
    print("1*-(2^3)");
    print("(1*-2)^3");
    print("-1^2*3");

    print("1-----3");
    print("1----3");
    print("1---3");
    print("1--3");
    print("1-3");
    print("1+2-----3");
    print("1+2----3");
    print("1+2---3");
    print("1+2--3");
    print("1+2-3");

    print("---3");
    print("----3");

    print("+3");
    print("++3");
    print("+++3");
    print("++++3");
    print("+++++3");
    print("1+3");
    print("1++3");
    print("1+++3");
    print("1++++3");
    print("1+++++3");
    print("1.23-4.3");
    print("a+3");
    print("{1+3 2+3 {4 1-2}}");

    _ = ReadKey();
  }
}