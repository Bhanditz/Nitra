using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Parser;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using SCG = System.Collections.Generic;
using System.Console;
using System.Linq;

[assembly: Nemerle.Parser.N2Source("CalcGrammar.n2")]
[assembly: Nemerle.Parser.N2Source("EmptyParser.n2")]
[assembly: Nemerle.Parser.N2Source("LambdaParser.n2")]

module Program
{
  Main() : void
  {
    def print(text)
    {
      def parser = CalcGrammar.GrammarImpl();
      match (parser.ParseStart(text))
      {
        | None      =>
          WriteLine($"Fail: \"$text\"");
          def (pos, tokens) = parser.Parser.GetErrors();
          def (line, pos) = parser.ParsingSource.PositionToLineColumn(pos);
          foreach (token in tokens)
            WriteLine($"  $line:$pos expected \"$(token.Name)\" in rule $(token.Rule.Grammar.Name).$(token.Rule.Name)");

        | Some(CalcGrammar.Start.Ast(ast)) =>
          def printAst(ast : CalcGrammar.Expr)
          {
            match (ast)
            {
              | CalcGrammar.Rounds.Ast(_, ast, _) => $"( $(printAst(ast)) )"
              | CalcGrammar.Seq.Ast(_, asts, _)   => $<#{ ..$(asts; " ; "; printAst(_)) }#>
              | CalcGrammar.Num.Ast(num)          => $"$(num.GetText((num :> NumParser.Number.Ast).number))"
              | CalcGrammar.Neg.Ast(_, v)         => $"[ - $(printAst(v)) ]"
              | CalcGrammar.PrefixDec.Ast(_, v)   => $"[ -- $(printAst(v)) ]"
              | CalcGrammar.PostfixDec.Ast(v, _)  => $"[ $(printAst(v)) -- ]"
              | CalcGrammar.Add.Ast(l, _, r)      => $"[ $(printAst(l)) + $(printAst(r)) ]"
              | CalcGrammar.Sub.Ast(l, _, r)      => $"[ $(printAst(l)) - $(printAst(r)) ]"
              | CalcGrammar.Mul.Ast(l, _, r)      => $"[ $(printAst(l)) * $(printAst(r)) ]"
              | CalcGrammar.Div.Ast(l, _, r)      => $"[ $(printAst(l)) / $(printAst(r)) ]"
              | CalcGrammar.Mod.Ast(l, _, r)      => $"[ $(printAst(l)) % $(printAst(r)) ]"
              | CalcGrammar.Pow.Ast(l, _, r)      => $"[ $(printAst(l)) ^ $(printAst(r)) ]"
              | CalcGrammar.Coalescing.Ast(l, _, r) => $"[ $(printAst(l)) ?? $(printAst(r)) ]"
              | CalcGrammar.Cond.Ast(cond, _, l, _, r)      => $"[ $(printAst(cond)) ? $(printAst(l)) : $(printAst(r)) ]"

              | IncGrammar.Plus.Ast(_, v)         => $"[ + $(printAst(v)) ]"
              | IncGrammar.PrefixInc.Ast(_, v)    => $"[ ++ $(printAst(v)) ]"
              | IncGrammar.PostfixInc.Ast(v, _)   => $"[ $(printAst(v)) ++ ]"
              | _ => assert(false);
            }
          }
          Console.ForegroundColor = ConsoleColor.Gray;
          Write("Ok:   ");
          def spans = List();
          ast.GetSpans(spans);
          foreach (c in text with i)
          {
            Console.ForegroundColor = ConsoleColor.Gray;
            match ((spans : IEnumerable[_]).Find(span => span.Location.StartPos <= i && i < span.Location.EndPos))
            {
              | Some(span) =>
                match (span.SpanClass.Name)
                {
                  | "Default" => Console.ForegroundColor = ConsoleColor.Gray;
                  | "Operator" => Console.ForegroundColor = ConsoleColor.Green;
                  | "Number" => Console.ForegroundColor = ConsoleColor.Cyan;
                  | "OpenBracket" | "CloseBracket" => Console.ForegroundColor = ConsoleColor.Magenta;
                  | _ => ()
                }
              | _ => ()
            }
            Write(c);
          }
          Console.ForegroundColor = ConsoleColor.Gray;
          Write($" AST: $(printAst(ast))");
          WriteLine();
        | _ => assert(false);
      }
    }
    print("1+2+3");
    print("1+2*3");
    print("1*2-3");
    print("1^2^3");
    print("1*2^3");
    print("1^2*3");
    print("-1+2+3");
    print("1+-2*3");
    print("1*2--3");
    print("1*(2--3)");
    print("1*2- -3");
    print("1*(2- -3)");
    print("1^2^-3");
    print("1*-2^3");
    print("1*-(2^3)");
    print("(1*-2)^3");
    print("-1^2*3");

    print("1-----3");
    print("1----3");
    print("1---3");
    print("1--3");
    print("1-3");
    print("1+2-----3");
    print("1+2----3");
    print("1+2---3");
    print("1+2--3");
    print("1+2-3");

    print("---3");
    print("----3");

    print("+3");
    print("++3");
    print("+++3");
    print("++++3");
    print("+++++3");
    print("1+3");
    print("1++3");
    print("1+++3");
    print("1++++3");
    print("1+++++3");
    print("1.23-4.3");
    print("a+3");
    print("{1+3 2+3 {4 1-2}}");
    print("1?2:3");
    print("1?2:3?4:5");
    print("1?2?3:4:5");
    print("1?2?3:4:5+6");
    print("1?2?3+0:4+0:5+6");

    _ = ReadKey();
  }
}