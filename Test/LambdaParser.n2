using Nemerle.Parser;

// L<I?,I?,I?,I?,I?,I?,D?>((y,m,d,h,i,s) => 
syntax module LambdaParser
{
  token any = ['\u0000'..'\uFFFF'];

  [StartRule, Ast(Body)]
  syntax Start : Ast = s Body !any;

  [Ast(t1, t2, types, t4, t5, t6, idents, t8, t9)]
  syntax Body : Ast = "L"s "<"s (Type; ","s)* ">"s "("s "("s (Identifier; ","s)* ")"s "=>"s;

  [Ast(ident, nullable)]
  syntax Type : Ast = Identifier s "?"? s;

  token IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
  token IdentifierNext  = IdentifierFirst | ['0'..'9'];
  token IdentifierBody  = IdentifierFirst IdentifierNext*;
  syntax Identifier : NToken = IdentifierBody s;

  token newLineCharacter   = '\n'
                      | '\r'
                      | '\u2028'    /*  line separator       */
                      | '\u2029';   /*  paragraph separator  */
  token newLine   = "\r\n" | newLineCharacter;

  token whitespace = [Zs]
            | '\t'
            | '\v'        /*  vertial tab          */
            | '\f';       /*  form feed            */


  token space = whitespace | newLine;

  syntax s : void = space*;                      /* optional spacer          */
  syntax S : void = !IdentifierNext s; /* identifier break spacer  */
}
