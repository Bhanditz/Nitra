using N2;

syntax module CalcGrammar
{
  ...

  [StartRule]
  syntax start       = s expr !any { Value() : double = Expr.Value(); }

  [StartRule]
  syntax expr { Value() : double; /*error Value = double.NaN;*/ }

  syntax rounds is expr = '('s expr ')'s              { override Value = Expr.Value(); }

  [SpanClass(Number)]
  syntax num is expr = number s                       { override Value = Number.Value(); }

  syntax neg is expr = '-'s expr  { precedence 100;     override Value = -Expr.Value(); }

  // We can redefine names for fields in any time.
  token field Operator = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  syntax add is expr = expr '+'s expr { precedence 10;                   override Value = Expr1.Value() + Expr2.Value(); }
  syntax sub is expr = expr '-'s expr { precedence 10;                   override Value = Expr1.Value() - Expr2.Value(); }
  syntax mul is expr = expr '*'s expr { precedence 20;                   override Value = Expr1.Value() * Expr2.Value(); }
  syntax div is expr = expr '/'s expr { precedence 20;                   override Value = Expr1.Value() / Expr2.Value(); }
  syntax mod is expr = expr '%'s expr { precedence 20;                   override Value = Expr1.Value() % Expr2.Value(); }
  syntax pow is expr = expr '^'s expr { precedence 30 right-associative; override Value = System.Math.Pow(Expr1.Value(), Expr2.Value()); }

  syntax prefixDec is expr = "--"s expr  { precedence 200; override Value = Expr.Value() - 1.0; }
  syntax postfixDec is expr = expr "--"s { precedence 200; override Value = Expr.Value() - 1.0; }

  alias Condition = expr : 301;

  syntax cond is expr = Condition '?'s expr ':' as Colon s expr { override Value = if (Condition.Value() != 0.0) Expr1.Value() else Expr2.Value(); }

  syntax coalescing  is expr = expr : 401 "??"s expr : 400 { override Value = if (Expr1.Value() != 0.0) Expr1.Value() else Expr2.Value(); }
}

syntax module IncGrammar
{
  using cp = CalcGrammar;
  using CalcGrammar;

  syntax plus is cp.expr = '+'cp.s cp.expr : 100        { override Value = Expr.Value(); }
  syntax prefixInc is cp.expr = "++"cp.s cp.expr : 200  { override Value = Expr.Value() + 1; }
  syntax postfixInc is cp.expr = cp.expr : 200 "++"cp.s { override Value = Expr.Value() + 1; }
}
