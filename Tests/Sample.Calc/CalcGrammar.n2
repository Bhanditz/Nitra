using N2;

syntax module CalcGrammar
{
  token field OpenBrace    = "(";
  token field CloseBrace   = ")";
  token field OpenBrace    = "{";
  token field CloseBrace   = "}";
  token field Op           = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  span class Number;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':', '%']+;
  span class OpenBrace  = "(" | "{";
  span class CloseBrace = ")" | "}";

  braces "(", ")";
  braces "{", "}";

  option EmitDebugSources = true;

  using IncGrammar;
  using NumParser;

  token any = ['\u0000'..'\uFFFF'];
  [ExplicitSpaces]
  void s = ' '*;

  [StartRule, ExplicitSpaces]
  syntax start       = s expr !any { out Value : double = Expr.Value; }

  [StartRule]
  syntax expr { out Value : double; }

  syntax rounds is expr = '(' expr ')'             { set Value      = Expr.Value; }

  [SpanClass(Number)]
  syntax num is expr = number                      { set Value = Number.Value; }

  syntax neg is expr = '-' expr  { precedence 100;     set Value = -Expr.Value; }

  // We can redefine names for fields in any time.
  token field Operator = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  syntax add is expr = expr '+' expr { precedence 10; set Value = Expr1.Value + Expr2.Value; }
  syntax sub is expr = expr '-' expr { precedence 10; set Value = Expr1.Value - Expr2.Value; }
  syntax mul is expr = expr '*' expr { precedence 20; set Value = Expr1.Value * Expr2.Value; }
  syntax div is expr = expr '/' expr { precedence 20; set Value = Expr1.Value / Expr2.Value; }
  syntax mod is expr = expr '%' expr { precedence 20; set Value = Expr1.Value % Expr2.Value; }
  syntax pow is expr = expr '^' expr { precedence 30 right-associative; }

  syntax prefixDec is expr = "--" expr  { precedence 200; set Value = Expr.Value - 1.0; }
  syntax postfixDec is expr = expr "--" { precedence 200; set Value = Expr.Value - 1.0; }

  alias Condition = expr : 301;

  syntax cond is expr = Condition '?' expr ':' as Colon expr { set Value = if (Condition.Value != 0.0) Expr1.Value else Expr2.Value; }

  syntax coalescing  is expr = expr : 401 "??" expr : 400 { set Value = if (Expr1.Value != 0.0) Expr1.Value else Expr2.Value; }
}

syntax module IncGrammar
{
  using cp = CalcGrammar;
  using CalcGrammar;

  syntax plus is cp.expr = '+'cp.s cp.expr : 100        { set Value = Expr.Value; }
  syntax prefixInc is cp.expr = "++"cp.s cp.expr : 200  { set Value = Expr.Value + 1; }
  syntax postfixInc is cp.expr = cp.expr : 200 "++"cp.s { set Value = Expr.Value + 1; }
}
