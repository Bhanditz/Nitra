using N2;

syntax module CalcGrammar
{
  token field OpenBrace    = "(";
  token field CloseBrace   = ")";
  token field OpenBrace    = "{";
  token field CloseBrace   = "}";
  token field Op           = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  span class Number;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':', '%']+;
  span class OpenBrace  = "(" | "{";
  span class CloseBrace = ")" | "}";

  braces "(", ")";
  braces "{", "}";

  option EmitDebugSources = true;

  using IncGrammar;
  using NumParser;

  token any = ['\u0000'..'\uFFFF'];
  void s = ' '*;

  [StartRule]
  syntax start       = s expr !any;

  [StartRule]
  syntax expr { out Value : double; }

  syntax rounds is expr = '('s expr  ')'s             { set Value      = expr.Value; }
  syntax seq    is expr = '{'s expr* '}'s             { set this.Value = expr.Value; } // тоже самое что и предыдущий вариант

  [SpanClass(Number)]
  syntax num is expr = number s                       { set Value = ToDouble(number); }

  syntax neg is expr = '-'s expr  { precedence 100;     set Value = -expr.Value; }

  // We can redefine names for fields in any time.
  token field Operator = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  syntax add is expr = expr '+'s expr { precedence 10; set Value = expr1.Value + expr2.Value; }
  syntax sub is expr = expr '-'s expr { precedence 10; set Value = expr1.Value - expr2.Value; }
  syntax mul is expr = expr '*'s expr { precedence 20; set Value = expr1.Value * expr2.Value; }
  syntax div is expr = expr '/'s expr { precedence 20; set Value = expr1.Value / expr2.Value; }
  syntax mod is expr = expr '%'s expr { precedence 20; set Value = expr1.Value % expr2.Value; }
  syntax pow is expr = expr '^'s expr { precedence 30 right-associative; }

  syntax prefixDec is expr = "--"s expr { precedence 200; }
  syntax postfixDec is expr = expr "--"s { precedence 200; }

  alias Condition = expr : 301;

  syntax cond is expr = Condition '?'s expr ':' as Colon s expr;

  syntax coalescing  is expr = expr : 401 "??"s expr : 400;
}

syntax module IncGrammar
{
  using cp = CalcGrammar;
  using CalcGrammar;

  syntax plus is cp.expr = '+'cp.s cp.expr : 100;
  syntax prefixInc is cp.expr = "++"cp.s cp.expr : 200;
  syntax postfixInc is cp.expr = cp.expr : 200 "++"cp.s;
}
