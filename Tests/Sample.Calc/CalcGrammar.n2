using N2;
using N2.Runtime;
using System.Collections.Generic;

syntax module CalcGrammar
{
  using IncGrammar;
  using NumParser;

  token field OpenBrace    = "(";
  token field CloseBrace   = ")";
  token field OpenBrace    = "{";
  token field CloseBrace   = "}";
  token field Op           = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  span class Number;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':', '%']+;
  span class OpenBrace  = "(" | "{";
  span class CloseBrace = ")" | "}";

  braces "(", ")";
  braces "{", "}";

  marker sm;

  token any = ['\u0000'..'\uFFFF'];

  [ExplicitSpaces] void s = ' '*;

  [StartRule, ExplicitSpaces]
  syntax start       = s expr !any      { Value() : double = Expr.Value(); }

  [StartRule]
  syntax expr { Value() : double; /*error Value = double.NaN;*/ }

  syntax rounds is expr = '(' expr ')'  { override Value = Expr.Value(); }

  [SpanClass(Number)]
  syntax num is expr = number           { override Value = Number.Value(); }

  syntax neg is expr = '-' expr
  {
    precedence 100;
    override Value = -Expr.Value();
  }

  // We can redefine names for fields in any time.
  token field Operator = "+", "++", "-", "--", "*", "/", "?", ":", "^", "%", "??";

  syntax add is expr = expr sm '+' sm expr { precedence 10; override Value = Expr1.Value() + Expr2.Value(); }
  syntax sub is expr = expr sm '-' sm expr { precedence 10; override Value = Expr1.Value() - Expr2.Value(); }
  syntax mul is expr = expr sm '*' sm expr { precedence 20; override Value = Expr1.Value() * Expr2.Value(); }
  syntax div is expr = expr sm '/' sm expr { precedence 20; override Value = Expr1.Value() / Expr2.Value(); }
  syntax mod is expr = expr sm '%' sm expr { precedence 20; override Value = Expr1.Value() % Expr2.Value(); }
  syntax pow is expr = expr sm '^' sm expr 
  {
    precedence 30 right-associative; 
    override Value = System.Math.Pow(Expr1.Value(), Expr2.Value());
  }

  syntax prefixDec is expr = "--" expr     { precedence 200; override Value = Expr.Value() - 1.0; }
  syntax postfixDec is expr = expr "--"    { precedence 200; override Value = Expr.Value() - 1.0; }

  alias Condition = expr : 301;

  syntax cond is expr = Condition sm '?' sm expr sm ':' as Colon sm expr
  {
    override Value = if (Condition.Value() != 0.0) Expr1.Value() else Expr2.Value();
  }

  syntax coalescing  is expr = expr : 401 sm "??" sm expr : 400
  {
    override Value = if (Expr1.Value() != 0.0) Expr1.Value() else Expr2.Value();
  }
}

syntax module IncGrammar
{
  using cp = CalcGrammar;
  using CalcGrammar;

  syntax plus is cp.expr = '+' cp.expr : 100        { override Value = Expr.Value(); }
  syntax prefixInc is cp.expr = "++" cp.expr : 200  { override Value = Expr.Value() + 1; }
  syntax postfixInc is cp.expr = cp.expr : 200 "++" { override Value = Expr.Value() + 1; }
}
