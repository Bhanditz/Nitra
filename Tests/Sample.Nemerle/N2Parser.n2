using N2;

syntax module N2Parser
{
    using ModifierParser;
    using AttributeParser;

    token field Semicolon           = ";";
    token field Eq                  = "=";
    token field OpenBrace           = "(";
    token field CloseBrace          = ")";
    token field OpenBrace           = "{";
    token field CloseBrace          = "}";
    token field OpenSquareBrace     = "[";
    token field CloseSquareBrace    = "]";

    token newLineCharacter   = '\n'
                       | '\r'
                       | '\u2028'    /*  line separator       */
                       | '\u2029';   /*  paragraph separator  */
    token newLine   = "\r\n" | newLineCharacter;

    token whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */

    token space = whitespace | newLine;

    [ExplicitSpaces] void s   = space*;            // optional spacer
    [ExplicitSpaces] void S   = !IdentifierNext s; // identifier break spacer

    marker i;     // increase a indent
    marker d;     // decrease a indent
    marker nl;    // optional spacer and plase for \n while pretty printing
    marker inl;   // inl
    marker sm;    // optional spacer and prefer to print space while pretty printing

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias NsOrTypeName  = QualifiedIdentifier;
    alias QualifiedName = QualifiedIdentifier;
    alias Name          = Identifiers;

    token any = ['\u0000'..'\uFFFF'];

    [StartRule, ExplicitSpaces]
    syntax CompilationUnit = s NamespaceBody !any;

    syntax NamespaceBody = NamespaceMember*;

    syntax NamespaceMember;

    syntax UsingImportDeclaration is NamespaceMember = "using" sm QualifiedIdentifier    ";"nl;
    syntax UsingAliasDeclaration  is NamespaceMember = "using" sm Identifier as Alias sm "=" sm NsOrTypeName ";"nl;
    syntax NamespaceDeclaration   is NamespaceMember = "namespace" sm QualifiedName nl       "{" inl NamespaceBody as Body d "}" nl;

    token IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
    token IdentifierNext  = IdentifierFirst | ['0'..'9'];
    token IdentifierBody  = IdentifierFirst IdentifierNext*;

    syntax Identifier          = IdentifierBody;
    syntax QualifiedIdentifier = (Identifier; ".")+;

    syntax Expression;
}
