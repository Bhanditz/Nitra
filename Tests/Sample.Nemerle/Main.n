using Nemerle.Collections;
using N2;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Console;
using System.Linq;

using SCG = System.Collections.Generic;

public partial abstract class N2Parser
{
  _grammarDescriptors : Dictionary[string, GrammarDescriptor] = (AppDomain.CurrentDomain.GetData("ExternalGrammars") :> array[GrammarDescriptor] ?? array(0))
      .ToDictionary(_.FullName);

  UsingImportDeclarationHandler(usingImport : N2Parser.UsingImportDeclaration) : void
  {
    | UsingImportDeclaration.Ast(_, QualifiedIdentifier.Ast as nsOrTypeName, _) =>
      mutable grammarDescriptor;
      when (_grammarDescriptors.TryGetValue(nsOrTypeName.Path, out grammarDescriptor))
        Parser.AddGrammar(grammarDescriptor);
    | _ => ()
  }

  NamespaceScopeBegin() : void
  {
    Parser.PushState();
  }

  NamespaceScopeEnd(_ : bool) : void
  {
    Parser.PopState();
  }

  public partial class QualifiedIdentifier : N2.Ast
  {
    public partial class Ast : QualifiedIdentifier
    {
      public Path : string
      {
        get
        {
          def getName(id)
          {
            | Identifier.Ast as id => GetText(id.Name)
            | _ => assert(false);
          }
          $<#..$(Identifiers[0]; "."; getName)#>
        }
      }
    }
  }
}


module Program
{
  Main() : void
  {
    def test(code : string) : void
    {
      def parser = N2Parser.GrammarImpl();
      match (parser.ParseCompilationUnit(code))
      {
        | None      =>
          WriteLine($"Fail:\n\"$code\"");
          def (pos, tokens) = parser.Parser.GetErrors();
          def (line, pos) = parser.ParsingSource.PositionToLineColumn(pos);
          foreach (token in tokens)
          {
            def type = if (token.IsLiteral) "literal" else "   rule";
            WriteLine($"  $line:$pos expected $type : \"$(token.Name)\" in rule $(token.Rule.Grammar.Name).$(token.Rule.Name)");
          }

        | Some(ast) =>
          //WriteLine($"Ok:   \"$code\" AST: $(printAst(ast))");
          _ = ast;
          WriteLine($"OK:\n\"$code\"");
      }
      WriteLine();
    }
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1
  type X - A.B;
}
    #>);
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1;
  type X - A.B;
}
    #>);
    
    test(<#
namespace Ns1
{
  namespace Ns2
  {
    using N2ParserExtensions.N2ParserExtension1;
    type X = A.B;
  }
using Y;
    #>);
    _ = ReadKey();
  }
}