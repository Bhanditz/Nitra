using Nemerle.Collections;
using N2;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Console;
using System.Linq;

using SCG = System.Collections.Generic;

public partial abstract class N2Parser
{
  _grammarDescriptors : Dictionary[string, GrammarDescriptor] = Init();
  
  static Init() : Dictionary[string, GrammarDescriptor]
  {
    def value = AppDomain.CurrentDomain.GetData("ExternalGrammars");
    def grammarDescriptors = 
      if (value == null && _globalGrammarDescriptors != null)
        _globalGrammarDescriptors
      else
        (value :> array[GrammarDescriptor] ?? array(0)).ToDictionary(_.FullName);
    
    grammarDescriptors
  }
  
  internal static mutable _globalGrammarDescriptors : Hashtable[string, GrammarDescriptor];
  
  UsingImportDeclarationHandler(usingImport : N2Parser.UsingImportDeclaration) : void
  {
    | UsingImportDeclaration.Ast(_, QualifiedIdentifier.Ast as nsOrTypeName, _) =>
      mutable grammarDescriptor;
      if (_grammarDescriptors.TryGetValue(nsOrTypeName.Path, out grammarDescriptor))
        Parser.AddGrammar(grammarDescriptor);
      else
        ();
        
    | _ => ()
  }

  NamespaceScopeBegin() : void
  {
    Parser.PushState();
  }

  NamespaceScopeEnd(_ : bool) : void
  {
    Parser.PopState();
  }

  public partial class QualifiedIdentifier : N2.Ast
  {
    public partial class Ast : QualifiedIdentifier
    {
      public Path : string
      {
        get
        {
          def getName(id)
          {
            | Identifier.Ast as id => GetText(id.Name)
            | _ => assert(false);
          }
          $<#..$(Identifiers[0]; "."; getName)#>
        }
      }
    }
  }
}


module Program
{
  Main() : void
  {
    InitGrammars();
      
    def test(code : string) : void
    {
      def parser = N2Parser.GrammarImpl();
      match (parser.ParseCompilationUnit(code))
      {
        | None      =>
          Console.ForegroundColor = ConsoleColor.Red;
          WriteLine("Fail:");
          Console.ForegroundColor = ConsoleColor.DarkRed;
          
          WriteLine($"\"$code\"");
          def (pos, tokens) = parser.Parser.GetErrors();
          def (line, pos) = parser.ParsingSource.PositionToLineColumn(pos);
          foreach (token in tokens)
          {
            def type = if (token.IsLiteral) "literal" else "   rule";
            WriteLine($"  $line:$pos expected $type : \"$(token.Name)\" in rule $(token.Rule.Grammar.Name).$(token.Rule.Name)");
          }
          
          Console.ResetColor();

        | Some(ast) =>
          //WriteLine($"Ok:   \"$code\" AST: $(printAst(ast))");
          _ = ast;
          WriteLine("OK:");
          Console.BackgroundColor = ConsoleColor.DarkGray;
          Console.ForegroundColor = ConsoleColor.White;
          WriteLine(ast);
          Console.ResetColor();
      }
      WriteLine();
    }

    test(<#
namespace Ns1
{
  using N2ParserExtension1;
  type X = A.B;
  
  namespace Ns2
  {
    using Ns3;
  }
}
    #>);
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1
  type X - A.B;
}
    #>);
    
    test(<#
namespace Ns1
{
  using N2ParserExtensions.N2ParserExtension1;
  type X - A.B;
}
    #>);
    
    test(<#
namespace Ns1
{
  namespace Ns2
  {
    using N2ParserExtensions.N2ParserExtension1;
    type X = A.B;
  }
using Y;
    #>);
    _ = ReadKey();
  }

  static InitGrammars() : void
  {
    N2Parser._globalGrammarDescriptors = Hashtable();
    
    def path               = Path.GetDirectoryName(Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);
    def files              = Directory.GetFiles(path, "*.dll");
    def grammarsAttr       = typeof(GrammarsAttribute);
    def standardAssemblies = HashSet(["Nemerle.dll", "Nemerdsle.Compiler.dll", "N2.dll", "N2.Compiler.dll"]);
    
    // Обрабатываем фалы не входящие в список сборок самого немерла (стандратные сборки).
    // В них точно не может быть парсеров.
    foreach (file when !standardAssemblies.Contains(file) in files)
    {
      def asm   = Assembly.LoadFrom(file);
      def attrs = asm.GetCustomAttributesData();
      
      // Для каждого GrammarsAttribute...
      foreach (attr when attr.Constructor.DeclaringType.Equals(grammarsAttr) in attrs)
      {
        // ... получаем список GrammarsAttribute-ов...
        def attrInstances = asm.GetCustomAttributes(grammarsAttr, false) :> array[GrammarsAttribute];
          
        // в GrammarsAttribute описаны грамматики (расширения парсеров). Перебираем их...
        foreach (attrInstance in attrInstances)
        foreach (type in attrInstance.Grammars)
        {
          // Парсер описвается GrammarDescriptor-ом. Он доступен через статическое поле "StaticDescriptor".
          // Получаем StaticDescriptor-ы и добавляем их в хэш-таблицу.
          def prop = type.GetProperty("StaticDescriptor");
          def value = prop.GetValue(null, null) :> GrammarDescriptor;
          // TODO: FIXME: Могут существовать StaticDescriptor-ы с одинаковым полным именем.
          // В мапе нужно хранить их список, а не конекретные экзепляры.
          N2Parser._globalGrammarDescriptors.Add(value.FullName, value);
        }
      }
    }
  }
}