using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using N2;
using N2.Internal;

namespace Cpp.Grammar.Test
{
  public module Program
  {
    public Main() : void
    {
      def n2Source = SourceSnapshot(<#
    (int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())
    (int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())
    (int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())
    (int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())
    (int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())(int())()
      #>);
      def parserHost = ParserHost();
      match (CppGrammar.GrammarImpl.StaticDescriptor.Rules.Find(rd => rd.Name == "CompilationUnit"))
      {
        | Some(rd is SimpleRuleDescriptor) => parserHost.DoParsing(n2Source, rd);
        | _ => assert(false)
      }
    }
  }
}
