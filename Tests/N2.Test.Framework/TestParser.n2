using N2;

syntax module TestParser
{
  token field Quote               = "\"";
  token field Colon               = ":";
  token field Comma               = ",";
  token field OpenBrace           = "{";
  token field CloseBrace          = "}";
  token field Quote               = "\"";
  token field Comma               = ",";
  token field Prefix              = "\\u";

  span class String;
  span class Keyword      = ['a'..'z']['a'..'z']+;
  span class Operator     = ['+', '-', '/', '*', '^', '?', ':']+;
  span class OpenBrace    = "(" | "{" | "[";
  span class CloseBrace   = ")" | "}" | "]";

  braces "{", "}";

  token Any = ['\u0000'..'\uFFFF'];
  token NewLineCharacter  = '\n'
                    | '\r'
                    | '\u2028'    /*  line separator       */
                    | '\u2029';   /*  paragraph separator  */
  token NewLine  = "\r\n" | NewLineCharacter;
  token Whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */
  token Space = Whitespace | NewLine;
  token Spaces = Space+;

  syntax IgnoreToken;

  [Ast(                                      Start, Body,           NewLine)]
  syntax SingleLineComment  is IgnoreToken = "//"   (!NewLine Any)* NewLine?;

  [Ast(                                      Start, Body,        End)]
  syntax MultiLineComment   is IgnoreToken = "/*"   (!"*/" Any)* "*/";

  syntax SpaceToken         is IgnoreToken = Spaces;

  void s = IgnoreToken*;                      /* optional spacer          */
  void S = !IdentifierPartCharacters s; /* identifier break spacer  */

  token LetterCharacter       = ['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я'];//[Lu, Ll, Lt, Lm, Lo, Nl];
  token CombiningCharacter    = [Mn, Mc];
  token DecimalDigitCharacter = [Nd];
  token ConnectingCharacter   = [Pc];
  token FormattingCharacter   = [Cf];
  token IdentifierStartCharacter  = LetterCharacter | "_";
  token IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  token IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;
  token HexDigit           = ['0'..'9', 'a'..'f', 'A'..'F'];
  token ReservedStringChar = "\"" | "\\";
  token ReservedCharChar   = "\'" | "\\";

  syntax Terminator = "test"S ":" Whitespace* NewLine?;

  token TestBody = Any*;

  [SpanClass(String)]
  syntax StringLiteral                    = "\""  StringPart* "\"" s;

  syntax StringPart;

  [Ast(                                                   Chars)]
  syntax SimpleStringPart                 is StringPart = (!ReservedStringChar Any)+;

  syntax UnicodeEscapeSequenceStringPart  is StringPart = "\\u"   HexDigit HexDigit HexDigit HexDigit;

  [Ast(                                                   Backslash, Char)]
  syntax EscapeSequenceStringPart         is StringPart = "\\"       Any;

  syntax Identifier                       = IdentifierBody s;

  [Ast(                                     Names)]
  syntax QIdentifier                      = (Identifier; "."s)+;

  [StartRule]
  syntax TopDeclaration;

  [Ast(                                                  _,      FilePath,               _)]
  syntax AssemblyReference is TopDeclaration = "reference"S StringLiteral GrammarReference*;

  [Ast(                              _, GrammarName,     _), StartRule]
  syntax GrammarReference = "grammar"S QIdentifier StartRuleReference?;

  [Ast(                              _,       _,  RuleName), StartRule]
  syntax StartRuleReference =  "start"S "rule"S QIdentifier;

  [StartRule]
  syntax Start                = s TopDeclaration* Terminator TestBody;
}
