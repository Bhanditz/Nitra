using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;

using N2.Test.Framework.Utils;

namespace N2.Test.Framework
{
  /// <summary>
  /// Description of GoldTest.
  /// </summary>
  public sealed class GoldTest : Test
  {
    public this(filePath : string)
      requires !string.IsNullOrEmpty(filePath)
    {
      _filePath = filePath;
      Name = Path.GetFileNameWithoutExtension(filePath);
    }

    public override Name : string { get }

    public override Run() : Result
    {
      unless(File.Exists(_filePath))
        return Result.UnableToRun("File not found");

      def originalTestSource = N2.SourceSnapshot(File.ReadAllText(_filePath), fileName = _filePath);
      def parser = TestParser.GrammarImpl();
      def (pos, ast) = parser.TryParseStart(originalTestSource);

      unless (pos >= 0)
        return Result.UnableToRun("Failed to parse test source");

      match(GrammarLoader.Load(Path.GetDirectoryName(_filePath), ast))
      {
        | Success(rule) =>
          match(ast)
          {
            | TestParser.Start.Ast(TestBody = testBody) =>
              def testText = originalTestSource.Text.Substring(testBody.StartPos, testBody.EndPos - testBody.StartPos);
              def testSource = originalTestSource.WithText(testText, testBody.StartPos);
              def parseResult = rule.Parse(testSource);
              def parseErrors = List();
              parseResult.GetErrors(parseErrors);
              if(parseErrors.Count == 0)
              {
                def dumpName = Path.ChangeExtension(_filePath, "out");
                using(def writer = StreamWriter(dumpName))
                  parseResult.GetDump().WriteTo(writer, " ");
                def goldDumpName = Path.ChangeExtension(_filePath, "gold");
                unless(File.Exists(goldDumpName))
                  return Result.UnableToRun("Gold file not found");
                match(DumpComparer.Compare(File.ReadAllLines(dumpName), File.ReadAllLines(goldDumpName), StringComparison.Ordinal))
                {
                  | Success => Result.Success()
                  | Fail(lineNumber, expectedText, foundText) =>
                    Result.Fail($"Dump differs with gold on line $lineNumber. Expected '$expectedText' found '$foundText'")
                }
              }
              else
                Result.Fail("Parse test failed")
            | _ => assert(false)
          }
        | Fail(message) => Result.Fail(message)
      }
    }

    private _filePath : string;
  }
}
