using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace N2.Test.Framework
{
  /// <summary>
  /// Description of TeamCityExecutionListener.
  /// </summary>
  public sealed class TeamCityExecutionListener : ExecutionListener
  {
    public this(suiteName : string, [NotNull] listener : ExecutionListener)
      requires !string.IsNullOrEmpty(suiteName)
    {
      _suiteName = suiteName;
      _listener = listener;
      _output = Console.Out;
      _timer = Stopwatch();
    }

    public override Start() : void
    {
      _output.WriteLine($"##teamcity[testSuiteStarted name='$(_suiteName |> escape)']");
      _listener.Start();
    }

    public override TestStart(test : Test) : void
    {
      _output.WriteLine($"##teamcity[testStarted name='$(test.Name |> escape)' captureStandardOutput='true']");
      _listener.TestStart(test);
      _timer.Start();
    }

    public override TestComplete(test : Test, result : Result) : void
    {
      _timer.Stop();
      _listener.TestComplete(test, result);
      match(result)
      {
        | Success => ()
        | UnableToRun(message) =>
          _output.WriteLine($"##teamcity[testIgnored name='$(test.Name |> escape)' message='$(message |> escape)']");
        | Fail(message) =>
          _output.WriteLine($"##teamcity[testFailed name='$(test.Name |> escape)' message='$(message |> escape)']");
        | Exception(exception) =>
          _output.WriteLine($"##teamcity[testFailed name='$(test.Name |> escape)' message='Unhandled exception of type $(exception.GetType().FullName |> escape)' details='$(exception.ToString() |> escape)']");
      }
      _output.WriteLine($"##teamcity[testFinished name='$(test.Name |> escape)' duration='$(_timer.ElapsedMilliseconds)']");
    }

    public override Complete() : void
    {
      _listener.Complete();
      _output.WriteLine($"##teamcity[testSuiteFinished name='$(_suiteName |> escape)']");
    }

    private static escape(message : string) : string
    {
      def needEscape = needEscapeResult :
      {
        foreach(c in message)
        {
          | '\'' | '\n' | '\r' | '|' | '[' | ']' => needEscapeResult(true)
          | _ => ()
        }
        false
      };
      if(needEscape)
      {
        def buffer = StringBuilder();
        mutable pos = 0;
        foreach(c in message with i)
        {
          | '\'' with escapeString = "|'"
          | '\n' with escapeString = "|n"
          | '\r' with escapeString = "|r"
          | '|'  with escapeString = "||"
          | '['  with escapeString = "|["
          | ']'  with escapeString = "|]" =>
            _ = buffer.Append(message, pos, i - pos).Append(escapeString);
            pos = i + 1;
          | _ => ()
        }
        buffer.Append(message, pos, message.Length - pos).ToString()
      }
      else
        message
    }

    private _suiteName : string;
    private _listener : ExecutionListener;
    private _output: TextWriter;
    private _timer: Stopwatch;
  }
}
