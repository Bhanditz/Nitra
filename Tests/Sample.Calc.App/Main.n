using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using N2;

module Program
{
  Main () : void
  {
    Write("input>");
    def text = ReadLine();

    when (string.IsNullOrEmpty(text))
      return;

    def source = SourceSnapshot(text);
    def parserHost = ParserHost();
    def parseResult = parserHost.DoParsing(source, _startRule);
    if (parseResult.IsSuccess)
    {
      def ast = parseResult.CreateAst.[CalcGrammar.Start.Ast]();
      WriteLine("Result: " + ast.Value());
      WriteLine($"Pretty print: $ast");
      WriteLine("AST dump:");
      WriteLine(ast.GetDump().ToString());
      WriteLine();
    }
    else
    {
      def (pos, rules) = parseResult.CollectErrors();
      def (line, column) = source.PositionToLineColumn(pos);
      WriteLine($<#Parse error at ($line, $column), rules: ..$(rules; ", ")#>);
    }

    Main();
  }

  _startRule : SimpleRuleDescriptor = match (CalcGrammar.GrammarImpl.StaticDescriptor.Rules.Find(rd => rd.Name == "start"))
  {
    | Some(rd is SimpleRuleDescriptor) => rd
    | _ => assert(false)
  };
}
