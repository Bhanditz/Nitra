using N2;

syntax module N2Parser
{
    using ModifierParser;
    using AttributeParser;

    token any = ['\u0000'..'\uFFFF'];

    [StartRule, Ast(Body)]
    syntax CompilationUnit                 = s NamespaceBody !any;

    [Ast(Members)]
    syntax NamespaceBody                   = NamespaceMember*;

    [Ast()]
    syntax NamespaceMember;

    [Ast(UsingLit, NsOrTypeName, Semicolon)]
    syntax UsingImportDeclaration    is NamespaceMember = "using"S QualifiedIdentifier ";"s;

    [Ast(UsingLit, Alias, EqLit, NsOrTypeName, Semicolon)]
    syntax UsingAliasDeclaration     is NamespaceMember = "using"S Identifier "="s QualifiedIdentifier ";"s;

    [Ast(NsLit, NsOrTypeName, OpenLit, Body, CloseLit)]
    syntax NamespaceDeclaration      is NamespaceMember = "namespace"S QualifiedIdentifier "{"s NamespaceBody "}"s;
    //GlobalAttributDeclaration is NamespaceMember;
    //ClassDeclaration          is NamespaceMember;

    token IdentifierFirst = ['A'..'Z', 'a'..'z', '_'..'_'];
    token IdentifierNext  = IdentifierFirst | ['0'..'9'];
    token IdentifierBody  = IdentifierFirst IdentifierNext*;
    [Ast(Name)]
    syntax Identifier       = IdentifierBody s;

    [Ast(Identifiers)]
    syntax QualifiedIdentifier       = (Identifier; "."s)+;

    //[Ast(Attributes, Modifiers, Class, Name, OpenLit, CloseLit)]
    //Class is NamespaceMember = Attributes Modifiers "class"S Identifier "{"s "}"s;

    [Ast()]
    syntax Expression;

    token newLineCharacter   = '\n'
                       | '\r'
                       | '\u2028'    /*  line separator       */
                       | '\u2029';   /*  paragraph separator  */
    token newLine   = "\r\n" | newLineCharacter;

    token whitespace = [Zs]
              | '\t'
              | '\v'        /*  vertial tab          */
              | '\f';       /*  form feed            */

    token space = whitespace | newLine;

    void s = space*;                      /* optional spacer          */
    void S = !IdentifierNext s; /* identifier break spacer  */
}
