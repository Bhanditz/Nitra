using Nemerle;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace N2.Test.Utils
{
  /// <summary>
  /// Description of DumpComparer.
  /// </summary>
  public module DumpComparer
  {
    public Compare([NotNull] text : IEnumerable[string], [NotNull]goldText : IEnumerable[string], comparison : StringComparison) : DumpComparerResult
    {
      using(def textSeq = text.GetEnumerator())
      using(def goldTextSeq = goldText.GetEnumerator())
      {
        def iter(lineNumber)
        {
          match( (goldTextSeq.MoveNext(), textSeq.MoveNext()) )
          {
            | (false, false) => DumpComparerResult.Success()
            | (true, true) =>
              if(string.Compare(goldTextSeq.Current, textSeq.Current, comparison) == 0)
                iter(lineNumber + 1)
              else
                DumpComparerResult.Fail(lineNumber, goldTextSeq.Current, textSeq.Current)
            | (true, false) =>
              DumpComparerResult.Fail(lineNumber, goldTextSeq.Current, "")
            | (false, true) =>
              DumpComparerResult.Fail(lineNumber, "", textSeq.Current)
          }
        }
        iter(1)
      }
    }
  }

  public variant DumpComparerResult
  {
    | Success
    | Fail
      {
        lineNumber : int;
        expectedText: string;
        foundText: string;
      }
  }
}
