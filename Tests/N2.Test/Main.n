using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;
using Nemerle.Test.Framework.Utils;

using System;
using System.Collections.Generic;
using System.IO;
using System.Console;
using System.Linq;

using N2.Test;

module Program
{
  Main(args : array[string]) : int
  {
    mutable createGold                = false;
    mutable showDiff                  = false;
    mutable teamCityTestSuite         = null;
    mutable visualStudioTestSuite     = null;
    mutable visualStudioSummaryResult = "SummaryResult.xml";
    def     fileMasks                 = List();

    def options =
    [
      Getopt.CliOption.Flag("-create-gold", [], "Create missing gold files", fun()
      {
        createGold = true;
      }),
      Getopt.CliOption.Flag("-diff", [], "Shows diff for failed tests", fun()
      {
        showDiff = true;
      }),
      Getopt.CliOption.String("-team-city-test-suite", [], "TeamCity test suite name", fun(value)
      {
        teamCityTestSuite = value;
      }),
      Getopt.CliOption.String("-visual-studio-test-suite", [], "VisualStudio test suite name", fun(value)
      {
        visualStudioTestSuite = value;
      }),
      Getopt.CliOption.String("-visual-studio-summary-result", [], "VisualStudio test suite name", fun(value)
      {
        visualStudioSummaryResult = value;
      }),
      Getopt.CliOption.NonOption("", [], "File mask", fun(value)
      {
        fileMasks.Add(value);
      })
    ];
    Getopt.Parse(Getopt.Error, options, args.ToNList());

    def outputWriter = DefaultColorizedOutputWriter();
    def mainListener = MainExecutionListener(outputWriter);
    mutable listeners = [mainListener];
    unless(string.IsNullOrEmpty(teamCityTestSuite))
      listeners ::= TeamCityExecutionListener(teamCityTestSuite, false, outputWriter.WriteLine(ConsoleColor.DarkGray, _));
    unless(string.IsNullOrEmpty(visualStudioTestSuite))
      listeners ::= VisualStudioExecutionListener(visualStudioTestSuite, visualStudioSummaryResult);
    def runner = Runner(match(listeners)
    {
      | [one] => one
      | _ => MulticastExecutionListener(listeners)
    });
    def testsToRun = FileSearcher.Search(fileMasks, SearchOption.AllDirectories).Select(GoldTest(_, createGold, showDiff));
    runner.Run(testsToRun);
    outputWriter.Flush();
    mainListener.GetExitCode();
  }
}
