using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Diff;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;

using System;
using System.Collections.Generic;

namespace N2.Test
{
  public sealed class MainExecutionListener : ExecutionListener
  {
    public this([NotNull] output : ColorizedOutputWriter)
    {
      _output = output;
    }

    public override Start() : void
    {
      _passed = 0;
      _failed = 0;
      _notRun = 0;
    }

    public override TestStart(test : Test) : void
    {
      _output.Write(ConsoleColor.DarkCyan, test.Name);
      _output.Write(null, ": ");
    }

    public override TestComplete(test : Test, result : Result, statistics : Statistics) : void
    {
      ignore(test, statistics);
      def writeSpacer(messageLength)
      {
        _output.WriteSpacer(null, '.', Math.Max(0, 100 - messageLength))
      }
      match(result)
      {
        | Passed(message) =>
          _passed += 1;
          writeSpacer(message.Length);
          _output.WriteLine(ConsoleColor.Green, message);
        | Failed(message, details) =>
          _failed += 1;
          def resultMessage = "Failed";
          writeSpacer(resultMessage.Length);
          _output.WriteLine(ConsoleColor.Red, resultMessage);
          mutable inDiff = false;
          foreach(x in details)
          {
            | "BEGIN-DIFF" =>
              inDiff = true;
              _output.WriteLine(ConsoleColor.DarkGray, x);
            | "END-DIFF" =>
              inDiff = false;
              _output.WriteLine(ConsoleColor.DarkGray, x);
            | _ =>
              def color : ConsoleColor? = if(!inDiff)
                ConsoleColor.Red
              else if(x.StartsWith(" +"))
                ConsoleColor.DarkGreen
              else if(x.StartsWith(" -"))
                ConsoleColor.Red
              else if(x == "...")
                ConsoleColor.DarkGray
              else
                null;
            _output.WriteLine(color, x);
          }
          _output.WriteLine(ConsoleColor.Red, message);
        | Exception(ex) =>
          _failed += 1;
          def resultMessage = "Exception";
          writeSpacer(resultMessage.Length);
          _output.WriteLine(ConsoleColor.Red, resultMessage);
          _output.WriteLine(ConsoleColor.Red, ex.ToString());
        | Skipped(message) =>
          _notRun += 1;
          writeSpacer(message.Length);
          _output.WriteLine(ConsoleColor.Yellow, message);
      }
    }

    public override Complete() : void
    {
      match((_passed, _failed, _notRun))
      {
        | (0, 0, 0) =>
          _output.WriteLine(ConsoleColor.Yellow, "No tests to run.");

        | (_, 0, 0) =>
          _output.WriteLine(ConsoleColor.Green, $"All $_passed tests passed.");

        | (_, 0, _) =>
          _output.WriteLine(ConsoleColor.Yellow, $"$_passed tests passed, $_notRun tests skipped.");

        | (_, _, 0) =>
          _output.WriteLine(ConsoleColor.Red, $"$_passed tests passed, $_failed tests failed.");

        | (_, _, _) =>
          _output.WriteLine(ConsoleColor.Red, $"$_passed tests passed, $_notRun tests skipped, $_failed tests failed.");
      }
    }

    public GetExitCode() : int
    {
      if (_failed > 0)
        2
      else if (_notRun > 0)
        1
      else
        0
    }

    private _output   : ColorizedOutputWriter;
    private mutable _passed : int;
    private mutable _failed : int;
    private mutable _notRun : int;
  }
}
