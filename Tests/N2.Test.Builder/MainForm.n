using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using N2.Test.Framework;
using N2.Test.Framework.Utils;

namespace N2.Test.Builder
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    public this()
    {
      InitializeComponent();
    }

    private btnParse_Click(_ : object, _ : System.EventArgs) : void
    {
      def originalTestSource = N2.SourceSnapshot(txtSource.Text);
      def parser = TestParser.GrammarImpl();
      def (pos, ast) = parser.TryParseStart(originalTestSource);

      txtDump.Text = try
      {
        if(pos >= 0)
          match(GrammarLoader.Load(AppDomain.CurrentDomain.BaseDirectory, ast))
          {
            | Success(rule) =>
              match(ast)
              {
                | TestParser.Start.Ast(TestBody = testBody) =>
                  def testText = originalTestSource.Text.Substring(testBody.StartPos, testBody.EndPos - testBody.StartPos);
                  def testSource = originalTestSource.WithText(testText, testBody.StartPos);
                  def parseResult = rule.Parse(testSource);
                  def parseErrors = List();
                  parseResult.GetErrors(parseErrors);
                  if(parseErrors.Count == 0)
                  {
                    def writer = StringWriter();
                    parseResult.GetDump().WriteTo(writer, " ");
                    writer.ToString()
                  }
                  else "Parse test failed"
                | _ => assert(false)
              }
            | Fail(message) => message
          }
        else "Failed to parse test source";
      }
      catch
      {
        | ex is Exception => ex.ToString()
      }
    }

    private btnSave_Click(_ : object, _ : System.EventArgs) : void
    {
      using(def dialog = SaveFileDialog())
      {
        dialog.Filter = "Test files (*.test)|*.test";
        dialog.FilterIndex = 0;
        when(dialog.ShowDialog() == DialogResult.OK)
        {
          using(def textWriter = StreamWriter(FileStream(dialog.FileName, FileMode.CreateNew, FileAccess.ReadWrite), Encoding.UTF8))
            textWriter.Write(txtSource.Text);
          using(def textWriter = StreamWriter(FileStream(Path.ChangeExtension(dialog.FileName, ".gold"), FileMode.CreateNew, FileAccess.ReadWrite), Encoding.UTF8))
            textWriter.Write(txtDump.Text);
        }
      }
    }

    private mutable splitContainer1 : System.Windows.Forms.SplitContainer;
  
    private mutable toolStrip1 : System.Windows.Forms.ToolStrip;
  
    private mutable txtSource : System.Windows.Forms.TextBox;
  
    private mutable txtDump : System.Windows.Forms.TextBox;
  
    private mutable btnParse : System.Windows.Forms.ToolStripButton;

    private mutable btnSave : System.Windows.Forms.ToolStripButton;
  }
}
