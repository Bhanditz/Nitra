using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.Ide.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace Nitra.Ide.Macros.Tests
{
  [TestFixture]
  public class SerializationTests
  {
    [NitraMessage, Record, StructuralEquality]
    struct SimpleStruct
    {
      public IntField: int;
      public FloatField: double;
      public StringField: string;
    }

    [Test]
    public Struct_with_primitive_fields(): void 
    {
      def msg = SimpleStruct(2, 3.3, "foo");
      def deserializedMsg = Test(msg.Serialize, SimpleStruct.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }

    [NitraMessage, Record, StructuralEquality]
    struct StructWithNestedStruct
    {
      public BoolField: bool;
      public Nested: SimpleStruct
    }
    
    [Test]
    public Struct_with_nested_struct(): void 
    {
      def msg = StructWithNestedStruct(true, SimpleStruct(2, 3.3, "foo"));
      def deserializedMsg = Test(msg.Serialize, StructWithNestedStruct.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }

    [NitraMessage, Record, StructuralEquality]
    struct StructWithListOfPrimitives
    {
      public IntList: list[int];
    }
    
    [Test]
    public Struct_with_list(): void 
    {
      def msg = StructWithListOfPrimitives([1, 2, 3]);
      def deserializedMsg = Test(msg.Serialize, StructWithListOfPrimitives.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }
    
    Test[T](serialize: BinaryWriter -> void, deserialize: BinaryReader -> T): T
    {
      def stream = MemoryStream();
      using (writer = BinaryWriter(stream, System.Text.Encoding.Default, true))
      {
        serialize(writer);
        writer.Flush();
      }
      
      stream.Position = 0;
      
      using (reader = BinaryReader(stream))
        deserialize(reader);
    }
  }
}