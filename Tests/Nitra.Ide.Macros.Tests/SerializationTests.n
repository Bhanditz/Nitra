using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.Ide.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using NUnit.Framework;

namespace Nitra.Ide.Macros.Tests
{
  [TestFixture]
  public class SerializationTests
  {
    [NitraMessage, Record, StructuralEquality]
    struct SimpleStruct
    {
      public IntField: int;
      public FloatField: double;
      public StringField: string;
    }

    [Test]
    public Struct_with_primitive_fields(): void 
    {
      def msg = SimpleStruct(2, 3.3, "foo");
      def deserializedMsg = Test(msg.Serialize, SimpleStruct.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }

    [NitraMessage, Record, StructuralEquality]
    struct StructWithNestedStruct
    {
      public BoolField: bool;
      public Nested: SimpleStruct
    }
    
    [Test]
    public Struct_with_nested_struct(): void 
    {
      def msg = StructWithNestedStruct(true, SimpleStruct(2, 3.3, "foo"));
      def deserializedMsg = Test(msg.Serialize, StructWithNestedStruct.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }

    [NitraMessage, Record, StructuralEquality]
    struct StructWithLists
    {
      public IntList: list[int];
      public StructList: list[SimpleStruct]
    }
    
    [Test]
    public Struct_with_list(): void 
    {
      def msg = StructWithLists([1, 2, 3], [SimpleStruct(2, 3.3, "foo"), SimpleStruct(4, 5.5, "bar")]);
      def deserializedMsg = Test(msg.Serialize, StructWithLists.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }

    [Test]
    public Empty_list_is_ok(): void 
    {
      def msg = StructWithLists([], []);
      def deserializedMsg = Test(msg.Serialize, StructWithLists.Deserialize);
      Assert.AreEqual(msg, deserializedMsg)
    }

    [Test]
    public Null_list_is_ok(): void 
    {
      def msg = StructWithLists(null, null);
      def deserializedMsg = Test(msg.Serialize, StructWithLists.Deserialize);
      Assert.AreEqual([], deserializedMsg.IntList, "IntList");
      Assert.AreEqual([], deserializedMsg.StructList, "StructList")
    }
    
    [NitraMessage, Record, StructuralEquality]
    struct StructWithImmutableArray
    {
      public IntArray: ImmutableArray[int];
      public StructArray: ImmutableArray[SimpleStruct]
    }
    
    [Test]
    public Struct_with_immutable_arrays(): void 
    {
      def msg = StructWithImmutableArray(
        [1, 2, 3].ToImmutableArray(), 
        [SimpleStruct(2, 3.3, "foo"), SimpleStruct(4, 5.5, "bar")].ToImmutableArray());
      def deserializedMsg = Test(msg.Serialize, StructWithImmutableArray.Deserialize);
      Assert.AreEqual(msg.IntArray.ToArray().ToNList(), deserializedMsg.IntArray.ToArray().ToNList(), "IntArray");
      Assert.AreEqual(msg.StructArray.ToArray().ToNList(), deserializedMsg.StructArray.ToArray().ToNList(), "StructArray")
    }

    [Test]
    public Empty_immutable_array_is_ok(): void 
    {
      def msg = StructWithImmutableArray(ImmutableArray.Create(), ImmutableArray.Create());
      def deserializedMsg = Test(msg.Serialize, StructWithImmutableArray.Deserialize);
      Assert.AreEqual([], deserializedMsg.IntArray.ToArray().ToNList(), "IntArray");
      Assert.AreEqual([], deserializedMsg.StructArray.ToArray().ToNList(), "StructArray")
    }

    [Test]
    public Default_immutable_array_is_ok(): void 
    {
      def msg = StructWithImmutableArray(ImmutableArray(), ImmutableArray());
      def deserializedMsg = Test(msg.Serialize, StructWithImmutableArray.Deserialize);
      Assert.AreEqual([], deserializedMsg.IntArray.ToArray().ToNList(), "IntArray");
      Assert.AreEqual([], deserializedMsg.StructArray.ToArray().ToNList(), "StructArray")
    }
    
    [NitraMessage, Record, StructuralEquality]
    struct StructWithNestedCollections
    {
      public ListOfLists: list[list[int]];
      public ArrayOfArrays: ImmutableArray[ImmutableArray[int]];
    }
    
    [Test]
    public Nested_collections(): void 
    {
      def msg = StructWithNestedCollections(
        [[1, 2], [3, 4]],
        ImmutableArray.CreateRange([ImmutableArray.CreateRange([1, 2]), ImmutableArray.CreateRange([3, 4])]));
          
      def deserializedMsg = Test(msg.Serialize, StructWithNestedCollections.Deserialize);
      Assert.AreEqual(msg.ListOfLists, deserializedMsg.ListOfLists, "ListsOfLists");
      Assert.AreEqual(
        msg.ArrayOfArrays, 
        deserializedMsg
          .ArrayOfArrays
          .ToArray()
          .ToNList()
          .Map(x => x.ToArray().ToNList()), "ArrayOfArrays")
    }
    
    Test[T](serialize: BinaryWriter -> void, deserialize: BinaryReader -> T): T
    {
      def stream = MemoryStream();
      using (writer = BinaryWriter(stream, System.Text.Encoding.Default, true))
      {
        serialize(writer);
        writer.Flush();
      }
      
      stream.Position = 0;
      
      using (reader = BinaryReader(stream))
        deserialize(reader);
    }
  }
}