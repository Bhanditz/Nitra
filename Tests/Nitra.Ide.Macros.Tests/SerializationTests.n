using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.Ide.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace Nitra.Ide.Macros.Tests
{
  [TestFixture]
  public class SerializationTests
  {
    [NitraMessage, Record, StructuralEquality]
    struct StructWithPrimitiveFields
    {
      public IntField: int;
      public FloatField: double;
      public StringField: string;
    }
    
    [Test]
    public Struct_with_primitive_fields(): void 
    {
      def msg = StructWithPrimitiveFields(2, 3.3, "foo");
      def stream = MemoryStream();
      using (writer = BinaryWriter(stream, System.Text.Encoding.Default, true))
      {
        msg.Serialize(writer);
        writer.Flush();
      }
      
      stream.Position = 0;
      
      def deserializedMsg = using (reader = BinaryReader(stream))
        StructWithPrimitiveFields.Deserialize(reader);
      
      Assert.AreEqual(msg, deserializedMsg)
    }
  }
}