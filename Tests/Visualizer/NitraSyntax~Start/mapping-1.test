
syntax module M
{
  syntax Foo
  {
    | X = "X"
    | Y = Z*
  }
  
  syntax Z = Str="Z";
}

abstract ast Foo
{
  M1 : Fake?;
  | X { }
  | Y { M2 : Fake?; }
  | OneY   { Member : Z; }
}

ast ManyY : Foo
{
  Members : Z*;
}


ast Z : A1, A2
{
  Text : string;
  F    : Fake?;
}

abstract ast A1 { P1 : Fake; }
abstract ast A2 : A1 { P2 : Fake; }

map syntax M.Foo -> Foo
{
  | X {}
  | Y ->
    match (Zs)
    {
      | []    -> Y { None() -> M1; None() -> M2; }
      | [one] -> OneY  { one(None())  -> Member; }
      | [x1, x2] -> ManyY  { [x1, x2] -> Members; }
      | many  -> ManyY { many -> Members; }
    }
}

map syntax M.Z(f : Fake?) -> Z
{
  Text = ParsedValue(Str, GetText(Str));
  f -> F;
}

map syntax M.Z -> Z
{
  Text = ParsedValue(Str, GetText(Str));
  None() -> F;
}

ast Fake {}
