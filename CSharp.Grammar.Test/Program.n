using System;
using System.Console;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

using CSharp.Grammar;

using Nemerle.Collections;
using Nemerle.Imperative;

namespace CSharp.Grammar.Test
{
  static class Program
  {
    static Main() : void
    {
      def topSize = 10;
      def preprocessorSymbols = ["DEBUG", "TRACE"];
      //def asmPath = Uri(Reflection.Assembly.GetCallingAssembly().CodeBase).AbsolutePath;
      //def path    = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(asmPath), @"..\..\Tests"));
      //def files   = Directory.GetFiles(path, "*.cs");
      def files   = Directory.GetFiles(@"c:\P\Tmp\", "*.cs", SearchOption.AllDirectories);
      //def files = array[@"c:\P\Tmp\aspnet-61\Samples\Net45\CS\HttpClient\GoogleMapsSample\Program.cs"];
//      def files = array[
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\VSTypeBrowserPresenterUtil.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\VsObjectBrowserNavigationPoint.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\VSObjectBrowser.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\VBTypeBrowserElementPresenter.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\ObjectBrowserNavigationProvider.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\NavigateToObjectBrowserActionHandler.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\NaviagateToObjectBrowserProvider.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\IVSTypeBrowserElementPresenter.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\TypeBrowser\CSharpTypeBrowserElementPresenter.cs",
//@"c:\P\Tmp\src\VisualStudio\_Core\Src\Theming\VsLiveTemplatesColorFiller.cs",
//];

      //def files = files.Take(200).ToArray();
      
      def (count, len) = files.FoldI((0, 0L), (i, file, (_, len)) => (i, FileInfo(file).Length + len));
      def len = len + 1;
      
      WriteLine($"Processing $count files. Total size: $len");

      def timer = Diagnostics.Stopwatch.StartNew();
      def timer2 = Diagnostics.Stopwatch();
      def times = List(len :> int);
      def report()
      {
        timer.Stop();
        def lenInMb = (len :> double) / 1024 / 1024;
        WriteLine($"Processed $count files. Total size: $lenInMb MB. Processing took: $(timer.Elapsed). MB/sec. $((lenInMb : double) / timer.Elapsed.TotalSeconds).");
        def top = times.ZipLazy(files).Take(20).OrderByDescending((time, _) => time);
        Console.ResetColor();
        WriteLine($"  Top $topSize of most slowest files:");
        Console.ForegroundColor = ConsoleColor.DarkCyan;
        
        WriteLine("     Took              Size (KB)   File");
        foreach ((time, file) in top with i)
        {
          def fileLen    = FileInfo(file).Length;
          def strLen     = (fileLen / 1024.0).ToString("N");
          def paddingLen = 8 - strLen.Length;
          def peddedLen  = (if (paddingLen > 0) string(' ', paddingLen) else "") + strLen;
          WriteLine($"     $time $peddedLen  $(file)");
        }
        
        Console.ResetColor();
        _ = ReadLine();
      }
      
      
      foreach (file in files with i)
      {
        def parser = CSharpParser();
        Write(file);
        timer2.Restart();
        def ast = parser.Parse(File.ReadAllText(file, Text.Encoding.UTF8), i, file, preprocessorSymbols);
        times.Add(timer2.Elapsed);
        
        if (ast.Errors.IsEmpty)
          WriteLine(":  OK");
        else foreach (error in ast.Errors)
        {
          Console.ForegroundColor = ConsoleColor.Red;
          def msg = $@"$(error.Location.EndLineColumn): Parsing error.";
          WriteLine(msg);
          Debug.WriteLine(file + msg);
          Console.ResetColor();
          
          foreach (tok in error.ExpectedTokens)
          {
            def msg = $@"    Expected rule: $(tok.Rule.Name)";
            WriteLine(msg);
            Debug.WriteLine(msg);
          }

          Console.ForegroundColor = ConsoleColor.DarkGray;
          report();
          Console.ResetColor();
          return; 
        }
          
          
        //WriteLine("-----------------------------------------------------");
        //WriteLine(ast.GetDump());
      }

    Console.ForegroundColor = ConsoleColor.Green;
    report();
    Console.ResetColor();
    }
  }
}
