using System;
using System.Console;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

using CSharp.Grammar;

using Nemerle.Imperative;

namespace CSharp.Grammar.Test
{
  static class Program
  {
    static Main() : void
    {
      def preprocessorSymbols = ["DEBUG", "TRACE"];
      //def asmPath = Uri(Reflection.Assembly.GetCallingAssembly().CodeBase).AbsolutePath;
      //def path    = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(asmPath), @"..\..\Tests"));
      //def files   = Directory.GetFiles(path, "*.cs");
      def files   = Directory.GetFiles(@"C:\P\Tmp\Psi", "*.cs", SearchOption.AllDirectories);
      
      foreach (file in files with i)
      {
        def parser = CSharpParser();
        def ast = parser.Parse(File.ReadAllText(file, Text.Encoding.UTF8), i, file, preprocessorSymbols);
        
        if (ast.Errors.IsEmpty)
        {
          def msg = file + ":  OK";
          Debug.WriteLine(msg);
          WriteLine(msg);
        }
        else foreach (error in ast.Errors)
        {
          def msg = $@"$file$(error.Location.EndLineColumn): Parsing error.";
          WriteLine(msg);
          Debug.WriteLine(msg);
          
          foreach (tok in error.ExpectedTokens)
          {
            def msg = $@"    Expected rule: $(tok.Rule.Name)";
            WriteLine(msg);
            Debug.WriteLine(msg);
          }
          
          return; 
        }
          
          
        //WriteLine("-----------------------------------------------------");
        //WriteLine(ast.GetDump());
      }
    }
  }
}
