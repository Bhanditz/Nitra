using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

[Record]
[StructuralEquality]
public struct State
{
  public Id : int;
  public Signal : Signal;
  public override ToString() : string
  {
    $"$Id $Signal"
  }
}

[Record]
[StructuralEquality]
public variant Signal
{
  | Token { Str : string; }
  | Call  { Name : string; }
  | Begin { Name : string; }
  | End   { Name : string; }

  public override ToString() : string
  {
    match (this)
    {
      | Token as signal => $"Token $(signal.Str)"
      | Call  as signal => $"Call $(signal.Name)"
      | Begin as signal => $"Begin $(signal.Name)"
      | End   as signal => $"End $(signal.Name)"
    }
  }
}

[Record]
[StructuralEquality]
public struct ParseRecord
{
  public Caller : State;
  public State  : State;
}

public class ParseResult
{
  public StartRule : string;
  public Text : string;
  public Grammar : Grammar;

  public Records : array[HashSet[ParseRecord]];

  public this(startRule : string, text : string, grammar : Grammar)
  {
    StartRule = startRule;
    Text      = text;
    Grammar   = grammar;
  }
}

public class Grammar
{
  private _rules       : Hashtable[string, State * State] = Hashtable();
  private _states      : List[State] = List();
  private _transitions : List[HashSet[int]] = List();

  private NewRule(name : string) : State * State
  {
    mutable beginEnd;
    unless (_rules.TryGetValue(name, out beginEnd))
    {
      beginEnd = (NewState(Signal.Begin(name)), NewState(Signal.End(name)));
      _rules.Add(name, beginEnd);
    }
    beginEnd
  }

  private NewState(rule : Signal) : State
  {
    def id = _states.Count;
    def state = State(id, rule);
    _states.Add(state);
    _transitions.Add(HashSet());
    state
  }

  public Add(name : string, signals : array[Signal]) : void
  {
    def (begin, end) = NewRule(name);
    mutable prev = begin;
    foreach (signal in signals)
    {
      nextSignal:
      {
        foreach (next in _transitions[prev.Id])
        {
          def state = _states[next];
          when (state.Signal.Equals(signal))
          {
            prev = state;
            nextSignal();
          }
        }
        def state = NewState(signal);
        _ = _transitions[prev.Id].Add(state.Id);
        prev = state;
      }
    }
    _ = _transitions[prev.Id].Add(end.Id);
  }

  public Parse(startRule : string, text : string) : ParseResult
  {
    def result = ParseResult(startRule, text, this);
    def (beginState, endState) = _rules[startRule];

    def nextStates(state : State)
    {
      _transitions[state.Id].Map(id => _states[id])
    }

    def startParse(pos, caller, state)
    {
      mutable states;
      when (result.Records[pos] == null)
      {
        states = HashSet();
        result.Records[pos] = states;
      }
      _ = states.Add(ParseRecord(caller, state));
    }

    foreach (next in nextStates(beginState))
      startParse(0, beginState, next);

    mutable curPos = 0;

    result
  }
}

module Program
{
  Main() : void
  {
    def grammar = Grammar();
    grammar.Add("S", array[Signal.Call("A")]);
    grammar.Add("A", array[Signal.Token("a")]);
    grammar.Add("A", array[Signal.Call("A"), Signal.Call("A")]);
    grammar.Add("A", array[Signal.Call("A"), Signal.Call("A"), Signal.Call("A")]);
    grammar.Add("A", array[Signal.Call("B")]);
    grammar.Add("B", array[]);
    grammar.Add("B", array[Signal.Call("A")]);

    def result = grammar.Parse("A", "aaaaaaaaaaaaaaaaaa");

    _ = ReadLine();
  }
}
