using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

module Test
{
  public Run[T](root : T) : T
    where T : Declaration
  {
    def context = Context();
    mutable calculatedCount;
    mutable passCount = 0;
    do
    {
      context.DeferredCount = 0;
      calculatedCount = context.CalculatedCount;
      root.Calc(context);
      passCount++;
    }
    while (context.DeferredCount > 0 && calculatedCount != context.CalculatedCount);

    WriteLine("passCount=" + passCount);
    WriteLine("context.CalculatedCount=" + context.CalculatedCount);
    WriteLine("context.DeferredCount=" + context.DeferredCount);
    root
  }
}

public class Context
{
  public CalculatedCount : int { get; private set; }
  public DeferredCount   : int { get; set; }
  public CalculatedCountInc() : void { CalculatedCount++; }
  public DeferredCountInc()   : void { DeferredCount++; }
  
  public override ToString() : string { $"Calculated=$CalculatedCount Deferred=$DeferredCount" }
}

public abstract class Declaration : IDeclaration
{
  mutable _calculatedInfo : int;
  
  public abstract Calc(context : Context) : void;
  
  public Calculated(attrIndex : int) : bool
  {
    def mask = 1 << attrIndex;
    mask & _calculatedInfo == mask
  }

  protected SetCalculated(attrIndex : int) : void
  {
    def mask = 1 << attrIndex;
    _calculatedInfo |= mask;
  }
}

public interface IDeclaration { }
