using Nitra.DependentProperties;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

[Record]
public class D1 : Declarations
{
  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }
  
  public D2 : D2 { get; }
  public X : int { get; }
  
  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr0 = Attr1 + D2.Attr0 + D2.D3.Attr0; // 1 -> 2 3
    // D2.Calc(context);                    // 2 -> 4
    Attr1 = D2.Attr0;                       // 3 -> 2
    D2.Attr1 = Attr1;                       // 4 -> 3
  }
}

[Record]
public class D2 : Declarations
{
  public D3 : D3 { get; }

  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }

  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr1 = D3.Attr1;
    D3.Attr0 = Attr0;
  }
}

[Record]
public class D3 : Declarations
{
  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }

  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr1 = Attr0;
  }
}

[Record]
public class C1
{
  public Field1 : int { get; set; }
  public Field2 : int { get; set; }
}

module Program
{
  Main() : void
  {
    def context = Context();
    def root = D1(D2(D3()), 42);
    mutable calculatedCount;
    do
    {
      context.DeferredCount = 0;
      calculatedCount = context.CalculatedCount;
      root.Calc(context);
    }
    while (calculatedCount != context.CalculatedCount);
    
    WriteLine("context.CalculatedCount=" + context.CalculatedCount);
    WriteLine("root.Attr0=" + root.Attr0);
    WriteLine("root.Attr1=" + root.Attr1);
    _ = ReadLine();
  }
}

#region Base types

public class Context
{
  public CalculatedCount : int { get; private set; }
  public DeferredCount   : int { get; set; }
  public CalculatedCountInc() : void { CalculatedCount++; }
  public DeferredCountInc()   : void { DeferredCount++; }
  
  public override ToString() : string { $"Calculated=$CalculatedCount Deferred=$DeferredCount" }
}

public abstract class Declarations : IDeclaration
{
  mutable _calculatedInfo : int;
  
  public abstract Calc(context : Context) : void;
  
  public Calculated(attrIndex : int) : bool
  {
    def mask = 1 << attrIndex;
    mask & _calculatedInfo == mask
  }

  protected SetCalculated(attrIndex : int) : void
  {
    def mask = 1 << attrIndex;
    _calculatedInfo |= mask;
  }
}

public interface IDeclaration { }

#endregion Base types
