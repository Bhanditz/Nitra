using Nitra.DependentProperties;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

public class DTest : Declarations
{
  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }
  [Dependent] public Attr2 : int { get; set; }
  
  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr0 = 42;
  }
}


public class Context
{
  public CalculatedCount : int { get; private set; }
  public DeferredCount   : int { get; set; }
  public CalculatedCountInc() : void { CalculatedCount++; }
  public DeferredCountInc()   : void { DeferredCount++; }
  
  public override ToString() : string { $"Calculated=$CalculatedCount Deferred=$DeferredCount" }
}

public abstract class Declarations : IDeclarations
{
  mutable _calculatedInfo : int;
  
  public abstract Calc(context : Context) : void;
  
  public Calculated(attrIndex : int) : bool
  {
    def mask = 1 << attrIndex;
    mask & _calculatedInfo == mask
  }

  protected SetCalculated(attrIndex : int) : void
  {
    def mask = 1 << attrIndex;
    _calculatedInfo |= mask;
  }
}

public interface IDeclarations { }

[Record]
public class D1 : Declarations
{
  [RecordIgnore] mutable _attr0 : int;
  [RecordIgnore] mutable _attr1 : int;
  
  public Attr0 : int { get { assert3(Calculated(0)); _attr0 } set { assert3(!Calculated(0)); _attr0 = value; SetCalculated(0) } }
  public Attr1 : int { get { assert3(Calculated(1)); _attr1 } set { assert3(!Calculated(1)); _attr1 = value; SetCalculated(1) } }
  
  public D2 : D2;
  public X : int;
  
  public override Calc(context : Context) : void
  {
    // Attr0
    unless (Calculated(0))
      if (/*Attr1*/ Calculated(1) && /*D2.Attr1*/ D2.Calculated(1) && /*D2.D3.Attr0*/ D2.D3.Calculated(0))
      {
        Attr0 = Attr1 + D2.Attr1 + D2.D3.Attr0;
        context.CalculatedCountInc();
      }
      else
        context.DeferredCountInc();
      
    // Attr1
    unless (Calculated(1))
      if (D2.Calculated(0))
      {
        Attr1 = D2.Attr0;
        context.CalculatedCountInc();
      }
      else
        context.DeferredCountInc();
    
    unless (Calculated(1))
    {
      D2.Attr0 = X; // не зависит от другоих атрибутов!
      context.CalculatedCountInc();
    }
      
    D2.Calc(context);
  }
}

[Record]
public class D2 : Declarations
{
  [RecordIgnore] mutable _attr0 : int;
  [RecordIgnore] mutable _attr1 : int;

  public D3 : D3;

  public Attr0 : int { get { assert3(Calculated(0)); _attr0 } set { assert3(!Calculated(0)); _attr0 = value; SetCalculated(0) } }
  public Attr1 : int { get { assert3(Calculated(1)); _attr1 } set { assert3(!Calculated(1)); _attr1 = value; SetCalculated(1) } }

  public override Calc(context : Context) : void
  {
    unless (Calculated(1))
      if (D3.Calculated(1))
      {
        Attr1 = D3.Attr1;
        context.CalculatedCountInc();
      }
      else
        context.DeferredCountInc();
      
    unless (D3.Calculated(0))
      if (Calculated(0))
      {
        D3.Attr0 = Attr0;
        context.CalculatedCountInc();
      }
      else
        context.DeferredCountInc();
    
      
    D3.Calc(context);
  }
}

[Record]
public class D3 : Declarations
{
  [RecordIgnore] mutable _attr0 : int;
  [RecordIgnore] mutable _attr1 : int;

  public Attr0 : int { get { assert3(Calculated(0)); _attr0 } set { assert3(!Calculated(0)); _attr0 = value; SetCalculated(0) } }
  public Attr1 : int { get { assert3(Calculated(1)); _attr1 } set { assert3(!Calculated(1)); _attr1 = value; SetCalculated(1) } }

  public override Calc(context : Context) : void
  {
    unless (Calculated(1))
      if (Calculated(0))
      {
        Attr1 = Attr0;
        context.CalculatedCountInc();
      }
      else
        context.DeferredCountInc();
        
    // нет вложенных правил
  }
}

[Record]
public class C1
{
  public mutable Field1 : int;
  public mutable Field2 : int;
}

module Program
{
  Main() : void
  {
    def context = Context();
    def root = D1(D2(D3()), 42);
    mutable calculatedCount;
    do
    {
      context.DeferredCount = 0;
      calculatedCount = context.CalculatedCount;
      root.Calc(context);
    }
    while (calculatedCount != context.CalculatedCount);
    
    WriteLine("context.CalculatedCount=" + context.CalculatedCount);
    WriteLine("root.Attr0=" + root.Attr0);
    WriteLine("root.Attr1=" + root.Attr1);
    _ = ReadLine();
  }
}