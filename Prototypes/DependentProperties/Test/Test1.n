using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.DependentProperties;

[Record]
public class D1 : Declaration
{
  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }
  
  public D2 : D2 { get; }
  public X : int { get; }
  
  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr0 = Attr1 + D2.Attr1 + D2.D3.Attr0;
    Attr1 = D2.Attr0;
    D2.Attr0 = X; // не зависит от другоих атрибутов!
  }
}

[Record]
public class D2 : Declaration
{
  public D3 : D3 { get; }

  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }

  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr1 = D3.Attr1;
    D3.Attr0 = Attr0;
  }
}

[Record]
public class D3 : Declaration
{
  [Dependent] public Attr0 : int { get; set; }
  [Dependent] public Attr1 : int { get; set; }

  [EvalDependentProperty]
  public CalcAttrs() : void
  {
    Attr1 = Attr0;
  }
}

[Record]
public class C1
{
  public Field1 : int { get; set; }
  public Field2 : int { get; set; }
}
