using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.DependentProperties;

namespace Test
{
  [Record]
  public class Kaboom1 : Declarations
  {
    [Dependent] public I1 : int { get; set; }
    [Dependent] public O1 : int { get; set; }
    [Dependent] public I2 : int { get; set; }
    [Dependent] public O2 : int { get; set; }
    [Dependent] public I3 : int { get; set; }
    [Dependent] public O3 : int { get; set; }
    [Dependent] public I4 : int { get; set; }
    [Dependent] public O4 : int { get; set; }

    [EvalDependentProperty]
    public CalcAttrs() : void
    {
      O1 = I1;
      O2 = I2;
      O3 = I3;
      O4 = I4;
    }
  }

  [Record]
  public class Kaboom2 : Declarations
  {
    [Dependent] public I : int { get; set; }
    [Dependent] public O : int { get; set; }

    public Kaboom : Kaboom1 { get; }

    [EvalDependentProperty]
    public CalcAttrs() : void
    {
      Kaboom.I1 = I;//error : You can assign only a dependent property.
      Kaboom.I2 = Kaboom.O1;
      Kaboom.I3 = Kaboom.O2;
      Kaboom.I4 = Kaboom.O3;
      O = Kaboom.O4;
    }
  }

  [Record]
  public class Kaboom3 : Declarations
  {
    public K1 : Kaboom2 { get; }
    public K2 : Kaboom2 { get; }
    public K3 : Kaboom2 { get; }

    [EvalDependentProperty]
    public CalcAttrs() : void
    {
      K1.I = 1;
      K2.I = K1.O;
      K3.I = K2.O;
    }
  }
}
