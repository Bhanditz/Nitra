using System.Reflection;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

namespace Utils
{
  module X
  {
    static ToolsDir = "ExternalTools";

    public VisualizeDot(dot : string) : void
    {
      def fileName = Path.ChangeExtension(Path.GetTempFileName(), "dot");
      File.WriteAllText(fileName, dot);
      X.VisualizeDotFile(fileName);
    }
    
    public VisualizeDotFile(sourcePath : string, show : bool = true) : void
    {
      def svgFileName = Path.ChangeExtension(sourcePath, "svg");
      def process = Process.Start(FindDotExe(), $<#$sourcePath -o $svgFileName -Tsvg#>);
      process.WaitForExit();
      when (show)
        _ = Process.Start(svgFileName);
    }

    public DotEscape(x : string) : string
    {
      x.Replace("\\", <#\\#>).Replace(<#"#>, <#\"#>)
    }

    private FindDotExe() : string
    {
      def dir = Path.GetDirectoryName(Path.GetFullPath(Assembly.GetExecutingAssembly().Location));
      def findDot(dir : string) : string
      {
        if (Directory.Exists(Path.Combine(dir, ToolsDir)))
          Path.Combine(dir, ToolsDir, @"DOT\dot.exe")
        else
        {
          def parent = Directory.GetParent(dir);
          if (parent == null)
            null
          else
            findDot(parent.FullName)
        }
      }
 
      findDot(dir)
}
  }
}
