using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nitra.DependentProperties
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro EvalDependentProperty(typeBuilder : TypeBuilder, method : MethodBuilder)
  {
    EvalDependentPropertyImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, method)
  }
  
  partial module EvalDependentPropertyImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, method : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      def calc = typeBuilder.GetMethods().FindObject(m => m.Name == "Calc") :> MethodBuilder;

      when (calc != null)
      {
        calc.Body = method.Body;
        method.Body = <[ () ]>;
        typeBuilder.MethodBeforeStage2 += fun (o, e)
        {
          when (e.Typer.CurrentFunction.Name != "Calc")
            return;
            
          when (e.Typer.CurrentFunction.Body is FunBody.Typed(TExpr.Block(_, body)))
          {
            def walkLeftExpr(expr : TExpr) : void
            {
            }
            def walkRightExpr(expr : TExpr) : void
            {
            }
            def loop(expr : TExpr) : void
            {
              | TExpr.DebugInfo(e, _) => loop(e)
              | TExpr.Assign(target, source) => walkLeftExpr(target); walkRightExpr(source);
              | _ => walkRightExpr(expr);
              //| _ => Message.FatalError(expr.Location, $"Unsuported expression '$expr' ($(expr.GetType().Name))")
            }
            assert2(true);
            loop(body);
            _ = body;
          }
        }
      }
    }
  }
}
