using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nitra.DependentProperties
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro EvalDependentProperty(typeBuilder : TypeBuilder, method : MethodBuilder)
  {
    EvalDependentPropertyImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, method)
  }
  
  partial module EvalDependentPropertyImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, method : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      def calc = typeBuilder.GetMethods().FindObject(m => m.Name == "Calc") :> MethodBuilder;

      when (calc != null)
      {
        assert2(false);
        
        calc.Body = method.Body;
        method.Body = <[ () ]>;
        def onMethodBeforeStage2(_, e : StageEventArgs)
        {
          when (e.Typer.CurrentFunction.Name == "Calc")
          {
            def getPropIndex(prop : IProperty)
            {
              def typeBuilder = typeBuilder;
              def prop = prop :> PropertyBuilder;
              match (typeBuilder.UserData["DependentPropertyName:" + prop.Name])
              {
                | index is int => index
                | _ => -1
              }
            }
            def makeDependentPropertiesIsCalculated(expr : TExpr) : PExpr
            {
              def checks = List();
              def walker = ExprWalker();
              def walk(info : ExprWalkInfo) : void
              {
                  match (info.Node)
                  {
                    | TExpr.PropertyMember as e => 
                      def index = getPropIndex(e.prop);
                      when (index >= 0)
                        checks.Add(<[ $(e.obj : typed).Calculated($index) ]>);
                    
                    | _ => ()
                  }
              }
              walker.Walk(expr, walk);
              
              if (checks.Count > 0)
                <[ @&&(..$checks) ]>
              else
                <[ true ]>
            }
            def processAssignProp(assign : TExpr.Assign) : PExpr
            {
              match (assign.target)
              {
                | TExpr.PropertyMember as e =>
                  match (getPropIndex(e.prop))
                  {
                    | -1 => Message.FatalError(e.Location, "You can assign only a dependent property.");
                    | index => 
                      match (makeDependentPropertiesIsCalculated(assign.source))
                      {
                        | <[ true ]> =>
                          <[ 
                            unless ($(e.obj : typed).Calculated($index))
                            {
                              $(assign : typed);
                              context.CalculatedCountInc();
                            } ]>;
                          
                        | conditions =>
                          <[ 
                            unless ($(e.obj : typed).Calculated($index))
                              if ($conditions)
                              {
                                $(assign : typed);
                                context.CalculatedCountInc();
                              }
                              else
                                context.DeferredCountInc(); ]>;
                      }
                      
                  }
                
                | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
              }
            }
            if (e.Typer.CurrentFunction.Body is FunBody.Typed(TExpr.Block(_, expr)))
            {
              def result = List();
              def loop(expr : TExpr) : void
              {
                | TExpr.DebugInfo as e => loop(e.expr)
                | TExpr.Sequence as e => loop(e.e1); loop(e.e2);
                | TExpr.Assign as e => result.Add(processAssignProp(e));
                | e =>
                  match (makeDependentPropertiesIsCalculated(e))
                  {
                    | <[ true ]> => result.Add(<[  $(e : typed); ]>);
                    | conditions =>
                      result.Add(<[ 
                          when ($conditions)
                          {
                            $(e : typed);
                          } ]>);
                  }
              }
              loop(expr);
              typeBuilder.MethodBeforeStage2 -= onMethodBeforeStage2;
              def code = <[ { ..$result } ]>;
              method.Body = code;
              method.RunBodyTyper();
            }
            else
              Message.Error(e.Typer.CurrentFunction.Location, "Unsupporten dependent properties syntax.");
          }
          _ = e.Typer;
        }
        typeBuilder.MethodBeforeStage2 += onMethodBeforeStage2;
      }
    }
  }
}
