using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.DependentProperties.PropertiesDependencyGraph;


namespace Nitra.DependentProperties
{
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro EvalDependentProperty(typeBuilder : TypeBuilder, method : MethodBuilder)
  {
    EvalDependentPropertyImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, method)
  }
  
  partial module EvalDependentPropertyImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, method : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      
      def errorUnexpectedExpr[T](expr : TExpr) : T
      {
        Message.FatalError(expr.Location, $"Unexpected expression '$expr' $(expr.GetType().Name)")
      }
      
      def calc = typeBuilder.GetMethods().FindObject(m => m.Name == "Calc") :> MethodBuilder;

      when (calc != null)
      {
        calc.Body = method.Body;
        method.Body = <[ () ]>;
        def nodesMap = Hashtable();
        def toKey(expr : TExpr, acc : list[IProperty] = []) : list[IProperty]
        {
          match (expr)
          {
            | TExpr.PropertyMember as e => toKey(e.obj, e.prop :: acc)
            | TExpr.Base => acc
            | TExpr.This => acc
            | _ => errorUnexpectedExpr(expr)
          }
        }
        def onMethodBeforeStage2(_, e : StageEventArgs)
        {
          when (e.Typer.CurrentFunction.Name == "Calc")
          {
            def getPropIndex(prop : IProperty)
            {
              def typeBuilder = typeBuilder;
              def prop = prop :> PropertyBuilder;
              match (typeBuilder.UserData["DependentPropertyName:" + prop.Name])
              {
                | index is int => index
                | _ => -1
              }
            }
            def makeDependentPropertiesIsCalculated(expr : TExpr, node : Node) : PExpr
            {
              def checks = List();
              def walker = ExprWalker();
              def walk(info : ExprWalkInfo) : void
              {
                  match (info.Node)
                  {
                    | TExpr.PropertyMember as e => 
                      def index = getPropIndex(e.prop);
                      when (index >= 0)
                      {
                        def nodesMap = nodesMap;
                        def key = toKey(e);
                        mutable to;
                        unless (nodesMap.TryGetValue(key, out to))
                        {
                          to = Node.UseProp(e);
                          nodesMap[key] = to;
                        }
                        node.DependendOn.Add(to);
                        checks.Add(<[ $(e.obj : typed).Calculated($index) ]>);
                      }
                    
                    | TExpr.Delayed => 
                      // мы не можем производить преобразование, если у нас остались объкты отложенной типизации
                      assert2(false);
                      typeBuilder.MethodBeforeStage2 -= onMethodBeforeStage2;
                      throw RestartRunBodyTyperException();
                      
                    | _ => ()
                  }
              }
              walker.Walk(expr, walk);
              
              if (checks.Count >= 2)
              {
                def result = checks.Fold(<[ true ]>, (chk, acc) => <[ $acc && $chk ]>);
                result
              }
              else if (checks.Count == 1)
                <[ $(checks[0]) ]>
              else
                <[ true ]>
            }
            def addKey(assign : TExpr.Assign) : void
            {
              match (assign.target)
              {
                | TExpr.PropertyMember as e =>
                  match (getPropIndex(e.prop))
                  {
                    | -1 => Message.FatalError(e.Location, "You can assign only a dependent property.");
                    | _ => 
                      def key = toKey(e);
                      def node = Node.AssignProp(assign);
                      nodesMap[key] = node;
                  }
                
                | TExpr.Delayed => assert3(false);
                | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
              }
            }
            def processAssignProp(assign : TExpr.Assign) : PExpr
            {
              match (assign.target)
              {
                | TExpr.PropertyMember as e =>
                  match (getPropIndex(e.prop))
                  {
                    | -1 => Message.FatalError(e.Location, "You can assign only a dependent property.");
                    | index => 
                      def nodesMap = nodesMap;
                      def key = toKey(e);
                      def node = nodesMap[key];
                      match (makeDependentPropertiesIsCalculated(assign.source, node))
                      {
                        | <[ true ]> =>
                          <[ 
                            unless ($(e.obj : typed).Calculated($index))
                            {
                              $(assign : typed);
                              context.CalculatedCountInc();
                            } ]>;
                          
                        | conditions =>
                          <[ 
                            unless ($(e.obj : typed).Calculated($index))
                              if ($conditions)
                              {
                                $(assign : typed);
                                context.CalculatedCountInc();
                              }
                              else
                                context.DeferredCountInc(); ]>;
                      }
                      
                  }
                
                | TExpr.Delayed => assert3(false);
                | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
              }
            }
            if (e.Typer.CurrentFunction.Body is FunBody.Typed(TExpr.Block(_, expr2)))
            {
              def removeDelayed(expr : TExpr) : TExpr
              {
                | PropertyMember as e => 
                  def newObj = e.obj.Walk(removeDelayed);
                  if (newObj : object != e.obj)
                  {
                    def res = TExpr.PropertyMember(e.Type, newObj, e.prop);
                    res.Location = e.Location;
                    res
                  }
                  else
                    e
                  
                | TExpr.Delayed as d when d.susp.IsResolved => d.susp.ResolutionResult
                | _ => null
              }
              def expr = expr2.Walk(removeDelayed);
              def result = List();
              def addAssigns(expr : TExpr) : void
              {
                | TExpr.Delayed => assert3(false);
                | TExpr.DebugInfo as e => addAssigns(e.expr)
                | TExpr.Sequence as e => addAssigns(e.e1); addAssigns(e.e2);
                | TExpr.Assign as e => addKey(e);
                | e => _ = errorUnexpectedExpr(e)
              }
              def calcDependents(expr : TExpr) : void
              {
                | TExpr.Delayed => assert3(false);
                | TExpr.DebugInfo as e => calcDependents(e.expr)
                | TExpr.Sequence as e => calcDependents(e.e1); calcDependents(e.e2);
                | TExpr.Assign as e => result.Add(processAssignProp(e));
                | e => _ = errorUnexpectedExpr(e)
              }
              addAssigns(expr);
              calcDependents(expr);
              
              Node.Visualize(nodesMap.Values, typeBuilder.Name);
              
              def declarationsTypeInfo = typer.BindFixedType(<[ IDeclaration ]>).TypeInfo;
              def fields1 = typeBuilder.GetProperties();
              def fields2 = fields1.Filter(p => p.GetMemType().TypeInfo.IsDerivedFrom(declarationsTypeInfo));
              def ty = typeBuilder.GetMemType();
              foreach (x in fields2)
                nodesMap[[x]] = Node.CalcDependentProp(x, ty);
              def walkNested = fields2.Map(f => <[ this.$(f.Name : global).Calc(context) ]>);
              
              def code = <[ { ..$result } { ..$walkNested } ]>;
              calc.Body = code;
              
              
              typeBuilder.MethodBeforeStage2 -= onMethodBeforeStage2;
              throw RestartRunBodyTyperException();
            }
            else
              Message.Error(e.Typer.CurrentFunction.Location, "Unsupporten dependent properties syntax.");
          }
        }
        typeBuilder.MethodBeforeStage2 += onMethodBeforeStage2;
      }
    }
  }
}
