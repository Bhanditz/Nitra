using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.DependentProperties.PropertiesDependencyGraph;

type Key = list[Nemerle.Compiler.IProperty];

namespace Nitra.DependentProperties
{
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro EvalDependentProperty(typeBuilder : TypeBuilder, method : MethodBuilder)
  {
    EvalDependentPropertyImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, method)
  }
  
  partial module EvalDependentPropertyImpl
  {
    private MakeDependencyGraph(typeBuilder : TypeBuilder, expr : TExpr) : Hashtable[Key, Node]
    {
      def nodesMap = Hashtable();
      def toKey(expr : TExpr, acc : list[IProperty] = []) : list[IProperty]
      {
        match (expr)
        {
          | TExpr.PropertyMember as e => toKey(e.obj, e.prop :: acc)
          | TExpr.Base => acc
          | TExpr.This => acc
          | _ =>  ErrorUnexpectedExpr(expr); null
        }
      }
      def getPropIndex(prop : IProperty) : int
      {
        def typeBuilder = typeBuilder;
        def prop = prop :> PropertyBuilder;
        match (typeBuilder.UserData["DependentPropertyName:" + prop.Name])
        {
          | index is int => index
          | _ => -1
        }
      }
      def addNodesDependentOnAssignedProperty(expr : TExpr, node : Node) : void
      {
        def walker = ExprWalker();
        def walk(info : ExprWalkInfo) : void
        {
            match (info.Node)
            {
              | TExpr.PropertyMember as e => 
                def index = getPropIndex(e.prop);
                when (index >= 0)
                {
                  def nodesMap = nodesMap;
                  def key = toKey(e);
                  mutable to;
                  unless (nodesMap.TryGetValue(key, out to))
                  {
                    to = Node.UseProp(e, index);
                    nodesMap[key] = to;
                  }
                  node.DependendOn.Add(to);
                }
                    
              | TExpr.Delayed => 
                // мы не можем производить преобразование, если у нас остались объкты отложенной типизации
                assert3(false);
                      
              | _ => ()
            }
        }
        walker.Walk(expr, walk);
      }
      def addKey(assign : TExpr.Assign) : void
      {
        match (assign.target)
        {
          | TExpr.PropertyMember as e =>
            match (getPropIndex(e.prop))
            {
              | -1 => Message.FatalError(e.Location, "You can assign only a dependent property.");
              | index => 
                def key = toKey(e);
                def node = Node.AssignProp(assign, e, index);
                nodesMap[key] = node;
            }
                
          | TExpr.Delayed => assert3(false);
          | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
        }
      }
      def processAssignProp(assign : TExpr.Assign) : void
      {
        match (assign.target)
        {
          | TExpr.PropertyMember as e =>
            match (getPropIndex(e.prop))
            {
              | -1 => Message.FatalError(e.Location, "You can assign only a dependent property.");
              | _ => 
                def nodesMap = nodesMap;
                def key = toKey(e);
                def node = nodesMap[key] :> Node.AssignProp;
                addNodesDependentOnAssignedProperty(assign.source, node);
            }
                
          | TExpr.Delayed => assert3(false);
          | _ => Message.FatalError(assign.target.Location, "You can assign only a dependent property.");
        }
      }
      def addAssigns(expr : TExpr) : void
      {
        | TExpr.Delayed => assert3(false);
        | TExpr.DebugInfo as e => addAssigns(e.expr)
        | TExpr.Sequence as e => addAssigns(e.e1); addAssigns(e.e2);
        | TExpr.Assign as e => addKey(e);
        | e => ErrorUnexpectedExpr(e)
      }
      def calcDependents(expr : TExpr) : void
      {
        | TExpr.Delayed => assert3(false);
        | TExpr.DebugInfo as e => calcDependents(e.expr)
        | TExpr.Sequence as e => calcDependents(e.e1); calcDependents(e.e2);
        | TExpr.Assign as e => processAssignProp(e);
        | e => ErrorUnexpectedExpr(e)
      }
      
      addAssigns(expr);
      calcDependents(expr);
      nodesMap
    }
    
    private DslValidation(expr : TExpr) : TExpr
    {
      def walker = ExprWalker();
      def checkInvalidExpre(info : ExprWalkInfo) : void
      {
          match (info.Node)
          {
            | TExpr.DefFunctionsIn as e 
            | TExpr.DefValIn as e 
            | TExpr.Block as e
            | TExpr.Error as e
            | TExpr.SelfTailCall as e
            | TExpr.MultipleAssign as e
              => ErrorUnexpectedExpr(e);
            | _ => ()
          }
      }
      walker.Walk(expr, checkInvalidExpre);
              
      def removeDelayed(expr : TExpr) : TExpr
      {
        | PropertyMember as e => 
          def newObj = e.obj.Walk(removeDelayed);
          if (newObj : object != e.obj)
          {
            def res = TExpr.PropertyMember(e.Type, newObj, e.prop);
            res.Location = e.Location;
            res
          }
          else
            e
                  
        | TExpr.Delayed as d when d.susp.IsResolved => d.susp.ResolutionResult
        | _ => null
      }
      
      expr.Walk(removeDelayed)
    }
    
    AddDependencyOnDeclarationProperties(typeBuilder : TypeBuilder, typer : Typer, nodesMap : Hashtable[Key, Node]) : void
    {
      def graphNodes = nodesMap.Values.ToArray();
      def declarationsTypeInfo = typer.BindFixedType(<[ IDeclaration ]>).TypeInfo;
      def props = typeBuilder.GetProperties();
      def declarationProps = props.Filter(p => p.GetMemType().TypeInfo.IsDerivedFrom(declarationsTypeInfo));
      def declarationPropNodes = declarationProps.MapToArray(p => Node.DependentProp(p));
      foreach (declarationPropNode in declarationPropNodes)
        nodesMap[[declarationPropNode.Prop]] = declarationPropNode;
              
      def getRootProp(expr : TExpr) : IProperty
      {
        | TExpr.PropertyMember as p => if (p.obj is TExpr.Base || p.obj is TExpr.This) p.prop else getRootProp(p.obj)
        | _ => Message.FatalError(expr.Location, "Properties must only be used.")
      }
              
      def synthesizedProps = graphNodes.OfType.[Node.UseProp]();
      foreach (synthesizedProp in synthesizedProps)
      {
        def prop = getRootProp(synthesizedProp.Expr);
        foreach (declarationProp in declarationPropNodes)
          when (prop : object == declarationProp.Prop)
            synthesizedProp.DependendOn.Add(declarationProp);
      }

      def inheritedProps = graphNodes.OfType.[Node.AssignProp]();
      foreach (inheritedProp in inheritedProps)
      {
        def prop = getRootProp(inheritedProp.Expr.target);
        foreach (declarationProp in declarationPropNodes)
          when (prop : object == declarationProp.Prop)
            declarationProp.DependendOn.Add(inheritedProp);
      }

      def nodes = nodesMap.Values.NToArray();
      def cycled2 = Node.Sort(nodes);
      when (cycled2)
      {
        def dependentProps = graphNodes.OfType.[Node.DependentProp]();
        foreach (dependentProp when dependentProp.State == NodeState.Cycling in dependentProps.ToArray())
          _ = dependentProp.DependendOn.RemoveAll(inheritedProp => inheritedProp.State == NodeState.Cycling);
      }
      def cycled3 = Node.Sort(nodes);
      assert2(!cycled3);
    }
    
    GenerateCode(nodesMap : Hashtable[Key, Node]) : PExpr
    {
      def nodes = nodesMap.Values.ToArray();
      _ = nodes.SortInplace((l, r) => l.Order - r.Order);
              
      //Node.Visualize(nodesMap.Values, typeBuilder.Name);
              
      // Rendering code
      def result = List();
      foreach (node in nodes)
      {
        | AssignProp    as a => 
          def code =
            if (a.DependendOn.Count > 0)
            {
              def conditions = a.DependendOn.Fold(<[ true ]>, (p, acc) =>  <[ $acc && $(p.Obj : typed).Calculated($(p.Index)) ]>);
              <[ 
                unless ($(a.Obj : typed).Calculated($(a.Index)))
                  if ($conditions)
                  {
                    $(a.Expr : typed);
                    context.CalculatedCountInc();
                  }
                  else
                    context.DeferredCountInc(); ]>;
            }
            else
              <[ 
                unless ($(a.Obj : typed).Calculated($(a.Index)))
                {
                  $(a.Expr : typed);
                  context.CalculatedCountInc();
                } ]>;

          result.Add(code);
                  
        | UseProp            => ()
        | DependentProp as p => result.Add(<[ this.$(p.Prop.Name : global).Calc(context) ]>);
      }
              
      def code = <[ { ..$result } ]>;
      code
    }

    ErrorUnexpectedExpr(expr : TExpr) : void
    {
      Message.FatalError(expr.Location, $"Unexpected expression '$expr' $(expr.GetType().Name)")
    }

    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, method : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      
      def calc = typeBuilder.GetMethods().FindObject(m => m.Name == "Calc") :> MethodBuilder;

      when (calc != null)
      {
        calc.Body = method.Body;
        method.Body = <[ () ]>;
        def onMethodBeforeStage2(_, e : StageEventArgs)
        {
          when (e.Typer.CurrentFunction.Name == "Calc")
          {
            if (e.Typer.CurrentFunction.Body is FunBody.Typed(TExpr.Block(_, bodyExpr)))
            {
              def expr       = DslValidation(bodyExpr);
              def nodesMap   = MakeDependencyGraph(typeBuilder, expr);
              def graphNodes = nodesMap.Values.ToArray();
              
              def cycled = Node.Sort(graphNodes);
              
              when (cycled)
              {
                def cycledNodes = Node.FindCycling(graphNodes);
                foreach (cycledNode in cycledNodes)
                  Message.Error(cycledNode.Location, "Is cycled.");
                
                return;
              }
              
              AddDependencyOnDeclarationProperties(typeBuilder, typer, nodesMap);
              calc.Body = GenerateCode(nodesMap);
              typeBuilder.MethodBeforeStage2 -= onMethodBeforeStage2;
              throw RestartRunBodyTyperException();
            }
            else
              Message.Error(e.Typer.CurrentFunction.Location, "Unsupporten dependent properties syntax.");
          }
        }
        typeBuilder.MethodBeforeStage2 += onMethodBeforeStage2;
      }
    }
  }
}
