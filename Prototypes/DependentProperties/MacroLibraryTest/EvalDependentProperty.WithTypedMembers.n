using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nitra.DependentProperties
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro EvalDependentProperty(typeBuilder : TypeBuilder, method : MethodBuilder)
  {
    EvalDependentPropertyImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, method)
  }
  
  partial module EvalDependentPropertyImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, method : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
      def calc = typeBuilder.GetMethods().FindObject(m => m.Name == "Calc") :> MethodBuilder;

      when (calc != null)
      {
        assert2(false);
        
        calc.Body = <[ _ = $("context" : global); $(method.Body) ]>;
        method.Body = <[ () ]>;
        typeBuilder.MethodBeforeStage2 += fun (_, e)
        {
          assert2(false);
          _ = e.Typer;
        }
      }
    }
  }
}
