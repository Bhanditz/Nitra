using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nitra.DependentProperties
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Property)]
  macro Dependent(typeBuilder : TypeBuilder, property : ClassMember.Property)
  {
    DependentImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, property)
  }
  
  module DependentImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, property : ClassMember.Property) : void
    {
      Macros.DefineCTX(typer);
      //assert2(false);
      
      if (property is ClassMember.Property(getter=Some(ClassMember.Function(body=FunBody.Abstract) as g), setter=Some(ClassMember.Function(body=FunBody.Abstract) as s)))
      {
        //property.modifiers.AddCustomAttribute(<[ RecordIgnore ]>);
        def nameCounterObj = typeBuilder.UserData["DependentPropertyNameCounter"];
        def nameCounter = if (nameCounterObj == null) 0 else (nameCounterObj :> int);
        typeBuilder.UserData["DependentPropertyName:" + property.Name] = nameCounter;
        def name = "_N_" + property.Name;
        typeBuilder.Define(<[ decl: [RecordIgnore] private mutable $(name : usesite) : $(property.returnType);  ]>);
        g.Body = <[ assert(Calculated($nameCounter)); $(name : usesite) ]>;
        s.Body = <[ assert(!Calculated($nameCounter)); $(name : usesite) = $("value" : global); SetCalculated($nameCounter) ]>;
        typeBuilder.UserData["DependentPropertyNameCounter"] = nameCounter + 1;
      }
      else
        Message.Error(property.Location, "Dependent property must be autoproperty with getter and setter.");
      // TODO: Add implementation here.
      _ = typeBuilder; _ = property;
    }
  }
}
