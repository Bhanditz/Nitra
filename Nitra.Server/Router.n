using Nemerle;
using Nemerle.Collections;
using Nitra.Messages;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

namespace Nitra.Server
{
  class Router
  {
    _mainQueue: BlockingCollection[RouterMessage] = BlockingCollection();
    _mainThread: Thread;
    _parseQueue: BlockingCollection[ParserMessage] = BlockingCollection();
    _parseWorkers: list[ParseWorker];

    public this()
    {
      def mainThread()
      {
        foreach(msg in _mainQueue.GetConsumingEnumerable())
        {
          | ProjectOpened(assemblyVersionGuid) =>
            if (Message.AssemblyVersionGuid == assemblyVersionGuid)
              Log("Server started.");
            else
            {
              def asm = typeof(Message);
              Error($"Incorrect version of messaging assembly: '$(asm.Assembly.Location)'.");
              Environment.Exit(42);
            }
        }
      }
      _mainThread = Thread(mainThread);
      _mainThread.Start();
      _parseWorkers = $[1..Environment.ProcessorCount].Map(_ => ParseWorker(_parseQueue))
    }
    
    public AddMessage(msg : RouterMessage): void
    {
      _mainQueue.Add(msg)
    }
    
    Error(msg : string) : void
    {
      Console.ForegroundColor = ConsoleColor.Red;
      Console.WriteLine(msg);
      Console.ResetColor();
    }
    Log(msg : string) : void { Console.WriteLine(msg) }
  }
}
